var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value2) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value2 }) : obj[key] = value2;
var __publicField = (obj, key, value2) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value2);
  return value2;
};
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity)
      fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy)
      fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
function makeMap(str, expectsLowerCase) {
  const map2 = /* @__PURE__ */ Object.create(null);
  const list = str.split(",");
  for (let i2 = 0; i2 < list.length; i2++) {
    map2[list[i2]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
const EMPTY_OBJ = {};
const EMPTY_ARR = [];
const NOOP = () => {
};
const NO = () => false;
const onRE = /^on[^a-z]/;
const isOn = (key) => onRE.test(key);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el) => {
  const i2 = arr.indexOf(el);
  if (i2 > -1) {
    arr.splice(i2, 1);
  }
};
const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty$1.call(val, key);
const isArray$1 = Array.isArray;
const isMap = (val) => toTypeString(val) === "[object Map]";
const isSet = (val) => toTypeString(val) === "[object Set]";
const isDate = (val) => toTypeString(val) === "[object Date]";
const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
const isFunction = (val) => typeof val === "function";
const isString = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject$2 = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return isObject$2(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value2) => objectToString.call(value2);
const toRawType = (value2) => {
  return toTypeString(value2).slice(8, -1);
};
const isPlainObject = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const isBuiltInDirective = /* @__PURE__ */ makeMap(
  "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
);
const cacheStringFunction = (fn) => {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache2[str];
    return hit || (cache2[str] = fn(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction(
  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
);
const capitalize$1 = cacheStringFunction(
  (str) => str.charAt(0).toUpperCase() + str.slice(1)
);
const toHandlerKey = cacheStringFunction(
  (str) => str ? `on${capitalize$1(str)}` : ``
);
const hasChanged = (value2, oldValue) => !Object.is(value2, oldValue);
const invokeArrayFns = (fns, arg) => {
  for (let i2 = 0; i2 < fns.length; i2++) {
    fns[i2](arg);
  }
};
const def = (obj, key, value2) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value: value2
  });
};
const looseToNumber = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
const toNumber = (val) => {
  const n = isString(val) ? Number(val) : NaN;
  return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console";
const isGloballyWhitelisted = /* @__PURE__ */ makeMap(GLOBALS_WHITE_LISTED);
function normalizeStyle(value2) {
  if (isArray$1(value2)) {
    const res = {};
    for (let i2 = 0; i2 < value2.length; i2++) {
      const item = value2[i2];
      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString(value2)) {
    return value2;
  } else if (isObject$2(value2)) {
    return value2;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value2) {
  let res = "";
  if (isString(value2)) {
    res = value2;
  } else if (isArray$1(value2)) {
    for (let i2 = 0; i2 < value2.length; i2++) {
      const normalized = normalizeClass(value2[i2]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$2(value2)) {
    for (const name in value2) {
      if (value2[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps(props) {
  if (!props)
    return null;
  let { class: klass, style } = props;
  if (klass && !isString(klass)) {
    props.class = normalizeClass(klass);
  }
  if (style) {
    props.style = normalizeStyle(style);
  }
  return props;
}
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
const isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value2) {
  return !!value2 || value2 === "";
}
function looseCompareArrays(a, b) {
  if (a.length !== b.length)
    return false;
  let equal2 = true;
  for (let i2 = 0; equal2 && i2 < a.length; i2++) {
    equal2 = looseEqual(a[i2], b[i2]);
  }
  return equal2;
}
function looseEqual(a, b) {
  if (a === b)
    return true;
  let aValidType = isDate(a);
  let bValidType = isDate(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a.getTime() === b.getTime() : false;
  }
  aValidType = isSymbol(a);
  bValidType = isSymbol(b);
  if (aValidType || bValidType) {
    return a === b;
  }
  aValidType = isArray$1(a);
  bValidType = isArray$1(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a, b) : false;
  }
  aValidType = isObject$2(a);
  bValidType = isObject$2(b);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a).length;
    const bKeysCount = Object.keys(b).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a) {
      const aHasKey = a.hasOwnProperty(key);
      const bHasKey = b.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
        return false;
      }
    }
  }
  return String(a) === String(b);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}
const toDisplayString = (val) => {
  return isString(val) ? val : val == null ? "" : isArray$1(val) || isObject$2(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[`${key} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject$2(val) && !isArray$1(val) && !isPlainObject(val)) {
    return String(val);
  }
  return val;
};
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
        this
      ) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    }
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i2, l;
      for (i2 = 0, l = this.effects.length; i2 < l; i2++) {
        this.effects[i2].stop();
      }
      for (i2 = 0, l = this.cleanups.length; i2 < l; i2++) {
        this.cleanups[i2]();
      }
      if (this.scopes) {
        for (i2 = 0, l = this.scopes.length; i2 < l; i2++) {
          this.scopes[i2].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last2 = this.parent.scopes.pop();
        if (last2 && last2 !== this) {
          this.parent.scopes[this.index] = last2;
          last2.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect2, scope2 = activeEffectScope) {
  if (scope2 && scope2.active) {
    scope2.effects.push(effect2);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn);
  }
}
const createDep = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].w |= trackOpBit;
    }
  }
};
const finalizeDepMarkers = (effect2) => {
  const { deps } = effect2;
  if (deps.length) {
    let ptr = 0;
    for (let i2 = 0; i2 < deps.length; i2++) {
      const dep = deps[i2];
      if (wasTracked(dep) && !newTracked(dep)) {
        dep.delete(effect2);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit;
      dep.n &= ~trackOpBit;
    }
    deps.length = ptr;
  }
};
const targetMap = /* @__PURE__ */ new WeakMap();
let effectTrackDepth = 0;
let trackOpBit = 1;
const maxMarkerBits = 30;
let activeEffect;
const ITERATE_KEY = Symbol("");
const MAP_KEY_ITERATE_KEY = Symbol("");
class ReactiveEffect {
  constructor(fn, scheduler = null, scope2) {
    this.fn = fn;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this.parent = void 0;
    recordEffectScope(this, scope2);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    let parent = activeEffect;
    let lastShouldTrack = shouldTrack;
    while (parent) {
      if (parent === this) {
        return;
      }
      parent = parent.parent;
    }
    try {
      this.parent = activeEffect;
      activeEffect = this;
      shouldTrack = true;
      trackOpBit = 1 << ++effectTrackDepth;
      if (effectTrackDepth <= maxMarkerBits) {
        initDepMarkers(this);
      } else {
        cleanupEffect(this);
      }
      return this.fn();
    } finally {
      if (effectTrackDepth <= maxMarkerBits) {
        finalizeDepMarkers(this);
      }
      trackOpBit = 1 << --effectTrackDepth;
      activeEffect = this.parent;
      shouldTrack = lastShouldTrack;
      this.parent = void 0;
      if (this.deferStop) {
        this.stop();
      }
    }
  }
  stop() {
    if (activeEffect === this) {
      this.deferStop = true;
    } else if (this.active) {
      cleanupEffect(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
}
function cleanupEffect(effect2) {
  const { deps } = effect2;
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].delete(effect2);
    }
    deps.length = 0;
  }
}
function effect(fn, options) {
  if (fn.effect) {
    fn = fn.effect.fn;
  }
  const _effect = new ReactiveEffect(fn);
  if (options) {
    extend(_effect, options);
    if (options.scope)
      recordEffectScope(_effect, options.scope);
  }
  if (!options || !options.lazy) {
    _effect.run();
  }
  const runner = _effect.run.bind(_effect);
  runner.effect = _effect;
  return runner;
}
function stop$1(runner) {
  runner.effect.stop();
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last2 = trackStack.pop();
  shouldTrack = last2 === void 0 ? true : last2;
}
function track(target2, type2, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target2);
    if (!depsMap) {
      targetMap.set(target2, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep());
    }
    trackEffects(dep);
  }
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect);
  }
  if (shouldTrack2) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
  }
}
function trigger$1(target2, type2, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target2);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type2 === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray$1(target2)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type2) {
      case "add":
        if (!isArray$1(target2)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target2)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray$1(target2)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target2)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target2)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  if (deps.length === 1) {
    if (deps[0]) {
      {
        triggerEffects(deps[0]);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    {
      triggerEffects(createDep(effects));
    }
  }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
  const effects = isArray$1(dep) ? dep : [...dep];
  for (const effect2 of effects) {
    if (effect2.computed) {
      triggerEffect(effect2);
    }
  }
  for (const effect2 of effects) {
    if (!effect2.computed) {
      triggerEffect(effect2);
    }
  }
}
function triggerEffect(effect2, debuggerEventExtraInfo) {
  if (effect2 !== activeEffect || effect2.allowRecurse) {
    if (effect2.scheduler) {
      effect2.scheduler();
    } else {
      effect2.run();
    }
  }
}
function getDepFromReactive(object, key) {
  var _a;
  return (_a = targetMap.get(object)) == null ? void 0 : _a.get(key);
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
);
const get$1 = /* @__PURE__ */ createGetter();
const shallowGet = /* @__PURE__ */ createGetter(false, true);
const readonlyGet = /* @__PURE__ */ createGetter(true);
const shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i2 = 0, l = this.length; i2 < l; i2++) {
        track(arr, "get", i2 + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      const res = toRaw(this)[key].apply(this, args);
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty(key) {
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target2, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target2)) {
      return target2;
    }
    const targetIsArray = isArray$1(target2);
    if (!isReadonly2) {
      if (targetIsArray && hasOwn(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty;
      }
    }
    const res = Reflect.get(target2, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target2, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject$2(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
const set$1 = /* @__PURE__ */ createSetter();
const shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set2(target2, key, value2, receiver) {
    let oldValue = target2[key];
    if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value2)) {
      return false;
    }
    if (!shallow) {
      if (!isShallow(value2) && !isReadonly(value2)) {
        oldValue = toRaw(oldValue);
        value2 = toRaw(value2);
      }
      if (!isArray$1(target2) && isRef(oldValue) && !isRef(value2)) {
        oldValue.value = value2;
        return true;
      }
    }
    const hadKey = isArray$1(target2) && isIntegerKey(key) ? Number(key) < target2.length : hasOwn(target2, key);
    const result = Reflect.set(target2, key, value2, receiver);
    if (target2 === toRaw(receiver)) {
      if (!hadKey) {
        trigger$1(target2, "add", key, value2);
      } else if (hasChanged(value2, oldValue)) {
        trigger$1(target2, "set", key, value2);
      }
    }
    return result;
  };
}
function deleteProperty(target2, key) {
  const hadKey = hasOwn(target2, key);
  target2[key];
  const result = Reflect.deleteProperty(target2, key);
  if (result && hadKey) {
    trigger$1(target2, "delete", key, void 0);
  }
  return result;
}
function has$1(target2, key) {
  const result = Reflect.has(target2, key);
  if (!isSymbol(key) || !builtInSymbols.has(key)) {
    track(target2, "has", key);
  }
  return result;
}
function ownKeys(target2) {
  track(target2, "iterate", isArray$1(target2) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target2);
}
const mutableHandlers = {
  get: get$1,
  set: set$1,
  deleteProperty,
  has: has$1,
  ownKeys
};
const readonlyHandlers = {
  get: readonlyGet,
  set(target2, key) {
    return true;
  },
  deleteProperty(target2, key) {
    return true;
  }
};
const shallowReactiveHandlers = /* @__PURE__ */ extend(
  {},
  mutableHandlers,
  {
    get: shallowGet,
    set: shallowSet
  }
);
const shallowReadonlyHandlers = /* @__PURE__ */ extend(
  {},
  readonlyHandlers,
  {
    get: shallowReadonlyGet
  }
);
const toShallow = (value2) => value2;
const getProto = (v) => Reflect.getPrototypeOf(v);
function get(target2, key, isReadonly2 = false, isShallow2 = false) {
  target2 = target2["__v_raw"];
  const rawTarget = toRaw(target2);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target2.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target2.get(rawKey));
  } else if (target2 !== rawTarget) {
    target2.get(key);
  }
}
function has(key, isReadonly2 = false) {
  const target2 = this["__v_raw"];
  const rawTarget = toRaw(target2);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target2.has(key) : target2.has(key) || target2.has(rawKey);
}
function size$1(target2, isReadonly2 = false) {
  target2 = target2["__v_raw"];
  !isReadonly2 && track(toRaw(target2), "iterate", ITERATE_KEY);
  return Reflect.get(target2, "size", target2);
}
function add(value2) {
  value2 = toRaw(value2);
  const target2 = toRaw(this);
  const proto = getProto(target2);
  const hadKey = proto.has.call(target2, value2);
  if (!hadKey) {
    target2.add(value2);
    trigger$1(target2, "add", value2, value2);
  }
  return this;
}
function set(key, value2) {
  value2 = toRaw(value2);
  const target2 = toRaw(this);
  const { has: has2, get: get2 } = getProto(target2);
  let hadKey = has2.call(target2, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target2, key);
  }
  const oldValue = get2.call(target2, key);
  target2.set(key, value2);
  if (!hadKey) {
    trigger$1(target2, "add", key, value2);
  } else if (hasChanged(value2, oldValue)) {
    trigger$1(target2, "set", key, value2);
  }
  return this;
}
function deleteEntry(key) {
  const target2 = toRaw(this);
  const { has: has2, get: get2 } = getProto(target2);
  let hadKey = has2.call(target2, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target2, key);
  }
  get2 ? get2.call(target2, key) : void 0;
  const result = target2.delete(key);
  if (hadKey) {
    trigger$1(target2, "delete", key, void 0);
  }
  return result;
}
function clear() {
  const target2 = toRaw(this);
  const hadItems = target2.size !== 0;
  const result = target2.clear();
  if (hadItems) {
    trigger$1(target2, "clear", void 0, void 0);
  }
  return result;
}
function createForEach(isReadonly2, isShallow2) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target2 = observed["__v_raw"];
    const rawTarget = toRaw(target2);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target2.forEach((value2, key) => {
      return callback.call(thisArg, wrap(value2), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target2 = this["__v_raw"];
    const rawTarget = toRaw(target2);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target2[method](...args);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
    );
    return {
      // iterator protocol
      next() {
        const { value: value2, done } = innerIterator.next();
        return done ? { value: value2, done } : {
          value: isPair ? [wrap(value2[0]), wrap(value2[1])] : wrap(value2),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type2) {
  return function(...args) {
    return type2 === "delete" ? false : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get(this, key);
    },
    get size() {
      return size$1(this);
    },
    has,
    add,
    set,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get(this, key, false, true);
    },
    get size() {
      return size$1(this);
    },
    has,
    add,
    set,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true);
    },
    get size() {
      return size$1(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true, true);
    },
    get size() {
      return size$1(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(
      method,
      false,
      false
    );
    readonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      false
    );
    shallowInstrumentations2[method] = createIterableMethod(
      method,
      false,
      true
    );
    shallowReadonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      true
    );
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [
  mutableInstrumentations,
  readonlyInstrumentations,
  shallowInstrumentations,
  shallowReadonlyInstrumentations
] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target2, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target2;
    }
    return Reflect.get(
      hasOwn(instrumentations, key) && key in target2 ? instrumentations : target2,
      key,
      receiver
    );
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value2) {
  return value2["__v_skip"] || !Object.isExtensible(value2) ? 0 : targetTypeMap(toRawType(value2));
}
function reactive(target2) {
  if (isReadonly(target2)) {
    return target2;
  }
  return createReactiveObject(
    target2,
    false,
    mutableHandlers,
    mutableCollectionHandlers,
    reactiveMap
  );
}
function shallowReactive(target2) {
  return createReactiveObject(
    target2,
    false,
    shallowReactiveHandlers,
    shallowCollectionHandlers,
    shallowReactiveMap
  );
}
function readonly(target2) {
  return createReactiveObject(
    target2,
    true,
    readonlyHandlers,
    readonlyCollectionHandlers,
    readonlyMap
  );
}
function shallowReadonly(target2) {
  return createReactiveObject(
    target2,
    true,
    shallowReadonlyHandlers,
    shallowReadonlyCollectionHandlers,
    shallowReadonlyMap
  );
}
function createReactiveObject(target2, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$2(target2)) {
    return target2;
  }
  if (target2["__v_raw"] && !(isReadonly2 && target2["__v_isReactive"])) {
    return target2;
  }
  const existingProxy = proxyMap.get(target2);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target2);
  if (targetType === 0) {
    return target2;
  }
  const proxy = new Proxy(
    target2,
    targetType === 2 ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target2, proxy);
  return proxy;
}
function isReactive(value2) {
  if (isReadonly(value2)) {
    return isReactive(value2["__v_raw"]);
  }
  return !!(value2 && value2["__v_isReactive"]);
}
function isReadonly(value2) {
  return !!(value2 && value2["__v_isReadonly"]);
}
function isShallow(value2) {
  return !!(value2 && value2["__v_isShallow"]);
}
function isProxy(value2) {
  return isReactive(value2) || isReadonly(value2);
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value2) {
  def(value2, "__v_skip", true);
  return value2;
}
const toReactive = (value2) => isObject$2(value2) ? reactive(value2) : value2;
const toReadonly = (value2) => isObject$2(value2) ? readonly(value2) : value2;
function trackRefValue(ref2) {
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    {
      trackEffects(ref2.dep || (ref2.dep = createDep()));
    }
  }
}
function triggerRefValue(ref2, newVal) {
  ref2 = toRaw(ref2);
  const dep = ref2.dep;
  if (dep) {
    {
      triggerEffects(dep);
    }
  }
}
function isRef(r) {
  return !!(r && r.__v_isRef === true);
}
function ref(value2) {
  return createRef(value2, false);
}
function shallowRef(value2) {
  return createRef(value2, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value2, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value2 : toRaw(value2);
    this._value = __v_isShallow ? value2 : toReactive(value2);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
    newVal = useDirectValue ? newVal : toRaw(newVal);
    if (hasChanged(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive(newVal);
      triggerRefValue(this);
    }
  }
}
function triggerRef(ref2) {
  triggerRefValue(ref2);
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
function toValue(source) {
  return isFunction(source) ? source() : unref(source);
}
const shallowUnwrapHandlers = {
  get: (target2, key, receiver) => unref(Reflect.get(target2, key, receiver)),
  set: (target2, key, value2, receiver) => {
    const oldValue = target2[key];
    if (isRef(oldValue) && !isRef(value2)) {
      oldValue.value = value2;
      return true;
    } else {
      return Reflect.set(target2, key, value2, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
  constructor(factory) {
    this.dep = void 0;
    this.__v_isRef = true;
    const { get: get2, set: set2 } = factory(
      () => trackRefValue(this),
      () => triggerRefValue(this)
    );
    this._get = get2;
    this._set = set2;
  }
  get value() {
    return this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
}
function customRef(factory) {
  return new CustomRefImpl(factory);
}
function toRefs(object) {
  const ret = isArray$1(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = propertyToRef(object, key);
  }
  return ret;
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive(toRaw(this._object), this._key);
  }
}
class GetterRefImpl {
  constructor(_getter) {
    this._getter = _getter;
    this.__v_isRef = true;
    this.__v_isReadonly = true;
  }
  get value() {
    return this._getter();
  }
}
function toRef(source, key, defaultValue) {
  if (isRef(source)) {
    return source;
  } else if (isFunction(source)) {
    return new GetterRefImpl(source);
  } else if (isObject$2(source) && arguments.length > 1) {
    return propertyToRef(source, key, defaultValue);
  } else {
    return ref(source);
  }
}
function propertyToRef(source, key, defaultValue) {
  const val = source[key];
  return isRef(val) ? val : new ObjectRefImpl(
    source,
    key,
    defaultValue
  );
}
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this["__v_isReadonly"] = false;
    this._dirty = true;
    this.effect = new ReactiveEffect(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue(this);
      }
    });
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    trackRefValue(self2);
    if (self2._dirty || !self2._cacheable) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
}
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = NOOP;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  return cRef;
}
function warn(msg, ...args) {
  return;
}
function assertNumber(val, type2) {
  return;
}
function callWithErrorHandling(fn, instance, type2, args) {
  let res;
  try {
    res = args ? fn(...args) : fn();
  } catch (err) {
    handleError(err, instance, type2);
  }
  return res;
}
function callWithAsyncErrorHandling(fn, instance, type2, args) {
  if (isFunction(fn)) {
    const res = callWithErrorHandling(fn, instance, type2, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type2);
      });
    }
    return res;
  }
  const values = [];
  for (let i2 = 0; i2 < fn.length; i2++) {
    values.push(callWithAsyncErrorHandling(fn[i2], instance, type2, args));
  }
  return values;
}
function handleError(err, instance, type2, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = type2;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i2 = 0; i2 < errorCapturedHooks.length; i2++) {
          if (errorCapturedHooks[i2](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(
        appErrorHandler,
        null,
        10,
        [err, exposedInstance, errorInfo]
      );
      return;
    }
  }
  logError(err, type2, contextVNode, throwInDev);
}
function logError(err, type2, contextVNode, throwInDev = true) {
  {
    console.error(err);
  }
}
let isFlushing = false;
let isFlushPending = false;
const queue$1 = [];
let flushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
function nextTick$1(fn) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn ? p2.then(this ? fn.bind(this) : fn) : p2;
}
function findInsertionIndex(id) {
  let start = flushIndex + 1;
  let end = queue$1.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJobId = getId(queue$1[middle]);
    middleJobId < id ? start = middle + 1 : end = middle;
  }
  return start;
}
function queueJob(job) {
  if (!queue$1.length || !queue$1.includes(
    job,
    isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex
  )) {
    if (job.id == null) {
      queue$1.push(job);
    } else {
      queue$1.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i2 = queue$1.indexOf(job);
  if (i2 > flushIndex) {
    queue$1.splice(i2, 1);
  }
}
function queuePostFlushCb(cb) {
  if (!isArray$1(cb)) {
    if (!activePostFlushCbs || !activePostFlushCbs.includes(
      cb,
      cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex
    )) {
      pendingPostFlushCbs.push(cb);
    }
  } else {
    pendingPostFlushCbs.push(...cb);
  }
  queueFlush();
}
function flushPreFlushCbs(seen2, i2 = isFlushing ? flushIndex + 1 : 0) {
  for (; i2 < queue$1.length; i2++) {
    const cb = queue$1[i2];
    if (cb && cb.pre) {
      queue$1.splice(i2, 1);
      i2--;
      cb();
    }
  }
}
function flushPostFlushCbs(seen2) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)];
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    activePostFlushCbs.sort((a, b) => getId(a) - getId(b));
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
const comparator = (a, b) => {
  const diff2 = getId(a) - getId(b);
  if (diff2 === 0) {
    if (a.pre && !b.pre)
      return -1;
    if (b.pre && !a.pre)
      return 1;
  }
  return diff2;
};
function flushJobs(seen2) {
  isFlushPending = false;
  isFlushing = true;
  queue$1.sort(comparator);
  const check = NOOP;
  try {
    for (flushIndex = 0; flushIndex < queue$1.length; flushIndex++) {
      const job = queue$1[flushIndex];
      if (job && job.active !== false) {
        if (false)
          ;
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue$1.length = 0;
    flushPostFlushCbs();
    isFlushing = false;
    currentFlushPromise = null;
    if (queue$1.length || pendingPostFlushCbs.length) {
      flushJobs();
    }
  }
}
let devtools;
let buffer = [];
function setDevtoolsHook(hook, target2) {
  var _a, _b;
  devtools = hook;
  if (devtools) {
    devtools.enabled = true;
    buffer.forEach(({ event, args }) => devtools.emit(event, ...args));
    buffer = [];
  } else if (
    // handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== "undefined" && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    !((_b = (_a = window.navigator) == null ? void 0 : _a.userAgent) == null ? void 0 : _b.includes("jsdom"))
  ) {
    const replay = target2.__VUE_DEVTOOLS_HOOK_REPLAY__ = target2.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    replay.push((newHook) => {
      setDevtoolsHook(newHook, target2);
    });
    setTimeout(() => {
      if (!devtools) {
        target2.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
        buffer = [];
      }
    }, 3e3);
  } else {
    buffer = [];
  }
}
function emit(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props = instance.vnode.props || EMPTY_OBJ;
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number, trim } = props[modifiersKey] || EMPTY_OBJ;
    if (trim) {
      args = rawArgs.map((a) => isString(a) ? a.trim() : a);
    }
    if (number) {
      args = rawArgs.map(looseToNumber);
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey(camelize(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(
      handler,
      instance,
      6,
      args
    );
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(
      onceHandler,
      instance,
      6,
      args
    );
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache2 = appContext.emitsCache;
  const cached = cache2.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$2(comp)) {
      cache2.set(comp, null);
    }
    return null;
  }
  if (isArray$1(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend(normalized, raw);
  }
  if (isObject$2(comp)) {
    cache2.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev2 = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev2;
}
function pushScopeId(id) {
  currentScopeId = id;
}
function popScopeId() {
  currentScopeId = null;
}
const withScopeId = (_id) => withCtx;
function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx)
    return fn;
  if (fn._n) {
    return fn;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    let res;
    try {
      res = fn(...args);
    } finally {
      setCurrentRenderingInstance(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking(1);
      }
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
function markAttrsAccessed() {
}
function renderComponentRoot(instance) {
  const {
    type: Component,
    vnode,
    proxy,
    withProxy,
    props,
    propsOptions: [propsOptions],
    slots,
    attrs,
    emit: emit2,
    render: render2,
    renderCache,
    data,
    setupState,
    ctx,
    inheritAttrs
  } = instance;
  let result;
  let fallthroughAttrs;
  const prev2 = setCurrentRenderingInstance(instance);
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode(
        render2.call(
          proxyToUse,
          proxyToUse,
          renderCache,
          props,
          setupState,
          data,
          ctx
        )
      );
      fallthroughAttrs = attrs;
    } else {
      const render22 = Component;
      if (false)
        ;
      result = normalizeVNode(
        render22.length > 1 ? render22(
          props,
          false ? {
            get attrs() {
              markAttrsAccessed();
              return attrs;
            },
            slots,
            emit: emit2
          } : { attrs, slots, emit: emit2 }
        ) : render22(
          props,
          null
          /* we know it doesn't need it */
        )
      );
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(err, instance, 1);
    result = createVNode(Comment);
  }
  let root = result;
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(
            fallthroughAttrs,
            propsOptions
          );
        }
        root = cloneVNode(root, fallthroughAttrs);
      }
    }
  }
  if (vnode.dirs) {
    root = cloneVNode(root);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    root.transition = vnode.transition;
  }
  {
    result = root;
  }
  setCurrentRenderingInstance(prev2);
  return result;
}
function filterSingleRoot(children) {
  let singleRoot;
  for (let i2 = 0; i2 < children.length; i2++) {
    const child = children[i2];
    if (isVNode(child)) {
      if (child.type !== Comment || child.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i2 = 0; i2 < dynamicProps.length; i2++) {
        const key = dynamicProps[i2];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i2 = 0; i2 < nextKeys.length; i2++) {
    const key = nextKeys[i2];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent }, el) {
  while (parent && parent.subTree === vnode) {
    (vnode = parent.vnode).el = el;
    parent = parent.parent;
  }
}
const isSuspense = (type2) => type2.__isSuspense;
const SuspenseImpl = {
  name: "Suspense",
  // In order to make Suspense tree-shakable, we need to avoid importing it
  // directly in the renderer. The renderer checks for the __isSuspense flag
  // on a vnode's type and calls the `process` method, passing in renderer
  // internals.
  __isSuspense: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
    if (n1 == null) {
      mountSuspense(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    } else {
      patchSuspense(
        n1,
        n2,
        container,
        anchor,
        parentComponent,
        isSVG,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    }
  },
  hydrate: hydrateSuspense,
  create: createSuspenseBoundary,
  normalize: normalizeSuspenseChildren
};
const Suspense = SuspenseImpl;
function triggerEvent(vnode, name) {
  const eventListener = vnode.props && vnode.props[name];
  if (isFunction(eventListener)) {
    eventListener();
  }
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
  const {
    p: patch,
    o: { createElement }
  } = rendererInternals;
  const hiddenContainer = createElement("div");
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    container,
    hiddenContainer,
    anchor,
    isSVG,
    slotScopeIds,
    optimized,
    rendererInternals
  );
  patch(
    null,
    suspense.pendingBranch = vnode.ssContent,
    hiddenContainer,
    null,
    parentComponent,
    suspense,
    isSVG,
    slotScopeIds
  );
  if (suspense.deps > 0) {
    triggerEvent(vnode, "onPending");
    triggerEvent(vnode, "onFallback");
    patch(
      null,
      vnode.ssFallback,
      container,
      anchor,
      parentComponent,
      null,
      // fallback tree will not have suspense context
      isSVG,
      slotScopeIds
    );
    setActiveBranch(suspense, vnode.ssFallback);
  } else {
    suspense.resolve(false, true);
  }
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
  const suspense = n2.suspense = n1.suspense;
  suspense.vnode = n2;
  n2.el = n1.el;
  const newBranch = n2.ssContent;
  const newFallback = n2.ssFallback;
  const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
  if (pendingBranch) {
    suspense.pendingBranch = newBranch;
    if (isSameVNodeType(newBranch, pendingBranch)) {
      patch(
        pendingBranch,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        isSVG,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else if (isInFallback) {
        patch(
          activeBranch,
          newFallback,
          container,
          anchor,
          parentComponent,
          null,
          // fallback tree will not have suspense context
          isSVG,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, newFallback);
      }
    } else {
      suspense.pendingId++;
      if (isHydrating) {
        suspense.isHydrating = false;
        suspense.activeBranch = pendingBranch;
      } else {
        unmount(pendingBranch, parentComponent, suspense);
      }
      suspense.deps = 0;
      suspense.effects.length = 0;
      suspense.hiddenContainer = createElement("div");
      if (isInFallback) {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        } else {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            isSVG,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        patch(
          activeBranch,
          newBranch,
          container,
          anchor,
          parentComponent,
          suspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        suspense.resolve(true);
      } else {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        }
      }
    }
  } else {
    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
      patch(
        activeBranch,
        newBranch,
        container,
        anchor,
        parentComponent,
        suspense,
        isSVG,
        slotScopeIds,
        optimized
      );
      setActiveBranch(suspense, newBranch);
    } else {
      triggerEvent(n2, "onPending");
      suspense.pendingBranch = newBranch;
      suspense.pendingId++;
      patch(
        null,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        isSVG,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else {
        const { timeout, pendingId } = suspense;
        if (timeout > 0) {
          setTimeout(() => {
            if (suspense.pendingId === pendingId) {
              suspense.fallback(newFallback);
            }
          }, timeout);
        } else if (timeout === 0) {
          suspense.fallback(newFallback);
        }
      }
    }
  }
}
function createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
  const {
    p: patch,
    m: move,
    um: unmount,
    n: next2,
    o: { parentNode, remove: remove2 }
  } = rendererInternals;
  let parentSuspenseId;
  const isSuspensible = isVNodeSuspensible(vnode);
  if (isSuspensible) {
    if (parentSuspense == null ? void 0 : parentSuspense.pendingBranch) {
      parentSuspenseId = parentSuspense.pendingId;
      parentSuspense.deps++;
    }
  }
  const timeout = vnode.props ? toNumber(vnode.props.timeout) : void 0;
  const suspense = {
    vnode,
    parent: parentSuspense,
    parentComponent,
    isSVG,
    container,
    hiddenContainer,
    anchor,
    deps: 0,
    pendingId: 0,
    timeout: typeof timeout === "number" ? timeout : -1,
    activeBranch: null,
    pendingBranch: null,
    isInFallback: true,
    isHydrating,
    isUnmounted: false,
    effects: [],
    resolve(resume = false, sync = false) {
      const {
        vnode: vnode2,
        activeBranch,
        pendingBranch,
        pendingId,
        effects,
        parentComponent: parentComponent2,
        container: container2
      } = suspense;
      if (suspense.isHydrating) {
        suspense.isHydrating = false;
      } else if (!resume) {
        const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
        if (delayEnter) {
          activeBranch.transition.afterLeave = () => {
            if (pendingId === suspense.pendingId) {
              move(pendingBranch, container2, anchor2, 0);
            }
          };
        }
        let { anchor: anchor2 } = suspense;
        if (activeBranch) {
          anchor2 = next2(activeBranch);
          unmount(activeBranch, parentComponent2, suspense, true);
        }
        if (!delayEnter) {
          move(pendingBranch, container2, anchor2, 0);
        }
      }
      setActiveBranch(suspense, pendingBranch);
      suspense.pendingBranch = null;
      suspense.isInFallback = false;
      let parent = suspense.parent;
      let hasUnresolvedAncestor = false;
      while (parent) {
        if (parent.pendingBranch) {
          parent.effects.push(...effects);
          hasUnresolvedAncestor = true;
          break;
        }
        parent = parent.parent;
      }
      if (!hasUnresolvedAncestor) {
        queuePostFlushCb(effects);
      }
      suspense.effects = [];
      if (isSuspensible) {
        if (parentSuspense && parentSuspense.pendingBranch && parentSuspenseId === parentSuspense.pendingId) {
          parentSuspense.deps--;
          if (parentSuspense.deps === 0 && !sync) {
            parentSuspense.resolve();
          }
        }
      }
      triggerEvent(vnode2, "onResolve");
    },
    fallback(fallbackVNode) {
      if (!suspense.pendingBranch) {
        return;
      }
      const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, isSVG: isSVG2 } = suspense;
      triggerEvent(vnode2, "onFallback");
      const anchor2 = next2(activeBranch);
      const mountFallback = () => {
        if (!suspense.isInFallback) {
          return;
        }
        patch(
          null,
          fallbackVNode,
          container2,
          anchor2,
          parentComponent2,
          null,
          // fallback tree will not have suspense context
          isSVG2,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, fallbackVNode);
      };
      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
      if (delayEnter) {
        activeBranch.transition.afterLeave = mountFallback;
      }
      suspense.isInFallback = true;
      unmount(
        activeBranch,
        parentComponent2,
        null,
        // no suspense so unmount hooks fire now
        true
        // shouldRemove
      );
      if (!delayEnter) {
        mountFallback();
      }
    },
    move(container2, anchor2, type2) {
      suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type2);
      suspense.container = container2;
    },
    next() {
      return suspense.activeBranch && next2(suspense.activeBranch);
    },
    registerDep(instance, setupRenderEffect) {
      const isInPendingSuspense = !!suspense.pendingBranch;
      if (isInPendingSuspense) {
        suspense.deps++;
      }
      const hydratedEl = instance.vnode.el;
      instance.asyncDep.catch((err) => {
        handleError(err, instance, 0);
      }).then((asyncSetupResult) => {
        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
          return;
        }
        instance.asyncResolved = true;
        const { vnode: vnode2 } = instance;
        handleSetupResult(instance, asyncSetupResult, false);
        if (hydratedEl) {
          vnode2.el = hydratedEl;
        }
        const placeholder = !hydratedEl && instance.subTree.el;
        setupRenderEffect(
          instance,
          vnode2,
          // component may have been moved before resolve.
          // if this is not a hydration, instance.subTree will be the comment
          // placeholder.
          parentNode(hydratedEl || instance.subTree.el),
          // anchor will not be used if this is hydration, so only need to
          // consider the comment placeholder case.
          hydratedEl ? null : next2(instance.subTree),
          suspense,
          isSVG,
          optimized
        );
        if (placeholder) {
          remove2(placeholder);
        }
        updateHOCHostEl(instance, vnode2.el);
        if (isInPendingSuspense && --suspense.deps === 0) {
          suspense.resolve();
        }
      });
    },
    unmount(parentSuspense2, doRemove) {
      suspense.isUnmounted = true;
      if (suspense.activeBranch) {
        unmount(
          suspense.activeBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
      if (suspense.pendingBranch) {
        unmount(
          suspense.pendingBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
    }
  };
  return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    node.parentNode,
    document.createElement("div"),
    null,
    isSVG,
    slotScopeIds,
    optimized,
    rendererInternals,
    true
    /* hydrating */
  );
  const result = hydrateNode(
    node,
    suspense.pendingBranch = vnode.ssContent,
    parentComponent,
    suspense,
    slotScopeIds,
    optimized
  );
  if (suspense.deps === 0) {
    suspense.resolve(false, true);
  }
  return result;
}
function normalizeSuspenseChildren(vnode) {
  const { shapeFlag, children } = vnode;
  const isSlotChildren = shapeFlag & 32;
  vnode.ssContent = normalizeSuspenseSlot(
    isSlotChildren ? children.default : children
  );
  vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
  let block2;
  if (isFunction(s)) {
    const trackBlock = isBlockTreeEnabled && s._c;
    if (trackBlock) {
      s._d = false;
      openBlock();
    }
    s = s();
    if (trackBlock) {
      s._d = true;
      block2 = currentBlock;
      closeBlock();
    }
  }
  if (isArray$1(s)) {
    const singleChild = filterSingleRoot(s);
    s = singleChild;
  }
  s = normalizeVNode(s);
  if (block2 && !s.dynamicChildren) {
    s.dynamicChildren = block2.filter((c) => c !== s);
  }
  return s;
}
function queueEffectWithSuspense(fn, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$1(fn)) {
      suspense.effects.push(...fn);
    } else {
      suspense.effects.push(fn);
    }
  } else {
    queuePostFlushCb(fn);
  }
}
function setActiveBranch(suspense, branch) {
  suspense.activeBranch = branch;
  const { vnode, parentComponent } = suspense;
  const el = vnode.el = branch.el;
  if (parentComponent && parentComponent.subTree === vnode) {
    parentComponent.vnode.el = el;
    updateHOCHostEl(parentComponent, el);
  }
}
function isVNodeSuspensible(vnode) {
  var _a;
  return ((_a = vnode.props) == null ? void 0 : _a.suspensible) != null && vnode.props.suspensible !== false;
}
function watchEffect(effect2, options) {
  return doWatch(effect2, null, options);
}
function watchPostEffect(effect2, options) {
  return doWatch(
    effect2,
    null,
    { flush: "post" }
  );
}
function watchSyncEffect(effect2, options) {
  return doWatch(
    effect2,
    null,
    { flush: "sync" }
  );
}
const INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {
  var _a;
  const instance = getCurrentScope() === ((_a = currentInstance) == null ? void 0 : _a.scope) ? currentInstance : null;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow(source);
  } else if (isReactive(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray$1(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s) => isReactive(s) || isShallow(s));
    getter = () => source.map((s) => {
      if (isRef(s)) {
        return s.value;
      } else if (isReactive(s)) {
        return traverse$1(s);
      } else if (isFunction(s)) {
        return callWithErrorHandling(s, instance, 2);
      } else
        ;
    });
  } else if (isFunction(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(
          source,
          instance,
          3,
          [onCleanup]
        );
      };
    }
  } else {
    getter = NOOP;
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse$1(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn) => {
    cleanup = effect2.onStop = () => {
      callWithErrorHandling(fn, instance, 4);
    };
  };
  let ssrCleanup;
  if (isInSSRComponentSetup) {
    onCleanup = NOOP;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    if (flush === "sync") {
      const ctx = useSSRContext();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else {
      return NOOP;
    }
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect2.active) {
      return;
    }
    if (cb) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some(
        (v, i2) => hasChanged(v, oldValue[i2])
      ) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          // pass undefined as the old value when it's changed for the first time
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect2.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    job.pre = true;
    if (instance)
      job.id = instance.uid;
    scheduler = () => queueJob(job);
  }
  const effect2 = new ReactiveEffect(getter, scheduler);
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect2.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(
      effect2.run.bind(effect2),
      instance && instance.suspense
    );
  } else {
    effect2.run();
  }
  const unwatch = () => {
    effect2.stop();
    if (instance && instance.scope) {
      remove(instance.scope.effects, effect2);
    }
  };
  if (ssrCleanup)
    ssrCleanup.push(unwatch);
  return unwatch;
}
function instanceWatch(source, value2, options) {
  const publicThis = this.proxy;
  const getter = isString(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction(value2)) {
    cb = value2;
  } else {
    cb = value2.handler;
    options = value2;
  }
  const cur = currentInstance;
  setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  if (cur) {
    setCurrentInstance(cur);
  } else {
    unsetCurrentInstance();
  }
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i2 = 0; i2 < segments.length && cur; i2++) {
      cur = cur[segments[i2]];
    }
    return cur;
  };
}
function traverse$1(value2, seen2) {
  if (!isObject$2(value2) || value2["__v_skip"]) {
    return value2;
  }
  seen2 = seen2 || /* @__PURE__ */ new Set();
  if (seen2.has(value2)) {
    return value2;
  }
  seen2.add(value2);
  if (isRef(value2)) {
    traverse$1(value2.value, seen2);
  } else if (isArray$1(value2)) {
    for (let i2 = 0; i2 < value2.length; i2++) {
      traverse$1(value2[i2], seen2);
    }
  } else if (isSet(value2) || isMap(value2)) {
    value2.forEach((v) => {
      traverse$1(v, seen2);
    });
  } else if (isPlainObject(value2)) {
    for (const key in value2) {
      traverse$1(value2[key], seen2);
    }
  }
  return value2;
}
function withDirectives(vnode, directives) {
  const internalInstance = currentRenderingInstance;
  if (internalInstance === null) {
    return vnode;
  }
  const instance = getExposeProxy(internalInstance) || internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i2 = 0; i2 < directives.length; i2++) {
    let [dir, value2, arg, modifiers = EMPTY_OBJ] = directives[i2];
    if (dir) {
      if (isFunction(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse$1(value2);
      }
      bindings.push({
        dir,
        instance,
        value: value2,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i2 = 0; i2 < bindings.length; i2++) {
    const binding = bindings[i2];
    if (oldBindings) {
      binding.oldValue = oldBindings[i2].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionPropsValidators = {
  mode: String,
  appear: Boolean,
  persisted: Boolean,
  // enter
  onBeforeEnter: TransitionHookValidator,
  onEnter: TransitionHookValidator,
  onAfterEnter: TransitionHookValidator,
  onEnterCancelled: TransitionHookValidator,
  // leave
  onBeforeLeave: TransitionHookValidator,
  onLeave: TransitionHookValidator,
  onAfterLeave: TransitionHookValidator,
  onLeaveCancelled: TransitionHookValidator,
  // appear
  onBeforeAppear: TransitionHookValidator,
  onAppear: TransitionHookValidator,
  onAfterAppear: TransitionHookValidator,
  onAppearCancelled: TransitionHookValidator
};
const BaseTransitionImpl = {
  name: `BaseTransition`,
  props: BaseTransitionPropsValidators,
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      let child = children[0];
      if (children.length > 1) {
        for (const c of children) {
          if (c.type !== Comment) {
            child = c;
            break;
          }
        }
      }
      const rawProps = toRaw(props);
      const { mode } = rawProps;
      if (state.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getKeepAliveChild(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      const enterHooks = resolveTransitionHooks(
        innerChild,
        rawProps,
        state,
        instance
      );
      setTransitionHooks(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
      let transitionKeyChanged = false;
      const { getTransitionKey } = innerChild.type;
      if (getTransitionKey) {
        const key = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key;
        } else if (key !== prevTransitionKey) {
          prevTransitionKey = key;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks(
          oldInnerChild,
          rawProps,
          state,
          instance
        );
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode === "out-in") {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            if (instance.update.active !== false) {
              instance.update();
            }
          };
          return emptyPlaceholder(child);
        } else if (mode === "in-out" && innerChild.type !== Comment) {
          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(
              state,
              oldInnerChild
            );
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el._leaveCb = () => {
              earlyRemove();
              el._leaveCb = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance) {
  const {
    appear,
    mode,
    persisted = false,
    onBeforeEnter,
    onEnter,
    onAfterEnter,
    onEnterCancelled,
    onBeforeLeave,
    onLeave,
    onAfterLeave,
    onLeaveCancelled,
    onBeforeAppear,
    onAppear,
    onAfterAppear,
    onAppearCancelled
  } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling(
      hook,
      instance,
      9,
      args
    );
  };
  const callAsyncHook = (hook, args) => {
    const done = args[1];
    callHook2(hook, args);
    if (isArray$1(hook)) {
      if (hook.every((hook2) => hook2.length <= 1))
        done();
    } else if (hook.length <= 1) {
      done();
    }
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el._leaveCb) {
        el._leaveCb(
          true
          /* cancelled */
        );
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
        leavingVNode.el._leaveCb();
      }
      callHook2(hook, [el]);
    },
    enter(el) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el._enterCb = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el]);
        } else {
          callHook2(afterHook, [el]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el._enterCb = void 0;
      };
      if (hook) {
        callAsyncHook(hook, [el, done]);
      } else {
        done();
      }
    },
    leave(el, remove2) {
      const key2 = String(vnode.key);
      if (el._enterCb) {
        el._enterCb(
          true
          /* cancelled */
        );
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook2(onBeforeLeave, [el]);
      let called = false;
      const done = el._leaveCb = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el]);
        } else {
          callHook2(onAfterLeave, [el]);
        }
        el._leaveCb = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks(vnode2, props, state, instance);
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i2 = 0; i2 < children.length; i2++) {
    let child = children[i2];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i2);
    if (child.type === Fragment) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(
        getTransitionRawChildren(child.children, keepComment, key)
      );
    } else if (keepComment || child.type !== Comment) {
      ret.push(key != null ? cloneVNode(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i2 = 0; i2 < ret.length; i2++) {
      ret[i2].patchFlag = -2;
    }
  }
  return ret;
}
function defineComponent(options, extraOptions) {
  return isFunction(options) ? (
    // #8326: extend call and options.name access are considered side-effects
    // by Rollup, so we have to wrap it in a pure-annotated IIFE.
    /* @__PURE__ */ (() => extend({ name: options.name }, extraOptions, { setup: options }))()
  ) : options;
}
const isAsyncWrapper = (i2) => !!i2.type.__asyncLoader;
function defineAsyncComponent(source) {
  if (isFunction(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    // undefined = never times out
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return defineComponent({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance;
      if (resolvedComp) {
        return () => createInnerComp(resolvedComp, instance);
      }
      const onError2 = (err) => {
        pendingRequest = null;
        handleError(
          err,
          instance,
          13,
          !errorComponent
          /* do not throw in dev if user provided error component */
        );
      };
      if (suspensible && instance.suspense || isInSSRComponentSetup) {
        return load().then((comp) => {
          return () => createInnerComp(comp, instance);
        }).catch((err) => {
          onError2(err);
          return () => errorComponent ? createVNode(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded = ref(false);
      const error = ref();
      const delayed = ref(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded.value && !error.value) {
            const err = new Error(
              `Async component timed out after ${timeout}ms.`
            );
            onError2(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded.value = true;
        if (instance.parent && isKeepAlive(instance.parent.vnode)) {
          queueJob(instance.parent.update);
        }
      }).catch((err) => {
        onError2(err);
        error.value = err;
      });
      return () => {
        if (loaded.value && resolvedComp) {
          return createInnerComp(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp(comp, parent) {
  const { ref: ref2, props, children, ce } = parent.vnode;
  const vnode = createVNode(comp, props, children);
  vnode.ref = ref2;
  vnode.ce = ce;
  delete parent.vnode.ce;
  return vnode;
}
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
const KeepAliveImpl = {
  name: `KeepAlive`,
  // Marker for special handling inside the renderer. We are not using a ===
  // check directly on KeepAlive in the renderer, because importing it directly
  // would prevent it from being tree-shaken.
  __isKeepAlive: true,
  props: {
    include: [String, RegExp, Array],
    exclude: [String, RegExp, Array],
    max: [String, Number]
  },
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const sharedContext = instance.ctx;
    if (!sharedContext.renderer) {
      return () => {
        const children = slots.default && slots.default();
        return children && children.length === 1 ? children[0] : children;
      };
    }
    const cache2 = /* @__PURE__ */ new Map();
    const keys = /* @__PURE__ */ new Set();
    let current = null;
    const parentSuspense = instance.suspense;
    const {
      renderer: {
        p: patch,
        m: move,
        um: _unmount,
        o: { createElement }
      }
    } = sharedContext;
    const storageContainer = createElement("div");
    sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {
      const instance2 = vnode.component;
      move(vnode, container, anchor, 0, parentSuspense);
      patch(
        instance2.vnode,
        vnode,
        container,
        anchor,
        instance2,
        parentSuspense,
        isSVG,
        vnode.slotScopeIds,
        optimized
      );
      queuePostRenderEffect(() => {
        instance2.isDeactivated = false;
        if (instance2.a) {
          invokeArrayFns(instance2.a);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
      }, parentSuspense);
    };
    sharedContext.deactivate = (vnode) => {
      const instance2 = vnode.component;
      move(vnode, storageContainer, null, 1, parentSuspense);
      queuePostRenderEffect(() => {
        if (instance2.da) {
          invokeArrayFns(instance2.da);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
        instance2.isDeactivated = true;
      }, parentSuspense);
    };
    function unmount(vnode) {
      resetShapeFlag(vnode);
      _unmount(vnode, instance, parentSuspense, true);
    }
    function pruneCache(filter) {
      cache2.forEach((vnode, key) => {
        const name = getComponentName(vnode.type);
        if (name && (!filter || !filter(name))) {
          pruneCacheEntry(key);
        }
      });
    }
    function pruneCacheEntry(key) {
      const cached = cache2.get(key);
      if (!current || !isSameVNodeType(cached, current)) {
        unmount(cached);
      } else if (current) {
        resetShapeFlag(current);
      }
      cache2.delete(key);
      keys.delete(key);
    }
    watch(
      () => [props.include, props.exclude],
      ([include, exclude]) => {
        include && pruneCache((name) => matches$1(include, name));
        exclude && pruneCache((name) => !matches$1(exclude, name));
      },
      // prune post-render after `current` has been updated
      { flush: "post", deep: true }
    );
    let pendingCacheKey = null;
    const cacheSubtree = () => {
      if (pendingCacheKey != null) {
        cache2.set(pendingCacheKey, getInnerChild(instance.subTree));
      }
    };
    onMounted(cacheSubtree);
    onUpdated(cacheSubtree);
    onBeforeUnmount(() => {
      cache2.forEach((cached) => {
        const { subTree, suspense } = instance;
        const vnode = getInnerChild(subTree);
        if (cached.type === vnode.type && cached.key === vnode.key) {
          resetShapeFlag(vnode);
          const da = vnode.component.da;
          da && queuePostRenderEffect(da, suspense);
          return;
        }
        unmount(cached);
      });
    });
    return () => {
      pendingCacheKey = null;
      if (!slots.default) {
        return null;
      }
      const children = slots.default();
      const rawVNode = children[0];
      if (children.length > 1) {
        current = null;
        return children;
      } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
        current = null;
        return rawVNode;
      }
      let vnode = getInnerChild(rawVNode);
      const comp = vnode.type;
      const name = getComponentName(
        isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp
      );
      const { include, exclude, max } = props;
      if (include && (!name || !matches$1(include, name)) || exclude && name && matches$1(exclude, name)) {
        current = vnode;
        return rawVNode;
      }
      const key = vnode.key == null ? comp : vnode.key;
      const cachedVNode = cache2.get(key);
      if (vnode.el) {
        vnode = cloneVNode(vnode);
        if (rawVNode.shapeFlag & 128) {
          rawVNode.ssContent = vnode;
        }
      }
      pendingCacheKey = key;
      if (cachedVNode) {
        vnode.el = cachedVNode.el;
        vnode.component = cachedVNode.component;
        if (vnode.transition) {
          setTransitionHooks(vnode, vnode.transition);
        }
        vnode.shapeFlag |= 512;
        keys.delete(key);
        keys.add(key);
      } else {
        keys.add(key);
        if (max && keys.size > parseInt(max, 10)) {
          pruneCacheEntry(keys.values().next().value);
        }
      }
      vnode.shapeFlag |= 256;
      current = vnode;
      return isSuspense(rawVNode.type) ? rawVNode : vnode;
    };
  }
};
const KeepAlive = KeepAliveImpl;
function matches$1(pattern, name) {
  if (isArray$1(pattern)) {
    return pattern.some((p2) => matches$1(p2, name));
  } else if (isString(pattern)) {
    return pattern.split(",").includes(name);
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  return false;
}
function onActivated(hook, target2) {
  registerKeepAliveHook(hook, "a", target2);
}
function onDeactivated(hook, target2) {
  registerKeepAliveHook(hook, "da", target2);
}
function registerKeepAliveHook(hook, type2, target2 = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target2;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook(type2, wrappedHook, target2);
  if (target2) {
    let current = target2.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type2, target2, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type2, target2, keepAliveRoot) {
  const injected = injectHook(
    type2,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted(() => {
    remove(keepAliveRoot[type2], injected);
  }, target2);
}
function resetShapeFlag(vnode) {
  vnode.shapeFlag &= ~256;
  vnode.shapeFlag &= ~512;
}
function getInnerChild(vnode) {
  return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
}
function injectHook(type2, hook, target2 = currentInstance, prepend = false) {
  if (target2) {
    const hooks = target2[type2] || (target2[type2] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target2.isUnmounted) {
        return;
      }
      pauseTracking();
      setCurrentInstance(target2);
      const res = callWithAsyncErrorHandling(hook, target2, type2, args);
      unsetCurrentInstance();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  }
}
const createHook = (lifecycle) => (hook, target2 = currentInstance) => (
  // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
  (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, (...args) => hook(...args), target2)
);
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook("bu");
const onUpdated = createHook("u");
const onBeforeUnmount = createHook("bum");
const onUnmounted = createHook("um");
const onServerPrefetch = createHook("sp");
const onRenderTriggered = createHook(
  "rtg"
);
const onRenderTracked = createHook(
  "rtc"
);
function onErrorCaptured(hook, target2 = currentInstance) {
  injectHook("ec", hook, target2);
}
const COMPONENTS = "components";
const DIRECTIVES = "directives";
function resolveComponent(name, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
function resolveDynamicComponent(component) {
  if (isString(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveDirective(name) {
  return resolveAsset(DIRECTIVES, name);
}
function resolveAsset(type2, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type2 === COMPONENTS) {
      const selfName = getComponentName(
        Component,
        false
        /* do not include inferred name to avoid breaking existing code */
      );
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize$1(camelize(name)))) {
        return Component;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve(instance[type2] || Component[type2], name) || // global registration
      resolve(instance.appContext[type2], name)
    );
    if (!res && maybeSelfReference) {
      return Component;
    }
    return res;
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize$1(camelize(name))]);
}
function renderList(source, renderItem, cache2, index2) {
  let ret;
  const cached = cache2 && cache2[index2];
  if (isArray$1(source) || isString(source)) {
    ret = new Array(source.length);
    for (let i2 = 0, l = source.length; i2 < l; i2++) {
      ret[i2] = renderItem(source[i2], i2, void 0, cached && cached[i2]);
    }
  } else if (typeof source === "number") {
    ret = new Array(source);
    for (let i2 = 0; i2 < source; i2++) {
      ret[i2] = renderItem(i2 + 1, i2, void 0, cached && cached[i2]);
    }
  } else if (isObject$2(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(
        source,
        (item, i2) => renderItem(item, i2, void 0, cached && cached[i2])
      );
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i2 = 0, l = keys.length; i2 < l; i2++) {
        const key = keys[i2];
        ret[i2] = renderItem(source[key], key, i2, cached && cached[i2]);
      }
    }
  } else {
    ret = [];
  }
  if (cache2) {
    cache2[index2] = ret;
  }
  return ret;
}
function createSlots(slots, dynamicSlots) {
  for (let i2 = 0; i2 < dynamicSlots.length; i2++) {
    const slot = dynamicSlots[i2];
    if (isArray$1(slot)) {
      for (let j = 0; j < slot.length; j++) {
        slots[slot[j].name] = slot[j].fn;
      }
    } else if (slot) {
      slots[slot.name] = slot.key ? (...args) => {
        const res = slot.fn(...args);
        if (res)
          res.key = slot.key;
        return res;
      } : slot.fn;
    }
  }
  return slots;
}
function renderSlot(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) {
    if (name !== "default")
      props.name = name;
    return createVNode("slot", props, fallback && fallback());
  }
  let slot = slots[name];
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock();
  const validSlotContent = slot && ensureValidVNode(slot(props));
  const rendered = createBlock(
    Fragment,
    {
      key: props.key || // slot content array of a dynamic conditional slot may have a branch
      // key attached in the `createSlots` helper, respect that
      validSlotContent && validSlotContent.key || `_${name}`
    },
    validSlotContent || (fallback ? fallback() : []),
    validSlotContent && slots._ === 1 ? 64 : -2
  );
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode(child))
      return true;
    if (child.type === Comment)
      return false;
    if (child.type === Fragment && !ensureValidVNode(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}
function toHandlers(obj, preserveCaseIfNecessary) {
  const ret = {};
  for (const key in obj) {
    ret[preserveCaseIfNecessary && /[A-Z]/.test(key) ? `on:${key}` : toHandlerKey(key)] = obj[key];
  }
  return ret;
}
const getPublicInstance = (i2) => {
  if (!i2)
    return null;
  if (isStatefulComponent(i2))
    return getExposeProxy(i2) || i2.proxy;
  return getPublicInstance(i2.parent);
};
const publicPropertiesMap = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ extend(/* @__PURE__ */ Object.create(null), {
    $: (i2) => i2,
    $el: (i2) => i2.vnode.el,
    $data: (i2) => i2.data,
    $props: (i2) => i2.props,
    $attrs: (i2) => i2.attrs,
    $slots: (i2) => i2.slots,
    $refs: (i2) => i2.refs,
    $parent: (i2) => getPublicInstance(i2.parent),
    $root: (i2) => getPublicInstance(i2.root),
    $emit: (i2) => i2.emit,
    $options: (i2) => resolveMergedOptions(i2),
    $forceUpdate: (i2) => i2.f || (i2.f = () => queueJob(i2.update)),
    $nextTick: (i2) => i2.n || (i2.n = nextTick$1.bind(i2.proxy)),
    $watch: (i2) => instanceWatch.bind(i2)
  })
);
const hasSetupBinding = (state, key) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn(state, key);
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    const { ctx, setupState, data, props, accessCache, type: type2, appContext } = instance;
    let normalizedProps;
    if (key[0] !== "$") {
      const n = accessCache[key];
      if (n !== void 0) {
        switch (n) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)
      ) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance, "get", key);
      }
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type2.__cssModules) && (cssModule = cssModule[key])
    ) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)
    ) {
      {
        return globalProperties[key];
      }
    } else
      ;
  },
  set({ _: instance }, key, value2) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding(setupState, key)) {
      setupState[key] = value2;
      return true;
    } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
      data[key] = value2;
      return true;
    } else if (hasOwn(instance.props, key)) {
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      return false;
    } else {
      {
        ctx[key] = value2;
      }
    }
    return true;
  },
  has({
    _: { data, setupState, accessCache, ctx, appContext, propsOptions }
  }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
  },
  defineProperty(target2, key, descriptor) {
    if (descriptor.get != null) {
      target2._.accessCache[key] = 0;
    } else if (hasOwn(descriptor, "value")) {
      this.set(target2, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target2, key, descriptor);
  }
};
const RuntimeCompiledPublicInstanceProxyHandlers = /* @__PURE__ */ extend(
  {},
  PublicInstanceProxyHandlers,
  {
    get(target2, key) {
      if (key === Symbol.unscopables) {
        return;
      }
      return PublicInstanceProxyHandlers.get(target2, key, target2);
    },
    has(_, key) {
      const has2 = key[0] !== "_" && !isGloballyWhitelisted(key);
      return has2;
    }
  }
);
function defineProps() {
  return null;
}
function defineEmits() {
  return null;
}
function defineExpose(exposed) {
}
function defineOptions(options) {
}
function defineSlots() {
  return null;
}
function defineModel() {
}
function withDefaults(props, defaults2) {
  return null;
}
function useSlots() {
  return getContext().slots;
}
function useAttrs() {
  return getContext().attrs;
}
function useModel(props, name, options) {
  const i2 = getCurrentInstance();
  if (options && options.local) {
    const proxy = ref(props[name]);
    watch(
      () => props[name],
      (v) => proxy.value = v
    );
    watch(proxy, (value2) => {
      if (value2 !== props[name]) {
        i2.emit(`update:${name}`, value2);
      }
    });
    return proxy;
  } else {
    return {
      __v_isRef: true,
      get value() {
        return props[name];
      },
      set value(value2) {
        i2.emit(`update:${name}`, value2);
      }
    };
  }
}
function getContext() {
  const i2 = getCurrentInstance();
  return i2.setupContext || (i2.setupContext = createSetupContext(i2));
}
function normalizePropsOrEmits(props) {
  return isArray$1(props) ? props.reduce(
    (normalized, p2) => (normalized[p2] = null, normalized),
    {}
  ) : props;
}
function mergeDefaults(raw, defaults2) {
  const props = normalizePropsOrEmits(raw);
  for (const key in defaults2) {
    if (key.startsWith("__skip"))
      continue;
    let opt = props[key];
    if (opt) {
      if (isArray$1(opt) || isFunction(opt)) {
        opt = props[key] = { type: opt, default: defaults2[key] };
      } else {
        opt.default = defaults2[key];
      }
    } else if (opt === null) {
      opt = props[key] = { default: defaults2[key] };
    } else
      ;
    if (opt && defaults2[`__skip_${key}`]) {
      opt.skipFactory = true;
    }
  }
  return props;
}
function mergeModels(a, b) {
  if (!a || !b)
    return a || b;
  if (isArray$1(a) && isArray$1(b))
    return a.concat(b);
  return extend({}, normalizePropsOrEmits(a), normalizePropsOrEmits(b));
}
function createPropsRestProxy(props, excludedKeys) {
  const ret = {};
  for (const key in props) {
    if (!excludedKeys.includes(key)) {
      Object.defineProperty(ret, key, {
        enumerable: true,
        get: () => props[key]
      });
    }
  }
  return ret;
}
function withAsyncContext(getAwaitable) {
  const ctx = getCurrentInstance();
  let awaitable = getAwaitable();
  unsetCurrentInstance();
  if (isPromise(awaitable)) {
    awaitable = awaitable.catch((e) => {
      setCurrentInstance(ctx);
      throw e;
    });
  }
  return [awaitable, () => setCurrentInstance(ctx)];
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook$1(options.beforeCreate, instance, "bc");
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives,
    filters
  } = options;
  const checkDuplicateProperties = null;
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction(methodHandler)) {
        {
          ctx[key] = methodHandler.bind(publicThis);
        }
      }
    }
  }
  if (dataOptions) {
    const data = dataOptions.call(publicThis, publicThis);
    if (!isObject$2(data))
      ;
    else {
      instance.data = reactive(data);
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction(opt) ? opt.bind(publicThis, publicThis) : isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      const set2 = !isFunction(opt) && isFunction(opt.set) ? opt.set.bind(publicThis) : NOOP;
      const c = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c.value,
        set: (v) => c.value = v
      });
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook$1(created, instance, "c");
  }
  function registerLifecycleHook(register2, hook) {
    if (isArray$1(hook)) {
      hook.forEach((_hook) => register2(_hook.bind(publicThis)));
    } else if (hook) {
      register2(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray$1(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render2 && instance.render === NOOP) {
    instance.render = render2;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives)
    instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP) {
  if (isArray$1(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject$2(opt)) {
      if ("default" in opt) {
        injected = inject(
          opt.from || key,
          opt.default,
          true
          /* treat default function as factory */
        );
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => injected.value,
        set: (v) => injected.value = v
      });
    } else {
      ctx[key] = injected;
    }
  }
}
function callHook$1(hook, instance, type2) {
  callWithAsyncErrorHandling(
    isArray$1(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy),
    instance,
    type2
  );
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString(raw)) {
    const handler = ctx[raw];
    if (isFunction(handler)) {
      watch(getter, handler);
    }
  } else if (isFunction(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject$2(raw)) {
    if (isArray$1(raw)) {
      raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
    } else {
      const handler = isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction(handler)) {
        watch(getter, handler, raw);
      }
    }
  } else
    ;
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const {
    mixins: globalMixins,
    optionsCache: cache2,
    config: { optionMergeStrategies }
  } = instance.appContext;
  const cached = cache2.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach(
        (m) => mergeOptions(resolved, m, optionMergeStrategies, true)
      );
    }
    mergeOptions(resolved, base, optionMergeStrategies);
  }
  if (isObject$2(base)) {
    cache2.set(base, resolved);
  }
  return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions(to, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach(
      (m) => mergeOptions(to, m, strats, true)
    );
  }
  for (const key in from) {
    if (asMixin && key === "expose")
      ;
    else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
  }
  return to;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeEmitsOrPropsOptions,
  emits: mergeEmitsOrPropsOptions,
  // objects
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  // lifecycle
  beforeCreate: mergeAsArray$1,
  created: mergeAsArray$1,
  beforeMount: mergeAsArray$1,
  mounted: mergeAsArray$1,
  beforeUpdate: mergeAsArray$1,
  updated: mergeAsArray$1,
  beforeDestroy: mergeAsArray$1,
  beforeUnmount: mergeAsArray$1,
  destroyed: mergeAsArray$1,
  unmounted: mergeAsArray$1,
  activated: mergeAsArray$1,
  deactivated: mergeAsArray$1,
  errorCaptured: mergeAsArray$1,
  serverPrefetch: mergeAsArray$1,
  // assets
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  // watch
  watch: mergeWatchOptions,
  // provide / inject
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to, from) {
  if (!from) {
    return to;
  }
  if (!to) {
    return from;
  }
  return function mergedDataFn() {
    return extend(
      isFunction(to) ? to.call(this, this) : to,
      isFunction(from) ? from.call(this, this) : from
    );
  };
}
function mergeInject(to, from) {
  return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
  if (isArray$1(raw)) {
    const res = {};
    for (let i2 = 0; i2 < raw.length; i2++) {
      res[raw[i2]] = raw[i2];
    }
    return res;
  }
  return raw;
}
function mergeAsArray$1(to, from) {
  return to ? [...new Set([].concat(to, from))] : from;
}
function mergeObjectOptions(to, from) {
  return to ? extend(/* @__PURE__ */ Object.create(null), to, from) : from;
}
function mergeEmitsOrPropsOptions(to, from) {
  if (to) {
    if (isArray$1(to) && isArray$1(from)) {
      return [.../* @__PURE__ */ new Set([...to, ...from])];
    }
    return extend(
      /* @__PURE__ */ Object.create(null),
      normalizePropsOrEmits(to),
      normalizePropsOrEmits(from != null ? from : {})
    );
  } else {
    return from;
  }
}
function mergeWatchOptions(to, from) {
  if (!to)
    return from;
  if (!from)
    return to;
  const merged = extend(/* @__PURE__ */ Object.create(null), to);
  for (const key in from) {
    merged[key] = mergeAsArray$1(to[key], from[key]);
  }
  return merged;
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1$1 = 0;
function createAppAPI(render2, hydrate2) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction(rootComponent)) {
      rootComponent = extend({}, rootComponent);
    }
    if (rootProps != null && !isObject$2(rootProps)) {
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new Set();
    let isMounted = false;
    const app = context.app = {
      _uid: uid$1$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version,
      get config() {
        return context.config;
      },
      set config(v) {
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin))
          ;
        else if (plugin && isFunction(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app, ...options);
        } else if (isFunction(plugin)) {
          installedPlugins.add(plugin);
          plugin(app, ...options);
        } else
          ;
        return app;
      },
      mixin(mixin2) {
        {
          if (!context.mixins.includes(mixin2)) {
            context.mixins.push(mixin2);
          }
        }
        return app;
      },
      component(name, component) {
        if (!component) {
          return context.components[name];
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        if (!directive) {
          return context.directives[name];
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          const vnode = createVNode(
            rootComponent,
            rootProps
          );
          vnode.appContext = context;
          if (isHydrate && hydrate2) {
            hydrate2(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          return getExposeProxy(vnode.component) || vnode.component.proxy;
        }
      },
      unmount() {
        if (isMounted) {
          render2(null, app._container);
          delete app._container.__vue_app__;
        }
      },
      provide(key, value2) {
        context.provides[key] = value2;
        return app;
      },
      runWithContext(fn) {
        currentApp = app;
        try {
          return fn();
        } finally {
          currentApp = null;
        }
      }
    };
    return app;
  };
}
let currentApp = null;
function provide(key, value2) {
  if (!currentInstance)
    ;
  else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value2;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance || currentApp) {
    const provides = instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : currentApp._context.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
    } else
      ;
  }
}
function hasInjectionContext() {
  return !!(currentInstance || currentRenderingInstance || currentApp);
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const {
    props,
    attrs,
    vnode: { patchFlag }
  } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
        let key = propsToUpdate[i2];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value2 = rawProps[key];
        if (options) {
          if (hasOwn(attrs, key)) {
            if (value2 !== attrs[key]) {
              attrs[key] = value2;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(
              options,
              rawCurrentProps,
              camelizedKey,
              value2,
              instance,
              false
              /* isAbsent */
            );
          }
        } else {
          if (value2 !== attrs[key]) {
            attrs[key] = value2;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
              /* isAbsent */
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger$1(instance, "set", "$attrs");
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value2 = rawProps[key];
      let camelKey;
      if (options && hasOwn(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value2;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value2;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value2 !== attrs[key]) {
          attrs[key] = value2;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i2 = 0; i2 < needCastKeys.length; i2++) {
      const key = needCastKeys[i2];
      props[key] = resolvePropValue(
        options,
        rawCurrentProps,
        key,
        castValues[key],
        instance,
        !hasOwn(castValues, key)
      );
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value2, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn(opt, "default");
    if (hasDefault && value2 === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && !opt.skipFactory && isFunction(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value2 = propsDefaults[key];
        } else {
          setCurrentInstance(instance);
          value2 = propsDefaults[key] = defaultValue.call(
            null,
            props
          );
          unsetCurrentInstance();
        }
      } else {
        value2 = defaultValue;
      }
    }
    if (opt[
      0
      /* shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value2 = false;
      } else if (opt[
        1
        /* shouldCastTrue */
      ] && (value2 === "" || value2 === hyphenate(key))) {
        value2 = true;
      }
    }
  }
  return value2;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache2 = appContext.propsCache;
  const cached = cache2.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      extend(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$2(comp)) {
      cache2.set(comp, EMPTY_ARR);
    }
    return EMPTY_ARR;
  }
  if (isArray$1(raw)) {
    for (let i2 = 0; i2 < raw.length; i2++) {
      const normalizedKey = camelize(raw[i2]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$1(opt) || isFunction(opt) ? { type: opt } : extend({}, opt);
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[
            0
            /* shouldCast */
          ] = booleanIndex > -1;
          prop[
            1
            /* shouldCastTrue */
          ] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject$2(comp)) {
    cache2.set(comp, res);
  }
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$") {
    return true;
  }
  return false;
}
function getType(ctor) {
  const match = ctor && ctor.toString().match(/^\s*(function|class) (\w+)/);
  return match ? match[2] : ctor === null ? "null" : "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type2, expectedTypes) {
  if (isArray$1(expectedTypes)) {
    return expectedTypes.findIndex((t) => isSameType(t, type2));
  } else if (isFunction(expectedTypes)) {
    return isSameType(expectedTypes, type2) ? 0 : -1;
  }
  return -1;
}
const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value2) => isArray$1(value2) ? value2.map(normalizeVNode) : [normalizeVNode(value2)];
const normalizeSlot = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx((...args) => {
    if (false)
      ;
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key))
      continue;
    const value2 = rawSlots[key];
    if (isFunction(value2)) {
      slots[key] = normalizeSlot(key, value2, ctx);
    } else if (value2 != null) {
      const normalized = normalizeSlotValue(value2);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type2 = children._;
    if (type2) {
      instance.slots = toRaw(children);
      def(children, "_", type2);
    } else {
      normalizeObjectSlots(
        children,
        instance.slots = {}
      );
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots(instance, children);
    }
  }
  def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type2 = children._;
    if (type2) {
      if (optimized && type2 === 1) {
        needDeletionCheck = false;
      } else {
        extend(slots, children);
        if (!optimized && type2 === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
        delete slots[key];
      }
    }
  }
};
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$1(rawRef)) {
    rawRef.forEach(
      (r, i2) => setRef(
        r,
        oldRawRef && (isArray$1(oldRawRef) ? oldRawRef[i2] : oldRawRef),
        parentSuspense,
        vnode,
        isUnmount
      )
    );
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
  const value2 = isUnmount ? null : refValue;
  const { i: owner, r: ref2 } = rawRef;
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction(ref2)) {
    callWithErrorHandling(ref2, owner, 12, [value2, refs]);
  } else {
    const _isString = isString(ref2);
    const _isRef = isRef(ref2);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? hasOwn(setupState, ref2) ? setupState[ref2] : refs[ref2] : ref2.value;
          if (isUnmount) {
            isArray$1(existing) && remove(existing, refValue);
          } else {
            if (!isArray$1(existing)) {
              if (_isString) {
                refs[ref2] = [refValue];
                if (hasOwn(setupState, ref2)) {
                  setupState[ref2] = refs[ref2];
                }
              } else {
                ref2.value = [refValue];
                if (rawRef.k)
                  refs[rawRef.k] = ref2.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref2] = value2;
          if (hasOwn(setupState, ref2)) {
            setupState[ref2] = value2;
          }
        } else if (_isRef) {
          ref2.value = value2;
          if (rawRef.k)
            refs[rawRef.k] = value2;
        } else
          ;
      };
      if (value2) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    }
  }
}
let hasMismatch = false;
const isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== "foreignObject";
const isComment$1 = (node) => node.nodeType === 8;
function createHydrationFunctions(rendererInternals) {
  const {
    mt: mountComponent,
    p: patch,
    o: {
      patchProp: patchProp2,
      createText,
      nextSibling,
      parentNode,
      remove: remove2,
      insert,
      createComment
    }
  } = rendererInternals;
  const hydrate2 = (vnode, container) => {
    if (!container.hasChildNodes()) {
      patch(null, vnode, container);
      flushPostFlushCbs();
      container._vnode = vnode;
      return;
    }
    hasMismatch = false;
    hydrateNode(container.firstChild, vnode, null, null, null);
    flushPostFlushCbs();
    container._vnode = vnode;
    if (hasMismatch && true) {
      console.error(`Hydration completed but contains mismatches.`);
    }
  };
  const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
    const isFragmentStart = isComment$1(node) && node.data === "[";
    const onMismatch = () => handleMismatch(
      node,
      vnode,
      parentComponent,
      parentSuspense,
      slotScopeIds,
      isFragmentStart
    );
    const { type: type2, ref: ref2, shapeFlag, patchFlag } = vnode;
    let domType = node.nodeType;
    vnode.el = node;
    if (patchFlag === -2) {
      optimized = false;
      vnode.dynamicChildren = null;
    }
    let nextNode = null;
    switch (type2) {
      case Text:
        if (domType !== 3) {
          if (vnode.children === "") {
            insert(vnode.el = createText(""), parentNode(node), node);
            nextNode = node;
          } else {
            nextNode = onMismatch();
          }
        } else {
          if (node.data !== vnode.children) {
            hasMismatch = true;
            node.data = vnode.children;
          }
          nextNode = nextSibling(node);
        }
        break;
      case Comment:
        if (domType !== 8 || isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = nextSibling(node);
        }
        break;
      case Static:
        if (isFragmentStart) {
          node = nextSibling(node);
          domType = node.nodeType;
        }
        if (domType === 1 || domType === 3) {
          nextNode = node;
          const needToAdoptContent = !vnode.children.length;
          for (let i2 = 0; i2 < vnode.staticCount; i2++) {
            if (needToAdoptContent)
              vnode.children += nextNode.nodeType === 1 ? nextNode.outerHTML : nextNode.data;
            if (i2 === vnode.staticCount - 1) {
              vnode.anchor = nextNode;
            }
            nextNode = nextSibling(nextNode);
          }
          return isFragmentStart ? nextSibling(nextNode) : nextNode;
        } else {
          onMismatch();
        }
        break;
      case Fragment:
        if (!isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = hydrateFragment(
            node,
            vnode,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            optimized
          );
        }
        break;
      default:
        if (shapeFlag & 1) {
          if (domType !== 1 || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) {
            nextNode = onMismatch();
          } else {
            nextNode = hydrateElement(
              node,
              vnode,
              parentComponent,
              parentSuspense,
              slotScopeIds,
              optimized
            );
          }
        } else if (shapeFlag & 6) {
          vnode.slotScopeIds = slotScopeIds;
          const container = parentNode(node);
          mountComponent(
            vnode,
            container,
            null,
            parentComponent,
            parentSuspense,
            isSVGContainer(container),
            optimized
          );
          nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
          if (nextNode && isComment$1(nextNode) && nextNode.data === "teleport end") {
            nextNode = nextSibling(nextNode);
          }
          if (isAsyncWrapper(vnode)) {
            let subTree;
            if (isFragmentStart) {
              subTree = createVNode(Fragment);
              subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
            } else {
              subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
            }
            subTree.el = node;
            vnode.component.subTree = subTree;
          }
        } else if (shapeFlag & 64) {
          if (domType !== 8) {
            nextNode = onMismatch();
          } else {
            nextNode = vnode.type.hydrate(
              node,
              vnode,
              parentComponent,
              parentSuspense,
              slotScopeIds,
              optimized,
              rendererInternals,
              hydrateChildren
            );
          }
        } else if (shapeFlag & 128) {
          nextNode = vnode.type.hydrate(
            node,
            vnode,
            parentComponent,
            parentSuspense,
            isSVGContainer(parentNode(node)),
            slotScopeIds,
            optimized,
            rendererInternals,
            hydrateNode
          );
        } else
          ;
    }
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode);
    }
    return nextNode;
  };
  const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!vnode.dynamicChildren;
    const { type: type2, props, patchFlag, shapeFlag, dirs } = vnode;
    const forcePatchValue = type2 === "input" && dirs || type2 === "option";
    if (forcePatchValue || patchFlag !== -1) {
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      if (props) {
        if (forcePatchValue || !optimized || patchFlag & (16 | 32)) {
          for (const key in props) {
            if (forcePatchValue && key.endsWith("value") || isOn(key) && !isReservedProp(key)) {
              patchProp2(
                el,
                key,
                null,
                props[key],
                false,
                void 0,
                parentComponent
              );
            }
          }
        } else if (props.onClick) {
          patchProp2(
            el,
            "onClick",
            null,
            props.onClick,
            false,
            void 0,
            parentComponent
          );
        }
      }
      let vnodeHooks;
      if (vnodeHooks = props && props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHooks, parentComponent, vnode);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
      }
      if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {
        queueEffectWithSuspense(() => {
          vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
          dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
        }, parentSuspense);
      }
      if (shapeFlag & 16 && // skip if element has innerHTML / textContent
      !(props && (props.innerHTML || props.textContent))) {
        let next2 = hydrateChildren(
          el.firstChild,
          vnode,
          el,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
        while (next2) {
          hasMismatch = true;
          const cur = next2;
          next2 = next2.nextSibling;
          remove2(cur);
        }
      } else if (shapeFlag & 8) {
        if (el.textContent !== vnode.children) {
          hasMismatch = true;
          el.textContent = vnode.children;
        }
      }
    }
    return el.nextSibling;
  };
  const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!parentVNode.dynamicChildren;
    const children = parentVNode.children;
    const l = children.length;
    for (let i2 = 0; i2 < l; i2++) {
      const vnode = optimized ? children[i2] : children[i2] = normalizeVNode(children[i2]);
      if (node) {
        node = hydrateNode(
          node,
          vnode,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
      } else if (vnode.type === Text && !vnode.children) {
        continue;
      } else {
        hasMismatch = true;
        patch(
          null,
          vnode,
          container,
          null,
          parentComponent,
          parentSuspense,
          isSVGContainer(container),
          slotScopeIds
        );
      }
    }
    return node;
  };
  const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    const { slotScopeIds: fragmentSlotScopeIds } = vnode;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    const container = parentNode(node);
    const next2 = hydrateChildren(
      nextSibling(node),
      vnode,
      container,
      parentComponent,
      parentSuspense,
      slotScopeIds,
      optimized
    );
    if (next2 && isComment$1(next2) && next2.data === "]") {
      return nextSibling(vnode.anchor = next2);
    } else {
      hasMismatch = true;
      insert(vnode.anchor = createComment(`]`), container, next2);
      return next2;
    }
  };
  const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {
    hasMismatch = true;
    vnode.el = null;
    if (isFragment) {
      const end = locateClosingAsyncAnchor(node);
      while (true) {
        const next22 = nextSibling(node);
        if (next22 && next22 !== end) {
          remove2(next22);
        } else {
          break;
        }
      }
    }
    const next2 = nextSibling(node);
    const container = parentNode(node);
    remove2(node);
    patch(
      null,
      vnode,
      container,
      next2,
      parentComponent,
      parentSuspense,
      isSVGContainer(container),
      slotScopeIds
    );
    return next2;
  };
  const locateClosingAsyncAnchor = (node) => {
    let match = 0;
    while (node) {
      node = nextSibling(node);
      if (node && isComment$1(node)) {
        if (node.data === "[")
          match++;
        if (node.data === "]") {
          if (match === 0) {
            return nextSibling(node);
          } else {
            match--;
          }
        }
      }
    }
    return node;
  };
  return [hydrate2, hydrateNode];
}
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function createHydrationRenderer(options) {
  return baseCreateRenderer(options, createHydrationFunctions);
}
function baseCreateRenderer(options, createHydrationFns) {
  const target2 = getGlobalThis();
  target2.__VUE__ = true;
  const {
    insert: hostInsert,
    remove: hostRemove,
    patchProp: hostPatchProp,
    createElement: hostCreateElement,
    createText: hostCreateText,
    createComment: hostCreateComment,
    setText: hostSetText,
    setElementText: hostSetElementText,
    parentNode: hostParentNode,
    nextSibling: hostNextSibling,
    setScopeId: hostSetScopeId = NOOP,
    insertStaticContent: hostInsertStaticContent
  } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type: type2, ref: ref2, shapeFlag } = n2;
    switch (type2) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        }
        break;
      case Fragment:
        processFragment(
          n1,
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        break;
      default:
        if (shapeFlag & 1) {
          processElement(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 6) {
          processComponent(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 64) {
          type2.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized,
            internals
          );
        } else if (shapeFlag & 128) {
          type2.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized,
            internals
          );
        } else
          ;
    }
    if (ref2 != null && parentComponent) {
      setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateText(n2.children),
        container,
        anchor
      );
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateComment(n2.children || ""),
        container,
        anchor
      );
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(
      n2.children,
      container,
      anchor,
      isSVG,
      n2.el,
      n2.anchor
    );
  };
  const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
    let next2;
    while (el && el !== anchor) {
      next2 = hostNextSibling(el);
      hostInsert(el, container, nextSibling);
      el = next2;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el, anchor }) => {
    let next2;
    while (el && el !== anchor) {
      next2 = hostNextSibling(el);
      hostRemove(el);
      el = next2;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    } else {
      patchElement(
        n1,
        n2,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el;
    let vnodeHook;
    const { type: type2, props, shapeFlag, transition, dirs } = vnode;
    el = vnode.el = hostCreateElement(
      vnode.type,
      isSVG,
      props && props.is,
      props
    );
    if (shapeFlag & 8) {
      hostSetElementText(el, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(
        vnode.children,
        el,
        null,
        parentComponent,
        parentSuspense,
        isSVG && type2 !== "foreignObject",
        slotScopeIds,
        optimized
      );
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "created");
    }
    setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !isReservedProp(key)) {
          hostPatchProp(
            el,
            key,
            null,
            props[key],
            isSVG,
            vnode.children,
            parentComponent,
            parentSuspense,
            unmountChildren
          );
        }
      }
      if ("value" in props) {
        hostPatchProp(el, "value", null, props.value);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHook, parentComponent, vnode);
      }
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (slotScopeIds) {
      for (let i2 = 0; i2 < slotScopeIds.length; i2++) {
        hostSetScopeId(el, slotScopeIds[i2]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(
          el,
          parentVNode,
          parentVNode.scopeId,
          parentVNode.slotScopeIds,
          parentComponent.parent
        );
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      const child = children[i2] = optimized ? cloneIfMounted(children[i2]) : normalizeVNode(children[i2]);
      patch(
        null,
        child,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(
        n1.dynamicChildren,
        dynamicChildren,
        el,
        parentComponent,
        parentSuspense,
        areChildrenSVG,
        slotScopeIds
      );
    } else if (!optimized) {
      patchChildren(
        n1,
        n2,
        el,
        null,
        parentComponent,
        parentSuspense,
        areChildrenSVG,
        slotScopeIds,
        false
      );
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(
          el,
          n2,
          oldProps,
          newProps,
          parentComponent,
          parentSuspense,
          isSVG
        );
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
            const key = propsToUpdate[i2];
            const prev2 = oldProps[key];
            const next2 = newProps[key];
            if (next2 !== prev2 || key === "value") {
              hostPatchProp(
                el,
                key,
                prev2,
                next2,
                isSVG,
                n1.children,
                parentComponent,
                parentSuspense,
                unmountChildren
              );
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(
        el,
        n2,
        oldProps,
        newProps,
        parentComponent,
        parentSuspense,
        isSVG
      );
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i2 = 0; i2 < newChildren.length; i2++) {
      const oldVNode = oldChildren[i2];
      const newVNode = newChildren[i2];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(
        oldVNode,
        newVNode,
        container,
        null,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        true
      );
    }
  };
  const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(
              el,
              key,
              oldProps[key],
              null,
              isSVG,
              vnode.children,
              parentComponent,
              parentSuspense,
              unmountChildren
            );
          }
        }
      }
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next2 = newProps[key];
        const prev2 = oldProps[key];
        if (next2 !== prev2 && key !== "value") {
          hostPatchProp(
            el,
            key,
            prev2,
            next2,
            isSVG,
            vnode.children,
            parentComponent,
            parentSuspense,
            unmountChildren
          );
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(
        n2.children,
        container,
        fragmentEndAnchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          container,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds
        );
        if (
          // #2080 if the stable fragment has a key, it's a <template v-for> that may
          //  get moved around. Make sure all root level vnodes inherit el.
          // #2134 or if it's a component root, it may also get moved around
          // as the component is being moved.
          n2.key != null || parentComponent && n2 === parentComponent.subTree
        ) {
          traverseStaticChildren(
            n1,
            n2,
            true
            /* shallow */
          );
        }
      } else {
        patchChildren(
          n1,
          n2,
          container,
          fragmentEndAnchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(
          n2,
          container,
          anchor,
          isSVG,
          optimized
        );
      } else {
        mountComponent(
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          optimized
        );
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance(
      initialVNode,
      parentComponent,
      parentSuspense
    );
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      setupComponent(instance);
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(
      instance,
      initialVNode,
      container,
      anchor,
      parentSuspense,
      isSVG,
      optimized
    );
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        updateComponentPreRender(instance, n2, optimized);
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el, props } = initialVNode;
        const { bm, m, parent } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm) {
          invokeArrayFns(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el && hydrateNode) {
          const hydrateSubTree = () => {
            instance.subTree = renderComponentRoot(instance);
            hydrateNode(
              el,
              instance.subTree,
              instance,
              parentSuspense,
              null
            );
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(
              // note: we are moving the render call into an async callback,
              // which means it won't track dependencies - but it's ok because
              // a server-rendered async wrapper is already in resolved state
              // and it will never need to change.
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          const subTree = instance.subTree = renderComponentRoot(instance);
          patch(
            null,
            subTree,
            container,
            anchor,
            instance,
            parentSuspense,
            isSVG
          );
          initialVNode.el = subTree.el;
        }
        if (m) {
          queuePostRenderEffect(m, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode),
            parentSuspense
          );
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        initialVNode = container = anchor = null;
      } else {
        let { next: next2, bu, u, parent, vnode } = instance;
        let originNext = next2;
        let vnodeHook;
        toggleRecurse(instance, false);
        if (next2) {
          next2.el = vnode.el;
          updateComponentPreRender(instance, next2, optimized);
        } else {
          next2 = vnode;
        }
        if (bu) {
          invokeArrayFns(bu);
        }
        if (vnodeHook = next2.props && next2.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next2, vnode);
        }
        toggleRecurse(instance, true);
        const nextTree = renderComponentRoot(instance);
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          isSVG
        );
        next2.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u) {
          queuePostRenderEffect(u, parentSuspense);
        }
        if (vnodeHook = next2.props && next2.props.onVnodeUpdated) {
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, next2, vnode),
            parentSuspense
          );
        }
      }
    };
    const effect2 = instance.effect = new ReactiveEffect(
      componentUpdateFn,
      () => queueJob(update2),
      instance.scope
      // track it in component's effect scope
    );
    const update2 = instance.update = () => effect2.run();
    update2.id = instance.uid;
    toggleRecurse(instance, true);
    update2();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs();
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(
            c1,
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i2;
    for (i2 = 0; i2 < commonLength; i2++) {
      const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      patch(
        c1[i2],
        nextChild,
        container,
        null,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized
      );
    }
    if (oldLength > newLength) {
      unmountChildren(
        c1,
        parentComponent,
        parentSuspense,
        true,
        false,
        commonLength
      );
    } else {
      mountChildren(
        c2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        isSVG,
        slotScopeIds,
        optimized,
        commonLength
      );
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i2 = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[i2];
      const n2 = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      i2++;
    }
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i2 > e1) {
      if (i2 <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i2 <= e2) {
          patch(
            null,
            c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]),
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
          i2++;
        }
      }
    } else if (i2 > e2) {
      while (i2 <= e1) {
        unmount(c1[i2], parentComponent, parentSuspense, true);
        i2++;
      }
    } else {
      const s1 = i2;
      const s2 = i2;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i2 = s2; i2 <= e2; i2++) {
        const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
        if (nextChild.key != null) {
          keyToNewIndexMap.set(nextChild.key, i2);
        }
      }
      let j;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i2 = 0; i2 < toBePatched; i2++)
        newIndexToOldIndexMap[i2] = 0;
      for (i2 = s1; i2 <= e1; i2++) {
        const prevChild = c1[i2];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j = s2; j <= e2; j++) {
            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
              newIndex = j;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i2 + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(
            prevChild,
            c2[newIndex],
            container,
            null,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j = increasingNewIndexSequence.length - 1;
      for (i2 = toBePatched - 1; i2 >= 0; i2--) {
        const nextIndex = s2 + i2;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i2] === 0) {
          patch(
            null,
            nextChild,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        } else if (moved) {
          if (j < 0 || i2 !== increasingNewIndexSequence[j]) {
            move(nextChild, container, anchor, 2);
          } else {
            j--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el, type: type2, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type2.move(vnode, container, anchor, internals);
      return;
    }
    if (type2 === Fragment) {
      hostInsert(el, container, anchor);
      for (let i2 = 0; i2 < children.length; i2++) {
        move(children[i2], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type2 === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove22 = () => hostInsert(el, container, anchor);
        const performLeave = () => {
          leave(el, () => {
            remove22();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove22, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const {
      type: type2,
      props,
      ref: ref2,
      children,
      dynamicChildren,
      shapeFlag,
      patchFlag,
      dirs
    } = vnode;
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(
          vnode,
          parentComponent,
          parentSuspense,
          optimized,
          internals,
          doRemove
        );
      } else if (dynamicChildren && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type2 !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(
          dynamicChildren,
          parentComponent,
          parentSuspense,
          false,
          true
        );
      } else if (type2 === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type: type2, el, anchor, transition } = vnode;
    if (type2 === Fragment) {
      {
        removeFragment(el, anchor);
      }
      return;
    }
    if (type2 === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next2;
    while (cur !== end) {
      next2 = hostNextSibling(cur);
      hostRemove(cur);
      cur = next2;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    const { bum, scope: scope2, update: update2, subTree, um } = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    scope2.stop();
    if (update2) {
      update2.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      unmount(children[i2], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render2 = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPreFlushCbs();
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate2;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate2, hydrateNode] = createHydrationFns(
      internals
    );
  }
  return {
    render: render2,
    hydrate: hydrate2,
    createApp: createAppAPI(render2, hydrate2)
  };
}
function toggleRecurse({ effect: effect2, update: update2 }, allowed) {
  effect2.allowRecurse = update2.allowRecurse = allowed;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$1(ch1) && isArray$1(ch2)) {
    for (let i2 = 0; i2 < ch1.length; i2++) {
      const c1 = ch1[i2];
      let c2 = ch2[i2];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i2] = cloneIfMounted(ch2[i2]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren(c1, c2);
      }
      if (c2.type === Text) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i2, j, u, v, c;
  const len = arr.length;
  for (i2 = 0; i2 < len; i2++) {
    const arrI = arr[i2];
    if (arrI !== 0) {
      j = result[result.length - 1];
      if (arr[j] < arrI) {
        p2[i2] = j;
        result.push(i2);
        continue;
      }
      u = 0;
      v = result.length - 1;
      while (u < v) {
        c = u + v >> 1;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p2[i2] = result[u - 1];
        }
        result[u] = i2;
      }
    }
  }
  u = result.length;
  v = result[u - 1];
  while (u-- > 0) {
    result[u] = v;
    v = p2[v];
  }
  return result;
}
const isTeleport = (type2) => type2.__isTeleport;
const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
const isTargetSVG = (target2) => typeof SVGElement !== "undefined" && target2 instanceof SVGElement;
const resolveTarget = (props, select) => {
  const targetSelector = props && props.to;
  if (isString(targetSelector)) {
    if (!select) {
      return null;
    } else {
      const target2 = select(targetSelector);
      return target2;
    }
  } else {
    return targetSelector;
  }
};
const TeleportImpl = {
  __isTeleport: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
    const {
      mc: mountChildren,
      pc: patchChildren,
      pbc: patchBlockChildren,
      o: { insert, querySelector, createText, createComment }
    } = internals;
    const disabled = isTeleportDisabled(n2.props);
    let { shapeFlag, children, dynamicChildren } = n2;
    if (n1 == null) {
      const placeholder = n2.el = createText("");
      const mainAnchor = n2.anchor = createText("");
      insert(placeholder, container, anchor);
      insert(mainAnchor, container, anchor);
      const target2 = n2.target = resolveTarget(n2.props, querySelector);
      const targetAnchor = n2.targetAnchor = createText("");
      if (target2) {
        insert(targetAnchor, target2);
        isSVG = isSVG || isTargetSVG(target2);
      }
      const mount = (container2, anchor2) => {
        if (shapeFlag & 16) {
          mountChildren(
            children,
            container2,
            anchor2,
            parentComponent,
            parentSuspense,
            isSVG,
            slotScopeIds,
            optimized
          );
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
      } else if (target2) {
        mount(target2, targetAnchor);
      }
    } else {
      n2.el = n1.el;
      const mainAnchor = n2.anchor = n1.anchor;
      const target2 = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target2;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      isSVG = isSVG || isTargetSVG(target2);
      if (dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          currentContainer,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds
        );
        traverseStaticChildren(n1, n2, true);
      } else if (!optimized) {
        patchChildren(
          n1,
          n2,
          currentContainer,
          currentAnchor,
          parentComponent,
          parentSuspense,
          isSVG,
          slotScopeIds,
          false
        );
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(
            n2,
            container,
            mainAnchor,
            internals,
            1
          );
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(
            n2.props,
            querySelector
          );
          if (nextTarget) {
            moveTeleport(
              n2,
              nextTarget,
              null,
              internals,
              0
            );
          }
        } else if (wasDisabled) {
          moveTeleport(
            n2,
            target2,
            targetAnchor,
            internals,
            1
          );
        }
      }
    }
    updateCssVars(n2);
  },
  remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
    const { shapeFlag, children, anchor, targetAnchor, target: target2, props } = vnode;
    if (target2) {
      hostRemove(targetAnchor);
    }
    if (doRemove || !isTeleportDisabled(props)) {
      hostRemove(anchor);
      if (shapeFlag & 16) {
        for (let i2 = 0; i2 < children.length; i2++) {
          const child = children[i2];
          unmount(
            child,
            parentComponent,
            parentSuspense,
            true,
            !!child.dynamicChildren
          );
        }
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const { el, anchor, shapeFlag, children, props } = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i2 = 0; i2 < children.length; i2++) {
        move(
          children[i2],
          container,
          parentAnchor,
          2
        );
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, {
  o: { nextSibling, parentNode, querySelector }
}, hydrateChildren) {
  const target2 = vnode.target = resolveTarget(
    vnode.props,
    querySelector
  );
  if (target2) {
    const targetNode = target2._lpa || target2.firstChild;
    if (vnode.shapeFlag & 16) {
      if (isTeleportDisabled(vnode.props)) {
        vnode.anchor = hydrateChildren(
          nextSibling(node),
          vnode,
          parentNode(node),
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
        vnode.targetAnchor = targetNode;
      } else {
        vnode.anchor = nextSibling(node);
        let targetAnchor = targetNode;
        while (targetAnchor) {
          targetAnchor = nextSibling(targetAnchor);
          if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
            vnode.targetAnchor = targetAnchor;
            target2._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
            break;
          }
        }
        hydrateChildren(
          targetNode,
          vnode,
          target2,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
      }
    }
    updateCssVars(vnode);
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
const Teleport = TeleportImpl;
function updateCssVars(vnode) {
  const ctx = vnode.ctx;
  if (ctx && ctx.ut) {
    let node = vnode.children[0].el;
    while (node !== vnode.targetAnchor) {
      if (node.nodeType === 1)
        node.setAttribute("data-v-owner", ctx.uid);
      node = node.nextSibling;
    }
    ctx.ut();
  }
}
const Fragment = Symbol.for("v-fgt");
const Text = Symbol.for("v-txt");
const Comment = Symbol.for("v-cmt");
const Static = Symbol.for("v-stc");
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value2) {
  isBlockTreeEnabled += value2;
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type2, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(
    createBaseVNode(
      type2,
      props,
      children,
      patchFlag,
      dynamicProps,
      shapeFlag,
      true
      /* isBlock */
    )
  );
}
function createBlock(type2, props, children, patchFlag, dynamicProps) {
  return setupBlock(
    createVNode(
      type2,
      props,
      children,
      patchFlag,
      dynamicProps,
      true
      /* isBlock: prevent a block from tracking itself */
    )
  );
}
function isVNode(value2) {
  return value2 ? value2.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  return n1.type === n2.type && n1.key === n2.key;
}
function transformVNodeArgs(transformer) {
}
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({
  ref: ref2,
  ref_key,
  ref_for
}) => {
  if (typeof ref2 === "number") {
    ref2 = "" + ref2;
  }
  return ref2 != null ? isString(ref2) || isRef(ref2) || isFunction(ref2) ? { i: currentRenderingInstance, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
};
function createBaseVNode(type2, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type2 === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type: type2,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type2.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString(children) ? 8 : 16;
  }
  if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = _createVNode;
function _createVNode(type2, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type2 || type2 === NULL_DYNAMIC_COMPONENT) {
    type2 = Comment;
  }
  if (isVNode(type2)) {
    const cloned = cloneVNode(
      type2,
      props,
      true
      /* mergeRef: true */
    );
    if (children) {
      normalizeChildren(cloned, children);
    }
    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
      if (cloned.shapeFlag & 6) {
        currentBlock[currentBlock.indexOf(type2)] = cloned;
      } else {
        currentBlock.push(cloned);
      }
    }
    cloned.patchFlag |= -2;
    return cloned;
  }
  if (isClassComponent(type2)) {
    type2 = type2.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style } = props;
    if (klass && !isString(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject$2(style)) {
      if (isProxy(style) && !isArray$1(style)) {
        style = extend({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString(type2) ? 1 : isSuspense(type2) ? 128 : isTeleport(type2) ? 64 : isObject$2(type2) ? 4 : isFunction(type2) ? 2 : 0;
  return createBaseVNode(
    type2,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    isBlockNode,
    true
  );
}
function guardReactiveProps(props) {
  if (!props)
    return null;
  return isProxy(props) || InternalObjectKey in props ? extend({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const { props, ref: ref2, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref2 ? isArray$1(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps)
    ) : ref2,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode(Static, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode(text = "", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment);
  } else if (isArray$1(child)) {
    return createVNode(
      Fragment,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type2 = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$1(children)) {
    type2 = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type2 = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type2 = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type2 = 16;
      children = [createTextVNode(children)];
    } else {
      type2 = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type2;
}
function mergeProps(...args) {
  const ret = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const toMerge = args[i2];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$1(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext = createAppContext();
let uid$2 = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type2 = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid$2++,
    vnode,
    type: type2,
    parent,
    appContext,
    root: null,
    // to be immediately set
    next: null,
    subTree: null,
    // will be set synchronously right after creation
    effect: null,
    update: null,
    // will be set synchronously right after creation
    scope: new EffectScope(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions(type2, appContext),
    emitsOptions: normalizeEmitsOptions(type2, appContext),
    // emit
    emit: null,
    // to be set immediately
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ,
    // inheritAttrs
    inheritAttrs: type2.inheritAttrs,
    // state
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    attrsProxy: null,
    slotsProxy: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = { _: instance };
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
let internalSetCurrentInstance;
let globalCurrentInstanceSetters;
let settersKey = "__VUE_INSTANCE_SETTERS__";
{
  if (!(globalCurrentInstanceSetters = getGlobalThis()[settersKey])) {
    globalCurrentInstanceSetters = getGlobalThis()[settersKey] = [];
  }
  globalCurrentInstanceSetters.push((i2) => currentInstance = i2);
  internalSetCurrentInstance = (instance) => {
    if (globalCurrentInstanceSetters.length > 1) {
      globalCurrentInstanceSetters.forEach((s) => s(instance));
    } else {
      globalCurrentInstanceSetters[0](instance);
    }
  };
}
const setCurrentInstance = (instance) => {
  internalSetCurrentInstance(instance);
  instance.scope.on();
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  internalSetCurrentInstance(null);
};
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isInSSRComponentSetup = isSSR;
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isInSSRComponentSetup = false;
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component = instance.type;
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(
      setup,
      instance,
      0,
      [instance.props, setupContext]
    );
    resetTracking();
    unsetCurrentInstance();
    if (isPromise(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e) => {
          handleError(e, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$2(setupResult)) {
    instance.setupState = proxyRefs(setupResult);
  } else
    ;
  finishComponentSetup(instance, isSSR);
}
let compile$1;
let installWithProxy;
function registerRuntimeCompiler(_compile) {
  compile$1 = _compile;
  installWithProxy = (i2) => {
    if (i2.render._rc) {
      i2.withProxy = new Proxy(i2.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    }
  };
}
const isRuntimeOnly = () => !compile$1;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile$1 && !Component.render) {
      const template = Component.template || resolveMergedOptions(instance).template;
      if (template) {
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend(
          extend(
            {
              isCustomElement,
              delimiters
            },
            compilerOptions
          ),
          componentCompilerOptions
        );
        Component.render = compile$1(template, finalCompilerOptions);
      }
    }
    instance.render = Component.render || NOOP;
    if (installWithProxy) {
      installWithProxy(instance);
    }
  }
  {
    setCurrentInstance(instance);
    pauseTracking();
    applyOptions(instance);
    resetTracking();
    unsetCurrentInstance();
  }
}
function getAttrsProxy(instance) {
  return instance.attrsProxy || (instance.attrsProxy = new Proxy(
    instance.attrs,
    {
      get(target2, key) {
        track(instance, "get", "$attrs");
        return target2[key];
      }
    }
  ));
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    instance.exposed = exposed || {};
  };
  {
    return {
      get attrs() {
        return getAttrsProxy(instance);
      },
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function getExposeProxy(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target2, key) {
        if (key in target2) {
          return target2[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      },
      has(target2, key) {
        return key in target2 || key in publicPropertiesMap;
      }
    }));
  }
}
function getComponentName(Component, includeInferred = true) {
  return isFunction(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function isClassComponent(value2) {
  return isFunction(value2) && "__vccOpts" in value2;
}
const computed = (getterOrOptions, debugOptions) => {
  return computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
};
function h(type2, propsOrChildren, children) {
  const l = arguments.length;
  if (l === 2) {
    if (isObject$2(propsOrChildren) && !isArray$1(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type2, null, [propsOrChildren]);
      }
      return createVNode(type2, propsOrChildren);
    } else {
      return createVNode(type2, null, propsOrChildren);
    }
  } else {
    if (l > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type2, propsOrChildren, children);
  }
}
const ssrContextKey = Symbol.for("v-scx");
const useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    return ctx;
  }
};
function initCustomFormatter() {
  {
    return;
  }
}
function withMemo(memo, render2, cache2, index2) {
  const cached = cache2[index2];
  if (cached && isMemoSame(cached, memo)) {
    return cached;
  }
  const ret = render2();
  ret.memo = memo.slice();
  return cache2[index2] = ret;
}
function isMemoSame(cached, memo) {
  const prev2 = cached.memo;
  if (prev2.length != memo.length) {
    return false;
  }
  for (let i2 = 0; i2 < prev2.length; i2++) {
    if (hasChanged(prev2[i2], memo[i2])) {
      return false;
    }
  }
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(cached);
  }
  return true;
}
const version = "3.3.4";
const _ssrUtils = {
  createComponentInstance,
  setupComponent,
  renderComponentRoot,
  setCurrentRenderingInstance,
  isVNode,
  normalizeVNode
};
const ssrUtils = _ssrUtils;
const resolveFilter = null;
const compatUtils = null;
const svgNS = "http://www.w3.org/2000/svg";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is, props) => {
    const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? { is } : void 0);
    if (tag === "select" && props && props.multiple != null) {
      el.setAttribute("multiple", props.multiple);
    }
    return el;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id) {
    el.setAttribute(id, "");
  },
  // __UNSAFE__
  // Reason: innerHTML.
  // Static content here can only come from compiled templates.
  // As long as the user only uses trusted templates, this is safe.
  insertStaticContent(content, parent, anchor, isSVG, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling))
          break;
      }
    } else {
      templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      const template = templateContainer.content;
      if (isSVG) {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      // first
      before ? before.nextSibling : parent.firstChild,
      // last
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
function patchClass(el, value2, isSVG) {
  const transitionClasses = el._vtc;
  if (transitionClasses) {
    value2 = (value2 ? [value2, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value2 == null) {
    el.removeAttribute("class");
  } else if (isSVG) {
    el.setAttribute("class", value2);
  } else {
    el.className = value2;
  }
}
function patchStyle(el, prev2, next2) {
  const style = el.style;
  const isCssString = isString(next2);
  if (next2 && !isCssString) {
    if (prev2 && !isString(prev2)) {
      for (const key in prev2) {
        if (next2[key] == null) {
          setStyle(style, key, "");
        }
      }
    }
    for (const key in next2) {
      setStyle(style, key, next2[key]);
    }
  } else {
    const currentDisplay = style.display;
    if (isCssString) {
      if (prev2 !== next2) {
        style.cssText = next2;
      }
    } else if (prev2) {
      el.removeAttribute("style");
    }
    if ("_vod" in el) {
      style.display = currentDisplay;
    }
  }
}
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
  if (isArray$1(val)) {
    val.forEach((v) => setStyle(style, name, v));
  } else {
    if (val == null)
      val = "";
    if (name.startsWith("--")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(
          hyphenate(prefixed),
          val.replace(importantRE, ""),
          "important"
        );
      } else {
        style[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== "filter" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = capitalize$1(name);
  for (let i2 = 0; i2 < prefixes.length; i2++) {
    const prefixed = prefixes[i2] + name;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key, value2, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value2 == null) {
      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el.setAttributeNS(xlinkNS, key, value2);
    }
  } else {
    const isBoolean = isSpecialBooleanAttr(key);
    if (value2 == null || isBoolean && !includeBooleanAttr(value2)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, isBoolean ? "" : value2);
    }
  }
}
function patchDOMProp(el, key, value2, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el[key] = value2 == null ? "" : value2;
    return;
  }
  const tag = el.tagName;
  if (key === "value" && tag !== "PROGRESS" && // custom elements may use _value internally
  !tag.includes("-")) {
    el._value = value2;
    const oldValue = tag === "OPTION" ? el.getAttribute("value") : el.value;
    const newValue = value2 == null ? "" : value2;
    if (oldValue !== newValue) {
      el.value = newValue;
    }
    if (value2 == null) {
      el.removeAttribute(key);
    }
    return;
  }
  let needRemove = false;
  if (value2 === "" || value2 == null) {
    const type2 = typeof el[key];
    if (type2 === "boolean") {
      value2 = includeBooleanAttr(value2);
    } else if (value2 == null && type2 === "string") {
      value2 = "";
      needRemove = true;
    } else if (type2 === "number") {
      value2 = 0;
      needRemove = true;
    }
  }
  try {
    el[key] = value2;
  } catch (e) {
  }
  needRemove && el.removeAttribute(key);
}
function addEventListener$1(el, event, handler, options) {
  el.addEventListener(event, handler, options);
}
function removeEventListener$1(el, event, handler, options) {
  el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el._vei || (el._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener$1(el, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener$1(el, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m;
    while (m = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m[0].length);
      options[m[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : hyphenate(name.slice(2));
  return [event, options];
}
let cachedNow = 0;
const p = /* @__PURE__ */ Promise.resolve();
const getNow = () => cachedNow || (p.then(() => cachedNow = 0), cachedNow = Date.now());
function createInvoker(initialValue, instance) {
  const invoker = (e) => {
    if (!e._vts) {
      e._vts = Date.now();
    } else if (e._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling(
      patchStopImmediatePropagation(e, invoker.value),
      instance,
      5,
      [e]
    );
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e, value2) {
  if (isArray$1(value2)) {
    const originalStop = e.stopImmediatePropagation;
    e.stopImmediatePropagation = () => {
      originalStop.call(e);
      e._stopped = true;
    };
    return value2.map((fn) => (e2) => !e2._stopped && fn && fn(e2));
  } else {
    return value2;
  }
}
const nativeOnRE = /^on[a-z]/;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key === "class") {
    patchClass(el, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
    patchDOMProp(
      el,
      key,
      nextValue,
      prevChildren,
      parentComponent,
      parentSuspense,
      unmountChildren
    );
  } else {
    if (key === "true-value") {
      el._trueValue = nextValue;
    } else if (key === "false-value") {
      el._falseValue = nextValue;
    }
    patchAttr(el, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el, key, value2, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el && nativeOnRE.test(key) && isFunction(value2)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE.test(key) && isString(value2)) {
    return false;
  }
  return key in el;
}
function defineCustomElement(options, hydrate2) {
  const Comp = defineComponent(options);
  class VueCustomElement extends VueElement {
    constructor(initialProps) {
      super(Comp, initialProps, hydrate2);
    }
  }
  VueCustomElement.def = Comp;
  return VueCustomElement;
}
const defineSSRCustomElement = (options) => {
  return defineCustomElement(options, hydrate);
};
const BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
};
class VueElement extends BaseClass {
  constructor(_def, _props = {}, hydrate2) {
    super();
    this._def = _def;
    this._props = _props;
    this._instance = null;
    this._connected = false;
    this._resolved = false;
    this._numberProps = null;
    if (this.shadowRoot && hydrate2) {
      hydrate2(this._createVNode(), this.shadowRoot);
    } else {
      this.attachShadow({ mode: "open" });
      if (!this._def.__asyncLoader) {
        this._resolveProps(this._def);
      }
    }
  }
  connectedCallback() {
    this._connected = true;
    if (!this._instance) {
      if (this._resolved) {
        this._update();
      } else {
        this._resolveDef();
      }
    }
  }
  disconnectedCallback() {
    this._connected = false;
    nextTick$1(() => {
      if (!this._connected) {
        render(null, this.shadowRoot);
        this._instance = null;
      }
    });
  }
  /**
   * resolve inner component definition (handle possible async component)
   */
  _resolveDef() {
    this._resolved = true;
    for (let i2 = 0; i2 < this.attributes.length; i2++) {
      this._setAttr(this.attributes[i2].name);
    }
    new MutationObserver((mutations) => {
      for (const m of mutations) {
        this._setAttr(m.attributeName);
      }
    }).observe(this, { attributes: true });
    const resolve2 = (def2, isAsync = false) => {
      const { props, styles } = def2;
      let numberProps;
      if (props && !isArray$1(props)) {
        for (const key in props) {
          const opt = props[key];
          if (opt === Number || opt && opt.type === Number) {
            if (key in this._props) {
              this._props[key] = toNumber(this._props[key]);
            }
            (numberProps || (numberProps = /* @__PURE__ */ Object.create(null)))[camelize(key)] = true;
          }
        }
      }
      this._numberProps = numberProps;
      if (isAsync) {
        this._resolveProps(def2);
      }
      this._applyStyles(styles);
      this._update();
    };
    const asyncDef = this._def.__asyncLoader;
    if (asyncDef) {
      asyncDef().then((def2) => resolve2(def2, true));
    } else {
      resolve2(this._def);
    }
  }
  _resolveProps(def2) {
    const { props } = def2;
    const declaredPropKeys = isArray$1(props) ? props : Object.keys(props || {});
    for (const key of Object.keys(this)) {
      if (key[0] !== "_" && declaredPropKeys.includes(key)) {
        this._setProp(key, this[key], true, false);
      }
    }
    for (const key of declaredPropKeys.map(camelize)) {
      Object.defineProperty(this, key, {
        get() {
          return this._getProp(key);
        },
        set(val) {
          this._setProp(key, val);
        }
      });
    }
  }
  _setAttr(key) {
    let value2 = this.getAttribute(key);
    const camelKey = camelize(key);
    if (this._numberProps && this._numberProps[camelKey]) {
      value2 = toNumber(value2);
    }
    this._setProp(camelKey, value2, false);
  }
  /**
   * @internal
   */
  _getProp(key) {
    return this._props[key];
  }
  /**
   * @internal
   */
  _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
    if (val !== this._props[key]) {
      this._props[key] = val;
      if (shouldUpdate && this._instance) {
        this._update();
      }
      if (shouldReflect) {
        if (val === true) {
          this.setAttribute(hyphenate(key), "");
        } else if (typeof val === "string" || typeof val === "number") {
          this.setAttribute(hyphenate(key), val + "");
        } else if (!val) {
          this.removeAttribute(hyphenate(key));
        }
      }
    }
  }
  _update() {
    render(this._createVNode(), this.shadowRoot);
  }
  _createVNode() {
    const vnode = createVNode(this._def, extend({}, this._props));
    if (!this._instance) {
      vnode.ce = (instance) => {
        this._instance = instance;
        instance.isCE = true;
        const dispatch = (event, args) => {
          this.dispatchEvent(
            new CustomEvent(event, {
              detail: args
            })
          );
        };
        instance.emit = (event, ...args) => {
          dispatch(event, args);
          if (hyphenate(event) !== event) {
            dispatch(hyphenate(event), args);
          }
        };
        let parent = this;
        while (parent = parent && (parent.parentNode || parent.host)) {
          if (parent instanceof VueElement) {
            instance.parent = parent._instance;
            instance.provides = parent._instance.provides;
            break;
          }
        }
      };
    }
    return vnode;
  }
  _applyStyles(styles) {
    if (styles) {
      styles.forEach((css2) => {
        const s = document.createElement("style");
        s.textContent = css2;
        this.shadowRoot.appendChild(s);
      });
    }
  }
}
function useCssModule(name = "$style") {
  {
    const instance = getCurrentInstance();
    if (!instance) {
      return EMPTY_OBJ;
    }
    const modules = instance.type.__cssModules;
    if (!modules) {
      return EMPTY_OBJ;
    }
    const mod = modules[name];
    if (!mod) {
      return EMPTY_OBJ;
    }
    return mod;
  }
}
function useCssVars(getter) {
  const instance = getCurrentInstance();
  if (!instance) {
    return;
  }
  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
    Array.from(
      document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)
    ).forEach((node) => setVarsOnNode(node, vars));
  };
  const setVars = () => {
    const vars = getter(instance.proxy);
    setVarsOnVNode(instance.subTree, vars);
    updateTeleports(vars);
  };
  watchPostEffect(setVars);
  onMounted(() => {
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted(() => ob.disconnect());
  });
}
function setVarsOnVNode(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode(vnode.el, vars);
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c) => setVarsOnVNode(c, vars));
  } else if (vnode.type === Static) {
    let { el, anchor } = vnode;
    while (el) {
      setVarsOnNode(el, vars);
      if (el === anchor)
        break;
      el = el.nextSibling;
    }
  }
}
function setVarsOnNode(el, vars) {
  if (el.nodeType === 1) {
    const style = el.style;
    for (const key in vars) {
      style.setProperty(`--${key}`, vars[key]);
    }
  }
}
const TRANSITION$1 = "transition";
const ANIMATION = "animation";
const Transition = (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots);
Transition.displayName = "Transition";
const DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators = Transition.props = /* @__PURE__ */ extend(
  {},
  BaseTransitionPropsValidators,
  DOMTransitionPropsValidators
);
const callHook = (hook, args = []) => {
  if (isArray$1(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback = (hook) => {
  return hook ? isArray$1(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const {
    name = "v",
    type: type2,
    duration: duration2,
    enterFromClass = `${name}-enter-from`,
    enterActiveClass = `${name}-enter-active`,
    enterToClass = `${name}-enter-to`,
    appearFromClass = enterFromClass,
    appearActiveClass = enterActiveClass,
    appearToClass = enterToClass,
    leaveFromClass = `${name}-leave-from`,
    leaveActiveClass = `${name}-leave-active`,
    leaveToClass = `${name}-leave-to`
  } = rawProps;
  const durations = normalizeDuration(duration2);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const {
    onBeforeEnter,
    onEnter,
    onEnterCancelled,
    onLeave,
    onLeaveCancelled,
    onBeforeAppear = onBeforeEnter,
    onAppear = onEnter,
    onAppearCancelled = onEnterCancelled
  } = baseProps;
  const finishEnter = (el, isAppear, done) => {
    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el, done) => {
    el._isLeaving = false;
    removeTransitionClass(el, leaveFromClass);
    removeTransitionClass(el, leaveToClass);
    removeTransitionClass(el, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el, isAppear, done);
      callHook(hook, [el, resolve2]);
      nextFrame(() => {
        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el, type2, enterDuration, resolve2);
        }
      });
    };
  };
  return extend(baseProps, {
    onBeforeEnter(el) {
      callHook(onBeforeEnter, [el]);
      addTransitionClass(el, enterFromClass);
      addTransitionClass(el, enterActiveClass);
    },
    onBeforeAppear(el) {
      callHook(onBeforeAppear, [el]);
      addTransitionClass(el, appearFromClass);
      addTransitionClass(el, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el, done) {
      el._isLeaving = true;
      const resolve2 = () => finishLeave(el, done);
      addTransitionClass(el, leaveFromClass);
      forceReflow();
      addTransitionClass(el, leaveActiveClass);
      nextFrame(() => {
        if (!el._isLeaving) {
          return;
        }
        removeTransitionClass(el, leaveFromClass);
        addTransitionClass(el, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el, type2, leaveDuration, resolve2);
        }
      });
      callHook(onLeave, [el, resolve2]);
    },
    onEnterCancelled(el) {
      finishEnter(el, false);
      callHook(onEnterCancelled, [el]);
    },
    onAppearCancelled(el) {
      finishEnter(el, true);
      callHook(onAppearCancelled, [el]);
    },
    onLeaveCancelled(el) {
      finishLeave(el);
      callHook(onLeaveCancelled, [el]);
    }
  });
}
function normalizeDuration(duration2) {
  if (duration2 == null) {
    return null;
  } else if (isObject$2(duration2)) {
    return [NumberOf(duration2.enter), NumberOf(duration2.leave)];
  } else {
    const n = NumberOf(duration2);
    return [n, n];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  return res;
}
function addTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
  (el._vtc || (el._vtc = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
  const { _vtc } = el;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el._vtc = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve2) {
  const id = el._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id === el._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type: type2, timeout, propCount } = getTransitionInfo(el, expectedType);
  if (!type2) {
    return resolve2();
  }
  const endEvent = type2 + "end";
  let ended = 0;
  const end = () => {
    el.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e) => {
    if (e.target === el && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(`${TRANSITION$1}Delay`);
  const transitionDurations = getStyleProperties(`${TRANSITION$1}Duration`);
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
  const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type2 = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION$1) {
    if (transitionTimeout > 0) {
      type2 = TRANSITION$1;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type2 = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type2 = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION$1 : ANIMATION : null;
    propCount = type2 ? type2 === TRANSITION$1 ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type2 === TRANSITION$1 && /\b(transform|all)(,|$)/.test(
    getStyleProperties(`${TRANSITION$1}Property`).toString()
  );
  return {
    type: type2,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d, i2) => toMs(d) + toMs(delays[i2])));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
const positionMap = /* @__PURE__ */ new WeakMap();
const newPositionMap = /* @__PURE__ */ new WeakMap();
const TransitionGroupImpl = {
  name: "TransitionGroup",
  props: /* @__PURE__ */ extend({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevChildren;
    let children;
    onUpdated(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || `${props.name || "v"}-move`;
      if (!hasCSSTransform(
        prevChildren[0].el,
        instance.vnode.el,
        moveClass
      )) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c) => {
        const el = c.el;
        const style = el.style;
        addTransitionClass(el, moveClass);
        style.transform = style.webkitTransform = style.transitionDuration = "";
        const cb = el._moveCb = (e) => {
          if (e && e.target !== el) {
            return;
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener("transitionend", cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        };
        el.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = toRaw(props);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      let tag = rawProps.tag || Fragment;
      prevChildren = children;
      children = slots.default ? getTransitionRawChildren(slots.default()) : [];
      for (let i2 = 0; i2 < children.length; i2++) {
        const child = children[i2];
        if (child.key != null) {
          setTransitionHooks(
            child,
            resolveTransitionHooks(child, cssTransitionProps, state, instance)
          );
        }
      }
      if (prevChildren) {
        for (let i2 = 0; i2 < prevChildren.length; i2++) {
          const child = prevChildren[i2];
          setTransitionHooks(
            child,
            resolveTransitionHooks(child, cssTransitionProps, state, instance)
          );
          positionMap.set(child, child.el.getBoundingClientRect());
        }
      }
      return createVNode(tag, null, children);
    };
  }
};
const removeMode = (props) => delete props.mode;
/* @__PURE__ */ removeMode(TransitionGroupImpl.props);
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
  const el = c.el;
  if (el._moveCb) {
    el._moveCb();
  }
  if (el._enterCb) {
    el._enterCb();
  }
}
function recordPosition(c) {
  newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
  const oldPos = positionMap.get(c);
  const newPos = newPositionMap.get(c);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s = c.el.style;
    s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
    s.transitionDuration = "0s";
    return c;
  }
}
function hasCSSTransform(el, root, moveClass) {
  const clone = el.cloneNode();
  if (el._vtc) {
    el._vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c) => c && clone.classList.remove(c));
    });
  }
  moveClass.split(/\s+/).forEach((c) => c && clone.classList.add(c));
  clone.style.display = "none";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone);
  const { hasTransform } = getTransitionInfo(clone);
  container.removeChild(clone);
  return hasTransform;
}
const getModelAssigner = (vnode) => {
  const fn = vnode.props["onUpdate:modelValue"] || false;
  return isArray$1(fn) ? (value2) => invokeArrayFns(fn, value2) : fn;
};
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  const target2 = e.target;
  if (target2.composing) {
    target2.composing = false;
    target2.dispatchEvent(new Event("input"));
  }
}
const vModelText = {
  created(el, { modifiers: { lazy, trim, number } }, vnode) {
    el._assign = getModelAssigner(vnode);
    const castToNumber = number || vnode.props && vnode.props.type === "number";
    addEventListener$1(el, lazy ? "change" : "input", (e) => {
      if (e.target.composing)
        return;
      let domValue = el.value;
      if (trim) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = looseToNumber(domValue);
      }
      el._assign(domValue);
    });
    if (trim) {
      addEventListener$1(el, "change", () => {
        el.value = el.value.trim();
      });
    }
    if (!lazy) {
      addEventListener$1(el, "compositionstart", onCompositionStart);
      addEventListener$1(el, "compositionend", onCompositionEnd);
      addEventListener$1(el, "change", onCompositionEnd);
    }
  },
  // set value on mounted so it's after min/max for type="range"
  mounted(el, { value: value2 }) {
    el.value = value2 == null ? "" : value2;
  },
  beforeUpdate(el, { value: value2, modifiers: { lazy, trim, number } }, vnode) {
    el._assign = getModelAssigner(vnode);
    if (el.composing)
      return;
    if (document.activeElement === el && el.type !== "range") {
      if (lazy) {
        return;
      }
      if (trim && el.value.trim() === value2) {
        return;
      }
      if ((number || el.type === "number") && looseToNumber(el.value) === value2) {
        return;
      }
    }
    const newValue = value2 == null ? "" : value2;
    if (el.value !== newValue) {
      el.value = newValue;
    }
  }
};
const vModelCheckbox = {
  // #4096 array checkboxes need to be deep traversed
  deep: true,
  created(el, _, vnode) {
    el._assign = getModelAssigner(vnode);
    addEventListener$1(el, "change", () => {
      const modelValue = el._modelValue;
      const elementValue = getValue(el);
      const checked = el.checked;
      const assign = el._assign;
      if (isArray$1(modelValue)) {
        const index2 = looseIndexOf(modelValue, elementValue);
        const found = index2 !== -1;
        if (checked && !found) {
          assign(modelValue.concat(elementValue));
        } else if (!checked && found) {
          const filtered = [...modelValue];
          filtered.splice(index2, 1);
          assign(filtered);
        }
      } else if (isSet(modelValue)) {
        const cloned = new Set(modelValue);
        if (checked) {
          cloned.add(elementValue);
        } else {
          cloned.delete(elementValue);
        }
        assign(cloned);
      } else {
        assign(getCheckboxValue(el, checked));
      }
    });
  },
  // set initial checked on mount to wait for true-value/false-value
  mounted: setChecked,
  beforeUpdate(el, binding, vnode) {
    el._assign = getModelAssigner(vnode);
    setChecked(el, binding, vnode);
  }
};
function setChecked(el, { value: value2, oldValue }, vnode) {
  el._modelValue = value2;
  if (isArray$1(value2)) {
    el.checked = looseIndexOf(value2, vnode.props.value) > -1;
  } else if (isSet(value2)) {
    el.checked = value2.has(vnode.props.value);
  } else if (value2 !== oldValue) {
    el.checked = looseEqual(value2, getCheckboxValue(el, true));
  }
}
const vModelRadio = {
  created(el, { value: value2 }, vnode) {
    el.checked = looseEqual(value2, vnode.props.value);
    el._assign = getModelAssigner(vnode);
    addEventListener$1(el, "change", () => {
      el._assign(getValue(el));
    });
  },
  beforeUpdate(el, { value: value2, oldValue }, vnode) {
    el._assign = getModelAssigner(vnode);
    if (value2 !== oldValue) {
      el.checked = looseEqual(value2, vnode.props.value);
    }
  }
};
const vModelSelect = {
  // <select multiple> value need to be deep traversed
  deep: true,
  created(el, { value: value2, modifiers: { number } }, vnode) {
    const isSetModel = isSet(value2);
    addEventListener$1(el, "change", () => {
      const selectedVal = Array.prototype.filter.call(el.options, (o) => o.selected).map(
        (o) => number ? looseToNumber(getValue(o)) : getValue(o)
      );
      el._assign(
        el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]
      );
    });
    el._assign = getModelAssigner(vnode);
  },
  // set value in mounted & updated because <select> relies on its children
  // <option>s.
  mounted(el, { value: value2 }) {
    setSelected(el, value2);
  },
  beforeUpdate(el, _binding, vnode) {
    el._assign = getModelAssigner(vnode);
  },
  updated(el, { value: value2 }) {
    setSelected(el, value2);
  }
};
function setSelected(el, value2) {
  const isMultiple = el.multiple;
  if (isMultiple && !isArray$1(value2) && !isSet(value2)) {
    return;
  }
  for (let i2 = 0, l = el.options.length; i2 < l; i2++) {
    const option = el.options[i2];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArray$1(value2)) {
        option.selected = looseIndexOf(value2, optionValue) > -1;
      } else {
        option.selected = value2.has(optionValue);
      }
    } else {
      if (looseEqual(getValue(option), value2)) {
        if (el.selectedIndex !== i2)
          el.selectedIndex = i2;
        return;
      }
    }
  }
  if (!isMultiple && el.selectedIndex !== -1) {
    el.selectedIndex = -1;
  }
}
function getValue(el) {
  return "_value" in el ? el._value : el.value;
}
function getCheckboxValue(el, checked) {
  const key = checked ? "_trueValue" : "_falseValue";
  return key in el ? el[key] : checked;
}
const vModelDynamic = {
  created(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, "created");
  },
  mounted(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, "mounted");
  },
  beforeUpdate(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
  },
  updated(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, "updated");
  }
};
function resolveDynamicModel(tagName, type2) {
  switch (tagName) {
    case "SELECT":
      return vModelSelect;
    case "TEXTAREA":
      return vModelText;
    default:
      switch (type2) {
        case "checkbox":
          return vModelCheckbox;
        case "radio":
          return vModelRadio;
        default:
          return vModelText;
      }
  }
}
function callModelHook(el, binding, vnode, prevVNode, hook) {
  const modelToUse = resolveDynamicModel(
    el.tagName,
    vnode.props && vnode.props.type
  );
  const fn = modelToUse[hook];
  fn && fn(el, binding, vnode, prevVNode);
}
function initVModelForSSR() {
  vModelText.getSSRProps = ({ value: value2 }) => ({ value: value2 });
  vModelRadio.getSSRProps = ({ value: value2 }, vnode) => {
    if (vnode.props && looseEqual(vnode.props.value, value2)) {
      return { checked: true };
    }
  };
  vModelCheckbox.getSSRProps = ({ value: value2 }, vnode) => {
    if (isArray$1(value2)) {
      if (vnode.props && looseIndexOf(value2, vnode.props.value) > -1) {
        return { checked: true };
      }
    } else if (isSet(value2)) {
      if (vnode.props && value2.has(vnode.props.value)) {
        return { checked: true };
      }
    } else if (value2) {
      return { checked: true };
    }
  };
  vModelDynamic.getSSRProps = (binding, vnode) => {
    if (typeof vnode.type !== "string") {
      return;
    }
    const modelToUse = resolveDynamicModel(
      // resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase
      vnode.type.toUpperCase(),
      vnode.props && vnode.props.type
    );
    if (modelToUse.getSSRProps) {
      return modelToUse.getSSRProps(binding, vnode);
    }
  };
}
const systemModifiers = ["ctrl", "shift", "alt", "meta"];
const modifierGuards = {
  stop: (e) => e.stopPropagation(),
  prevent: (e) => e.preventDefault(),
  self: (e) => e.target !== e.currentTarget,
  ctrl: (e) => !e.ctrlKey,
  shift: (e) => !e.shiftKey,
  alt: (e) => !e.altKey,
  meta: (e) => !e.metaKey,
  left: (e) => "button" in e && e.button !== 0,
  middle: (e) => "button" in e && e.button !== 1,
  right: (e) => "button" in e && e.button !== 2,
  exact: (e, modifiers) => systemModifiers.some((m) => e[`${m}Key`] && !modifiers.includes(m))
};
const withModifiers = (fn, modifiers) => {
  return (event, ...args) => {
    for (let i2 = 0; i2 < modifiers.length; i2++) {
      const guard = modifierGuards[modifiers[i2]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn(event, ...args);
  };
};
const keyNames = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
const withKeys = (fn, modifiers) => {
  return (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate(event.key);
    if (modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
      return fn(event);
    }
  };
};
const vShow = {
  beforeMount(el, { value: value2 }, { transition }) {
    el._vod = el.style.display === "none" ? "" : el.style.display;
    if (transition && value2) {
      transition.beforeEnter(el);
    } else {
      setDisplay(el, value2);
    }
  },
  mounted(el, { value: value2 }, { transition }) {
    if (transition && value2) {
      transition.enter(el);
    }
  },
  updated(el, { value: value2, oldValue }, { transition }) {
    if (!value2 === !oldValue)
      return;
    if (transition) {
      if (value2) {
        transition.beforeEnter(el);
        setDisplay(el, true);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
          setDisplay(el, false);
        });
      }
    } else {
      setDisplay(el, value2);
    }
  },
  beforeUnmount(el, { value: value2 }) {
    setDisplay(el, value2);
  }
};
function setDisplay(el, value2) {
  el.style.display = value2 ? el._vod : "none";
}
function initVShowForSSR() {
  vShow.getSSRProps = ({ value: value2 }) => {
    if (!value2) {
      return { style: { display: "none" } };
    }
  };
}
const rendererOptions = /* @__PURE__ */ extend({ patchProp }, nodeOps);
let renderer;
let enabledHydration = false;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
function ensureHydrationRenderer() {
  renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);
  enabledHydration = true;
  return renderer;
}
const render = (...args) => {
  ensureRenderer().render(...args);
};
const hydrate = (...args) => {
  ensureHydrationRenderer().hydrate(...args);
};
const createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
const createSSRApp = (...args) => {
  const app = ensureHydrationRenderer().createApp(...args);
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (container) {
      return mount(container, true, container instanceof SVGElement);
    }
  };
  return app;
};
function normalizeContainer(container) {
  if (isString(container)) {
    const res = document.querySelector(container);
    return res;
  }
  return container;
}
let ssrDirectiveInitialized = false;
const initDirectivesForSSR = () => {
  if (!ssrDirectiveInitialized) {
    ssrDirectiveInitialized = true;
    initVModelForSSR();
    initVShowForSSR();
  }
};
const runtimeDom = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  BaseTransition,
  BaseTransitionPropsValidators,
  Comment,
  EffectScope,
  Fragment,
  KeepAlive,
  ReactiveEffect,
  Static,
  Suspense,
  Teleport,
  Text,
  Transition,
  TransitionGroup,
  VueElement,
  assertNumber,
  callWithAsyncErrorHandling,
  callWithErrorHandling,
  camelize,
  capitalize: capitalize$1,
  cloneVNode,
  compatUtils,
  computed,
  createApp,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createElementVNode: createBaseVNode,
  createHydrationRenderer,
  createPropsRestProxy,
  createRenderer,
  createSSRApp,
  createSlots,
  createStaticVNode,
  createTextVNode,
  createVNode,
  customRef,
  defineAsyncComponent,
  defineComponent,
  defineCustomElement,
  defineEmits,
  defineExpose,
  defineModel,
  defineOptions,
  defineProps,
  defineSSRCustomElement,
  defineSlots,
  get devtools() {
    return devtools;
  },
  effect,
  effectScope,
  getCurrentInstance,
  getCurrentScope,
  getTransitionRawChildren,
  guardReactiveProps,
  h,
  handleError,
  hasInjectionContext,
  hydrate,
  initCustomFormatter,
  initDirectivesForSSR,
  inject,
  isMemoSame,
  isProxy,
  isReactive,
  isReadonly,
  isRef,
  isRuntimeOnly,
  isShallow,
  isVNode,
  markRaw,
  mergeDefaults,
  mergeModels,
  mergeProps,
  nextTick: nextTick$1,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  onActivated,
  onBeforeMount,
  onBeforeUnmount,
  onBeforeUpdate,
  onDeactivated,
  onErrorCaptured,
  onMounted,
  onRenderTracked,
  onRenderTriggered,
  onScopeDispose,
  onServerPrefetch,
  onUnmounted,
  onUpdated,
  openBlock,
  popScopeId,
  provide,
  proxyRefs,
  pushScopeId,
  queuePostFlushCb,
  reactive,
  readonly,
  ref,
  registerRuntimeCompiler,
  render,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDirective,
  resolveDynamicComponent,
  resolveFilter,
  resolveTransitionHooks,
  setBlockTracking,
  setDevtoolsHook,
  setTransitionHooks,
  shallowReactive,
  shallowReadonly,
  shallowRef,
  ssrContextKey,
  ssrUtils,
  stop: stop$1,
  toDisplayString,
  toHandlerKey,
  toHandlers,
  toRaw,
  toRef,
  toRefs,
  toValue,
  transformVNodeArgs,
  triggerRef,
  unref,
  useAttrs,
  useCssModule,
  useCssVars,
  useModel,
  useSSRContext,
  useSlots,
  useTransitionState,
  vModelCheckbox,
  vModelDynamic,
  vModelRadio,
  vModelSelect,
  vModelText,
  vShow,
  version,
  warn,
  watch,
  watchEffect,
  watchPostEffect,
  watchSyncEffect,
  withAsyncContext,
  withCtx,
  withDefaults,
  withDirectives,
  withKeys,
  withMemo,
  withModifiers,
  withScopeId
}, Symbol.toStringTag, { value: "Module" }));
function defaultOnError(error) {
  throw error;
}
function defaultOnWarn(msg) {
}
function createCompilerError(code, loc, messages, additionalMessage) {
  const msg = code;
  const error = new SyntaxError(String(msg));
  error.code = code;
  error.loc = loc;
  return error;
}
const FRAGMENT = Symbol(``);
const TELEPORT = Symbol(``);
const SUSPENSE = Symbol(``);
const KEEP_ALIVE = Symbol(``);
const BASE_TRANSITION = Symbol(``);
const OPEN_BLOCK = Symbol(``);
const CREATE_BLOCK = Symbol(``);
const CREATE_ELEMENT_BLOCK = Symbol(``);
const CREATE_VNODE = Symbol(``);
const CREATE_ELEMENT_VNODE = Symbol(``);
const CREATE_COMMENT = Symbol(``);
const CREATE_TEXT = Symbol(``);
const CREATE_STATIC = Symbol(``);
const RESOLVE_COMPONENT = Symbol(``);
const RESOLVE_DYNAMIC_COMPONENT = Symbol(
  ``
);
const RESOLVE_DIRECTIVE = Symbol(``);
const RESOLVE_FILTER = Symbol(``);
const WITH_DIRECTIVES = Symbol(``);
const RENDER_LIST = Symbol(``);
const RENDER_SLOT = Symbol(``);
const CREATE_SLOTS = Symbol(``);
const TO_DISPLAY_STRING = Symbol(``);
const MERGE_PROPS = Symbol(``);
const NORMALIZE_CLASS = Symbol(``);
const NORMALIZE_STYLE = Symbol(``);
const NORMALIZE_PROPS = Symbol(``);
const GUARD_REACTIVE_PROPS = Symbol(``);
const TO_HANDLERS = Symbol(``);
const CAMELIZE = Symbol(``);
const CAPITALIZE = Symbol(``);
const TO_HANDLER_KEY = Symbol(``);
const SET_BLOCK_TRACKING = Symbol(``);
const PUSH_SCOPE_ID = Symbol(``);
const POP_SCOPE_ID = Symbol(``);
const WITH_CTX = Symbol(``);
const UNREF = Symbol(``);
const IS_REF = Symbol(``);
const WITH_MEMO = Symbol(``);
const IS_MEMO_SAME = Symbol(``);
const helperNameMap = {
  [FRAGMENT]: `Fragment`,
  [TELEPORT]: `Teleport`,
  [SUSPENSE]: `Suspense`,
  [KEEP_ALIVE]: `KeepAlive`,
  [BASE_TRANSITION]: `BaseTransition`,
  [OPEN_BLOCK]: `openBlock`,
  [CREATE_BLOCK]: `createBlock`,
  [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
  [CREATE_VNODE]: `createVNode`,
  [CREATE_ELEMENT_VNODE]: `createElementVNode`,
  [CREATE_COMMENT]: `createCommentVNode`,
  [CREATE_TEXT]: `createTextVNode`,
  [CREATE_STATIC]: `createStaticVNode`,
  [RESOLVE_COMPONENT]: `resolveComponent`,
  [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
  [RESOLVE_DIRECTIVE]: `resolveDirective`,
  [RESOLVE_FILTER]: `resolveFilter`,
  [WITH_DIRECTIVES]: `withDirectives`,
  [RENDER_LIST]: `renderList`,
  [RENDER_SLOT]: `renderSlot`,
  [CREATE_SLOTS]: `createSlots`,
  [TO_DISPLAY_STRING]: `toDisplayString`,
  [MERGE_PROPS]: `mergeProps`,
  [NORMALIZE_CLASS]: `normalizeClass`,
  [NORMALIZE_STYLE]: `normalizeStyle`,
  [NORMALIZE_PROPS]: `normalizeProps`,
  [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
  [TO_HANDLERS]: `toHandlers`,
  [CAMELIZE]: `camelize`,
  [CAPITALIZE]: `capitalize`,
  [TO_HANDLER_KEY]: `toHandlerKey`,
  [SET_BLOCK_TRACKING]: `setBlockTracking`,
  [PUSH_SCOPE_ID]: `pushScopeId`,
  [POP_SCOPE_ID]: `popScopeId`,
  [WITH_CTX]: `withCtx`,
  [UNREF]: `unref`,
  [IS_REF]: `isRef`,
  [WITH_MEMO]: `withMemo`,
  [IS_MEMO_SAME]: `isMemoSame`
};
function registerRuntimeHelpers(helpers) {
  Object.getOwnPropertySymbols(helpers).forEach((s) => {
    helperNameMap[s] = helpers[s];
  });
}
const locStub = {
  source: "",
  start: { line: 1, column: 1, offset: 0 },
  end: { line: 1, column: 1, offset: 0 }
};
function createRoot(children, loc = locStub) {
  return {
    type: 0,
    children,
    helpers: /* @__PURE__ */ new Set(),
    components: [],
    directives: [],
    hoists: [],
    imports: [],
    cached: 0,
    temps: 0,
    codegenNode: void 0,
    loc
  };
}
function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent2 = false, loc = locStub) {
  if (context) {
    if (isBlock) {
      context.helper(OPEN_BLOCK);
      context.helper(getVNodeBlockHelper(context.inSSR, isComponent2));
    } else {
      context.helper(getVNodeHelper(context.inSSR, isComponent2));
    }
    if (directives) {
      context.helper(WITH_DIRECTIVES);
    }
  }
  return {
    type: 13,
    tag,
    props,
    children,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2,
    loc
  };
}
function createArrayExpression(elements, loc = locStub) {
  return {
    type: 17,
    loc,
    elements
  };
}
function createObjectExpression(properties, loc = locStub) {
  return {
    type: 15,
    loc,
    properties
  };
}
function createObjectProperty(key, value2) {
  return {
    type: 16,
    loc: locStub,
    key: isString(key) ? createSimpleExpression(key, true) : key,
    value: value2
  };
}
function createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {
  return {
    type: 4,
    loc,
    content,
    isStatic,
    constType: isStatic ? 3 : constType
  };
}
function createCompoundExpression(children, loc = locStub) {
  return {
    type: 8,
    loc,
    children
  };
}
function createCallExpression(callee, args = [], loc = locStub) {
  return {
    type: 14,
    loc,
    callee,
    arguments: args
  };
}
function createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {
  return {
    type: 18,
    params,
    returns,
    newline,
    isSlot,
    loc
  };
}
function createConditionalExpression(test, consequent, alternate, newline = true) {
  return {
    type: 19,
    test,
    consequent,
    alternate,
    newline,
    loc: locStub
  };
}
function createCacheExpression(index2, value2, isVNode2 = false) {
  return {
    type: 20,
    index: index2,
    value: value2,
    isVNode: isVNode2,
    loc: locStub
  };
}
function createBlockStatement(body) {
  return {
    type: 21,
    body,
    loc: locStub
  };
}
function getVNodeHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
}
function getVNodeBlockHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
}
function convertToBlock(node, { helper, removeHelper, inSSR }) {
  if (!node.isBlock) {
    node.isBlock = true;
    removeHelper(getVNodeHelper(inSSR, node.isComponent));
    helper(OPEN_BLOCK);
    helper(getVNodeBlockHelper(inSSR, node.isComponent));
  }
}
const isStaticExp = (p2) => p2.type === 4 && p2.isStatic;
const isBuiltInType = (tag, expected) => tag === expected || tag === hyphenate(expected);
function isCoreComponent(tag) {
  if (isBuiltInType(tag, "Teleport")) {
    return TELEPORT;
  } else if (isBuiltInType(tag, "Suspense")) {
    return SUSPENSE;
  } else if (isBuiltInType(tag, "KeepAlive")) {
    return KEEP_ALIVE;
  } else if (isBuiltInType(tag, "BaseTransition")) {
    return BASE_TRANSITION;
  }
}
const nonIdentifierRE = /^\d|[^\$\w]/;
const isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
const validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
const validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
const whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
const isMemberExpressionBrowser = (path) => {
  path = path.trim().replace(whitespaceRE, (s) => s.trim());
  let state = 0;
  let stateStack = [];
  let currentOpenBracketCount = 0;
  let currentOpenParensCount = 0;
  let currentStringType = null;
  for (let i2 = 0; i2 < path.length; i2++) {
    const char = path.charAt(i2);
    switch (state) {
      case 0:
        if (char === "[") {
          stateStack.push(state);
          state = 1;
          currentOpenBracketCount++;
        } else if (char === "(") {
          stateStack.push(state);
          state = 2;
          currentOpenParensCount++;
        } else if (!(i2 === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {
          return false;
        }
        break;
      case 1:
        if (char === `'` || char === `"` || char === "`") {
          stateStack.push(state);
          state = 3;
          currentStringType = char;
        } else if (char === `[`) {
          currentOpenBracketCount++;
        } else if (char === `]`) {
          if (!--currentOpenBracketCount) {
            state = stateStack.pop();
          }
        }
        break;
      case 2:
        if (char === `'` || char === `"` || char === "`") {
          stateStack.push(state);
          state = 3;
          currentStringType = char;
        } else if (char === `(`) {
          currentOpenParensCount++;
        } else if (char === `)`) {
          if (i2 === path.length - 1) {
            return false;
          }
          if (!--currentOpenParensCount) {
            state = stateStack.pop();
          }
        }
        break;
      case 3:
        if (char === currentStringType) {
          state = stateStack.pop();
          currentStringType = null;
        }
        break;
    }
  }
  return !currentOpenBracketCount && !currentOpenParensCount;
};
const isMemberExpression = isMemberExpressionBrowser;
function getInnerRange(loc, offset, length2) {
  const source = loc.source.slice(offset, offset + length2);
  const newLoc = {
    source,
    start: advancePositionWithClone(loc.start, loc.source, offset),
    end: loc.end
  };
  if (length2 != null) {
    newLoc.end = advancePositionWithClone(
      loc.start,
      loc.source,
      offset + length2
    );
  }
  return newLoc;
}
function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
  return advancePositionWithMutation(
    extend({}, pos),
    source,
    numberOfCharacters
  );
}
function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
  let linesCount = 0;
  let lastNewLinePos = -1;
  for (let i2 = 0; i2 < numberOfCharacters; i2++) {
    if (source.charCodeAt(i2) === 10) {
      linesCount++;
      lastNewLinePos = i2;
    }
  }
  pos.offset += numberOfCharacters;
  pos.line += linesCount;
  pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
  return pos;
}
function findDir(node, name, allowEmpty = false) {
  for (let i2 = 0; i2 < node.props.length; i2++) {
    const p2 = node.props[i2];
    if (p2.type === 7 && (allowEmpty || p2.exp) && (isString(name) ? p2.name === name : name.test(p2.name))) {
      return p2;
    }
  }
}
function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
  for (let i2 = 0; i2 < node.props.length; i2++) {
    const p2 = node.props[i2];
    if (p2.type === 6) {
      if (dynamicOnly)
        continue;
      if (p2.name === name && (p2.value || allowEmpty)) {
        return p2;
      }
    } else if (p2.name === "bind" && (p2.exp || allowEmpty) && isStaticArgOf(p2.arg, name)) {
      return p2;
    }
  }
}
function isStaticArgOf(arg, name) {
  return !!(arg && isStaticExp(arg) && arg.content === name);
}
function hasDynamicKeyVBind(node) {
  return node.props.some(
    (p2) => p2.type === 7 && p2.name === "bind" && (!p2.arg || // v-bind="obj"
    p2.arg.type !== 4 || // v-bind:[_ctx.foo]
    !p2.arg.isStatic)
    // v-bind:[foo]
  );
}
function isText$1(node) {
  return node.type === 5 || node.type === 2;
}
function isVSlot(p2) {
  return p2.type === 7 && p2.name === "slot";
}
function isTemplateNode(node) {
  return node.type === 1 && node.tagType === 3;
}
function isSlotOutlet(node) {
  return node.type === 1 && node.tagType === 2;
}
const propsHelperSet = /* @__PURE__ */ new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);
function getUnnormalizedProps(props, callPath = []) {
  if (props && !isString(props) && props.type === 14) {
    const callee = props.callee;
    if (!isString(callee) && propsHelperSet.has(callee)) {
      return getUnnormalizedProps(
        props.arguments[0],
        callPath.concat(props)
      );
    }
  }
  return [props, callPath];
}
function injectProp$1(node, prop, context) {
  let propsWithInjection;
  let props = node.type === 13 ? node.props : node.arguments[2];
  let callPath = [];
  let parentCall;
  if (props && !isString(props) && props.type === 14) {
    const ret = getUnnormalizedProps(props);
    props = ret[0];
    callPath = ret[1];
    parentCall = callPath[callPath.length - 1];
  }
  if (props == null || isString(props)) {
    propsWithInjection = createObjectExpression([prop]);
  } else if (props.type === 14) {
    const first = props.arguments[0];
    if (!isString(first) && first.type === 15) {
      if (!hasProp(prop, first)) {
        first.properties.unshift(prop);
      }
    } else {
      if (props.callee === TO_HANDLERS) {
        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
          createObjectExpression([prop]),
          props
        ]);
      } else {
        props.arguments.unshift(createObjectExpression([prop]));
      }
    }
    !propsWithInjection && (propsWithInjection = props);
  } else if (props.type === 15) {
    if (!hasProp(prop, props)) {
      props.properties.unshift(prop);
    }
    propsWithInjection = props;
  } else {
    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
      createObjectExpression([prop]),
      props
    ]);
    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {
      parentCall = callPath[callPath.length - 2];
    }
  }
  if (node.type === 13) {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node.props = propsWithInjection;
    }
  } else {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node.arguments[2] = propsWithInjection;
    }
  }
}
function hasProp(prop, props) {
  let result = false;
  if (prop.key.type === 4) {
    const propKeyName = prop.key.content;
    result = props.properties.some(
      (p2) => p2.key.type === 4 && p2.key.content === propKeyName
    );
  }
  return result;
}
function toValidAssetId(name, type2) {
  return `_${type2}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
    return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
  })}`;
}
function getMemoedVNodeCall(node) {
  if (node.type === 14 && node.callee === WITH_MEMO) {
    return node.arguments[1].returns;
  } else {
    return node;
  }
}
function getCompatValue(key, context) {
  const config = context.options ? context.options.compatConfig : context.compatConfig;
  const value2 = config && config[key];
  if (key === "MODE") {
    return value2 || 3;
  } else {
    return value2;
  }
}
function isCompatEnabled(key, context) {
  const mode = getCompatValue("MODE", context);
  const value2 = getCompatValue(key, context);
  return mode === 3 ? value2 === true : value2 !== false;
}
function checkCompatEnabled(key, context, loc, ...args) {
  const enabled = isCompatEnabled(key, context);
  return enabled;
}
const decodeRE = /&(gt|lt|amp|apos|quot);/g;
const decodeMap = {
  gt: ">",
  lt: "<",
  amp: "&",
  apos: "'",
  quot: '"'
};
const defaultParserOptions = {
  delimiters: [`{{`, `}}`],
  getNamespace: () => 0,
  getTextMode: () => 0,
  isVoidTag: NO,
  isPreTag: NO,
  isCustomElement: NO,
  decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),
  onError: defaultOnError,
  onWarn: defaultOnWarn,
  comments: false
};
function baseParse(content, options = {}) {
  const context = createParserContext(content, options);
  const start = getCursor(context);
  return createRoot(
    parseChildren(context, 0, []),
    getSelection(context, start)
  );
}
function createParserContext(content, rawOptions) {
  const options = extend({}, defaultParserOptions);
  let key;
  for (key in rawOptions) {
    options[key] = rawOptions[key] === void 0 ? defaultParserOptions[key] : rawOptions[key];
  }
  return {
    options,
    column: 1,
    line: 1,
    offset: 0,
    originalSource: content,
    source: content,
    inPre: false,
    inVPre: false,
    onWarn: options.onWarn
  };
}
function parseChildren(context, mode, ancestors) {
  const parent = last(ancestors);
  const ns = parent ? parent.ns : 0;
  const nodes = [];
  while (!isEnd(context, mode, ancestors)) {
    const s = context.source;
    let node = void 0;
    if (mode === 0 || mode === 1) {
      if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {
        node = parseInterpolation(context, mode);
      } else if (mode === 0 && s[0] === "<") {
        if (s.length === 1) {
          emitError(context, 5, 1);
        } else if (s[1] === "!") {
          if (startsWith(s, "<!--")) {
            node = parseComment(context);
          } else if (startsWith(s, "<!DOCTYPE")) {
            node = parseBogusComment(context);
          } else if (startsWith(s, "<![CDATA[")) {
            if (ns !== 0) {
              node = parseCDATA(context, ancestors);
            } else {
              emitError(context, 1);
              node = parseBogusComment(context);
            }
          } else {
            emitError(context, 11);
            node = parseBogusComment(context);
          }
        } else if (s[1] === "/") {
          if (s.length === 2) {
            emitError(context, 5, 2);
          } else if (s[2] === ">") {
            emitError(context, 14, 2);
            advanceBy(context, 3);
            continue;
          } else if (/[a-z]/i.test(s[2])) {
            emitError(context, 23);
            parseTag(context, TagType.End, parent);
            continue;
          } else {
            emitError(
              context,
              12,
              2
            );
            node = parseBogusComment(context);
          }
        } else if (/[a-z]/i.test(s[1])) {
          node = parseElement(context, ancestors);
          if (isCompatEnabled(
            "COMPILER_NATIVE_TEMPLATE",
            context
          ) && node && node.tag === "template" && !node.props.some(
            (p2) => p2.type === 7 && isSpecialTemplateDirective(p2.name)
          )) {
            node = node.children;
          }
        } else if (s[1] === "?") {
          emitError(
            context,
            21,
            1
          );
          node = parseBogusComment(context);
        } else {
          emitError(context, 12, 1);
        }
      }
    }
    if (!node) {
      node = parseText(context, mode);
    }
    if (isArray$1(node)) {
      for (let i2 = 0; i2 < node.length; i2++) {
        pushNode(nodes, node[i2]);
      }
    } else {
      pushNode(nodes, node);
    }
  }
  let removedWhitespace = false;
  if (mode !== 2 && mode !== 1) {
    const shouldCondense = context.options.whitespace !== "preserve";
    for (let i2 = 0; i2 < nodes.length; i2++) {
      const node = nodes[i2];
      if (node.type === 2) {
        if (!context.inPre) {
          if (!/[^\t\r\n\f ]/.test(node.content)) {
            const prev2 = nodes[i2 - 1];
            const next2 = nodes[i2 + 1];
            if (!prev2 || !next2 || shouldCondense && (prev2.type === 3 && next2.type === 3 || prev2.type === 3 && next2.type === 1 || prev2.type === 1 && next2.type === 3 || prev2.type === 1 && next2.type === 1 && /[\r\n]/.test(node.content))) {
              removedWhitespace = true;
              nodes[i2] = null;
            } else {
              node.content = " ";
            }
          } else if (shouldCondense) {
            node.content = node.content.replace(/[\t\r\n\f ]+/g, " ");
          }
        } else {
          node.content = node.content.replace(/\r\n/g, "\n");
        }
      } else if (node.type === 3 && !context.options.comments) {
        removedWhitespace = true;
        nodes[i2] = null;
      }
    }
    if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
      const first = nodes[0];
      if (first && first.type === 2) {
        first.content = first.content.replace(/^\r?\n/, "");
      }
    }
  }
  return removedWhitespace ? nodes.filter(Boolean) : nodes;
}
function pushNode(nodes, node) {
  if (node.type === 2) {
    const prev2 = last(nodes);
    if (prev2 && prev2.type === 2 && prev2.loc.end.offset === node.loc.start.offset) {
      prev2.content += node.content;
      prev2.loc.end = node.loc.end;
      prev2.loc.source += node.loc.source;
      return;
    }
  }
  nodes.push(node);
}
function parseCDATA(context, ancestors) {
  advanceBy(context, 9);
  const nodes = parseChildren(context, 3, ancestors);
  if (context.source.length === 0) {
    emitError(context, 6);
  } else {
    advanceBy(context, 3);
  }
  return nodes;
}
function parseComment(context) {
  const start = getCursor(context);
  let content;
  const match = /--(\!)?>/.exec(context.source);
  if (!match) {
    content = context.source.slice(4);
    advanceBy(context, context.source.length);
    emitError(context, 7);
  } else {
    if (match.index <= 3) {
      emitError(context, 0);
    }
    if (match[1]) {
      emitError(context, 10);
    }
    content = context.source.slice(4, match.index);
    const s = context.source.slice(0, match.index);
    let prevIndex = 1, nestedIndex = 0;
    while ((nestedIndex = s.indexOf("<!--", prevIndex)) !== -1) {
      advanceBy(context, nestedIndex - prevIndex + 1);
      if (nestedIndex + 4 < s.length) {
        emitError(context, 16);
      }
      prevIndex = nestedIndex + 1;
    }
    advanceBy(context, match.index + match[0].length - prevIndex + 1);
  }
  return {
    type: 3,
    content,
    loc: getSelection(context, start)
  };
}
function parseBogusComment(context) {
  const start = getCursor(context);
  const contentStart = context.source[1] === "?" ? 1 : 2;
  let content;
  const closeIndex = context.source.indexOf(">");
  if (closeIndex === -1) {
    content = context.source.slice(contentStart);
    advanceBy(context, context.source.length);
  } else {
    content = context.source.slice(contentStart, closeIndex);
    advanceBy(context, closeIndex + 1);
  }
  return {
    type: 3,
    content,
    loc: getSelection(context, start)
  };
}
function parseElement(context, ancestors) {
  const wasInPre = context.inPre;
  const wasInVPre = context.inVPre;
  const parent = last(ancestors);
  const element = parseTag(context, TagType.Start, parent);
  const isPreBoundary = context.inPre && !wasInPre;
  const isVPreBoundary = context.inVPre && !wasInVPre;
  if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {
    if (isPreBoundary) {
      context.inPre = false;
    }
    if (isVPreBoundary) {
      context.inVPre = false;
    }
    return element;
  }
  ancestors.push(element);
  const mode = context.options.getTextMode(element, parent);
  const children = parseChildren(context, mode, ancestors);
  ancestors.pop();
  {
    const inlineTemplateProp = element.props.find(
      (p2) => p2.type === 6 && p2.name === "inline-template"
    );
    if (inlineTemplateProp && checkCompatEnabled(
      "COMPILER_INLINE_TEMPLATE",
      context,
      inlineTemplateProp.loc
    )) {
      const loc = getSelection(context, element.loc.end);
      inlineTemplateProp.value = {
        type: 2,
        content: loc.source,
        loc
      };
    }
  }
  element.children = children;
  if (startsWithEndTagOpen(context.source, element.tag)) {
    parseTag(context, TagType.End, parent);
  } else {
    emitError(context, 24, 0, element.loc.start);
    if (context.source.length === 0 && element.tag.toLowerCase() === "script") {
      const first = children[0];
      if (first && startsWith(first.loc.source, "<!--")) {
        emitError(context, 8);
      }
    }
  }
  element.loc = getSelection(context, element.loc.start);
  if (isPreBoundary) {
    context.inPre = false;
  }
  if (isVPreBoundary) {
    context.inVPre = false;
  }
  return element;
}
var TagType = /* @__PURE__ */ ((TagType2) => {
  TagType2[TagType2["Start"] = 0] = "Start";
  TagType2[TagType2["End"] = 1] = "End";
  return TagType2;
})(TagType || {});
const isSpecialTemplateDirective = /* @__PURE__ */ makeMap(
  `if,else,else-if,for,slot`
);
function parseTag(context, type2, parent) {
  const start = getCursor(context);
  const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
  const tag = match[1];
  const ns = context.options.getNamespace(tag, parent);
  advanceBy(context, match[0].length);
  advanceSpaces(context);
  const cursor = getCursor(context);
  const currentSource = context.source;
  if (context.options.isPreTag(tag)) {
    context.inPre = true;
  }
  let props = parseAttributes(context, type2);
  if (type2 === 0 && !context.inVPre && props.some((p2) => p2.type === 7 && p2.name === "pre")) {
    context.inVPre = true;
    extend(context, cursor);
    context.source = currentSource;
    props = parseAttributes(context, type2).filter((p2) => p2.name !== "v-pre");
  }
  let isSelfClosing = false;
  if (context.source.length === 0) {
    emitError(context, 9);
  } else {
    isSelfClosing = startsWith(context.source, "/>");
    if (type2 === 1 && isSelfClosing) {
      emitError(context, 4);
    }
    advanceBy(context, isSelfClosing ? 2 : 1);
  }
  if (type2 === 1) {
    return;
  }
  let tagType = 0;
  if (!context.inVPre) {
    if (tag === "slot") {
      tagType = 2;
    } else if (tag === "template") {
      if (props.some(
        (p2) => p2.type === 7 && isSpecialTemplateDirective(p2.name)
      )) {
        tagType = 3;
      }
    } else if (isComponent(tag, props, context)) {
      tagType = 1;
    }
  }
  return {
    type: 1,
    ns,
    tag,
    tagType,
    props,
    isSelfClosing,
    children: [],
    loc: getSelection(context, start),
    codegenNode: void 0
    // to be created during transform phase
  };
}
function isComponent(tag, props, context) {
  const options = context.options;
  if (options.isCustomElement(tag)) {
    return false;
  }
  if (tag === "component" || /^[A-Z]/.test(tag) || isCoreComponent(tag) || options.isBuiltInComponent && options.isBuiltInComponent(tag) || options.isNativeTag && !options.isNativeTag(tag)) {
    return true;
  }
  for (let i2 = 0; i2 < props.length; i2++) {
    const p2 = props[i2];
    if (p2.type === 6) {
      if (p2.name === "is" && p2.value) {
        if (p2.value.content.startsWith("vue:")) {
          return true;
        } else if (checkCompatEnabled(
          "COMPILER_IS_ON_ELEMENT",
          context,
          p2.loc
        )) {
          return true;
        }
      }
    } else {
      if (p2.name === "is") {
        return true;
      } else if (
        // :is on plain element - only treat as component in compat mode
        p2.name === "bind" && isStaticArgOf(p2.arg, "is") && true && checkCompatEnabled(
          "COMPILER_IS_ON_ELEMENT",
          context,
          p2.loc
        )
      ) {
        return true;
      }
    }
  }
}
function parseAttributes(context, type2) {
  const props = [];
  const attributeNames = /* @__PURE__ */ new Set();
  while (context.source.length > 0 && !startsWith(context.source, ">") && !startsWith(context.source, "/>")) {
    if (startsWith(context.source, "/")) {
      emitError(context, 22);
      advanceBy(context, 1);
      advanceSpaces(context);
      continue;
    }
    if (type2 === 1) {
      emitError(context, 3);
    }
    const attr = parseAttribute(context, attributeNames);
    if (attr.type === 6 && attr.value && attr.name === "class") {
      attr.value.content = attr.value.content.replace(/\s+/g, " ").trim();
    }
    if (type2 === 0) {
      props.push(attr);
    }
    if (/^[^\t\r\n\f />]/.test(context.source)) {
      emitError(context, 15);
    }
    advanceSpaces(context);
  }
  return props;
}
function parseAttribute(context, nameSet) {
  var _a;
  const start = getCursor(context);
  const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
  const name = match[0];
  if (nameSet.has(name)) {
    emitError(context, 2);
  }
  nameSet.add(name);
  if (name[0] === "=") {
    emitError(context, 19);
  }
  {
    const pattern = /["'<]/g;
    let m;
    while (m = pattern.exec(name)) {
      emitError(
        context,
        17,
        m.index
      );
    }
  }
  advanceBy(context, name.length);
  let value2 = void 0;
  if (/^[\t\r\n\f ]*=/.test(context.source)) {
    advanceSpaces(context);
    advanceBy(context, 1);
    advanceSpaces(context);
    value2 = parseAttributeValue(context);
    if (!value2) {
      emitError(context, 13);
    }
  }
  const loc = getSelection(context, start);
  if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(name)) {
    const match2 = /(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(
      name
    );
    let isPropShorthand = startsWith(name, ".");
    let dirName = match2[1] || (isPropShorthand || startsWith(name, ":") ? "bind" : startsWith(name, "@") ? "on" : "slot");
    let arg;
    if (match2[2]) {
      const isSlot = dirName === "slot";
      const startOffset = name.lastIndexOf(
        match2[2],
        name.length - (((_a = match2[3]) == null ? void 0 : _a.length) || 0)
      );
      const loc2 = getSelection(
        context,
        getNewPosition(context, start, startOffset),
        getNewPosition(
          context,
          start,
          startOffset + match2[2].length + (isSlot && match2[3] || "").length
        )
      );
      let content = match2[2];
      let isStatic = true;
      if (content.startsWith("[")) {
        isStatic = false;
        if (!content.endsWith("]")) {
          emitError(
            context,
            27
          );
          content = content.slice(1);
        } else {
          content = content.slice(1, content.length - 1);
        }
      } else if (isSlot) {
        content += match2[3] || "";
      }
      arg = {
        type: 4,
        content,
        isStatic,
        constType: isStatic ? 3 : 0,
        loc: loc2
      };
    }
    if (value2 && value2.isQuoted) {
      const valueLoc = value2.loc;
      valueLoc.start.offset++;
      valueLoc.start.column++;
      valueLoc.end = advancePositionWithClone(valueLoc.start, value2.content);
      valueLoc.source = valueLoc.source.slice(1, -1);
    }
    const modifiers = match2[3] ? match2[3].slice(1).split(".") : [];
    if (isPropShorthand)
      modifiers.push("prop");
    if (dirName === "bind" && arg) {
      if (modifiers.includes("sync") && checkCompatEnabled(
        "COMPILER_V_BIND_SYNC",
        context,
        loc,
        arg.loc.source
      )) {
        dirName = "model";
        modifiers.splice(modifiers.indexOf("sync"), 1);
      }
    }
    return {
      type: 7,
      name: dirName,
      exp: value2 && {
        type: 4,
        content: value2.content,
        isStatic: false,
        // Treat as non-constant by default. This can be potentially set to
        // other values by `transformExpression` to make it eligible for hoisting.
        constType: 0,
        loc: value2.loc
      },
      arg,
      modifiers,
      loc
    };
  }
  if (!context.inVPre && startsWith(name, "v-")) {
    emitError(context, 26);
  }
  return {
    type: 6,
    name,
    value: value2 && {
      type: 2,
      content: value2.content,
      loc: value2.loc
    },
    loc
  };
}
function parseAttributeValue(context) {
  const start = getCursor(context);
  let content;
  const quote2 = context.source[0];
  const isQuoted = quote2 === `"` || quote2 === `'`;
  if (isQuoted) {
    advanceBy(context, 1);
    const endIndex = context.source.indexOf(quote2);
    if (endIndex === -1) {
      content = parseTextData(
        context,
        context.source.length,
        4
      );
    } else {
      content = parseTextData(context, endIndex, 4);
      advanceBy(context, 1);
    }
  } else {
    const match = /^[^\t\r\n\f >]+/.exec(context.source);
    if (!match) {
      return void 0;
    }
    const unexpectedChars = /["'<=`]/g;
    let m;
    while (m = unexpectedChars.exec(match[0])) {
      emitError(
        context,
        18,
        m.index
      );
    }
    content = parseTextData(context, match[0].length, 4);
  }
  return { content, isQuoted, loc: getSelection(context, start) };
}
function parseInterpolation(context, mode) {
  const [open, close] = context.options.delimiters;
  const closeIndex = context.source.indexOf(close, open.length);
  if (closeIndex === -1) {
    emitError(context, 25);
    return void 0;
  }
  const start = getCursor(context);
  advanceBy(context, open.length);
  const innerStart = getCursor(context);
  const innerEnd = getCursor(context);
  const rawContentLength = closeIndex - open.length;
  const rawContent = context.source.slice(0, rawContentLength);
  const preTrimContent = parseTextData(context, rawContentLength, mode);
  const content = preTrimContent.trim();
  const startOffset = preTrimContent.indexOf(content);
  if (startOffset > 0) {
    advancePositionWithMutation(innerStart, rawContent, startOffset);
  }
  const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
  advancePositionWithMutation(innerEnd, rawContent, endOffset);
  advanceBy(context, close.length);
  return {
    type: 5,
    content: {
      type: 4,
      isStatic: false,
      // Set `isConstant` to false by default and will decide in transformExpression
      constType: 0,
      content,
      loc: getSelection(context, innerStart, innerEnd)
    },
    loc: getSelection(context, start)
  };
}
function parseText(context, mode) {
  const endTokens = mode === 3 ? ["]]>"] : ["<", context.options.delimiters[0]];
  let endIndex = context.source.length;
  for (let i2 = 0; i2 < endTokens.length; i2++) {
    const index2 = context.source.indexOf(endTokens[i2], 1);
    if (index2 !== -1 && endIndex > index2) {
      endIndex = index2;
    }
  }
  const start = getCursor(context);
  const content = parseTextData(context, endIndex, mode);
  return {
    type: 2,
    content,
    loc: getSelection(context, start)
  };
}
function parseTextData(context, length2, mode) {
  const rawText = context.source.slice(0, length2);
  advanceBy(context, length2);
  if (mode === 2 || mode === 3 || !rawText.includes("&")) {
    return rawText;
  } else {
    return context.options.decodeEntities(
      rawText,
      mode === 4
    );
  }
}
function getCursor(context) {
  const { column, line, offset } = context;
  return { column, line, offset };
}
function getSelection(context, start, end) {
  end = end || getCursor(context);
  return {
    start,
    end,
    source: context.originalSource.slice(start.offset, end.offset)
  };
}
function last(xs) {
  return xs[xs.length - 1];
}
function startsWith(source, searchString) {
  return source.startsWith(searchString);
}
function advanceBy(context, numberOfCharacters) {
  const { source } = context;
  advancePositionWithMutation(context, source, numberOfCharacters);
  context.source = source.slice(numberOfCharacters);
}
function advanceSpaces(context) {
  const match = /^[\t\r\n\f ]+/.exec(context.source);
  if (match) {
    advanceBy(context, match[0].length);
  }
}
function getNewPosition(context, start, numberOfCharacters) {
  return advancePositionWithClone(
    start,
    context.originalSource.slice(start.offset, numberOfCharacters),
    numberOfCharacters
  );
}
function emitError(context, code, offset, loc = getCursor(context)) {
  if (offset) {
    loc.offset += offset;
    loc.column += offset;
  }
  context.options.onError(
    createCompilerError(code, {
      start: loc,
      end: loc,
      source: ""
    })
  );
}
function isEnd(context, mode, ancestors) {
  const s = context.source;
  switch (mode) {
    case 0:
      if (startsWith(s, "</")) {
        for (let i2 = ancestors.length - 1; i2 >= 0; --i2) {
          if (startsWithEndTagOpen(s, ancestors[i2].tag)) {
            return true;
          }
        }
      }
      break;
    case 1:
    case 2: {
      const parent = last(ancestors);
      if (parent && startsWithEndTagOpen(s, parent.tag)) {
        return true;
      }
      break;
    }
    case 3:
      if (startsWith(s, "]]>")) {
        return true;
      }
      break;
  }
  return !s;
}
function startsWithEndTagOpen(source, tag) {
  return startsWith(source, "</") && source.slice(2, 2 + tag.length).toLowerCase() === tag.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag.length] || ">");
}
function hoistStatic(root, context) {
  walk(
    root,
    context,
    // Root node is unfortunately non-hoistable due to potential parent
    // fallthrough attributes.
    isSingleElementRoot(root, root.children[0])
  );
}
function isSingleElementRoot(root, child) {
  const { children } = root;
  return children.length === 1 && child.type === 1 && !isSlotOutlet(child);
}
function walk(node, context, doNotHoistNode = false) {
  const { children } = node;
  const originalCount = children.length;
  let hoistedCount = 0;
  for (let i2 = 0; i2 < children.length; i2++) {
    const child = children[i2];
    if (child.type === 1 && child.tagType === 0) {
      const constantType = doNotHoistNode ? 0 : getConstantType(child, context);
      if (constantType > 0) {
        if (constantType >= 2) {
          child.codegenNode.patchFlag = `-1`;
          child.codegenNode = context.hoist(child.codegenNode);
          hoistedCount++;
          continue;
        }
      } else {
        const codegenNode = child.codegenNode;
        if (codegenNode.type === 13) {
          const flag = getPatchFlag(codegenNode);
          if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {
            const props = getNodeProps(child);
            if (props) {
              codegenNode.props = context.hoist(props);
            }
          }
          if (codegenNode.dynamicProps) {
            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
          }
        }
      }
    }
    if (child.type === 1) {
      const isComponent2 = child.tagType === 1;
      if (isComponent2) {
        context.scopes.vSlot++;
      }
      walk(child, context);
      if (isComponent2) {
        context.scopes.vSlot--;
      }
    } else if (child.type === 11) {
      walk(child, context, child.children.length === 1);
    } else if (child.type === 9) {
      for (let i22 = 0; i22 < child.branches.length; i22++) {
        walk(
          child.branches[i22],
          context,
          child.branches[i22].children.length === 1
        );
      }
    }
  }
  if (hoistedCount && context.transformHoist) {
    context.transformHoist(children, context, node);
  }
  if (hoistedCount && hoistedCount === originalCount && node.type === 1 && node.tagType === 0 && node.codegenNode && node.codegenNode.type === 13 && isArray$1(node.codegenNode.children)) {
    node.codegenNode.children = context.hoist(
      createArrayExpression(node.codegenNode.children)
    );
  }
}
function getConstantType(node, context) {
  const { constantCache } = context;
  switch (node.type) {
    case 1:
      if (node.tagType !== 0) {
        return 0;
      }
      const cached = constantCache.get(node);
      if (cached !== void 0) {
        return cached;
      }
      const codegenNode = node.codegenNode;
      if (codegenNode.type !== 13) {
        return 0;
      }
      if (codegenNode.isBlock && node.tag !== "svg" && node.tag !== "foreignObject") {
        return 0;
      }
      const flag = getPatchFlag(codegenNode);
      if (!flag) {
        let returnType2 = 3;
        const generatedPropsType = getGeneratedPropsConstantType(node, context);
        if (generatedPropsType === 0) {
          constantCache.set(node, 0);
          return 0;
        }
        if (generatedPropsType < returnType2) {
          returnType2 = generatedPropsType;
        }
        for (let i2 = 0; i2 < node.children.length; i2++) {
          const childType = getConstantType(node.children[i2], context);
          if (childType === 0) {
            constantCache.set(node, 0);
            return 0;
          }
          if (childType < returnType2) {
            returnType2 = childType;
          }
        }
        if (returnType2 > 1) {
          for (let i2 = 0; i2 < node.props.length; i2++) {
            const p2 = node.props[i2];
            if (p2.type === 7 && p2.name === "bind" && p2.exp) {
              const expType = getConstantType(p2.exp, context);
              if (expType === 0) {
                constantCache.set(node, 0);
                return 0;
              }
              if (expType < returnType2) {
                returnType2 = expType;
              }
            }
          }
        }
        if (codegenNode.isBlock) {
          for (let i2 = 0; i2 < node.props.length; i2++) {
            const p2 = node.props[i2];
            if (p2.type === 7) {
              constantCache.set(node, 0);
              return 0;
            }
          }
          context.removeHelper(OPEN_BLOCK);
          context.removeHelper(
            getVNodeBlockHelper(context.inSSR, codegenNode.isComponent)
          );
          codegenNode.isBlock = false;
          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));
        }
        constantCache.set(node, returnType2);
        return returnType2;
      } else {
        constantCache.set(node, 0);
        return 0;
      }
    case 2:
    case 3:
      return 3;
    case 9:
    case 11:
    case 10:
      return 0;
    case 5:
    case 12:
      return getConstantType(node.content, context);
    case 4:
      return node.constType;
    case 8:
      let returnType = 3;
      for (let i2 = 0; i2 < node.children.length; i2++) {
        const child = node.children[i2];
        if (isString(child) || isSymbol(child)) {
          continue;
        }
        const childType = getConstantType(child, context);
        if (childType === 0) {
          return 0;
        } else if (childType < returnType) {
          returnType = childType;
        }
      }
      return returnType;
    default:
      return 0;
  }
}
const allowHoistedHelperSet = /* @__PURE__ */ new Set([
  NORMALIZE_CLASS,
  NORMALIZE_STYLE,
  NORMALIZE_PROPS,
  GUARD_REACTIVE_PROPS
]);
function getConstantTypeOfHelperCall(value2, context) {
  if (value2.type === 14 && !isString(value2.callee) && allowHoistedHelperSet.has(value2.callee)) {
    const arg = value2.arguments[0];
    if (arg.type === 4) {
      return getConstantType(arg, context);
    } else if (arg.type === 14) {
      return getConstantTypeOfHelperCall(arg, context);
    }
  }
  return 0;
}
function getGeneratedPropsConstantType(node, context) {
  let returnType = 3;
  const props = getNodeProps(node);
  if (props && props.type === 15) {
    const { properties } = props;
    for (let i2 = 0; i2 < properties.length; i2++) {
      const { key, value: value2 } = properties[i2];
      const keyType = getConstantType(key, context);
      if (keyType === 0) {
        return keyType;
      }
      if (keyType < returnType) {
        returnType = keyType;
      }
      let valueType;
      if (value2.type === 4) {
        valueType = getConstantType(value2, context);
      } else if (value2.type === 14) {
        valueType = getConstantTypeOfHelperCall(value2, context);
      } else {
        valueType = 0;
      }
      if (valueType === 0) {
        return valueType;
      }
      if (valueType < returnType) {
        returnType = valueType;
      }
    }
  }
  return returnType;
}
function getNodeProps(node) {
  const codegenNode = node.codegenNode;
  if (codegenNode.type === 13) {
    return codegenNode.props;
  }
}
function getPatchFlag(node) {
  const flag = node.patchFlag;
  return flag ? parseInt(flag, 10) : void 0;
}
function createTransformContext(root, {
  filename = "",
  prefixIdentifiers = false,
  hoistStatic: hoistStatic2 = false,
  cacheHandlers = false,
  nodeTransforms = [],
  directiveTransforms = {},
  transformHoist = null,
  isBuiltInComponent = NOOP,
  isCustomElement = NOOP,
  expressionPlugins = [],
  scopeId = null,
  slotted = true,
  ssr = false,
  inSSR = false,
  ssrCssVars = ``,
  bindingMetadata = EMPTY_OBJ,
  inline: inline2 = false,
  isTS = false,
  onError: onError2 = defaultOnError,
  onWarn = defaultOnWarn,
  compatConfig
}) {
  const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
  const context = {
    // options
    selfName: nameMatch && capitalize$1(camelize(nameMatch[1])),
    prefixIdentifiers,
    hoistStatic: hoistStatic2,
    cacheHandlers,
    nodeTransforms,
    directiveTransforms,
    transformHoist,
    isBuiltInComponent,
    isCustomElement,
    expressionPlugins,
    scopeId,
    slotted,
    ssr,
    inSSR,
    ssrCssVars,
    bindingMetadata,
    inline: inline2,
    isTS,
    onError: onError2,
    onWarn,
    compatConfig,
    // state
    root,
    helpers: /* @__PURE__ */ new Map(),
    components: /* @__PURE__ */ new Set(),
    directives: /* @__PURE__ */ new Set(),
    hoists: [],
    imports: [],
    constantCache: /* @__PURE__ */ new Map(),
    temps: 0,
    cached: 0,
    identifiers: /* @__PURE__ */ Object.create(null),
    scopes: {
      vFor: 0,
      vSlot: 0,
      vPre: 0,
      vOnce: 0
    },
    parent: null,
    currentNode: root,
    childIndex: 0,
    inVOnce: false,
    // methods
    helper(name) {
      const count = context.helpers.get(name) || 0;
      context.helpers.set(name, count + 1);
      return name;
    },
    removeHelper(name) {
      const count = context.helpers.get(name);
      if (count) {
        const currentCount = count - 1;
        if (!currentCount) {
          context.helpers.delete(name);
        } else {
          context.helpers.set(name, currentCount);
        }
      }
    },
    helperString(name) {
      return `_${helperNameMap[context.helper(name)]}`;
    },
    replaceNode(node) {
      context.parent.children[context.childIndex] = context.currentNode = node;
    },
    removeNode(node) {
      const list = context.parent.children;
      const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;
      if (!node || node === context.currentNode) {
        context.currentNode = null;
        context.onNodeRemoved();
      } else {
        if (context.childIndex > removalIndex) {
          context.childIndex--;
          context.onNodeRemoved();
        }
      }
      context.parent.children.splice(removalIndex, 1);
    },
    onNodeRemoved: () => {
    },
    addIdentifiers(exp) {
    },
    removeIdentifiers(exp) {
    },
    hoist(exp) {
      if (isString(exp))
        exp = createSimpleExpression(exp);
      context.hoists.push(exp);
      const identifier = createSimpleExpression(
        `_hoisted_${context.hoists.length}`,
        false,
        exp.loc,
        2
      );
      identifier.hoisted = exp;
      return identifier;
    },
    cache(exp, isVNode2 = false) {
      return createCacheExpression(context.cached++, exp, isVNode2);
    }
  };
  {
    context.filters = /* @__PURE__ */ new Set();
  }
  return context;
}
function transform$1(root, options) {
  const context = createTransformContext(root, options);
  traverseNode(root, context);
  if (options.hoistStatic) {
    hoistStatic(root, context);
  }
  if (!options.ssr) {
    createRootCodegen(root, context);
  }
  root.helpers = /* @__PURE__ */ new Set([...context.helpers.keys()]);
  root.components = [...context.components];
  root.directives = [...context.directives];
  root.imports = context.imports;
  root.hoists = context.hoists;
  root.temps = context.temps;
  root.cached = context.cached;
  {
    root.filters = [...context.filters];
  }
}
function createRootCodegen(root, context) {
  const { helper } = context;
  const { children } = root;
  if (children.length === 1) {
    const child = children[0];
    if (isSingleElementRoot(root, child) && child.codegenNode) {
      const codegenNode = child.codegenNode;
      if (codegenNode.type === 13) {
        convertToBlock(codegenNode, context);
      }
      root.codegenNode = codegenNode;
    } else {
      root.codegenNode = child;
    }
  } else if (children.length > 1) {
    let patchFlag = 64;
    root.codegenNode = createVNodeCall(
      context,
      helper(FRAGMENT),
      void 0,
      root.children,
      patchFlag + ``,
      void 0,
      void 0,
      true,
      void 0,
      false
      /* isComponent */
    );
  } else
    ;
}
function traverseChildren(parent, context) {
  let i2 = 0;
  const nodeRemoved = () => {
    i2--;
  };
  for (; i2 < parent.children.length; i2++) {
    const child = parent.children[i2];
    if (isString(child))
      continue;
    context.parent = parent;
    context.childIndex = i2;
    context.onNodeRemoved = nodeRemoved;
    traverseNode(child, context);
  }
}
function traverseNode(node, context) {
  context.currentNode = node;
  const { nodeTransforms } = context;
  const exitFns = [];
  for (let i22 = 0; i22 < nodeTransforms.length; i22++) {
    const onExit = nodeTransforms[i22](node, context);
    if (onExit) {
      if (isArray$1(onExit)) {
        exitFns.push(...onExit);
      } else {
        exitFns.push(onExit);
      }
    }
    if (!context.currentNode) {
      return;
    } else {
      node = context.currentNode;
    }
  }
  switch (node.type) {
    case 3:
      if (!context.ssr) {
        context.helper(CREATE_COMMENT);
      }
      break;
    case 5:
      if (!context.ssr) {
        context.helper(TO_DISPLAY_STRING);
      }
      break;
    case 9:
      for (let i22 = 0; i22 < node.branches.length; i22++) {
        traverseNode(node.branches[i22], context);
      }
      break;
    case 10:
    case 11:
    case 1:
    case 0:
      traverseChildren(node, context);
      break;
  }
  context.currentNode = node;
  let i2 = exitFns.length;
  while (i2--) {
    exitFns[i2]();
  }
}
function createStructuralDirectiveTransform(name, fn) {
  const matches2 = isString(name) ? (n) => n === name : (n) => name.test(n);
  return (node, context) => {
    if (node.type === 1) {
      const { props } = node;
      if (node.tagType === 3 && props.some(isVSlot)) {
        return;
      }
      const exitFns = [];
      for (let i2 = 0; i2 < props.length; i2++) {
        const prop = props[i2];
        if (prop.type === 7 && matches2(prop.name)) {
          props.splice(i2, 1);
          i2--;
          const onExit = fn(node, prop, context);
          if (onExit)
            exitFns.push(onExit);
        }
      }
      return exitFns;
    }
  };
}
const PURE_ANNOTATION = `/*#__PURE__*/`;
const aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;
function createCodegenContext(ast, {
  mode = "function",
  prefixIdentifiers = mode === "module",
  sourceMap = false,
  filename = `template.vue.html`,
  scopeId = null,
  optimizeImports = false,
  runtimeGlobalName = `Vue`,
  runtimeModuleName = `vue`,
  ssrRuntimeModuleName = "vue/server-renderer",
  ssr = false,
  isTS = false,
  inSSR = false
}) {
  const context = {
    mode,
    prefixIdentifiers,
    sourceMap,
    filename,
    scopeId,
    optimizeImports,
    runtimeGlobalName,
    runtimeModuleName,
    ssrRuntimeModuleName,
    ssr,
    isTS,
    inSSR,
    source: ast.loc.source,
    code: ``,
    column: 1,
    line: 1,
    offset: 0,
    indentLevel: 0,
    pure: false,
    map: void 0,
    helper(key) {
      return `_${helperNameMap[key]}`;
    },
    push(code, node) {
      context.code += code;
    },
    indent() {
      newline(++context.indentLevel);
    },
    deindent(withoutNewLine = false) {
      if (withoutNewLine) {
        --context.indentLevel;
      } else {
        newline(--context.indentLevel);
      }
    },
    newline() {
      newline(context.indentLevel);
    }
  };
  function newline(n) {
    context.push("\n" + `  `.repeat(n));
  }
  return context;
}
function generate(ast, options = {}) {
  const context = createCodegenContext(ast, options);
  if (options.onContextCreated)
    options.onContextCreated(context);
  const {
    mode,
    push,
    prefixIdentifiers,
    indent,
    deindent,
    newline,
    scopeId,
    ssr
  } = context;
  const helpers = Array.from(ast.helpers);
  const hasHelpers = helpers.length > 0;
  const useWithBlock = !prefixIdentifiers && mode !== "module";
  const isSetupInlined = false;
  const preambleContext = isSetupInlined ? createCodegenContext(ast, options) : context;
  {
    genFunctionPreamble(ast, preambleContext);
  }
  const functionName = ssr ? `ssrRender` : `render`;
  const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
  const signature = args.join(", ");
  {
    push(`function ${functionName}(${signature}) {`);
  }
  indent();
  if (useWithBlock) {
    push(`with (_ctx) {`);
    indent();
    if (hasHelpers) {
      push(`const { ${helpers.map(aliasHelper).join(", ")} } = _Vue`);
      push(`
`);
      newline();
    }
  }
  if (ast.components.length) {
    genAssets(ast.components, "component", context);
    if (ast.directives.length || ast.temps > 0) {
      newline();
    }
  }
  if (ast.directives.length) {
    genAssets(ast.directives, "directive", context);
    if (ast.temps > 0) {
      newline();
    }
  }
  if (ast.filters && ast.filters.length) {
    newline();
    genAssets(ast.filters, "filter", context);
    newline();
  }
  if (ast.temps > 0) {
    push(`let `);
    for (let i2 = 0; i2 < ast.temps; i2++) {
      push(`${i2 > 0 ? `, ` : ``}_temp${i2}`);
    }
  }
  if (ast.components.length || ast.directives.length || ast.temps) {
    push(`
`);
    newline();
  }
  if (!ssr) {
    push(`return `);
  }
  if (ast.codegenNode) {
    genNode(ast.codegenNode, context);
  } else {
    push(`null`);
  }
  if (useWithBlock) {
    deindent();
    push(`}`);
  }
  deindent();
  push(`}`);
  return {
    ast,
    code: context.code,
    preamble: isSetupInlined ? preambleContext.code : ``,
    // SourceMapGenerator does have toJSON() method but it's not in the types
    map: context.map ? context.map.toJSON() : void 0
  };
}
function genFunctionPreamble(ast, context) {
  const {
    ssr,
    prefixIdentifiers,
    push,
    newline,
    runtimeModuleName,
    runtimeGlobalName,
    ssrRuntimeModuleName
  } = context;
  const VueBinding = runtimeGlobalName;
  const helpers = Array.from(ast.helpers);
  if (helpers.length > 0) {
    {
      push(`const _Vue = ${VueBinding}
`);
      if (ast.hoists.length) {
        const staticHelpers = [
          CREATE_VNODE,
          CREATE_ELEMENT_VNODE,
          CREATE_COMMENT,
          CREATE_TEXT,
          CREATE_STATIC
        ].filter((helper) => helpers.includes(helper)).map(aliasHelper).join(", ");
        push(`const { ${staticHelpers} } = _Vue
`);
      }
    }
  }
  genHoists(ast.hoists, context);
  newline();
  push(`return `);
}
function genAssets(assets, type2, { helper, push, newline, isTS }) {
  const resolver = helper(
    type2 === "filter" ? RESOLVE_FILTER : type2 === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE
  );
  for (let i2 = 0; i2 < assets.length; i2++) {
    let id = assets[i2];
    const maybeSelfReference = id.endsWith("__self");
    if (maybeSelfReference) {
      id = id.slice(0, -6);
    }
    push(
      `const ${toValidAssetId(id, type2)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`
    );
    if (i2 < assets.length - 1) {
      newline();
    }
  }
}
function genHoists(hoists, context) {
  if (!hoists.length) {
    return;
  }
  context.pure = true;
  const { push, newline, helper, scopeId, mode } = context;
  newline();
  for (let i2 = 0; i2 < hoists.length; i2++) {
    const exp = hoists[i2];
    if (exp) {
      push(
        `const _hoisted_${i2 + 1} = ${``}`
      );
      genNode(exp, context);
      newline();
    }
  }
  context.pure = false;
}
function genNodeListAsArray(nodes, context) {
  const multilines = nodes.length > 3 || false;
  context.push(`[`);
  multilines && context.indent();
  genNodeList(nodes, context, multilines);
  multilines && context.deindent();
  context.push(`]`);
}
function genNodeList(nodes, context, multilines = false, comma = true) {
  const { push, newline } = context;
  for (let i2 = 0; i2 < nodes.length; i2++) {
    const node = nodes[i2];
    if (isString(node)) {
      push(node);
    } else if (isArray$1(node)) {
      genNodeListAsArray(node, context);
    } else {
      genNode(node, context);
    }
    if (i2 < nodes.length - 1) {
      if (multilines) {
        comma && push(",");
        newline();
      } else {
        comma && push(", ");
      }
    }
  }
}
function genNode(node, context) {
  if (isString(node)) {
    context.push(node);
    return;
  }
  if (isSymbol(node)) {
    context.push(context.helper(node));
    return;
  }
  switch (node.type) {
    case 1:
    case 9:
    case 11:
      genNode(node.codegenNode, context);
      break;
    case 2:
      genText(node, context);
      break;
    case 4:
      genExpression(node, context);
      break;
    case 5:
      genInterpolation(node, context);
      break;
    case 12:
      genNode(node.codegenNode, context);
      break;
    case 8:
      genCompoundExpression(node, context);
      break;
    case 3:
      genComment(node, context);
      break;
    case 13:
      genVNodeCall(node, context);
      break;
    case 14:
      genCallExpression(node, context);
      break;
    case 15:
      genObjectExpression(node, context);
      break;
    case 17:
      genArrayExpression(node, context);
      break;
    case 18:
      genFunctionExpression(node, context);
      break;
    case 19:
      genConditionalExpression(node, context);
      break;
    case 20:
      genCacheExpression(node, context);
      break;
    case 21:
      genNodeList(node.body, context, true, false);
      break;
  }
}
function genText(node, context) {
  context.push(JSON.stringify(node.content), node);
}
function genExpression(node, context) {
  const { content, isStatic } = node;
  context.push(isStatic ? JSON.stringify(content) : content, node);
}
function genInterpolation(node, context) {
  const { push, helper, pure } = context;
  if (pure)
    push(PURE_ANNOTATION);
  push(`${helper(TO_DISPLAY_STRING)}(`);
  genNode(node.content, context);
  push(`)`);
}
function genCompoundExpression(node, context) {
  for (let i2 = 0; i2 < node.children.length; i2++) {
    const child = node.children[i2];
    if (isString(child)) {
      context.push(child);
    } else {
      genNode(child, context);
    }
  }
}
function genExpressionAsPropertyKey(node, context) {
  const { push } = context;
  if (node.type === 8) {
    push(`[`);
    genCompoundExpression(node, context);
    push(`]`);
  } else if (node.isStatic) {
    const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);
    push(text, node);
  } else {
    push(`[${node.content}]`, node);
  }
}
function genComment(node, context) {
  const { push, helper, pure } = context;
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);
}
function genVNodeCall(node, context) {
  const { push, helper, pure } = context;
  const {
    tag,
    props,
    children,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2
  } = node;
  if (directives) {
    push(helper(WITH_DIRECTIVES) + `(`);
  }
  if (isBlock) {
    push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
  }
  if (pure) {
    push(PURE_ANNOTATION);
  }
  const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent2) : getVNodeHelper(context.inSSR, isComponent2);
  push(helper(callHelper) + `(`, node);
  genNodeList(
    genNullableArgs([tag, props, children, patchFlag, dynamicProps]),
    context
  );
  push(`)`);
  if (isBlock) {
    push(`)`);
  }
  if (directives) {
    push(`, `);
    genNode(directives, context);
    push(`)`);
  }
}
function genNullableArgs(args) {
  let i2 = args.length;
  while (i2--) {
    if (args[i2] != null)
      break;
  }
  return args.slice(0, i2 + 1).map((arg) => arg || `null`);
}
function genCallExpression(node, context) {
  const { push, helper, pure } = context;
  const callee = isString(node.callee) ? node.callee : helper(node.callee);
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(callee + `(`, node);
  genNodeList(node.arguments, context);
  push(`)`);
}
function genObjectExpression(node, context) {
  const { push, indent, deindent, newline } = context;
  const { properties } = node;
  if (!properties.length) {
    push(`{}`, node);
    return;
  }
  const multilines = properties.length > 1 || false;
  push(multilines ? `{` : `{ `);
  multilines && indent();
  for (let i2 = 0; i2 < properties.length; i2++) {
    const { key, value: value2 } = properties[i2];
    genExpressionAsPropertyKey(key, context);
    push(`: `);
    genNode(value2, context);
    if (i2 < properties.length - 1) {
      push(`,`);
      newline();
    }
  }
  multilines && deindent();
  push(multilines ? `}` : ` }`);
}
function genArrayExpression(node, context) {
  genNodeListAsArray(node.elements, context);
}
function genFunctionExpression(node, context) {
  const { push, indent, deindent } = context;
  const { params, returns, body, newline, isSlot } = node;
  if (isSlot) {
    push(`_${helperNameMap[WITH_CTX]}(`);
  }
  push(`(`, node);
  if (isArray$1(params)) {
    genNodeList(params, context);
  } else if (params) {
    genNode(params, context);
  }
  push(`) => `);
  if (newline || body) {
    push(`{`);
    indent();
  }
  if (returns) {
    if (newline) {
      push(`return `);
    }
    if (isArray$1(returns)) {
      genNodeListAsArray(returns, context);
    } else {
      genNode(returns, context);
    }
  } else if (body) {
    genNode(body, context);
  }
  if (newline || body) {
    deindent();
    push(`}`);
  }
  if (isSlot) {
    if (node.isNonScopedSlot) {
      push(`, undefined, true`);
    }
    push(`)`);
  }
}
function genConditionalExpression(node, context) {
  const { test, consequent, alternate, newline: needNewline } = node;
  const { push, indent, deindent, newline } = context;
  if (test.type === 4) {
    const needsParens = !isSimpleIdentifier(test.content);
    needsParens && push(`(`);
    genExpression(test, context);
    needsParens && push(`)`);
  } else {
    push(`(`);
    genNode(test, context);
    push(`)`);
  }
  needNewline && indent();
  context.indentLevel++;
  needNewline || push(` `);
  push(`? `);
  genNode(consequent, context);
  context.indentLevel--;
  needNewline && newline();
  needNewline || push(` `);
  push(`: `);
  const isNested = alternate.type === 19;
  if (!isNested) {
    context.indentLevel++;
  }
  genNode(alternate, context);
  if (!isNested) {
    context.indentLevel--;
  }
  needNewline && deindent(
    true
    /* without newline */
  );
}
function genCacheExpression(node, context) {
  const { push, helper, indent, deindent, newline } = context;
  push(`_cache[${node.index}] || (`);
  if (node.isVNode) {
    indent();
    push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
    newline();
  }
  push(`_cache[${node.index}] = `);
  genNode(node.value, context);
  if (node.isVNode) {
    push(`,`);
    newline();
    push(`${helper(SET_BLOCK_TRACKING)}(1),`);
    newline();
    push(`_cache[${node.index}]`);
    deindent();
  }
  push(`)`);
}
new RegExp(
  "\\b" + "arguments,await,break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,let,new,return,super,switch,throw,try,var,void,while,with,yield".split(",").join("\\b|\\b") + "\\b"
);
const transformIf = createStructuralDirectiveTransform(
  /^(if|else|else-if)$/,
  (node, dir, context) => {
    return processIf(node, dir, context, (ifNode, branch, isRoot) => {
      const siblings = context.parent.children;
      let i2 = siblings.indexOf(ifNode);
      let key = 0;
      while (i2-- >= 0) {
        const sibling = siblings[i2];
        if (sibling && sibling.type === 9) {
          key += sibling.branches.length;
        }
      }
      return () => {
        if (isRoot) {
          ifNode.codegenNode = createCodegenNodeForBranch(
            branch,
            key,
            context
          );
        } else {
          const parentCondition = getParentCondition(ifNode.codegenNode);
          parentCondition.alternate = createCodegenNodeForBranch(
            branch,
            key + ifNode.branches.length - 1,
            context
          );
        }
      };
    });
  }
);
function processIf(node, dir, context, processCodegen) {
  if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
    const loc = dir.exp ? dir.exp.loc : node.loc;
    context.onError(
      createCompilerError(28, dir.loc)
    );
    dir.exp = createSimpleExpression(`true`, false, loc);
  }
  if (dir.name === "if") {
    const branch = createIfBranch(node, dir);
    const ifNode = {
      type: 9,
      loc: node.loc,
      branches: [branch]
    };
    context.replaceNode(ifNode);
    if (processCodegen) {
      return processCodegen(ifNode, branch, true);
    }
  } else {
    const siblings = context.parent.children;
    let i2 = siblings.indexOf(node);
    while (i2-- >= -1) {
      const sibling = siblings[i2];
      if (sibling && sibling.type === 3) {
        context.removeNode(sibling);
        continue;
      }
      if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
        context.removeNode(sibling);
        continue;
      }
      if (sibling && sibling.type === 9) {
        if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
          context.onError(
            createCompilerError(30, node.loc)
          );
        }
        context.removeNode();
        const branch = createIfBranch(node, dir);
        sibling.branches.push(branch);
        const onExit = processCodegen && processCodegen(sibling, branch, false);
        traverseNode(branch, context);
        if (onExit)
          onExit();
        context.currentNode = null;
      } else {
        context.onError(
          createCompilerError(30, node.loc)
        );
      }
      break;
    }
  }
}
function createIfBranch(node, dir) {
  const isTemplateIf = node.tagType === 3;
  return {
    type: 10,
    loc: node.loc,
    condition: dir.name === "else" ? void 0 : dir.exp,
    children: isTemplateIf && !findDir(node, "for") ? node.children : [node],
    userKey: findProp(node, `key`),
    isTemplateIf
  };
}
function createCodegenNodeForBranch(branch, keyIndex, context) {
  if (branch.condition) {
    return createConditionalExpression(
      branch.condition,
      createChildrenCodegenNode(branch, keyIndex, context),
      // make sure to pass in asBlock: true so that the comment node call
      // closes the current block.
      createCallExpression(context.helper(CREATE_COMMENT), [
        '""',
        "true"
      ])
    );
  } else {
    return createChildrenCodegenNode(branch, keyIndex, context);
  }
}
function createChildrenCodegenNode(branch, keyIndex, context) {
  const { helper } = context;
  const keyProperty = createObjectProperty(
    `key`,
    createSimpleExpression(
      `${keyIndex}`,
      false,
      locStub,
      2
    )
  );
  const { children } = branch;
  const firstChild = children[0];
  const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
  if (needFragmentWrapper) {
    if (children.length === 1 && firstChild.type === 11) {
      const vnodeCall = firstChild.codegenNode;
      injectProp$1(vnodeCall, keyProperty, context);
      return vnodeCall;
    } else {
      let patchFlag = 64;
      return createVNodeCall(
        context,
        helper(FRAGMENT),
        createObjectExpression([keyProperty]),
        children,
        patchFlag + ``,
        void 0,
        void 0,
        true,
        false,
        false,
        branch.loc
      );
    }
  } else {
    const ret = firstChild.codegenNode;
    const vnodeCall = getMemoedVNodeCall(ret);
    if (vnodeCall.type === 13) {
      convertToBlock(vnodeCall, context);
    }
    injectProp$1(vnodeCall, keyProperty, context);
    return ret;
  }
}
function getParentCondition(node) {
  while (true) {
    if (node.type === 19) {
      if (node.alternate.type === 19) {
        node = node.alternate;
      } else {
        return node;
      }
    } else if (node.type === 20) {
      node = node.value;
    }
  }
}
const transformFor = createStructuralDirectiveTransform(
  "for",
  (node, dir, context) => {
    const { helper, removeHelper } = context;
    return processFor(node, dir, context, (forNode) => {
      const renderExp = createCallExpression(helper(RENDER_LIST), [
        forNode.source
      ]);
      const isTemplate = isTemplateNode(node);
      const memo = findDir(node, "memo");
      const keyProp = findProp(node, `key`);
      const keyExp = keyProp && (keyProp.type === 6 ? createSimpleExpression(keyProp.value.content, true) : keyProp.exp);
      const keyProperty = keyProp ? createObjectProperty(`key`, keyExp) : null;
      const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
      const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
      forNode.codegenNode = createVNodeCall(
        context,
        helper(FRAGMENT),
        void 0,
        renderExp,
        fragmentFlag + ``,
        void 0,
        void 0,
        true,
        !isStableFragment,
        false,
        node.loc
      );
      return () => {
        let childBlock;
        const { children } = forNode;
        const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
        const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;
        if (slotOutlet) {
          childBlock = slotOutlet.codegenNode;
          if (isTemplate && keyProperty) {
            injectProp$1(childBlock, keyProperty, context);
          }
        } else if (needFragmentWrapper) {
          childBlock = createVNodeCall(
            context,
            helper(FRAGMENT),
            keyProperty ? createObjectExpression([keyProperty]) : void 0,
            node.children,
            `64`,
            void 0,
            void 0,
            true,
            void 0,
            false
            /* isComponent */
          );
        } else {
          childBlock = children[0].codegenNode;
          if (isTemplate && keyProperty) {
            injectProp$1(childBlock, keyProperty, context);
          }
          if (childBlock.isBlock !== !isStableFragment) {
            if (childBlock.isBlock) {
              removeHelper(OPEN_BLOCK);
              removeHelper(
                getVNodeBlockHelper(context.inSSR, childBlock.isComponent)
              );
            } else {
              removeHelper(
                getVNodeHelper(context.inSSR, childBlock.isComponent)
              );
            }
          }
          childBlock.isBlock = !isStableFragment;
          if (childBlock.isBlock) {
            helper(OPEN_BLOCK);
            helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
          } else {
            helper(getVNodeHelper(context.inSSR, childBlock.isComponent));
          }
        }
        if (memo) {
          const loop2 = createFunctionExpression(
            createForLoopParams(forNode.parseResult, [
              createSimpleExpression(`_cached`)
            ])
          );
          loop2.body = createBlockStatement([
            createCompoundExpression([`const _memo = (`, memo.exp, `)`]),
            createCompoundExpression([
              `if (_cached`,
              ...keyExp ? [` && _cached.key === `, keyExp] : [],
              ` && ${context.helperString(
                IS_MEMO_SAME
              )}(_cached, _memo)) return _cached`
            ]),
            createCompoundExpression([`const _item = `, childBlock]),
            createSimpleExpression(`_item.memo = _memo`),
            createSimpleExpression(`return _item`)
          ]);
          renderExp.arguments.push(
            loop2,
            createSimpleExpression(`_cache`),
            createSimpleExpression(String(context.cached++))
          );
        } else {
          renderExp.arguments.push(
            createFunctionExpression(
              createForLoopParams(forNode.parseResult),
              childBlock,
              true
              /* force newline */
            )
          );
        }
      };
    });
  }
);
function processFor(node, dir, context, processCodegen) {
  if (!dir.exp) {
    context.onError(
      createCompilerError(31, dir.loc)
    );
    return;
  }
  const parseResult = parseForExpression(
    // can only be simple expression because vFor transform is applied
    // before expression transform.
    dir.exp
  );
  if (!parseResult) {
    context.onError(
      createCompilerError(32, dir.loc)
    );
    return;
  }
  const { addIdentifiers, removeIdentifiers, scopes: scopes2 } = context;
  const { source, value: value2, key, index: index2 } = parseResult;
  const forNode = {
    type: 11,
    loc: dir.loc,
    source,
    valueAlias: value2,
    keyAlias: key,
    objectIndexAlias: index2,
    parseResult,
    children: isTemplateNode(node) ? node.children : [node]
  };
  context.replaceNode(forNode);
  scopes2.vFor++;
  const onExit = processCodegen && processCodegen(forNode);
  return () => {
    scopes2.vFor--;
    if (onExit)
      onExit();
  };
}
const forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
const forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
const stripParensRE = /^\(|\)$/g;
function parseForExpression(input, context) {
  const loc = input.loc;
  const exp = input.content;
  const inMatch = exp.match(forAliasRE);
  if (!inMatch)
    return;
  const [, LHS, RHS] = inMatch;
  const result = {
    source: createAliasExpression(
      loc,
      RHS.trim(),
      exp.indexOf(RHS, LHS.length)
    ),
    value: void 0,
    key: void 0,
    index: void 0
  };
  let valueContent = LHS.trim().replace(stripParensRE, "").trim();
  const trimmedOffset = LHS.indexOf(valueContent);
  const iteratorMatch = valueContent.match(forIteratorRE);
  if (iteratorMatch) {
    valueContent = valueContent.replace(forIteratorRE, "").trim();
    const keyContent = iteratorMatch[1].trim();
    let keyOffset;
    if (keyContent) {
      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
      result.key = createAliasExpression(loc, keyContent, keyOffset);
    }
    if (iteratorMatch[2]) {
      const indexContent = iteratorMatch[2].trim();
      if (indexContent) {
        result.index = createAliasExpression(
          loc,
          indexContent,
          exp.indexOf(
            indexContent,
            result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length
          )
        );
      }
    }
  }
  if (valueContent) {
    result.value = createAliasExpression(loc, valueContent, trimmedOffset);
  }
  return result;
}
function createAliasExpression(range, content, offset) {
  return createSimpleExpression(
    content,
    false,
    getInnerRange(range, offset, content.length)
  );
}
function createForLoopParams({ value: value2, key, index: index2 }, memoArgs = []) {
  return createParamsList([value2, key, index2, ...memoArgs]);
}
function createParamsList(args) {
  let i2 = args.length;
  while (i2--) {
    if (args[i2])
      break;
  }
  return args.slice(0, i2 + 1).map((arg, i22) => arg || createSimpleExpression(`_`.repeat(i22 + 1), false));
}
const defaultFallback = createSimpleExpression(`undefined`, false);
const trackSlotScopes = (node, context) => {
  if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {
    const vSlot = findDir(node, "slot");
    if (vSlot) {
      vSlot.exp;
      context.scopes.vSlot++;
      return () => {
        context.scopes.vSlot--;
      };
    }
  }
};
const buildClientSlotFn = (props, children, loc) => createFunctionExpression(
  props,
  children,
  false,
  true,
  children.length ? children[0].loc : loc
);
function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
  context.helper(WITH_CTX);
  const { children, loc } = node;
  const slotsProperties = [];
  const dynamicSlots = [];
  let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
  const onComponentSlot = findDir(node, "slot", true);
  if (onComponentSlot) {
    const { arg, exp } = onComponentSlot;
    if (arg && !isStaticExp(arg)) {
      hasDynamicSlots = true;
    }
    slotsProperties.push(
      createObjectProperty(
        arg || createSimpleExpression("default", true),
        buildSlotFn(exp, children, loc)
      )
    );
  }
  let hasTemplateSlots = false;
  let hasNamedDefaultSlot = false;
  const implicitDefaultChildren = [];
  const seenSlotNames = /* @__PURE__ */ new Set();
  let conditionalBranchIndex = 0;
  for (let i2 = 0; i2 < children.length; i2++) {
    const slotElement = children[i2];
    let slotDir;
    if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
      if (slotElement.type !== 3) {
        implicitDefaultChildren.push(slotElement);
      }
      continue;
    }
    if (onComponentSlot) {
      context.onError(
        createCompilerError(37, slotDir.loc)
      );
      break;
    }
    hasTemplateSlots = true;
    const { children: slotChildren, loc: slotLoc } = slotElement;
    const {
      arg: slotName = createSimpleExpression(`default`, true),
      exp: slotProps,
      loc: dirLoc
    } = slotDir;
    let staticSlotName;
    if (isStaticExp(slotName)) {
      staticSlotName = slotName ? slotName.content : `default`;
    } else {
      hasDynamicSlots = true;
    }
    const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
    let vIf;
    let vElse;
    let vFor;
    if (vIf = findDir(slotElement, "if")) {
      hasDynamicSlots = true;
      dynamicSlots.push(
        createConditionalExpression(
          vIf.exp,
          buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++),
          defaultFallback
        )
      );
    } else if (vElse = findDir(
      slotElement,
      /^else(-if)?$/,
      true
      /* allowEmpty */
    )) {
      let j = i2;
      let prev2;
      while (j--) {
        prev2 = children[j];
        if (prev2.type !== 3) {
          break;
        }
      }
      if (prev2 && isTemplateNode(prev2) && findDir(prev2, "if")) {
        children.splice(i2, 1);
        i2--;
        let conditional = dynamicSlots[dynamicSlots.length - 1];
        while (conditional.alternate.type === 19) {
          conditional = conditional.alternate;
        }
        conditional.alternate = vElse.exp ? createConditionalExpression(
          vElse.exp,
          buildDynamicSlot(
            slotName,
            slotFunction,
            conditionalBranchIndex++
          ),
          defaultFallback
        ) : buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++);
      } else {
        context.onError(
          createCompilerError(30, vElse.loc)
        );
      }
    } else if (vFor = findDir(slotElement, "for")) {
      hasDynamicSlots = true;
      const parseResult = vFor.parseResult || parseForExpression(vFor.exp);
      if (parseResult) {
        dynamicSlots.push(
          createCallExpression(context.helper(RENDER_LIST), [
            parseResult.source,
            createFunctionExpression(
              createForLoopParams(parseResult),
              buildDynamicSlot(slotName, slotFunction),
              true
              /* force newline */
            )
          ])
        );
      } else {
        context.onError(
          createCompilerError(32, vFor.loc)
        );
      }
    } else {
      if (staticSlotName) {
        if (seenSlotNames.has(staticSlotName)) {
          context.onError(
            createCompilerError(
              38,
              dirLoc
            )
          );
          continue;
        }
        seenSlotNames.add(staticSlotName);
        if (staticSlotName === "default") {
          hasNamedDefaultSlot = true;
        }
      }
      slotsProperties.push(createObjectProperty(slotName, slotFunction));
    }
  }
  if (!onComponentSlot) {
    const buildDefaultSlotProperty = (props, children2) => {
      const fn = buildSlotFn(props, children2, loc);
      if (context.compatConfig) {
        fn.isNonScopedSlot = true;
      }
      return createObjectProperty(`default`, fn);
    };
    if (!hasTemplateSlots) {
      slotsProperties.push(buildDefaultSlotProperty(void 0, children));
    } else if (implicitDefaultChildren.length && // #3766
    // with whitespace: 'preserve', whitespaces between slots will end up in
    // implicitDefaultChildren. Ignore if all implicit children are whitespaces.
    implicitDefaultChildren.some((node2) => isNonWhitespaceContent(node2))) {
      if (hasNamedDefaultSlot) {
        context.onError(
          createCompilerError(
            39,
            implicitDefaultChildren[0].loc
          )
        );
      } else {
        slotsProperties.push(
          buildDefaultSlotProperty(void 0, implicitDefaultChildren)
        );
      }
    }
  }
  const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1;
  let slots = createObjectExpression(
    slotsProperties.concat(
      createObjectProperty(
        `_`,
        // 2 = compiled but dynamic = can skip normalization, but must run diff
        // 1 = compiled and static = can skip normalization AND diff as optimized
        createSimpleExpression(
          slotFlag + ``,
          false
        )
      )
    ),
    loc
  );
  if (dynamicSlots.length) {
    slots = createCallExpression(context.helper(CREATE_SLOTS), [
      slots,
      createArrayExpression(dynamicSlots)
    ]);
  }
  return {
    slots,
    hasDynamicSlots
  };
}
function buildDynamicSlot(name, fn, index2) {
  const props = [
    createObjectProperty(`name`, name),
    createObjectProperty(`fn`, fn)
  ];
  if (index2 != null) {
    props.push(
      createObjectProperty(`key`, createSimpleExpression(String(index2), true))
    );
  }
  return createObjectExpression(props);
}
function hasForwardedSlots(children) {
  for (let i2 = 0; i2 < children.length; i2++) {
    const child = children[i2];
    switch (child.type) {
      case 1:
        if (child.tagType === 2 || hasForwardedSlots(child.children)) {
          return true;
        }
        break;
      case 9:
        if (hasForwardedSlots(child.branches))
          return true;
        break;
      case 10:
      case 11:
        if (hasForwardedSlots(child.children))
          return true;
        break;
    }
  }
  return false;
}
function isNonWhitespaceContent(node) {
  if (node.type !== 2 && node.type !== 12)
    return true;
  return node.type === 2 ? !!node.content.trim() : isNonWhitespaceContent(node.content);
}
const directiveImportMap = /* @__PURE__ */ new WeakMap();
const transformElement = (node, context) => {
  return function postTransformElement() {
    node = context.currentNode;
    if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) {
      return;
    }
    const { tag, props } = node;
    const isComponent2 = node.tagType === 1;
    let vnodeTag = isComponent2 ? resolveComponentType(node, context) : `"${tag}"`;
    const isDynamicComponent = isObject$2(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
    let vnodeProps;
    let vnodeChildren;
    let vnodePatchFlag;
    let patchFlag = 0;
    let vnodeDynamicProps;
    let dynamicPropNames;
    let vnodeDirectives;
    let shouldUseBlock = (
      // dynamic component may resolve to plain elements
      isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent2 && // <svg> and <foreignObject> must be forced into blocks so that block
      // updates inside get proper isSVG flag at runtime. (#639, #643)
      // This is technically web-specific, but splitting the logic out of core
      // leads to too much unnecessary complexity.
      (tag === "svg" || tag === "foreignObject")
    );
    if (props.length > 0) {
      const propsBuildResult = buildProps(
        node,
        context,
        void 0,
        isComponent2,
        isDynamicComponent
      );
      vnodeProps = propsBuildResult.props;
      patchFlag = propsBuildResult.patchFlag;
      dynamicPropNames = propsBuildResult.dynamicPropNames;
      const directives = propsBuildResult.directives;
      vnodeDirectives = directives && directives.length ? createArrayExpression(
        directives.map((dir) => buildDirectiveArgs(dir, context))
      ) : void 0;
      if (propsBuildResult.shouldUseBlock) {
        shouldUseBlock = true;
      }
    }
    if (node.children.length > 0) {
      if (vnodeTag === KEEP_ALIVE) {
        shouldUseBlock = true;
        patchFlag |= 1024;
      }
      const shouldBuildAsSlots = isComponent2 && // Teleport is not a real component and has dedicated runtime handling
      vnodeTag !== TELEPORT && // explained above.
      vnodeTag !== KEEP_ALIVE;
      if (shouldBuildAsSlots) {
        const { slots, hasDynamicSlots } = buildSlots(node, context);
        vnodeChildren = slots;
        if (hasDynamicSlots) {
          patchFlag |= 1024;
        }
      } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
        const child = node.children[0];
        const type2 = child.type;
        const hasDynamicTextChild = type2 === 5 || type2 === 8;
        if (hasDynamicTextChild && getConstantType(child, context) === 0) {
          patchFlag |= 1;
        }
        if (hasDynamicTextChild || type2 === 2) {
          vnodeChildren = child;
        } else {
          vnodeChildren = node.children;
        }
      } else {
        vnodeChildren = node.children;
      }
    }
    if (patchFlag !== 0) {
      {
        vnodePatchFlag = String(patchFlag);
      }
      if (dynamicPropNames && dynamicPropNames.length) {
        vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
      }
    }
    node.codegenNode = createVNodeCall(
      context,
      vnodeTag,
      vnodeProps,
      vnodeChildren,
      vnodePatchFlag,
      vnodeDynamicProps,
      vnodeDirectives,
      !!shouldUseBlock,
      false,
      isComponent2,
      node.loc
    );
  };
};
function resolveComponentType(node, context, ssr = false) {
  let { tag } = node;
  const isExplicitDynamic = isComponentTag(tag);
  const isProp = findProp(node, "is");
  if (isProp) {
    if (isExplicitDynamic || isCompatEnabled(
      "COMPILER_IS_ON_ELEMENT",
      context
    )) {
      const exp = isProp.type === 6 ? isProp.value && createSimpleExpression(isProp.value.content, true) : isProp.exp;
      if (exp) {
        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
          exp
        ]);
      }
    } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
      tag = isProp.value.content.slice(4);
    }
  }
  const isDir = !isExplicitDynamic && findDir(node, "is");
  if (isDir && isDir.exp) {
    return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
      isDir.exp
    ]);
  }
  const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);
  if (builtIn) {
    if (!ssr)
      context.helper(builtIn);
    return builtIn;
  }
  context.helper(RESOLVE_COMPONENT);
  context.components.add(tag);
  return toValidAssetId(tag, `component`);
}
function buildProps(node, context, props = node.props, isComponent2, isDynamicComponent, ssr = false) {
  const { tag, loc: elementLoc, children } = node;
  let properties = [];
  const mergeArgs = [];
  const runtimeDirectives = [];
  const hasChildren = children.length > 0;
  let shouldUseBlock = false;
  let patchFlag = 0;
  let hasRef = false;
  let hasClassBinding = false;
  let hasStyleBinding = false;
  let hasHydrationEventBinding = false;
  let hasDynamicKeys = false;
  let hasVnodeHook = false;
  const dynamicPropNames = [];
  const pushMergeArg = (arg) => {
    if (properties.length) {
      mergeArgs.push(
        createObjectExpression(dedupeProperties(properties), elementLoc)
      );
      properties = [];
    }
    if (arg)
      mergeArgs.push(arg);
  };
  const analyzePatchFlag = ({ key, value: value2 }) => {
    if (isStaticExp(key)) {
      const name = key.content;
      const isEventHandler = isOn(name);
      if (isEventHandler && (!isComponent2 || isDynamicComponent) && // omit the flag for click handlers because hydration gives click
      // dedicated fast path.
      name.toLowerCase() !== "onclick" && // omit v-model handlers
      name !== "onUpdate:modelValue" && // omit onVnodeXXX hooks
      !isReservedProp(name)) {
        hasHydrationEventBinding = true;
      }
      if (isEventHandler && isReservedProp(name)) {
        hasVnodeHook = true;
      }
      if (value2.type === 20 || (value2.type === 4 || value2.type === 8) && getConstantType(value2, context) > 0) {
        return;
      }
      if (name === "ref") {
        hasRef = true;
      } else if (name === "class") {
        hasClassBinding = true;
      } else if (name === "style") {
        hasStyleBinding = true;
      } else if (name !== "key" && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
      if (isComponent2 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
    } else {
      hasDynamicKeys = true;
    }
  };
  for (let i2 = 0; i2 < props.length; i2++) {
    const prop = props[i2];
    if (prop.type === 6) {
      const { loc, name, value: value2 } = prop;
      let isStatic = true;
      if (name === "ref") {
        hasRef = true;
        if (context.scopes.vFor > 0) {
          properties.push(
            createObjectProperty(
              createSimpleExpression("ref_for", true),
              createSimpleExpression("true")
            )
          );
        }
      }
      if (name === "is" && (isComponentTag(tag) || value2 && value2.content.startsWith("vue:") || isCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        context
      ))) {
        continue;
      }
      properties.push(
        createObjectProperty(
          createSimpleExpression(
            name,
            true,
            getInnerRange(loc, 0, name.length)
          ),
          createSimpleExpression(
            value2 ? value2.content : "",
            isStatic,
            value2 ? value2.loc : loc
          )
        )
      );
    } else {
      const { name, arg, exp, loc } = prop;
      const isVBind = name === "bind";
      const isVOn = name === "on";
      if (name === "slot") {
        if (!isComponent2) {
          context.onError(
            createCompilerError(40, loc)
          );
        }
        continue;
      }
      if (name === "once" || name === "memo") {
        continue;
      }
      if (name === "is" || isVBind && isStaticArgOf(arg, "is") && (isComponentTag(tag) || isCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        context
      ))) {
        continue;
      }
      if (isVOn && ssr) {
        continue;
      }
      if (
        // #938: elements with dynamic keys should be forced into blocks
        isVBind && isStaticArgOf(arg, "key") || // inline before-update hooks need to force block so that it is invoked
        // before children
        isVOn && hasChildren && isStaticArgOf(arg, "vue:before-update")
      ) {
        shouldUseBlock = true;
      }
      if (isVBind && isStaticArgOf(arg, "ref") && context.scopes.vFor > 0) {
        properties.push(
          createObjectProperty(
            createSimpleExpression("ref_for", true),
            createSimpleExpression("true")
          )
        );
      }
      if (!arg && (isVBind || isVOn)) {
        hasDynamicKeys = true;
        if (exp) {
          if (isVBind) {
            pushMergeArg();
            {
              if (isCompatEnabled(
                "COMPILER_V_BIND_OBJECT_ORDER",
                context
              )) {
                mergeArgs.unshift(exp);
                continue;
              }
            }
            mergeArgs.push(exp);
          } else {
            pushMergeArg({
              type: 14,
              loc,
              callee: context.helper(TO_HANDLERS),
              arguments: isComponent2 ? [exp] : [exp, `true`]
            });
          }
        } else {
          context.onError(
            createCompilerError(
              isVBind ? 34 : 35,
              loc
            )
          );
        }
        continue;
      }
      const directiveTransform = context.directiveTransforms[name];
      if (directiveTransform) {
        const { props: props2, needRuntime } = directiveTransform(prop, node, context);
        !ssr && props2.forEach(analyzePatchFlag);
        if (isVOn && arg && !isStaticExp(arg)) {
          pushMergeArg(createObjectExpression(props2, elementLoc));
        } else {
          properties.push(...props2);
        }
        if (needRuntime) {
          runtimeDirectives.push(prop);
          if (isSymbol(needRuntime)) {
            directiveImportMap.set(prop, needRuntime);
          }
        }
      } else if (!isBuiltInDirective(name)) {
        runtimeDirectives.push(prop);
        if (hasChildren) {
          shouldUseBlock = true;
        }
      }
    }
  }
  let propsExpression = void 0;
  if (mergeArgs.length) {
    pushMergeArg();
    if (mergeArgs.length > 1) {
      propsExpression = createCallExpression(
        context.helper(MERGE_PROPS),
        mergeArgs,
        elementLoc
      );
    } else {
      propsExpression = mergeArgs[0];
    }
  } else if (properties.length) {
    propsExpression = createObjectExpression(
      dedupeProperties(properties),
      elementLoc
    );
  }
  if (hasDynamicKeys) {
    patchFlag |= 16;
  } else {
    if (hasClassBinding && !isComponent2) {
      patchFlag |= 2;
    }
    if (hasStyleBinding && !isComponent2) {
      patchFlag |= 4;
    }
    if (dynamicPropNames.length) {
      patchFlag |= 8;
    }
    if (hasHydrationEventBinding) {
      patchFlag |= 32;
    }
  }
  if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
    patchFlag |= 512;
  }
  if (!context.inSSR && propsExpression) {
    switch (propsExpression.type) {
      case 15:
        let classKeyIndex = -1;
        let styleKeyIndex = -1;
        let hasDynamicKey = false;
        for (let i2 = 0; i2 < propsExpression.properties.length; i2++) {
          const key = propsExpression.properties[i2].key;
          if (isStaticExp(key)) {
            if (key.content === "class") {
              classKeyIndex = i2;
            } else if (key.content === "style") {
              styleKeyIndex = i2;
            }
          } else if (!key.isHandlerKey) {
            hasDynamicKey = true;
          }
        }
        const classProp = propsExpression.properties[classKeyIndex];
        const styleProp = propsExpression.properties[styleKeyIndex];
        if (!hasDynamicKey) {
          if (classProp && !isStaticExp(classProp.value)) {
            classProp.value = createCallExpression(
              context.helper(NORMALIZE_CLASS),
              [classProp.value]
            );
          }
          if (styleProp && // the static style is compiled into an object,
          // so use `hasStyleBinding` to ensure that it is a dynamic style binding
          (hasStyleBinding || styleProp.value.type === 4 && styleProp.value.content.trim()[0] === `[` || // v-bind:style and style both exist,
          // v-bind:style with static literal object
          styleProp.value.type === 17)) {
            styleProp.value = createCallExpression(
              context.helper(NORMALIZE_STYLE),
              [styleProp.value]
            );
          }
        } else {
          propsExpression = createCallExpression(
            context.helper(NORMALIZE_PROPS),
            [propsExpression]
          );
        }
        break;
      case 14:
        break;
      default:
        propsExpression = createCallExpression(
          context.helper(NORMALIZE_PROPS),
          [
            createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
              propsExpression
            ])
          ]
        );
        break;
    }
  }
  return {
    props: propsExpression,
    directives: runtimeDirectives,
    patchFlag,
    dynamicPropNames,
    shouldUseBlock
  };
}
function dedupeProperties(properties) {
  const knownProps = /* @__PURE__ */ new Map();
  const deduped = [];
  for (let i2 = 0; i2 < properties.length; i2++) {
    const prop = properties[i2];
    if (prop.key.type === 8 || !prop.key.isStatic) {
      deduped.push(prop);
      continue;
    }
    const name = prop.key.content;
    const existing = knownProps.get(name);
    if (existing) {
      if (name === "style" || name === "class" || isOn(name)) {
        mergeAsArray(existing, prop);
      }
    } else {
      knownProps.set(name, prop);
      deduped.push(prop);
    }
  }
  return deduped;
}
function mergeAsArray(existing, incoming) {
  if (existing.value.type === 17) {
    existing.value.elements.push(incoming.value);
  } else {
    existing.value = createArrayExpression(
      [existing.value, incoming.value],
      existing.loc
    );
  }
}
function buildDirectiveArgs(dir, context) {
  const dirArgs = [];
  const runtime = directiveImportMap.get(dir);
  if (runtime) {
    dirArgs.push(context.helperString(runtime));
  } else {
    {
      context.helper(RESOLVE_DIRECTIVE);
      context.directives.add(dir.name);
      dirArgs.push(toValidAssetId(dir.name, `directive`));
    }
  }
  const { loc } = dir;
  if (dir.exp)
    dirArgs.push(dir.exp);
  if (dir.arg) {
    if (!dir.exp) {
      dirArgs.push(`void 0`);
    }
    dirArgs.push(dir.arg);
  }
  if (Object.keys(dir.modifiers).length) {
    if (!dir.arg) {
      if (!dir.exp) {
        dirArgs.push(`void 0`);
      }
      dirArgs.push(`void 0`);
    }
    const trueExpression = createSimpleExpression(`true`, false, loc);
    dirArgs.push(
      createObjectExpression(
        dir.modifiers.map(
          (modifier) => createObjectProperty(modifier, trueExpression)
        ),
        loc
      )
    );
  }
  return createArrayExpression(dirArgs, dir.loc);
}
function stringifyDynamicPropNames(props) {
  let propsNamesString = `[`;
  for (let i2 = 0, l = props.length; i2 < l; i2++) {
    propsNamesString += JSON.stringify(props[i2]);
    if (i2 < l - 1)
      propsNamesString += ", ";
  }
  return propsNamesString + `]`;
}
function isComponentTag(tag) {
  return tag === "component" || tag === "Component";
}
const transformSlotOutlet = (node, context) => {
  if (isSlotOutlet(node)) {
    const { children, loc } = node;
    const { slotName, slotProps } = processSlotOutlet(node, context);
    const slotArgs = [
      context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
      slotName,
      "{}",
      "undefined",
      "true"
    ];
    let expectedLen = 2;
    if (slotProps) {
      slotArgs[2] = slotProps;
      expectedLen = 3;
    }
    if (children.length) {
      slotArgs[3] = createFunctionExpression([], children, false, false, loc);
      expectedLen = 4;
    }
    if (context.scopeId && !context.slotted) {
      expectedLen = 5;
    }
    slotArgs.splice(expectedLen);
    node.codegenNode = createCallExpression(
      context.helper(RENDER_SLOT),
      slotArgs,
      loc
    );
  }
};
function processSlotOutlet(node, context) {
  let slotName = `"default"`;
  let slotProps = void 0;
  const nonNameProps = [];
  for (let i2 = 0; i2 < node.props.length; i2++) {
    const p2 = node.props[i2];
    if (p2.type === 6) {
      if (p2.value) {
        if (p2.name === "name") {
          slotName = JSON.stringify(p2.value.content);
        } else {
          p2.name = camelize(p2.name);
          nonNameProps.push(p2);
        }
      }
    } else {
      if (p2.name === "bind" && isStaticArgOf(p2.arg, "name")) {
        if (p2.exp)
          slotName = p2.exp;
      } else {
        if (p2.name === "bind" && p2.arg && isStaticExp(p2.arg)) {
          p2.arg.content = camelize(p2.arg.content);
        }
        nonNameProps.push(p2);
      }
    }
  }
  if (nonNameProps.length > 0) {
    const { props, directives } = buildProps(
      node,
      context,
      nonNameProps,
      false,
      false
    );
    slotProps = props;
    if (directives.length) {
      context.onError(
        createCompilerError(
          36,
          directives[0].loc
        )
      );
    }
  }
  return {
    slotName,
    slotProps
  };
}
const fnExpRE = /^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
const transformOn$1 = (dir, node, context, augmentor) => {
  const { loc, modifiers, arg } = dir;
  if (!dir.exp && !modifiers.length) {
    context.onError(createCompilerError(35, loc));
  }
  let eventName;
  if (arg.type === 4) {
    if (arg.isStatic) {
      let rawName = arg.content;
      if (rawName.startsWith("vue:")) {
        rawName = `vnode-${rawName.slice(4)}`;
      }
      const eventString = node.tagType !== 0 || rawName.startsWith("vnode") || !/[A-Z]/.test(rawName) ? (
        // for non-element and vnode lifecycle event listeners, auto convert
        // it to camelCase. See issue #2249
        toHandlerKey(camelize(rawName))
      ) : (
        // preserve case for plain element listeners that have uppercase
        // letters, as these may be custom elements' custom events
        `on:${rawName}`
      );
      eventName = createSimpleExpression(eventString, true, arg.loc);
    } else {
      eventName = createCompoundExpression([
        `${context.helperString(TO_HANDLER_KEY)}(`,
        arg,
        `)`
      ]);
    }
  } else {
    eventName = arg;
    eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
    eventName.children.push(`)`);
  }
  let exp = dir.exp;
  if (exp && !exp.content.trim()) {
    exp = void 0;
  }
  let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
  if (exp) {
    const isMemberExp = isMemberExpression(exp.content);
    const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
    const hasMultipleStatements = exp.content.includes(`;`);
    if (isInlineStatement || shouldCache && isMemberExp) {
      exp = createCompoundExpression([
        `${isInlineStatement ? `$event` : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
        exp,
        hasMultipleStatements ? `}` : `)`
      ]);
    }
  }
  let ret = {
    props: [
      createObjectProperty(
        eventName,
        exp || createSimpleExpression(`() => {}`, false, loc)
      )
    ]
  };
  if (augmentor) {
    ret = augmentor(ret);
  }
  if (shouldCache) {
    ret.props[0].value = context.cache(ret.props[0].value);
  }
  ret.props.forEach((p2) => p2.key.isHandlerKey = true);
  return ret;
};
const transformBind = (dir, _node, context) => {
  const { exp, modifiers, loc } = dir;
  const arg = dir.arg;
  if (arg.type !== 4) {
    arg.children.unshift(`(`);
    arg.children.push(`) || ""`);
  } else if (!arg.isStatic) {
    arg.content = `${arg.content} || ""`;
  }
  if (modifiers.includes("camel")) {
    if (arg.type === 4) {
      if (arg.isStatic) {
        arg.content = camelize(arg.content);
      } else {
        arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
      }
    } else {
      arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
      arg.children.push(`)`);
    }
  }
  if (!context.inSSR) {
    if (modifiers.includes("prop")) {
      injectPrefix(arg, ".");
    }
    if (modifiers.includes("attr")) {
      injectPrefix(arg, "^");
    }
  }
  if (!exp || exp.type === 4 && !exp.content.trim()) {
    context.onError(createCompilerError(34, loc));
    return {
      props: [createObjectProperty(arg, createSimpleExpression("", true, loc))]
    };
  }
  return {
    props: [createObjectProperty(arg, exp)]
  };
};
const injectPrefix = (arg, prefix) => {
  if (arg.type === 4) {
    if (arg.isStatic) {
      arg.content = prefix + arg.content;
    } else {
      arg.content = `\`${prefix}\${${arg.content}}\``;
    }
  } else {
    arg.children.unshift(`'${prefix}' + (`);
    arg.children.push(`)`);
  }
};
const transformText = (node, context) => {
  if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) {
    return () => {
      const children = node.children;
      let currentContainer = void 0;
      let hasText = false;
      for (let i2 = 0; i2 < children.length; i2++) {
        const child = children[i2];
        if (isText$1(child)) {
          hasText = true;
          for (let j = i2 + 1; j < children.length; j++) {
            const next2 = children[j];
            if (isText$1(next2)) {
              if (!currentContainer) {
                currentContainer = children[i2] = createCompoundExpression(
                  [child],
                  child.loc
                );
              }
              currentContainer.children.push(` + `, next2);
              children.splice(j, 1);
              j--;
            } else {
              currentContainer = void 0;
              break;
            }
          }
        }
      }
      if (!hasText || // if this is a plain element with a single text child, leave it
      // as-is since the runtime has dedicated fast path for this by directly
      // setting textContent of the element.
      // for component root it's always normalized anyway.
      children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0 && // #3756
      // custom directives can potentially add DOM elements arbitrarily,
      // we need to avoid setting textContent of the element at runtime
      // to avoid accidentally overwriting the DOM elements added
      // by the user through custom directives.
      !node.props.find(
        (p2) => p2.type === 7 && !context.directiveTransforms[p2.name]
      ) && // in compat mode, <template> tags with no special directives
      // will be rendered as a fragment so its children must be
      // converted into vnodes.
      !(node.tag === "template"))) {
        return;
      }
      for (let i2 = 0; i2 < children.length; i2++) {
        const child = children[i2];
        if (isText$1(child) || child.type === 8) {
          const callArgs = [];
          if (child.type !== 2 || child.content !== " ") {
            callArgs.push(child);
          }
          if (!context.ssr && getConstantType(child, context) === 0) {
            callArgs.push(
              `1`
            );
          }
          children[i2] = {
            type: 12,
            content: child,
            loc: child.loc,
            codegenNode: createCallExpression(
              context.helper(CREATE_TEXT),
              callArgs
            )
          };
        }
      }
    };
  }
};
const seen$1 = /* @__PURE__ */ new WeakSet();
const transformOnce = (node, context) => {
  if (node.type === 1 && findDir(node, "once", true)) {
    if (seen$1.has(node) || context.inVOnce || context.inSSR) {
      return;
    }
    seen$1.add(node);
    context.inVOnce = true;
    context.helper(SET_BLOCK_TRACKING);
    return () => {
      context.inVOnce = false;
      const cur = context.currentNode;
      if (cur.codegenNode) {
        cur.codegenNode = context.cache(
          cur.codegenNode,
          true
          /* isVNode */
        );
      }
    };
  }
};
const transformModel$1 = (dir, node, context) => {
  const { exp, arg } = dir;
  if (!exp) {
    context.onError(
      createCompilerError(41, dir.loc)
    );
    return createTransformProps();
  }
  const rawExp = exp.loc.source;
  const expString = exp.type === 4 ? exp.content : rawExp;
  const bindingType = context.bindingMetadata[rawExp];
  if (bindingType === "props" || bindingType === "props-aliased") {
    context.onError(createCompilerError(44, exp.loc));
    return createTransformProps();
  }
  const maybeRef = false;
  if (!expString.trim() || !isMemberExpression(expString) && !maybeRef) {
    context.onError(
      createCompilerError(42, exp.loc)
    );
    return createTransformProps();
  }
  const propName = arg ? arg : createSimpleExpression("modelValue", true);
  const eventName = arg ? isStaticExp(arg) ? `onUpdate:${camelize(arg.content)}` : createCompoundExpression(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
  let assignmentExp;
  const eventArg = context.isTS ? `($event: any)` : `$event`;
  {
    assignmentExp = createCompoundExpression([
      `${eventArg} => ((`,
      exp,
      `) = $event)`
    ]);
  }
  const props = [
    // modelValue: foo
    createObjectProperty(propName, dir.exp),
    // "onUpdate:modelValue": $event => (foo = $event)
    createObjectProperty(eventName, assignmentExp)
  ];
  if (dir.modifiers.length && node.tagType === 1) {
    const modifiers = dir.modifiers.map((m) => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);
    const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + "Modifiers"']) : `modelModifiers`;
    props.push(
      createObjectProperty(
        modifiersKey,
        createSimpleExpression(
          `{ ${modifiers} }`,
          false,
          dir.loc,
          2
        )
      )
    );
  }
  return createTransformProps(props);
};
function createTransformProps(props = []) {
  return { props };
}
const validDivisionCharRE = /[\w).+\-_$\]]/;
const transformFilter = (node, context) => {
  if (!isCompatEnabled("COMPILER_FILTER", context)) {
    return;
  }
  if (node.type === 5) {
    rewriteFilter(node.content, context);
  }
  if (node.type === 1) {
    node.props.forEach((prop) => {
      if (prop.type === 7 && prop.name !== "for" && prop.exp) {
        rewriteFilter(prop.exp, context);
      }
    });
  }
};
function rewriteFilter(node, context) {
  if (node.type === 4) {
    parseFilter(node, context);
  } else {
    for (let i2 = 0; i2 < node.children.length; i2++) {
      const child = node.children[i2];
      if (typeof child !== "object")
        continue;
      if (child.type === 4) {
        parseFilter(child, context);
      } else if (child.type === 8) {
        rewriteFilter(node, context);
      } else if (child.type === 5) {
        rewriteFilter(child.content, context);
      }
    }
  }
}
function parseFilter(node, context) {
  const exp = node.content;
  let inSingle = false;
  let inDouble = false;
  let inTemplateString = false;
  let inRegex = false;
  let curly = 0;
  let square = 0;
  let paren = 0;
  let lastFilterIndex = 0;
  let c, prev2, i2, expression, filters = [];
  for (i2 = 0; i2 < exp.length; i2++) {
    prev2 = c;
    c = exp.charCodeAt(i2);
    if (inSingle) {
      if (c === 39 && prev2 !== 92)
        inSingle = false;
    } else if (inDouble) {
      if (c === 34 && prev2 !== 92)
        inDouble = false;
    } else if (inTemplateString) {
      if (c === 96 && prev2 !== 92)
        inTemplateString = false;
    } else if (inRegex) {
      if (c === 47 && prev2 !== 92)
        inRegex = false;
    } else if (c === 124 && // pipe
    exp.charCodeAt(i2 + 1) !== 124 && exp.charCodeAt(i2 - 1) !== 124 && !curly && !square && !paren) {
      if (expression === void 0) {
        lastFilterIndex = i2 + 1;
        expression = exp.slice(0, i2).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 34:
          inDouble = true;
          break;
        case 39:
          inSingle = true;
          break;
        case 96:
          inTemplateString = true;
          break;
        case 40:
          paren++;
          break;
        case 41:
          paren--;
          break;
        case 91:
          square++;
          break;
        case 93:
          square--;
          break;
        case 123:
          curly++;
          break;
        case 125:
          curly--;
          break;
      }
      if (c === 47) {
        let j = i2 - 1;
        let p2;
        for (; j >= 0; j--) {
          p2 = exp.charAt(j);
          if (p2 !== " ")
            break;
        }
        if (!p2 || !validDivisionCharRE.test(p2)) {
          inRegex = true;
        }
      }
    }
  }
  if (expression === void 0) {
    expression = exp.slice(0, i2).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }
  function pushFilter() {
    filters.push(exp.slice(lastFilterIndex, i2).trim());
    lastFilterIndex = i2 + 1;
  }
  if (filters.length) {
    for (i2 = 0; i2 < filters.length; i2++) {
      expression = wrapFilter(expression, filters[i2], context);
    }
    node.content = expression;
  }
}
function wrapFilter(exp, filter, context) {
  context.helper(RESOLVE_FILTER);
  const i2 = filter.indexOf("(");
  if (i2 < 0) {
    context.filters.add(filter);
    return `${toValidAssetId(filter, "filter")}(${exp})`;
  } else {
    const name = filter.slice(0, i2);
    const args = filter.slice(i2 + 1);
    context.filters.add(name);
    return `${toValidAssetId(name, "filter")}(${exp}${args !== ")" ? "," + args : args}`;
  }
}
const seen = /* @__PURE__ */ new WeakSet();
const transformMemo = (node, context) => {
  if (node.type === 1) {
    const dir = findDir(node, "memo");
    if (!dir || seen.has(node)) {
      return;
    }
    seen.add(node);
    return () => {
      const codegenNode = node.codegenNode || context.currentNode.codegenNode;
      if (codegenNode && codegenNode.type === 13) {
        if (node.tagType !== 1) {
          convertToBlock(codegenNode, context);
        }
        node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [
          dir.exp,
          createFunctionExpression(void 0, codegenNode),
          `_cache`,
          String(context.cached++)
        ]);
      }
    };
  }
};
function getBaseTransformPreset(prefixIdentifiers) {
  return [
    [
      transformOnce,
      transformIf,
      transformMemo,
      transformFor,
      ...[transformFilter],
      ...[],
      transformSlotOutlet,
      transformElement,
      trackSlotScopes,
      transformText
    ],
    {
      on: transformOn$1,
      bind: transformBind,
      model: transformModel$1
    }
  ];
}
function baseCompile(template, options = {}) {
  const onError2 = options.onError || defaultOnError;
  const isModuleMode = options.mode === "module";
  {
    if (options.prefixIdentifiers === true) {
      onError2(createCompilerError(47));
    } else if (isModuleMode) {
      onError2(createCompilerError(48));
    }
  }
  const prefixIdentifiers = false;
  if (options.cacheHandlers) {
    onError2(createCompilerError(49));
  }
  if (options.scopeId && !isModuleMode) {
    onError2(createCompilerError(50));
  }
  const ast = isString(template) ? baseParse(template, options) : template;
  const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();
  transform$1(
    ast,
    extend({}, options, {
      prefixIdentifiers,
      nodeTransforms: [
        ...nodeTransforms,
        ...options.nodeTransforms || []
        // user transforms
      ],
      directiveTransforms: extend(
        {},
        directiveTransforms,
        options.directiveTransforms || {}
        // user transforms
      )
    })
  );
  return generate(
    ast,
    extend({}, options, {
      prefixIdentifiers
    })
  );
}
const noopDirectiveTransform = () => ({ props: [] });
const V_MODEL_RADIO = Symbol(``);
const V_MODEL_CHECKBOX = Symbol(``);
const V_MODEL_TEXT = Symbol(``);
const V_MODEL_SELECT = Symbol(``);
const V_MODEL_DYNAMIC = Symbol(``);
const V_ON_WITH_MODIFIERS = Symbol(``);
const V_ON_WITH_KEYS = Symbol(``);
const V_SHOW = Symbol(``);
const TRANSITION = Symbol(``);
const TRANSITION_GROUP = Symbol(``);
registerRuntimeHelpers({
  [V_MODEL_RADIO]: `vModelRadio`,
  [V_MODEL_CHECKBOX]: `vModelCheckbox`,
  [V_MODEL_TEXT]: `vModelText`,
  [V_MODEL_SELECT]: `vModelSelect`,
  [V_MODEL_DYNAMIC]: `vModelDynamic`,
  [V_ON_WITH_MODIFIERS]: `withModifiers`,
  [V_ON_WITH_KEYS]: `withKeys`,
  [V_SHOW]: `vShow`,
  [TRANSITION]: `Transition`,
  [TRANSITION_GROUP]: `TransitionGroup`
});
let decoder;
function decodeHtmlBrowser(raw, asAttr = false) {
  if (!decoder) {
    decoder = document.createElement("div");
  }
  if (asAttr) {
    decoder.innerHTML = `<div foo="${raw.replace(/"/g, "&quot;")}">`;
    return decoder.children[0].getAttribute("foo");
  } else {
    decoder.innerHTML = raw;
    return decoder.textContent;
  }
}
const isRawTextContainer = /* @__PURE__ */ makeMap(
  "style,iframe,script,noscript",
  true
);
const parserOptions = {
  isVoidTag,
  isNativeTag: (tag) => isHTMLTag(tag) || isSVGTag(tag),
  isPreTag: (tag) => tag === "pre",
  decodeEntities: decodeHtmlBrowser,
  isBuiltInComponent: (tag) => {
    if (isBuiltInType(tag, `Transition`)) {
      return TRANSITION;
    } else if (isBuiltInType(tag, `TransitionGroup`)) {
      return TRANSITION_GROUP;
    }
  },
  // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher
  getNamespace(tag, parent) {
    let ns = parent ? parent.ns : 0;
    if (parent && ns === 2) {
      if (parent.tag === "annotation-xml") {
        if (tag === "svg") {
          return 1;
        }
        if (parent.props.some(
          (a) => a.type === 6 && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml")
        )) {
          ns = 0;
        }
      } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== "mglyph" && tag !== "malignmark") {
        ns = 0;
      }
    } else if (parent && ns === 1) {
      if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") {
        ns = 0;
      }
    }
    if (ns === 0) {
      if (tag === "svg") {
        return 1;
      }
      if (tag === "math") {
        return 2;
      }
    }
    return ns;
  },
  // https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments
  getTextMode({ tag, ns }) {
    if (ns === 0) {
      if (tag === "textarea" || tag === "title") {
        return 1;
      }
      if (isRawTextContainer(tag)) {
        return 2;
      }
    }
    return 0;
  }
};
const transformStyle = (node) => {
  if (node.type === 1) {
    node.props.forEach((p2, i2) => {
      if (p2.type === 6 && p2.name === "style" && p2.value) {
        node.props[i2] = {
          type: 7,
          name: `bind`,
          arg: createSimpleExpression(`style`, true, p2.loc),
          exp: parseInlineCSS(p2.value.content, p2.loc),
          modifiers: [],
          loc: p2.loc
        };
      }
    });
  }
};
const parseInlineCSS = (cssText, loc) => {
  const normalized = parseStringStyle(cssText);
  return createSimpleExpression(
    JSON.stringify(normalized),
    false,
    loc,
    3
  );
};
function createDOMCompilerError(code, loc) {
  return createCompilerError(
    code,
    loc
  );
}
const transformVHtml = (dir, node, context) => {
  const { exp, loc } = dir;
  if (!exp) {
    context.onError(
      createDOMCompilerError(53, loc)
    );
  }
  if (node.children.length) {
    context.onError(
      createDOMCompilerError(54, loc)
    );
    node.children.length = 0;
  }
  return {
    props: [
      createObjectProperty(
        createSimpleExpression(`innerHTML`, true, loc),
        exp || createSimpleExpression("", true)
      )
    ]
  };
};
const transformVText = (dir, node, context) => {
  const { exp, loc } = dir;
  if (!exp) {
    context.onError(
      createDOMCompilerError(55, loc)
    );
  }
  if (node.children.length) {
    context.onError(
      createDOMCompilerError(56, loc)
    );
    node.children.length = 0;
  }
  return {
    props: [
      createObjectProperty(
        createSimpleExpression(`textContent`, true),
        exp ? getConstantType(exp, context) > 0 ? exp : createCallExpression(
          context.helperString(TO_DISPLAY_STRING),
          [exp],
          loc
        ) : createSimpleExpression("", true)
      )
    ]
  };
};
const transformModel = (dir, node, context) => {
  const baseResult = transformModel$1(dir, node, context);
  if (!baseResult.props.length || node.tagType === 1) {
    return baseResult;
  }
  if (dir.arg) {
    context.onError(
      createDOMCompilerError(
        58,
        dir.arg.loc
      )
    );
  }
  const { tag } = node;
  const isCustomElement = context.isCustomElement(tag);
  if (tag === "input" || tag === "textarea" || tag === "select" || isCustomElement) {
    let directiveToUse = V_MODEL_TEXT;
    let isInvalidType = false;
    if (tag === "input" || isCustomElement) {
      const type2 = findProp(node, `type`);
      if (type2) {
        if (type2.type === 7) {
          directiveToUse = V_MODEL_DYNAMIC;
        } else if (type2.value) {
          switch (type2.value.content) {
            case "radio":
              directiveToUse = V_MODEL_RADIO;
              break;
            case "checkbox":
              directiveToUse = V_MODEL_CHECKBOX;
              break;
            case "file":
              isInvalidType = true;
              context.onError(
                createDOMCompilerError(
                  59,
                  dir.loc
                )
              );
              break;
          }
        }
      } else if (hasDynamicKeyVBind(node)) {
        directiveToUse = V_MODEL_DYNAMIC;
      } else
        ;
    } else if (tag === "select") {
      directiveToUse = V_MODEL_SELECT;
    } else
      ;
    if (!isInvalidType) {
      baseResult.needRuntime = context.helper(directiveToUse);
    }
  } else {
    context.onError(
      createDOMCompilerError(
        57,
        dir.loc
      )
    );
  }
  baseResult.props = baseResult.props.filter(
    (p2) => !(p2.key.type === 4 && p2.key.content === "modelValue")
  );
  return baseResult;
};
const isEventOptionModifier = /* @__PURE__ */ makeMap(`passive,once,capture`);
const isNonKeyModifier = /* @__PURE__ */ makeMap(
  // event propagation management
  `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`
);
const maybeKeyModifier = /* @__PURE__ */ makeMap("left,right");
const isKeyboardEvent = /* @__PURE__ */ makeMap(
  `onkeyup,onkeydown,onkeypress`,
  true
);
const resolveModifiers = (key, modifiers, context, loc) => {
  const keyModifiers = [];
  const nonKeyModifiers = [];
  const eventOptionModifiers = [];
  for (let i2 = 0; i2 < modifiers.length; i2++) {
    const modifier = modifiers[i2];
    if (modifier === "native" && checkCompatEnabled(
      "COMPILER_V_ON_NATIVE",
      context
    )) {
      eventOptionModifiers.push(modifier);
    } else if (isEventOptionModifier(modifier)) {
      eventOptionModifiers.push(modifier);
    } else {
      if (maybeKeyModifier(modifier)) {
        if (isStaticExp(key)) {
          if (isKeyboardEvent(key.content)) {
            keyModifiers.push(modifier);
          } else {
            nonKeyModifiers.push(modifier);
          }
        } else {
          keyModifiers.push(modifier);
          nonKeyModifiers.push(modifier);
        }
      } else {
        if (isNonKeyModifier(modifier)) {
          nonKeyModifiers.push(modifier);
        } else {
          keyModifiers.push(modifier);
        }
      }
    }
  }
  return {
    keyModifiers,
    nonKeyModifiers,
    eventOptionModifiers
  };
};
const transformClick = (key, event) => {
  const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === "onclick";
  return isStaticClick ? createSimpleExpression(event, true) : key.type !== 4 ? createCompoundExpression([
    `(`,
    key,
    `) === "onClick" ? "${event}" : (`,
    key,
    `)`
  ]) : key;
};
const transformOn = (dir, node, context) => {
  return transformOn$1(dir, node, context, (baseResult) => {
    const { modifiers } = dir;
    if (!modifiers.length)
      return baseResult;
    let { key, value: handlerExp } = baseResult.props[0];
    const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);
    if (nonKeyModifiers.includes("right")) {
      key = transformClick(key, `onContextmenu`);
    }
    if (nonKeyModifiers.includes("middle")) {
      key = transformClick(key, `onMouseup`);
    }
    if (nonKeyModifiers.length) {
      handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
        handlerExp,
        JSON.stringify(nonKeyModifiers)
      ]);
    }
    if (keyModifiers.length && // if event name is dynamic, always wrap with keys guard
    (!isStaticExp(key) || isKeyboardEvent(key.content))) {
      handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [
        handlerExp,
        JSON.stringify(keyModifiers)
      ]);
    }
    if (eventOptionModifiers.length) {
      const modifierPostfix = eventOptionModifiers.map(capitalize$1).join("");
      key = isStaticExp(key) ? createSimpleExpression(`${key.content}${modifierPostfix}`, true) : createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
    }
    return {
      props: [createObjectProperty(key, handlerExp)]
    };
  });
};
const transformShow = (dir, node, context) => {
  const { exp, loc } = dir;
  if (!exp) {
    context.onError(
      createDOMCompilerError(61, loc)
    );
  }
  return {
    props: [],
    needRuntime: context.helper(V_SHOW)
  };
};
const ignoreSideEffectTags = (node, context) => {
  if (node.type === 1 && node.tagType === 0 && (node.tag === "script" || node.tag === "style")) {
    context.removeNode();
  }
};
const DOMNodeTransforms = [
  transformStyle,
  ...[]
];
const DOMDirectiveTransforms = {
  cloak: noopDirectiveTransform,
  html: transformVHtml,
  text: transformVText,
  model: transformModel,
  // override compiler-core
  on: transformOn,
  // override compiler-core
  show: transformShow
};
function compile(template, options = {}) {
  return baseCompile(
    template,
    extend({}, parserOptions, options, {
      nodeTransforms: [
        // ignore <script> and <tag>
        // this is not put inside DOMNodeTransforms because that list is used
        // by compiler-ssr to generate vnode fallback branches
        ignoreSideEffectTags,
        ...DOMNodeTransforms,
        ...options.nodeTransforms || []
      ],
      directiveTransforms: extend(
        {},
        DOMDirectiveTransforms,
        options.directiveTransforms || {}
      ),
      transformHoist: null
    })
  );
}
const compileCache = /* @__PURE__ */ Object.create(null);
function compileToFunction(template, options) {
  if (!isString(template)) {
    if (template.nodeType) {
      template = template.innerHTML;
    } else {
      return NOOP;
    }
  }
  const key = template;
  const cached = compileCache[key];
  if (cached) {
    return cached;
  }
  if (template[0] === "#") {
    const el = document.querySelector(template);
    template = el ? el.innerHTML : ``;
  }
  const opts = extend(
    {
      hoistStatic: true,
      onError: void 0,
      onWarn: NOOP
    },
    options
  );
  if (!opts.isCustomElement && typeof customElements !== "undefined") {
    opts.isCustomElement = (tag) => !!customElements.get(tag);
  }
  const { code } = compile(template, opts);
  const render2 = new Function("Vue", code)(runtimeDom);
  render2._rc = true;
  return compileCache[key] = render2;
}
registerRuntimeCompiler(compileToFunction);
function injectProp(target2, propName, get2, set2) {
  Object.defineProperty(target2, propName, {
    get: get2,
    set: set2,
    enumerable: true
  });
  return target2;
}
const isRuntimeSsrPreHydration = ref(
  false
);
let iosCorrection;
function getMatch(userAgent2, platformMatch) {
  const match = /(edg|edge|edga|edgios)\/([\w.]+)/.exec(userAgent2) || /(opr)[\/]([\w.]+)/.exec(userAgent2) || /(vivaldi)[\/]([\w.]+)/.exec(userAgent2) || /(chrome|crios)[\/]([\w.]+)/.exec(userAgent2) || /(version)(applewebkit)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(userAgent2) || /(webkit)[\/]([\w.]+).*(version)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(userAgent2) || /(firefox|fxios)[\/]([\w.]+)/.exec(userAgent2) || /(webkit)[\/]([\w.]+)/.exec(userAgent2) || /(opera)(?:.*version|)[\/]([\w.]+)/.exec(userAgent2) || [];
  return {
    browser: match[5] || match[3] || match[1] || "",
    version: match[2] || match[4] || "0",
    versionNumber: match[4] || match[2] || "0",
    platform: platformMatch[0] || ""
  };
}
function getPlatformMatch(userAgent2) {
  return /(ipad)/.exec(userAgent2) || /(ipod)/.exec(userAgent2) || /(windows phone)/.exec(userAgent2) || /(iphone)/.exec(userAgent2) || /(kindle)/.exec(userAgent2) || /(silk)/.exec(userAgent2) || /(android)/.exec(userAgent2) || /(win)/.exec(userAgent2) || /(mac)/.exec(userAgent2) || /(linux)/.exec(userAgent2) || /(cros)/.exec(userAgent2) || /(playbook)/.exec(userAgent2) || /(bb)/.exec(userAgent2) || /(blackberry)/.exec(userAgent2) || [];
}
const hasTouch = "ontouchstart" in window || window.navigator.maxTouchPoints > 0;
function applyIosCorrection(is) {
  iosCorrection = { is: { ...is } };
  delete is.mac;
  delete is.desktop;
  const platform = Math.min(window.innerHeight, window.innerWidth) > 414 ? "ipad" : "iphone";
  Object.assign(is, {
    mobile: true,
    ios: true,
    platform,
    [platform]: true
  });
}
function getPlatform(UA) {
  const userAgent2 = UA.toLowerCase(), platformMatch = getPlatformMatch(userAgent2), matched = getMatch(userAgent2, platformMatch), browser = {};
  if (matched.browser) {
    browser[matched.browser] = true;
    browser.version = matched.version;
    browser.versionNumber = parseInt(matched.versionNumber, 10);
  }
  if (matched.platform) {
    browser[matched.platform] = true;
  }
  const knownMobiles = browser.android || browser.ios || browser.bb || browser.blackberry || browser.ipad || browser.iphone || browser.ipod || browser.kindle || browser.playbook || browser.silk || browser["windows phone"];
  if (knownMobiles === true || userAgent2.indexOf("mobile") > -1) {
    browser.mobile = true;
    if (browser.edga || browser.edgios) {
      browser.edge = true;
      matched.browser = "edge";
    } else if (browser.crios) {
      browser.chrome = true;
      matched.browser = "chrome";
    } else if (browser.fxios) {
      browser.firefox = true;
      matched.browser = "firefox";
    }
  } else {
    browser.desktop = true;
  }
  if (browser.ipod || browser.ipad || browser.iphone) {
    browser.ios = true;
  }
  if (browser["windows phone"]) {
    browser.winphone = true;
    delete browser["windows phone"];
  }
  if (browser.chrome || browser.opr || browser.safari || browser.vivaldi || browser.mobile === true && browser.ios !== true && knownMobiles !== true) {
    browser.webkit = true;
  }
  if (browser.edg) {
    matched.browser = "edgechromium";
    browser.edgeChromium = true;
  }
  if (browser.safari && browser.blackberry || browser.bb) {
    matched.browser = "blackberry";
    browser.blackberry = true;
  }
  if (browser.safari && browser.playbook) {
    matched.browser = "playbook";
    browser.playbook = true;
  }
  if (browser.opr) {
    matched.browser = "opera";
    browser.opera = true;
  }
  if (browser.safari && browser.android) {
    matched.browser = "android";
    browser.android = true;
  }
  if (browser.safari && browser.kindle) {
    matched.browser = "kindle";
    browser.kindle = true;
  }
  if (browser.safari && browser.silk) {
    matched.browser = "silk";
    browser.silk = true;
  }
  if (browser.vivaldi) {
    matched.browser = "vivaldi";
    browser.vivaldi = true;
  }
  browser.name = matched.browser;
  browser.platform = matched.platform;
  {
    if (userAgent2.indexOf("electron") > -1) {
      browser.electron = true;
    } else if (document.location.href.indexOf("-extension://") > -1) {
      browser.bex = true;
    } else {
      if (window.Capacitor !== void 0) {
        browser.capacitor = true;
        browser.nativeMobile = true;
        browser.nativeMobileWrapper = "capacitor";
      } else if (window._cordovaNative !== void 0 || window.cordova !== void 0) {
        browser.cordova = true;
        browser.nativeMobile = true;
        browser.nativeMobileWrapper = "cordova";
      }
      if (hasTouch === true && browser.mac === true && (browser.desktop === true && browser.safari === true || browser.nativeMobile === true && browser.android !== true && browser.ios !== true && browser.ipad !== true)) {
        applyIosCorrection(browser);
      }
    }
  }
  return browser;
}
const userAgent = navigator.userAgent || navigator.vendor || window.opera;
const ssrClient = {
  has: {
    touch: false,
    webStorage: false
  },
  within: { iframe: false }
};
const client = {
  userAgent,
  is: getPlatform(userAgent),
  has: {
    touch: hasTouch
  },
  within: {
    iframe: window.self !== window.top
  }
};
const Platform = {
  install(opts) {
    const { $q } = opts;
    if (isRuntimeSsrPreHydration.value === true) {
      opts.onSSRHydrated.push(() => {
        Object.assign($q.platform, client);
        isRuntimeSsrPreHydration.value = false;
        iosCorrection = void 0;
      });
      $q.platform = reactive(this);
    } else {
      $q.platform = this;
    }
  }
};
{
  let hasWebStorage;
  injectProp(client.has, "webStorage", () => {
    if (hasWebStorage !== void 0) {
      return hasWebStorage;
    }
    try {
      if (window.localStorage) {
        hasWebStorage = true;
        return true;
      }
    } catch (e) {
    }
    hasWebStorage = false;
    return false;
  });
  client.is.ios === true && window.navigator.vendor.toLowerCase().indexOf("apple") === -1;
  if (isRuntimeSsrPreHydration.value === true) {
    Object.assign(Platform, client, iosCorrection, ssrClient);
  } else {
    Object.assign(Platform, client);
  }
}
const defineReactivePlugin = (state, plugin) => {
  const reactiveState = reactive(state);
  for (const name in state) {
    injectProp(
      plugin,
      name,
      () => reactiveState[name],
      (val) => {
        reactiveState[name] = val;
      }
    );
  }
  return plugin;
};
const listenOpts = {
  hasPassive: false,
  passiveCapture: true,
  notPassiveCapture: true
};
try {
  const opts = Object.defineProperty({}, "passive", {
    get() {
      Object.assign(listenOpts, {
        hasPassive: true,
        passive: { passive: true },
        notPassive: { passive: false },
        passiveCapture: { passive: true, capture: true },
        notPassiveCapture: { passive: false, capture: true }
      });
    }
  });
  window.addEventListener("qtest", null, opts);
  window.removeEventListener("qtest", null, opts);
} catch (e) {
}
function noop() {
}
function leftClick(e) {
  return e.button === 0;
}
function position(e) {
  if (e.touches && e.touches[0]) {
    e = e.touches[0];
  } else if (e.changedTouches && e.changedTouches[0]) {
    e = e.changedTouches[0];
  } else if (e.targetTouches && e.targetTouches[0]) {
    e = e.targetTouches[0];
  }
  return {
    top: e.clientY,
    left: e.clientX
  };
}
function getEventPath(e) {
  if (e.path) {
    return e.path;
  }
  if (e.composedPath) {
    return e.composedPath();
  }
  const path = [];
  let el = e.target;
  while (el) {
    path.push(el);
    if (el.tagName === "HTML") {
      path.push(document);
      path.push(window);
      return path;
    }
    el = el.parentElement;
  }
}
function stop(e) {
  e.stopPropagation();
}
function prevent(e) {
  e.cancelable !== false && e.preventDefault();
}
function stopAndPrevent(e) {
  e.cancelable !== false && e.preventDefault();
  e.stopPropagation();
}
function preventDraggable(el, status) {
  if (el === void 0 || status === true && el.__dragPrevented === true) {
    return;
  }
  const fn = status === true ? (el2) => {
    el2.__dragPrevented = true;
    el2.addEventListener("dragstart", prevent, listenOpts.notPassiveCapture);
  } : (el2) => {
    delete el2.__dragPrevented;
    el2.removeEventListener("dragstart", prevent, listenOpts.notPassiveCapture);
  };
  el.querySelectorAll("a, img").forEach(fn);
}
function addEvt(ctx, targetName, events) {
  const name = `__q_${targetName}_evt`;
  ctx[name] = ctx[name] !== void 0 ? ctx[name].concat(events) : events;
  events.forEach((evt) => {
    evt[0].addEventListener(evt[1], ctx[evt[2]], listenOpts[evt[3]]);
  });
}
function cleanEvt(ctx, targetName) {
  const name = `__q_${targetName}_evt`;
  if (ctx[name] !== void 0) {
    ctx[name].forEach((evt) => {
      evt[0].removeEventListener(evt[1], ctx[evt[2]], listenOpts[evt[3]]);
    });
    ctx[name] = void 0;
  }
}
function debounce(fn, wait = 250, immediate) {
  let timer = null;
  function debounced() {
    const args = arguments;
    const later = () => {
      timer = null;
      if (immediate !== true) {
        fn.apply(this, args);
      }
    };
    if (timer !== null) {
      clearTimeout(timer);
    } else if (immediate === true) {
      fn.apply(this, args);
    }
    timer = setTimeout(later, wait);
  }
  debounced.cancel = () => {
    timer !== null && clearTimeout(timer);
  };
  return debounced;
}
const SIZE_LIST = ["sm", "md", "lg", "xl"];
const { passive: passive$1 } = listenOpts;
const Screen = defineReactivePlugin({
  width: 0,
  height: 0,
  name: "xs",
  sizes: {
    sm: 600,
    md: 1024,
    lg: 1440,
    xl: 1920
  },
  lt: {
    sm: true,
    md: true,
    lg: true,
    xl: true
  },
  gt: {
    xs: false,
    sm: false,
    md: false,
    lg: false
  },
  xs: true,
  sm: false,
  md: false,
  lg: false,
  xl: false
}, {
  setSizes: noop,
  setDebounce: noop,
  install({ $q, onSSRHydrated }) {
    $q.screen = this;
    if (this.__installed === true) {
      if ($q.config.screen !== void 0) {
        if ($q.config.screen.bodyClasses === false) {
          document.body.classList.remove(`screen--${this.name}`);
        } else {
          this.__update(true);
        }
      }
      return;
    }
    const { visualViewport } = window;
    const target2 = visualViewport || window;
    const scrollingElement = document.scrollingElement || document.documentElement;
    const getSize = visualViewport === void 0 || client.is.mobile === true ? () => [
      Math.max(window.innerWidth, scrollingElement.clientWidth),
      Math.max(window.innerHeight, scrollingElement.clientHeight)
    ] : () => [
      visualViewport.width * visualViewport.scale + window.innerWidth - scrollingElement.clientWidth,
      visualViewport.height * visualViewport.scale + window.innerHeight - scrollingElement.clientHeight
    ];
    const classes = $q.config.screen !== void 0 && $q.config.screen.bodyClasses === true;
    this.__update = (force) => {
      const [w, h2] = getSize();
      if (h2 !== this.height) {
        this.height = h2;
      }
      if (w !== this.width) {
        this.width = w;
      } else if (force !== true) {
        return;
      }
      let s = this.sizes;
      this.gt.xs = w >= s.sm;
      this.gt.sm = w >= s.md;
      this.gt.md = w >= s.lg;
      this.gt.lg = w >= s.xl;
      this.lt.sm = w < s.sm;
      this.lt.md = w < s.md;
      this.lt.lg = w < s.lg;
      this.lt.xl = w < s.xl;
      this.xs = this.lt.sm;
      this.sm = this.gt.xs === true && this.lt.md === true;
      this.md = this.gt.sm === true && this.lt.lg === true;
      this.lg = this.gt.md === true && this.lt.xl === true;
      this.xl = this.gt.lg;
      s = this.xs === true && "xs" || this.sm === true && "sm" || this.md === true && "md" || this.lg === true && "lg" || "xl";
      if (s !== this.name) {
        if (classes === true) {
          document.body.classList.remove(`screen--${this.name}`);
          document.body.classList.add(`screen--${s}`);
        }
        this.name = s;
      }
    };
    let updateEvt, updateSizes = {}, updateDebounce = 16;
    this.setSizes = (sizes) => {
      SIZE_LIST.forEach((name) => {
        if (sizes[name] !== void 0) {
          updateSizes[name] = sizes[name];
        }
      });
    };
    this.setDebounce = (deb) => {
      updateDebounce = deb;
    };
    const start = () => {
      const style = getComputedStyle(document.body);
      if (style.getPropertyValue("--q-size-sm")) {
        SIZE_LIST.forEach((name) => {
          this.sizes[name] = parseInt(style.getPropertyValue(`--q-size-${name}`), 10);
        });
      }
      this.setSizes = (sizes) => {
        SIZE_LIST.forEach((name) => {
          if (sizes[name]) {
            this.sizes[name] = sizes[name];
          }
        });
        this.__update(true);
      };
      this.setDebounce = (delay) => {
        updateEvt !== void 0 && target2.removeEventListener("resize", updateEvt, passive$1);
        updateEvt = delay > 0 ? debounce(this.__update, delay) : this.__update;
        target2.addEventListener("resize", updateEvt, passive$1);
      };
      this.setDebounce(updateDebounce);
      if (Object.keys(updateSizes).length !== 0) {
        this.setSizes(updateSizes);
        updateSizes = void 0;
      } else {
        this.__update();
      }
      classes === true && this.name === "xs" && document.body.classList.add("screen--xs");
    };
    if (isRuntimeSsrPreHydration.value === true) {
      onSSRHydrated.push(start);
    } else {
      start();
    }
  }
});
const Plugin$2 = defineReactivePlugin({
  isActive: false,
  mode: false
}, {
  __media: void 0,
  set(val) {
    Plugin$2.mode = val;
    if (val === "auto") {
      if (Plugin$2.__media === void 0) {
        Plugin$2.__media = window.matchMedia("(prefers-color-scheme: dark)");
        Plugin$2.__updateMedia = () => {
          Plugin$2.set("auto");
        };
        Plugin$2.__media.addListener(Plugin$2.__updateMedia);
      }
      val = Plugin$2.__media.matches;
    } else if (Plugin$2.__media !== void 0) {
      Plugin$2.__media.removeListener(Plugin$2.__updateMedia);
      Plugin$2.__media = void 0;
    }
    Plugin$2.isActive = val === true;
    document.body.classList.remove(`body--${val === true ? "light" : "dark"}`);
    document.body.classList.add(`body--${val === true ? "dark" : "light"}`);
  },
  toggle() {
    {
      Plugin$2.set(Plugin$2.isActive === false);
    }
  },
  install({ $q, onSSRHydrated, ssrContext }) {
    const { dark } = $q.config;
    $q.dark = this;
    if (this.__installed === true && dark === void 0) {
      return;
    }
    this.isActive = dark === true;
    const initialVal = dark !== void 0 ? dark : false;
    if (isRuntimeSsrPreHydration.value === true) {
      const ssrSet = (val) => {
        this.__fromSSR = val;
      };
      const originalSet = this.set;
      this.set = ssrSet;
      ssrSet(initialVal);
      onSSRHydrated.push(() => {
        this.set = originalSet;
        this.set(this.__fromSSR);
      });
    } else {
      this.set(initialVal);
    }
  }
});
const getTrue = () => true;
function filterInvalidPath(path) {
  return typeof path === "string" && path !== "" && path !== "/" && path !== "#/";
}
function normalizeExitPath(path) {
  path.startsWith("#") === true && (path = path.substring(1));
  path.startsWith("/") === false && (path = "/" + path);
  path.endsWith("/") === true && (path = path.substring(0, path.length - 1));
  return "#" + path;
}
function getShouldExitFn(cfg) {
  if (cfg.backButtonExit === false) {
    return () => false;
  }
  if (cfg.backButtonExit === "*") {
    return getTrue;
  }
  const exitPaths = ["#/"];
  Array.isArray(cfg.backButtonExit) === true && exitPaths.push(
    ...cfg.backButtonExit.filter(filterInvalidPath).map(normalizeExitPath)
  );
  return () => exitPaths.includes(window.location.hash);
}
const History = {
  __history: [],
  add: noop,
  remove: noop,
  install({ $q }) {
    if (this.__installed === true) {
      return;
    }
    const { cordova, capacitor } = client.is;
    if (cordova !== true && capacitor !== true) {
      return;
    }
    const qConf = $q.config[cordova === true ? "cordova" : "capacitor"];
    if (qConf !== void 0 && qConf.backButton === false) {
      return;
    }
    if (
      // if we're on Capacitor mode
      capacitor === true && (window.Capacitor === void 0 || window.Capacitor.Plugins.App === void 0)
    ) {
      return;
    }
    this.add = (entry) => {
      if (entry.condition === void 0) {
        entry.condition = getTrue;
      }
      this.__history.push(entry);
    };
    this.remove = (entry) => {
      const index2 = this.__history.indexOf(entry);
      if (index2 >= 0) {
        this.__history.splice(index2, 1);
      }
    };
    const shouldExit = getShouldExitFn(
      Object.assign(
        { backButtonExit: true },
        qConf
      )
    );
    const backHandler = () => {
      if (this.__history.length) {
        const entry = this.__history[this.__history.length - 1];
        if (entry.condition() === true) {
          this.__history.pop();
          entry.handler();
        }
      } else if (shouldExit() === true) {
        navigator.app.exitApp();
      } else {
        window.history.back();
      }
    };
    if (cordova === true) {
      document.addEventListener("deviceready", () => {
        document.addEventListener("backbutton", backHandler, false);
      });
    } else {
      window.Capacitor.Plugins.App.addListener("backButton", backHandler);
    }
  }
};
const defaultLang = {
  isoName: "en-US",
  nativeName: "English (US)",
  label: {
    clear: "Clear",
    ok: "OK",
    cancel: "Cancel",
    close: "Close",
    set: "Set",
    select: "Select",
    reset: "Reset",
    remove: "Remove",
    update: "Update",
    create: "Create",
    search: "Search",
    filter: "Filter",
    refresh: "Refresh",
    expand: (label) => label ? `Expand "${label}"` : "Expand",
    collapse: (label) => label ? `Collapse "${label}"` : "Collapse"
  },
  date: {
    days: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
    daysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
    months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
    monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
    firstDayOfWeek: 0,
    // 0-6, 0 - Sunday, 1 Monday, ...
    format24h: false,
    pluralDay: "days"
  },
  table: {
    noData: "No data available",
    noResults: "No matching records found",
    loading: "Loading...",
    selectedRecords: (rows) => rows === 1 ? "1 record selected." : (rows === 0 ? "No" : rows) + " records selected.",
    recordsPerPage: "Records per page:",
    allRows: "All",
    pagination: (start, end, total) => start + "-" + end + " of " + total,
    columns: "Columns"
  },
  editor: {
    url: "URL",
    bold: "Bold",
    italic: "Italic",
    strikethrough: "Strikethrough",
    underline: "Underline",
    unorderedList: "Unordered List",
    orderedList: "Ordered List",
    subscript: "Subscript",
    superscript: "Superscript",
    hyperlink: "Hyperlink",
    toggleFullscreen: "Toggle Fullscreen",
    quote: "Quote",
    left: "Left align",
    center: "Center align",
    right: "Right align",
    justify: "Justify align",
    print: "Print",
    outdent: "Decrease indentation",
    indent: "Increase indentation",
    removeFormat: "Remove formatting",
    formatting: "Formatting",
    fontSize: "Font Size",
    align: "Align",
    hr: "Insert Horizontal Rule",
    undo: "Undo",
    redo: "Redo",
    heading1: "Heading 1",
    heading2: "Heading 2",
    heading3: "Heading 3",
    heading4: "Heading 4",
    heading5: "Heading 5",
    heading6: "Heading 6",
    paragraph: "Paragraph",
    code: "Code",
    size1: "Very small",
    size2: "A bit small",
    size3: "Normal",
    size4: "Medium-large",
    size5: "Big",
    size6: "Very big",
    size7: "Maximum",
    defaultFont: "Default Font",
    viewSource: "View Source"
  },
  tree: {
    noNodes: "No nodes available",
    noResults: "No matching nodes found"
  }
};
function getLocale() {
  const val = Array.isArray(navigator.languages) === true && navigator.languages.length !== 0 ? navigator.languages[0] : navigator.language;
  if (typeof val === "string") {
    return val.split(/[-_]/).map((v, i2) => i2 === 0 ? v.toLowerCase() : i2 > 1 || v.length < 4 ? v.toUpperCase() : v[0].toUpperCase() + v.slice(1).toLowerCase()).join("-");
  }
}
const Plugin$1 = defineReactivePlugin({
  __langPack: {}
}, {
  getLocale,
  set(langObject = defaultLang, ssrContext) {
    const lang = {
      ...langObject,
      rtl: langObject.rtl === true,
      getLocale
    };
    {
      lang.set = Plugin$1.set;
      if (Plugin$1.__langConfig === void 0 || Plugin$1.__langConfig.noHtmlAttrs !== true) {
        const el = document.documentElement;
        el.setAttribute("dir", lang.rtl === true ? "rtl" : "ltr");
        el.setAttribute("lang", lang.isoName);
      }
      Object.assign(Plugin$1.__langPack, lang);
      Plugin$1.props = lang;
      Plugin$1.isoName = lang.isoName;
      Plugin$1.nativeName = lang.nativeName;
    }
  },
  install({ $q, lang, ssrContext }) {
    {
      $q.lang = Plugin$1.__langPack;
      Plugin$1.__langConfig = $q.config.lang;
      if (this.__installed === true) {
        lang !== void 0 && this.set(lang);
      } else {
        this.set(lang || defaultLang);
      }
    }
  }
});
function setCssVar(propName, value2, element = document.body) {
  if (typeof propName !== "string") {
    throw new TypeError("Expected a string as propName");
  }
  if (typeof value2 !== "string") {
    throw new TypeError("Expected a string as value");
  }
  if (!(element instanceof Element)) {
    throw new TypeError("Expected a DOM element");
  }
  element.style.setProperty(`--q-${propName}`, value2);
}
let lastKeyCompositionStatus = false;
function onKeyDownComposition(evt) {
  lastKeyCompositionStatus = evt.isComposing === true;
}
function shouldIgnoreKey(evt) {
  return lastKeyCompositionStatus === true || evt !== Object(evt) || evt.isComposing === true || evt.qKeyEvent === true;
}
function isKeyCode(evt, keyCodes) {
  return shouldIgnoreKey(evt) === true ? false : [].concat(keyCodes).includes(evt.keyCode);
}
function getMobilePlatform(is) {
  if (is.ios === true)
    return "ios";
  if (is.android === true)
    return "android";
}
function getBodyClasses({ is, has: has2, within }, cfg) {
  const cls = [
    is.desktop === true ? "desktop" : "mobile",
    `${has2.touch === false ? "no-" : ""}touch`
  ];
  if (is.mobile === true) {
    const mobile = getMobilePlatform(is);
    mobile !== void 0 && cls.push("platform-" + mobile);
  }
  if (is.nativeMobile === true) {
    const type2 = is.nativeMobileWrapper;
    cls.push(type2);
    cls.push("native-mobile");
    if (is.ios === true && (cfg[type2] === void 0 || cfg[type2].iosStatusBarPadding !== false)) {
      cls.push("q-ios-padding");
    }
  } else if (is.electron === true) {
    cls.push("electron");
  } else if (is.bex === true) {
    cls.push("bex");
  }
  within.iframe === true && cls.push("within-iframe");
  return cls;
}
function applyClientSsrCorrections() {
  const { is } = client;
  const classes = document.body.className;
  const classList = new Set(classes.replace(/ {2}/g, " ").split(" "));
  if (iosCorrection !== void 0) {
    classList.delete("desktop");
    classList.add("platform-ios");
    classList.add("mobile");
  } else if (is.nativeMobile !== true && is.electron !== true && is.bex !== true) {
    if (is.desktop === true) {
      classList.delete("mobile");
      classList.delete("platform-ios");
      classList.delete("platform-android");
      classList.add("desktop");
    } else if (is.mobile === true) {
      classList.delete("desktop");
      classList.add("mobile");
      const mobile = getMobilePlatform(is);
      if (mobile !== void 0) {
        classList.add(`platform-${mobile}`);
        classList.delete(`platform-${mobile === "ios" ? "android" : "ios"}`);
      } else {
        classList.delete("platform-ios");
        classList.delete("platform-android");
      }
    }
  }
  if (client.has.touch === true) {
    classList.delete("no-touch");
    classList.add("touch");
  }
  if (client.within.iframe === true) {
    classList.add("within-iframe");
  }
  const newCls = Array.from(classList).join(" ");
  if (classes !== newCls) {
    document.body.className = newCls;
  }
}
function setColors(brand) {
  for (const color in brand) {
    setCssVar(color, brand[color]);
  }
}
const Body = {
  install(opts) {
    if (this.__installed === true) {
      return;
    }
    if (isRuntimeSsrPreHydration.value === true) {
      applyClientSsrCorrections();
    } else {
      const { $q } = opts;
      $q.config.brand !== void 0 && setColors($q.config.brand);
      const cls = getBodyClasses(client, $q.config);
      document.body.classList.add.apply(document.body.classList, cls);
    }
    if (client.is.ios === true) {
      document.body.addEventListener("touchstart", noop);
    }
    window.addEventListener("keydown", onKeyDownComposition, true);
  }
};
const materialIcons$1 = {
  name: "material-icons",
  type: {
    positive: "check_circle",
    negative: "warning",
    info: "info",
    warning: "priority_high"
  },
  arrow: {
    up: "arrow_upward",
    right: "arrow_forward",
    down: "arrow_downward",
    left: "arrow_back",
    dropdown: "arrow_drop_down"
  },
  chevron: {
    left: "chevron_left",
    right: "chevron_right"
  },
  colorPicker: {
    spectrum: "gradient",
    tune: "tune",
    palette: "style"
  },
  pullToRefresh: {
    icon: "refresh"
  },
  carousel: {
    left: "chevron_left",
    right: "chevron_right",
    up: "keyboard_arrow_up",
    down: "keyboard_arrow_down",
    navigationIcon: "lens"
  },
  chip: {
    remove: "cancel",
    selected: "check"
  },
  datetime: {
    arrowLeft: "chevron_left",
    arrowRight: "chevron_right",
    now: "access_time",
    today: "today"
  },
  editor: {
    bold: "format_bold",
    italic: "format_italic",
    strikethrough: "strikethrough_s",
    underline: "format_underlined",
    unorderedList: "format_list_bulleted",
    orderedList: "format_list_numbered",
    subscript: "vertical_align_bottom",
    superscript: "vertical_align_top",
    hyperlink: "link",
    toggleFullscreen: "fullscreen",
    quote: "format_quote",
    left: "format_align_left",
    center: "format_align_center",
    right: "format_align_right",
    justify: "format_align_justify",
    print: "print",
    outdent: "format_indent_decrease",
    indent: "format_indent_increase",
    removeFormat: "format_clear",
    formatting: "text_format",
    fontSize: "format_size",
    align: "format_align_left",
    hr: "remove",
    undo: "undo",
    redo: "redo",
    heading: "format_size",
    code: "code",
    size: "format_size",
    font: "font_download",
    viewSource: "code"
  },
  expansionItem: {
    icon: "keyboard_arrow_down",
    denseIcon: "arrow_drop_down"
  },
  fab: {
    icon: "add",
    activeIcon: "close"
  },
  field: {
    clear: "cancel",
    error: "error"
  },
  pagination: {
    first: "first_page",
    prev: "keyboard_arrow_left",
    next: "keyboard_arrow_right",
    last: "last_page"
  },
  rating: {
    icon: "grade"
  },
  stepper: {
    done: "check",
    active: "edit",
    error: "warning"
  },
  tabs: {
    left: "chevron_left",
    right: "chevron_right",
    up: "keyboard_arrow_up",
    down: "keyboard_arrow_down"
  },
  table: {
    arrowUp: "arrow_upward",
    warning: "warning",
    firstPage: "first_page",
    prevPage: "chevron_left",
    nextPage: "chevron_right",
    lastPage: "last_page"
  },
  tree: {
    icon: "play_arrow"
  },
  uploader: {
    done: "done",
    clear: "clear",
    add: "add_box",
    upload: "cloud_upload",
    removeQueue: "clear_all",
    removeUploaded: "done_all"
  }
};
const Plugin = defineReactivePlugin({
  iconMapFn: null,
  __icons: {}
}, {
  set(setObject, ssrContext) {
    const def2 = { ...setObject, rtl: setObject.rtl === true };
    {
      def2.set = Plugin.set;
      Object.assign(Plugin.__icons, def2);
    }
  },
  install({ $q, iconSet, ssrContext }) {
    {
      if ($q.config.iconMapFn !== void 0) {
        this.iconMapFn = $q.config.iconMapFn;
      }
      $q.iconSet = this.__icons;
      injectProp($q, "iconMapFn", () => this.iconMapFn, (val) => {
        this.iconMapFn = val;
      });
      if (this.__installed === true) {
        iconSet !== void 0 && this.set(iconSet);
      } else {
        this.set(iconSet || materialIcons$1);
      }
    }
  }
});
const quasarKey = "_q_";
const layoutKey = "_q_l_";
const pageContainerKey = "_q_pc_";
const formKey = "_q_fo_";
const emptyRenderFn = () => {
};
const globalConfig = {};
let globalConfigIsFrozen = false;
function freezeGlobalConfig() {
  globalConfigIsFrozen = true;
}
function isDeepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (a !== null && b !== null && typeof a === "object" && typeof b === "object") {
    if (a.constructor !== b.constructor) {
      return false;
    }
    let length2, i2;
    if (a.constructor === Array) {
      length2 = a.length;
      if (length2 !== b.length) {
        return false;
      }
      for (i2 = length2; i2-- !== 0; ) {
        if (isDeepEqual(a[i2], b[i2]) !== true) {
          return false;
        }
      }
      return true;
    }
    if (a.constructor === Map) {
      if (a.size !== b.size) {
        return false;
      }
      let iter = a.entries();
      i2 = iter.next();
      while (i2.done !== true) {
        if (b.has(i2.value[0]) !== true) {
          return false;
        }
        i2 = iter.next();
      }
      iter = a.entries();
      i2 = iter.next();
      while (i2.done !== true) {
        if (isDeepEqual(i2.value[1], b.get(i2.value[0])) !== true) {
          return false;
        }
        i2 = iter.next();
      }
      return true;
    }
    if (a.constructor === Set) {
      if (a.size !== b.size) {
        return false;
      }
      const iter = a.entries();
      i2 = iter.next();
      while (i2.done !== true) {
        if (b.has(i2.value[0]) !== true) {
          return false;
        }
        i2 = iter.next();
      }
      return true;
    }
    if (a.buffer != null && a.buffer.constructor === ArrayBuffer) {
      length2 = a.length;
      if (length2 !== b.length) {
        return false;
      }
      for (i2 = length2; i2-- !== 0; ) {
        if (a[i2] !== b[i2]) {
          return false;
        }
      }
      return true;
    }
    if (a.constructor === RegExp) {
      return a.source === b.source && a.flags === b.flags;
    }
    if (a.valueOf !== Object.prototype.valueOf) {
      return a.valueOf() === b.valueOf();
    }
    if (a.toString !== Object.prototype.toString) {
      return a.toString() === b.toString();
    }
    const keys = Object.keys(a).filter((key) => a[key] !== void 0);
    length2 = keys.length;
    if (length2 !== Object.keys(b).filter((key) => b[key] !== void 0).length) {
      return false;
    }
    for (i2 = length2; i2-- !== 0; ) {
      const key = keys[i2];
      if (isDeepEqual(a[key], b[key]) !== true) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}
function isObject$1(v) {
  return v !== null && typeof v === "object" && Array.isArray(v) !== true;
}
const autoInstalledPlugins = [
  Platform,
  Body,
  Plugin$2,
  Screen,
  History,
  Plugin$1,
  Plugin
];
function installPlugins(pluginOpts, pluginList) {
  pluginList.forEach((Plugin2) => {
    Plugin2.install(pluginOpts);
    Plugin2.__installed = true;
  });
}
function prepareApp(app, uiOpts, pluginOpts) {
  app.config.globalProperties.$q = pluginOpts.$q;
  app.provide(quasarKey, pluginOpts.$q);
  installPlugins(pluginOpts, autoInstalledPlugins);
  uiOpts.components !== void 0 && Object.values(uiOpts.components).forEach((c) => {
    if (isObject$1(c) === true && c.name !== void 0) {
      app.component(c.name, c);
    }
  });
  uiOpts.directives !== void 0 && Object.values(uiOpts.directives).forEach((d) => {
    if (isObject$1(d) === true && d.name !== void 0) {
      app.directive(d.name, d);
    }
  });
  uiOpts.plugins !== void 0 && installPlugins(
    pluginOpts,
    Object.values(uiOpts.plugins).filter(
      (p2) => typeof p2.install === "function" && autoInstalledPlugins.includes(p2) === false
    )
  );
  if (isRuntimeSsrPreHydration.value === true) {
    pluginOpts.$q.onSSRHydrated = () => {
      pluginOpts.onSSRHydrated.forEach((fn) => {
        fn();
      });
      pluginOpts.$q.onSSRHydrated = () => {
      };
    };
  }
}
const installQuasar = function(parentApp, opts = {}) {
  const $q = { version: "2.12.0" };
  if (globalConfigIsFrozen === false) {
    if (opts.config !== void 0) {
      Object.assign(globalConfig, opts.config);
    }
    $q.config = { ...globalConfig };
    freezeGlobalConfig();
  } else {
    $q.config = opts.config || {};
  }
  prepareApp(parentApp, opts, {
    parentApp,
    $q,
    lang: opts.lang,
    iconSet: opts.iconSet,
    onSSRHydrated: []
  });
};
const Quasar = {
  version: "2.12.0",
  install: installQuasar,
  lang: Plugin$1,
  iconSet: Plugin
};
const robotoFontLatinExt = "";
const materialIcons = "";
const index = "";
const useSizeDefaults = {
  xs: 18,
  sm: 24,
  md: 32,
  lg: 38,
  xl: 46
};
const useSizeProps = {
  size: String
};
function useSize(props, sizes = useSizeDefaults) {
  return computed(() => props.size !== void 0 ? { fontSize: props.size in sizes ? `${sizes[props.size]}px` : props.size } : null);
}
const createComponent = (raw) => markRaw(defineComponent(raw));
const createDirective = (raw) => markRaw(raw);
function hSlot(slot, otherwise) {
  return slot !== void 0 ? slot() || otherwise : otherwise;
}
function hUniqueSlot(slot, otherwise) {
  if (slot !== void 0) {
    const vnode = slot();
    if (vnode !== void 0 && vnode !== null) {
      return vnode.slice();
    }
  }
  return otherwise;
}
function hMergeSlot(slot, source) {
  return slot !== void 0 ? source.concat(slot()) : source;
}
function hMergeSlotSafely(slot, source) {
  if (slot === void 0) {
    return source;
  }
  return source !== void 0 ? source.concat(slot()) : slot();
}
function hDir(tag, data, children, key, condition, getDirsFn) {
  data.key = key + condition;
  const vnode = h(tag, data, children);
  return condition === true ? withDirectives(vnode, getDirsFn()) : vnode;
}
const defaultViewBox = "0 0 24 24";
const sameFn = (i2) => i2;
const ionFn = (i2) => `ionicons ${i2}`;
const libMap$1 = {
  "mdi-": (i2) => `mdi ${i2}`,
  "icon-": sameFn,
  // fontawesome equiv
  "bt-": (i2) => `bt ${i2}`,
  "eva-": (i2) => `eva ${i2}`,
  "ion-md": ionFn,
  "ion-ios": ionFn,
  "ion-logo": ionFn,
  "iconfont ": sameFn,
  "ti-": (i2) => `themify-icon ${i2}`,
  "bi-": (i2) => `bootstrap-icons ${i2}`
};
const matMap = {
  o_: "-outlined",
  r_: "-round",
  s_: "-sharp"
};
const symMap = {
  sym_o_: "-outlined",
  sym_r_: "-rounded",
  sym_s_: "-sharp"
};
const libRE = new RegExp("^(" + Object.keys(libMap$1).join("|") + ")");
const matRE = new RegExp("^(" + Object.keys(matMap).join("|") + ")");
const symRE = new RegExp("^(" + Object.keys(symMap).join("|") + ")");
const mRE = /^[Mm]\s?[-+]?\.?\d/;
const imgRE = /^img:/;
const svgUseRE = /^svguse:/;
const ionRE = /^ion-/;
const faRE = /^(fa-(sharp|solid|regular|light|brands|duotone|thin)|[lf]a[srlbdk]?) /;
const QIcon = createComponent({
  name: "QIcon",
  props: {
    ...useSizeProps,
    tag: {
      type: String,
      default: "i"
    },
    name: String,
    color: String,
    left: Boolean,
    right: Boolean
  },
  setup(props, { slots }) {
    const { proxy: { $q } } = getCurrentInstance();
    const sizeStyle = useSize(props);
    const classes = computed(
      () => "q-icon" + (props.left === true ? " on-left" : "") + (props.right === true ? " on-right" : "") + (props.color !== void 0 ? ` text-${props.color}` : "")
    );
    const type2 = computed(() => {
      let cls;
      let icon = props.name;
      if (icon === "none" || !icon) {
        return { none: true };
      }
      if ($q.iconMapFn !== null) {
        const res = $q.iconMapFn(icon);
        if (res !== void 0) {
          if (res.icon !== void 0) {
            icon = res.icon;
            if (icon === "none" || !icon) {
              return { none: true };
            }
          } else {
            return {
              cls: res.cls,
              content: res.content !== void 0 ? res.content : " "
            };
          }
        }
      }
      if (mRE.test(icon) === true) {
        const [def2, viewBox = defaultViewBox] = icon.split("|");
        return {
          svg: true,
          viewBox,
          nodes: def2.split("&&").map((path) => {
            const [d, style, transform2] = path.split("@@");
            return h("path", { style, d, transform: transform2 });
          })
        };
      }
      if (imgRE.test(icon) === true) {
        return {
          img: true,
          src: icon.substring(4)
        };
      }
      if (svgUseRE.test(icon) === true) {
        const [def2, viewBox = defaultViewBox] = icon.split("|");
        return {
          svguse: true,
          src: def2.substring(7),
          viewBox
        };
      }
      let content = " ";
      const matches2 = icon.match(libRE);
      if (matches2 !== null) {
        cls = libMap$1[matches2[1]](icon);
      } else if (faRE.test(icon) === true) {
        cls = icon;
      } else if (ionRE.test(icon) === true) {
        cls = `ionicons ion-${$q.platform.is.ios === true ? "ios" : "md"}${icon.substring(3)}`;
      } else if (symRE.test(icon) === true) {
        cls = "notranslate material-symbols";
        const matches3 = icon.match(symRE);
        if (matches3 !== null) {
          icon = icon.substring(6);
          cls += symMap[matches3[1]];
        }
        content = icon;
      } else {
        cls = "notranslate material-icons";
        const matches3 = icon.match(matRE);
        if (matches3 !== null) {
          icon = icon.substring(2);
          cls += matMap[matches3[1]];
        }
        content = icon;
      }
      return {
        cls,
        content
      };
    });
    return () => {
      const data = {
        class: classes.value,
        style: sizeStyle.value,
        "aria-hidden": "true",
        role: "presentation"
      };
      if (type2.value.none === true) {
        return h(props.tag, data, hSlot(slots.default));
      }
      if (type2.value.img === true) {
        return h("span", data, hMergeSlot(slots.default, [
          h("img", { src: type2.value.src })
        ]));
      }
      if (type2.value.svg === true) {
        return h("span", data, hMergeSlot(slots.default, [
          h("svg", {
            viewBox: type2.value.viewBox || "0 0 24 24"
          }, type2.value.nodes)
        ]));
      }
      if (type2.value.svguse === true) {
        return h("span", data, hMergeSlot(slots.default, [
          h("svg", {
            viewBox: type2.value.viewBox
          }, [
            h("use", { "xlink:href": type2.value.src })
          ])
        ]));
      }
      if (type2.value.cls !== void 0) {
        data.class += " " + type2.value.cls;
      }
      return h(props.tag, data, hMergeSlot(slots.default, [
        type2.value.content
      ]));
    };
  }
});
const useSpinnerProps = {
  size: {
    type: [Number, String],
    default: "1em"
  },
  color: String
};
function useSpinner(props) {
  return {
    cSize: computed(() => props.size in useSizeDefaults ? `${useSizeDefaults[props.size]}px` : props.size),
    classes: computed(
      () => "q-spinner" + (props.color ? ` text-${props.color}` : "")
    )
  };
}
const QSpinner = createComponent({
  name: "QSpinner",
  props: {
    ...useSpinnerProps,
    thickness: {
      type: Number,
      default: 5
    }
  },
  setup(props) {
    const { cSize, classes } = useSpinner(props);
    return () => h("svg", {
      class: classes.value + " q-spinner-mat",
      width: cSize.value,
      height: cSize.value,
      viewBox: "25 25 50 50"
    }, [
      h("circle", {
        class: "path",
        cx: "50",
        cy: "50",
        r: "20",
        fill: "none",
        stroke: "currentColor",
        "stroke-width": props.thickness,
        "stroke-miterlimit": "10"
      })
    ]);
  }
});
function css(element, css2) {
  const style = element.style;
  for (const prop in css2) {
    style[prop] = css2[prop];
  }
}
function getElement(el) {
  if (el === void 0 || el === null) {
    return void 0;
  }
  if (typeof el === "string") {
    try {
      return document.querySelector(el) || void 0;
    } catch (err) {
      return void 0;
    }
  }
  const target2 = unref(el);
  if (target2) {
    return target2.$el || target2;
  }
}
function childHasFocus(el, focusedEl) {
  if (el === void 0 || el === null || el.contains(focusedEl) === true) {
    return true;
  }
  for (let next2 = el.nextElementSibling; next2 !== null; next2 = next2.nextElementSibling) {
    if (next2.contains(focusedEl)) {
      return true;
    }
  }
  return false;
}
function throttle(fn, limit = 250) {
  let wait = false, result;
  return function() {
    if (wait === false) {
      wait = true;
      setTimeout(() => {
        wait = false;
      }, limit);
      result = fn.apply(this, arguments);
    }
    return result;
  };
}
function showRipple(evt, el, ctx, forceCenter) {
  ctx.modifiers.stop === true && stop(evt);
  const color = ctx.modifiers.color;
  let center = ctx.modifiers.center;
  center = center === true || forceCenter === true;
  const node = document.createElement("span"), innerNode = document.createElement("span"), pos = position(evt), { left, top, width, height } = el.getBoundingClientRect(), diameter = Math.sqrt(width * width + height * height), radius = diameter / 2, centerX = `${(width - diameter) / 2}px`, x = center ? centerX : `${pos.left - left - radius}px`, centerY = `${(height - diameter) / 2}px`, y = center ? centerY : `${pos.top - top - radius}px`;
  innerNode.className = "q-ripple__inner";
  css(innerNode, {
    height: `${diameter}px`,
    width: `${diameter}px`,
    transform: `translate3d(${x},${y},0) scale3d(.2,.2,1)`,
    opacity: 0
  });
  node.className = `q-ripple${color ? " text-" + color : ""}`;
  node.setAttribute("dir", "ltr");
  node.appendChild(innerNode);
  el.appendChild(node);
  const abort = () => {
    node.remove();
    clearTimeout(timer);
  };
  ctx.abort.push(abort);
  let timer = setTimeout(() => {
    innerNode.classList.add("q-ripple__inner--enter");
    innerNode.style.transform = `translate3d(${centerX},${centerY},0) scale3d(1,1,1)`;
    innerNode.style.opacity = 0.2;
    timer = setTimeout(() => {
      innerNode.classList.remove("q-ripple__inner--enter");
      innerNode.classList.add("q-ripple__inner--leave");
      innerNode.style.opacity = 0;
      timer = setTimeout(() => {
        node.remove();
        ctx.abort.splice(ctx.abort.indexOf(abort), 1);
      }, 275);
    }, 250);
  }, 50);
}
function updateModifiers(ctx, { modifiers, value: value2, arg }) {
  const cfg = Object.assign({}, ctx.cfg.ripple, modifiers, value2);
  ctx.modifiers = {
    early: cfg.early === true,
    stop: cfg.stop === true,
    center: cfg.center === true,
    color: cfg.color || arg,
    keyCodes: [].concat(cfg.keyCodes || 13)
  };
}
const Ripple = createDirective(
  {
    name: "ripple",
    beforeMount(el, binding) {
      const cfg = binding.instance.$.appContext.config.globalProperties.$q.config || {};
      if (cfg.ripple === false) {
        return;
      }
      const ctx = {
        cfg,
        enabled: binding.value !== false,
        modifiers: {},
        abort: [],
        start(evt) {
          if (ctx.enabled === true && evt.qSkipRipple !== true && evt.type === (ctx.modifiers.early === true ? "pointerdown" : "click")) {
            showRipple(evt, el, ctx, evt.qKeyEvent === true);
          }
        },
        keystart: throttle((evt) => {
          if (ctx.enabled === true && evt.qSkipRipple !== true && isKeyCode(evt, ctx.modifiers.keyCodes) === true && evt.type === `key${ctx.modifiers.early === true ? "down" : "up"}`) {
            showRipple(evt, el, ctx, true);
          }
        }, 300)
      };
      updateModifiers(ctx, binding);
      el.__qripple = ctx;
      addEvt(ctx, "main", [
        [el, "pointerdown", "start", "passive"],
        [el, "click", "start", "passive"],
        [el, "keydown", "keystart", "passive"],
        [el, "keyup", "keystart", "passive"]
      ]);
    },
    updated(el, binding) {
      if (binding.oldValue !== binding.value) {
        const ctx = el.__qripple;
        if (ctx !== void 0) {
          ctx.enabled = binding.value !== false;
          if (ctx.enabled === true && Object(binding.value) === binding.value) {
            updateModifiers(ctx, binding);
          }
        }
      }
    },
    beforeUnmount(el) {
      const ctx = el.__qripple;
      if (ctx !== void 0) {
        ctx.abort.forEach((fn) => {
          fn();
        });
        cleanEvt(ctx, "main");
        delete el._qripple;
      }
    }
  }
);
const alignMap = {
  left: "start",
  center: "center",
  right: "end",
  between: "between",
  around: "around",
  evenly: "evenly",
  stretch: "stretch"
};
const alignValues = Object.keys(alignMap);
const useAlignProps = {
  align: {
    type: String,
    validator: (v) => alignValues.includes(v)
  }
};
function useAlign(props) {
  return computed(() => {
    const align = props.align === void 0 ? props.vertical === true ? "stretch" : "left" : props.align;
    return `${props.vertical === true ? "items" : "justify"}-${alignMap[align]}`;
  });
}
function getParentProxy(proxy) {
  if (Object(proxy.$parent) === proxy.$parent) {
    return proxy.$parent;
  }
  let { parent } = proxy.$;
  while (Object(parent) === parent) {
    if (Object(parent.proxy) === parent.proxy) {
      return parent.proxy;
    }
    parent = parent.parent;
  }
}
function vmHasRouter(vm) {
  return vm.appContext.config.globalProperties.$router !== void 0;
}
function vmIsDestroyed(vm) {
  return vm.isUnmounted === true || vm.isDeactivated === true;
}
function getOriginalPath(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
function isSameRouteRecord(a, b) {
  return (a.aliasOf || a) === (b.aliasOf || b);
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key], outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue) {
        return false;
      }
    } else if (Array.isArray(outerValue) === false || outerValue.length !== innerValue.length || innerValue.some((value2, i2) => value2 !== outerValue[i2])) {
      return false;
    }
  }
  return true;
}
function isEquivalentArray(a, b) {
  return Array.isArray(b) === true ? a.length === b.length && a.every((value2, i2) => value2 === b[i2]) : a.length === 1 && a[0] === b;
}
function isSameRouteLocationParamsValue(a, b) {
  return Array.isArray(a) === true ? isEquivalentArray(a, b) : Array.isArray(b) === true ? isEquivalentArray(b, a) : a === b;
}
function isSameRouteLocationParams(a, b) {
  if (Object.keys(a).length !== Object.keys(b).length) {
    return false;
  }
  for (const key in a) {
    if (isSameRouteLocationParamsValue(a[key], b[key]) === false) {
      return false;
    }
  }
  return true;
}
const useRouterLinkProps = {
  // router-link
  to: [String, Object],
  replace: Boolean,
  exact: Boolean,
  activeClass: {
    type: String,
    default: "q-router-link--active"
  },
  exactActiveClass: {
    type: String,
    default: "q-router-link--exact-active"
  },
  // regular <a> link
  href: String,
  target: String,
  // state
  disable: Boolean
};
function useRouterLink({ fallbackTag, useDisableForRouterLinkProps = true } = {}) {
  const vm = getCurrentInstance();
  const { props, proxy, emit: emit2 } = vm;
  const hasRouter = vmHasRouter(vm);
  const hasHrefLink = computed(() => props.disable !== true && props.href !== void 0);
  const hasRouterLinkProps = useDisableForRouterLinkProps === true ? computed(
    () => hasRouter === true && props.disable !== true && hasHrefLink.value !== true && props.to !== void 0 && props.to !== null && props.to !== ""
  ) : computed(
    () => hasRouter === true && hasHrefLink.value !== true && props.to !== void 0 && props.to !== null && props.to !== ""
  );
  const resolvedLink = computed(() => hasRouterLinkProps.value === true ? getLink(props.to) : null);
  const hasRouterLink = computed(() => resolvedLink.value !== null);
  const hasLink = computed(() => hasHrefLink.value === true || hasRouterLink.value === true);
  const linkTag = computed(() => props.type === "a" || hasLink.value === true ? "a" : props.tag || fallbackTag || "div");
  const linkAttrs = computed(() => hasHrefLink.value === true ? {
    href: props.href,
    target: props.target
  } : hasRouterLink.value === true ? {
    href: resolvedLink.value.href,
    target: props.target
  } : {});
  const linkActiveIndex = computed(() => {
    if (hasRouterLink.value === false) {
      return -1;
    }
    const { matched } = resolvedLink.value, { length: length2 } = matched, routeMatched = matched[length2 - 1];
    if (routeMatched === void 0) {
      return -1;
    }
    const currentMatched = proxy.$route.matched;
    if (currentMatched.length === 0) {
      return -1;
    }
    const index2 = currentMatched.findIndex(
      isSameRouteRecord.bind(null, routeMatched)
    );
    if (index2 > -1) {
      return index2;
    }
    const parentRecordPath = getOriginalPath(matched[length2 - 2]);
    return (
      // we are dealing with nested routes
      length2 > 1 && getOriginalPath(routeMatched) === parentRecordPath && currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(
        isSameRouteRecord.bind(null, matched[length2 - 2])
      ) : index2
    );
  });
  const linkIsActive = computed(
    () => hasRouterLink.value === true && linkActiveIndex.value !== -1 && includesParams(proxy.$route.params, resolvedLink.value.params)
  );
  const linkIsExactActive = computed(
    () => linkIsActive.value === true && linkActiveIndex.value === proxy.$route.matched.length - 1 && isSameRouteLocationParams(proxy.$route.params, resolvedLink.value.params)
  );
  const linkClass = computed(() => hasRouterLink.value === true ? linkIsExactActive.value === true ? ` ${props.exactActiveClass} ${props.activeClass}` : props.exact === true ? "" : linkIsActive.value === true ? ` ${props.activeClass}` : "" : "");
  function getLink(to) {
    try {
      return proxy.$router.resolve(to);
    } catch (_) {
    }
    return null;
  }
  function navigateToRouterLink(e, { returnRouterError, to = props.to, replace = props.replace } = {}) {
    if (props.disable === true) {
      e.preventDefault();
      return Promise.resolve(false);
    }
    if (
      // don't redirect with control keys;
      // should match RouterLink from Vue Router
      e.metaKey || e.altKey || e.ctrlKey || e.shiftKey || e.button !== void 0 && e.button !== 0 || props.target === "_blank"
    ) {
      return Promise.resolve(false);
    }
    e.preventDefault();
    const promise = proxy.$router[replace === true ? "replace" : "push"](to);
    return returnRouterError === true ? promise : promise.then(() => {
    }).catch(() => {
    });
  }
  function navigateOnClick(e) {
    if (hasRouterLink.value === true) {
      const go = (opts) => navigateToRouterLink(e, opts);
      emit2("click", e, go);
      e.defaultPrevented !== true && go();
    } else {
      emit2("click", e);
    }
  }
  return {
    hasRouterLink,
    hasHrefLink,
    hasLink,
    linkTag,
    resolvedLink,
    linkIsActive,
    linkIsExactActive,
    linkClass,
    linkAttrs,
    getLink,
    navigateToRouterLink,
    navigateOnClick
  };
}
const btnPadding = {
  none: 0,
  xs: 4,
  sm: 8,
  md: 16,
  lg: 24,
  xl: 32
};
const defaultSizes$1 = {
  xs: 8,
  sm: 10,
  md: 14,
  lg: 20,
  xl: 24
};
const formTypes = ["button", "submit", "reset"];
const mediaTypeRE = /[^\s]\/[^\s]/;
const btnDesignOptions = ["flat", "outline", "push", "unelevated"];
const getBtnDesign = (props, defaultValue) => {
  if (props.flat === true)
    return "flat";
  if (props.outline === true)
    return "outline";
  if (props.push === true)
    return "push";
  if (props.unelevated === true)
    return "unelevated";
  return defaultValue;
};
const useBtnProps = {
  ...useSizeProps,
  ...useRouterLinkProps,
  type: {
    type: String,
    default: "button"
  },
  label: [Number, String],
  icon: String,
  iconRight: String,
  ...btnDesignOptions.reduce(
    (acc, val) => (acc[val] = Boolean) && acc,
    {}
  ),
  square: Boolean,
  round: Boolean,
  rounded: Boolean,
  glossy: Boolean,
  size: String,
  fab: Boolean,
  fabMini: Boolean,
  padding: String,
  color: String,
  textColor: String,
  noCaps: Boolean,
  noWrap: Boolean,
  dense: Boolean,
  tabindex: [Number, String],
  ripple: {
    type: [Boolean, Object],
    default: true
  },
  align: {
    ...useAlignProps.align,
    default: "center"
  },
  stack: Boolean,
  stretch: Boolean,
  loading: {
    type: Boolean,
    default: null
  },
  disable: Boolean
};
function useBtn(props) {
  const sizeStyle = useSize(props, defaultSizes$1);
  const alignClass = useAlign(props);
  const { hasRouterLink, hasLink, linkTag, linkAttrs, navigateOnClick } = useRouterLink({
    fallbackTag: "button"
  });
  const style = computed(() => {
    const obj = props.fab === false && props.fabMini === false ? sizeStyle.value : {};
    return props.padding !== void 0 ? Object.assign({}, obj, {
      padding: props.padding.split(/\s+/).map((v) => v in btnPadding ? btnPadding[v] + "px" : v).join(" "),
      minWidth: "0",
      minHeight: "0"
    }) : obj;
  });
  const isRounded = computed(
    () => props.rounded === true || props.fab === true || props.fabMini === true
  );
  const isActionable = computed(
    () => props.disable !== true && props.loading !== true
  );
  const tabIndex = computed(() => isActionable.value === true ? props.tabindex || 0 : -1);
  const design = computed(() => getBtnDesign(props, "standard"));
  const attributes = computed(() => {
    const acc = { tabindex: tabIndex.value };
    if (hasLink.value === true) {
      Object.assign(acc, linkAttrs.value);
    } else if (formTypes.includes(props.type) === true) {
      acc.type = props.type;
    }
    if (linkTag.value === "a") {
      if (props.disable === true) {
        acc["aria-disabled"] = "true";
      } else if (acc.href === void 0) {
        acc.role = "button";
      }
      if (hasRouterLink.value !== true && mediaTypeRE.test(props.type) === true) {
        acc.type = props.type;
      }
    } else if (props.disable === true) {
      acc.disabled = "";
      acc["aria-disabled"] = "true";
    }
    if (props.loading === true && props.percentage !== void 0) {
      Object.assign(acc, {
        role: "progressbar",
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        "aria-valuenow": props.percentage
      });
    }
    return acc;
  });
  const classes = computed(() => {
    let colors;
    if (props.color !== void 0) {
      if (props.flat === true || props.outline === true) {
        colors = `text-${props.textColor || props.color}`;
      } else {
        colors = `bg-${props.color} text-${props.textColor || "white"}`;
      }
    } else if (props.textColor) {
      colors = `text-${props.textColor}`;
    }
    const shape = props.round === true ? "round" : `rectangle${isRounded.value === true ? " q-btn--rounded" : props.square === true ? " q-btn--square" : ""}`;
    return `q-btn--${design.value} q-btn--${shape}` + (colors !== void 0 ? " " + colors : "") + (isActionable.value === true ? " q-btn--actionable q-focusable q-hoverable" : props.disable === true ? " disabled" : "") + (props.fab === true ? " q-btn--fab" : props.fabMini === true ? " q-btn--fab-mini" : "") + (props.noCaps === true ? " q-btn--no-uppercase" : "") + (props.dense === true ? " q-btn--dense" : "") + (props.stretch === true ? " no-border-radius self-stretch" : "") + (props.glossy === true ? " glossy" : "") + (props.square ? " q-btn--square" : "");
  });
  const innerClasses = computed(
    () => alignClass.value + (props.stack === true ? " column" : " row") + (props.noWrap === true ? " no-wrap text-no-wrap" : "") + (props.loading === true ? " q-btn__content--hidden" : "")
  );
  return {
    classes,
    style,
    innerClasses,
    attributes,
    hasLink,
    linkTag,
    navigateOnClick,
    isActionable
  };
}
const { passiveCapture } = listenOpts;
let touchTarget = null, keyboardTarget = null, mouseTarget = null;
const QBtn = createComponent({
  name: "QBtn",
  props: {
    ...useBtnProps,
    percentage: Number,
    darkPercentage: Boolean,
    onTouchstart: [Function, Array]
  },
  emits: ["click", "keydown", "mousedown", "keyup"],
  setup(props, { slots, emit: emit2 }) {
    const { proxy } = getCurrentInstance();
    const {
      classes,
      style,
      innerClasses,
      attributes,
      hasLink,
      linkTag,
      navigateOnClick,
      isActionable
    } = useBtn(props);
    const rootRef = ref(null);
    const blurTargetRef = ref(null);
    let localTouchTargetEl = null, avoidMouseRipple, mouseTimer = null;
    const hasLabel = computed(
      () => props.label !== void 0 && props.label !== null && props.label !== ""
    );
    const ripple = computed(() => props.disable === true || props.ripple === false ? false : {
      keyCodes: hasLink.value === true ? [13, 32] : [13],
      ...props.ripple === true ? {} : props.ripple
    });
    const rippleProps = computed(() => ({ center: props.round }));
    const percentageStyle = computed(() => {
      const val = Math.max(0, Math.min(100, props.percentage));
      return val > 0 ? { transition: "transform 0.6s", transform: `translateX(${val - 100}%)` } : {};
    });
    const onEvents = computed(() => {
      if (props.loading === true) {
        return {
          onMousedown: onLoadingEvt,
          onTouchstart: onLoadingEvt,
          onClick: onLoadingEvt,
          onKeydown: onLoadingEvt,
          onKeyup: onLoadingEvt
        };
      }
      if (isActionable.value === true) {
        const acc = {
          onClick,
          onKeydown: onKeydown2,
          onMousedown
        };
        if (proxy.$q.platform.has.touch === true) {
          const suffix = props.onTouchstart !== void 0 ? "" : "Passive";
          acc[`onTouchstart${suffix}`] = onTouchstart;
        }
        return acc;
      }
      return {
        // needed; especially for disabled <a> tags
        onClick: stopAndPrevent
      };
    });
    const nodeProps = computed(() => ({
      ref: rootRef,
      class: "q-btn q-btn-item non-selectable no-outline " + classes.value,
      style: style.value,
      ...attributes.value,
      ...onEvents.value
    }));
    function onClick(e) {
      if (rootRef.value === null) {
        return;
      }
      if (e !== void 0) {
        if (e.defaultPrevented === true) {
          return;
        }
        const el = document.activeElement;
        if (props.type === "submit" && el !== document.body && rootRef.value.contains(el) === false && el.contains(rootRef.value) === false) {
          rootRef.value.focus();
          const onClickCleanup = () => {
            document.removeEventListener("keydown", stopAndPrevent, true);
            document.removeEventListener("keyup", onClickCleanup, passiveCapture);
            rootRef.value !== null && rootRef.value.removeEventListener("blur", onClickCleanup, passiveCapture);
          };
          document.addEventListener("keydown", stopAndPrevent, true);
          document.addEventListener("keyup", onClickCleanup, passiveCapture);
          rootRef.value.addEventListener("blur", onClickCleanup, passiveCapture);
        }
      }
      navigateOnClick(e);
    }
    function onKeydown2(e) {
      if (rootRef.value === null) {
        return;
      }
      emit2("keydown", e);
      if (isKeyCode(e, [13, 32]) === true && keyboardTarget !== rootRef.value) {
        keyboardTarget !== null && cleanup();
        if (e.defaultPrevented !== true) {
          rootRef.value.focus();
          keyboardTarget = rootRef.value;
          rootRef.value.classList.add("q-btn--active");
          document.addEventListener("keyup", onPressEnd, true);
          rootRef.value.addEventListener("blur", onPressEnd, passiveCapture);
        }
        stopAndPrevent(e);
      }
    }
    function onTouchstart(e) {
      if (rootRef.value === null) {
        return;
      }
      emit2("touchstart", e);
      if (e.defaultPrevented === true) {
        return;
      }
      if (touchTarget !== rootRef.value) {
        touchTarget !== null && cleanup();
        touchTarget = rootRef.value;
        localTouchTargetEl = e.target;
        localTouchTargetEl.addEventListener("touchcancel", onPressEnd, passiveCapture);
        localTouchTargetEl.addEventListener("touchend", onPressEnd, passiveCapture);
      }
      avoidMouseRipple = true;
      mouseTimer !== null && clearTimeout(mouseTimer);
      mouseTimer = setTimeout(() => {
        mouseTimer = null;
        avoidMouseRipple = false;
      }, 200);
    }
    function onMousedown(e) {
      if (rootRef.value === null) {
        return;
      }
      e.qSkipRipple = avoidMouseRipple === true;
      emit2("mousedown", e);
      if (e.defaultPrevented !== true && mouseTarget !== rootRef.value) {
        mouseTarget !== null && cleanup();
        mouseTarget = rootRef.value;
        rootRef.value.classList.add("q-btn--active");
        document.addEventListener("mouseup", onPressEnd, passiveCapture);
      }
    }
    function onPressEnd(e) {
      if (rootRef.value === null) {
        return;
      }
      if (e !== void 0 && e.type === "blur" && document.activeElement === rootRef.value) {
        return;
      }
      if (e !== void 0 && e.type === "keyup") {
        if (keyboardTarget === rootRef.value && isKeyCode(e, [13, 32]) === true) {
          const evt = new MouseEvent("click", e);
          evt.qKeyEvent = true;
          e.defaultPrevented === true && prevent(evt);
          e.cancelBubble === true && stop(evt);
          rootRef.value.dispatchEvent(evt);
          stopAndPrevent(e);
          e.qKeyEvent = true;
        }
        emit2("keyup", e);
      }
      cleanup();
    }
    function cleanup(destroying) {
      const blurTarget = blurTargetRef.value;
      if (destroying !== true && (touchTarget === rootRef.value || mouseTarget === rootRef.value) && blurTarget !== null && blurTarget !== document.activeElement) {
        blurTarget.setAttribute("tabindex", -1);
        blurTarget.focus();
      }
      if (touchTarget === rootRef.value) {
        if (localTouchTargetEl !== null) {
          localTouchTargetEl.removeEventListener("touchcancel", onPressEnd, passiveCapture);
          localTouchTargetEl.removeEventListener("touchend", onPressEnd, passiveCapture);
        }
        touchTarget = localTouchTargetEl = null;
      }
      if (mouseTarget === rootRef.value) {
        document.removeEventListener("mouseup", onPressEnd, passiveCapture);
        mouseTarget = null;
      }
      if (keyboardTarget === rootRef.value) {
        document.removeEventListener("keyup", onPressEnd, true);
        rootRef.value !== null && rootRef.value.removeEventListener("blur", onPressEnd, passiveCapture);
        keyboardTarget = null;
      }
      rootRef.value !== null && rootRef.value.classList.remove("q-btn--active");
    }
    function onLoadingEvt(evt) {
      stopAndPrevent(evt);
      evt.qSkipRipple = true;
    }
    onBeforeUnmount(() => {
      cleanup(true);
    });
    Object.assign(proxy, { click: onClick });
    return () => {
      let inner = [];
      props.icon !== void 0 && inner.push(
        h(QIcon, {
          name: props.icon,
          left: props.stack === false && hasLabel.value === true,
          role: "img",
          "aria-hidden": "true"
        })
      );
      hasLabel.value === true && inner.push(
        h("span", { class: "block" }, [props.label])
      );
      inner = hMergeSlot(slots.default, inner);
      if (props.iconRight !== void 0 && props.round === false) {
        inner.push(
          h(QIcon, {
            name: props.iconRight,
            right: props.stack === false && hasLabel.value === true,
            role: "img",
            "aria-hidden": "true"
          })
        );
      }
      const child = [
        h("span", {
          class: "q-focus-helper",
          ref: blurTargetRef
        })
      ];
      if (props.loading === true && props.percentage !== void 0) {
        child.push(
          h("span", {
            class: "q-btn__progress absolute-full overflow-hidden" + (props.darkPercentage === true ? " q-btn__progress--dark" : "")
          }, [
            h("span", {
              class: "q-btn__progress-indicator fit block",
              style: percentageStyle.value
            })
          ])
        );
      }
      child.push(
        h("span", {
          class: "q-btn__content text-center col items-center q-anchor--skip " + innerClasses.value
        }, inner)
      );
      props.loading !== null && child.push(
        h(Transition, {
          name: "q-transition--fade"
        }, () => props.loading === true ? [
          h("span", {
            key: "loading",
            class: "absolute-full flex flex-center"
          }, slots.loading !== void 0 ? slots.loading() : [h(QSpinner)])
        ] : null)
      );
      return withDirectives(
        h(
          linkTag.value,
          nodeProps.value,
          child
        ),
        [[
          Ripple,
          ripple.value,
          void 0,
          rippleProps.value
        ]]
      );
    };
  }
});
const useRatioProps = {
  ratio: [String, Number]
};
function useRatio(props, naturalRatio) {
  return computed(() => {
    const ratio = Number(
      props.ratio || (naturalRatio !== void 0 ? naturalRatio.value : void 0)
    );
    return isNaN(ratio) !== true && ratio > 0 ? { paddingBottom: `${100 / ratio}%` } : null;
  });
}
const defaultRatio = 16 / 9;
const QImg = createComponent({
  name: "QImg",
  props: {
    ...useRatioProps,
    src: String,
    srcset: String,
    sizes: String,
    alt: String,
    crossorigin: String,
    decoding: String,
    referrerpolicy: String,
    draggable: Boolean,
    loading: {
      type: String,
      default: "lazy"
    },
    fetchpriority: {
      type: String,
      default: "auto"
    },
    width: String,
    height: String,
    initialRatio: {
      type: [Number, String],
      default: defaultRatio
    },
    placeholderSrc: String,
    fit: {
      type: String,
      default: "cover"
    },
    position: {
      type: String,
      default: "50% 50%"
    },
    imgClass: String,
    imgStyle: Object,
    noSpinner: Boolean,
    noNativeMenu: Boolean,
    noTransition: Boolean,
    spinnerColor: String,
    spinnerSize: String
  },
  emits: ["load", "error"],
  setup(props, { slots, emit: emit2 }) {
    const naturalRatio = ref(props.initialRatio);
    const ratioStyle = useRatio(props, naturalRatio);
    let loadTimer = null, isDestroyed = false;
    const images = [
      ref(null),
      ref(getPlaceholderSrc())
    ];
    const position2 = ref(0);
    const isLoading = ref(false);
    const hasError = ref(false);
    const classes = computed(
      () => `q-img q-img--${props.noNativeMenu === true ? "no-" : ""}menu`
    );
    const style = computed(() => ({
      width: props.width,
      height: props.height
    }));
    const imgClass = computed(
      () => `q-img__image ${props.imgClass !== void 0 ? props.imgClass + " " : ""}q-img__image--with${props.noTransition === true ? "out" : ""}-transition`
    );
    const imgStyle = computed(() => ({
      ...props.imgStyle,
      objectFit: props.fit,
      objectPosition: props.position
    }));
    watch(() => getCurrentSrc(), addImage);
    function getCurrentSrc() {
      return props.src || props.srcset || props.sizes ? {
        src: props.src,
        srcset: props.srcset,
        sizes: props.sizes
      } : null;
    }
    function getPlaceholderSrc() {
      return props.placeholderSrc !== void 0 ? { src: props.placeholderSrc } : null;
    }
    function addImage(imgProps) {
      if (loadTimer !== null) {
        clearTimeout(loadTimer);
        loadTimer = null;
      }
      hasError.value = false;
      if (imgProps === null) {
        isLoading.value = false;
        images[position2.value ^ 1].value = getPlaceholderSrc();
      } else {
        isLoading.value = true;
      }
      images[position2.value].value = imgProps;
    }
    function onLoad({ target: target2 }) {
      if (isDestroyed === true) {
        return;
      }
      if (loadTimer !== null) {
        clearTimeout(loadTimer);
        loadTimer = null;
      }
      naturalRatio.value = target2.naturalHeight === 0 ? 0.5 : target2.naturalWidth / target2.naturalHeight;
      waitForCompleteness(target2, 1);
    }
    function waitForCompleteness(target2, count) {
      if (isDestroyed === true || count === 1e3) {
        return;
      }
      if (target2.complete === true) {
        onReady(target2);
      } else {
        loadTimer = setTimeout(() => {
          loadTimer = null;
          waitForCompleteness(target2, count + 1);
        }, 50);
      }
    }
    function onReady(img) {
      if (isDestroyed === true) {
        return;
      }
      position2.value = position2.value ^ 1;
      images[position2.value].value = null;
      isLoading.value = false;
      hasError.value = false;
      emit2("load", img.currentSrc || img.src);
    }
    function onError2(err) {
      if (loadTimer !== null) {
        clearTimeout(loadTimer);
        loadTimer = null;
      }
      isLoading.value = false;
      hasError.value = true;
      images[position2.value].value = null;
      images[position2.value ^ 1].value = getPlaceholderSrc();
      emit2("error", err);
    }
    function getImage(index2) {
      const img = images[index2].value;
      const data = {
        key: "img_" + index2,
        class: imgClass.value,
        style: imgStyle.value,
        crossorigin: props.crossorigin,
        decoding: props.decoding,
        referrerpolicy: props.referrerpolicy,
        height: props.height,
        width: props.width,
        loading: props.loading,
        fetchpriority: props.fetchpriority,
        "aria-hidden": "true",
        draggable: props.draggable,
        ...img
      };
      if (position2.value === index2) {
        data.class += " q-img__image--waiting";
        Object.assign(data, { onLoad, onError: onError2 });
      } else {
        data.class += " q-img__image--loaded";
      }
      return h(
        "div",
        { class: "q-img__container absolute-full", key: "img" + index2 },
        h("img", data)
      );
    }
    function getContent() {
      if (isLoading.value !== true) {
        return h("div", {
          key: "content",
          class: "q-img__content absolute-full q-anchor--skip"
        }, hSlot(slots[hasError.value === true ? "error" : "default"]));
      }
      return h("div", {
        key: "loading",
        class: "q-img__loading absolute-full flex flex-center"
      }, slots.loading !== void 0 ? slots.loading() : props.noSpinner === true ? void 0 : [
        h(QSpinner, {
          color: props.spinnerColor,
          size: props.spinnerSize
        })
      ]);
    }
    {
      {
        addImage(getCurrentSrc());
      }
      onBeforeUnmount(() => {
        isDestroyed = true;
        if (loadTimer !== null) {
          clearTimeout(loadTimer);
          loadTimer = null;
        }
      });
    }
    return () => {
      const content = [];
      if (ratioStyle.value !== null) {
        content.push(
          h("div", { key: "filler", style: ratioStyle.value })
        );
      }
      if (hasError.value !== true) {
        if (images[0].value !== null) {
          content.push(getImage(0));
        }
        if (images[1].value !== null) {
          content.push(getImage(1));
        }
      }
      content.push(
        h(Transition, { name: "q-transition--fade" }, getContent)
      );
      return h("div", {
        class: classes.value,
        style: style.value,
        role: "img",
        "aria-label": props.alt
      }, content);
    };
  }
});
const QAvatar = createComponent({
  name: "QAvatar",
  props: {
    ...useSizeProps,
    fontSize: String,
    color: String,
    textColor: String,
    icon: String,
    square: Boolean,
    rounded: Boolean
  },
  setup(props, { slots }) {
    const sizeStyle = useSize(props);
    const classes = computed(
      () => "q-avatar" + (props.color ? ` bg-${props.color}` : "") + (props.textColor ? ` text-${props.textColor} q-chip--colored` : "") + (props.square === true ? " q-avatar--square" : props.rounded === true ? " rounded-borders" : "")
    );
    const contentStyle = computed(() => props.fontSize ? { fontSize: props.fontSize } : null);
    return () => {
      const icon = props.icon !== void 0 ? [h(QIcon, { name: props.icon })] : void 0;
      return h("div", {
        class: classes.value,
        style: sizeStyle.value
      }, [
        h("div", {
          class: "q-avatar__content row flex-center overflow-hidden",
          style: contentStyle.value
        }, hMergeSlotSafely(slots.default, icon))
      ]);
    };
  }
});
const QToolbarTitle = createComponent({
  name: "QToolbarTitle",
  props: {
    shrink: Boolean
  },
  setup(props, { slots }) {
    const classes = computed(
      () => "q-toolbar__title ellipsis" + (props.shrink === true ? " col-shrink" : "")
    );
    return () => h("div", { class: classes.value }, hSlot(slots.default));
  }
});
const QToolbar = createComponent({
  name: "QToolbar",
  props: {
    inset: Boolean
  },
  setup(props, { slots }) {
    const classes = computed(
      () => "q-toolbar row no-wrap items-center" + (props.inset === true ? " q-toolbar--inset" : "")
    );
    return () => h("div", { class: classes.value, role: "toolbar" }, hSlot(slots.default));
  }
});
function useCanRender() {
  const canRender = ref(!isRuntimeSsrPreHydration.value);
  if (canRender.value === false) {
    onMounted(() => {
      canRender.value = true;
    });
  }
  return canRender;
}
const hasObserver = typeof ResizeObserver !== "undefined";
const resizeProps = hasObserver === true ? {} : {
  style: "display:block;position:absolute;top:0;left:0;right:0;bottom:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:-1;",
  url: "about:blank"
};
const QResizeObserver = createComponent({
  name: "QResizeObserver",
  props: {
    debounce: {
      type: [String, Number],
      default: 100
    }
  },
  emits: ["resize"],
  setup(props, { emit: emit2 }) {
    let timer = null, targetEl, size2 = { width: -1, height: -1 };
    function trigger2(immediately) {
      if (immediately === true || props.debounce === 0 || props.debounce === "0") {
        emitEvent();
      } else if (timer === null) {
        timer = setTimeout(emitEvent, props.debounce);
      }
    }
    function emitEvent() {
      if (timer !== null) {
        clearTimeout(timer);
        timer = null;
      }
      if (targetEl) {
        const { offsetWidth: width, offsetHeight: height } = targetEl;
        if (width !== size2.width || height !== size2.height) {
          size2 = { width, height };
          emit2("resize", size2);
        }
      }
    }
    const { proxy } = getCurrentInstance();
    if (hasObserver === true) {
      let observer;
      const init = (stop2) => {
        targetEl = proxy.$el.parentNode;
        if (targetEl) {
          observer = new ResizeObserver(trigger2);
          observer.observe(targetEl);
          emitEvent();
        } else if (stop2 !== true) {
          nextTick$1(() => {
            init(true);
          });
        }
      };
      onMounted(() => {
        init();
      });
      onBeforeUnmount(() => {
        timer !== null && clearTimeout(timer);
        if (observer !== void 0) {
          if (observer.disconnect !== void 0) {
            observer.disconnect();
          } else if (targetEl) {
            observer.unobserve(targetEl);
          }
        }
      });
      return noop;
    } else {
      let cleanup2 = function() {
        if (timer !== null) {
          clearTimeout(timer);
          timer = null;
        }
        if (curDocView !== void 0) {
          if (curDocView.removeEventListener !== void 0) {
            curDocView.removeEventListener("resize", trigger2, listenOpts.passive);
          }
          curDocView = void 0;
        }
      }, onObjLoad2 = function() {
        cleanup2();
        if (targetEl && targetEl.contentDocument) {
          curDocView = targetEl.contentDocument.defaultView;
          curDocView.addEventListener("resize", trigger2, listenOpts.passive);
          emitEvent();
        }
      };
      var cleanup = cleanup2, onObjLoad = onObjLoad2;
      const canRender = useCanRender();
      let curDocView;
      onMounted(() => {
        nextTick$1(() => {
          targetEl = proxy.$el;
          targetEl && onObjLoad2();
        });
      });
      onBeforeUnmount(cleanup2);
      proxy.trigger = trigger2;
      return () => {
        if (canRender.value === true) {
          return h("object", {
            style: resizeProps.style,
            tabindex: -1,
            // fix for Firefox
            type: "text/html",
            data: resizeProps.url,
            "aria-hidden": "true",
            onLoad: onObjLoad2
          });
        }
      };
    }
  }
});
const QHeader = createComponent({
  name: "QHeader",
  props: {
    modelValue: {
      type: Boolean,
      default: true
    },
    reveal: Boolean,
    revealOffset: {
      type: Number,
      default: 250
    },
    bordered: Boolean,
    elevated: Boolean,
    heightHint: {
      type: [String, Number],
      default: 50
    }
  },
  emits: ["reveal", "focusin"],
  setup(props, { slots, emit: emit2 }) {
    const { proxy: { $q } } = getCurrentInstance();
    const $layout = inject(layoutKey, emptyRenderFn);
    if ($layout === emptyRenderFn) {
      console.error("QHeader needs to be child of QLayout");
      return emptyRenderFn;
    }
    const size2 = ref(parseInt(props.heightHint, 10));
    const revealed = ref(true);
    const fixed = computed(
      () => props.reveal === true || $layout.view.value.indexOf("H") > -1 || $q.platform.is.ios && $layout.isContainer.value === true
    );
    const offset = computed(() => {
      if (props.modelValue !== true) {
        return 0;
      }
      if (fixed.value === true) {
        return revealed.value === true ? size2.value : 0;
      }
      const offset2 = size2.value - $layout.scroll.value.position;
      return offset2 > 0 ? offset2 : 0;
    });
    const hidden = computed(
      () => props.modelValue !== true || fixed.value === true && revealed.value !== true
    );
    const revealOnFocus = computed(
      () => props.modelValue === true && hidden.value === true && props.reveal === true
    );
    const classes = computed(
      () => "q-header q-layout__section--marginal " + (fixed.value === true ? "fixed" : "absolute") + "-top" + (props.bordered === true ? " q-header--bordered" : "") + (hidden.value === true ? " q-header--hidden" : "") + (props.modelValue !== true ? " q-layout--prevent-focus" : "")
    );
    const style = computed(() => {
      const view = $layout.rows.value.top, css2 = {};
      if (view[0] === "l" && $layout.left.space === true) {
        css2[$q.lang.rtl === true ? "right" : "left"] = `${$layout.left.size}px`;
      }
      if (view[2] === "r" && $layout.right.space === true) {
        css2[$q.lang.rtl === true ? "left" : "right"] = `${$layout.right.size}px`;
      }
      return css2;
    });
    function updateLayout(prop, val) {
      $layout.update("header", prop, val);
    }
    function updateLocal(prop, val) {
      if (prop.value !== val) {
        prop.value = val;
      }
    }
    function onResize({ height }) {
      updateLocal(size2, height);
      updateLayout("size", height);
    }
    function onFocusin(evt) {
      if (revealOnFocus.value === true) {
        updateLocal(revealed, true);
      }
      emit2("focusin", evt);
    }
    watch(() => props.modelValue, (val) => {
      updateLayout("space", val);
      updateLocal(revealed, true);
      $layout.animate();
    });
    watch(offset, (val) => {
      updateLayout("offset", val);
    });
    watch(() => props.reveal, (val) => {
      val === false && updateLocal(revealed, props.modelValue);
    });
    watch(revealed, (val) => {
      $layout.animate();
      emit2("reveal", val);
    });
    watch($layout.scroll, (scroll) => {
      props.reveal === true && updateLocal(
        revealed,
        scroll.direction === "up" || scroll.position <= props.revealOffset || scroll.position - scroll.inflectionPoint < 100
      );
    });
    const instance = {};
    $layout.instances.header = instance;
    props.modelValue === true && updateLayout("size", size2.value);
    updateLayout("space", props.modelValue);
    updateLayout("offset", offset.value);
    onBeforeUnmount(() => {
      if ($layout.instances.header === instance) {
        $layout.instances.header = void 0;
        updateLayout("size", 0);
        updateLayout("offset", 0);
        updateLayout("space", false);
      }
    });
    return () => {
      const child = hUniqueSlot(slots.default, []);
      props.elevated === true && child.push(
        h("div", {
          class: "q-layout__shadow absolute-full overflow-hidden no-pointer-events"
        })
      );
      child.push(
        h(QResizeObserver, {
          debounce: 0,
          onResize
        })
      );
      return h("header", {
        class: classes.value,
        style: style.value,
        onFocusin
      }, child);
    };
  }
});
const useDarkProps = {
  dark: {
    type: Boolean,
    default: null
  }
};
function useDark(props, $q) {
  return computed(() => props.dark === null ? $q.dark.isActive : props.dark);
}
function useFormChild({ validate, resetValidation, requiresQForm }) {
  const $form = inject(formKey, false);
  if ($form !== false) {
    const { props, proxy } = getCurrentInstance();
    Object.assign(proxy, { validate, resetValidation });
    watch(() => props.disable, (val) => {
      if (val === true) {
        typeof resetValidation === "function" && resetValidation();
        $form.unbindComponent(proxy);
      } else {
        $form.bindComponent(proxy);
      }
    });
    onMounted(() => {
      props.disable !== true && $form.bindComponent(proxy);
    });
    onBeforeUnmount(() => {
      props.disable !== true && $form.unbindComponent(proxy);
    });
  } else if (requiresQForm === true) {
    console.error("Parent QForm not found on useFormChild()!");
  }
}
const hex = /^#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/, hexa = /^#[0-9a-fA-F]{4}([0-9a-fA-F]{4})?$/, hexOrHexa = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/, rgb = /^rgb\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5])\)$/, rgba = /^rgba\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),(0|0\.[0-9]+[1-9]|0\.[1-9]+|1)\)$/;
const testPattern = {
  date: (v) => /^-?[\d]+\/[0-1]\d\/[0-3]\d$/.test(v),
  time: (v) => /^([0-1]?\d|2[0-3]):[0-5]\d$/.test(v),
  fulltime: (v) => /^([0-1]?\d|2[0-3]):[0-5]\d:[0-5]\d$/.test(v),
  timeOrFulltime: (v) => /^([0-1]?\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/.test(v),
  // -- RFC 5322 --
  // -- Added in v2.6.6 --
  // This is a basic helper validation.
  // For something more complex (like RFC 822) you should write and use your own rule.
  // We won't be accepting PRs to enhance the one below because of the reason above.
  // eslint-disable-next-line
  email: (v) => /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(v),
  hexColor: (v) => hex.test(v),
  hexaColor: (v) => hexa.test(v),
  hexOrHexaColor: (v) => hexOrHexa.test(v),
  rgbColor: (v) => rgb.test(v),
  rgbaColor: (v) => rgba.test(v),
  rgbOrRgbaColor: (v) => rgb.test(v) || rgba.test(v),
  hexOrRgbColor: (v) => hex.test(v) || rgb.test(v),
  hexaOrRgbaColor: (v) => hexa.test(v) || rgba.test(v),
  anyColor: (v) => hexOrHexa.test(v) || rgb.test(v) || rgba.test(v)
};
const lazyRulesValues = [true, false, "ondemand"];
const useValidateProps = {
  modelValue: {},
  error: {
    type: Boolean,
    default: null
  },
  errorMessage: String,
  noErrorIcon: Boolean,
  rules: Array,
  reactiveRules: Boolean,
  lazyRules: {
    type: [Boolean, String],
    validator: (v) => lazyRulesValues.includes(v)
  }
};
function useValidate(focused, innerLoading) {
  const { props, proxy } = getCurrentInstance();
  const innerError = ref(false);
  const innerErrorMessage = ref(null);
  const isDirtyModel = ref(null);
  useFormChild({ validate, resetValidation });
  let validateIndex = 0, unwatchRules;
  const hasRules = computed(
    () => props.rules !== void 0 && props.rules !== null && props.rules.length !== 0
  );
  const hasActiveRules = computed(
    () => props.disable !== true && hasRules.value === true
  );
  const hasError = computed(
    () => props.error === true || innerError.value === true
  );
  const errorMessage = computed(() => typeof props.errorMessage === "string" && props.errorMessage.length !== 0 ? props.errorMessage : innerErrorMessage.value);
  watch(() => props.modelValue, () => {
    validateIfNeeded();
  });
  watch(() => props.reactiveRules, (val) => {
    if (val === true) {
      if (unwatchRules === void 0) {
        unwatchRules = watch(() => props.rules, () => {
          validateIfNeeded(true);
        });
      }
    } else if (unwatchRules !== void 0) {
      unwatchRules();
      unwatchRules = void 0;
    }
  }, { immediate: true });
  watch(focused, (val) => {
    if (val === true) {
      if (isDirtyModel.value === null) {
        isDirtyModel.value = false;
      }
    } else if (isDirtyModel.value === false) {
      isDirtyModel.value = true;
      if (hasActiveRules.value === true && props.lazyRules !== "ondemand" && innerLoading.value === false) {
        debouncedValidate();
      }
    }
  });
  function resetValidation() {
    validateIndex++;
    innerLoading.value = false;
    isDirtyModel.value = null;
    innerError.value = false;
    innerErrorMessage.value = null;
    debouncedValidate.cancel();
  }
  function validate(val = props.modelValue) {
    if (hasActiveRules.value !== true) {
      return true;
    }
    const index2 = ++validateIndex;
    const setDirty = innerLoading.value !== true ? () => {
      isDirtyModel.value = true;
    } : () => {
    };
    const update2 = (err, msg) => {
      err === true && setDirty();
      innerError.value = err;
      innerErrorMessage.value = msg || null;
      innerLoading.value = false;
    };
    const promises = [];
    for (let i2 = 0; i2 < props.rules.length; i2++) {
      const rule = props.rules[i2];
      let res;
      if (typeof rule === "function") {
        res = rule(val, testPattern);
      } else if (typeof rule === "string" && testPattern[rule] !== void 0) {
        res = testPattern[rule](val);
      }
      if (res === false || typeof res === "string") {
        update2(true, res);
        return false;
      } else if (res !== true && res !== void 0) {
        promises.push(res);
      }
    }
    if (promises.length === 0) {
      update2(false);
      return true;
    }
    innerLoading.value = true;
    return Promise.all(promises).then(
      (res) => {
        if (res === void 0 || Array.isArray(res) === false || res.length === 0) {
          index2 === validateIndex && update2(false);
          return true;
        }
        const msg = res.find((r) => r === false || typeof r === "string");
        index2 === validateIndex && update2(msg !== void 0, msg);
        return msg === void 0;
      },
      (e) => {
        if (index2 === validateIndex) {
          console.error(e);
          update2(true);
        }
        return false;
      }
    );
  }
  function validateIfNeeded(changedRules) {
    if (hasActiveRules.value === true && props.lazyRules !== "ondemand" && (isDirtyModel.value === true || props.lazyRules !== true && changedRules !== true)) {
      debouncedValidate();
    }
  }
  const debouncedValidate = debounce(validate, 0);
  onBeforeUnmount(() => {
    unwatchRules !== void 0 && unwatchRules();
    debouncedValidate.cancel();
  });
  Object.assign(proxy, { resetValidation, validate });
  injectProp(proxy, "hasError", () => hasError.value);
  return {
    isDirtyModel,
    hasRules,
    hasError,
    errorMessage,
    validate,
    resetValidation
  };
}
const listenerRE = /^on[A-Z]/;
function useSplitAttrs(attrs, vnode) {
  const acc = {
    listeners: ref({}),
    attributes: ref({})
  };
  function update2() {
    const attributes = {};
    const listeners = {};
    for (const key in attrs) {
      if (key !== "class" && key !== "style" && listenerRE.test(key) === false) {
        attributes[key] = attrs[key];
      }
    }
    for (const key in vnode.props) {
      if (listenerRE.test(key) === true) {
        listeners[key] = vnode.props[key];
      }
    }
    acc.attributes.value = attributes;
    acc.listeners.value = listeners;
  }
  onBeforeUpdate(update2);
  update2();
  return acc;
}
let buf, bufIdx = 0;
const hexBytes = new Array(256);
for (let i2 = 0; i2 < 256; i2++) {
  hexBytes[i2] = (i2 + 256).toString(16).substring(1);
}
const randomBytes = (() => {
  const lib = typeof crypto !== "undefined" ? crypto : typeof window !== "undefined" ? window.crypto || window.msCrypto : void 0;
  if (lib !== void 0) {
    if (lib.randomBytes !== void 0) {
      return lib.randomBytes;
    }
    if (lib.getRandomValues !== void 0) {
      return (n) => {
        const bytes = new Uint8Array(n);
        lib.getRandomValues(bytes);
        return bytes;
      };
    }
  }
  return (n) => {
    const r = [];
    for (let i2 = n; i2 > 0; i2--) {
      r.push(Math.floor(Math.random() * 256));
    }
    return r;
  };
})();
const BUFFER_SIZE = 4096;
function uid$1() {
  if (buf === void 0 || bufIdx + 16 > BUFFER_SIZE) {
    bufIdx = 0;
    buf = randomBytes(BUFFER_SIZE);
  }
  const b = Array.prototype.slice.call(buf, bufIdx, bufIdx += 16);
  b[6] = b[6] & 15 | 64;
  b[8] = b[8] & 63 | 128;
  return hexBytes[b[0]] + hexBytes[b[1]] + hexBytes[b[2]] + hexBytes[b[3]] + "-" + hexBytes[b[4]] + hexBytes[b[5]] + "-" + hexBytes[b[6]] + hexBytes[b[7]] + "-" + hexBytes[b[8]] + hexBytes[b[9]] + "-" + hexBytes[b[10]] + hexBytes[b[11]] + hexBytes[b[12]] + hexBytes[b[13]] + hexBytes[b[14]] + hexBytes[b[15]];
}
let queue = [];
let waitFlags = [];
function clearFlag(flag) {
  waitFlags = waitFlags.filter((entry) => entry !== flag);
}
function addFocusWaitFlag(flag) {
  clearFlag(flag);
  waitFlags.push(flag);
}
function removeFocusWaitFlag(flag) {
  clearFlag(flag);
  if (waitFlags.length === 0 && queue.length !== 0) {
    queue[queue.length - 1]();
    queue = [];
  }
}
function addFocusFn(fn) {
  if (waitFlags.length === 0) {
    fn();
  } else {
    queue.push(fn);
  }
}
function removeFocusFn(fn) {
  queue = queue.filter((entry) => entry !== fn);
}
function getTargetUid(val) {
  return val === void 0 ? `f_${uid$1()}` : val;
}
function fieldValueIsFilled(val) {
  return val !== void 0 && val !== null && ("" + val).length !== 0;
}
const useFieldProps = {
  ...useDarkProps,
  ...useValidateProps,
  label: String,
  stackLabel: Boolean,
  hint: String,
  hideHint: Boolean,
  prefix: String,
  suffix: String,
  labelColor: String,
  color: String,
  bgColor: String,
  filled: Boolean,
  outlined: Boolean,
  borderless: Boolean,
  standout: [Boolean, String],
  square: Boolean,
  loading: Boolean,
  labelSlot: Boolean,
  bottomSlots: Boolean,
  hideBottomSpace: Boolean,
  rounded: Boolean,
  dense: Boolean,
  itemAligned: Boolean,
  counter: Boolean,
  clearable: Boolean,
  clearIcon: String,
  disable: Boolean,
  readonly: Boolean,
  autofocus: Boolean,
  for: String,
  maxlength: [Number, String]
};
const useFieldEmits = ["update:modelValue", "clear", "focus", "blur", "popupShow", "popupHide"];
function useFieldState() {
  const { props, attrs, proxy, vnode } = getCurrentInstance();
  const isDark = useDark(props, proxy.$q);
  return {
    isDark,
    editable: computed(
      () => props.disable !== true && props.readonly !== true
    ),
    innerLoading: ref(false),
    focused: ref(false),
    hasPopupOpen: false,
    splitAttrs: useSplitAttrs(attrs, vnode),
    targetUid: ref(getTargetUid(props.for)),
    rootRef: ref(null),
    targetRef: ref(null),
    controlRef: ref(null)
    /**
         * user supplied additionals:
    
         * innerValue - computed
         * floatingLabel - computed
         * inputRef - computed
    
         * fieldClass - computed
         * hasShadow - computed
    
         * controlEvents - Object with fn(e)
    
         * getControl - fn
         * getInnerAppend - fn
         * getControlChild - fn
         * getShadowControl - fn
         * showPopup - fn
         */
  };
}
function useField(state) {
  const { props, emit: emit2, slots, attrs, proxy } = getCurrentInstance();
  const { $q } = proxy;
  let focusoutTimer = null;
  if (state.hasValue === void 0) {
    state.hasValue = computed(() => fieldValueIsFilled(props.modelValue));
  }
  if (state.emitValue === void 0) {
    state.emitValue = (value2) => {
      emit2("update:modelValue", value2);
    };
  }
  if (state.controlEvents === void 0) {
    state.controlEvents = {
      onFocusin: onControlFocusin,
      onFocusout: onControlFocusout
    };
  }
  Object.assign(state, {
    clearValue,
    onControlFocusin,
    onControlFocusout,
    focus
  });
  if (state.computedCounter === void 0) {
    state.computedCounter = computed(() => {
      if (props.counter !== false) {
        const len = typeof props.modelValue === "string" || typeof props.modelValue === "number" ? ("" + props.modelValue).length : Array.isArray(props.modelValue) === true ? props.modelValue.length : 0;
        const max = props.maxlength !== void 0 ? props.maxlength : props.maxValues;
        return len + (max !== void 0 ? " / " + max : "");
      }
    });
  }
  const {
    isDirtyModel,
    hasRules,
    hasError,
    errorMessage,
    resetValidation
  } = useValidate(state.focused, state.innerLoading);
  const floatingLabel = state.floatingLabel !== void 0 ? computed(() => props.stackLabel === true || state.focused.value === true || state.floatingLabel.value === true) : computed(() => props.stackLabel === true || state.focused.value === true || state.hasValue.value === true);
  const shouldRenderBottom = computed(
    () => props.bottomSlots === true || props.hint !== void 0 || hasRules.value === true || props.counter === true || props.error !== null
  );
  const styleType = computed(() => {
    if (props.filled === true) {
      return "filled";
    }
    if (props.outlined === true) {
      return "outlined";
    }
    if (props.borderless === true) {
      return "borderless";
    }
    if (props.standout) {
      return "standout";
    }
    return "standard";
  });
  const classes = computed(
    () => `q-field row no-wrap items-start q-field--${styleType.value}` + (state.fieldClass !== void 0 ? ` ${state.fieldClass.value}` : "") + (props.rounded === true ? " q-field--rounded" : "") + (props.square === true ? " q-field--square" : "") + (floatingLabel.value === true ? " q-field--float" : "") + (hasLabel.value === true ? " q-field--labeled" : "") + (props.dense === true ? " q-field--dense" : "") + (props.itemAligned === true ? " q-field--item-aligned q-item-type" : "") + (state.isDark.value === true ? " q-field--dark" : "") + (state.getControl === void 0 ? " q-field--auto-height" : "") + (state.focused.value === true ? " q-field--focused" : "") + (hasError.value === true ? " q-field--error" : "") + (hasError.value === true || state.focused.value === true ? " q-field--highlighted" : "") + (props.hideBottomSpace !== true && shouldRenderBottom.value === true ? " q-field--with-bottom" : "") + (props.disable === true ? " q-field--disabled" : props.readonly === true ? " q-field--readonly" : "")
  );
  const contentClass = computed(
    () => "q-field__control relative-position row no-wrap" + (props.bgColor !== void 0 ? ` bg-${props.bgColor}` : "") + (hasError.value === true ? " text-negative" : typeof props.standout === "string" && props.standout.length !== 0 && state.focused.value === true ? ` ${props.standout}` : props.color !== void 0 ? ` text-${props.color}` : "")
  );
  const hasLabel = computed(
    () => props.labelSlot === true || props.label !== void 0
  );
  const labelClass = computed(
    () => "q-field__label no-pointer-events absolute ellipsis" + (props.labelColor !== void 0 && hasError.value !== true ? ` text-${props.labelColor}` : "")
  );
  const controlSlotScope = computed(() => ({
    id: state.targetUid.value,
    editable: state.editable.value,
    focused: state.focused.value,
    floatingLabel: floatingLabel.value,
    modelValue: props.modelValue,
    emitValue: state.emitValue
  }));
  const attributes = computed(() => {
    const acc = {
      for: state.targetUid.value
    };
    if (props.disable === true) {
      acc["aria-disabled"] = "true";
    } else if (props.readonly === true) {
      acc["aria-readonly"] = "true";
    }
    return acc;
  });
  watch(() => props.for, (val) => {
    state.targetUid.value = getTargetUid(val);
  });
  function focusHandler() {
    const el = document.activeElement;
    let target2 = state.targetRef !== void 0 && state.targetRef.value;
    if (target2 && (el === null || el.id !== state.targetUid.value)) {
      target2.hasAttribute("tabindex") === true || (target2 = target2.querySelector("[tabindex]"));
      if (target2 && target2 !== el) {
        target2.focus({ preventScroll: true });
      }
    }
  }
  function focus() {
    addFocusFn(focusHandler);
  }
  function blur() {
    removeFocusFn(focusHandler);
    const el = document.activeElement;
    if (el !== null && state.rootRef.value.contains(el)) {
      el.blur();
    }
  }
  function onControlFocusin(e) {
    if (focusoutTimer !== null) {
      clearTimeout(focusoutTimer);
      focusoutTimer = null;
    }
    if (state.editable.value === true && state.focused.value === false) {
      state.focused.value = true;
      emit2("focus", e);
    }
  }
  function onControlFocusout(e, then) {
    focusoutTimer !== null && clearTimeout(focusoutTimer);
    focusoutTimer = setTimeout(() => {
      focusoutTimer = null;
      if (document.hasFocus() === true && (state.hasPopupOpen === true || state.controlRef === void 0 || state.controlRef.value === null || state.controlRef.value.contains(document.activeElement) !== false)) {
        return;
      }
      if (state.focused.value === true) {
        state.focused.value = false;
        emit2("blur", e);
      }
      then !== void 0 && then();
    });
  }
  function clearValue(e) {
    stopAndPrevent(e);
    if ($q.platform.is.mobile !== true) {
      const el = state.targetRef !== void 0 && state.targetRef.value || state.rootRef.value;
      el.focus();
    } else if (state.rootRef.value.contains(document.activeElement) === true) {
      document.activeElement.blur();
    }
    if (props.type === "file") {
      state.inputRef.value.value = null;
    }
    emit2("update:modelValue", null);
    emit2("clear", props.modelValue);
    nextTick$1(() => {
      resetValidation();
      if ($q.platform.is.mobile !== true) {
        isDirtyModel.value = false;
      }
    });
  }
  function getContent() {
    const node = [];
    slots.prepend !== void 0 && node.push(
      h("div", {
        class: "q-field__prepend q-field__marginal row no-wrap items-center",
        key: "prepend",
        onClick: prevent
      }, slots.prepend())
    );
    node.push(
      h("div", {
        class: "q-field__control-container col relative-position row no-wrap q-anchor--skip"
      }, getControlContainer())
    );
    hasError.value === true && props.noErrorIcon === false && node.push(
      getInnerAppendNode("error", [
        h(QIcon, { name: $q.iconSet.field.error, color: "negative" })
      ])
    );
    if (props.loading === true || state.innerLoading.value === true) {
      node.push(
        getInnerAppendNode(
          "inner-loading-append",
          slots.loading !== void 0 ? slots.loading() : [h(QSpinner, { color: props.color })]
        )
      );
    } else if (props.clearable === true && state.hasValue.value === true && state.editable.value === true) {
      node.push(
        getInnerAppendNode("inner-clearable-append", [
          h(QIcon, {
            class: "q-field__focusable-action",
            tag: "button",
            name: props.clearIcon || $q.iconSet.field.clear,
            tabindex: 0,
            type: "button",
            "aria-hidden": null,
            role: null,
            onClick: clearValue
          })
        ])
      );
    }
    slots.append !== void 0 && node.push(
      h("div", {
        class: "q-field__append q-field__marginal row no-wrap items-center",
        key: "append",
        onClick: prevent
      }, slots.append())
    );
    state.getInnerAppend !== void 0 && node.push(
      getInnerAppendNode("inner-append", state.getInnerAppend())
    );
    state.getControlChild !== void 0 && node.push(
      state.getControlChild()
    );
    return node;
  }
  function getControlContainer() {
    const node = [];
    props.prefix !== void 0 && props.prefix !== null && node.push(
      h("div", {
        class: "q-field__prefix no-pointer-events row items-center"
      }, props.prefix)
    );
    if (state.getShadowControl !== void 0 && state.hasShadow.value === true) {
      node.push(
        state.getShadowControl()
      );
    }
    if (state.getControl !== void 0) {
      node.push(state.getControl());
    } else if (slots.rawControl !== void 0) {
      node.push(slots.rawControl());
    } else if (slots.control !== void 0) {
      node.push(
        h("div", {
          ref: state.targetRef,
          class: "q-field__native row",
          tabindex: -1,
          ...state.splitAttrs.attributes.value,
          "data-autofocus": props.autofocus === true || void 0
        }, slots.control(controlSlotScope.value))
      );
    }
    hasLabel.value === true && node.push(
      h("div", {
        class: labelClass.value
      }, hSlot(slots.label, props.label))
    );
    props.suffix !== void 0 && props.suffix !== null && node.push(
      h("div", {
        class: "q-field__suffix no-pointer-events row items-center"
      }, props.suffix)
    );
    return node.concat(hSlot(slots.default));
  }
  function getBottom() {
    let msg, key;
    if (hasError.value === true) {
      if (errorMessage.value !== null) {
        msg = [h("div", { role: "alert" }, errorMessage.value)];
        key = `q--slot-error-${errorMessage.value}`;
      } else {
        msg = hSlot(slots.error);
        key = "q--slot-error";
      }
    } else if (props.hideHint !== true || state.focused.value === true) {
      if (props.hint !== void 0) {
        msg = [h("div", props.hint)];
        key = `q--slot-hint-${props.hint}`;
      } else {
        msg = hSlot(slots.hint);
        key = "q--slot-hint";
      }
    }
    const hasCounter = props.counter === true || slots.counter !== void 0;
    if (props.hideBottomSpace === true && hasCounter === false && msg === void 0) {
      return;
    }
    const main2 = h("div", {
      key,
      class: "q-field__messages col"
    }, msg);
    return h("div", {
      class: "q-field__bottom row items-start q-field__bottom--" + (props.hideBottomSpace !== true ? "animated" : "stale"),
      onClick: prevent
    }, [
      props.hideBottomSpace === true ? main2 : h(Transition, { name: "q-transition--field-message" }, () => main2),
      hasCounter === true ? h("div", {
        class: "q-field__counter"
      }, slots.counter !== void 0 ? slots.counter() : state.computedCounter.value) : null
    ]);
  }
  function getInnerAppendNode(key, content) {
    return content === null ? null : h("div", {
      key,
      class: "q-field__append q-field__marginal row no-wrap items-center q-anchor--skip"
    }, content);
  }
  let shouldActivate = false;
  onDeactivated(() => {
    shouldActivate = true;
  });
  onActivated(() => {
    shouldActivate === true && props.autofocus === true && proxy.focus();
  });
  onMounted(() => {
    if (isRuntimeSsrPreHydration.value === true && props.for === void 0) {
      state.targetUid.value = getTargetUid();
    }
    props.autofocus === true && proxy.focus();
  });
  onBeforeUnmount(() => {
    focusoutTimer !== null && clearTimeout(focusoutTimer);
  });
  Object.assign(proxy, { focus, blur });
  return function renderField() {
    const labelAttrs = state.getControl === void 0 && slots.control === void 0 ? {
      ...state.splitAttrs.attributes.value,
      "data-autofocus": props.autofocus === true || void 0,
      ...attributes.value
    } : attributes.value;
    return h("label", {
      ref: state.rootRef,
      class: [
        classes.value,
        attrs.class
      ],
      style: attrs.style,
      ...labelAttrs
    }, [
      slots.before !== void 0 ? h("div", {
        class: "q-field__before q-field__marginal row no-wrap items-center",
        onClick: prevent
      }, slots.before()) : null,
      h("div", {
        class: "q-field__inner relative-position col self-stretch"
      }, [
        h("div", {
          ref: state.controlRef,
          class: contentClass.value,
          tabindex: -1,
          ...state.controlEvents
        }, getContent()),
        shouldRenderBottom.value === true ? getBottom() : null
      ]),
      slots.after !== void 0 ? h("div", {
        class: "q-field__after q-field__marginal row no-wrap items-center",
        onClick: prevent
      }, slots.after()) : null
    ]);
  };
}
const QField = createComponent({
  name: "QField",
  inheritAttrs: false,
  props: useFieldProps,
  emits: useFieldEmits,
  setup() {
    return useField(useFieldState());
  }
});
const defaultSizes = {
  xs: 8,
  sm: 10,
  md: 14,
  lg: 20,
  xl: 24
};
const QChip = createComponent({
  name: "QChip",
  props: {
    ...useDarkProps,
    ...useSizeProps,
    dense: Boolean,
    icon: String,
    iconRight: String,
    iconRemove: String,
    iconSelected: String,
    label: [String, Number],
    color: String,
    textColor: String,
    modelValue: {
      type: Boolean,
      default: true
    },
    selected: {
      type: Boolean,
      default: null
    },
    square: Boolean,
    outline: Boolean,
    clickable: Boolean,
    removable: Boolean,
    removeAriaLabel: String,
    tabindex: [String, Number],
    disable: Boolean,
    ripple: {
      type: [Boolean, Object],
      default: true
    }
  },
  emits: ["update:modelValue", "update:selected", "remove", "click"],
  setup(props, { slots, emit: emit2 }) {
    const { proxy: { $q } } = getCurrentInstance();
    const isDark = useDark(props, $q);
    const sizeStyle = useSize(props, defaultSizes);
    const hasLeftIcon = computed(() => props.selected === true || props.icon !== void 0);
    const leftIcon = computed(() => props.selected === true ? props.iconSelected || $q.iconSet.chip.selected : props.icon);
    const removeIcon = computed(() => props.iconRemove || $q.iconSet.chip.remove);
    const isClickable = computed(
      () => props.disable === false && (props.clickable === true || props.selected !== null)
    );
    const classes = computed(() => {
      const text = props.outline === true ? props.color || props.textColor : props.textColor;
      return "q-chip row inline no-wrap items-center" + (props.outline === false && props.color !== void 0 ? ` bg-${props.color}` : "") + (text ? ` text-${text} q-chip--colored` : "") + (props.disable === true ? " disabled" : "") + (props.dense === true ? " q-chip--dense" : "") + (props.outline === true ? " q-chip--outline" : "") + (props.selected === true ? " q-chip--selected" : "") + (isClickable.value === true ? " q-chip--clickable cursor-pointer non-selectable q-hoverable" : "") + (props.square === true ? " q-chip--square" : "") + (isDark.value === true ? " q-chip--dark q-dark" : "");
    });
    const attributes = computed(() => {
      const chip = props.disable === true ? { tabindex: -1, "aria-disabled": "true" } : { tabindex: props.tabindex || 0 };
      const remove2 = {
        ...chip,
        role: "button",
        "aria-hidden": "false",
        "aria-label": props.removeAriaLabel || $q.lang.label.remove
      };
      return { chip, remove: remove2 };
    });
    function onKeyup2(e) {
      e.keyCode === 13 && onClick(e);
    }
    function onClick(e) {
      if (!props.disable) {
        emit2("update:selected", !props.selected);
        emit2("click", e);
      }
    }
    function onRemove(e) {
      if (e.keyCode === void 0 || e.keyCode === 13) {
        stopAndPrevent(e);
        if (props.disable === false) {
          emit2("update:modelValue", false);
          emit2("remove");
        }
      }
    }
    function getContent() {
      const child = [];
      isClickable.value === true && child.push(
        h("div", { class: "q-focus-helper" })
      );
      hasLeftIcon.value === true && child.push(
        h(QIcon, {
          class: "q-chip__icon q-chip__icon--left",
          name: leftIcon.value
        })
      );
      const label = props.label !== void 0 ? [h("div", { class: "ellipsis" }, [props.label])] : void 0;
      child.push(
        h("div", {
          class: "q-chip__content col row no-wrap items-center q-anchor--skip"
        }, hMergeSlotSafely(slots.default, label))
      );
      props.iconRight && child.push(
        h(QIcon, {
          class: "q-chip__icon q-chip__icon--right",
          name: props.iconRight
        })
      );
      props.removable === true && child.push(
        h(QIcon, {
          class: "q-chip__icon q-chip__icon--remove cursor-pointer",
          name: removeIcon.value,
          ...attributes.value.remove,
          onClick: onRemove,
          onKeyup: onRemove
        })
      );
      return child;
    }
    return () => {
      if (props.modelValue === false) {
        return;
      }
      const data = {
        class: classes.value,
        style: sizeStyle.value
      };
      isClickable.value === true && Object.assign(
        data,
        attributes.value.chip,
        { onClick, onKeyup: onKeyup2 }
      );
      return hDir(
        "div",
        data,
        getContent(),
        "ripple",
        props.ripple !== false && props.disable !== true,
        () => [[Ripple, props.ripple]]
      );
    };
  }
});
const QItem = createComponent({
  name: "QItem",
  props: {
    ...useDarkProps,
    ...useRouterLinkProps,
    tag: {
      type: String,
      default: "div"
    },
    active: {
      type: Boolean,
      default: null
    },
    clickable: Boolean,
    dense: Boolean,
    insetLevel: Number,
    tabindex: [String, Number],
    focused: Boolean,
    manualFocus: Boolean
  },
  emits: ["click", "keyup"],
  setup(props, { slots, emit: emit2 }) {
    const { proxy: { $q } } = getCurrentInstance();
    const isDark = useDark(props, $q);
    const { hasLink, linkAttrs, linkClass, linkTag, navigateOnClick } = useRouterLink();
    const rootRef = ref(null);
    const blurTargetRef = ref(null);
    const isActionable = computed(
      () => props.clickable === true || hasLink.value === true || props.tag === "label"
    );
    const isClickable = computed(
      () => props.disable !== true && isActionable.value === true
    );
    const classes = computed(
      () => "q-item q-item-type row no-wrap" + (props.dense === true ? " q-item--dense" : "") + (isDark.value === true ? " q-item--dark" : "") + (hasLink.value === true && props.active === null ? linkClass.value : props.active === true ? ` q-item--active${props.activeClass !== void 0 ? ` ${props.activeClass}` : ""}` : "") + (props.disable === true ? " disabled" : "") + (isClickable.value === true ? " q-item--clickable q-link cursor-pointer " + (props.manualFocus === true ? "q-manual-focusable" : "q-focusable q-hoverable") + (props.focused === true ? " q-manual-focusable--focused" : "") : "")
    );
    const style = computed(() => {
      if (props.insetLevel === void 0) {
        return null;
      }
      const dir = $q.lang.rtl === true ? "Right" : "Left";
      return {
        ["padding" + dir]: 16 + props.insetLevel * 56 + "px"
      };
    });
    function onClick(e) {
      if (isClickable.value === true) {
        if (blurTargetRef.value !== null) {
          if (e.qKeyEvent !== true && document.activeElement === rootRef.value) {
            blurTargetRef.value.focus();
          } else if (document.activeElement === blurTargetRef.value) {
            rootRef.value.focus();
          }
        }
        navigateOnClick(e);
      }
    }
    function onKeyup2(e) {
      if (isClickable.value === true && isKeyCode(e, 13) === true) {
        stopAndPrevent(e);
        e.qKeyEvent = true;
        const evt = new MouseEvent("click", e);
        evt.qKeyEvent = true;
        rootRef.value.dispatchEvent(evt);
      }
      emit2("keyup", e);
    }
    function getContent() {
      const child = hUniqueSlot(slots.default, []);
      isClickable.value === true && child.unshift(
        h("div", { class: "q-focus-helper", tabindex: -1, ref: blurTargetRef })
      );
      return child;
    }
    return () => {
      const data = {
        ref: rootRef,
        class: classes.value,
        style: style.value,
        role: "listitem",
        onClick,
        onKeyup: onKeyup2
      };
      if (isClickable.value === true) {
        data.tabindex = props.tabindex || "0";
        Object.assign(data, linkAttrs.value);
      } else if (isActionable.value === true) {
        data["aria-disabled"] = "true";
      }
      return h(
        linkTag.value,
        data,
        getContent()
      );
    };
  }
});
const QItemSection = createComponent({
  name: "QItemSection",
  props: {
    avatar: Boolean,
    thumbnail: Boolean,
    side: Boolean,
    top: Boolean,
    noWrap: Boolean
  },
  setup(props, { slots }) {
    const classes = computed(
      () => `q-item__section column q-item__section--${props.avatar === true || props.side === true || props.thumbnail === true ? "side" : "main"}` + (props.top === true ? " q-item__section--top justify-start" : " justify-center") + (props.avatar === true ? " q-item__section--avatar" : "") + (props.thumbnail === true ? " q-item__section--thumbnail" : "") + (props.noWrap === true ? " q-item__section--nowrap" : "")
    );
    return () => h("div", { class: classes.value }, hSlot(slots.default));
  }
});
const QItemLabel = createComponent({
  name: "QItemLabel",
  props: {
    overline: Boolean,
    caption: Boolean,
    header: Boolean,
    lines: [Number, String]
  },
  setup(props, { slots }) {
    const parsedLines = computed(() => parseInt(props.lines, 10));
    const classes = computed(
      () => "q-item__label" + (props.overline === true ? " q-item__label--overline text-overline" : "") + (props.caption === true ? " q-item__label--caption text-caption" : "") + (props.header === true ? " q-item__label--header" : "") + (parsedLines.value === 1 ? " ellipsis" : "")
    );
    const style = computed(() => {
      return props.lines !== void 0 && parsedLines.value > 1 ? {
        overflow: "hidden",
        display: "-webkit-box",
        "-webkit-box-orient": "vertical",
        "-webkit-line-clamp": parsedLines.value
      } : null;
    });
    return () => h("div", {
      style: style.value,
      class: classes.value
    }, hSlot(slots.default));
  }
});
function clearSelection() {
  if (window.getSelection !== void 0) {
    const selection = window.getSelection();
    if (selection.empty !== void 0) {
      selection.empty();
    } else if (selection.removeAllRanges !== void 0) {
      selection.removeAllRanges();
      Platform.is.mobile !== true && selection.addRange(document.createRange());
    }
  } else if (document.selection !== void 0) {
    document.selection.empty();
  }
}
const useAnchorProps = {
  target: {
    default: true
  },
  noParentEvent: Boolean,
  contextMenu: Boolean
};
function useAnchor({
  showing,
  avoidEmit,
  // required for QPopupProxy (true)
  configureAnchorEl
  // optional
}) {
  const { props, proxy, emit: emit2 } = getCurrentInstance();
  const anchorEl = ref(null);
  let touchTimer = null;
  function canShow(evt) {
    return anchorEl.value === null ? false : evt === void 0 || evt.touches === void 0 || evt.touches.length <= 1;
  }
  const anchorEvents = {};
  if (configureAnchorEl === void 0) {
    Object.assign(anchorEvents, {
      hide(evt) {
        proxy.hide(evt);
      },
      toggle(evt) {
        proxy.toggle(evt);
        evt.qAnchorHandled = true;
      },
      toggleKey(evt) {
        isKeyCode(evt, 13) === true && anchorEvents.toggle(evt);
      },
      contextClick(evt) {
        proxy.hide(evt);
        prevent(evt);
        nextTick$1(() => {
          proxy.show(evt);
          evt.qAnchorHandled = true;
        });
      },
      prevent,
      mobileTouch(evt) {
        anchorEvents.mobileCleanup(evt);
        if (canShow(evt) !== true) {
          return;
        }
        proxy.hide(evt);
        anchorEl.value.classList.add("non-selectable");
        const target2 = evt.target;
        addEvt(anchorEvents, "anchor", [
          [target2, "touchmove", "mobileCleanup", "passive"],
          [target2, "touchend", "mobileCleanup", "passive"],
          [target2, "touchcancel", "mobileCleanup", "passive"],
          [anchorEl.value, "contextmenu", "prevent", "notPassive"]
        ]);
        touchTimer = setTimeout(() => {
          touchTimer = null;
          proxy.show(evt);
          evt.qAnchorHandled = true;
        }, 300);
      },
      mobileCleanup(evt) {
        anchorEl.value.classList.remove("non-selectable");
        if (touchTimer !== null) {
          clearTimeout(touchTimer);
          touchTimer = null;
        }
        if (showing.value === true && evt !== void 0) {
          clearSelection();
        }
      }
    });
    configureAnchorEl = function(context = props.contextMenu) {
      if (props.noParentEvent === true || anchorEl.value === null) {
        return;
      }
      let evts;
      if (context === true) {
        if (proxy.$q.platform.is.mobile === true) {
          evts = [
            [anchorEl.value, "touchstart", "mobileTouch", "passive"]
          ];
        } else {
          evts = [
            [anchorEl.value, "mousedown", "hide", "passive"],
            [anchorEl.value, "contextmenu", "contextClick", "notPassive"]
          ];
        }
      } else {
        evts = [
          [anchorEl.value, "click", "toggle", "passive"],
          [anchorEl.value, "keyup", "toggleKey", "passive"]
        ];
      }
      addEvt(anchorEvents, "anchor", evts);
    };
  }
  function unconfigureAnchorEl() {
    cleanEvt(anchorEvents, "anchor");
  }
  function setAnchorEl(el) {
    anchorEl.value = el;
    while (anchorEl.value.classList.contains("q-anchor--skip")) {
      anchorEl.value = anchorEl.value.parentNode;
    }
    configureAnchorEl();
  }
  function pickAnchorEl() {
    if (props.target === false || props.target === "" || proxy.$el.parentNode === null) {
      anchorEl.value = null;
    } else if (props.target === true) {
      setAnchorEl(proxy.$el.parentNode);
    } else {
      let el = props.target;
      if (typeof props.target === "string") {
        try {
          el = document.querySelector(props.target);
        } catch (err) {
          el = void 0;
        }
      }
      if (el !== void 0 && el !== null) {
        anchorEl.value = el.$el || el;
        configureAnchorEl();
      } else {
        anchorEl.value = null;
        console.error(`Anchor: target "${props.target}" not found`);
      }
    }
  }
  watch(() => props.contextMenu, (val) => {
    if (anchorEl.value !== null) {
      unconfigureAnchorEl();
      configureAnchorEl(val);
    }
  });
  watch(() => props.target, () => {
    if (anchorEl.value !== null) {
      unconfigureAnchorEl();
    }
    pickAnchorEl();
  });
  watch(() => props.noParentEvent, (val) => {
    if (anchorEl.value !== null) {
      if (val === true) {
        unconfigureAnchorEl();
      } else {
        configureAnchorEl();
      }
    }
  });
  onMounted(() => {
    pickAnchorEl();
    if (avoidEmit !== true && props.modelValue === true && anchorEl.value === null) {
      emit2("update:modelValue", false);
    }
  });
  onBeforeUnmount(() => {
    touchTimer !== null && clearTimeout(touchTimer);
    unconfigureAnchorEl();
  });
  return {
    anchorEl,
    canShow,
    anchorEvents
  };
}
function useScrollTarget(props, configureScrollTarget) {
  const localScrollTarget = ref(null);
  let scrollFn;
  function changeScrollEvent(scrollTarget, fn) {
    const fnProp = `${fn !== void 0 ? "add" : "remove"}EventListener`;
    const fnHandler = fn !== void 0 ? fn : scrollFn;
    if (scrollTarget !== window) {
      scrollTarget[fnProp]("scroll", fnHandler, listenOpts.passive);
    }
    window[fnProp]("scroll", fnHandler, listenOpts.passive);
    scrollFn = fn;
  }
  function unconfigureScrollTarget() {
    if (localScrollTarget.value !== null) {
      changeScrollEvent(localScrollTarget.value);
      localScrollTarget.value = null;
    }
  }
  const noParentEventWatcher = watch(() => props.noParentEvent, () => {
    if (localScrollTarget.value !== null) {
      unconfigureScrollTarget();
      configureScrollTarget();
    }
  });
  onBeforeUnmount(noParentEventWatcher);
  return {
    localScrollTarget,
    unconfigureScrollTarget,
    changeScrollEvent
  };
}
const useModelToggleProps = {
  modelValue: {
    type: Boolean,
    default: null
  },
  "onUpdate:modelValue": [Function, Array]
};
const useModelToggleEmits = [
  "beforeShow",
  "show",
  "beforeHide",
  "hide"
];
function useModelToggle({
  showing,
  canShow,
  // optional
  hideOnRouteChange,
  // optional
  handleShow,
  // optional
  handleHide,
  // optional
  processOnMount
  // optional
}) {
  const vm = getCurrentInstance();
  const { props, emit: emit2, proxy } = vm;
  let payload;
  function toggle(evt) {
    if (showing.value === true) {
      hide(evt);
    } else {
      show(evt);
    }
  }
  function show(evt) {
    if (props.disable === true || evt !== void 0 && evt.qAnchorHandled === true || canShow !== void 0 && canShow(evt) !== true) {
      return;
    }
    const listener = props["onUpdate:modelValue"] !== void 0;
    if (listener === true && true) {
      emit2("update:modelValue", true);
      payload = evt;
      nextTick$1(() => {
        if (payload === evt) {
          payload = void 0;
        }
      });
    }
    if (props.modelValue === null || listener === false || false) {
      processShow(evt);
    }
  }
  function processShow(evt) {
    if (showing.value === true) {
      return;
    }
    showing.value = true;
    emit2("beforeShow", evt);
    if (handleShow !== void 0) {
      handleShow(evt);
    } else {
      emit2("show", evt);
    }
  }
  function hide(evt) {
    if (props.disable === true) {
      return;
    }
    const listener = props["onUpdate:modelValue"] !== void 0;
    if (listener === true && true) {
      emit2("update:modelValue", false);
      payload = evt;
      nextTick$1(() => {
        if (payload === evt) {
          payload = void 0;
        }
      });
    }
    if (props.modelValue === null || listener === false || false) {
      processHide(evt);
    }
  }
  function processHide(evt) {
    if (showing.value === false) {
      return;
    }
    showing.value = false;
    emit2("beforeHide", evt);
    if (handleHide !== void 0) {
      handleHide(evt);
    } else {
      emit2("hide", evt);
    }
  }
  function processModelChange(val) {
    if (props.disable === true && val === true) {
      if (props["onUpdate:modelValue"] !== void 0) {
        emit2("update:modelValue", false);
      }
    } else if (val === true !== showing.value) {
      const fn = val === true ? processShow : processHide;
      fn(payload);
    }
  }
  watch(() => props.modelValue, processModelChange);
  if (hideOnRouteChange !== void 0 && vmHasRouter(vm) === true) {
    watch(() => proxy.$route.fullPath, () => {
      if (hideOnRouteChange.value === true && showing.value === true) {
        hide();
      }
    });
  }
  processOnMount === true && onMounted(() => {
    processModelChange(props.modelValue);
  });
  const publicMethods = { show, hide, toggle };
  Object.assign(proxy, publicMethods);
  return publicMethods;
}
let portalIndex = 1;
let target = document.body;
function createGlobalNode(id, portalType) {
  const el = document.createElement("div");
  el.id = portalType !== void 0 ? `q-portal--${portalType}--${portalIndex++}` : id;
  if (globalConfig.globalNodes !== void 0) {
    const cls = globalConfig.globalNodes.class;
    if (cls !== void 0) {
      el.className = cls;
    }
  }
  target.appendChild(el);
  return el;
}
function removeGlobalNode(el) {
  el.remove();
}
const portalProxyList = [];
function closePortalMenus(proxy, evt) {
  do {
    if (proxy.$options.name === "QMenu") {
      proxy.hide(evt);
      if (proxy.$props.separateClosePopup === true) {
        return getParentProxy(proxy);
      }
    } else if (proxy.__qPortal === true) {
      const parent = getParentProxy(proxy);
      if (parent !== void 0 && parent.$options.name === "QPopupProxy") {
        proxy.hide(evt);
        return parent;
      } else {
        return proxy;
      }
    }
    proxy = getParentProxy(proxy);
  } while (proxy !== void 0 && proxy !== null);
}
function isOnGlobalDialog(vm) {
  vm = vm.parent;
  while (vm !== void 0 && vm !== null) {
    if (vm.type.name === "QGlobalDialog") {
      return true;
    }
    if (vm.type.name === "QDialog" || vm.type.name === "QMenu") {
      return false;
    }
    vm = vm.parent;
  }
  return false;
}
function usePortal(vm, innerRef, renderPortalContent, type2) {
  const portalIsActive = ref(false);
  const portalIsAccessible = ref(false);
  let portalEl = null;
  const focusObj = {};
  const onGlobalDialog = type2 === "dialog" && isOnGlobalDialog(vm);
  function showPortal(isReady) {
    if (isReady === true) {
      removeFocusWaitFlag(focusObj);
      portalIsAccessible.value = true;
      return;
    }
    portalIsAccessible.value = false;
    if (portalIsActive.value === false) {
      if (onGlobalDialog === false && portalEl === null) {
        portalEl = createGlobalNode(false, type2);
      }
      portalIsActive.value = true;
      portalProxyList.push(vm.proxy);
      addFocusWaitFlag(focusObj);
    }
  }
  function hidePortal(isReady) {
    portalIsAccessible.value = false;
    if (isReady !== true) {
      return;
    }
    removeFocusWaitFlag(focusObj);
    portalIsActive.value = false;
    const index2 = portalProxyList.indexOf(vm.proxy);
    if (index2 !== -1) {
      portalProxyList.splice(index2, 1);
    }
    if (portalEl !== null) {
      removeGlobalNode(portalEl);
      portalEl = null;
    }
  }
  onUnmounted(() => {
    hidePortal(true);
  });
  vm.proxy.__qPortal = true;
  injectProp(vm.proxy, "contentEl", () => innerRef.value);
  return {
    showPortal,
    hidePortal,
    portalIsActive,
    portalIsAccessible,
    renderPortal: () => onGlobalDialog === true ? renderPortalContent() : portalIsActive.value === true ? [h(Teleport, { to: portalEl }, renderPortalContent())] : void 0
  };
}
const useTransitionProps = {
  transitionShow: {
    type: String,
    default: "fade"
  },
  transitionHide: {
    type: String,
    default: "fade"
  },
  transitionDuration: {
    type: [String, Number],
    default: 300
  }
};
function useTransition(props, defaultShowFn = () => {
}, defaultHideFn = () => {
}) {
  return {
    transitionProps: computed(() => {
      const show = `q-transition--${props.transitionShow || defaultShowFn()}`;
      const hide = `q-transition--${props.transitionHide || defaultHideFn()}`;
      return {
        appear: true,
        enterFromClass: `${show}-enter-from`,
        enterActiveClass: `${show}-enter-active`,
        enterToClass: `${show}-enter-to`,
        leaveFromClass: `${hide}-leave-from`,
        leaveActiveClass: `${hide}-leave-active`,
        leaveToClass: `${hide}-leave-to`
      };
    }),
    transitionStyle: computed(() => `--q-transition-duration: ${props.transitionDuration}ms`)
  };
}
function useTick() {
  let tickFn;
  const vm = getCurrentInstance();
  function removeTick() {
    tickFn = void 0;
  }
  onDeactivated(removeTick);
  onBeforeUnmount(removeTick);
  return {
    removeTick,
    registerTick(fn) {
      tickFn = fn;
      nextTick$1(() => {
        if (tickFn === fn) {
          vmIsDestroyed(vm) === false && tickFn();
          tickFn = void 0;
        }
      });
    }
  };
}
function useTimeout() {
  let timer = null;
  const vm = getCurrentInstance();
  function removeTimeout() {
    if (timer !== null) {
      clearTimeout(timer);
      timer = null;
    }
  }
  onDeactivated(removeTimeout);
  onBeforeUnmount(removeTimeout);
  return {
    removeTimeout,
    registerTimeout(fn, delay) {
      removeTimeout();
      if (vmIsDestroyed(vm) === false) {
        timer = setTimeout(fn, delay);
      }
    }
  };
}
const scrollTargets = [null, document, document.body, document.scrollingElement, document.documentElement];
function getScrollTarget(el, targetEl) {
  let target2 = getElement(targetEl);
  if (target2 === void 0) {
    if (el === void 0 || el === null) {
      return window;
    }
    target2 = el.closest(".scroll,.scroll-y,.overflow-auto");
  }
  return scrollTargets.includes(target2) ? window : target2;
}
function getVerticalScrollPosition(scrollTarget) {
  return scrollTarget === window ? window.pageYOffset || window.scrollY || document.body.scrollTop || 0 : scrollTarget.scrollTop;
}
function getHorizontalScrollPosition(scrollTarget) {
  return scrollTarget === window ? window.pageXOffset || window.scrollX || document.body.scrollLeft || 0 : scrollTarget.scrollLeft;
}
let size;
function getScrollbarWidth() {
  if (size !== void 0) {
    return size;
  }
  const inner = document.createElement("p"), outer = document.createElement("div");
  css(inner, {
    width: "100%",
    height: "200px"
  });
  css(outer, {
    position: "absolute",
    top: "0px",
    left: "0px",
    visibility: "hidden",
    width: "200px",
    height: "150px",
    overflow: "hidden"
  });
  outer.appendChild(inner);
  document.body.appendChild(outer);
  const w1 = inner.offsetWidth;
  outer.style.overflow = "scroll";
  let w2 = inner.offsetWidth;
  if (w1 === w2) {
    w2 = outer.clientWidth;
  }
  outer.remove();
  size = w1 - w2;
  return size;
}
function hasScrollbar(el, onY = true) {
  if (!el || el.nodeType !== Node.ELEMENT_NODE) {
    return false;
  }
  return onY ? el.scrollHeight > el.clientHeight && (el.classList.contains("scroll") || el.classList.contains("overflow-auto") || ["auto", "scroll"].includes(window.getComputedStyle(el)["overflow-y"])) : el.scrollWidth > el.clientWidth && (el.classList.contains("scroll") || el.classList.contains("overflow-auto") || ["auto", "scroll"].includes(window.getComputedStyle(el)["overflow-x"]));
}
const handlers$1 = [];
let escDown;
function onKeydown(evt) {
  escDown = evt.keyCode === 27;
}
function onBlur() {
  if (escDown === true) {
    escDown = false;
  }
}
function onKeyup(evt) {
  if (escDown === true) {
    escDown = false;
    if (isKeyCode(evt, 27) === true) {
      handlers$1[handlers$1.length - 1](evt);
    }
  }
}
function update(action) {
  window[action]("keydown", onKeydown);
  window[action]("blur", onBlur);
  window[action]("keyup", onKeyup);
  escDown = false;
}
function addEscapeKey(fn) {
  if (client.is.desktop === true) {
    handlers$1.push(fn);
    if (handlers$1.length === 1) {
      update("addEventListener");
    }
  }
}
function removeEscapeKey(fn) {
  const index2 = handlers$1.indexOf(fn);
  if (index2 > -1) {
    handlers$1.splice(index2, 1);
    if (handlers$1.length === 0) {
      update("removeEventListener");
    }
  }
}
const handlers = [];
function trigger(e) {
  handlers[handlers.length - 1](e);
}
function addFocusout(fn) {
  if (client.is.desktop === true) {
    handlers.push(fn);
    if (handlers.length === 1) {
      document.body.addEventListener("focusin", trigger);
    }
  }
}
function removeFocusout(fn) {
  const index2 = handlers.indexOf(fn);
  if (index2 > -1) {
    handlers.splice(index2, 1);
    if (handlers.length === 0) {
      document.body.removeEventListener("focusin", trigger);
    }
  }
}
const { notPassiveCapture } = listenOpts, registeredList = [];
function globalHandler(evt) {
  const target2 = evt.target;
  if (target2 === void 0 || target2.nodeType === 8 || target2.classList.contains("no-pointer-events") === true) {
    return;
  }
  let portalIndex2 = portalProxyList.length - 1;
  while (portalIndex2 >= 0) {
    const proxy = portalProxyList[portalIndex2].$;
    if (proxy.type.name !== "QDialog") {
      break;
    }
    if (proxy.props.seamless !== true) {
      return;
    }
    portalIndex2--;
  }
  for (let i2 = registeredList.length - 1; i2 >= 0; i2--) {
    const state = registeredList[i2];
    if ((state.anchorEl.value === null || state.anchorEl.value.contains(target2) === false) && (target2 === document.body || state.innerRef.value !== null && state.innerRef.value.contains(target2) === false)) {
      evt.qClickOutside = true;
      state.onClickOutside(evt);
    } else {
      return;
    }
  }
}
function addClickOutside(clickOutsideProps) {
  registeredList.push(clickOutsideProps);
  if (registeredList.length === 1) {
    document.addEventListener("mousedown", globalHandler, notPassiveCapture);
    document.addEventListener("touchstart", globalHandler, notPassiveCapture);
  }
}
function removeClickOutside(clickOutsideProps) {
  const index2 = registeredList.findIndex((h2) => h2 === clickOutsideProps);
  if (index2 > -1) {
    registeredList.splice(index2, 1);
    if (registeredList.length === 0) {
      document.removeEventListener("mousedown", globalHandler, notPassiveCapture);
      document.removeEventListener("touchstart", globalHandler, notPassiveCapture);
    }
  }
}
let vpLeft, vpTop;
function validatePosition(pos) {
  const parts2 = pos.split(" ");
  if (parts2.length !== 2) {
    return false;
  }
  if (["top", "center", "bottom"].includes(parts2[0]) !== true) {
    console.error("Anchor/Self position must start with one of top/center/bottom");
    return false;
  }
  if (["left", "middle", "right", "start", "end"].includes(parts2[1]) !== true) {
    console.error("Anchor/Self position must end with one of left/middle/right/start/end");
    return false;
  }
  return true;
}
function validateOffset(val) {
  if (!val) {
    return true;
  }
  if (val.length !== 2) {
    return false;
  }
  if (typeof val[0] !== "number" || typeof val[1] !== "number") {
    return false;
  }
  return true;
}
const horizontalPos = {
  "start#ltr": "left",
  "start#rtl": "right",
  "end#ltr": "right",
  "end#rtl": "left"
};
["left", "middle", "right"].forEach((pos) => {
  horizontalPos[`${pos}#ltr`] = pos;
  horizontalPos[`${pos}#rtl`] = pos;
});
function parsePosition(pos, rtl) {
  const parts2 = pos.split(" ");
  return {
    vertical: parts2[0],
    horizontal: horizontalPos[`${parts2[1]}#${rtl === true ? "rtl" : "ltr"}`]
  };
}
function getAnchorProps(el, offset) {
  let { top, left, right, bottom, width, height } = el.getBoundingClientRect();
  if (offset !== void 0) {
    top -= offset[1];
    left -= offset[0];
    bottom += offset[1];
    right += offset[0];
    width += offset[0];
    height += offset[1];
  }
  return {
    top,
    bottom,
    height,
    left,
    right,
    width,
    middle: left + (right - left) / 2,
    center: top + (bottom - top) / 2
  };
}
function getAbsoluteAnchorProps(el, absoluteOffset, offset) {
  let { top, left } = el.getBoundingClientRect();
  top += absoluteOffset.top;
  left += absoluteOffset.left;
  if (offset !== void 0) {
    top += offset[1];
    left += offset[0];
  }
  return {
    top,
    bottom: top + 1,
    height: 1,
    left,
    right: left + 1,
    width: 1,
    middle: left,
    center: top
  };
}
function getTargetProps(el) {
  return {
    top: 0,
    center: el.offsetHeight / 2,
    bottom: el.offsetHeight,
    left: 0,
    middle: el.offsetWidth / 2,
    right: el.offsetWidth
  };
}
function getTopLeftProps(anchorProps, targetProps, cfg) {
  return {
    top: anchorProps[cfg.anchorOrigin.vertical] - targetProps[cfg.selfOrigin.vertical],
    left: anchorProps[cfg.anchorOrigin.horizontal] - targetProps[cfg.selfOrigin.horizontal]
  };
}
function setPosition(cfg) {
  if (client.is.ios === true && window.visualViewport !== void 0) {
    const el = document.body.style;
    const { offsetLeft: left, offsetTop: top } = window.visualViewport;
    if (left !== vpLeft) {
      el.setProperty("--q-pe-left", left + "px");
      vpLeft = left;
    }
    if (top !== vpTop) {
      el.setProperty("--q-pe-top", top + "px");
      vpTop = top;
    }
  }
  const { scrollLeft, scrollTop } = cfg.el;
  const anchorProps = cfg.absoluteOffset === void 0 ? getAnchorProps(cfg.anchorEl, cfg.cover === true ? [0, 0] : cfg.offset) : getAbsoluteAnchorProps(cfg.anchorEl, cfg.absoluteOffset, cfg.offset);
  let elStyle = {
    maxHeight: cfg.maxHeight,
    maxWidth: cfg.maxWidth,
    visibility: "visible"
  };
  if (cfg.fit === true || cfg.cover === true) {
    elStyle.minWidth = anchorProps.width + "px";
    if (cfg.cover === true) {
      elStyle.minHeight = anchorProps.height + "px";
    }
  }
  Object.assign(cfg.el.style, elStyle);
  const targetProps = getTargetProps(cfg.el);
  let props = getTopLeftProps(anchorProps, targetProps, cfg);
  if (cfg.absoluteOffset === void 0 || cfg.offset === void 0) {
    applyBoundaries(props, anchorProps, targetProps, cfg.anchorOrigin, cfg.selfOrigin);
  } else {
    const { top, left } = props;
    applyBoundaries(props, anchorProps, targetProps, cfg.anchorOrigin, cfg.selfOrigin);
    let hasChanged2 = false;
    if (props.top !== top) {
      hasChanged2 = true;
      const offsetY = 2 * cfg.offset[1];
      anchorProps.center = anchorProps.top -= offsetY;
      anchorProps.bottom -= offsetY + 2;
    }
    if (props.left !== left) {
      hasChanged2 = true;
      const offsetX = 2 * cfg.offset[0];
      anchorProps.middle = anchorProps.left -= offsetX;
      anchorProps.right -= offsetX + 2;
    }
    if (hasChanged2 === true) {
      props = getTopLeftProps(anchorProps, targetProps, cfg);
      applyBoundaries(props, anchorProps, targetProps, cfg.anchorOrigin, cfg.selfOrigin);
    }
  }
  elStyle = {
    top: props.top + "px",
    left: props.left + "px"
  };
  if (props.maxHeight !== void 0) {
    elStyle.maxHeight = props.maxHeight + "px";
    if (anchorProps.height > props.maxHeight) {
      elStyle.minHeight = elStyle.maxHeight;
    }
  }
  if (props.maxWidth !== void 0) {
    elStyle.maxWidth = props.maxWidth + "px";
    if (anchorProps.width > props.maxWidth) {
      elStyle.minWidth = elStyle.maxWidth;
    }
  }
  Object.assign(cfg.el.style, elStyle);
  if (cfg.el.scrollTop !== scrollTop) {
    cfg.el.scrollTop = scrollTop;
  }
  if (cfg.el.scrollLeft !== scrollLeft) {
    cfg.el.scrollLeft = scrollLeft;
  }
}
function applyBoundaries(props, anchorProps, targetProps, anchorOrigin, selfOrigin) {
  const currentHeight = targetProps.bottom, currentWidth = targetProps.right, margin = getScrollbarWidth(), innerHeight = window.innerHeight - margin, innerWidth = document.body.clientWidth;
  if (props.top < 0 || props.top + currentHeight > innerHeight) {
    if (selfOrigin.vertical === "center") {
      props.top = anchorProps[anchorOrigin.vertical] > innerHeight / 2 ? Math.max(0, innerHeight - currentHeight) : 0;
      props.maxHeight = Math.min(currentHeight, innerHeight);
    } else if (anchorProps[anchorOrigin.vertical] > innerHeight / 2) {
      const anchorY = Math.min(
        innerHeight,
        anchorOrigin.vertical === "center" ? anchorProps.center : anchorOrigin.vertical === selfOrigin.vertical ? anchorProps.bottom : anchorProps.top
      );
      props.maxHeight = Math.min(currentHeight, anchorY);
      props.top = Math.max(0, anchorY - currentHeight);
    } else {
      props.top = Math.max(
        0,
        anchorOrigin.vertical === "center" ? anchorProps.center : anchorOrigin.vertical === selfOrigin.vertical ? anchorProps.top : anchorProps.bottom
      );
      props.maxHeight = Math.min(currentHeight, innerHeight - props.top);
    }
  }
  if (props.left < 0 || props.left + currentWidth > innerWidth) {
    props.maxWidth = Math.min(currentWidth, innerWidth);
    if (selfOrigin.horizontal === "middle") {
      props.left = anchorProps[anchorOrigin.horizontal] > innerWidth / 2 ? Math.max(0, innerWidth - currentWidth) : 0;
    } else if (anchorProps[anchorOrigin.horizontal] > innerWidth / 2) {
      const anchorX = Math.min(
        innerWidth,
        anchorOrigin.horizontal === "middle" ? anchorProps.middle : anchorOrigin.horizontal === selfOrigin.horizontal ? anchorProps.right : anchorProps.left
      );
      props.maxWidth = Math.min(currentWidth, anchorX);
      props.left = Math.max(0, anchorX - props.maxWidth);
    } else {
      props.left = Math.max(
        0,
        anchorOrigin.horizontal === "middle" ? anchorProps.middle : anchorOrigin.horizontal === selfOrigin.horizontal ? anchorProps.left : anchorProps.right
      );
      props.maxWidth = Math.min(currentWidth, innerWidth - props.left);
    }
  }
}
const QMenu = createComponent({
  name: "QMenu",
  inheritAttrs: false,
  props: {
    ...useAnchorProps,
    ...useModelToggleProps,
    ...useDarkProps,
    ...useTransitionProps,
    persistent: Boolean,
    autoClose: Boolean,
    separateClosePopup: Boolean,
    noRouteDismiss: Boolean,
    noRefocus: Boolean,
    noFocus: Boolean,
    fit: Boolean,
    cover: Boolean,
    square: Boolean,
    anchor: {
      type: String,
      validator: validatePosition
    },
    self: {
      type: String,
      validator: validatePosition
    },
    offset: {
      type: Array,
      validator: validateOffset
    },
    scrollTarget: {
      default: void 0
    },
    touchPosition: Boolean,
    maxHeight: {
      type: String,
      default: null
    },
    maxWidth: {
      type: String,
      default: null
    }
  },
  emits: [
    ...useModelToggleEmits,
    "click",
    "escapeKey"
  ],
  setup(props, { slots, emit: emit2, attrs }) {
    let refocusTarget = null, absoluteOffset, unwatchPosition, avoidAutoClose;
    const vm = getCurrentInstance();
    const { proxy } = vm;
    const { $q } = proxy;
    const innerRef = ref(null);
    const showing = ref(false);
    const hideOnRouteChange = computed(
      () => props.persistent !== true && props.noRouteDismiss !== true
    );
    const isDark = useDark(props, $q);
    const { registerTick, removeTick } = useTick();
    const { registerTimeout } = useTimeout();
    const { transitionProps, transitionStyle } = useTransition(props);
    const { localScrollTarget, changeScrollEvent, unconfigureScrollTarget } = useScrollTarget(props, configureScrollTarget);
    const { anchorEl, canShow } = useAnchor({ showing });
    const { hide } = useModelToggle({
      showing,
      canShow,
      handleShow,
      handleHide,
      hideOnRouteChange,
      processOnMount: true
    });
    const { showPortal, hidePortal, renderPortal } = usePortal(vm, innerRef, renderPortalContent, "menu");
    const clickOutsideProps = {
      anchorEl,
      innerRef,
      onClickOutside(e) {
        if (props.persistent !== true && showing.value === true) {
          hide(e);
          if (
            // always prevent touch event
            e.type === "touchstart" || e.target.classList.contains("q-dialog__backdrop")
          ) {
            stopAndPrevent(e);
          }
          return true;
        }
      }
    };
    const anchorOrigin = computed(
      () => parsePosition(
        props.anchor || (props.cover === true ? "center middle" : "bottom start"),
        $q.lang.rtl
      )
    );
    const selfOrigin = computed(() => props.cover === true ? anchorOrigin.value : parsePosition(props.self || "top start", $q.lang.rtl));
    const menuClass = computed(
      () => (props.square === true ? " q-menu--square" : "") + (isDark.value === true ? " q-menu--dark q-dark" : "")
    );
    const onEvents = computed(() => props.autoClose === true ? { onClick: onAutoClose } : {});
    const handlesFocus = computed(
      () => showing.value === true && props.persistent !== true
    );
    watch(handlesFocus, (val) => {
      if (val === true) {
        addEscapeKey(onEscapeKey);
        addClickOutside(clickOutsideProps);
      } else {
        removeEscapeKey(onEscapeKey);
        removeClickOutside(clickOutsideProps);
      }
    });
    function focus() {
      addFocusFn(() => {
        let node = innerRef.value;
        if (node && node.contains(document.activeElement) !== true) {
          node = node.querySelector("[autofocus][tabindex], [data-autofocus][tabindex]") || node.querySelector("[autofocus] [tabindex], [data-autofocus] [tabindex]") || node.querySelector("[autofocus], [data-autofocus]") || node;
          node.focus({ preventScroll: true });
        }
      });
    }
    function handleShow(evt) {
      refocusTarget = props.noRefocus === false ? document.activeElement : null;
      addFocusout(onFocusout);
      showPortal();
      configureScrollTarget();
      absoluteOffset = void 0;
      if (evt !== void 0 && (props.touchPosition || props.contextMenu)) {
        const pos = position(evt);
        if (pos.left !== void 0) {
          const { top, left } = anchorEl.value.getBoundingClientRect();
          absoluteOffset = { left: pos.left - left, top: pos.top - top };
        }
      }
      if (unwatchPosition === void 0) {
        unwatchPosition = watch(
          () => $q.screen.width + "|" + $q.screen.height + "|" + props.self + "|" + props.anchor + "|" + $q.lang.rtl,
          updatePosition
        );
      }
      if (props.noFocus !== true) {
        document.activeElement.blur();
      }
      registerTick(() => {
        updatePosition();
        props.noFocus !== true && focus();
      });
      registerTimeout(() => {
        if ($q.platform.is.ios === true) {
          avoidAutoClose = props.autoClose;
          innerRef.value.click();
        }
        updatePosition();
        showPortal(true);
        emit2("show", evt);
      }, props.transitionDuration);
    }
    function handleHide(evt) {
      removeTick();
      hidePortal();
      anchorCleanup(true);
      if (refocusTarget !== null && // menu was hidden from code or ESC plugin
      (evt === void 0 || evt.qClickOutside !== true)) {
        ((evt && evt.type.indexOf("key") === 0 ? refocusTarget.closest('[tabindex]:not([tabindex^="-"])') : void 0) || refocusTarget).focus();
        refocusTarget = null;
      }
      registerTimeout(() => {
        hidePortal(true);
        emit2("hide", evt);
      }, props.transitionDuration);
    }
    function anchorCleanup(hiding) {
      absoluteOffset = void 0;
      if (unwatchPosition !== void 0) {
        unwatchPosition();
        unwatchPosition = void 0;
      }
      if (hiding === true || showing.value === true) {
        removeFocusout(onFocusout);
        unconfigureScrollTarget();
        removeClickOutside(clickOutsideProps);
        removeEscapeKey(onEscapeKey);
      }
      if (hiding !== true) {
        refocusTarget = null;
      }
    }
    function configureScrollTarget() {
      if (anchorEl.value !== null || props.scrollTarget !== void 0) {
        localScrollTarget.value = getScrollTarget(anchorEl.value, props.scrollTarget);
        changeScrollEvent(localScrollTarget.value, updatePosition);
      }
    }
    function onAutoClose(e) {
      if (avoidAutoClose !== true) {
        closePortalMenus(proxy, e);
        emit2("click", e);
      } else {
        avoidAutoClose = false;
      }
    }
    function onFocusout(evt) {
      if (handlesFocus.value === true && props.noFocus !== true && childHasFocus(innerRef.value, evt.target) !== true) {
        focus();
      }
    }
    function onEscapeKey(evt) {
      emit2("escapeKey");
      hide(evt);
    }
    function updatePosition() {
      const el = innerRef.value;
      if (el === null || anchorEl.value === null) {
        return;
      }
      setPosition({
        el,
        offset: props.offset,
        anchorEl: anchorEl.value,
        anchorOrigin: anchorOrigin.value,
        selfOrigin: selfOrigin.value,
        absoluteOffset,
        fit: props.fit,
        cover: props.cover,
        maxHeight: props.maxHeight,
        maxWidth: props.maxWidth
      });
    }
    function renderPortalContent() {
      return h(
        Transition,
        transitionProps.value,
        () => showing.value === true ? h("div", {
          role: "menu",
          ...attrs,
          ref: innerRef,
          tabindex: -1,
          class: [
            "q-menu q-position-engine scroll" + menuClass.value,
            attrs.class
          ],
          style: [
            attrs.style,
            transitionStyle.value
          ],
          ...onEvents.value
        }, hSlot(slots.default)) : null
      );
    }
    onBeforeUnmount(anchorCleanup);
    Object.assign(proxy, { focus, updatePosition });
    return renderPortal;
  }
});
function useHistory(showing, hide, hideOnRouteChange) {
  let historyEntry;
  function removeFromHistory() {
    if (historyEntry !== void 0) {
      History.remove(historyEntry);
      historyEntry = void 0;
    }
  }
  onBeforeUnmount(() => {
    showing.value === true && removeFromHistory();
  });
  return {
    removeFromHistory,
    addToHistory() {
      historyEntry = {
        condition: () => hideOnRouteChange.value === true,
        handler: hide
      };
      History.add(historyEntry);
    }
  };
}
let registered = 0, scrollPositionX, scrollPositionY, maxScrollTop, vpPendingUpdate = false, bodyLeft, bodyTop, href, closeTimer = null;
function onWheel(e) {
  if (shouldPreventScroll(e)) {
    stopAndPrevent(e);
  }
}
function shouldPreventScroll(e) {
  if (e.target === document.body || e.target.classList.contains("q-layout__backdrop")) {
    return true;
  }
  const path = getEventPath(e), shift = e.shiftKey && !e.deltaX, scrollY = !shift && Math.abs(e.deltaX) <= Math.abs(e.deltaY), delta = shift || scrollY ? e.deltaY : e.deltaX;
  for (let index2 = 0; index2 < path.length; index2++) {
    const el = path[index2];
    if (hasScrollbar(el, scrollY)) {
      return scrollY ? delta < 0 && el.scrollTop === 0 ? true : delta > 0 && el.scrollTop + el.clientHeight === el.scrollHeight : delta < 0 && el.scrollLeft === 0 ? true : delta > 0 && el.scrollLeft + el.clientWidth === el.scrollWidth;
    }
  }
  return true;
}
function onAppleScroll(e) {
  if (e.target === document) {
    document.scrollingElement.scrollTop = document.scrollingElement.scrollTop;
  }
}
function onAppleResize(evt) {
  if (vpPendingUpdate === true) {
    return;
  }
  vpPendingUpdate = true;
  requestAnimationFrame(() => {
    vpPendingUpdate = false;
    const { height } = evt.target, { clientHeight, scrollTop } = document.scrollingElement;
    if (maxScrollTop === void 0 || height !== window.innerHeight) {
      maxScrollTop = clientHeight - height;
      document.scrollingElement.scrollTop = scrollTop;
    }
    if (scrollTop > maxScrollTop) {
      document.scrollingElement.scrollTop -= Math.ceil((scrollTop - maxScrollTop) / 8);
    }
  });
}
function apply(action) {
  const body = document.body, hasViewport = window.visualViewport !== void 0;
  if (action === "add") {
    const { overflowY, overflowX } = window.getComputedStyle(body);
    scrollPositionX = getHorizontalScrollPosition(window);
    scrollPositionY = getVerticalScrollPosition(window);
    bodyLeft = body.style.left;
    bodyTop = body.style.top;
    href = window.location.href;
    body.style.left = `-${scrollPositionX}px`;
    body.style.top = `-${scrollPositionY}px`;
    if (overflowX !== "hidden" && (overflowX === "scroll" || body.scrollWidth > window.innerWidth)) {
      body.classList.add("q-body--force-scrollbar-x");
    }
    if (overflowY !== "hidden" && (overflowY === "scroll" || body.scrollHeight > window.innerHeight)) {
      body.classList.add("q-body--force-scrollbar-y");
    }
    body.classList.add("q-body--prevent-scroll");
    document.qScrollPrevented = true;
    if (client.is.ios === true) {
      if (hasViewport === true) {
        window.scrollTo(0, 0);
        window.visualViewport.addEventListener("resize", onAppleResize, listenOpts.passiveCapture);
        window.visualViewport.addEventListener("scroll", onAppleResize, listenOpts.passiveCapture);
        window.scrollTo(0, 0);
      } else {
        window.addEventListener("scroll", onAppleScroll, listenOpts.passiveCapture);
      }
    }
  }
  if (client.is.desktop === true && client.is.mac === true) {
    window[`${action}EventListener`]("wheel", onWheel, listenOpts.notPassive);
  }
  if (action === "remove") {
    if (client.is.ios === true) {
      if (hasViewport === true) {
        window.visualViewport.removeEventListener("resize", onAppleResize, listenOpts.passiveCapture);
        window.visualViewport.removeEventListener("scroll", onAppleResize, listenOpts.passiveCapture);
      } else {
        window.removeEventListener("scroll", onAppleScroll, listenOpts.passiveCapture);
      }
    }
    body.classList.remove("q-body--prevent-scroll");
    body.classList.remove("q-body--force-scrollbar-x");
    body.classList.remove("q-body--force-scrollbar-y");
    document.qScrollPrevented = false;
    body.style.left = bodyLeft;
    body.style.top = bodyTop;
    if (window.location.href === href) {
      window.scrollTo(scrollPositionX, scrollPositionY);
    }
    maxScrollTop = void 0;
  }
}
function preventScroll(state) {
  let action = "add";
  if (state === true) {
    registered++;
    if (closeTimer !== null) {
      clearTimeout(closeTimer);
      closeTimer = null;
      return;
    }
    if (registered > 1) {
      return;
    }
  } else {
    if (registered === 0) {
      return;
    }
    registered--;
    if (registered > 0) {
      return;
    }
    action = "remove";
    if (client.is.ios === true && client.is.nativeMobile === true) {
      closeTimer !== null && clearTimeout(closeTimer);
      closeTimer = setTimeout(() => {
        apply(action);
        closeTimer = null;
      }, 100);
      return;
    }
  }
  apply(action);
}
function usePreventScroll() {
  let currentState;
  return {
    preventBodyScroll(state) {
      if (state !== currentState && (currentState !== void 0 || state === true)) {
        currentState = state;
        preventScroll(state);
      }
    }
  };
}
let maximizedModals = 0;
const positionClass = {
  standard: "fixed-full flex-center",
  top: "fixed-top justify-center",
  bottom: "fixed-bottom justify-center",
  right: "fixed-right items-center",
  left: "fixed-left items-center"
};
const defaultTransitions = {
  standard: ["scale", "scale"],
  top: ["slide-down", "slide-up"],
  bottom: ["slide-up", "slide-down"],
  right: ["slide-left", "slide-right"],
  left: ["slide-right", "slide-left"]
};
const QDialog = createComponent({
  name: "QDialog",
  inheritAttrs: false,
  props: {
    ...useModelToggleProps,
    ...useTransitionProps,
    transitionShow: String,
    // override useTransitionProps
    transitionHide: String,
    // override useTransitionProps
    persistent: Boolean,
    autoClose: Boolean,
    allowFocusOutside: Boolean,
    noEscDismiss: Boolean,
    noBackdropDismiss: Boolean,
    noRouteDismiss: Boolean,
    noRefocus: Boolean,
    noFocus: Boolean,
    noShake: Boolean,
    seamless: Boolean,
    maximized: Boolean,
    fullWidth: Boolean,
    fullHeight: Boolean,
    square: Boolean,
    position: {
      type: String,
      default: "standard",
      validator: (val) => val === "standard" || ["top", "bottom", "left", "right"].includes(val)
    }
  },
  emits: [
    ...useModelToggleEmits,
    "shake",
    "click",
    "escapeKey"
  ],
  setup(props, { slots, emit: emit2, attrs }) {
    const vm = getCurrentInstance();
    const innerRef = ref(null);
    const showing = ref(false);
    const animating = ref(false);
    let shakeTimeout = null, refocusTarget = null, isMaximized, avoidAutoClose;
    const hideOnRouteChange = computed(
      () => props.persistent !== true && props.noRouteDismiss !== true && props.seamless !== true
    );
    const { preventBodyScroll } = usePreventScroll();
    const { registerTimeout } = useTimeout();
    const { registerTick, removeTick } = useTick();
    const { transitionProps, transitionStyle } = useTransition(
      props,
      () => defaultTransitions[props.position][0],
      () => defaultTransitions[props.position][1]
    );
    const { showPortal, hidePortal, portalIsAccessible, renderPortal } = usePortal(
      vm,
      innerRef,
      renderPortalContent,
      "dialog"
    );
    const { hide } = useModelToggle({
      showing,
      hideOnRouteChange,
      handleShow,
      handleHide,
      processOnMount: true
    });
    const { addToHistory, removeFromHistory } = useHistory(showing, hide, hideOnRouteChange);
    const classes = computed(
      () => `q-dialog__inner flex no-pointer-events q-dialog__inner--${props.maximized === true ? "maximized" : "minimized"} q-dialog__inner--${props.position} ${positionClass[props.position]}` + (animating.value === true ? " q-dialog__inner--animating" : "") + (props.fullWidth === true ? " q-dialog__inner--fullwidth" : "") + (props.fullHeight === true ? " q-dialog__inner--fullheight" : "") + (props.square === true ? " q-dialog__inner--square" : "")
    );
    const useBackdrop = computed(() => showing.value === true && props.seamless !== true);
    const onEvents = computed(() => props.autoClose === true ? { onClick: onAutoClose } : {});
    const rootClasses = computed(() => [
      `q-dialog fullscreen no-pointer-events q-dialog--${useBackdrop.value === true ? "modal" : "seamless"}`,
      attrs.class
    ]);
    watch(() => props.maximized, (state) => {
      showing.value === true && updateMaximized(state);
    });
    watch(useBackdrop, (val) => {
      preventBodyScroll(val);
      if (val === true) {
        addFocusout(onFocusChange);
        addEscapeKey(onEscapeKey);
      } else {
        removeFocusout(onFocusChange);
        removeEscapeKey(onEscapeKey);
      }
    });
    function handleShow(evt) {
      addToHistory();
      refocusTarget = props.noRefocus === false && document.activeElement !== null ? document.activeElement : null;
      updateMaximized(props.maximized);
      showPortal();
      animating.value = true;
      if (props.noFocus !== true) {
        document.activeElement !== null && document.activeElement.blur();
        registerTick(focus);
      } else {
        removeTick();
      }
      registerTimeout(() => {
        if (vm.proxy.$q.platform.is.ios === true) {
          if (props.seamless !== true && document.activeElement) {
            const { top, bottom } = document.activeElement.getBoundingClientRect(), { innerHeight } = window, height = window.visualViewport !== void 0 ? window.visualViewport.height : innerHeight;
            if (top > 0 && bottom > height / 2) {
              document.scrollingElement.scrollTop = Math.min(
                document.scrollingElement.scrollHeight - height,
                bottom >= innerHeight ? Infinity : Math.ceil(document.scrollingElement.scrollTop + bottom - height / 2)
              );
            }
            document.activeElement.scrollIntoView();
          }
          avoidAutoClose = true;
          innerRef.value.click();
          avoidAutoClose = false;
        }
        showPortal(true);
        animating.value = false;
        emit2("show", evt);
      }, props.transitionDuration);
    }
    function handleHide(evt) {
      removeTick();
      removeFromHistory();
      cleanup(true);
      animating.value = true;
      hidePortal();
      if (refocusTarget !== null) {
        ((evt && evt.type.indexOf("key") === 0 ? refocusTarget.closest('[tabindex]:not([tabindex^="-"])') : void 0) || refocusTarget).focus();
        refocusTarget = null;
      }
      registerTimeout(() => {
        hidePortal(true);
        animating.value = false;
        emit2("hide", evt);
      }, props.transitionDuration);
    }
    function focus(selector) {
      addFocusFn(() => {
        let node = innerRef.value;
        if (node === null || node.contains(document.activeElement) === true) {
          return;
        }
        node = (selector !== "" ? node.querySelector(selector) : null) || node.querySelector("[autofocus][tabindex], [data-autofocus][tabindex]") || node.querySelector("[autofocus] [tabindex], [data-autofocus] [tabindex]") || node.querySelector("[autofocus], [data-autofocus]") || node;
        node.focus({ preventScroll: true });
      });
    }
    function shake(focusTarget) {
      if (focusTarget && typeof focusTarget.focus === "function") {
        focusTarget.focus({ preventScroll: true });
      } else {
        focus();
      }
      emit2("shake");
      const node = innerRef.value;
      if (node !== null) {
        node.classList.remove("q-animate--scale");
        node.classList.add("q-animate--scale");
        shakeTimeout !== null && clearTimeout(shakeTimeout);
        shakeTimeout = setTimeout(() => {
          shakeTimeout = null;
          if (innerRef.value !== null) {
            node.classList.remove("q-animate--scale");
            focus();
          }
        }, 170);
      }
    }
    function onEscapeKey() {
      if (props.seamless !== true) {
        if (props.persistent === true || props.noEscDismiss === true) {
          props.maximized !== true && props.noShake !== true && shake();
        } else {
          emit2("escapeKey");
          hide();
        }
      }
    }
    function cleanup(hiding) {
      if (shakeTimeout !== null) {
        clearTimeout(shakeTimeout);
        shakeTimeout = null;
      }
      if (hiding === true || showing.value === true) {
        updateMaximized(false);
        if (props.seamless !== true) {
          preventBodyScroll(false);
          removeFocusout(onFocusChange);
          removeEscapeKey(onEscapeKey);
        }
      }
      if (hiding !== true) {
        refocusTarget = null;
      }
    }
    function updateMaximized(active) {
      if (active === true) {
        if (isMaximized !== true) {
          maximizedModals < 1 && document.body.classList.add("q-body--dialog");
          maximizedModals++;
          isMaximized = true;
        }
      } else if (isMaximized === true) {
        if (maximizedModals < 2) {
          document.body.classList.remove("q-body--dialog");
        }
        maximizedModals--;
        isMaximized = false;
      }
    }
    function onAutoClose(e) {
      if (avoidAutoClose !== true) {
        hide(e);
        emit2("click", e);
      }
    }
    function onBackdropClick(e) {
      if (props.persistent !== true && props.noBackdropDismiss !== true) {
        hide(e);
      } else if (props.noShake !== true) {
        shake();
      }
    }
    function onFocusChange(evt) {
      if (props.allowFocusOutside !== true && portalIsAccessible.value === true && childHasFocus(innerRef.value, evt.target) !== true) {
        focus('[tabindex]:not([tabindex="-1"])');
      }
    }
    Object.assign(vm.proxy, {
      // expose public methods
      focus,
      shake,
      // private but needed by QSelect
      __updateRefocusTarget(target2) {
        refocusTarget = target2 || null;
      }
    });
    onBeforeUnmount(cleanup);
    function renderPortalContent() {
      return h("div", {
        role: "dialog",
        "aria-modal": useBackdrop.value === true ? "true" : "false",
        ...attrs,
        class: rootClasses.value
      }, [
        h(Transition, {
          name: "q-transition--fade",
          appear: true
        }, () => useBackdrop.value === true ? h("div", {
          class: "q-dialog__backdrop fixed-full",
          style: transitionStyle.value,
          "aria-hidden": "true",
          tabindex: -1,
          onClick: onBackdropClick
        }) : null),
        h(
          Transition,
          transitionProps.value,
          () => showing.value === true ? h("div", {
            ref: innerRef,
            class: classes.value,
            style: transitionStyle.value,
            tabindex: -1,
            ...onEvents.value
          }, hSlot(slots.default)) : null
        )
      ]);
    }
    return renderPortal;
  }
});
let rtlHasScrollBug = false;
{
  const scroller = document.createElement("div");
  scroller.setAttribute("dir", "rtl");
  Object.assign(scroller.style, {
    width: "1px",
    height: "1px",
    overflow: "auto"
  });
  const spacer = document.createElement("div");
  Object.assign(spacer.style, {
    width: "1000px",
    height: "1px"
  });
  document.body.appendChild(scroller);
  scroller.appendChild(spacer);
  scroller.scrollLeft = -1e3;
  rtlHasScrollBug = scroller.scrollLeft >= 0;
  scroller.remove();
}
const aggBucketSize = 1e3;
const scrollToEdges = [
  "start",
  "center",
  "end",
  "start-force",
  "center-force",
  "end-force"
];
const filterProto = Array.prototype.filter;
const setOverflowAnchor = window.getComputedStyle(document.body).overflowAnchor === void 0 ? noop : function(contentEl, index2) {
  if (contentEl === null) {
    return;
  }
  if (contentEl._qOverflowAnimationFrame !== void 0) {
    cancelAnimationFrame(contentEl._qOverflowAnimationFrame);
  }
  contentEl._qOverflowAnimationFrame = requestAnimationFrame(() => {
    if (contentEl === null) {
      return;
    }
    contentEl._qOverflowAnimationFrame = void 0;
    const children = contentEl.children || [];
    filterProto.call(children, (el2) => el2.dataset && el2.dataset.qVsAnchor !== void 0).forEach((el2) => {
      delete el2.dataset.qVsAnchor;
    });
    const el = children[index2];
    if (el && el.dataset) {
      el.dataset.qVsAnchor = "";
    }
  });
};
function sumFn(acc, h2) {
  return acc + h2;
}
function getScrollDetails(parent, child, beforeRef, afterRef, horizontal, rtl, stickyStart, stickyEnd) {
  const parentCalc = parent === window ? document.scrollingElement || document.documentElement : parent, propElSize = horizontal === true ? "offsetWidth" : "offsetHeight", details = {
    scrollStart: 0,
    scrollViewSize: -stickyStart - stickyEnd,
    scrollMaxSize: 0,
    offsetStart: -stickyStart,
    offsetEnd: -stickyEnd
  };
  if (horizontal === true) {
    if (parent === window) {
      details.scrollStart = window.pageXOffset || window.scrollX || document.body.scrollLeft || 0;
      details.scrollViewSize += document.documentElement.clientWidth;
    } else {
      details.scrollStart = parentCalc.scrollLeft;
      details.scrollViewSize += parentCalc.clientWidth;
    }
    details.scrollMaxSize = parentCalc.scrollWidth;
    if (rtl === true) {
      details.scrollStart = (rtlHasScrollBug === true ? details.scrollMaxSize - details.scrollViewSize : 0) - details.scrollStart;
    }
  } else {
    if (parent === window) {
      details.scrollStart = window.pageYOffset || window.scrollY || document.body.scrollTop || 0;
      details.scrollViewSize += document.documentElement.clientHeight;
    } else {
      details.scrollStart = parentCalc.scrollTop;
      details.scrollViewSize += parentCalc.clientHeight;
    }
    details.scrollMaxSize = parentCalc.scrollHeight;
  }
  if (beforeRef !== null) {
    for (let el = beforeRef.previousElementSibling; el !== null; el = el.previousElementSibling) {
      if (el.classList.contains("q-virtual-scroll--skip") === false) {
        details.offsetStart += el[propElSize];
      }
    }
  }
  if (afterRef !== null) {
    for (let el = afterRef.nextElementSibling; el !== null; el = el.nextElementSibling) {
      if (el.classList.contains("q-virtual-scroll--skip") === false) {
        details.offsetEnd += el[propElSize];
      }
    }
  }
  if (child !== parent) {
    const parentRect = parentCalc.getBoundingClientRect(), childRect = child.getBoundingClientRect();
    if (horizontal === true) {
      details.offsetStart += childRect.left - parentRect.left;
      details.offsetEnd -= childRect.width;
    } else {
      details.offsetStart += childRect.top - parentRect.top;
      details.offsetEnd -= childRect.height;
    }
    if (parent !== window) {
      details.offsetStart += details.scrollStart;
    }
    details.offsetEnd += details.scrollMaxSize - details.offsetStart;
  }
  return details;
}
function setScroll(parent, scroll, horizontal, rtl) {
  if (scroll === "end") {
    scroll = (parent === window ? document.body : parent)[horizontal === true ? "scrollWidth" : "scrollHeight"];
  }
  if (parent === window) {
    if (horizontal === true) {
      if (rtl === true) {
        scroll = (rtlHasScrollBug === true ? document.body.scrollWidth - document.documentElement.clientWidth : 0) - scroll;
      }
      window.scrollTo(scroll, window.pageYOffset || window.scrollY || document.body.scrollTop || 0);
    } else {
      window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, scroll);
    }
  } else if (horizontal === true) {
    if (rtl === true) {
      scroll = (rtlHasScrollBug === true ? parent.scrollWidth - parent.offsetWidth : 0) - scroll;
    }
    parent.scrollLeft = scroll;
  } else {
    parent.scrollTop = scroll;
  }
}
function sumSize(sizeAgg, size2, from, to) {
  if (from >= to) {
    return 0;
  }
  const lastTo = size2.length, fromAgg = Math.floor(from / aggBucketSize), toAgg = Math.floor((to - 1) / aggBucketSize) + 1;
  let total = sizeAgg.slice(fromAgg, toAgg).reduce(sumFn, 0);
  if (from % aggBucketSize !== 0) {
    total -= size2.slice(fromAgg * aggBucketSize, from).reduce(sumFn, 0);
  }
  if (to % aggBucketSize !== 0 && to !== lastTo) {
    total -= size2.slice(to, toAgg * aggBucketSize).reduce(sumFn, 0);
  }
  return total;
}
const commonVirtScrollProps = {
  virtualScrollSliceSize: {
    type: [Number, String],
    default: null
  },
  virtualScrollSliceRatioBefore: {
    type: [Number, String],
    default: 1
  },
  virtualScrollSliceRatioAfter: {
    type: [Number, String],
    default: 1
  },
  virtualScrollItemSize: {
    type: [Number, String],
    default: 24
  },
  virtualScrollStickySizeStart: {
    type: [Number, String],
    default: 0
  },
  virtualScrollStickySizeEnd: {
    type: [Number, String],
    default: 0
  },
  tableColspan: [Number, String]
};
const useVirtualScrollProps = {
  virtualScrollHorizontal: Boolean,
  onVirtualScroll: Function,
  ...commonVirtScrollProps
};
function useVirtualScroll({
  virtualScrollLength,
  getVirtualScrollTarget,
  getVirtualScrollEl,
  virtualScrollItemSizeComputed
  // optional
}) {
  const vm = getCurrentInstance();
  const { props, emit: emit2, proxy } = vm;
  const { $q } = proxy;
  let prevScrollStart, prevToIndex, localScrollViewSize, virtualScrollSizesAgg = [], virtualScrollSizes;
  const virtualScrollPaddingBefore = ref(0);
  const virtualScrollPaddingAfter = ref(0);
  const virtualScrollSliceSizeComputed = ref({});
  const beforeRef = ref(null);
  const afterRef = ref(null);
  const contentRef = ref(null);
  const virtualScrollSliceRange = ref({ from: 0, to: 0 });
  const colspanAttr = computed(() => props.tableColspan !== void 0 ? props.tableColspan : 100);
  if (virtualScrollItemSizeComputed === void 0) {
    virtualScrollItemSizeComputed = computed(() => props.virtualScrollItemSize);
  }
  const needsReset = computed(() => virtualScrollItemSizeComputed.value + ";" + props.virtualScrollHorizontal);
  const needsSliceRecalc = computed(
    () => needsReset.value + ";" + props.virtualScrollSliceRatioBefore + ";" + props.virtualScrollSliceRatioAfter
  );
  watch(needsSliceRecalc, () => {
    setVirtualScrollSize();
  });
  watch(needsReset, reset);
  function reset() {
    localResetVirtualScroll(prevToIndex, true);
  }
  function refresh(toIndex) {
    localResetVirtualScroll(toIndex === void 0 ? prevToIndex : toIndex);
  }
  function scrollTo(toIndex, edge) {
    const scrollEl = getVirtualScrollTarget();
    if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {
      return;
    }
    const scrollDetails = getScrollDetails(
      scrollEl,
      getVirtualScrollEl(),
      beforeRef.value,
      afterRef.value,
      props.virtualScrollHorizontal,
      $q.lang.rtl,
      props.virtualScrollStickySizeStart,
      props.virtualScrollStickySizeEnd
    );
    localScrollViewSize !== scrollDetails.scrollViewSize && setVirtualScrollSize(scrollDetails.scrollViewSize);
    setVirtualScrollSliceRange(
      scrollEl,
      scrollDetails,
      Math.min(virtualScrollLength.value - 1, Math.max(0, parseInt(toIndex, 10) || 0)),
      0,
      scrollToEdges.indexOf(edge) > -1 ? edge : prevToIndex > -1 && toIndex > prevToIndex ? "end" : "start"
    );
  }
  function localOnVirtualScrollEvt() {
    const scrollEl = getVirtualScrollTarget();
    if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {
      return;
    }
    const scrollDetails = getScrollDetails(
      scrollEl,
      getVirtualScrollEl(),
      beforeRef.value,
      afterRef.value,
      props.virtualScrollHorizontal,
      $q.lang.rtl,
      props.virtualScrollStickySizeStart,
      props.virtualScrollStickySizeEnd
    ), listLastIndex = virtualScrollLength.value - 1, listEndOffset = scrollDetails.scrollMaxSize - scrollDetails.offsetStart - scrollDetails.offsetEnd - virtualScrollPaddingAfter.value;
    if (prevScrollStart === scrollDetails.scrollStart) {
      return;
    }
    if (scrollDetails.scrollMaxSize <= 0) {
      setVirtualScrollSliceRange(scrollEl, scrollDetails, 0, 0);
      return;
    }
    localScrollViewSize !== scrollDetails.scrollViewSize && setVirtualScrollSize(scrollDetails.scrollViewSize);
    updateVirtualScrollSizes(virtualScrollSliceRange.value.from);
    const scrollMaxStart = Math.floor(scrollDetails.scrollMaxSize - Math.max(scrollDetails.scrollViewSize, scrollDetails.offsetEnd) - Math.min(virtualScrollSizes[listLastIndex], scrollDetails.scrollViewSize / 2));
    if (scrollMaxStart > 0 && Math.ceil(scrollDetails.scrollStart) >= scrollMaxStart) {
      setVirtualScrollSliceRange(
        scrollEl,
        scrollDetails,
        listLastIndex,
        scrollDetails.scrollMaxSize - scrollDetails.offsetEnd - virtualScrollSizesAgg.reduce(sumFn, 0)
      );
      return;
    }
    let toIndex = 0, listOffset = scrollDetails.scrollStart - scrollDetails.offsetStart, offset = listOffset;
    if (listOffset <= listEndOffset && listOffset + scrollDetails.scrollViewSize >= virtualScrollPaddingBefore.value) {
      listOffset -= virtualScrollPaddingBefore.value;
      toIndex = virtualScrollSliceRange.value.from;
      offset = listOffset;
    } else {
      for (let j = 0; listOffset >= virtualScrollSizesAgg[j] && toIndex < listLastIndex; j++) {
        listOffset -= virtualScrollSizesAgg[j];
        toIndex += aggBucketSize;
      }
    }
    while (listOffset > 0 && toIndex < listLastIndex) {
      listOffset -= virtualScrollSizes[toIndex];
      if (listOffset > -scrollDetails.scrollViewSize) {
        toIndex++;
        offset = listOffset;
      } else {
        offset = virtualScrollSizes[toIndex] + listOffset;
      }
    }
    setVirtualScrollSliceRange(
      scrollEl,
      scrollDetails,
      toIndex,
      offset
    );
  }
  function setVirtualScrollSliceRange(scrollEl, scrollDetails, toIndex, offset, align) {
    const alignForce = typeof align === "string" && align.indexOf("-force") > -1;
    const alignEnd = alignForce === true ? align.replace("-force", "") : align;
    const alignRange = alignEnd !== void 0 ? alignEnd : "start";
    let from = Math.max(0, toIndex - virtualScrollSliceSizeComputed.value[alignRange]), to = from + virtualScrollSliceSizeComputed.value.total;
    if (to > virtualScrollLength.value) {
      to = virtualScrollLength.value;
      from = Math.max(0, to - virtualScrollSliceSizeComputed.value.total);
    }
    prevScrollStart = scrollDetails.scrollStart;
    const rangeChanged = from !== virtualScrollSliceRange.value.from || to !== virtualScrollSliceRange.value.to;
    if (rangeChanged === false && alignEnd === void 0) {
      emitScroll(toIndex);
      return;
    }
    const { activeElement } = document;
    const contentEl = contentRef.value;
    if (rangeChanged === true && contentEl !== null && contentEl !== activeElement && contentEl.contains(activeElement) === true) {
      contentEl.addEventListener("focusout", onBlurRefocusFn);
      setTimeout(() => {
        contentEl !== null && contentEl.removeEventListener("focusout", onBlurRefocusFn);
      });
    }
    setOverflowAnchor(contentEl, toIndex - from);
    const sizeBefore = alignEnd !== void 0 ? virtualScrollSizes.slice(from, toIndex).reduce(sumFn, 0) : 0;
    if (rangeChanged === true) {
      const tempTo = to >= virtualScrollSliceRange.value.from && from <= virtualScrollSliceRange.value.to ? virtualScrollSliceRange.value.to : to;
      virtualScrollSliceRange.value = { from, to: tempTo };
      virtualScrollPaddingBefore.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, 0, from);
      virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, to, virtualScrollLength.value);
      requestAnimationFrame(() => {
        if (virtualScrollSliceRange.value.to !== to && prevScrollStart === scrollDetails.scrollStart) {
          virtualScrollSliceRange.value = { from: virtualScrollSliceRange.value.from, to };
          virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, to, virtualScrollLength.value);
        }
      });
    }
    requestAnimationFrame(() => {
      if (prevScrollStart !== scrollDetails.scrollStart) {
        return;
      }
      if (rangeChanged === true) {
        updateVirtualScrollSizes(from);
      }
      const sizeAfter = virtualScrollSizes.slice(from, toIndex).reduce(sumFn, 0), posStart = sizeAfter + scrollDetails.offsetStart + virtualScrollPaddingBefore.value, posEnd = posStart + virtualScrollSizes[toIndex];
      let scrollPosition = posStart + offset;
      if (alignEnd !== void 0) {
        const sizeDiff = sizeAfter - sizeBefore;
        const scrollStart = scrollDetails.scrollStart + sizeDiff;
        scrollPosition = alignForce !== true && scrollStart < posStart && posEnd < scrollStart + scrollDetails.scrollViewSize ? scrollStart : alignEnd === "end" ? posEnd - scrollDetails.scrollViewSize : posStart - (alignEnd === "start" ? 0 : Math.round((scrollDetails.scrollViewSize - virtualScrollSizes[toIndex]) / 2));
      }
      prevScrollStart = scrollPosition;
      setScroll(
        scrollEl,
        scrollPosition,
        props.virtualScrollHorizontal,
        $q.lang.rtl
      );
      emitScroll(toIndex);
    });
  }
  function updateVirtualScrollSizes(from) {
    const contentEl = contentRef.value;
    if (contentEl) {
      const children = filterProto.call(
        contentEl.children,
        (el) => el.classList && el.classList.contains("q-virtual-scroll--skip") === false
      ), childrenLength = children.length, sizeFn = props.virtualScrollHorizontal === true ? (el) => el.getBoundingClientRect().width : (el) => el.offsetHeight;
      let index2 = from, size2, diff2;
      for (let i2 = 0; i2 < childrenLength; ) {
        size2 = sizeFn(children[i2]);
        i2++;
        while (i2 < childrenLength && children[i2].classList.contains("q-virtual-scroll--with-prev") === true) {
          size2 += sizeFn(children[i2]);
          i2++;
        }
        diff2 = size2 - virtualScrollSizes[index2];
        if (diff2 !== 0) {
          virtualScrollSizes[index2] += diff2;
          virtualScrollSizesAgg[Math.floor(index2 / aggBucketSize)] += diff2;
        }
        index2++;
      }
    }
  }
  function onBlurRefocusFn() {
    contentRef.value !== null && contentRef.value !== void 0 && contentRef.value.focus();
  }
  function localResetVirtualScroll(toIndex, fullReset) {
    const defaultSize = 1 * virtualScrollItemSizeComputed.value;
    if (fullReset === true || Array.isArray(virtualScrollSizes) === false) {
      virtualScrollSizes = [];
    }
    const oldVirtualScrollSizesLength = virtualScrollSizes.length;
    virtualScrollSizes.length = virtualScrollLength.value;
    for (let i2 = virtualScrollLength.value - 1; i2 >= oldVirtualScrollSizesLength; i2--) {
      virtualScrollSizes[i2] = defaultSize;
    }
    const jMax = Math.floor((virtualScrollLength.value - 1) / aggBucketSize);
    virtualScrollSizesAgg = [];
    for (let j = 0; j <= jMax; j++) {
      let size2 = 0;
      const iMax = Math.min((j + 1) * aggBucketSize, virtualScrollLength.value);
      for (let i2 = j * aggBucketSize; i2 < iMax; i2++) {
        size2 += virtualScrollSizes[i2];
      }
      virtualScrollSizesAgg.push(size2);
    }
    prevToIndex = -1;
    prevScrollStart = void 0;
    virtualScrollPaddingBefore.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, 0, virtualScrollSliceRange.value.from);
    virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, virtualScrollSliceRange.value.to, virtualScrollLength.value);
    if (toIndex >= 0) {
      updateVirtualScrollSizes(virtualScrollSliceRange.value.from);
      nextTick$1(() => {
        scrollTo(toIndex);
      });
    } else {
      onVirtualScrollEvt();
    }
  }
  function setVirtualScrollSize(scrollViewSize) {
    if (scrollViewSize === void 0 && typeof window !== "undefined") {
      const scrollEl = getVirtualScrollTarget();
      if (scrollEl !== void 0 && scrollEl !== null && scrollEl.nodeType !== 8) {
        scrollViewSize = getScrollDetails(
          scrollEl,
          getVirtualScrollEl(),
          beforeRef.value,
          afterRef.value,
          props.virtualScrollHorizontal,
          $q.lang.rtl,
          props.virtualScrollStickySizeStart,
          props.virtualScrollStickySizeEnd
        ).scrollViewSize;
      }
    }
    localScrollViewSize = scrollViewSize;
    const virtualScrollSliceRatioBefore = parseFloat(props.virtualScrollSliceRatioBefore) || 0;
    const virtualScrollSliceRatioAfter = parseFloat(props.virtualScrollSliceRatioAfter) || 0;
    const multiplier = 1 + virtualScrollSliceRatioBefore + virtualScrollSliceRatioAfter;
    const view = scrollViewSize === void 0 || scrollViewSize <= 0 ? 1 : Math.ceil(scrollViewSize / virtualScrollItemSizeComputed.value);
    const baseSize = Math.max(
      1,
      view,
      Math.ceil((props.virtualScrollSliceSize > 0 ? props.virtualScrollSliceSize : 10) / multiplier)
    );
    virtualScrollSliceSizeComputed.value = {
      total: Math.ceil(baseSize * multiplier),
      start: Math.ceil(baseSize * virtualScrollSliceRatioBefore),
      center: Math.ceil(baseSize * (0.5 + virtualScrollSliceRatioBefore)),
      end: Math.ceil(baseSize * (1 + virtualScrollSliceRatioBefore)),
      view
    };
  }
  function padVirtualScroll(tag, content) {
    const paddingSize = props.virtualScrollHorizontal === true ? "width" : "height";
    const style = {
      ["--q-virtual-scroll-item-" + paddingSize]: virtualScrollItemSizeComputed.value + "px"
    };
    return [
      tag === "tbody" ? h(tag, {
        class: "q-virtual-scroll__padding",
        key: "before",
        ref: beforeRef
      }, [
        h("tr", [
          h("td", {
            style: { [paddingSize]: `${virtualScrollPaddingBefore.value}px`, ...style },
            colspan: colspanAttr.value
          })
        ])
      ]) : h(tag, {
        class: "q-virtual-scroll__padding",
        key: "before",
        ref: beforeRef,
        style: { [paddingSize]: `${virtualScrollPaddingBefore.value}px`, ...style }
      }),
      h(tag, {
        class: "q-virtual-scroll__content",
        key: "content",
        ref: contentRef,
        tabindex: -1
      }, content.flat()),
      tag === "tbody" ? h(tag, {
        class: "q-virtual-scroll__padding",
        key: "after",
        ref: afterRef
      }, [
        h("tr", [
          h("td", {
            style: { [paddingSize]: `${virtualScrollPaddingAfter.value}px`, ...style },
            colspan: colspanAttr.value
          })
        ])
      ]) : h(tag, {
        class: "q-virtual-scroll__padding",
        key: "after",
        ref: afterRef,
        style: { [paddingSize]: `${virtualScrollPaddingAfter.value}px`, ...style }
      })
    ];
  }
  function emitScroll(index2) {
    if (prevToIndex !== index2) {
      props.onVirtualScroll !== void 0 && emit2("virtualScroll", {
        index: index2,
        from: virtualScrollSliceRange.value.from,
        to: virtualScrollSliceRange.value.to - 1,
        direction: index2 < prevToIndex ? "decrease" : "increase",
        ref: proxy
      });
      prevToIndex = index2;
    }
  }
  setVirtualScrollSize();
  const onVirtualScrollEvt = debounce(
    localOnVirtualScrollEvt,
    $q.platform.is.ios === true ? 120 : 35
  );
  onBeforeMount(() => {
    setVirtualScrollSize();
  });
  let shouldActivate = false;
  onDeactivated(() => {
    shouldActivate = true;
  });
  onActivated(() => {
    if (shouldActivate !== true) {
      return;
    }
    const scrollEl = getVirtualScrollTarget();
    if (prevScrollStart !== void 0 && scrollEl !== void 0 && scrollEl !== null && scrollEl.nodeType !== 8) {
      setScroll(
        scrollEl,
        prevScrollStart,
        props.virtualScrollHorizontal,
        $q.lang.rtl
      );
    } else {
      scrollTo(prevToIndex);
    }
  });
  onBeforeUnmount(() => {
    onVirtualScrollEvt.cancel();
  });
  Object.assign(proxy, { scrollTo, reset, refresh });
  return {
    virtualScrollSliceRange,
    virtualScrollSliceSizeComputed,
    setVirtualScrollSize,
    onVirtualScrollEvt,
    localResetVirtualScroll,
    padVirtualScroll,
    scrollTo,
    reset,
    refresh
  };
}
const useFormProps = {
  name: String
};
function useFormInject(formAttrs = {}) {
  return (child, action, className) => {
    child[action](
      h("input", {
        class: "hidden" + (className || ""),
        ...formAttrs.value
      })
    );
  };
}
function useFormInputNameAttr(props) {
  return computed(() => props.name || props.for);
}
const isJapanese = /[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/;
const isChinese = /[\u4e00-\u9fff\u3400-\u4dbf\u{20000}-\u{2a6df}\u{2a700}-\u{2b73f}\u{2b740}-\u{2b81f}\u{2b820}-\u{2ceaf}\uf900-\ufaff\u3300-\u33ff\ufe30-\ufe4f\uf900-\ufaff\u{2f800}-\u{2fa1f}]/u;
const isKorean = /[\u3131-\u314e\u314f-\u3163\uac00-\ud7a3]/;
const isPlainText = /[a-z0-9_ -]$/i;
function useKeyComposition(onInput) {
  return function onComposition(e) {
    if (e.type === "compositionend" || e.type === "change") {
      if (e.target.qComposing !== true) {
        return;
      }
      e.target.qComposing = false;
      onInput(e);
    } else if (e.type === "compositionupdate" && e.target.qComposing !== true && typeof e.data === "string") {
      const isComposing = client.is.firefox === true ? isPlainText.test(e.data) === false : isJapanese.test(e.data) === true || isChinese.test(e.data) === true || isKorean.test(e.data) === true;
      if (isComposing === true) {
        e.target.qComposing = true;
      }
    }
  };
}
function between(v, min, max) {
  return max <= min ? min : Math.min(max, Math.max(min, v));
}
function normalizeToInterval(v, min, max) {
  if (max <= min) {
    return min;
  }
  const size2 = max - min + 1;
  let index2 = min + (v - min) % size2;
  if (index2 < min) {
    index2 = size2 + index2;
  }
  return index2 === 0 ? 0 : index2;
}
const validateNewValueMode = (v) => ["add", "add-unique", "toggle"].includes(v);
const reEscapeList = ".*+?^${}()|[]\\";
const fieldPropsList = Object.keys(useFieldProps);
const QSelect = createComponent({
  name: "QSelect",
  inheritAttrs: false,
  props: {
    ...useVirtualScrollProps,
    ...useFormProps,
    ...useFieldProps,
    modelValue: {
      required: true
    },
    multiple: Boolean,
    displayValue: [String, Number],
    displayValueHtml: Boolean,
    dropdownIcon: String,
    options: {
      type: Array,
      default: () => []
    },
    optionValue: [Function, String],
    optionLabel: [Function, String],
    optionDisable: [Function, String],
    hideSelected: Boolean,
    hideDropdownIcon: Boolean,
    fillInput: Boolean,
    maxValues: [Number, String],
    optionsDense: Boolean,
    optionsDark: {
      type: Boolean,
      default: null
    },
    optionsSelectedClass: String,
    optionsHtml: Boolean,
    optionsCover: Boolean,
    menuShrink: Boolean,
    menuAnchor: String,
    menuSelf: String,
    menuOffset: Array,
    popupContentClass: String,
    popupContentStyle: [String, Array, Object],
    useInput: Boolean,
    useChips: Boolean,
    newValueMode: {
      type: String,
      validator: validateNewValueMode
    },
    mapOptions: Boolean,
    emitValue: Boolean,
    inputDebounce: {
      type: [Number, String],
      default: 500
    },
    inputClass: [Array, String, Object],
    inputStyle: [Array, String, Object],
    tabindex: {
      type: [String, Number],
      default: 0
    },
    autocomplete: String,
    transitionShow: String,
    transitionHide: String,
    transitionDuration: [String, Number],
    behavior: {
      type: String,
      validator: (v) => ["default", "menu", "dialog"].includes(v),
      default: "default"
    },
    virtualScrollItemSize: {
      type: [Number, String],
      default: void 0
    },
    onNewValue: Function,
    onFilter: Function
  },
  emits: [
    ...useFieldEmits,
    "add",
    "remove",
    "inputValue",
    "newValue",
    "keyup",
    "keypress",
    "keydown",
    "filterAbort"
  ],
  setup(props, { slots, emit: emit2 }) {
    const { proxy } = getCurrentInstance();
    const { $q } = proxy;
    const menu = ref(false);
    const dialog = ref(false);
    const optionIndex = ref(-1);
    const inputValue = ref("");
    const dialogFieldFocused = ref(false);
    const innerLoadingIndicator = ref(false);
    let inputTimer = null, innerValueCache, hasDialog, userInputValue, filterId = null, defaultInputValue, transitionShowComputed, searchBuffer, searchBufferExp;
    const inputRef = ref(null);
    const targetRef = ref(null);
    const menuRef = ref(null);
    const dialogRef = ref(null);
    const menuContentRef = ref(null);
    const nameProp = useFormInputNameAttr(props);
    const onComposition = useKeyComposition(onInput);
    const virtualScrollLength = computed(() => Array.isArray(props.options) ? props.options.length : 0);
    const virtualScrollItemSizeComputed = computed(() => props.virtualScrollItemSize === void 0 ? props.optionsDense === true ? 24 : 48 : props.virtualScrollItemSize);
    const {
      virtualScrollSliceRange,
      virtualScrollSliceSizeComputed,
      localResetVirtualScroll,
      padVirtualScroll,
      onVirtualScrollEvt,
      scrollTo,
      setVirtualScrollSize
    } = useVirtualScroll({
      virtualScrollLength,
      getVirtualScrollTarget,
      getVirtualScrollEl,
      virtualScrollItemSizeComputed
    });
    const state = useFieldState();
    const innerValue = computed(() => {
      const mapNull = props.mapOptions === true && props.multiple !== true, val = props.modelValue !== void 0 && (props.modelValue !== null || mapNull === true) ? props.multiple === true && Array.isArray(props.modelValue) ? props.modelValue : [props.modelValue] : [];
      if (props.mapOptions === true && Array.isArray(props.options) === true) {
        const cache2 = props.mapOptions === true && innerValueCache !== void 0 ? innerValueCache : [];
        const values = val.map((v) => getOption(v, cache2));
        return props.modelValue === null && mapNull === true ? values.filter((v) => v !== null) : values;
      }
      return val;
    });
    const innerFieldProps = computed(() => {
      const acc = {};
      fieldPropsList.forEach((key) => {
        const val = props[key];
        if (val !== void 0) {
          acc[key] = val;
        }
      });
      return acc;
    });
    const isOptionsDark = computed(() => props.optionsDark === null ? state.isDark.value : props.optionsDark);
    const hasValue = computed(() => fieldValueIsFilled(innerValue.value));
    const computedInputClass = computed(() => {
      let cls = "q-field__input q-placeholder col";
      if (props.hideSelected === true || innerValue.value.length === 0) {
        return [cls, props.inputClass];
      }
      cls += " q-field__input--padding";
      return props.inputClass === void 0 ? cls : [cls, props.inputClass];
    });
    const menuContentClass = computed(
      () => (props.virtualScrollHorizontal === true ? "q-virtual-scroll--horizontal" : "") + (props.popupContentClass ? " " + props.popupContentClass : "")
    );
    const noOptions = computed(() => virtualScrollLength.value === 0);
    const selectedString = computed(
      () => innerValue.value.map((opt) => getOptionLabel.value(opt)).join(", ")
    );
    const ariaCurrentValue = computed(() => props.displayValue !== void 0 ? props.displayValue : selectedString.value);
    const needsHtmlFn = computed(() => props.optionsHtml === true ? () => true : (opt) => opt !== void 0 && opt !== null && opt.html === true);
    const valueAsHtml = computed(() => props.displayValueHtml === true || props.displayValue === void 0 && (props.optionsHtml === true || innerValue.value.some(needsHtmlFn.value)));
    const tabindex = computed(() => state.focused.value === true ? props.tabindex : -1);
    const comboboxAttrs = computed(() => {
      const attrs = {
        tabindex: props.tabindex,
        role: "combobox",
        "aria-label": props.label,
        "aria-readonly": props.readonly === true ? "true" : "false",
        "aria-autocomplete": props.useInput === true ? "list" : "none",
        "aria-expanded": menu.value === true ? "true" : "false",
        "aria-controls": `${state.targetUid.value}_lb`
      };
      if (optionIndex.value >= 0) {
        attrs["aria-activedescendant"] = `${state.targetUid.value}_${optionIndex.value}`;
      }
      return attrs;
    });
    const listboxAttrs = computed(() => ({
      id: `${state.targetUid.value}_lb`,
      role: "listbox",
      "aria-multiselectable": props.multiple === true ? "true" : "false"
    }));
    const selectedScope = computed(() => {
      return innerValue.value.map((opt, i2) => ({
        index: i2,
        opt,
        html: needsHtmlFn.value(opt),
        selected: true,
        removeAtIndex: removeAtIndexAndFocus,
        toggleOption,
        tabindex: tabindex.value
      }));
    });
    const optionScope = computed(() => {
      if (virtualScrollLength.value === 0) {
        return [];
      }
      const { from, to } = virtualScrollSliceRange.value;
      return props.options.slice(from, to).map((opt, i2) => {
        const disable = isOptionDisabled.value(opt) === true;
        const index2 = from + i2;
        const itemProps = {
          clickable: true,
          active: false,
          activeClass: computedOptionsSelectedClass.value,
          manualFocus: true,
          focused: false,
          disable,
          tabindex: -1,
          dense: props.optionsDense,
          dark: isOptionsDark.value,
          role: "option",
          id: `${state.targetUid.value}_${index2}`,
          onClick: () => {
            toggleOption(opt);
          }
        };
        if (disable !== true) {
          isOptionSelected(opt) === true && (itemProps.active = true);
          optionIndex.value === index2 && (itemProps.focused = true);
          itemProps["aria-selected"] = itemProps.active === true ? "true" : "false";
          if ($q.platform.is.desktop === true) {
            itemProps.onMousemove = () => {
              menu.value === true && setOptionIndex(index2);
            };
          }
        }
        return {
          index: index2,
          opt,
          html: needsHtmlFn.value(opt),
          label: getOptionLabel.value(opt),
          selected: itemProps.active,
          focused: itemProps.focused,
          toggleOption,
          setOptionIndex,
          itemProps
        };
      });
    });
    const dropdownArrowIcon = computed(() => props.dropdownIcon !== void 0 ? props.dropdownIcon : $q.iconSet.arrow.dropdown);
    const squaredMenu = computed(
      () => props.optionsCover === false && props.outlined !== true && props.standout !== true && props.borderless !== true && props.rounded !== true
    );
    const computedOptionsSelectedClass = computed(() => props.optionsSelectedClass !== void 0 ? props.optionsSelectedClass : props.color !== void 0 ? `text-${props.color}` : "");
    const getOptionValue = computed(() => getPropValueFn(props.optionValue, "value"));
    const getOptionLabel = computed(() => getPropValueFn(props.optionLabel, "label"));
    const isOptionDisabled = computed(() => getPropValueFn(props.optionDisable, "disable"));
    const innerOptionsValue = computed(() => innerValue.value.map((opt) => getOptionValue.value(opt)));
    const inputControlEvents = computed(() => {
      const evt = {
        onInput,
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        onChange: onComposition,
        onKeydown: onTargetKeydown,
        onKeyup: onTargetAutocomplete,
        onKeypress: onTargetKeypress,
        onFocus: selectInputText,
        onClick(e) {
          hasDialog === true && stop(e);
        }
      };
      evt.onCompositionstart = evt.onCompositionupdate = evt.onCompositionend = onComposition;
      return evt;
    });
    watch(innerValue, (val) => {
      innerValueCache = val;
      if (props.useInput === true && props.fillInput === true && props.multiple !== true && state.innerLoading.value !== true && (dialog.value !== true && menu.value !== true || hasValue.value !== true)) {
        userInputValue !== true && resetInputValue();
        if (dialog.value === true || menu.value === true) {
          filter("");
        }
      }
    }, { immediate: true });
    watch(() => props.fillInput, resetInputValue);
    watch(menu, updateMenu);
    watch(virtualScrollLength, rerenderMenu);
    function getEmittingOptionValue(opt) {
      return props.emitValue === true ? getOptionValue.value(opt) : opt;
    }
    function removeAtIndex(index2) {
      if (index2 > -1 && index2 < innerValue.value.length) {
        if (props.multiple === true) {
          const model = props.modelValue.slice();
          emit2("remove", { index: index2, value: model.splice(index2, 1)[0] });
          emit2("update:modelValue", model);
        } else {
          emit2("update:modelValue", null);
        }
      }
    }
    function removeAtIndexAndFocus(index2) {
      removeAtIndex(index2);
      state.focus();
    }
    function add2(opt, unique) {
      const val = getEmittingOptionValue(opt);
      if (props.multiple !== true) {
        props.fillInput === true && updateInputValue(
          getOptionLabel.value(opt),
          true,
          true
        );
        emit2("update:modelValue", val);
        return;
      }
      if (innerValue.value.length === 0) {
        emit2("add", { index: 0, value: val });
        emit2("update:modelValue", props.multiple === true ? [val] : val);
        return;
      }
      if (unique === true && isOptionSelected(opt) === true) {
        return;
      }
      if (props.maxValues !== void 0 && props.modelValue.length >= props.maxValues) {
        return;
      }
      const model = props.modelValue.slice();
      emit2("add", { index: model.length, value: val });
      model.push(val);
      emit2("update:modelValue", model);
    }
    function toggleOption(opt, keepOpen) {
      if (state.editable.value !== true || opt === void 0 || isOptionDisabled.value(opt) === true) {
        return;
      }
      const optValue = getOptionValue.value(opt);
      if (props.multiple !== true) {
        if (keepOpen !== true) {
          updateInputValue(
            props.fillInput === true ? getOptionLabel.value(opt) : "",
            true,
            true
          );
          hidePopup();
        }
        targetRef.value !== null && targetRef.value.focus();
        if (innerValue.value.length === 0 || isDeepEqual(getOptionValue.value(innerValue.value[0]), optValue) !== true) {
          emit2("update:modelValue", props.emitValue === true ? optValue : opt);
        }
        return;
      }
      (hasDialog !== true || dialogFieldFocused.value === true) && state.focus();
      selectInputText();
      if (innerValue.value.length === 0) {
        const val = props.emitValue === true ? optValue : opt;
        emit2("add", { index: 0, value: val });
        emit2("update:modelValue", props.multiple === true ? [val] : val);
        return;
      }
      const model = props.modelValue.slice(), index2 = innerOptionsValue.value.findIndex((v) => isDeepEqual(v, optValue));
      if (index2 > -1) {
        emit2("remove", { index: index2, value: model.splice(index2, 1)[0] });
      } else {
        if (props.maxValues !== void 0 && model.length >= props.maxValues) {
          return;
        }
        const val = props.emitValue === true ? optValue : opt;
        emit2("add", { index: model.length, value: val });
        model.push(val);
      }
      emit2("update:modelValue", model);
    }
    function setOptionIndex(index2) {
      if ($q.platform.is.desktop !== true) {
        return;
      }
      const val = index2 > -1 && index2 < virtualScrollLength.value ? index2 : -1;
      if (optionIndex.value !== val) {
        optionIndex.value = val;
      }
    }
    function moveOptionSelection(offset = 1, skipInputValue) {
      if (menu.value === true) {
        let index2 = optionIndex.value;
        do {
          index2 = normalizeToInterval(
            index2 + offset,
            -1,
            virtualScrollLength.value - 1
          );
        } while (index2 !== -1 && index2 !== optionIndex.value && isOptionDisabled.value(props.options[index2]) === true);
        if (optionIndex.value !== index2) {
          setOptionIndex(index2);
          scrollTo(index2);
          if (skipInputValue !== true && props.useInput === true && props.fillInput === true) {
            setInputValue(
              index2 >= 0 ? getOptionLabel.value(props.options[index2]) : defaultInputValue
            );
          }
        }
      }
    }
    function getOption(value2, valueCache) {
      const fn = (opt) => isDeepEqual(getOptionValue.value(opt), value2);
      return props.options.find(fn) || valueCache.find(fn) || value2;
    }
    function getPropValueFn(propValue, defaultVal) {
      const val = propValue !== void 0 ? propValue : defaultVal;
      return typeof val === "function" ? val : (opt) => opt !== null && typeof opt === "object" && val in opt ? opt[val] : opt;
    }
    function isOptionSelected(opt) {
      const val = getOptionValue.value(opt);
      return innerOptionsValue.value.find((v) => isDeepEqual(v, val)) !== void 0;
    }
    function selectInputText(e) {
      if (props.useInput === true && targetRef.value !== null && (e === void 0 || targetRef.value === e.target && e.target.value === selectedString.value)) {
        targetRef.value.select();
      }
    }
    function onTargetKeyup(e) {
      if (isKeyCode(e, 27) === true && menu.value === true) {
        stop(e);
        hidePopup();
        resetInputValue();
      }
      emit2("keyup", e);
    }
    function onTargetAutocomplete(e) {
      const { value: value2 } = e.target;
      if (e.keyCode !== void 0) {
        onTargetKeyup(e);
        return;
      }
      e.target.value = "";
      if (inputTimer !== null) {
        clearTimeout(inputTimer);
        inputTimer = null;
      }
      resetInputValue();
      if (typeof value2 === "string" && value2.length !== 0) {
        const needle = value2.toLocaleLowerCase();
        const findFn = (extractFn) => {
          const option = props.options.find((opt) => extractFn.value(opt).toLocaleLowerCase() === needle);
          if (option === void 0) {
            return false;
          }
          if (innerValue.value.indexOf(option) === -1) {
            toggleOption(option);
          } else {
            hidePopup();
          }
          return true;
        };
        const fillFn = (afterFilter) => {
          if (findFn(getOptionValue) === true) {
            return;
          }
          if (findFn(getOptionLabel) === true || afterFilter === true) {
            return;
          }
          filter(value2, true, () => fillFn(true));
        };
        fillFn();
      } else {
        state.clearValue(e);
      }
    }
    function onTargetKeypress(e) {
      emit2("keypress", e);
    }
    function onTargetKeydown(e) {
      emit2("keydown", e);
      if (shouldIgnoreKey(e) === true) {
        return;
      }
      const newValueModeValid = inputValue.value.length !== 0 && (props.newValueMode !== void 0 || props.onNewValue !== void 0);
      const tabShouldSelect = e.shiftKey !== true && props.multiple !== true && (optionIndex.value > -1 || newValueModeValid === true);
      if (e.keyCode === 27) {
        prevent(e);
        return;
      }
      if (e.keyCode === 9 && tabShouldSelect === false) {
        closeMenu();
        return;
      }
      if (e.target === void 0 || e.target.id !== state.targetUid.value) {
        return;
      }
      if (e.keyCode === 40 && state.innerLoading.value !== true && menu.value === false) {
        stopAndPrevent(e);
        showPopup();
        return;
      }
      if (e.keyCode === 8 && props.hideSelected !== true && inputValue.value.length === 0) {
        if (props.multiple === true && Array.isArray(props.modelValue) === true) {
          removeAtIndex(props.modelValue.length - 1);
        } else if (props.multiple !== true && props.modelValue !== null) {
          emit2("update:modelValue", null);
        }
        return;
      }
      if ((e.keyCode === 35 || e.keyCode === 36) && (typeof inputValue.value !== "string" || inputValue.value.length === 0)) {
        stopAndPrevent(e);
        optionIndex.value = -1;
        moveOptionSelection(e.keyCode === 36 ? 1 : -1, props.multiple);
      }
      if ((e.keyCode === 33 || e.keyCode === 34) && virtualScrollSliceSizeComputed.value !== void 0) {
        stopAndPrevent(e);
        optionIndex.value = Math.max(
          -1,
          Math.min(
            virtualScrollLength.value,
            optionIndex.value + (e.keyCode === 33 ? -1 : 1) * virtualScrollSliceSizeComputed.value.view
          )
        );
        moveOptionSelection(e.keyCode === 33 ? 1 : -1, props.multiple);
      }
      if (e.keyCode === 38 || e.keyCode === 40) {
        stopAndPrevent(e);
        moveOptionSelection(e.keyCode === 38 ? -1 : 1, props.multiple);
      }
      const optionsLength = virtualScrollLength.value;
      if (searchBuffer === void 0 || searchBufferExp < Date.now()) {
        searchBuffer = "";
      }
      if (optionsLength > 0 && props.useInput !== true && e.key !== void 0 && e.key.length === 1 && e.altKey === false && e.ctrlKey === false && e.metaKey === false && (e.keyCode !== 32 || searchBuffer.length !== 0)) {
        menu.value !== true && showPopup(e);
        const char = e.key.toLocaleLowerCase(), keyRepeat = searchBuffer.length === 1 && searchBuffer[0] === char;
        searchBufferExp = Date.now() + 1500;
        if (keyRepeat === false) {
          stopAndPrevent(e);
          searchBuffer += char;
        }
        const searchRe = new RegExp("^" + searchBuffer.split("").map((l) => reEscapeList.indexOf(l) > -1 ? "\\" + l : l).join(".*"), "i");
        let index2 = optionIndex.value;
        if (keyRepeat === true || index2 < 0 || searchRe.test(getOptionLabel.value(props.options[index2])) !== true) {
          do {
            index2 = normalizeToInterval(index2 + 1, -1, optionsLength - 1);
          } while (index2 !== optionIndex.value && (isOptionDisabled.value(props.options[index2]) === true || searchRe.test(getOptionLabel.value(props.options[index2])) !== true));
        }
        if (optionIndex.value !== index2) {
          nextTick$1(() => {
            setOptionIndex(index2);
            scrollTo(index2);
            if (index2 >= 0 && props.useInput === true && props.fillInput === true) {
              setInputValue(getOptionLabel.value(props.options[index2]));
            }
          });
        }
        return;
      }
      if (e.keyCode !== 13 && (e.keyCode !== 32 || props.useInput === true || searchBuffer !== "") && (e.keyCode !== 9 || tabShouldSelect === false)) {
        return;
      }
      e.keyCode !== 9 && stopAndPrevent(e);
      if (optionIndex.value > -1 && optionIndex.value < optionsLength) {
        toggleOption(props.options[optionIndex.value]);
        return;
      }
      if (newValueModeValid === true) {
        const done = (val, mode) => {
          if (mode) {
            if (validateNewValueMode(mode) !== true) {
              return;
            }
          } else {
            mode = props.newValueMode;
          }
          if (val === void 0 || val === null) {
            return;
          }
          updateInputValue("", props.multiple !== true, true);
          const fn = mode === "toggle" ? toggleOption : add2;
          fn(val, mode === "add-unique");
          if (props.multiple !== true) {
            targetRef.value !== null && targetRef.value.focus();
            hidePopup();
          }
        };
        if (props.onNewValue !== void 0) {
          emit2("newValue", inputValue.value, done);
        } else {
          done(inputValue.value);
        }
        if (props.multiple !== true) {
          return;
        }
      }
      if (menu.value === true) {
        closeMenu();
      } else if (state.innerLoading.value !== true) {
        showPopup();
      }
    }
    function getVirtualScrollEl() {
      return hasDialog === true ? menuContentRef.value : menuRef.value !== null && menuRef.value.contentEl !== null ? menuRef.value.contentEl : void 0;
    }
    function getVirtualScrollTarget() {
      return getVirtualScrollEl();
    }
    function getSelection2() {
      if (props.hideSelected === true) {
        return [];
      }
      if (slots["selected-item"] !== void 0) {
        return selectedScope.value.map((scope2) => slots["selected-item"](scope2)).slice();
      }
      if (slots.selected !== void 0) {
        return [].concat(slots.selected());
      }
      if (props.useChips === true) {
        return selectedScope.value.map((scope2, i2) => h(QChip, {
          key: "option-" + i2,
          removable: state.editable.value === true && isOptionDisabled.value(scope2.opt) !== true,
          dense: true,
          textColor: props.color,
          tabindex: tabindex.value,
          onRemove() {
            scope2.removeAtIndex(i2);
          }
        }, () => h("span", {
          class: "ellipsis",
          [scope2.html === true ? "innerHTML" : "textContent"]: getOptionLabel.value(scope2.opt)
        })));
      }
      return [
        h("span", {
          [valueAsHtml.value === true ? "innerHTML" : "textContent"]: ariaCurrentValue.value
        })
      ];
    }
    function getAllOptions() {
      if (noOptions.value === true) {
        return slots["no-option"] !== void 0 ? slots["no-option"]({ inputValue: inputValue.value }) : void 0;
      }
      const fn = slots.option !== void 0 ? slots.option : (scope2) => {
        return h(QItem, {
          key: scope2.index,
          ...scope2.itemProps
        }, () => {
          return h(
            QItemSection,
            () => h(
              QItemLabel,
              () => h("span", {
                [scope2.html === true ? "innerHTML" : "textContent"]: scope2.label
              })
            )
          );
        });
      };
      let options = padVirtualScroll("div", optionScope.value.map(fn));
      if (slots["before-options"] !== void 0) {
        options = slots["before-options"]().concat(options);
      }
      return hMergeSlot(slots["after-options"], options);
    }
    function getInput(fromDialog, isTarget) {
      const attrs = isTarget === true ? { ...comboboxAttrs.value, ...state.splitAttrs.attributes.value } : void 0;
      const data = {
        ref: isTarget === true ? targetRef : void 0,
        key: "i_t",
        class: computedInputClass.value,
        style: props.inputStyle,
        value: inputValue.value !== void 0 ? inputValue.value : "",
        // required for Android in order to show ENTER key when in form
        type: "search",
        ...attrs,
        id: isTarget === true ? state.targetUid.value : void 0,
        maxlength: props.maxlength,
        autocomplete: props.autocomplete,
        "data-autofocus": fromDialog === true || props.autofocus === true || void 0,
        disabled: props.disable === true,
        readonly: props.readonly === true,
        ...inputControlEvents.value
      };
      if (fromDialog !== true && hasDialog === true) {
        if (Array.isArray(data.class) === true) {
          data.class = [...data.class, "no-pointer-events"];
        } else {
          data.class += " no-pointer-events";
        }
      }
      return h("input", data);
    }
    function onInput(e) {
      if (inputTimer !== null) {
        clearTimeout(inputTimer);
        inputTimer = null;
      }
      if (e && e.target && e.target.qComposing === true) {
        return;
      }
      setInputValue(e.target.value || "");
      userInputValue = true;
      defaultInputValue = inputValue.value;
      if (state.focused.value !== true && (hasDialog !== true || dialogFieldFocused.value === true)) {
        state.focus();
      }
      if (props.onFilter !== void 0) {
        inputTimer = setTimeout(() => {
          inputTimer = null;
          filter(inputValue.value);
        }, props.inputDebounce);
      }
    }
    function setInputValue(val) {
      if (inputValue.value !== val) {
        inputValue.value = val;
        emit2("inputValue", val);
      }
    }
    function updateInputValue(val, noFiltering, internal) {
      userInputValue = internal !== true;
      if (props.useInput === true) {
        setInputValue(val);
        if (noFiltering === true || internal !== true) {
          defaultInputValue = val;
        }
        noFiltering !== true && filter(val);
      }
    }
    function filter(val, keepClosed, afterUpdateFn) {
      if (props.onFilter === void 0 || keepClosed !== true && state.focused.value !== true) {
        return;
      }
      if (state.innerLoading.value === true) {
        emit2("filterAbort");
      } else {
        state.innerLoading.value = true;
        innerLoadingIndicator.value = true;
      }
      if (val !== "" && props.multiple !== true && innerValue.value.length !== 0 && userInputValue !== true && val === getOptionLabel.value(innerValue.value[0])) {
        val = "";
      }
      const localFilterId = setTimeout(() => {
        menu.value === true && (menu.value = false);
      }, 10);
      filterId !== null && clearTimeout(filterId);
      filterId = localFilterId;
      emit2(
        "filter",
        val,
        (fn, afterFn) => {
          if ((keepClosed === true || state.focused.value === true) && filterId === localFilterId) {
            clearTimeout(filterId);
            typeof fn === "function" && fn();
            innerLoadingIndicator.value = false;
            nextTick$1(() => {
              state.innerLoading.value = false;
              if (state.editable.value === true) {
                if (keepClosed === true) {
                  menu.value === true && hidePopup();
                } else if (menu.value === true) {
                  updateMenu(true);
                } else {
                  menu.value = true;
                }
              }
              typeof afterFn === "function" && nextTick$1(() => {
                afterFn(proxy);
              });
              typeof afterUpdateFn === "function" && nextTick$1(() => {
                afterUpdateFn(proxy);
              });
            });
          }
        },
        () => {
          if (state.focused.value === true && filterId === localFilterId) {
            clearTimeout(filterId);
            state.innerLoading.value = false;
            innerLoadingIndicator.value = false;
          }
          menu.value === true && (menu.value = false);
        }
      );
    }
    function getMenu() {
      return h(QMenu, {
        ref: menuRef,
        class: menuContentClass.value,
        style: props.popupContentStyle,
        modelValue: menu.value,
        fit: props.menuShrink !== true,
        cover: props.optionsCover === true && noOptions.value !== true && props.useInput !== true,
        anchor: props.menuAnchor,
        self: props.menuSelf,
        offset: props.menuOffset,
        dark: isOptionsDark.value,
        noParentEvent: true,
        noRefocus: true,
        noFocus: true,
        square: squaredMenu.value,
        transitionShow: props.transitionShow,
        transitionHide: props.transitionHide,
        transitionDuration: props.transitionDuration,
        separateClosePopup: true,
        ...listboxAttrs.value,
        onScrollPassive: onVirtualScrollEvt,
        onBeforeShow: onControlPopupShow,
        onBeforeHide: onMenuBeforeHide,
        onShow: onMenuShow
      }, getAllOptions);
    }
    function onMenuBeforeHide(e) {
      onControlPopupHide(e);
      closeMenu();
    }
    function onMenuShow() {
      setVirtualScrollSize();
    }
    function onDialogFieldFocus(e) {
      stop(e);
      targetRef.value !== null && targetRef.value.focus();
      dialogFieldFocused.value = true;
      window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, 0);
    }
    function onDialogFieldBlur(e) {
      stop(e);
      nextTick$1(() => {
        dialogFieldFocused.value = false;
      });
    }
    function getDialog() {
      const content = [
        h(QField, {
          class: `col-auto ${state.fieldClass.value}`,
          ...innerFieldProps.value,
          for: state.targetUid.value,
          dark: isOptionsDark.value,
          square: true,
          loading: innerLoadingIndicator.value,
          itemAligned: false,
          filled: true,
          stackLabel: inputValue.value.length !== 0,
          ...state.splitAttrs.listeners.value,
          onFocus: onDialogFieldFocus,
          onBlur: onDialogFieldBlur
        }, {
          ...slots,
          rawControl: () => state.getControl(true),
          before: void 0,
          after: void 0
        })
      ];
      menu.value === true && content.push(
        h("div", {
          ref: menuContentRef,
          class: menuContentClass.value + " scroll",
          style: props.popupContentStyle,
          ...listboxAttrs.value,
          onClick: prevent,
          onScrollPassive: onVirtualScrollEvt
        }, getAllOptions())
      );
      return h(QDialog, {
        ref: dialogRef,
        modelValue: dialog.value,
        position: props.useInput === true ? "top" : void 0,
        transitionShow: transitionShowComputed,
        transitionHide: props.transitionHide,
        transitionDuration: props.transitionDuration,
        onBeforeShow: onControlPopupShow,
        onBeforeHide: onDialogBeforeHide,
        onHide: onDialogHide,
        onShow: onDialogShow
      }, () => h("div", {
        class: "q-select__dialog" + (isOptionsDark.value === true ? " q-select__dialog--dark q-dark" : "") + (dialogFieldFocused.value === true ? " q-select__dialog--focused" : "")
      }, content));
    }
    function onDialogBeforeHide(e) {
      onControlPopupHide(e);
      if (dialogRef.value !== null) {
        dialogRef.value.__updateRefocusTarget(
          state.rootRef.value.querySelector(".q-field__native > [tabindex]:last-child")
        );
      }
      state.focused.value = false;
    }
    function onDialogHide(e) {
      hidePopup();
      state.focused.value === false && emit2("blur", e);
      resetInputValue();
    }
    function onDialogShow() {
      const el = document.activeElement;
      if ((el === null || el.id !== state.targetUid.value) && targetRef.value !== null && targetRef.value !== el) {
        targetRef.value.focus();
      }
      setVirtualScrollSize();
    }
    function closeMenu() {
      if (dialog.value === true) {
        return;
      }
      optionIndex.value = -1;
      if (menu.value === true) {
        menu.value = false;
      }
      if (state.focused.value === false) {
        if (filterId !== null) {
          clearTimeout(filterId);
          filterId = null;
        }
        if (state.innerLoading.value === true) {
          emit2("filterAbort");
          state.innerLoading.value = false;
          innerLoadingIndicator.value = false;
        }
      }
    }
    function showPopup(e) {
      if (state.editable.value !== true) {
        return;
      }
      if (hasDialog === true) {
        state.onControlFocusin(e);
        dialog.value = true;
        nextTick$1(() => {
          state.focus();
        });
      } else {
        state.focus();
      }
      if (props.onFilter !== void 0) {
        filter(inputValue.value);
      } else if (noOptions.value !== true || slots["no-option"] !== void 0) {
        menu.value = true;
      }
    }
    function hidePopup() {
      dialog.value = false;
      closeMenu();
    }
    function resetInputValue() {
      props.useInput === true && updateInputValue(
        props.multiple !== true && props.fillInput === true && innerValue.value.length !== 0 ? getOptionLabel.value(innerValue.value[0]) || "" : "",
        true,
        true
      );
    }
    function updateMenu(show) {
      let optionIndex2 = -1;
      if (show === true) {
        if (innerValue.value.length !== 0) {
          const val = getOptionValue.value(innerValue.value[0]);
          optionIndex2 = props.options.findIndex((v) => isDeepEqual(getOptionValue.value(v), val));
        }
        localResetVirtualScroll(optionIndex2);
      }
      setOptionIndex(optionIndex2);
    }
    function rerenderMenu(newLength, oldLength) {
      if (menu.value === true && state.innerLoading.value === false) {
        localResetVirtualScroll(-1, true);
        nextTick$1(() => {
          if (menu.value === true && state.innerLoading.value === false) {
            if (newLength > oldLength) {
              localResetVirtualScroll();
            } else {
              updateMenu(true);
            }
          }
        });
      }
    }
    function updateMenuPosition() {
      if (dialog.value === false && menuRef.value !== null) {
        menuRef.value.updatePosition();
      }
    }
    function onControlPopupShow(e) {
      e !== void 0 && stop(e);
      emit2("popupShow", e);
      state.hasPopupOpen = true;
      state.onControlFocusin(e);
    }
    function onControlPopupHide(e) {
      e !== void 0 && stop(e);
      emit2("popupHide", e);
      state.hasPopupOpen = false;
      state.onControlFocusout(e);
    }
    function updatePreState() {
      hasDialog = $q.platform.is.mobile !== true && props.behavior !== "dialog" ? false : props.behavior !== "menu" && (props.useInput === true ? slots["no-option"] !== void 0 || props.onFilter !== void 0 || noOptions.value === false : true);
      transitionShowComputed = $q.platform.is.ios === true && hasDialog === true && props.useInput === true ? "fade" : props.transitionShow;
    }
    onBeforeUpdate(updatePreState);
    onUpdated(updateMenuPosition);
    updatePreState();
    onBeforeUnmount(() => {
      inputTimer !== null && clearTimeout(inputTimer);
    });
    Object.assign(proxy, {
      showPopup,
      hidePopup,
      removeAtIndex,
      add: add2,
      toggleOption,
      getOptionIndex: () => optionIndex.value,
      setOptionIndex,
      moveOptionSelection,
      filter,
      updateMenuPosition,
      updateInputValue,
      isOptionSelected,
      getEmittingOptionValue,
      isOptionDisabled: (...args) => isOptionDisabled.value.apply(null, args) === true,
      getOptionValue: (...args) => getOptionValue.value.apply(null, args),
      getOptionLabel: (...args) => getOptionLabel.value.apply(null, args)
    });
    Object.assign(state, {
      innerValue,
      fieldClass: computed(
        () => `q-select q-field--auto-height q-select--with${props.useInput !== true ? "out" : ""}-input q-select--with${props.useChips !== true ? "out" : ""}-chips q-select--${props.multiple === true ? "multiple" : "single"}`
      ),
      inputRef,
      targetRef,
      hasValue,
      showPopup,
      floatingLabel: computed(
        () => props.hideSelected !== true && hasValue.value === true || typeof inputValue.value === "number" || inputValue.value.length !== 0 || fieldValueIsFilled(props.displayValue)
      ),
      getControlChild: () => {
        if (state.editable.value !== false && (dialog.value === true || noOptions.value !== true || slots["no-option"] !== void 0)) {
          return hasDialog === true ? getDialog() : getMenu();
        } else if (state.hasPopupOpen === true) {
          state.hasPopupOpen = false;
        }
      },
      controlEvents: {
        onFocusin(e) {
          state.onControlFocusin(e);
        },
        onFocusout(e) {
          state.onControlFocusout(e, () => {
            resetInputValue();
            closeMenu();
          });
        },
        onClick(e) {
          prevent(e);
          if (hasDialog !== true && menu.value === true) {
            closeMenu();
            targetRef.value !== null && targetRef.value.focus();
            return;
          }
          showPopup(e);
        }
      },
      getControl: (fromDialog) => {
        const child = getSelection2();
        const isTarget = fromDialog === true || dialog.value !== true || hasDialog !== true;
        if (props.useInput === true) {
          child.push(getInput(fromDialog, isTarget));
        } else if (state.editable.value === true) {
          const attrs2 = isTarget === true ? comboboxAttrs.value : void 0;
          child.push(
            h("input", {
              ref: isTarget === true ? targetRef : void 0,
              key: "d_t",
              class: "q-select__focus-target",
              id: isTarget === true ? state.targetUid.value : void 0,
              value: ariaCurrentValue.value,
              readonly: true,
              "data-autofocus": fromDialog === true || props.autofocus === true || void 0,
              ...attrs2,
              onKeydown: onTargetKeydown,
              onKeyup: onTargetKeyup,
              onKeypress: onTargetKeypress
            })
          );
          if (isTarget === true && typeof props.autocomplete === "string" && props.autocomplete.length !== 0) {
            child.push(
              h("input", {
                class: "q-select__autocomplete-input",
                autocomplete: props.autocomplete,
                tabindex: -1,
                onKeyup: onTargetAutocomplete
              })
            );
          }
        }
        if (nameProp.value !== void 0 && props.disable !== true && innerOptionsValue.value.length !== 0) {
          const opts = innerOptionsValue.value.map((value2) => h("option", { value: value2, selected: true }));
          child.push(
            h("select", {
              class: "hidden",
              name: nameProp.value,
              multiple: props.multiple
            }, opts)
          );
        }
        const attrs = props.useInput === true || isTarget !== true ? void 0 : state.splitAttrs.attributes.value;
        return h("div", {
          class: "q-field__native row items-center",
          ...attrs,
          ...state.splitAttrs.listeners.value
        }, child);
      },
      getInnerAppend: () => props.loading !== true && innerLoadingIndicator.value !== true && props.hideDropdownIcon !== true ? [
        h(QIcon, {
          class: "q-select__dropdown-icon" + (menu.value === true ? " rotate-180" : ""),
          name: dropdownArrowIcon.value
        })
      ] : null
    });
    return useField(state);
  }
});
const modifiersAll = {
  left: true,
  right: true,
  up: true,
  down: true,
  horizontal: true,
  vertical: true
};
const directionList = Object.keys(modifiersAll);
modifiersAll.all = true;
function getModifierDirections(mod) {
  const dir = {};
  for (const direction of directionList) {
    if (mod[direction] === true) {
      dir[direction] = true;
    }
  }
  if (Object.keys(dir).length === 0) {
    return modifiersAll;
  }
  if (dir.horizontal === true) {
    dir.left = dir.right = true;
  } else if (dir.left === true && dir.right === true) {
    dir.horizontal = true;
  }
  if (dir.vertical === true) {
    dir.up = dir.down = true;
  } else if (dir.up === true && dir.down === true) {
    dir.vertical = true;
  }
  if (dir.horizontal === true && dir.vertical === true) {
    dir.all = true;
  }
  return dir;
}
const avoidNodeNamesList = ["INPUT", "TEXTAREA"];
function shouldStart(evt, ctx) {
  return ctx.event === void 0 && evt.target !== void 0 && evt.target.draggable !== true && typeof ctx.handler === "function" && avoidNodeNamesList.includes(evt.target.nodeName.toUpperCase()) === false && (evt.qClonedBy === void 0 || evt.qClonedBy.indexOf(ctx.uid) === -1);
}
function getChanges(evt, ctx, isFinal) {
  const pos = position(evt);
  let dir, distX = pos.left - ctx.event.x, distY = pos.top - ctx.event.y, absX = Math.abs(distX), absY = Math.abs(distY);
  const direction = ctx.direction;
  if (direction.horizontal === true && direction.vertical !== true) {
    dir = distX < 0 ? "left" : "right";
  } else if (direction.horizontal !== true && direction.vertical === true) {
    dir = distY < 0 ? "up" : "down";
  } else if (direction.up === true && distY < 0) {
    dir = "up";
    if (absX > absY) {
      if (direction.left === true && distX < 0) {
        dir = "left";
      } else if (direction.right === true && distX > 0) {
        dir = "right";
      }
    }
  } else if (direction.down === true && distY > 0) {
    dir = "down";
    if (absX > absY) {
      if (direction.left === true && distX < 0) {
        dir = "left";
      } else if (direction.right === true && distX > 0) {
        dir = "right";
      }
    }
  } else if (direction.left === true && distX < 0) {
    dir = "left";
    if (absX < absY) {
      if (direction.up === true && distY < 0) {
        dir = "up";
      } else if (direction.down === true && distY > 0) {
        dir = "down";
      }
    }
  } else if (direction.right === true && distX > 0) {
    dir = "right";
    if (absX < absY) {
      if (direction.up === true && distY < 0) {
        dir = "up";
      } else if (direction.down === true && distY > 0) {
        dir = "down";
      }
    }
  }
  let synthetic = false;
  if (dir === void 0 && isFinal === false) {
    if (ctx.event.isFirst === true || ctx.event.lastDir === void 0) {
      return {};
    }
    dir = ctx.event.lastDir;
    synthetic = true;
    if (dir === "left" || dir === "right") {
      pos.left -= distX;
      absX = 0;
      distX = 0;
    } else {
      pos.top -= distY;
      absY = 0;
      distY = 0;
    }
  }
  return {
    synthetic,
    payload: {
      evt,
      touch: ctx.event.mouse !== true,
      mouse: ctx.event.mouse === true,
      position: pos,
      direction: dir,
      isFirst: ctx.event.isFirst,
      isFinal: isFinal === true,
      duration: Date.now() - ctx.event.time,
      distance: {
        x: absX,
        y: absY
      },
      offset: {
        x: distX,
        y: distY
      },
      delta: {
        x: pos.left - ctx.event.lastX,
        y: pos.top - ctx.event.lastY
      }
    }
  };
}
let uid = 0;
const TouchPan = createDirective(
  {
    name: "touch-pan",
    beforeMount(el, { value: value2, modifiers }) {
      if (modifiers.mouse !== true && client.has.touch !== true) {
        return;
      }
      function handleEvent(evt, mouseEvent) {
        if (modifiers.mouse === true && mouseEvent === true) {
          stopAndPrevent(evt);
        } else {
          modifiers.stop === true && stop(evt);
          modifiers.prevent === true && prevent(evt);
        }
      }
      const ctx = {
        uid: "qvtp_" + uid++,
        handler: value2,
        modifiers,
        direction: getModifierDirections(modifiers),
        noop,
        mouseStart(evt) {
          if (shouldStart(evt, ctx) && leftClick(evt)) {
            addEvt(ctx, "temp", [
              [document, "mousemove", "move", "notPassiveCapture"],
              [document, "mouseup", "end", "passiveCapture"]
            ]);
            ctx.start(evt, true);
          }
        },
        touchStart(evt) {
          if (shouldStart(evt, ctx)) {
            const target2 = evt.target;
            addEvt(ctx, "temp", [
              [target2, "touchmove", "move", "notPassiveCapture"],
              [target2, "touchcancel", "end", "passiveCapture"],
              [target2, "touchend", "end", "passiveCapture"]
            ]);
            ctx.start(evt);
          }
        },
        start(evt, mouseEvent) {
          client.is.firefox === true && preventDraggable(el, true);
          ctx.lastEvt = evt;
          if (mouseEvent === true || modifiers.stop === true) {
            if (ctx.direction.all !== true && (mouseEvent !== true || ctx.modifiers.mouseAllDir !== true && ctx.modifiers.mousealldir !== true)) {
              const clone = evt.type.indexOf("mouse") > -1 ? new MouseEvent(evt.type, evt) : new TouchEvent(evt.type, evt);
              evt.defaultPrevented === true && prevent(clone);
              evt.cancelBubble === true && stop(clone);
              Object.assign(clone, {
                qKeyEvent: evt.qKeyEvent,
                qClickOutside: evt.qClickOutside,
                qAnchorHandled: evt.qAnchorHandled,
                qClonedBy: evt.qClonedBy === void 0 ? [ctx.uid] : evt.qClonedBy.concat(ctx.uid)
              });
              ctx.initialEvent = {
                target: evt.target,
                event: clone
              };
            }
            stop(evt);
          }
          const { left, top } = position(evt);
          ctx.event = {
            x: left,
            y: top,
            time: Date.now(),
            mouse: mouseEvent === true,
            detected: false,
            isFirst: true,
            isFinal: false,
            lastX: left,
            lastY: top
          };
        },
        move(evt) {
          if (ctx.event === void 0) {
            return;
          }
          const pos = position(evt), distX = pos.left - ctx.event.x, distY = pos.top - ctx.event.y;
          if (distX === 0 && distY === 0) {
            return;
          }
          ctx.lastEvt = evt;
          const isMouseEvt = ctx.event.mouse === true;
          const start = () => {
            handleEvent(evt, isMouseEvt);
            let cursor;
            if (modifiers.preserveCursor !== true && modifiers.preservecursor !== true) {
              cursor = document.documentElement.style.cursor || "";
              document.documentElement.style.cursor = "grabbing";
            }
            isMouseEvt === true && document.body.classList.add("no-pointer-events--children");
            document.body.classList.add("non-selectable");
            clearSelection();
            ctx.styleCleanup = (withDelayedFn) => {
              ctx.styleCleanup = void 0;
              if (cursor !== void 0) {
                document.documentElement.style.cursor = cursor;
              }
              document.body.classList.remove("non-selectable");
              if (isMouseEvt === true) {
                const remove2 = () => {
                  document.body.classList.remove("no-pointer-events--children");
                };
                if (withDelayedFn !== void 0) {
                  setTimeout(() => {
                    remove2();
                    withDelayedFn();
                  }, 50);
                } else {
                  remove2();
                }
              } else if (withDelayedFn !== void 0) {
                withDelayedFn();
              }
            };
          };
          if (ctx.event.detected === true) {
            ctx.event.isFirst !== true && handleEvent(evt, ctx.event.mouse);
            const { payload, synthetic } = getChanges(evt, ctx, false);
            if (payload !== void 0) {
              if (ctx.handler(payload) === false) {
                ctx.end(evt);
              } else {
                if (ctx.styleCleanup === void 0 && ctx.event.isFirst === true) {
                  start();
                }
                ctx.event.lastX = payload.position.left;
                ctx.event.lastY = payload.position.top;
                ctx.event.lastDir = synthetic === true ? void 0 : payload.direction;
                ctx.event.isFirst = false;
              }
            }
            return;
          }
          if (ctx.direction.all === true || isMouseEvt === true && (ctx.modifiers.mouseAllDir === true || ctx.modifiers.mousealldir === true)) {
            start();
            ctx.event.detected = true;
            ctx.move(evt);
            return;
          }
          const absX = Math.abs(distX), absY = Math.abs(distY);
          if (absX !== absY) {
            if (ctx.direction.horizontal === true && absX > absY || ctx.direction.vertical === true && absX < absY || ctx.direction.up === true && absX < absY && distY < 0 || ctx.direction.down === true && absX < absY && distY > 0 || ctx.direction.left === true && absX > absY && distX < 0 || ctx.direction.right === true && absX > absY && distX > 0) {
              ctx.event.detected = true;
              ctx.move(evt);
            } else {
              ctx.end(evt, true);
            }
          }
        },
        end(evt, abort) {
          if (ctx.event === void 0) {
            return;
          }
          cleanEvt(ctx, "temp");
          client.is.firefox === true && preventDraggable(el, false);
          if (abort === true) {
            ctx.styleCleanup !== void 0 && ctx.styleCleanup();
            if (ctx.event.detected !== true && ctx.initialEvent !== void 0) {
              ctx.initialEvent.target.dispatchEvent(ctx.initialEvent.event);
            }
          } else if (ctx.event.detected === true) {
            ctx.event.isFirst === true && ctx.handler(getChanges(evt === void 0 ? ctx.lastEvt : evt, ctx).payload);
            const { payload } = getChanges(evt === void 0 ? ctx.lastEvt : evt, ctx, true);
            const fn = () => {
              ctx.handler(payload);
            };
            if (ctx.styleCleanup !== void 0) {
              ctx.styleCleanup(fn);
            } else {
              fn();
            }
          }
          ctx.event = void 0;
          ctx.initialEvent = void 0;
          ctx.lastEvt = void 0;
        }
      };
      el.__qtouchpan = ctx;
      if (modifiers.mouse === true) {
        const capture = modifiers.mouseCapture === true || modifiers.mousecapture === true ? "Capture" : "";
        addEvt(ctx, "main", [
          [el, "mousedown", "mouseStart", `passive${capture}`]
        ]);
      }
      client.has.touch === true && addEvt(ctx, "main", [
        [el, "touchstart", "touchStart", `passive${modifiers.capture === true ? "Capture" : ""}`],
        [el, "touchmove", "noop", "notPassiveCapture"]
        // cannot be passive (ex: iOS scroll)
      ]);
    },
    updated(el, bindings) {
      const ctx = el.__qtouchpan;
      if (ctx !== void 0) {
        if (bindings.oldValue !== bindings.value) {
          typeof value !== "function" && ctx.end();
          ctx.handler = bindings.value;
        }
        ctx.direction = getModifierDirections(bindings.modifiers);
      }
    },
    beforeUnmount(el) {
      const ctx = el.__qtouchpan;
      if (ctx !== void 0) {
        ctx.event !== void 0 && ctx.end();
        cleanEvt(ctx, "main");
        cleanEvt(ctx, "temp");
        client.is.firefox === true && preventDraggable(el, false);
        ctx.styleCleanup !== void 0 && ctx.styleCleanup();
        delete el.__qtouchpan;
      }
    }
  }
);
const duration = 150;
const QDrawer = createComponent({
  name: "QDrawer",
  inheritAttrs: false,
  props: {
    ...useModelToggleProps,
    ...useDarkProps,
    side: {
      type: String,
      default: "left",
      validator: (v) => ["left", "right"].includes(v)
    },
    width: {
      type: Number,
      default: 300
    },
    mini: Boolean,
    miniToOverlay: Boolean,
    miniWidth: {
      type: Number,
      default: 57
    },
    noMiniAnimation: Boolean,
    breakpoint: {
      type: Number,
      default: 1023
    },
    showIfAbove: Boolean,
    behavior: {
      type: String,
      validator: (v) => ["default", "desktop", "mobile"].includes(v),
      default: "default"
    },
    bordered: Boolean,
    elevated: Boolean,
    overlay: Boolean,
    persistent: Boolean,
    noSwipeOpen: Boolean,
    noSwipeClose: Boolean,
    noSwipeBackdrop: Boolean
  },
  emits: [
    ...useModelToggleEmits,
    "onLayout",
    "miniState"
  ],
  setup(props, { slots, emit: emit2, attrs }) {
    const vm = getCurrentInstance();
    const { proxy: { $q } } = vm;
    const isDark = useDark(props, $q);
    const { preventBodyScroll } = usePreventScroll();
    const { registerTimeout, removeTimeout } = useTimeout();
    const $layout = inject(layoutKey, emptyRenderFn);
    if ($layout === emptyRenderFn) {
      console.error("QDrawer needs to be child of QLayout");
      return emptyRenderFn;
    }
    let lastDesktopState, timerMini = null, layoutTotalWidthWatcher;
    const belowBreakpoint = ref(
      props.behavior === "mobile" || props.behavior !== "desktop" && $layout.totalWidth.value <= props.breakpoint
    );
    const isMini = computed(
      () => props.mini === true && belowBreakpoint.value !== true
    );
    const size2 = computed(() => isMini.value === true ? props.miniWidth : props.width);
    const showing = ref(
      props.showIfAbove === true && belowBreakpoint.value === false ? true : props.modelValue === true
    );
    const hideOnRouteChange = computed(
      () => props.persistent !== true && (belowBreakpoint.value === true || onScreenOverlay.value === true)
    );
    function handleShow(evt, noEvent) {
      addToHistory();
      evt !== false && $layout.animate();
      applyPosition(0);
      if (belowBreakpoint.value === true) {
        const otherInstance = $layout.instances[otherSide.value];
        if (otherInstance !== void 0 && otherInstance.belowBreakpoint === true) {
          otherInstance.hide(false);
        }
        applyBackdrop(1);
        $layout.isContainer.value !== true && preventBodyScroll(true);
      } else {
        applyBackdrop(0);
        evt !== false && setScrollable(false);
      }
      registerTimeout(() => {
        evt !== false && setScrollable(true);
        noEvent !== true && emit2("show", evt);
      }, duration);
    }
    function handleHide(evt, noEvent) {
      removeFromHistory();
      evt !== false && $layout.animate();
      applyBackdrop(0);
      applyPosition(stateDirection.value * size2.value);
      cleanup();
      if (noEvent !== true) {
        registerTimeout(() => {
          emit2("hide", evt);
        }, duration);
      } else {
        removeTimeout();
      }
    }
    const { show, hide } = useModelToggle({
      showing,
      hideOnRouteChange,
      handleShow,
      handleHide
    });
    const { addToHistory, removeFromHistory } = useHistory(showing, hide, hideOnRouteChange);
    const instance = {
      belowBreakpoint,
      hide
    };
    const rightSide = computed(() => props.side === "right");
    const stateDirection = computed(
      () => ($q.lang.rtl === true ? -1 : 1) * (rightSide.value === true ? 1 : -1)
    );
    const flagBackdropBg = ref(0);
    const flagPanning = ref(false);
    const flagMiniAnimate = ref(false);
    const flagContentPosition = ref(
      // starting with "hidden" for SSR
      size2.value * stateDirection.value
    );
    const otherSide = computed(() => rightSide.value === true ? "left" : "right");
    const offset = computed(() => showing.value === true && belowBreakpoint.value === false && props.overlay === false ? props.miniToOverlay === true ? props.miniWidth : size2.value : 0);
    const fixed = computed(
      () => props.overlay === true || props.miniToOverlay === true || $layout.view.value.indexOf(rightSide.value ? "R" : "L") > -1 || $q.platform.is.ios === true && $layout.isContainer.value === true
    );
    const onLayout = computed(
      () => props.overlay === false && showing.value === true && belowBreakpoint.value === false
    );
    const onScreenOverlay = computed(
      () => props.overlay === true && showing.value === true && belowBreakpoint.value === false
    );
    const backdropClass = computed(
      () => "fullscreen q-drawer__backdrop" + (showing.value === false && flagPanning.value === false ? " hidden" : "")
    );
    const backdropStyle = computed(() => ({
      backgroundColor: `rgba(0,0,0,${flagBackdropBg.value * 0.4})`
    }));
    const headerSlot = computed(() => rightSide.value === true ? $layout.rows.value.top[2] === "r" : $layout.rows.value.top[0] === "l");
    const footerSlot = computed(() => rightSide.value === true ? $layout.rows.value.bottom[2] === "r" : $layout.rows.value.bottom[0] === "l");
    const aboveStyle = computed(() => {
      const css2 = {};
      if ($layout.header.space === true && headerSlot.value === false) {
        if (fixed.value === true) {
          css2.top = `${$layout.header.offset}px`;
        } else if ($layout.header.space === true) {
          css2.top = `${$layout.header.size}px`;
        }
      }
      if ($layout.footer.space === true && footerSlot.value === false) {
        if (fixed.value === true) {
          css2.bottom = `${$layout.footer.offset}px`;
        } else if ($layout.footer.space === true) {
          css2.bottom = `${$layout.footer.size}px`;
        }
      }
      return css2;
    });
    const style = computed(() => {
      const style2 = {
        width: `${size2.value}px`,
        transform: `translateX(${flagContentPosition.value}px)`
      };
      return belowBreakpoint.value === true ? style2 : Object.assign(style2, aboveStyle.value);
    });
    const contentClass = computed(
      () => "q-drawer__content fit " + ($layout.isContainer.value !== true ? "scroll" : "overflow-auto")
    );
    const classes = computed(
      () => `q-drawer q-drawer--${props.side}` + (flagMiniAnimate.value === true ? " q-drawer--mini-animate" : "") + (props.bordered === true ? " q-drawer--bordered" : "") + (isDark.value === true ? " q-drawer--dark q-dark" : "") + (flagPanning.value === true ? " no-transition" : showing.value === true ? "" : " q-layout--prevent-focus") + (belowBreakpoint.value === true ? " fixed q-drawer--on-top q-drawer--mobile q-drawer--top-padding" : ` q-drawer--${isMini.value === true ? "mini" : "standard"}` + (fixed.value === true || onLayout.value !== true ? " fixed" : "") + (props.overlay === true || props.miniToOverlay === true ? " q-drawer--on-top" : "") + (headerSlot.value === true ? " q-drawer--top-padding" : ""))
    );
    const openDirective = computed(() => {
      const dir = $q.lang.rtl === true ? props.side : otherSide.value;
      return [[
        TouchPan,
        onOpenPan,
        void 0,
        {
          [dir]: true,
          mouse: true
        }
      ]];
    });
    const contentCloseDirective = computed(() => {
      const dir = $q.lang.rtl === true ? otherSide.value : props.side;
      return [[
        TouchPan,
        onClosePan,
        void 0,
        {
          [dir]: true,
          mouse: true
        }
      ]];
    });
    const backdropCloseDirective = computed(() => {
      const dir = $q.lang.rtl === true ? otherSide.value : props.side;
      return [[
        TouchPan,
        onClosePan,
        void 0,
        {
          [dir]: true,
          mouse: true,
          mouseAllDir: true
        }
      ]];
    });
    function updateBelowBreakpoint() {
      updateLocal(belowBreakpoint, props.behavior === "mobile" || props.behavior !== "desktop" && $layout.totalWidth.value <= props.breakpoint);
    }
    watch(belowBreakpoint, (val) => {
      if (val === true) {
        lastDesktopState = showing.value;
        showing.value === true && hide(false);
      } else if (props.overlay === false && props.behavior !== "mobile" && lastDesktopState !== false) {
        if (showing.value === true) {
          applyPosition(0);
          applyBackdrop(0);
          cleanup();
        } else {
          show(false);
        }
      }
    });
    watch(() => props.side, (newSide, oldSide) => {
      if ($layout.instances[oldSide] === instance) {
        $layout.instances[oldSide] = void 0;
        $layout[oldSide].space = false;
        $layout[oldSide].offset = 0;
      }
      $layout.instances[newSide] = instance;
      $layout[newSide].size = size2.value;
      $layout[newSide].space = onLayout.value;
      $layout[newSide].offset = offset.value;
    });
    watch($layout.totalWidth, () => {
      if ($layout.isContainer.value === true || document.qScrollPrevented !== true) {
        updateBelowBreakpoint();
      }
    });
    watch(
      () => props.behavior + props.breakpoint,
      updateBelowBreakpoint
    );
    watch($layout.isContainer, (val) => {
      showing.value === true && preventBodyScroll(val !== true);
      val === true && updateBelowBreakpoint();
    });
    watch($layout.scrollbarWidth, () => {
      applyPosition(showing.value === true ? 0 : void 0);
    });
    watch(offset, (val) => {
      updateLayout("offset", val);
    });
    watch(onLayout, (val) => {
      emit2("onLayout", val);
      updateLayout("space", val);
    });
    watch(rightSide, () => {
      applyPosition();
    });
    watch(size2, (val) => {
      applyPosition();
      updateSizeOnLayout(props.miniToOverlay, val);
    });
    watch(() => props.miniToOverlay, (val) => {
      updateSizeOnLayout(val, size2.value);
    });
    watch(() => $q.lang.rtl, () => {
      applyPosition();
    });
    watch(() => props.mini, () => {
      if (props.noMiniAnimation)
        return;
      if (props.modelValue === true) {
        animateMini();
        $layout.animate();
      }
    });
    watch(isMini, (val) => {
      emit2("miniState", val);
    });
    function applyPosition(position2) {
      if (position2 === void 0) {
        nextTick$1(() => {
          position2 = showing.value === true ? 0 : size2.value;
          applyPosition(stateDirection.value * position2);
        });
      } else {
        if ($layout.isContainer.value === true && rightSide.value === true && (belowBreakpoint.value === true || Math.abs(position2) === size2.value)) {
          position2 += stateDirection.value * $layout.scrollbarWidth.value;
        }
        flagContentPosition.value = position2;
      }
    }
    function applyBackdrop(x) {
      flagBackdropBg.value = x;
    }
    function setScrollable(v) {
      const action = v === true ? "remove" : $layout.isContainer.value !== true ? "add" : "";
      action !== "" && document.body.classList[action]("q-body--drawer-toggle");
    }
    function animateMini() {
      timerMini !== null && clearTimeout(timerMini);
      if (vm.proxy && vm.proxy.$el) {
        vm.proxy.$el.classList.add("q-drawer--mini-animate");
      }
      flagMiniAnimate.value = true;
      timerMini = setTimeout(() => {
        timerMini = null;
        flagMiniAnimate.value = false;
        if (vm && vm.proxy && vm.proxy.$el) {
          vm.proxy.$el.classList.remove("q-drawer--mini-animate");
        }
      }, 150);
    }
    function onOpenPan(evt) {
      if (showing.value !== false) {
        return;
      }
      const width = size2.value, position2 = between(evt.distance.x, 0, width);
      if (evt.isFinal === true) {
        const opened = position2 >= Math.min(75, width);
        if (opened === true) {
          show();
        } else {
          $layout.animate();
          applyBackdrop(0);
          applyPosition(stateDirection.value * width);
        }
        flagPanning.value = false;
        return;
      }
      applyPosition(
        ($q.lang.rtl === true ? rightSide.value !== true : rightSide.value) ? Math.max(width - position2, 0) : Math.min(0, position2 - width)
      );
      applyBackdrop(
        between(position2 / width, 0, 1)
      );
      if (evt.isFirst === true) {
        flagPanning.value = true;
      }
    }
    function onClosePan(evt) {
      if (showing.value !== true) {
        return;
      }
      const width = size2.value, dir = evt.direction === props.side, position2 = ($q.lang.rtl === true ? dir !== true : dir) ? between(evt.distance.x, 0, width) : 0;
      if (evt.isFinal === true) {
        const opened = Math.abs(position2) < Math.min(75, width);
        if (opened === true) {
          $layout.animate();
          applyBackdrop(1);
          applyPosition(0);
        } else {
          hide();
        }
        flagPanning.value = false;
        return;
      }
      applyPosition(stateDirection.value * position2);
      applyBackdrop(between(1 - position2 / width, 0, 1));
      if (evt.isFirst === true) {
        flagPanning.value = true;
      }
    }
    function cleanup() {
      preventBodyScroll(false);
      setScrollable(true);
    }
    function updateLayout(prop, val) {
      $layout.update(props.side, prop, val);
    }
    function updateLocal(prop, val) {
      if (prop.value !== val) {
        prop.value = val;
      }
    }
    function updateSizeOnLayout(miniToOverlay, size3) {
      updateLayout("size", miniToOverlay === true ? props.miniWidth : size3);
    }
    $layout.instances[props.side] = instance;
    updateSizeOnLayout(props.miniToOverlay, size2.value);
    updateLayout("space", onLayout.value);
    updateLayout("offset", offset.value);
    if (props.showIfAbove === true && props.modelValue !== true && showing.value === true && props["onUpdate:modelValue"] !== void 0) {
      emit2("update:modelValue", true);
    }
    onMounted(() => {
      emit2("onLayout", onLayout.value);
      emit2("miniState", isMini.value);
      lastDesktopState = props.showIfAbove === true;
      const fn = () => {
        const action = showing.value === true ? handleShow : handleHide;
        action(false, true);
      };
      if ($layout.totalWidth.value !== 0) {
        nextTick$1(fn);
        return;
      }
      layoutTotalWidthWatcher = watch($layout.totalWidth, () => {
        layoutTotalWidthWatcher();
        layoutTotalWidthWatcher = void 0;
        if (showing.value === false && props.showIfAbove === true && belowBreakpoint.value === false) {
          show(false);
        } else {
          fn();
        }
      });
    });
    onBeforeUnmount(() => {
      layoutTotalWidthWatcher !== void 0 && layoutTotalWidthWatcher();
      if (timerMini !== null) {
        clearTimeout(timerMini);
        timerMini = null;
      }
      showing.value === true && cleanup();
      if ($layout.instances[props.side] === instance) {
        $layout.instances[props.side] = void 0;
        updateLayout("size", 0);
        updateLayout("offset", 0);
        updateLayout("space", false);
      }
    });
    return () => {
      const child = [];
      if (belowBreakpoint.value === true) {
        props.noSwipeOpen === false && child.push(
          withDirectives(
            h("div", {
              key: "open",
              class: `q-drawer__opener fixed-${props.side}`,
              "aria-hidden": "true"
            }),
            openDirective.value
          )
        );
        child.push(
          hDir(
            "div",
            {
              ref: "backdrop",
              class: backdropClass.value,
              style: backdropStyle.value,
              "aria-hidden": "true",
              onClick: hide
            },
            void 0,
            "backdrop",
            props.noSwipeBackdrop !== true && showing.value === true,
            () => backdropCloseDirective.value
          )
        );
      }
      const mini = isMini.value === true && slots.mini !== void 0;
      const content = [
        h(
          "div",
          {
            ...attrs,
            key: "" + mini,
            // required otherwise Vue will not diff correctly
            class: [
              contentClass.value,
              attrs.class
            ]
          },
          mini === true ? slots.mini() : hSlot(slots.default)
        )
      ];
      if (props.elevated === true && showing.value === true) {
        content.push(
          h("div", {
            class: "q-layout__shadow absolute-full overflow-hidden no-pointer-events"
          })
        );
      }
      child.push(
        hDir(
          "aside",
          { ref: "content", class: classes.value, style: style.value },
          content,
          "contentclose",
          props.noSwipeClose !== true && belowBreakpoint.value === true,
          () => contentCloseDirective.value
        )
      );
      return h("div", { class: "q-drawer-container" }, child);
    };
  }
});
const QPageContainer = createComponent({
  name: "QPageContainer",
  setup(_, { slots }) {
    const { proxy: { $q } } = getCurrentInstance();
    const $layout = inject(layoutKey, emptyRenderFn);
    if ($layout === emptyRenderFn) {
      console.error("QPageContainer needs to be child of QLayout");
      return emptyRenderFn;
    }
    provide(pageContainerKey, true);
    const style = computed(() => {
      const css2 = {};
      if ($layout.header.space === true) {
        css2.paddingTop = `${$layout.header.size}px`;
      }
      if ($layout.right.space === true) {
        css2[`padding${$q.lang.rtl === true ? "Left" : "Right"}`] = `${$layout.right.size}px`;
      }
      if ($layout.footer.space === true) {
        css2.paddingBottom = `${$layout.footer.size}px`;
      }
      if ($layout.left.space === true) {
        css2[`padding${$q.lang.rtl === true ? "Right" : "Left"}`] = `${$layout.left.size}px`;
      }
      return css2;
    });
    return () => h("div", {
      class: "q-page-container",
      style: style.value
    }, hSlot(slots.default));
  }
});
const { passive } = listenOpts;
const axisValues = ["both", "horizontal", "vertical"];
const QScrollObserver = createComponent({
  name: "QScrollObserver",
  props: {
    axis: {
      type: String,
      validator: (v) => axisValues.includes(v),
      default: "vertical"
    },
    debounce: [String, Number],
    scrollTarget: {
      default: void 0
    }
  },
  emits: ["scroll"],
  setup(props, { emit: emit2 }) {
    const scroll = {
      position: {
        top: 0,
        left: 0
      },
      direction: "down",
      directionChanged: false,
      delta: {
        top: 0,
        left: 0
      },
      inflectionPoint: {
        top: 0,
        left: 0
      }
    };
    let clearTimer = null, localScrollTarget, parentEl;
    watch(() => props.scrollTarget, () => {
      unconfigureScrollTarget();
      configureScrollTarget();
    });
    function emitEvent() {
      clearTimer !== null && clearTimer();
      const top = Math.max(0, getVerticalScrollPosition(localScrollTarget));
      const left = getHorizontalScrollPosition(localScrollTarget);
      const delta = {
        top: top - scroll.position.top,
        left: left - scroll.position.left
      };
      if (props.axis === "vertical" && delta.top === 0 || props.axis === "horizontal" && delta.left === 0) {
        return;
      }
      const curDir = Math.abs(delta.top) >= Math.abs(delta.left) ? delta.top < 0 ? "up" : "down" : delta.left < 0 ? "left" : "right";
      scroll.position = { top, left };
      scroll.directionChanged = scroll.direction !== curDir;
      scroll.delta = delta;
      if (scroll.directionChanged === true) {
        scroll.direction = curDir;
        scroll.inflectionPoint = scroll.position;
      }
      emit2("scroll", { ...scroll });
    }
    function configureScrollTarget() {
      localScrollTarget = getScrollTarget(parentEl, props.scrollTarget);
      localScrollTarget.addEventListener("scroll", trigger2, passive);
      trigger2(true);
    }
    function unconfigureScrollTarget() {
      if (localScrollTarget !== void 0) {
        localScrollTarget.removeEventListener("scroll", trigger2, passive);
        localScrollTarget = void 0;
      }
    }
    function trigger2(immediately) {
      if (immediately === true || props.debounce === 0 || props.debounce === "0") {
        emitEvent();
      } else if (clearTimer === null) {
        const [timer, fn] = props.debounce ? [setTimeout(emitEvent, props.debounce), clearTimeout] : [requestAnimationFrame(emitEvent), cancelAnimationFrame];
        clearTimer = () => {
          fn(timer);
          clearTimer = null;
        };
      }
    }
    const { proxy } = getCurrentInstance();
    watch(() => proxy.$q.lang.rtl, emitEvent);
    onMounted(() => {
      parentEl = proxy.$el.parentNode;
      configureScrollTarget();
    });
    onBeforeUnmount(() => {
      clearTimer !== null && clearTimer();
      unconfigureScrollTarget();
    });
    Object.assign(proxy, {
      trigger: trigger2,
      getPosition: () => scroll
    });
    return noop;
  }
});
const QLayout = createComponent({
  name: "QLayout",
  props: {
    container: Boolean,
    view: {
      type: String,
      default: "hhh lpr fff",
      validator: (v) => /^(h|l)h(h|r) lpr (f|l)f(f|r)$/.test(v.toLowerCase())
    },
    onScroll: Function,
    onScrollHeight: Function,
    onResize: Function
  },
  setup(props, { slots, emit: emit2 }) {
    const { proxy: { $q } } = getCurrentInstance();
    const rootRef = ref(null);
    const height = ref($q.screen.height);
    const width = ref(props.container === true ? 0 : $q.screen.width);
    const scroll = ref({ position: 0, direction: "down", inflectionPoint: 0 });
    const containerHeight = ref(0);
    const scrollbarWidth = ref(isRuntimeSsrPreHydration.value === true ? 0 : getScrollbarWidth());
    const classes = computed(
      () => "q-layout q-layout--" + (props.container === true ? "containerized" : "standard")
    );
    const style = computed(() => props.container === false ? { minHeight: $q.screen.height + "px" } : null);
    const targetStyle = computed(() => scrollbarWidth.value !== 0 ? { [$q.lang.rtl === true ? "left" : "right"]: `${scrollbarWidth.value}px` } : null);
    const targetChildStyle = computed(() => scrollbarWidth.value !== 0 ? {
      [$q.lang.rtl === true ? "right" : "left"]: 0,
      [$q.lang.rtl === true ? "left" : "right"]: `-${scrollbarWidth.value}px`,
      width: `calc(100% + ${scrollbarWidth.value}px)`
    } : null);
    function onPageScroll(data) {
      if (props.container === true || document.qScrollPrevented !== true) {
        const info = {
          position: data.position.top,
          direction: data.direction,
          directionChanged: data.directionChanged,
          inflectionPoint: data.inflectionPoint.top,
          delta: data.delta.top
        };
        scroll.value = info;
        props.onScroll !== void 0 && emit2("scroll", info);
      }
    }
    function onPageResize(data) {
      const { height: newHeight, width: newWidth } = data;
      let resized = false;
      if (height.value !== newHeight) {
        resized = true;
        height.value = newHeight;
        props.onScrollHeight !== void 0 && emit2("scrollHeight", newHeight);
        updateScrollbarWidth();
      }
      if (width.value !== newWidth) {
        resized = true;
        width.value = newWidth;
      }
      if (resized === true && props.onResize !== void 0) {
        emit2("resize", data);
      }
    }
    function onContainerResize({ height: height2 }) {
      if (containerHeight.value !== height2) {
        containerHeight.value = height2;
        updateScrollbarWidth();
      }
    }
    function updateScrollbarWidth() {
      if (props.container === true) {
        const width2 = height.value > containerHeight.value ? getScrollbarWidth() : 0;
        if (scrollbarWidth.value !== width2) {
          scrollbarWidth.value = width2;
        }
      }
    }
    let animateTimer = null;
    const $layout = {
      instances: {},
      view: computed(() => props.view),
      isContainer: computed(() => props.container),
      rootRef,
      height,
      containerHeight,
      scrollbarWidth,
      totalWidth: computed(() => width.value + scrollbarWidth.value),
      rows: computed(() => {
        const rows = props.view.toLowerCase().split(" ");
        return {
          top: rows[0].split(""),
          middle: rows[1].split(""),
          bottom: rows[2].split("")
        };
      }),
      header: reactive({ size: 0, offset: 0, space: false }),
      right: reactive({ size: 300, offset: 0, space: false }),
      footer: reactive({ size: 0, offset: 0, space: false }),
      left: reactive({ size: 300, offset: 0, space: false }),
      scroll,
      animate() {
        if (animateTimer !== null) {
          clearTimeout(animateTimer);
        } else {
          document.body.classList.add("q-body--layout-animate");
        }
        animateTimer = setTimeout(() => {
          animateTimer = null;
          document.body.classList.remove("q-body--layout-animate");
        }, 155);
      },
      update(part, prop, val) {
        $layout[part][prop] = val;
      }
    };
    provide(layoutKey, $layout);
    if (getScrollbarWidth() > 0) {
      let restoreScrollbar2 = function() {
        timer = null;
        el.classList.remove("hide-scrollbar");
      }, hideScrollbar2 = function() {
        if (timer === null) {
          if (el.scrollHeight > $q.screen.height) {
            return;
          }
          el.classList.add("hide-scrollbar");
        } else {
          clearTimeout(timer);
        }
        timer = setTimeout(restoreScrollbar2, 300);
      }, updateScrollEvent2 = function(action) {
        if (timer !== null && action === "remove") {
          clearTimeout(timer);
          restoreScrollbar2();
        }
        window[`${action}EventListener`]("resize", hideScrollbar2);
      };
      var restoreScrollbar = restoreScrollbar2, hideScrollbar = hideScrollbar2, updateScrollEvent = updateScrollEvent2;
      let timer = null;
      const el = document.body;
      watch(
        () => props.container !== true ? "add" : "remove",
        updateScrollEvent2
      );
      props.container !== true && updateScrollEvent2("add");
      onUnmounted(() => {
        updateScrollEvent2("remove");
      });
    }
    return () => {
      const content = hMergeSlot(slots.default, [
        h(QScrollObserver, { onScroll: onPageScroll }),
        h(QResizeObserver, { onResize: onPageResize })
      ]);
      const layout = h("div", {
        class: classes.value,
        style: style.value,
        ref: props.container === true ? void 0 : rootRef,
        tabindex: -1
      }, content);
      if (props.container === true) {
        return h("div", {
          class: "q-layout-container overflow-hidden",
          ref: rootRef
        }, [
          h(QResizeObserver, { onResize: onContainerResize }),
          h("div", {
            class: "absolute-full",
            style: targetStyle.value
          }, [
            h("div", {
              class: "scroll",
              style: targetChildStyle.value
            }, [layout])
          ])
        ]);
      }
      return layout;
    };
  }
});
const _imports_0 = "/assets/tsFire-c5db8e35.jpg";
function invertRecord(rec) {
  const ret = {};
  for (const k in rec) {
    for (const v of rec[k]) {
      if (ret[v] !== void 0) {
        throw new Error(`duplicate value ${v.toString()}`);
      }
      ret[v] = k;
    }
  }
  return ret;
}
const categoryCodes = {
  lint: [],
  info: ["2772", "2769"]
};
invertRecord(categoryCodes);
const _ValueMap = class {
  constructor(surrogate, monoid, iterable, wrapper = (x) => x) {
    this.internal = wrapper(
      new Map(
        !iterable ? void 0 : function* () {
          for (const [key, value2] of iterable) {
            yield [surrogate(key), [key, value2]];
          }
        }()
      )
    );
    this.surrogate = surrogate;
    this.monoid = monoid ?? ((_, b) => b);
  }
  clear() {
    this.internal.clear();
  }
  delete(key) {
    return this.internal.delete(this.surrogate(key));
  }
  forEach(callbackfn) {
    this.internal.forEach(([key, value2]) => callbackfn(value2, key, this));
  }
  get(key) {
    var _a;
    return (_a = this.internal.get(this.surrogate(key))) == null ? void 0 : _a[1];
  }
  has(key) {
    return this.internal.has(this.surrogate(key));
  }
  set(key, value2) {
    let v = this.get(key);
    v = v === void 0 ? value2 : this.monoid(v, value2);
    this.internal.set(this.surrogate(key), [key, v]);
    return this;
  }
  update(key, fn) {
    const v = this.get(key);
    if (v === void 0) {
      return this;
    }
    this.set(key, fn(v));
    return this;
  }
  get size() {
    return this.internal.size;
  }
  *[Symbol.iterator]() {
    for (const [_, pair] of this.internal) {
      yield pair;
    }
  }
  *keys() {
    for (const [, [key]] of this.internal) {
      yield key;
    }
  }
  *values() {
    for (const [, [, value2]] of this.internal) {
      yield value2;
    }
  }
  *rawEntries() {
    for (const [, e] of this.internal) {
      yield e;
    }
  }
  get [Symbol.toStringTag]() {
    return "ValueMap";
  }
};
let ValueMap = _ValueMap;
(() => {
  Object.defineProperty(_ValueMap, "entries", {
    value: _ValueMap.prototype[Symbol.iterator],
    enumerable: false,
    configurable: true,
    writable: true
  });
})();
function uniqObjects(by, ...objects) {
  const map2 = new ValueMap(by);
  for (const obj of objects) {
    for (const entry of obj) {
      map2.set(entry, void 0);
    }
  }
  return Array.from(map2.keys());
}
function errMap(errs, monoid) {
  const ret = new ValueMap(
    JSON.stringify,
    monoid,
    void 0,
    reactive
  );
  for (const err of errs) {
    ret.set(err.parsed, { sources: err.sources });
  }
  return ret;
}
function mergeSources(a, b) {
  const ret = {};
  for (const _plugin in a.sources) {
    const plugin = _plugin;
    ret[plugin] = { ...a.sources[plugin] };
  }
  for (const _plugin in b.sources) {
    const plugin = _plugin;
    if (!(plugin in ret)) {
      ret[plugin] = { ...b.sources[plugin] };
      continue;
    }
    for (const file in b.sources[plugin]) {
      if (!(file in ret[plugin])) {
        ret[plugin][file] = [...b.sources[plugin][file]];
        continue;
      }
      ret[plugin][file] = uniqObjects(
        JSON.stringify,
        ret[plugin][file],
        b.sources[plugin][file]
      );
    }
  }
  return { sources: ret };
}
class InternalArktypeError extends Error {
}
const throwInternalError = (message) => {
  throw new InternalArktypeError(message);
};
class ParseError extends Error {
}
const throwParseError = (message) => {
  throw new ParseError(message);
};
const hasDomain = (data, domain2) => domainOf(data) === domain2;
const domainOf = (data) => {
  const builtinType = typeof data;
  return builtinType === "object" ? data === null ? "null" : "object" : builtinType === "function" ? "object" : builtinType;
};
const domainDescriptions = {
  bigint: "a bigint",
  boolean: "boolean",
  null: "null",
  number: "a number",
  object: "an object",
  string: "a string",
  symbol: "a symbol",
  undefined: "undefined"
};
const isKeyOf = (k, obj) => k in obj;
const entriesOf = (o) => Object.entries(o);
const objectKeysOf = (o) => Object.keys(o);
const prototypeKeysOf = (value2) => {
  const result = [];
  while (value2 !== Object.prototype && value2 !== null && value2 !== void 0) {
    for (const k of Object.getOwnPropertyNames(value2)) {
      if (!result.includes(k)) {
        result.push(k);
      }
    }
    for (const symbol of Object.getOwnPropertySymbols(value2)) {
      if (!result.includes(symbol)) {
        result.push(symbol);
      }
    }
    value2 = Object.getPrototypeOf(value2);
  }
  return result;
};
const hasKey = (o, k) => {
  const valueAtKey = o == null ? void 0 : o[k];
  return valueAtKey !== void 0 && valueAtKey !== null;
};
const keyCount = (o) => Object.keys(o).length;
const hasKeys = (value2) => hasDomain(value2, "object") ? Object.keys(value2).length !== 0 : false;
const listFrom = (data) => Array.isArray(data) ? data : [
  data
];
class Path extends Array {
  static fromString(s, delimiter = "/") {
    return s === delimiter ? new Path() : new Path(...s.split(delimiter));
  }
  toString(delimiter = "/") {
    return this.length ? this.join(delimiter) : delimiter;
  }
}
const getPath = (root, path) => {
  let result = root;
  for (const segment of path) {
    if (typeof result !== "object" || result === null) {
      return void 0;
    }
    result = result[segment];
  }
  return result;
};
const wellFormedNumberMatcher = /^(?!^-0$)-?(?:0|[1-9]\d*)(?:\.\d*[1-9])?$/;
const isWellFormedNumber = (s) => wellFormedNumberMatcher.test(s);
const numberLikeMatcher = /^-?\d*\.?\d*$/;
const isNumberLike = (s) => s.length !== 0 && numberLikeMatcher.test(s);
const wellFormedIntegerMatcher = /^(?:0|(?:-?[1-9]\d*))$/;
const isWellFormedInteger = (s) => wellFormedIntegerMatcher.test(s);
const wellFormedNonNegativeIntegerMatcher = /^(?:0|(?:[1-9]\d*))$/;
const integerLikeMatcher = /^-?\d+$/;
const isIntegerLike = (s) => integerLikeMatcher.test(s);
const numericLiteralDescriptions = {
  number: "a number",
  bigint: "a bigint",
  integer: "an integer"
};
const writeMalformedNumericLiteralMessage = (def2, kind) => `'${def2}' was parsed as ${numericLiteralDescriptions[kind]} but could not be narrowed to a literal value. Avoid unnecessary leading or trailing zeros and other abnormal notation`;
const isWellFormed = (def2, kind) => kind === "number" ? isWellFormedNumber(def2) : isWellFormedInteger(def2);
const parseKind = (def2, kind) => kind === "number" ? Number(def2) : Number.parseInt(def2);
const isKindLike = (def2, kind) => kind === "number" ? isNumberLike(def2) : isIntegerLike(def2);
const tryParseWellFormedNumber = (token, errorOnFail) => parseWellFormed(token, "number", errorOnFail);
const tryParseWellFormedInteger = (token, errorOnFail) => parseWellFormed(token, "integer", errorOnFail);
const parseWellFormed = (token, kind, errorOnFail) => {
  const value2 = parseKind(token, kind);
  if (!Number.isNaN(value2)) {
    if (isWellFormed(token, kind)) {
      return value2;
    }
    if (isKindLike(token, kind)) {
      return throwParseError(writeMalformedNumericLiteralMessage(token, kind));
    }
  }
  return errorOnFail ? throwParseError(errorOnFail === true ? `Failed to parse ${numericLiteralDescriptions[kind]} from '${token}'` : errorOnFail) : void 0;
};
const tryParseWellFormedBigint = (def2) => {
  if (def2[def2.length - 1] !== "n") {
    return;
  }
  const maybeIntegerLiteral = def2.slice(0, -1);
  let value2;
  try {
    value2 = BigInt(maybeIntegerLiteral);
  } catch {
    return;
  }
  if (wellFormedIntegerMatcher.test(maybeIntegerLiteral)) {
    return value2;
  }
  if (integerLikeMatcher.test(maybeIntegerLiteral)) {
    return throwParseError(writeMalformedNumericLiteralMessage(def2, "bigint"));
  }
};
const stringify = (data, indent) => {
  switch (domainOf(data)) {
    case "object":
      return JSON.stringify(serializeRecurse(data, stringifyOpts, []), null, indent);
    case "symbol":
      return stringifyOpts.onSymbol(data);
    default:
      return serializePrimitive(data);
  }
};
const stringifyOpts = {
  onCycle: () => "(cycle)",
  onSymbol: (v) => `(symbol${v.description && ` ${v.description}`})`,
  onFunction: (v) => `(function${v.name && ` ${v.name}`})`
};
const serializeRecurse = (data, context, seen2) => {
  switch (domainOf(data)) {
    case "object":
      if (typeof data === "function") {
        return stringifyOpts.onFunction(data);
      }
      if (seen2.includes(data)) {
        return "(cycle)";
      }
      const nextSeen = [
        ...seen2,
        data
      ];
      if (Array.isArray(data)) {
        return data.map((item) => serializeRecurse(item, context, nextSeen));
      }
      const result = {};
      for (const k in data) {
        result[k] = serializeRecurse(data[k], context, nextSeen);
      }
      return result;
    case "symbol":
      return stringifyOpts.onSymbol(data);
    case "bigint":
      return `${data}n`;
    case "undefined":
      return "undefined";
    default:
      return data;
  }
};
const serializePrimitive = (value2) => typeof value2 === "string" ? `'${value2}'` : typeof value2 === "bigint" ? `${value2}n` : `${value2}`;
function _checkPrivateRedeclaration$3(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classApplyDescriptorGet$3(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
function _classApplyDescriptorSet$3(receiver, descriptor, value2) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value2);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value2;
  }
}
function _classExtractFieldDescriptor$3(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classPrivateFieldGet$3(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor$3(receiver, privateMap, "get");
  return _classApplyDescriptorGet$3(receiver, descriptor);
}
function _classPrivateFieldInit$3(obj, privateMap, value2) {
  _checkPrivateRedeclaration$3(obj, privateMap);
  privateMap.set(obj, value2);
}
function _classPrivateFieldSet$3(receiver, privateMap, value2) {
  var descriptor = _classExtractFieldDescriptor$3(receiver, privateMap, "set");
  _classApplyDescriptorSet$3(receiver, descriptor, value2);
  return value2;
}
function _defineProperty$7(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
const composeIntersection = (reducer) => (l, r, state) => l === void 0 ? r === void 0 ? throwInternalError(undefinedOperandsMessage) : r : r === void 0 ? l : reducer(l, r, state);
const undefinedOperandsMessage = `Unexpected operation two undefined operands`;
const disjointDescriptionWriters = {
  domain: ({ l, r }) => `${l.join(", ")} and ${r.join(", ")}`,
  range: ({ l, r }) => `${stringifyRange(l)} and ${stringifyRange(r)}`,
  class: ({ l, r }) => `classes ${typeof l === "string" ? l : l.name} and ${typeof r === "string" ? r : r.name}`,
  tupleLength: ({ l, r }) => `tuples of length ${l} and ${r}`,
  value: ({ l, r }) => `literal values ${stringify(l)} and ${stringify(r)}`,
  leftAssignability: ({ l, r }) => `literal value ${stringify(l.value)} and ${stringify(r)}`,
  rightAssignability: ({ l, r }) => `literal value ${stringify(r.value)} and ${stringify(l)}`,
  union: ({ l, r }) => `branches ${stringify(l)} and branches ${stringify(r)}`
};
const stringifyRange = (range) => "limit" in range ? `the range of exactly ${range.limit}` : range.min ? range.max ? `the range bounded by ${range.min.comparator}${range.min.limit} and ${range.max.comparator}${range.max.limit}` : `${range.min.comparator}${range.min.limit}` : range.max ? `${range.max.comparator}${range.max.limit}` : "the unbounded range";
var _disjoints = /* @__PURE__ */ new WeakMap();
class IntersectionState {
  get disjoints() {
    return _classPrivateFieldGet$3(this, _disjoints);
  }
  addDisjoint(kind, l, r) {
    _classPrivateFieldGet$3(this, _disjoints)[`${this.path}`] = {
      kind,
      l,
      r
    };
    return empty$1;
  }
  constructor(type2, lastOperator) {
    _defineProperty$7(this, "type", void 0);
    _defineProperty$7(this, "lastOperator", void 0);
    _defineProperty$7(this, "path", void 0);
    _defineProperty$7(this, "domain", void 0);
    _classPrivateFieldInit$3(this, _disjoints, {
      writable: true,
      value: void 0
    });
    this.type = type2;
    this.lastOperator = lastOperator;
    this.path = new Path();
    _classPrivateFieldSet$3(this, _disjoints, {});
  }
}
const empty$1 = Symbol("empty");
const anonymousDisjoint = () => empty$1;
const isDisjoint = (result) => result === empty$1;
const equal = Symbol("equal");
const equality = () => equal;
const isEquality = (result) => result === equal;
const composeKeyedIntersection = (reducer, config) => (l, r, state) => {
  const result = {};
  const keys = objectKeysOf({
    ...l,
    ...r
  });
  let lImpliesR = true;
  let rImpliesL = true;
  for (const k of keys) {
    const keyResult = typeof reducer === "function" ? reducer(k, l[k], r[k], state) : reducer[k](l[k], r[k], state);
    if (isEquality(keyResult)) {
      if (l[k] !== void 0) {
        result[k] = l[k];
      }
    } else if (isDisjoint(keyResult)) {
      if (config.onEmpty === "omit") {
        lImpliesR = false;
        rImpliesL = false;
      } else {
        return empty$1;
      }
    } else {
      if (keyResult !== void 0) {
        result[k] = keyResult;
      }
      lImpliesR && (lImpliesR = keyResult === l[k]);
      rImpliesL && (rImpliesL = keyResult === r[k]);
    }
  }
  return lImpliesR ? rImpliesL ? equality() : l : rImpliesL ? r : result;
};
const compileDisjointReasonsMessage = (disjoints) => {
  const paths = objectKeysOf(disjoints);
  if (paths.length === 1) {
    const path = paths[0];
    return `${path === "/" ? "" : `At ${path}: `}Intersection of ${disjointDescriptionWriters[disjoints[path].kind](disjoints[path])} results in an unsatisfiable type`;
  }
  let message = `
        "Intersection results in unsatisfiable types at the following paths:
`;
  for (const path in disjoints) {
    message += `  ${path}: ${disjointDescriptionWriters[disjoints[path].kind](disjoints[path])}
`;
  }
  return message;
};
const writeImplicitNeverMessage = (path, operator, description) => `${path.length ? `At ${path}: ` : ""}${operator} ${description ? `${description} ` : ""}results in an unsatisfiable type`;
const defaultObjectKinds = {
  Array,
  Date,
  Error,
  Function,
  Map,
  RegExp,
  Set,
  Object,
  String,
  Number,
  Boolean,
  WeakMap,
  WeakSet,
  Promise
};
const objectKindOf = (data, kinds) => {
  var _a;
  if (domainOf(data) !== "object") {
    return void 0;
  }
  const kindSet = kinds ?? defaultObjectKinds;
  let prototype = Object.getPrototypeOf(data);
  while ((prototype == null ? void 0 : prototype.constructor) && (!kindSet[prototype.constructor.name] || !(data instanceof kindSet[prototype.constructor.name]))) {
    prototype = Object.getPrototypeOf(prototype);
  }
  return (_a = prototype == null ? void 0 : prototype.constructor) == null ? void 0 : _a.name;
};
const isArray = (data) => Array.isArray(data);
const objectKindDescriptions = {
  Object: "an object",
  Array: "an array",
  Function: "a function",
  Date: "a Date",
  RegExp: "a RegExp",
  Error: "an Error",
  Map: "a Map",
  Set: "a Set",
  String: "a String object",
  Number: "a Number object",
  Boolean: "a Boolean object",
  Promise: "a Promise",
  WeakMap: "a WeakMap",
  WeakSet: "a WeakSet"
};
const getExactConstructorObjectKind = (constructor) => {
  const constructorName = Object(constructor).name;
  return constructorName && isKeyOf(constructorName, defaultObjectKinds) && defaultObjectKinds[constructorName] === constructor ? constructorName : void 0;
};
const classIntersection = composeIntersection((l, r, state) => {
  return l === r ? equality() : l instanceof r ? l : r instanceof l ? r : state.addDisjoint("class", l, r);
});
const checkClass = (expectedClass, state) => {
  if (typeof expectedClass === "string") {
    return objectKindOf(state.data) === expectedClass || !state.problems.add("class", expectedClass);
  }
  return state.data instanceof expectedClass || !state.problems.add("class", expectedClass);
};
const collapsibleListUnion = (l, r) => {
  if (Array.isArray(l)) {
    if (Array.isArray(r)) {
      const result = listUnion(l, r);
      return result.length === l.length ? result.length === r.length ? equality() : l : result.length === r.length ? r : result;
    }
    return l.includes(r) ? l : [
      ...l,
      r
    ];
  }
  if (Array.isArray(r)) {
    return r.includes(l) ? r : [
      ...r,
      l
    ];
  }
  return l === r ? equality() : [
    l,
    r
  ];
};
const listUnion = (l, r) => {
  const result = [
    ...l
  ];
  for (const expression of r) {
    if (!l.includes(expression)) {
      result.push(expression);
    }
  }
  return result;
};
const divisorIntersection = composeIntersection((l, r) => l === r ? equality() : Math.abs(l * r / greatestCommonDivisor(l, r)));
const greatestCommonDivisor = (l, r) => {
  let previous;
  let greatestCommonDivisor2 = l;
  let current = r;
  while (current !== 0) {
    previous = current;
    current = greatestCommonDivisor2 % current;
    greatestCommonDivisor2 = previous;
  }
  return greatestCommonDivisor2;
};
const checkDivisor = (divisor, state) => state.data % divisor === 0 || !state.problems.add("divisor", divisor);
const isOptional = (prop) => prop[0] === "?";
const isPrerequisite = (prop) => prop[0] === "!";
const mappedKeys = {
  index: "[index]"
};
const propToNode = (prop) => isOptional(prop) || isPrerequisite(prop) ? prop[1] : prop;
const getTupleLengthIfPresent = (result) => {
  if (typeof result.length === "object" && isPrerequisite(result.length) && typeof result.length[1] !== "string" && isLiteralNode(result.length[1], "number")) {
    return result.length[1].number.value;
  }
};
const propsIntersection = composeIntersection((l, r, state) => {
  const result = propKeysIntersection(l, r, state);
  if (typeof result === "symbol") {
    return result;
  }
  const lengthValue = getTupleLengthIfPresent(result);
  if (lengthValue === void 0 || !(mappedKeys.index in result)) {
    return result;
  }
  const { [mappedKeys.index]: indexProp, ...updatedResult } = result;
  const indexNode = propToNode(indexProp);
  for (let i2 = 0; i2 < lengthValue; i2++) {
    if (!updatedResult[i2]) {
      updatedResult[i2] = indexNode;
      continue;
    }
    const existingNodeAtIndex = propToNode(updatedResult[i2]);
    state.path.push(`${i2}`);
    const updatedResultAtIndex = nodeIntersection(existingNodeAtIndex, indexNode, state);
    state.path.pop();
    if (isDisjoint(updatedResultAtIndex)) {
      return updatedResultAtIndex;
    } else if (!isEquality(updatedResultAtIndex) && updatedResultAtIndex !== existingNodeAtIndex) {
      updatedResult[i2] = updatedResultAtIndex;
    }
  }
  return updatedResult;
});
const propKeysIntersection = composeKeyedIntersection((propKey, l, r, context) => {
  if (l === void 0) {
    return r === void 0 ? equality() : r;
  }
  if (r === void 0) {
    return l;
  }
  context.path.push(propKey);
  const result = nodeIntersection(propToNode(l), propToNode(r), context);
  context.path.pop();
  const resultIsOptional = isOptional(l) && isOptional(r);
  if (isDisjoint(result) && resultIsOptional) {
    return {};
  }
  return result;
}, {
  onEmpty: "bubble"
});
const flattenProps = (entries, props, ctx) => {
  var _a;
  const keyConfig = ((_a = ctx.type.config) == null ? void 0 : _a.keys) ?? ctx.type.scope.config.keys;
  return keyConfig === "loose" ? flattenLooseProps(entries, props, ctx) : flattenPropsRecord(keyConfig, entries, props, ctx);
};
const flattenLooseProps = (entries, props, ctx) => {
  for (const k in props) {
    const prop = props[k];
    ctx.path.push(k);
    if (k === mappedKeys.index) {
      entries.push([
        "indexProp",
        flattenNode(propToNode(prop), ctx)
      ]);
    } else if (isOptional(prop)) {
      entries.push([
        "optionalProp",
        [
          k,
          flattenNode(prop[1], ctx)
        ]
      ]);
    } else if (isPrerequisite(prop)) {
      entries.push([
        "prerequisiteProp",
        [
          k,
          flattenNode(prop[1], ctx)
        ]
      ]);
    } else {
      entries.push([
        "requiredProp",
        [
          k,
          flattenNode(prop, ctx)
        ]
      ]);
    }
    ctx.path.pop();
  }
};
const flattenPropsRecord = (kind, entries, props, ctx) => {
  const result = {
    required: {},
    optional: {}
  };
  for (const k in props) {
    const prop = props[k];
    ctx.path.push(k);
    if (k === mappedKeys.index) {
      result.index = flattenNode(propToNode(prop), ctx);
    } else if (isOptional(prop)) {
      result.optional[k] = flattenNode(prop[1], ctx);
    } else if (isPrerequisite(prop)) {
      entries.push([
        "prerequisiteProp",
        [
          k,
          flattenNode(prop[1], ctx)
        ]
      ]);
    } else {
      result.required[k] = flattenNode(prop, ctx);
    }
    ctx.path.pop();
  }
  entries.push([
    `${kind}Props`,
    result
  ]);
};
function _defineProperty$6(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
const sizeOf = (data) => typeof data === "string" || Array.isArray(data) ? data.length : typeof data === "number" ? data : 0;
const unitsOf = (data) => typeof data === "string" ? "characters" : Array.isArray(data) ? "items long" : "";
class DataWrapper {
  toString() {
    return stringify(this.value);
  }
  get domain() {
    return domainOf(this.value);
  }
  get size() {
    return sizeOf(this.value);
  }
  get units() {
    return unitsOf(this.value);
  }
  get className() {
    return Object(this.value).constructor.name;
  }
  constructor(value2) {
    _defineProperty$6(this, "value", void 0);
    this.value = value2;
  }
}
const minComparators = {
  ">": true,
  ">=": true
};
const maxComparators = {
  "<": true,
  "<=": true
};
const isEqualityRange = (range) => "comparator" in range;
const rangeIntersection = composeIntersection((l, r, state) => {
  if (isEqualityRange(l)) {
    if (isEqualityRange(r)) {
      return l.limit === r.limit ? equality() : state.addDisjoint("range", l, r);
    }
    return rangeAllows(r, l.limit) ? l : state.addDisjoint("range", l, r);
  }
  if (isEqualityRange(r)) {
    return rangeAllows(l, r.limit) ? r : state.addDisjoint("range", l, r);
  }
  const stricterMin = compareStrictness("min", l.min, r.min);
  const stricterMax = compareStrictness("max", l.max, r.max);
  if (stricterMin === "l") {
    if (stricterMax === "r") {
      return compareStrictness("min", l.min, r.max) === "l" ? state.addDisjoint("range", l, r) : {
        min: l.min,
        max: r.max
      };
    }
    return l;
  }
  if (stricterMin === "r") {
    if (stricterMax === "l") {
      return compareStrictness("max", l.max, r.min) === "l" ? state.addDisjoint("range", l, r) : {
        min: r.min,
        max: l.max
      };
    }
    return r;
  }
  return stricterMax === "l" ? l : stricterMax === "r" ? r : equality();
});
const rangeAllows = (range, n) => isEqualityRange(range) ? n === range.limit : minAllows(range.min, n) && maxAllows(range.max, n);
const minAllows = (min, n) => !min || n > min.limit || n === min.limit && !isExclusive(min.comparator);
const maxAllows = (max, n) => !max || n < max.limit || n === max.limit && !isExclusive(max.comparator);
const flattenRange = (entries, range, ctx) => {
  const units = ctx.lastDomain === "string" ? "characters" : ctx.lastDomain === "object" ? "items long" : void 0;
  if (isEqualityRange(range)) {
    return entries.push([
      "bound",
      units ? {
        ...range,
        units
      } : range
    ]);
  }
  if (range.min) {
    entries.push([
      "bound",
      units ? {
        ...range.min,
        units
      } : range.min
    ]);
  }
  if (range.max) {
    entries.push([
      "bound",
      units ? {
        ...range.max,
        units
      } : range.max
    ]);
  }
};
const checkBound = (bound, state) => comparatorCheckers[bound.comparator](sizeOf(state.data), bound.limit) || !state.problems.add("bound", bound);
const comparatorCheckers = {
  "<": (size2, limit) => size2 < limit,
  ">": (size2, limit) => size2 > limit,
  "<=": (size2, limit) => size2 <= limit,
  ">=": (size2, limit) => size2 >= limit,
  "==": (size2, limit) => size2 === limit
};
const compareStrictness = (kind, l, r) => !l ? !r ? "=" : "r" : !r ? "l" : l.limit === r.limit ? isExclusive(l.comparator) ? isExclusive(r.comparator) ? "=" : "l" : isExclusive(r.comparator) ? "r" : "=" : kind === "min" ? l.limit > r.limit ? "l" : "r" : l.limit < r.limit ? "l" : "r";
const isExclusive = (comparator2) => comparator2.length === 1;
const regexCache = {};
const getRegex = (source) => {
  if (!regexCache[source]) {
    regexCache[source] = new RegExp(source);
  }
  return regexCache[source];
};
const checkRegex = (source, state) => getRegex(source).test(state.data) || !state.problems.add("regex", `/${source}/`);
const regexIntersection = composeIntersection(collapsibleListUnion);
const rulesIntersection = (l, r, state) => "value" in l ? "value" in r ? l.value === r.value ? equality() : state.addDisjoint("value", l.value, r.value) : literalSatisfiesRules(l.value, r, state) ? l : state.addDisjoint("leftAssignability", l, r) : "value" in r ? literalSatisfiesRules(r.value, l, state) ? r : state.addDisjoint("rightAssignability", l, r) : narrowableRulesIntersection(l, r, state);
const narrowIntersection = composeIntersection(collapsibleListUnion);
const narrowableRulesIntersection = composeKeyedIntersection({
  divisor: divisorIntersection,
  regex: regexIntersection,
  props: propsIntersection,
  class: classIntersection,
  range: rangeIntersection,
  narrow: narrowIntersection
}, {
  onEmpty: "bubble"
});
const flattenRules = (rules, ctx) => {
  const entries = [];
  let k;
  for (k in rules) {
    ruleFlatteners[k](entries, rules[k], ctx);
  }
  return entries.sort((l, r) => precedenceMap[l[0]] - precedenceMap[r[0]]);
};
const ruleFlatteners = {
  regex: (entries, rule) => {
    for (const source of listFrom(rule)) {
      entries.push([
        "regex",
        source
      ]);
    }
  },
  divisor: (entries, rule) => {
    entries.push([
      "divisor",
      rule
    ]);
  },
  range: flattenRange,
  class: (entries, rule) => {
    entries.push([
      "class",
      rule
    ]);
  },
  props: flattenProps,
  narrow: (entries, rule) => {
    for (const narrow of listFrom(rule)) {
      entries.push([
        "narrow",
        narrow
      ]);
    }
  },
  value: (entries, rule) => {
    entries.push([
      "value",
      rule
    ]);
  }
};
const precedenceMap = {
  // Config: Applies before any checks
  config: -1,
  // Critical: No other checks are performed if these fail
  domain: 0,
  value: 0,
  domains: 0,
  branches: 0,
  switch: 0,
  alias: 0,
  class: 0,
  // Shallow: All shallow checks will be performed even if one or more fail
  regex: 1,
  divisor: 1,
  bound: 1,
  // Prerequisite: These are deep checks with special priority, e.g. the
  // length of a tuple, which causes other deep props not to be checked if it
  // is invalid
  prerequisiteProp: 2,
  // Deep: Performed if all shallow checks pass, even if one or more deep checks fail
  distilledProps: 3,
  strictProps: 3,
  requiredProp: 3,
  optionalProp: 3,
  indexProp: 3,
  // Narrow: Only performed if all shallow and deep checks pass
  narrow: 4,
  // Morph: Only performed if all validation passes
  morph: 5
};
const literalSatisfiesRules = (data, rules, state) => !state.type.scope.type([
  "node",
  {
    [state.domain]: rules
  }
])(data).problems;
const isBranchComparison = (comparison) => (comparison == null ? void 0 : comparison.lBranches) !== void 0;
const compareBranches = (lConditions, rConditions, state) => {
  const result = {
    lBranches: lConditions,
    rBranches: rConditions,
    lExtendsR: [],
    rExtendsL: [],
    equalities: [],
    distinctIntersections: []
  };
  const pairs = rConditions.map((condition) => ({
    condition,
    distinct: []
  }));
  lConditions.forEach((l, lIndex) => {
    var _a;
    let lImpliesR = false;
    const distinct = pairs.map((rPairs, rIndex) => {
      if (lImpliesR || !rPairs.distinct) {
        return null;
      }
      const r = rPairs.condition;
      const subresult = branchIntersection(l, r, state);
      if (isDisjoint(subresult)) {
        return null;
      } else if (subresult === l) {
        result.lExtendsR.push(lIndex);
        lImpliesR = true;
        return null;
      } else if (subresult === r) {
        result.rExtendsL.push(rIndex);
        rPairs.distinct = null;
        return null;
      } else if (isEquality(subresult)) {
        result.equalities.push([
          lIndex,
          rIndex
        ]);
        lImpliesR = true;
        rPairs.distinct = null;
        return null;
      } else if (hasDomain(subresult, "object")) {
        return subresult;
      }
      return throwInternalError(`Unexpected predicate intersection result of type '${domainOf(subresult)}'`);
    });
    if (!lImpliesR) {
      for (let i2 = 0; i2 < pairs.length; i2++) {
        if (distinct[i2]) {
          (_a = pairs[i2].distinct) == null ? void 0 : _a.push(distinct[i2]);
        }
      }
    }
  });
  result.distinctIntersections = pairs.flatMap((pairs2) => pairs2.distinct ?? []);
  return result;
};
const isTransformationBranch = (branch) => "rules" in branch;
const flattenBranch = (branch, ctx) => {
  if (isTransformationBranch(branch)) {
    const result = flattenRules(branch.rules, ctx);
    if (branch.morph) {
      if (typeof branch.morph === "function") {
        result.push([
          "morph",
          branch.morph
        ]);
      } else {
        for (const morph of branch.morph) {
          result.push([
            "morph",
            morph
          ]);
        }
      }
    }
    return result;
  }
  return flattenRules(branch, ctx);
};
const rulesOf = (branch) => branch.rules ?? branch;
const branchIntersection = (l, r, state) => {
  const lRules = rulesOf(l);
  const rRules = rulesOf(r);
  const rulesResult = rulesIntersection(lRules, rRules, state);
  if ("morph" in l) {
    if ("morph" in r) {
      if (l.morph === r.morph) {
        return isEquality(rulesResult) || isDisjoint(rulesResult) ? rulesResult : {
          rules: rulesResult,
          morph: l.morph
        };
      }
      return state.lastOperator === "&" ? throwParseError(writeImplicitNeverMessage(state.path, "Intersection", "of morphs")) : {};
    }
    return isDisjoint(rulesResult) ? rulesResult : {
      rules: isEquality(rulesResult) ? l.rules : rulesResult,
      morph: l.morph
    };
  }
  if ("morph" in r) {
    return isDisjoint(rulesResult) ? rulesResult : {
      rules: isEquality(rulesResult) ? r.rules : rulesResult,
      morph: r.morph
    };
  }
  return rulesResult;
};
const writeUndiscriminatableMorphUnionMessage = (path) => `${path === "/" ? "A" : `At ${path}, a`} union including one or more morphs must be discriminatable`;
const flattenBranches = (branches, ctx) => {
  const discriminants = calculateDiscriminants(branches, ctx);
  const indices = branches.map((_, i2) => i2);
  return discriminate(branches, indices, discriminants, ctx);
};
const discriminate = (originalBranches, remainingIndices, discriminants, ctx) => {
  if (remainingIndices.length === 1) {
    return flattenBranch(originalBranches[remainingIndices[0]], ctx);
  }
  const bestDiscriminant = findBestDiscriminant(remainingIndices, discriminants);
  if (!bestDiscriminant) {
    return [
      [
        "branches",
        remainingIndices.map((i2) => branchIncludesMorph(originalBranches[i2], ctx.type.scope) ? throwParseError(writeUndiscriminatableMorphUnionMessage(`${ctx.path}`)) : flattenBranch(originalBranches[i2], ctx))
      ]
    ];
  }
  const cases = {};
  for (const caseKey in bestDiscriminant.indexCases) {
    const nextIndices = bestDiscriminant.indexCases[caseKey];
    cases[caseKey] = discriminate(originalBranches, nextIndices, discriminants, ctx);
    if (caseKey !== "default") {
      pruneDiscriminant(cases[caseKey], bestDiscriminant.path, bestDiscriminant);
    }
  }
  return [
    [
      "switch",
      {
        path: bestDiscriminant.path,
        kind: bestDiscriminant.kind,
        cases
      }
    ]
  ];
};
const pruneDiscriminant = (entries, segments, discriminant, ctx) => {
  for (let i2 = 0; i2 < entries.length; i2++) {
    const [k, v] = entries[i2];
    if (!segments.length) {
      if (discriminant.kind === "domain") {
        if (k === "domain" || k === "domains") {
          entries.splice(i2, 1);
          return;
        } else if (k === "class" || k === "value") {
          return;
        }
      } else if (discriminant.kind === k) {
        entries.splice(i2, 1);
        return;
      }
    } else if ((k === "requiredProp" || k === "prerequisiteProp" || k === "optionalProp") && v[0] === segments[0]) {
      if (typeof v[1] === "string") {
        if (discriminant.kind !== "domain") {
          return throwInternalPruneFailure(discriminant);
        }
        entries.splice(i2, 1);
        return;
      }
      pruneDiscriminant(v[1], segments.slice(1), discriminant);
      if (v[1].length === 0) {
        entries.splice(i2, 1);
      }
      return;
    }
    if (k === "domains") {
      if (keyCount(v) !== 1 || !v.object) {
        return throwInternalPruneFailure(discriminant);
      }
      pruneDiscriminant(v.object, segments, discriminant);
      return;
    } else if (k === "switch") {
      for (const caseKey in v.cases) {
        pruneDiscriminant(v.cases[caseKey], segments, discriminant);
      }
      return;
    } else if (k === "branches") {
      for (const branch of v) {
        pruneDiscriminant(branch, segments, discriminant);
      }
      return;
    }
  }
  return throwInternalPruneFailure(discriminant);
};
const throwInternalPruneFailure = (discriminant) => throwInternalError(`Unexpectedly failed to discriminate ${discriminant.kind} at path '${discriminant.path}'`);
const discriminantKinds = {
  domain: true,
  class: true,
  value: true
};
const calculateDiscriminants = (branches, ctx) => {
  const discriminants = {
    disjointsByPair: {},
    casesByDisjoint: {}
  };
  for (let lIndex = 0; lIndex < branches.length - 1; lIndex++) {
    for (let rIndex = lIndex + 1; rIndex < branches.length; rIndex++) {
      const pairKey = `${lIndex}/${rIndex}`;
      const pairDisjoints = [];
      discriminants.disjointsByPair[pairKey] = pairDisjoints;
      const intersectionState = new IntersectionState(ctx.type, "|");
      branchIntersection(branches[lIndex], branches[rIndex], intersectionState);
      for (const path in intersectionState.disjoints) {
        if (path.includes(mappedKeys.index)) {
          continue;
        }
        const { l, r, kind } = intersectionState.disjoints[path];
        if (!isKeyOf(kind, discriminantKinds)) {
          continue;
        }
        const lSerialized = serializeDefinitionIfAllowed(kind, l);
        const rSerialized = serializeDefinitionIfAllowed(kind, r);
        if (lSerialized === void 0 || rSerialized === void 0) {
          continue;
        }
        const qualifiedDisjoint = path === "/" ? kind : `${path}/${kind}`;
        pairDisjoints.push(qualifiedDisjoint);
        if (!discriminants.casesByDisjoint[qualifiedDisjoint]) {
          discriminants.casesByDisjoint[qualifiedDisjoint] = {
            [lSerialized]: [
              lIndex
            ],
            [rSerialized]: [
              rIndex
            ]
          };
          continue;
        }
        const cases = discriminants.casesByDisjoint[qualifiedDisjoint];
        const existingLBranch = cases[lSerialized];
        if (!existingLBranch) {
          cases[lSerialized] = [
            lIndex
          ];
        } else if (!existingLBranch.includes(lIndex)) {
          existingLBranch.push(lIndex);
        }
        const existingRBranch = cases[rSerialized];
        if (!existingRBranch) {
          cases[rSerialized] = [
            rIndex
          ];
        } else if (!existingRBranch.includes(rIndex)) {
          existingRBranch.push(rIndex);
        }
      }
    }
  }
  return discriminants;
};
const parseQualifiedDisjoint = (qualifiedDisjoint) => {
  const path = Path.fromString(qualifiedDisjoint);
  return [
    path,
    path.pop()
  ];
};
const findBestDiscriminant = (remainingIndices, discriminants) => {
  let bestDiscriminant;
  for (let i2 = 0; i2 < remainingIndices.length - 1; i2++) {
    const lIndex = remainingIndices[i2];
    for (let j = i2 + 1; j < remainingIndices.length; j++) {
      const rIndex = remainingIndices[j];
      const candidates = discriminants.disjointsByPair[`${lIndex}/${rIndex}`];
      for (const qualifiedDisjoint of candidates) {
        const indexCases = discriminants.casesByDisjoint[qualifiedDisjoint];
        const filteredCases = {};
        const defaultCases = [
          ...remainingIndices
        ];
        let score = 0;
        for (const caseKey in indexCases) {
          const filteredIndices = indexCases[caseKey].filter((i3) => {
            const remainingIndex = remainingIndices.indexOf(i3);
            if (remainingIndex !== -1) {
              delete defaultCases[remainingIndex];
              return true;
            }
          });
          if (filteredIndices.length === 0) {
            continue;
          }
          filteredCases[caseKey] = filteredIndices;
          score++;
        }
        const defaultCaseKeys = objectKeysOf(defaultCases);
        if (defaultCaseKeys.length) {
          filteredCases["default"] = defaultCaseKeys.map((k) => parseInt(k));
        }
        if (!bestDiscriminant || score > bestDiscriminant.score) {
          const [path, kind] = parseQualifiedDisjoint(qualifiedDisjoint);
          bestDiscriminant = {
            path,
            kind,
            indexCases: filteredCases,
            score
          };
          if (score === remainingIndices.length) {
            return bestDiscriminant;
          }
        }
      }
    }
  }
  return bestDiscriminant;
};
const serializeDefinitionIfAllowed = (kind, definition) => {
  switch (kind) {
    case "value":
      return serializeIfPrimitive(definition);
    case "domain":
      return definition;
    case "class":
      return getExactConstructorObjectKind(definition);
    default:
      return;
  }
};
const serializeIfPrimitive = (data) => {
  const domain2 = domainOf(data);
  return domain2 === "object" || domain2 === "symbol" ? void 0 : serializePrimitive(data);
};
const serializeData = {
  value: (data) => serializeIfPrimitive(data) ?? "default",
  class: (data) => objectKindOf(data) ?? "default",
  domain: domainOf
};
const serializeCase = (kind, data) => serializeData[kind](data);
const branchIncludesMorph = (branch, $) => "morph" in branch ? true : "props" in branch ? Object.values(branch.props).some((prop) => nodeIncludesMorph(propToNode(prop), $)) : false;
const nodeIncludesMorph = (node, $) => typeof node === "string" ? $.resolve(node).includesMorph : Object.values($.resolveTypeNode(node)).some((predicate) => predicate === true ? false : isArray(predicate) ? predicate.some((branch) => branchIncludesMorph(branch, $)) : branchIncludesMorph(predicate, $));
const emptyRulesIfTrue = (predicate) => predicate === true ? {} : predicate;
const comparePredicates = (l, r, context) => {
  if (l === true && r === true) {
    return equality();
  }
  if (!isArray(l) && !isArray(r)) {
    const result = branchIntersection(emptyRulesIfTrue(l), emptyRulesIfTrue(r), context);
    return result === l ? l : result === r ? r : result;
  }
  const lBranches = listFrom(emptyRulesIfTrue(l));
  const rBranches = listFrom(emptyRulesIfTrue(r));
  const comparison = compareBranches(lBranches, rBranches, context);
  if (comparison.equalities.length === lBranches.length && comparison.equalities.length === rBranches.length) {
    return equality();
  }
  if (comparison.lExtendsR.length + comparison.equalities.length === lBranches.length) {
    return l;
  }
  if (comparison.rExtendsL.length + comparison.equalities.length === rBranches.length) {
    return r;
  }
  return comparison;
};
const predicateIntersection = (domain2, l, r, state) => {
  state.domain = domain2;
  const comparison = comparePredicates(l, r, state);
  if (!isBranchComparison(comparison)) {
    return comparison;
  }
  const resultBranches = [
    ...comparison.distinctIntersections,
    ...comparison.equalities.map((indices) => comparison.lBranches[indices[0]]),
    ...comparison.lExtendsR.map((lIndex) => comparison.lBranches[lIndex]),
    ...comparison.rExtendsL.map((rIndex) => comparison.rBranches[rIndex])
  ];
  if (resultBranches.length === 0) {
    state.addDisjoint("union", comparison.lBranches, comparison.rBranches);
  }
  return resultBranches.length === 1 ? resultBranches[0] : resultBranches;
};
const predicateUnion = (domain2, l, r, type2) => {
  const state = new IntersectionState(type2, "|");
  const comparison = comparePredicates(l, r, state);
  if (!isBranchComparison(comparison)) {
    return isEquality(comparison) || comparison === l ? r : comparison === r ? l : (
      // subtype of the other, it consists of two opposite literals
      // and can be simplified to a non-literal boolean.
      domain2 === "boolean" ? true : [
        emptyRulesIfTrue(l),
        emptyRulesIfTrue(r)
      ]
    );
  }
  const resultBranches = [
    ...comparison.lBranches.filter((_, lIndex) => !comparison.lExtendsR.includes(lIndex) && !comparison.equalities.some((indexPair) => indexPair[0] === lIndex)),
    ...comparison.rBranches.filter((_, rIndex) => !comparison.rExtendsL.includes(rIndex) && !comparison.equalities.some((indexPair) => indexPair[1] === rIndex))
  ];
  return resultBranches.length === 1 ? resultBranches[0] : resultBranches;
};
const flattenPredicate = (predicate, context) => {
  if (predicate === true) {
    return [];
  }
  return isArray(predicate) ? flattenBranches(predicate, context) : flattenBranch(predicate, context);
};
const isLiteralCondition = (predicate) => typeof predicate === "object" && "value" in predicate;
const isConfigNode = (node) => "config" in node;
const nodeIntersection = (l, r, state) => {
  state.domain = void 0;
  const lDomains = state.type.scope.resolveTypeNode(l);
  const rDomains = state.type.scope.resolveTypeNode(r);
  const result = typeNodeIntersection(lDomains, rDomains, state);
  if (typeof result === "object" && !hasKeys(result)) {
    return hasKeys(state.disjoints) ? anonymousDisjoint() : state.addDisjoint("domain", objectKeysOf(lDomains), objectKeysOf(rDomains));
  }
  return result === lDomains ? l : result === rDomains ? r : result;
};
const typeNodeIntersection = composeKeyedIntersection((domain2, l, r, context) => {
  if (l === void 0) {
    return r === void 0 ? throwInternalError(undefinedOperandsMessage) : void 0;
  }
  if (r === void 0) {
    return void 0;
  }
  return predicateIntersection(domain2, l, r, context);
}, {
  onEmpty: "omit"
});
const rootIntersection = (l, r, type2) => {
  const state = new IntersectionState(type2, "&");
  const result = nodeIntersection(l, r, state);
  return isDisjoint(result) ? throwParseError(compileDisjointReasonsMessage(state.disjoints)) : isEquality(result) ? l : result;
};
const rootUnion = (l, r, type2) => {
  const lDomains = type2.scope.resolveTypeNode(l);
  const rDomains = type2.scope.resolveTypeNode(r);
  const result = {};
  const domains = objectKeysOf({
    ...lDomains,
    ...rDomains
  });
  for (const domain2 of domains) {
    result[domain2] = hasKey(lDomains, domain2) ? hasKey(rDomains, domain2) ? predicateUnion(domain2, lDomains[domain2], rDomains[domain2], type2) : lDomains[domain2] : hasKey(rDomains, domain2) ? rDomains[domain2] : throwInternalError(undefinedOperandsMessage);
  }
  return result;
};
const hasImpliedDomain = (flatPredicate) => flatPredicate[0] && (flatPredicate[0][0] === "value" || flatPredicate[0][0] === "class");
const flattenType = (type2) => {
  const ctx = {
    type: type2,
    path: new Path(),
    lastDomain: "undefined"
  };
  return flattenNode(type2.node, ctx);
};
const flattenNode = (node, ctx) => {
  if (typeof node === "string") {
    return ctx.type.scope.resolve(node).flat;
  }
  const hasConfig = isConfigNode(node);
  const flattenedTypeNode = flattenTypeNode(hasConfig ? node.node : node, ctx);
  return hasConfig ? [
    [
      "config",
      {
        config: entriesOf(node.config),
        node: flattenedTypeNode
      }
    ]
  ] : flattenedTypeNode;
};
const flattenTypeNode = (node, ctx) => {
  const domains = objectKeysOf(node);
  if (domains.length === 1) {
    const domain2 = domains[0];
    const predicate = node[domain2];
    if (predicate === true) {
      return domain2;
    }
    ctx.lastDomain = domain2;
    const flatPredicate = flattenPredicate(predicate, ctx);
    return hasImpliedDomain(flatPredicate) ? flatPredicate : [
      [
        "domain",
        domain2
      ],
      ...flatPredicate
    ];
  }
  const result = {};
  for (const domain2 of domains) {
    ctx.lastDomain = domain2;
    result[domain2] = flattenPredicate(node[domain2], ctx);
  }
  return [
    [
      "domains",
      result
    ]
  ];
};
const isLiteralNode = (node, domain2) => {
  return resolutionExtendsDomain(node, domain2) && isLiteralCondition(node[domain2]);
};
const resolutionExtendsDomain = (resolution, domain2) => {
  const domains = objectKeysOf(resolution);
  return domains.length === 1 && domains[0] === domain2;
};
const toArrayNode = (node) => ({
  object: {
    class: Array,
    props: {
      [mappedKeys.index]: node
    }
  }
});
function _defineProperty$5(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
class Scanner {
  /** Get lookahead and advance scanner by one */
  shift() {
    return this.chars[this.i++] ?? "";
  }
  get lookahead() {
    return this.chars[this.i] ?? "";
  }
  shiftUntil(condition) {
    let shifted = "";
    while (this.lookahead) {
      if (condition(this, shifted)) {
        if (shifted[shifted.length - 1] === Scanner.escapeToken) {
          shifted = shifted.slice(0, -1);
        } else {
          break;
        }
      }
      shifted += this.shift();
    }
    return shifted;
  }
  shiftUntilNextTerminator() {
    this.shiftUntil(Scanner.lookaheadIsNotWhitespace);
    return this.shiftUntil(Scanner.lookaheadIsTerminator);
  }
  get unscanned() {
    return this.chars.slice(this.i, this.chars.length).join("");
  }
  lookaheadIs(char) {
    return this.lookahead === char;
  }
  lookaheadIsIn(tokens) {
    return this.lookahead in tokens;
  }
  constructor(def2) {
    _defineProperty$5(this, "chars", void 0);
    _defineProperty$5(this, "i", void 0);
    _defineProperty$5(this, "finalized", false);
    this.chars = [
      ...def2
    ];
    this.i = 0;
  }
}
(function(Scanner2) {
  Scanner2.lookaheadIsTerminator = (scanner) => scanner.lookahead in terminatingChars;
  Scanner2.lookaheadIsNotWhitespace = (scanner) => scanner.lookahead !== whiteSpaceToken;
  var comparatorStartChars = Scanner2.comparatorStartChars = {
    "<": true,
    ">": true,
    "=": true
  };
  var terminatingChars = Scanner2.terminatingChars = {
    ...comparatorStartChars,
    "|": true,
    "&": true,
    ")": true,
    "[": true,
    "%": true,
    " ": true
  };
  Scanner2.comparators = {
    "<": true,
    ">": true,
    "<=": true,
    ">=": true,
    "==": true
  };
  Scanner2.oneCharComparators = {
    "<": true,
    ">": true
  };
  Scanner2.comparatorDescriptions = {
    "<": "less than",
    ">": "more than",
    "<=": "at most",
    ">=": "at least",
    "==": "exactly"
  };
  Scanner2.invertedComparators = {
    "<": ">",
    ">": "<",
    "<=": ">=",
    ">=": "<=",
    "==": "=="
  };
  Scanner2.branchTokens = {
    "|": true,
    "&": true
  };
  Scanner2.escapeToken = "\\";
  var whiteSpaceToken = Scanner2.whiteSpaceToken = " ";
})(Scanner || (Scanner = {}));
function _checkPrivateRedeclaration$2(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classApplyDescriptorGet$2(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
function _classApplyDescriptorSet$2(receiver, descriptor, value2) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value2);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value2;
  }
}
function _classExtractFieldDescriptor$2(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classPrivateFieldGet$2(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor$2(receiver, privateMap, "get");
  return _classApplyDescriptorGet$2(receiver, descriptor);
}
function _classPrivateFieldInit$2(obj, privateMap, value2) {
  _checkPrivateRedeclaration$2(obj, privateMap);
  privateMap.set(obj, value2);
}
function _classPrivateFieldSet$2(receiver, privateMap, value2) {
  var descriptor = _classExtractFieldDescriptor$2(receiver, privateMap, "set");
  _classApplyDescriptorSet$2(receiver, descriptor, value2);
  return value2;
}
function _defineProperty$4(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
class ArkTypeError extends TypeError {
  constructor(problems) {
    super(`${problems}`);
    _defineProperty$4(this, "cause", void 0);
    this.cause = problems;
  }
}
class Problem {
  toString() {
    return this.message;
  }
  get message() {
    return this.writers.addContext(this.reason, this.path);
  }
  get reason() {
    return this.writers.writeReason(this.mustBe, new DataWrapper(this.data));
  }
  get mustBe() {
    return typeof this.writers.mustBe === "string" ? this.writers.mustBe : this.writers.mustBe(this.source);
  }
  constructor(code, path, data, source, writers) {
    _defineProperty$4(this, "code", void 0);
    _defineProperty$4(this, "path", void 0);
    _defineProperty$4(this, "data", void 0);
    _defineProperty$4(this, "source", void 0);
    _defineProperty$4(this, "writers", void 0);
    _defineProperty$4(this, "parts", void 0);
    this.code = code;
    this.path = path;
    this.data = data;
    this.source = source;
    this.writers = writers;
    if (this.code === "multi") {
      this.parts = this.source;
    }
  }
}
var _state = /* @__PURE__ */ new WeakMap();
class ProblemArray extends Array {
  mustBe(description, opts) {
    return this.add("custom", description, opts);
  }
  add(code, source, opts) {
    const path = Path.from((opts == null ? void 0 : opts.path) ?? _classPrivateFieldGet$2(this, _state).path);
    const data = (
      // we have to check for the presence of the key explicitly since the
      // data could be undefined or null
      opts && "data" in opts ? opts.data : _classPrivateFieldGet$2(this, _state).data
    );
    const problem = new Problem(
      // avoid a bunch of errors from TS trying to discriminate the
      // problem input based on the code
      code,
      path,
      data,
      source,
      _classPrivateFieldGet$2(this, _state).getProblemConfig(code)
    );
    this.addProblem(problem);
    return problem;
  }
  addProblem(problem) {
    const pathKey = `${problem.path}`;
    const existing = this.byPath[pathKey];
    if (existing) {
      if (existing.parts) {
        existing.parts.push(problem);
      } else {
        const problemIntersection = new Problem("multi", existing.path, existing.data, [
          existing,
          problem
        ], _classPrivateFieldGet$2(this, _state).getProblemConfig("multi"));
        const existingIndex = this.indexOf(existing);
        this[existingIndex === -1 ? this.length : existingIndex] = problemIntersection;
        this.byPath[pathKey] = problemIntersection;
      }
    } else {
      this.byPath[pathKey] = problem;
      this.push(problem);
    }
    this.count++;
  }
  get summary() {
    return `${this}`;
  }
  toString() {
    return this.join("\n");
  }
  throw() {
    throw new ArkTypeError(this);
  }
  constructor(state) {
    super();
    _defineProperty$4(this, "byPath", {});
    _defineProperty$4(this, "count", 0);
    _classPrivateFieldInit$2(this, _state, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet$2(this, _state, state);
  }
}
const Problems = ProblemArray;
const capitalize = (s) => s[0].toUpperCase() + s.slice(1);
const domainsToDescriptions = (domains) => domains.map((objectKind) => domainDescriptions[objectKind]);
const objectKindsToDescriptions = (kinds) => kinds.map((objectKind) => objectKindDescriptions[objectKind]);
const describeBranches = (descriptions) => {
  if (descriptions.length === 0) {
    return "never";
  }
  if (descriptions.length === 1) {
    return descriptions[0];
  }
  let description = "";
  for (let i2 = 0; i2 < descriptions.length - 1; i2++) {
    description += descriptions[i2];
    if (i2 < descriptions.length - 2) {
      description += ", ";
    }
  }
  description += ` or ${descriptions[descriptions.length - 1]}`;
  return description;
};
const writeDefaultReason = (mustBe, was) => `must be ${mustBe}${was && ` (was ${was})`}`;
const addDefaultContext = (reason, path) => path.length === 0 ? capitalize(reason) : path.length === 1 && isWellFormedInteger(path[0]) ? `Item at index ${path[0]} ${reason}` : `${path} ${reason}`;
const defaultProblemConfig = {
  divisor: {
    mustBe: (divisor) => divisor === 1 ? `an integer` : `a multiple of ${divisor}`
  },
  class: {
    mustBe: (expected) => {
      const possibleObjectKind = getExactConstructorObjectKind(expected);
      return possibleObjectKind ? objectKindDescriptions[possibleObjectKind] : `an instance of ${expected.name}`;
    },
    writeReason: (mustBe, data) => writeDefaultReason(mustBe, data.className)
  },
  domain: {
    mustBe: (domain2) => domainDescriptions[domain2],
    writeReason: (mustBe, data) => writeDefaultReason(mustBe, data.domain)
  },
  missing: {
    mustBe: () => "defined",
    writeReason: (mustBe) => writeDefaultReason(mustBe, "")
  },
  extraneous: {
    mustBe: () => "removed",
    writeReason: (mustBe) => writeDefaultReason(mustBe, "")
  },
  bound: {
    mustBe: (bound) => `${Scanner.comparatorDescriptions[bound.comparator]} ${bound.limit}${bound.units ? ` ${bound.units}` : ""}`,
    writeReason: (mustBe, data) => writeDefaultReason(mustBe, `${data.size}`)
  },
  regex: {
    mustBe: (expression) => `a string matching ${expression}`
  },
  value: {
    mustBe: stringify
  },
  branches: {
    mustBe: (branchProblems) => describeBranches(branchProblems.map((problem) => `${problem.path} must be ${problem.parts ? describeBranches(problem.parts.map((part) => part.mustBe)) : problem.mustBe}`)),
    writeReason: (mustBe, data) => `${mustBe} (was ${data})`,
    addContext: (reason, path) => path.length ? `At ${path}, ${reason}` : reason
  },
  multi: {
    mustBe: (problems) => "• " + problems.map((_) => _.mustBe).join("\n• "),
    writeReason: (mustBe, data) => `${data} must be...
${mustBe}`,
    addContext: (reason, path) => path.length ? `At ${path}, ${reason}` : reason
  },
  custom: {
    mustBe: (mustBe) => mustBe
  },
  cases: {
    mustBe: (cases) => describeBranches(cases)
  }
};
const problemCodes = objectKeysOf(defaultProblemConfig);
const compileDefaultProblemWriters = () => {
  const result = {};
  let code;
  for (code of problemCodes) {
    result[code] = {
      mustBe: defaultProblemConfig[code].mustBe,
      writeReason: defaultProblemConfig[code].writeReason ?? writeDefaultReason,
      addContext: defaultProblemConfig[code].addContext ?? addDefaultContext
    };
  }
  return result;
};
const defaultProblemWriters = compileDefaultProblemWriters();
const compileProblemWriters = (input) => {
  var _a, _b, _c;
  if (!input) {
    return defaultProblemWriters;
  }
  const result = {};
  for (const code of problemCodes) {
    result[code] = {
      mustBe: ((_a = input[code]) == null ? void 0 : _a.mustBe) ?? defaultProblemConfig[code].mustBe,
      writeReason: ((_b = input[code]) == null ? void 0 : _b.writeReason) ?? defaultProblemConfig[code].writeReason ?? input.writeReason ?? writeDefaultReason,
      addContext: ((_c = input[code]) == null ? void 0 : _c.addContext) ?? defaultProblemConfig[code].addContext ?? input.addContext ?? addDefaultContext
    };
  }
  return result;
};
function _checkPrivateRedeclaration$1(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classApplyDescriptorGet$1(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
function _classApplyDescriptorSet$1(receiver, descriptor, value2) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value2);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value2;
  }
}
function _classExtractFieldDescriptor$1(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classPrivateFieldGet$1(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor$1(receiver, privateMap, "get");
  return _classApplyDescriptorGet$1(receiver, descriptor);
}
function _classPrivateFieldInit$1(obj, privateMap, value2) {
  _checkPrivateRedeclaration$1(obj, privateMap);
  privateMap.set(obj, value2);
}
function _classPrivateFieldSet$1(receiver, privateMap, value2) {
  var descriptor = _classExtractFieldDescriptor$1(receiver, privateMap, "set");
  _classApplyDescriptorSet$1(receiver, descriptor, value2);
  return value2;
}
function _defineProperty$3(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
const initializeTraversalConfig = () => ({
  mustBe: [],
  writeReason: [],
  addContext: [],
  keys: []
});
const problemWriterKeys = [
  "mustBe",
  "writeReason",
  "addContext"
];
const traverseRoot = (t, data) => {
  const state = new TraversalState(data, t);
  traverse(t.flat, state);
  const result = new CheckResult(state);
  if (state.problems.count) {
    result.problems = state.problems;
  } else {
    for (const [o, k] of state.entriesToPrune) {
      delete o[k];
    }
    result.data = state.data;
  }
  return result;
};
const CheckResult = class {
  constructor() {
    _defineProperty$3(this, "data", void 0);
    _defineProperty$3(this, "problems", void 0);
  }
};
var _seen = /* @__PURE__ */ new WeakMap();
class TraversalState {
  getProblemConfig(code) {
    const result = {};
    for (const k of problemWriterKeys) {
      result[k] = this.traversalConfig[k][0] ?? this.rootScope.config.codes[code][k];
    }
    return result;
  }
  traverseConfig(configEntries, node) {
    for (const entry of configEntries) {
      this.traversalConfig[entry[0]].unshift(entry[1]);
    }
    const isValid = traverse(node, this);
    for (const entry of configEntries) {
      this.traversalConfig[entry[0]].shift();
    }
    return isValid;
  }
  traverseKey(key, node) {
    const lastData = this.data;
    this.data = this.data[key];
    this.path.push(key);
    const isValid = traverse(node, this);
    this.path.pop();
    if (lastData[key] !== this.data) {
      lastData[key] = this.data;
    }
    this.data = lastData;
    return isValid;
  }
  traverseResolution(name) {
    const resolution = this.type.scope.resolve(name);
    const id = resolution.qualifiedName;
    const data = this.data;
    const isObject2 = hasDomain(data, "object");
    if (isObject2) {
      const seenByCurrentType = _classPrivateFieldGet$1(this, _seen)[id];
      if (seenByCurrentType) {
        if (seenByCurrentType.includes(data)) {
          return true;
        }
        seenByCurrentType.push(data);
      } else {
        _classPrivateFieldGet$1(this, _seen)[id] = [
          data
        ];
      }
    }
    const lastType = this.type;
    this.type = resolution;
    const isValid = traverse(resolution.flat, this);
    this.type = lastType;
    if (isObject2) {
      _classPrivateFieldGet$1(this, _seen)[id].pop();
    }
    return isValid;
  }
  traverseBranches(branches) {
    const lastFailFast = this.failFast;
    this.failFast = true;
    const lastProblems = this.problems;
    const branchProblems = new Problems(this);
    this.problems = branchProblems;
    const lastPath = this.path;
    const lastKeysToPrune = this.entriesToPrune;
    let hasValidBranch = false;
    for (const branch of branches) {
      this.path = new Path();
      this.entriesToPrune = [];
      if (checkEntries(branch, this)) {
        hasValidBranch = true;
        lastKeysToPrune.push(...this.entriesToPrune);
        break;
      }
    }
    this.path = lastPath;
    this.entriesToPrune = lastKeysToPrune;
    this.problems = lastProblems;
    this.failFast = lastFailFast;
    return hasValidBranch || !this.problems.add("branches", branchProblems);
  }
  constructor(data, type2) {
    _defineProperty$3(this, "data", void 0);
    _defineProperty$3(this, "type", void 0);
    _defineProperty$3(this, "path", void 0);
    _defineProperty$3(this, "problems", void 0);
    _defineProperty$3(this, "entriesToPrune", void 0);
    _defineProperty$3(this, "failFast", void 0);
    _defineProperty$3(this, "traversalConfig", void 0);
    _defineProperty$3(this, "rootScope", void 0);
    _classPrivateFieldInit$1(this, _seen, {
      writable: true,
      value: void 0
    });
    this.data = data;
    this.type = type2;
    this.path = new Path();
    this.problems = new Problems(this);
    this.entriesToPrune = [];
    this.failFast = false;
    this.traversalConfig = initializeTraversalConfig();
    _classPrivateFieldSet$1(this, _seen, {});
    this.rootScope = type2.scope;
  }
}
const traverse = (node, state) => typeof node === "string" ? domainOf(state.data) === node || !state.problems.add("domain", node) : checkEntries(node, state);
const checkEntries = (entries, state) => {
  let isValid = true;
  for (let i2 = 0; i2 < entries.length; i2++) {
    const [k, v] = entries[i2];
    const entryAllowsData = entryCheckers[k](v, state);
    isValid && (isValid = entryAllowsData);
    if (!isValid) {
      if (state.failFast) {
        return false;
      }
      if (i2 < entries.length - 1 && precedenceMap[k] < precedenceMap[entries[i2 + 1][0]]) {
        return false;
      }
    }
  }
  return isValid;
};
const checkRequiredProp = (prop, state) => {
  if (prop[0] in state.data) {
    return state.traverseKey(prop[0], prop[1]);
  }
  state.problems.add("missing", void 0, {
    path: state.path.concat(prop[0]),
    data: void 0
  });
  return false;
};
const createPropChecker = (kind) => (props, state) => {
  let isValid = true;
  const remainingUnseenRequired = {
    ...props.required
  };
  for (const k in state.data) {
    if (props.required[k]) {
      isValid = state.traverseKey(k, props.required[k]) && isValid;
      delete remainingUnseenRequired[k];
    } else if (props.optional[k]) {
      isValid = state.traverseKey(k, props.optional[k]) && isValid;
    } else if (props.index && wellFormedIntegerMatcher.test(k)) {
      isValid = state.traverseKey(k, props.index) && isValid;
    } else if (kind === "distilledProps") {
      if (state.failFast) {
        state.entriesToPrune.push([
          state.data,
          k
        ]);
      } else {
        delete state.data[k];
      }
    } else {
      isValid = false;
      state.problems.add("extraneous", state.data[k], {
        path: state.path.concat(k)
      });
    }
    if (!isValid && state.failFast) {
      return false;
    }
  }
  const unseenRequired = Object.keys(remainingUnseenRequired);
  if (unseenRequired.length) {
    for (const k of unseenRequired) {
      state.problems.add("missing", void 0, {
        path: state.path.concat(k)
      });
    }
    return false;
  }
  return isValid;
};
const entryCheckers = {
  regex: checkRegex,
  divisor: checkDivisor,
  domains: (domains, state) => {
    const entries = domains[domainOf(state.data)];
    return entries ? checkEntries(entries, state) : !state.problems.add("cases", domainsToDescriptions(objectKeysOf(domains)));
  },
  domain: (domain2, state) => domainOf(state.data) === domain2 || !state.problems.add("domain", domain2),
  bound: checkBound,
  optionalProp: (prop, state) => {
    if (prop[0] in state.data) {
      return state.traverseKey(prop[0], prop[1]);
    }
    return true;
  },
  // these checks work the same way, the keys are only distinct so that
  // prerequisite props can have a higher precedence
  requiredProp: checkRequiredProp,
  prerequisiteProp: checkRequiredProp,
  indexProp: (node, state) => {
    if (!Array.isArray(state.data)) {
      state.problems.add("class", Array);
      return false;
    }
    let isValid = true;
    for (let i2 = 0; i2 < state.data.length; i2++) {
      isValid = state.traverseKey(`${i2}`, node) && isValid;
      if (!isValid && state.failFast) {
        return false;
      }
    }
    return isValid;
  },
  branches: (branches, state) => state.traverseBranches(branches),
  switch: (rule, state) => {
    const dataAtPath = getPath(state.data, rule.path);
    const caseKey = serializeCase(rule.kind, dataAtPath);
    if (hasKey(rule.cases, caseKey)) {
      return checkEntries(rule.cases[caseKey], state);
    }
    const caseKeys = objectKeysOf(rule.cases);
    const missingCasePath = state.path.concat(rule.path);
    const caseDescriptions = rule.kind === "value" ? caseKeys : rule.kind === "domain" ? domainsToDescriptions(caseKeys) : rule.kind === "class" ? objectKindsToDescriptions(caseKeys) : throwInternalError(`Unexpectedly encountered rule kind '${rule.kind}' during traversal`);
    state.problems.add("cases", caseDescriptions, {
      path: missingCasePath,
      data: dataAtPath
    });
    return false;
  },
  alias: (name, state) => state.traverseResolution(name),
  class: checkClass,
  narrow: (narrow, state) => {
    const lastProblemsCount = state.problems.count;
    const result = narrow(state.data, state.problems);
    if (!result && state.problems.count === lastProblemsCount) {
      state.problems.mustBe(narrow.name ? `valid according to ${narrow.name}` : "valid");
    }
    return result;
  },
  config: ({ config, node }, state) => state.traverseConfig(config, node),
  value: (value2, state) => state.data === value2 || !state.problems.add("value", value2),
  morph: (morph, state) => {
    const out = morph(state.data, state.problems);
    if (state.problems.length) {
      return false;
    }
    if (out instanceof Problem) {
      state.problems.addProblem(out);
      return false;
    }
    if (out instanceof CheckResult) {
      if (out.problems) {
        for (const problem of out.problems) {
          state.problems.addProblem(problem);
        }
        return false;
      }
      state.data = out.data;
      return true;
    }
    state.data = out;
    return true;
  },
  distilledProps: createPropChecker("distilledProps"),
  strictProps: createPropChecker("strictProps")
};
const chainableNoOpProxy = new Proxy(() => chainableNoOpProxy, {
  get: () => chainableNoOpProxy
});
const initializeType = (name, definition, config, scope2) => {
  const root = {
    // temporarily initialize node/flat to aliases that will be included in
    // the final type in case of cyclic resolutions
    node: name,
    flat: [
      [
        "alias",
        name
      ]
    ],
    allows: (data) => !namedTraverse(data).problems,
    assert: (data) => {
      const result = namedTraverse(data);
      return result.problems ? result.problems.throw() : result.data;
    },
    infer: chainableNoOpProxy,
    inferIn: chainableNoOpProxy,
    qualifiedName: isAnonymousName(name) ? scope2.getAnonymousQualifiedName(name) : `${scope2.name}.${name}`,
    definition,
    scope: scope2,
    includesMorph: false,
    config
  };
  const namedTraverse = {
    [name]: (data) => traverseRoot(namedTraverse, data)
  }[name];
  const t = Object.assign(namedTraverse, root);
  return t;
};
const isType = (value2) => (value2 == null ? void 0 : value2.infer) === chainableNoOpProxy;
const isAnonymousName = (name) => name[0] === "λ";
const parseUnenclosed = (s) => {
  const token = s.scanner.shiftUntilNextTerminator();
  s.setRoot(unenclosedToNode(s, token));
};
const unenclosedToNode = (s, token) => {
  if (s.ctx.type.scope.addParsedReferenceIfResolvable(token, s.ctx)) {
    return token;
  }
  return maybeParseUnenclosedLiteral(token) ?? s.error(token === "" ? writeMissingOperandMessage(s) : writeUnresolvableMessage(token));
};
const maybeParseUnenclosedLiteral = (token) => {
  const maybeNumber = tryParseWellFormedNumber(token);
  if (maybeNumber !== void 0) {
    return {
      number: {
        value: maybeNumber
      }
    };
  }
  const maybeBigint = tryParseWellFormedBigint(token);
  if (maybeBigint !== void 0) {
    return {
      bigint: {
        value: maybeBigint
      }
    };
  }
};
const writeUnresolvableMessage = (token) => `'${token}' is unresolvable`;
const writeMissingOperandMessage = (s) => {
  const operator = s.previousOperator();
  return operator ? writeMissingRightOperandMessage(operator, s.scanner.unscanned) : writeExpressionExpectedMessage(s.scanner.unscanned);
};
const writeMissingRightOperandMessage = (token, unscanned) => `Token '${token}' requires a right operand${unscanned ? ` before '${unscanned}'` : ""}`;
const writeExpressionExpectedMessage = (unscanned) => `Expected an expression${unscanned ? ` before '${unscanned}'` : ""}`;
const parseConfigTuple = (def2, ctx) => ({
  node: ctx.type.scope.resolveTypeNode(parseDefinition(def2[0], ctx)),
  config: def2[2]
});
const deepFreeze = (value2) => Object.isFrozen(value2) ? value2 : Array.isArray(value2) ? Object.freeze(value2.map(deepFreeze)) : deepFreezeDictionary(value2);
const deepFreezeDictionary = (value2) => {
  for (const k in value2) {
    deepFreeze(value2[k]);
  }
  return value2;
};
const arrayIndexStringBranch = deepFreeze({
  regex: wellFormedNonNegativeIntegerMatcher.source
});
const arrayIndexNumberBranch = deepFreeze({
  range: {
    min: {
      comparator: ">=",
      limit: 0
    }
  },
  divisor: 1
});
const parseKeyOfTuple = (def2, ctx) => {
  const resolution = ctx.type.scope.resolveNode(parseDefinition(def2[1], ctx));
  const predicateKeys = objectKeysOf(resolution).map((domain2) => keysOfPredicate(domain2, resolution[domain2]));
  const sharedKeys = sharedKeysOf(predicateKeys);
  if (!sharedKeys.length) {
    return writeImplicitNeverMessage(ctx.path, "keyof");
  }
  const keyNode = {};
  for (const key of sharedKeys) {
    const keyType = typeof key;
    if (keyType === "string" || keyType === "number" || keyType === "symbol") {
      var _keyNode, _keyType;
      (_keyNode = keyNode)[_keyType = keyType] ?? (_keyNode[_keyType] = []);
      keyNode[keyType].push({
        value: key
      });
    } else if (key === wellFormedNonNegativeIntegerMatcher) {
      var _keyNode1, _keyNode2;
      (_keyNode1 = keyNode).string ?? (_keyNode1.string = []);
      keyNode.string.push(arrayIndexStringBranch);
      (_keyNode2 = keyNode).number ?? (_keyNode2.number = []);
      keyNode.number.push(arrayIndexNumberBranch);
    } else {
      return throwInternalError(`Unexpected keyof key '${stringify(key)}'`);
    }
  }
  return Object.fromEntries(Object.entries(keyNode).map(([domain2, branches]) => [
    domain2,
    branches.length === 1 ? branches[0] : branches
  ]));
};
const baseKeysByDomain = {
  bigint: prototypeKeysOf(0n),
  boolean: prototypeKeysOf(false),
  null: [],
  number: prototypeKeysOf(0),
  // TS doesn't include the Object prototype in keyof, so keyof object is never
  object: [],
  string: prototypeKeysOf(""),
  symbol: prototypeKeysOf(Symbol()),
  undefined: []
};
const keysOfPredicate = (domain2, predicate) => domain2 !== "object" || predicate === true ? baseKeysByDomain[domain2] : sharedKeysOf(listFrom(predicate).map((branch) => keysOfObjectBranch(branch)));
const sharedKeysOf = (keyBranches) => {
  if (!keyBranches.length) {
    return [];
  }
  let sharedKeys = keyBranches[0];
  for (let i2 = 1; i2 < keyBranches.length; i2++) {
    sharedKeys = sharedKeys.filter((k) => keyBranches[i2].includes(k));
  }
  return sharedKeys;
};
const keysOfObjectBranch = (branch) => {
  const result = [];
  if ("props" in branch) {
    for (const key of Object.keys(branch.props)) {
      if (key === mappedKeys.index) {
        result.push(wellFormedNonNegativeIntegerMatcher);
      } else if (!result.includes(key)) {
        result.push(key);
        if (wellFormedNonNegativeIntegerMatcher.test(key)) {
          result.push(tryParseWellFormedInteger(key, `Unexpectedly failed to parse an integer from key '${key}'`));
        }
      }
    }
  }
  if ("class" in branch) {
    const constructor = typeof branch.class === "string" ? defaultObjectKinds[branch.class] : branch.class;
    for (const key of prototypeKeysOf(constructor.prototype)) {
      if (!result.includes(key)) {
        result.push(key);
      }
    }
  }
  return result;
};
const parseMorphTuple = (def2, ctx) => {
  if (typeof def2[2] !== "function") {
    return throwParseError(writeMalformedMorphExpressionMessage(def2[2]));
  }
  const node = parseDefinition(def2[0], ctx);
  const resolution = ctx.type.scope.resolveTypeNode(node);
  const morph = def2[2];
  ctx.type.includesMorph = true;
  let domain2;
  const result = {};
  for (domain2 in resolution) {
    const predicate = resolution[domain2];
    if (predicate === true) {
      result[domain2] = {
        rules: {},
        morph
      };
    } else if (typeof predicate === "object") {
      result[domain2] = isArray(predicate) ? predicate.map((branch) => applyMorph(branch, morph)) : applyMorph(predicate, morph);
    } else {
      throwInternalError(`Unexpected predicate value for domain '${domain2}': ${stringify(predicate)}`);
    }
  }
  return result;
};
const applyMorph = (branch, morph) => isTransformationBranch(branch) ? {
  ...branch,
  morph: branch.morph ? Array.isArray(branch.morph) ? [
    ...branch.morph,
    morph
  ] : [
    branch.morph,
    morph
  ] : morph
} : {
  rules: branch,
  morph
};
const writeMalformedMorphExpressionMessage = (value2) => `Morph expression requires a function following '|>' (was ${typeof value2})`;
const writeMalformedDistributableFunctionMessage = (def2) => `Expected a Function or Record<Domain, Function> operand (${stringify(def2)} was invalid)`;
const distributeFunctionToNode = (distributableFunction, node, ctx, ruleKey) => {
  const domains = objectKeysOf(node);
  if (!hasDomain(distributableFunction, "object")) {
    return throwParseError(writeMalformedDistributableFunctionMessage(distributableFunction));
  }
  const distributed = {};
  if (typeof distributableFunction === "function") {
    const domainFunction = {
      [ruleKey]: distributableFunction
    };
    for (const domain2 of domains) {
      distributed[domain2] = domainFunction;
    }
  } else {
    for (const domain2 of domains) {
      if (distributableFunction[domain2] === void 0) {
        continue;
      }
      const functionInDomain = {
        [ruleKey]: distributableFunction[domain2]
      };
      if (typeof functionInDomain[ruleKey] !== "function") {
        return throwParseError(writeMalformedDistributableFunctionMessage(functionInDomain));
      }
      distributed[domain2] = functionInDomain;
    }
  }
  return distributed;
};
const parseNarrowTuple = (def2, ctx) => {
  const inputNode = parseDefinition(def2[0], ctx);
  const resolution = ctx.type.scope.resolveNode(inputNode);
  const hasConfig = isConfigNode(resolution);
  const typeNode = hasConfig ? resolution.node : resolution;
  const result = rootIntersection(inputNode, distributeFunctionToNode(def2[2], typeNode, ctx, "narrow"), ctx.type);
  return hasConfig ? {
    config: resolution.config,
    node: result
  } : result;
};
const parseTuple = (def2, ctx) => {
  if (isIndexOneExpression(def2)) {
    return indexOneParsers[def2[1]](def2, ctx);
  }
  if (isIndexZeroExpression(def2)) {
    return prefixParsers[def2[0]](def2, ctx);
  }
  const props = {
    //  length is created as a prerequisite prop, ensuring if it is invalid,
    //  no other props will be checked, which is usually desirable for tuple
    //  definitions.
    length: [
      "!",
      {
        number: {
          value: def2.length
        }
      }
    ]
  };
  for (let i2 = 0; i2 < def2.length; i2++) {
    ctx.path.push(`${i2}`);
    props[i2] = parseDefinition(def2[i2], ctx);
    ctx.path.pop();
  }
  return {
    object: {
      class: Array,
      props
    }
  };
};
const parseBranchTuple = (def2, ctx) => {
  if (def2[2] === void 0) {
    return throwParseError(writeMissingRightOperandMessage(def2[1], ""));
  }
  const l = parseDefinition(def2[0], ctx);
  const r = parseDefinition(def2[2], ctx);
  return def2[1] === "&" ? rootIntersection(l, r, ctx.type) : rootUnion(l, r, ctx.type);
};
const parseArrayTuple = (def2, scope2) => toArrayNode(parseDefinition(def2[0], scope2));
const isIndexOneExpression = (def2) => indexOneParsers[def2[1]] !== void 0;
const indexOneParsers = {
  "|": parseBranchTuple,
  "&": parseBranchTuple,
  "[]": parseArrayTuple,
  "=>": parseNarrowTuple,
  "|>": parseMorphTuple,
  ":": parseConfigTuple
};
const prefixParsers = {
  keyof: parseKeyOfTuple,
  instanceof: (def2) => {
    if (typeof def2[1] !== "function") {
      return throwParseError(`Expected a constructor following 'instanceof' operator (was ${typeof def2[1]}).`);
    }
    return {
      object: {
        class: def2[1]
      }
    };
  },
  "===": (def2) => ({
    [domainOf(def2[1])]: {
      value: def2[1]
    }
  }),
  node: (def2) => def2[1]
};
const isIndexZeroExpression = (def2) => prefixParsers[def2[0]] !== void 0;
const parseRecord = (def2, ctx) => {
  const props = {};
  for (const definitionKey in def2) {
    let keyName = definitionKey;
    let isOptional2 = false;
    if (definitionKey[definitionKey.length - 1] === "?") {
      if (definitionKey[definitionKey.length - 2] === Scanner.escapeToken) {
        keyName = `${definitionKey.slice(0, -2)}?`;
      } else {
        keyName = definitionKey.slice(0, -1);
        isOptional2 = true;
      }
    }
    ctx.path.push(keyName);
    const propNode = parseDefinition(def2[definitionKey], ctx);
    ctx.path.pop();
    props[keyName] = isOptional2 ? [
      "?",
      propNode
    ] : propNode;
  }
  return {
    object: {
      props
    }
  };
};
const writeUnmatchedGroupCloseMessage = (unscanned) => `Unmatched )${unscanned === "" ? "" : ` before ${unscanned}`}`;
const unclosedGroupMessage = "Missing )";
const writeOpenRangeMessage = (min, comparator2) => `Left bounds are only valid when paired with right bounds (try ...${comparator2}${min})`;
const writeUnpairableComparatorMessage = (comparator2) => `Left-bounded expressions must specify their limits using < or <= (was ${comparator2})`;
const writeMultipleLeftBoundsMessage = (openLimit, openComparator, limit, comparator2) => `An expression may have at most one left bound (parsed ${openLimit}${Scanner.invertedComparators[openComparator]}, ${limit}${Scanner.invertedComparators[comparator2]})`;
function _defineProperty$2(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
class DynamicState {
  error(message) {
    return throwParseError(message);
  }
  hasRoot() {
    return this.root !== void 0;
  }
  resolveRoot() {
    this.assertHasRoot();
    return this.ctx.type.scope.resolveTypeNode(this.root);
  }
  rootToString() {
    this.assertHasRoot();
    return stringify(this.root);
  }
  ejectRootIfLimit() {
    this.assertHasRoot();
    const resolution = typeof this.root === "string" ? this.ctx.type.scope.resolveNode(this.root) : this.root;
    if (isLiteralNode(resolution, "number")) {
      const limit = resolution.number.value;
      this.root = void 0;
      return limit;
    }
  }
  ejectRangeIfOpen() {
    if (this.branches.range) {
      const range = this.branches.range;
      delete this.branches.range;
      return range;
    }
  }
  assertHasRoot() {
    if (this.root === void 0) {
      return throwInternalError("Unexpected interaction with unset root");
    }
  }
  assertUnsetRoot() {
    if (this.root !== void 0) {
      return throwInternalError("Unexpected attempt to overwrite root");
    }
  }
  setRoot(node) {
    this.assertUnsetRoot();
    this.root = node;
  }
  rootToArray() {
    this.root = toArrayNode(this.ejectRoot());
  }
  intersect(node) {
    this.root = rootIntersection(this.ejectRoot(), node, this.ctx.type);
  }
  ejectRoot() {
    this.assertHasRoot();
    const root = this.root;
    this.root = void 0;
    return root;
  }
  ejectFinalizedRoot() {
    this.assertHasRoot();
    const root = this.root;
    this.root = ejectedProxy;
    return root;
  }
  finalize() {
    if (this.groups.length) {
      return this.error(unclosedGroupMessage);
    }
    this.finalizeBranches();
    this.scanner.finalized = true;
  }
  reduceLeftBound(limit, comparator2) {
    const invertedComparator = Scanner.invertedComparators[comparator2];
    if (!isKeyOf(invertedComparator, minComparators)) {
      return this.error(writeUnpairableComparatorMessage(comparator2));
    }
    if (this.branches.range) {
      return this.error(writeMultipleLeftBoundsMessage(`${this.branches.range.limit}`, this.branches.range.comparator, `${limit}`, invertedComparator));
    }
    this.branches.range = {
      limit,
      comparator: invertedComparator
    };
  }
  finalizeBranches() {
    this.assertRangeUnset();
    if (this.branches.union) {
      this.pushRootToBranch("|");
      this.setRoot(this.branches.union);
    } else if (this.branches.intersection) {
      this.setRoot(rootIntersection(this.branches.intersection, this.ejectRoot(), this.ctx.type));
    }
  }
  finalizeGroup() {
    this.finalizeBranches();
    const topBranchState = this.groups.pop();
    if (!topBranchState) {
      return this.error(writeUnmatchedGroupCloseMessage(this.scanner.unscanned));
    }
    this.branches = topBranchState;
  }
  pushRootToBranch(token) {
    this.assertRangeUnset();
    this.branches.intersection = this.branches.intersection ? rootIntersection(this.branches.intersection, this.ejectRoot(), this.ctx.type) : this.ejectRoot();
    if (token === "|") {
      this.branches.union = this.branches.union ? rootUnion(this.branches.union, this.branches.intersection, this.ctx.type) : this.branches.intersection;
      delete this.branches.intersection;
    }
  }
  assertRangeUnset() {
    if (this.branches.range) {
      return this.error(writeOpenRangeMessage(`${this.branches.range.limit}`, this.branches.range.comparator));
    }
  }
  reduceGroupOpen() {
    this.groups.push(this.branches);
    this.branches = {};
  }
  previousOperator() {
    var _a;
    return ((_a = this.branches.range) == null ? void 0 : _a.comparator) ?? this.branches.intersection ? "&" : this.branches.union ? "|" : void 0;
  }
  shiftedByOne() {
    this.scanner.shift();
    return this;
  }
  constructor(def2, ctx) {
    _defineProperty$2(this, "ctx", void 0);
    _defineProperty$2(this, "scanner", void 0);
    _defineProperty$2(this, "root", void 0);
    _defineProperty$2(this, "branches", void 0);
    _defineProperty$2(this, "groups", void 0);
    this.ctx = ctx;
    this.branches = {};
    this.groups = [];
    this.scanner = new Scanner(def2);
  }
}
const ejectedProxy = new Proxy({}, {
  get: () => throwInternalError(`Unexpected attempt to access ejected attributes`)
});
const parseEnclosed = (s, enclosing) => {
  const token = s.scanner.shiftUntil(untilLookaheadIsClosing[enclosing]);
  if (s.scanner.lookahead === "") {
    return s.error(writeUnterminatedEnclosedMessage(token, enclosing));
  }
  if (s.scanner.shift() === "/") {
    getRegex(token);
    s.setRoot({
      string: {
        regex: token
      }
    });
  } else {
    s.setRoot({
      string: {
        value: token
      }
    });
  }
};
const enclosingChar = {
  "'": 1,
  '"': 1,
  "/": 1
};
const untilLookaheadIsClosing = {
  "'": (scanner) => scanner.lookahead === `'`,
  '"': (scanner) => scanner.lookahead === `"`,
  "/": (scanner) => scanner.lookahead === `/`
};
const enclosingCharDescriptions = {
  '"': "double-quote",
  "'": "single-quote",
  "/": "forward slash"
};
const writeUnterminatedEnclosedMessage = (fragment, enclosing) => `${enclosing}${fragment} requires a closing ${enclosingCharDescriptions[enclosing]}`;
const parseOperand = (s) => s.scanner.lookahead === "" ? s.error(writeMissingOperandMessage(s)) : s.scanner.lookahead === "(" ? s.shiftedByOne().reduceGroupOpen() : s.scanner.lookaheadIsIn(enclosingChar) ? parseEnclosed(s, s.scanner.shift()) : s.scanner.lookahead === " " ? parseOperand(s.shiftedByOne()) : parseUnenclosed(s);
const writeUnboundableMessage = (root) => `Bounded expression ${root} must be a number, string or array`;
const parseBound = (s, start) => {
  const comparator2 = shiftComparator(s, start);
  const maybeMin = s.ejectRootIfLimit();
  return maybeMin === void 0 ? parseRightBound(s, comparator2) : s.reduceLeftBound(maybeMin, comparator2);
};
const shiftComparator = (s, start) => s.scanner.lookaheadIs("=") ? `${start}${s.scanner.shift()}` : isKeyOf(start, Scanner.oneCharComparators) ? start : s.error(singleEqualsMessage);
const singleEqualsMessage = `= is not a valid comparator. Use == to check for equality`;
const parseRightBound = (s, comparator2) => {
  const limitToken = s.scanner.shiftUntilNextTerminator();
  const limit = tryParseWellFormedNumber(limitToken, writeInvalidLimitMessage(comparator2, limitToken + s.scanner.unscanned));
  const openRange = s.ejectRangeIfOpen();
  const rightBound = {
    comparator: comparator2,
    limit
  };
  const range = openRange ? !hasComparatorIn(rightBound, maxComparators) ? s.error(writeUnpairableComparatorMessage(comparator2)) : compareStrictness("min", openRange, rightBound) === "l" ? s.error(writeEmptyRangeMessage({
    min: openRange,
    max: rightBound
  })) : {
    min: openRange,
    max: rightBound
  } : hasComparator(rightBound, "==") ? rightBound : hasComparatorIn(rightBound, minComparators) ? {
    min: rightBound
  } : hasComparatorIn(rightBound, maxComparators) ? {
    max: rightBound
  } : throwInternalError(`Unexpected comparator '${rightBound.comparator}'`);
  s.intersect(distributeRange(range, s));
};
const distributeRange = (range, s) => {
  const resolution = s.resolveRoot();
  const domains = objectKeysOf(resolution);
  const distributedRange = {};
  const rangePredicate = {
    range
  };
  const isBoundable = domains.every((domain2) => {
    switch (domain2) {
      case "string":
        distributedRange.string = rangePredicate;
        return true;
      case "number":
        distributedRange.number = rangePredicate;
        return true;
      case "object":
        distributedRange.object = rangePredicate;
        if (resolution.object === true) {
          return false;
        }
        return listFrom(resolution.object).every((branch) => "class" in branch && branch.class === Array);
      default:
        return false;
    }
  });
  if (!isBoundable) {
    s.error(writeUnboundableMessage(s.rootToString()));
  }
  return distributedRange;
};
const hasComparator = (bound, comparator2) => bound.comparator === comparator2;
const hasComparatorIn = (bound, comparators) => bound.comparator in comparators;
const writeInvalidLimitMessage = (comparator2, limit) => `Comparator ${comparator2} must be followed by a number literal (was '${limit}')`;
const writeEmptyRangeMessage = (range) => `${stringifyRange(range)} is empty`;
const writeIndivisibleMessage = (root) => `Divisibility operand ${root} must be a number`;
const parseDivisor = (s) => {
  const divisorToken = s.scanner.shiftUntilNextTerminator();
  const divisor = tryParseWellFormedInteger(divisorToken, writeInvalidDivisorMessage(divisorToken));
  if (divisor === 0) {
    s.error(writeInvalidDivisorMessage(0));
  }
  const rootDomains = objectKeysOf(s.resolveRoot());
  if (rootDomains.length === 1 && rootDomains[0] === "number") {
    s.intersect({
      number: {
        divisor
      }
    });
  } else {
    s.error(writeIndivisibleMessage(s.rootToString()));
  }
};
const writeInvalidDivisorMessage = (divisor) => `% operator must be followed by a non-zero integer literal (was ${divisor})`;
const parseOperator = (s) => {
  const lookahead = s.scanner.shift();
  return lookahead === "" ? s.finalize() : lookahead === "[" ? s.scanner.shift() === "]" ? s.rootToArray() : s.error(incompleteArrayTokenMessage) : isKeyOf(lookahead, Scanner.branchTokens) ? s.pushRootToBranch(lookahead) : lookahead === ")" ? s.finalizeGroup() : isKeyOf(lookahead, Scanner.comparatorStartChars) ? parseBound(s, lookahead) : lookahead === "%" ? parseDivisor(s) : lookahead === " " ? parseOperator(s) : throwInternalError(writeUnexpectedCharacterMessage(lookahead));
};
const writeUnexpectedCharacterMessage = (char) => `Unexpected character '${char}'`;
const incompleteArrayTokenMessage = `Missing expected ']'`;
const parseString = (def2, ctx) => ctx.type.scope.parseCache.get(def2) ?? ctx.type.scope.parseCache.set(def2, maybeNaiveParse(def2, ctx) ?? fullStringParse(def2, ctx));
const maybeNaiveParse = (def2, ctx) => {
  if (ctx.type.scope.addParsedReferenceIfResolvable(def2, ctx)) {
    return def2;
  }
  if (def2.endsWith("[]")) {
    const elementDef = def2.slice(0, -2);
    if (ctx.type.scope.addParsedReferenceIfResolvable(def2, ctx)) {
      return toArrayNode(elementDef);
    }
  }
};
const fullStringParse = (def2, ctx) => {
  const s = new DynamicState(def2, ctx);
  parseOperand(s);
  return loop(s);
};
const loop = (s) => {
  while (!s.scanner.finalized) {
    next(s);
  }
  return s.ejectFinalizedRoot();
};
const next = (s) => s.hasRoot() ? parseOperator(s) : parseOperand(s);
const parseDefinition = (def2, ctx) => {
  const domain2 = domainOf(def2);
  if (domain2 === "string") {
    return parseString(def2, ctx);
  }
  if (domain2 !== "object") {
    return throwParseError(writeBadDefinitionTypeMessage(domain2));
  }
  const objectKind = objectKindOf(def2);
  switch (objectKind) {
    case "Object":
      return parseRecord(def2, ctx);
    case "Array":
      return parseTuple(def2, ctx);
    case "RegExp":
      return {
        string: {
          regex: def2.source
        }
      };
    case "Function":
      if (isType(def2)) {
        return ctx.type.scope.addAnonymousTypeReference(def2, ctx);
      }
      if (isThunk(def2)) {
        const returned = def2();
        if (isType(returned)) {
          return ctx.type.scope.addAnonymousTypeReference(returned, ctx);
        }
      }
      return throwParseError(writeBadDefinitionTypeMessage("Function"));
    default:
      return throwParseError(writeBadDefinitionTypeMessage(objectKind ?? stringify(def2)));
  }
};
const isThunk = (def2) => typeof def2 === "function" && def2.length === 0;
const writeBadDefinitionTypeMessage = (actual) => `Type definitions must be strings or objects (was ${actual})`;
function _defineProperty$1(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
class Cache {
  get root() {
    return this.cache;
  }
  has(name) {
    return name in this.cache;
  }
  get(name) {
    return this.cache[name];
  }
  set(name, item) {
    this.cache[name] = item;
    return item;
  }
  constructor() {
    _defineProperty$1(this, "cache", {});
  }
}
class FreezingCache extends Cache {
  set(name, item) {
    this.cache[name] = deepFreeze(item);
    return item;
  }
}
function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classApplyDescriptorGet(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value2) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value2);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value2;
  }
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
  return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldInit(obj, privateMap, value2) {
  _checkPrivateRedeclaration(obj, privateMap);
  privateMap.set(obj, value2);
}
function _classPrivateFieldSet(receiver, privateMap, value2) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
  _classApplyDescriptorSet(receiver, descriptor, value2);
  return value2;
}
function _classPrivateMethodGet(receiver, privateSet, fn) {
  if (!privateSet.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return fn;
}
function _classPrivateMethodInit(obj, privateSet) {
  _checkPrivateRedeclaration(obj, privateSet);
  privateSet.add(obj);
}
function _defineProperty(obj, key, value2) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value2,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value2;
  }
  return obj;
}
const compileScopeOptions = (opts) => ({
  codes: compileProblemWriters(opts.codes),
  keys: opts.keys ?? "loose"
});
let anonymousScopeCount = 0;
const scopeRegistry = {};
const spaceRegistry = {};
var _resolutions = /* @__PURE__ */ new WeakMap(), _exports = /* @__PURE__ */ new WeakMap(), _register = /* @__PURE__ */ new WeakSet(), _cacheSpaces = /* @__PURE__ */ new WeakSet(), _initializeContext = /* @__PURE__ */ new WeakSet(), _resolveRecurse = /* @__PURE__ */ new WeakSet();
class Scope {
  getAnonymousQualifiedName(base) {
    let increment = 0;
    let id = base;
    while (this.isResolvable(id)) {
      id = `${base}${increment++}`;
    }
    return `${this.name}.${id}`;
  }
  addAnonymousTypeReference(referencedType, ctx) {
    var _ctx_type;
    (_ctx_type = ctx.type).includesMorph || (_ctx_type.includesMorph = referencedType.includesMorph);
    return referencedType.node;
  }
  get infer() {
    return chainableNoOpProxy;
  }
  compile() {
    if (!spaceRegistry[this.name]) {
      for (const name in this.aliases) {
        this.resolve(name);
      }
      spaceRegistry[this.name] = _classPrivateFieldGet(this, _exports).root;
    }
    return _classPrivateFieldGet(this, _exports).root;
  }
  addParsedReferenceIfResolvable(name, ctx) {
    var _ctx_type;
    const resolution = _classPrivateMethodGet(this, _resolveRecurse, resolveRecurse).call(this, name, "undefined", [
      name
    ]);
    if (!resolution) {
      return false;
    }
    (_ctx_type = ctx.type).includesMorph || (_ctx_type.includesMorph = resolution.includesMorph);
    return true;
  }
  resolve(name) {
    return _classPrivateMethodGet(this, _resolveRecurse, resolveRecurse).call(this, name, "throw", [
      name
    ]);
  }
  resolveNode(node) {
    return typeof node === "string" ? this.resolveNode(this.resolve(node).node) : node;
  }
  resolveTypeNode(node) {
    const resolution = this.resolveNode(node);
    return isConfigNode(resolution) ? resolution.node : resolution;
  }
  isResolvable(name) {
    return _classPrivateFieldGet(this, _resolutions).has(name) || this.aliases[name];
  }
  constructor(aliases, opts = {}) {
    _classPrivateMethodInit(this, _register);
    _classPrivateMethodInit(this, _cacheSpaces);
    _classPrivateMethodInit(this, _initializeContext);
    _classPrivateMethodInit(this, _resolveRecurse);
    _defineProperty(this, "aliases", void 0);
    _defineProperty(this, "name", void 0);
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "parseCache", void 0);
    _classPrivateFieldInit(this, _resolutions, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInit(this, _exports, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "expressions", void 0);
    _defineProperty(this, "intersection", void 0);
    _defineProperty(this, "union", void 0);
    _defineProperty(this, "arrayOf", void 0);
    _defineProperty(this, "keyOf", void 0);
    _defineProperty(this, "valueOf", void 0);
    _defineProperty(this, "instanceOf", void 0);
    _defineProperty(this, "narrow", void 0);
    _defineProperty(this, "morph", void 0);
    _defineProperty(this, "type", void 0);
    this.aliases = aliases;
    this.parseCache = new FreezingCache();
    _classPrivateFieldSet(this, _resolutions, new Cache());
    _classPrivateFieldSet(this, _exports, new Cache());
    this.expressions = {
      intersection: (l, r, opts2) => this.type([
        l,
        "&",
        r
      ], opts2),
      union: (l, r, opts2) => this.type([
        l,
        "|",
        r
      ], opts2),
      arrayOf: (def2, opts2) => this.type([
        def2,
        "[]"
      ], opts2),
      keyOf: (def2, opts2) => this.type([
        "keyof",
        def2
      ], opts2),
      node: (def2, opts2) => this.type([
        "node",
        def2
      ], opts2),
      instanceOf: (def2, opts2) => this.type([
        "instanceof",
        def2
      ], opts2),
      valueOf: (def2, opts2) => this.type([
        "===",
        def2
      ], opts2),
      narrow: (def2, fn, opts2) => this.type([
        def2,
        "=>",
        fn
      ], opts2),
      morph: (def2, fn, opts2) => this.type([
        def2,
        "|>",
        fn
      ], opts2)
    };
    this.intersection = this.expressions.intersection;
    this.union = this.expressions.union;
    this.arrayOf = this.expressions.arrayOf;
    this.keyOf = this.expressions.keyOf;
    this.valueOf = this.expressions.valueOf;
    this.instanceOf = this.expressions.instanceOf;
    this.narrow = this.expressions.narrow;
    this.morph = this.expressions.morph;
    this.type = Object.assign((def2, config = {}) => {
      const t = initializeType("λtype", def2, config, this);
      const ctx = _classPrivateMethodGet(this, _initializeContext, initializeContext).call(this, t);
      const root = parseDefinition(def2, ctx);
      t.node = deepFreeze(hasKeys(config) ? {
        config,
        node: this.resolveTypeNode(root)
      } : root);
      t.flat = deepFreeze(flattenType(t));
      return t;
    }, {
      from: this.expressions.node
    });
    this.name = _classPrivateMethodGet(this, _register, register).call(this, opts);
    if (opts.standard !== false) {
      _classPrivateMethodGet(this, _cacheSpaces, cacheSpaces).call(this, [
        spaceRegistry["standard"]
      ], "imports");
    }
    if (opts.imports) {
      _classPrivateMethodGet(this, _cacheSpaces, cacheSpaces).call(this, opts.imports, "imports");
    }
    if (opts.includes) {
      _classPrivateMethodGet(this, _cacheSpaces, cacheSpaces).call(this, opts.includes, "includes");
    }
    this.config = compileScopeOptions(opts);
  }
}
function register(opts) {
  const name = opts.name ? scopeRegistry[opts.name] ? throwParseError(`A scope named '${opts.name}' already exists`) : opts.name : `scope${++anonymousScopeCount}`;
  scopeRegistry[name] = this;
  return name;
}
function cacheSpaces(spaces, kind) {
  for (const space2 of spaces) {
    for (const name in space2) {
      if (_classPrivateFieldGet(this, _resolutions).has(name) || name in this.aliases) {
        throwParseError(writeDuplicateAliasesMessage(name));
      }
      _classPrivateFieldGet(this, _resolutions).set(name, space2[name]);
      if (kind === "includes") {
        _classPrivateFieldGet(this, _exports).set(name, space2[name]);
      }
    }
  }
}
function initializeContext(type2) {
  return {
    type: type2,
    path: new Path()
  };
}
function resolveRecurse(name, onUnresolvable, seen2) {
  const maybeCacheResult = _classPrivateFieldGet(this, _resolutions).get(name);
  if (maybeCacheResult) {
    return maybeCacheResult;
  }
  const aliasDef = this.aliases[name];
  if (!aliasDef) {
    return onUnresolvable === "throw" ? throwInternalError(`Unexpectedly failed to resolve alias '${name}'`) : void 0;
  }
  const t = initializeType(name, aliasDef, {}, this);
  const ctx = _classPrivateMethodGet(this, _initializeContext, initializeContext).call(this, t);
  _classPrivateFieldGet(this, _resolutions).set(name, t);
  _classPrivateFieldGet(this, _exports).set(name, t);
  let node = parseDefinition(aliasDef, ctx);
  if (typeof node === "string") {
    if (seen2.includes(node)) {
      return throwParseError(writeShallowCycleErrorMessage(name, seen2));
    }
    seen2.push(node);
    node = _classPrivateMethodGet(this, _resolveRecurse, resolveRecurse).call(this, node, "throw", seen2).node;
  }
  t.node = deepFreeze(node);
  t.flat = deepFreeze(flattenType(t));
  return t;
}
const scope = (aliases, opts = {}) => new Scope(aliases, opts);
const rootScope = scope({}, {
  name: "root",
  standard: false
});
const rootType = rootScope.type;
const writeShallowCycleErrorMessage = (name, seen2) => `Alias '${name}' has a shallow resolution cycle: ${[
  ...seen2,
  name
].join("=>")}`;
const writeDuplicateAliasesMessage = (name) => `Alias '${name}' is already defined`;
const jsObjectsScope = scope({
  Function: [
    "node",
    {
      object: {
        class: Function
      }
    }
  ],
  Date: [
    "node",
    {
      object: {
        class: Date
      }
    }
  ],
  Error: [
    "node",
    {
      object: {
        class: Error
      }
    }
  ],
  Map: [
    "node",
    {
      object: {
        class: Map
      }
    }
  ],
  RegExp: [
    "node",
    {
      object: {
        class: RegExp
      }
    }
  ],
  Set: [
    "node",
    {
      object: {
        class: Set
      }
    }
  ],
  WeakMap: [
    "node",
    {
      object: {
        class: WeakMap
      }
    }
  ],
  WeakSet: [
    "node",
    {
      object: {
        class: WeakSet
      }
    }
  ],
  Promise: [
    "node",
    {
      object: {
        class: Promise
      }
    }
  ]
}, {
  name: "jsObjects",
  standard: false
});
const jsObjects = jsObjectsScope.compile();
const always = {
  bigint: true,
  boolean: true,
  null: true,
  number: true,
  object: true,
  string: true,
  symbol: true,
  undefined: true
};
const tsKeywordsScope = scope({
  any: [
    "node",
    always
  ],
  bigint: [
    "node",
    {
      bigint: true
    }
  ],
  boolean: [
    "node",
    {
      boolean: true
    }
  ],
  false: [
    "node",
    {
      boolean: {
        value: false
      }
    }
  ],
  never: [
    "node",
    {}
  ],
  null: [
    "node",
    {
      null: true
    }
  ],
  number: [
    "node",
    {
      number: true
    }
  ],
  object: [
    "node",
    {
      object: true
    }
  ],
  string: [
    "node",
    {
      string: true
    }
  ],
  symbol: [
    "node",
    {
      symbol: true
    }
  ],
  true: [
    "node",
    {
      boolean: {
        value: true
      }
    }
  ],
  unknown: [
    "node",
    always
  ],
  void: [
    "node",
    {
      undefined: true
    }
  ],
  undefined: [
    "node",
    {
      undefined: true
    }
  ]
}, {
  name: "ts",
  standard: false
});
const tsKeywords = tsKeywordsScope.compile();
const isLuhnValid = (creditCardInput) => {
  const sanitized = creditCardInput.replace(/[- ]+/g, "");
  let sum = 0;
  let digit;
  let tmpNum;
  let shouldDouble;
  for (let i2 = sanitized.length - 1; i2 >= 0; i2--) {
    digit = sanitized.substring(i2, i2 + 1);
    tmpNum = parseInt(digit, 10);
    if (shouldDouble) {
      tmpNum *= 2;
      if (tmpNum >= 10) {
        sum += tmpNum % 10 + 1;
      } else {
        sum += tmpNum;
      }
    } else {
      sum += tmpNum;
    }
    shouldDouble = !shouldDouble;
  }
  return !!(sum % 10 === 0 ? sanitized : false);
};
const creditCardMatcher = /^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;
const creditCard = rootType([
  creditCardMatcher,
  "=>",
  (s, problems) => isLuhnValid(s) || !problems.mustBe("a valid credit card number")
], {
  mustBe: "a valid credit card number"
});
const dayDelimiterMatcher = /^[./-]$/;
const iso8601Matcher = /^([+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([.,]\d+(?!:))?)?(\17[0-5]\d([.,]\d+)?)?([zZ]|([+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
const isValidDateInstance = (date) => !isNaN(date);
const writeFormattedMustBe = (format) => `a ${format}-formatted date`;
const tryParseDate = (data, opts) => {
  if (!(opts == null ? void 0 : opts.format)) {
    const result = new Date(data);
    return isValidDateInstance(result) ? result : "a valid date";
  }
  if (opts.format === "iso8601") {
    return iso8601Matcher.test(data) ? new Date(data) : writeFormattedMustBe("iso8601");
  }
  const dataParts = data.split(dayDelimiterMatcher);
  const delimiter = data[dataParts[0].length];
  const formatParts = delimiter ? opts.format.split(delimiter) : [
    opts.format
  ];
  if (dataParts.length !== formatParts.length) {
    return writeFormattedMustBe(opts.format);
  }
  const parsedParts = {};
  for (let i2 = 0; i2 < formatParts.length; i2++) {
    if (dataParts[i2].length !== formatParts[i2].length && // if format is "m" or "d", data is allowed to be 1 or 2 characters
    !(formatParts[i2].length === 1 && dataParts[i2].length === 2)) {
      return writeFormattedMustBe(opts.format);
    }
    parsedParts[formatParts[i2][0]] = dataParts[i2];
  }
  const date = /* @__PURE__ */ new Date(`${parsedParts.m}/${parsedParts.d}/${parsedParts.y}`);
  if (`${date.getDate()}` === parsedParts.d) {
    return date;
  }
  return writeFormattedMustBe(opts.format);
};
const parsedDate = rootType([
  tsKeywords.string,
  "|>",
  (s, problems) => {
    const result = tryParseDate(s);
    return typeof result === "string" ? problems.mustBe(result) : result;
  }
]);
const parsedNumber = rootType([
  wellFormedNumberMatcher,
  "|>",
  (s) => parseFloat(s)
], {
  mustBe: "a well-formed numeric string"
});
const parsedInteger = rootType([
  wellFormedIntegerMatcher,
  "|>",
  (s) => parseInt(s)
], {
  mustBe: "a well-formed integer string"
});
const email = rootType(/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/, {
  mustBe: "a valid email"
});
const uuid = rootType(/^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$/, {
  mustBe: "a valid UUID"
});
const semver = rootType(/^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/, {
  mustBe: "a valid semantic version (see https://semver.org/)"
});
const json = rootType([
  tsKeywords.string,
  "|>",
  (s) => JSON.parse(s)
], {
  mustBe: "a JSON-parsable string"
});
const validationScope = scope({
  // Character sets
  alpha: [
    /^[A-Za-z]*$/,
    ":",
    {
      mustBe: "only letters"
    }
  ],
  alphanumeric: [
    /^[A-Za-z\d]*$/,
    ":",
    {
      mustBe: "only letters and digits"
    }
  ],
  lowercase: [
    /^[a-z]*$/,
    ":",
    {
      mustBe: "only lowercase letters"
    }
  ],
  uppercase: [
    /^[A-Z]*$/,
    ":",
    {
      mustBe: "only uppercase letters"
    }
  ],
  creditCard,
  email,
  uuid,
  parsedNumber,
  parsedInteger,
  parsedDate,
  semver,
  json,
  integer: [
    "node",
    {
      number: {
        divisor: 1
      }
    }
  ]
}, {
  name: "validation",
  standard: false
});
const validation = validationScope.compile();
const arkScope = scope({}, {
  name: "standard",
  includes: [
    tsKeywords,
    jsObjects,
    validation
  ],
  standard: false
});
arkScope.compile();
const scopes = {
  root: rootScope,
  tsKeywords: tsKeywordsScope,
  jsObjects: jsObjectsScope,
  validation: validationScope,
  ark: arkScope
};
const type = arkScope.type;
scopes.ark.intersection;
scopes.ark.union;
scopes.ark.arrayOf;
scopes.ark.keyOf;
scopes.ark.instanceOf;
scopes.ark.valueOf;
scopes.ark.narrow;
scopes.ark.morph;
scope({
  unknownError: {
    type: "'unknownError'",
    parts: "string[]"
  },
  notAssignable: {
    type: "'notAssignable'",
    from: "string",
    to: "string"
  },
  selfReference: {
    type: "'selfReference'",
    from: "string"
  },
  aliasSelfReference: {
    type: "'aliasSelfReference'",
    from: "string"
  },
  excessProperty: {
    type: "'excessProperty'",
    key: "string",
    to: "string"
  },
  overloadPiece: {
    type: "'overloadPiece'",
    idx: "number",
    length: "number",
    signature: "string"
  },
  parsedError: "unknownError|notAssignable|selfReference|aliasSelfReference|excessProperty|overloadPiece"
}).compile();
function parseError(err) {
  const parts2 = [""];
  let i2 = 0;
  let state = "raw";
  err.split("").forEach((c) => {
    if (c === void 0) {
      return;
    }
    if (state === "raw") {
      if (c === "'") {
        state = "quote";
        i2++;
        parts2[i2] = "";
      } else {
        parts2[i2] += c;
      }
    } else if (state === "quote") {
      if (c === '"') {
        state = "double";
        parts2[i2] += c;
      } else if (c === "'") {
        state = "raw";
        parts2[++i2] = "";
      } else {
        parts2[i2] += c;
      }
    } else if (state === "double") {
      if (c === '"') {
        state = "quote";
      }
      parts2[i2] += c;
    }
  });
  for (let i22 = 0; i22 < parts2.length; i22++) {
    parts2[i22] = parts2[i22].trim();
  }
  if (parts2[parts2.length - 1] === ".") {
    parts2.length--;
  }
  if (parts2.length === 4 && parts2[0] === "Type" && parts2[2] === "is not assignable to type" || parts2[2] === "is not assignable to parameter of type") {
    return {
      type: "notAssignable",
      from: parts2[1],
      to: parts2[3]
    };
  } else if (parts2.length === 4 && parts2[2] === "implicitly has type" && parts2[4] === "because it does not have a type annotation and is referenced directly or indirectly in its own initializer.") {
    return {
      type: "selfReference",
      from: parts2[1]
    };
  } else if (parts2.length === 3 && parts2[0] === "Type alias" && parts2[2] === "circularly references itself.") {
    return {
      type: "aliasSelfReference",
      from: parts2[1]
    };
  } else if (parts2.length === 3 && parts2[0].startsWith("Overload ")) {
    const overloadParts = parts2[0].split(" ");
    const idx = Number.parseInt(overloadParts[1]) ?? -1;
    const length2 = Number.parseInt(overloadParts[3]) ?? -1;
    return { type: "overloadPiece", idx, length: length2, signature: parts2[1] };
  } else if (parts2.length === 4 && parts2[0] === "Object literal may only specify known properties, and") {
    return {
      type: "excessProperty",
      key: parts2[1],
      to: parts2[3]
    };
  } else {
    return {
      type: "unknownError",
      parts: parts2
    };
  }
}
const mkBrand = (validator = void 0, _for = void 0) => (b) => {
  const fn = (t) => {
    const errMsg = validator ? validator(t) : void 0;
    if (errMsg === void 0) {
      return t;
    }
    throw new Error(errMsg);
  };
  fn.brandString = b;
  fn.un = (tb) => tb;
  const forFn = _for ?? ((t) => t);
  fn.for = (t) => forFn(t);
  return fn;
};
const brandStr = mkBrand();
brandStr("FileName");
const ProjectPath = brandStr("ProjectPath");
const plugins = [];
const PluginName = mkBrand(
  (name) => plugins.includes(name) ? `plugin ${name} is already registered` : void plugins.push(name),
  (name) => plugins.includes(name) ? name : void 0
)("PluginName");
type({
  openProjects: "string[]",
  ignoreErrCodes: "string[]"
});
const PACKET_TYPES = /* @__PURE__ */ Object.create(null);
PACKET_TYPES["open"] = "0";
PACKET_TYPES["close"] = "1";
PACKET_TYPES["ping"] = "2";
PACKET_TYPES["pong"] = "3";
PACKET_TYPES["message"] = "4";
PACKET_TYPES["upgrade"] = "5";
PACKET_TYPES["noop"] = "6";
const PACKET_TYPES_REVERSE = /* @__PURE__ */ Object.create(null);
Object.keys(PACKET_TYPES).forEach((key) => {
  PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
});
const ERROR_PACKET = { type: "error", data: "parser error" };
const withNativeBlob$1 = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
const withNativeArrayBuffer$2 = typeof ArrayBuffer === "function";
const isView$1 = (obj) => {
  return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
};
const encodePacket = ({ type: type2, data }, supportsBinary, callback) => {
  if (withNativeBlob$1 && data instanceof Blob) {
    if (supportsBinary) {
      return callback(data);
    } else {
      return encodeBlobAsBase64(data, callback);
    }
  } else if (withNativeArrayBuffer$2 && (data instanceof ArrayBuffer || isView$1(data))) {
    if (supportsBinary) {
      return callback(data);
    } else {
      return encodeBlobAsBase64(new Blob([data]), callback);
    }
  }
  return callback(PACKET_TYPES[type2] + (data || ""));
};
const encodeBlobAsBase64 = (data, callback) => {
  const fileReader = new FileReader();
  fileReader.onload = function() {
    const content = fileReader.result.split(",")[1];
    callback("b" + (content || ""));
  };
  return fileReader.readAsDataURL(data);
};
const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
const lookup$1 = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
for (let i2 = 0; i2 < chars.length; i2++) {
  lookup$1[chars.charCodeAt(i2)] = i2;
}
const decode$1 = (base64) => {
  let bufferLength = base64.length * 0.75, len = base64.length, i2, p2 = 0, encoded1, encoded2, encoded3, encoded4;
  if (base64[base64.length - 1] === "=") {
    bufferLength--;
    if (base64[base64.length - 2] === "=") {
      bufferLength--;
    }
  }
  const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
  for (i2 = 0; i2 < len; i2 += 4) {
    encoded1 = lookup$1[base64.charCodeAt(i2)];
    encoded2 = lookup$1[base64.charCodeAt(i2 + 1)];
    encoded3 = lookup$1[base64.charCodeAt(i2 + 2)];
    encoded4 = lookup$1[base64.charCodeAt(i2 + 3)];
    bytes[p2++] = encoded1 << 2 | encoded2 >> 4;
    bytes[p2++] = (encoded2 & 15) << 4 | encoded3 >> 2;
    bytes[p2++] = (encoded3 & 3) << 6 | encoded4 & 63;
  }
  return arraybuffer;
};
const withNativeArrayBuffer$1 = typeof ArrayBuffer === "function";
const decodePacket = (encodedPacket, binaryType) => {
  if (typeof encodedPacket !== "string") {
    return {
      type: "message",
      data: mapBinary(encodedPacket, binaryType)
    };
  }
  const type2 = encodedPacket.charAt(0);
  if (type2 === "b") {
    return {
      type: "message",
      data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
    };
  }
  const packetType = PACKET_TYPES_REVERSE[type2];
  if (!packetType) {
    return ERROR_PACKET;
  }
  return encodedPacket.length > 1 ? {
    type: PACKET_TYPES_REVERSE[type2],
    data: encodedPacket.substring(1)
  } : {
    type: PACKET_TYPES_REVERSE[type2]
  };
};
const decodeBase64Packet = (data, binaryType) => {
  if (withNativeArrayBuffer$1) {
    const decoded = decode$1(data);
    return mapBinary(decoded, binaryType);
  } else {
    return { base64: true, data };
  }
};
const mapBinary = (data, binaryType) => {
  switch (binaryType) {
    case "blob":
      return data instanceof ArrayBuffer ? new Blob([data]) : data;
    case "arraybuffer":
    default:
      return data;
  }
};
const SEPARATOR = String.fromCharCode(30);
const encodePayload = (packets, callback) => {
  const length2 = packets.length;
  const encodedPackets = new Array(length2);
  let count = 0;
  packets.forEach((packet, i2) => {
    encodePacket(packet, false, (encodedPacket) => {
      encodedPackets[i2] = encodedPacket;
      if (++count === length2) {
        callback(encodedPackets.join(SEPARATOR));
      }
    });
  });
};
const decodePayload = (encodedPayload, binaryType) => {
  const encodedPackets = encodedPayload.split(SEPARATOR);
  const packets = [];
  for (let i2 = 0; i2 < encodedPackets.length; i2++) {
    const decodedPacket = decodePacket(encodedPackets[i2], binaryType);
    packets.push(decodedPacket);
    if (decodedPacket.type === "error") {
      break;
    }
  }
  return packets;
};
const protocol$2 = 4;
function Emitter(obj) {
  if (obj)
    return mixin(obj);
}
function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}
Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
  this._callbacks = this._callbacks || {};
  (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
  return this;
};
Emitter.prototype.once = function(event, fn) {
  function on2() {
    this.off(event, on2);
    fn.apply(this, arguments);
  }
  on2.fn = fn;
  this.on(event, on2);
  return this;
};
Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
  this._callbacks = this._callbacks || {};
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }
  var callbacks = this._callbacks["$" + event];
  if (!callbacks)
    return this;
  if (1 == arguments.length) {
    delete this._callbacks["$" + event];
    return this;
  }
  var cb;
  for (var i2 = 0; i2 < callbacks.length; i2++) {
    cb = callbacks[i2];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i2, 1);
      break;
    }
  }
  if (callbacks.length === 0) {
    delete this._callbacks["$" + event];
  }
  return this;
};
Emitter.prototype.emit = function(event) {
  this._callbacks = this._callbacks || {};
  var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
  for (var i2 = 1; i2 < arguments.length; i2++) {
    args[i2 - 1] = arguments[i2];
  }
  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i2 = 0, len = callbacks.length; i2 < len; ++i2) {
      callbacks[i2].apply(this, args);
    }
  }
  return this;
};
Emitter.prototype.emitReserved = Emitter.prototype.emit;
Emitter.prototype.listeners = function(event) {
  this._callbacks = this._callbacks || {};
  return this._callbacks["$" + event] || [];
};
Emitter.prototype.hasListeners = function(event) {
  return !!this.listeners(event).length;
};
const globalThisShim = (() => {
  if (typeof self !== "undefined") {
    return self;
  } else if (typeof window !== "undefined") {
    return window;
  } else {
    return Function("return this")();
  }
})();
function pick(obj, ...attr) {
  return attr.reduce((acc, k) => {
    if (obj.hasOwnProperty(k)) {
      acc[k] = obj[k];
    }
    return acc;
  }, {});
}
const NATIVE_SET_TIMEOUT = globalThisShim.setTimeout;
const NATIVE_CLEAR_TIMEOUT = globalThisShim.clearTimeout;
function installTimerFunctions(obj, opts) {
  if (opts.useNativeTimers) {
    obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);
    obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);
  } else {
    obj.setTimeoutFn = globalThisShim.setTimeout.bind(globalThisShim);
    obj.clearTimeoutFn = globalThisShim.clearTimeout.bind(globalThisShim);
  }
}
const BASE64_OVERHEAD = 1.33;
function byteLength(obj) {
  if (typeof obj === "string") {
    return utf8Length(obj);
  }
  return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
}
function utf8Length(str) {
  let c = 0, length2 = 0;
  for (let i2 = 0, l = str.length; i2 < l; i2++) {
    c = str.charCodeAt(i2);
    if (c < 128) {
      length2 += 1;
    } else if (c < 2048) {
      length2 += 2;
    } else if (c < 55296 || c >= 57344) {
      length2 += 3;
    } else {
      i2++;
      length2 += 4;
    }
  }
  return length2;
}
class TransportError extends Error {
  constructor(reason, description, context) {
    super(reason);
    this.description = description;
    this.context = context;
    this.type = "TransportError";
  }
}
class Transport extends Emitter {
  /**
   * Transport abstract constructor.
   *
   * @param {Object} opts - options
   * @protected
   */
  constructor(opts) {
    super();
    this.writable = false;
    installTimerFunctions(this, opts);
    this.opts = opts;
    this.query = opts.query;
    this.socket = opts.socket;
  }
  /**
   * Emits an error.
   *
   * @param {String} reason
   * @param description
   * @param context - the error context
   * @return {Transport} for chaining
   * @protected
   */
  onError(reason, description, context) {
    super.emitReserved("error", new TransportError(reason, description, context));
    return this;
  }
  /**
   * Opens the transport.
   */
  open() {
    this.readyState = "opening";
    this.doOpen();
    return this;
  }
  /**
   * Closes the transport.
   */
  close() {
    if (this.readyState === "opening" || this.readyState === "open") {
      this.doClose();
      this.onClose();
    }
    return this;
  }
  /**
   * Sends multiple packets.
   *
   * @param {Array} packets
   */
  send(packets) {
    if (this.readyState === "open") {
      this.write(packets);
    }
  }
  /**
   * Called upon open
   *
   * @protected
   */
  onOpen() {
    this.readyState = "open";
    this.writable = true;
    super.emitReserved("open");
  }
  /**
   * Called with data.
   *
   * @param {String} data
   * @protected
   */
  onData(data) {
    const packet = decodePacket(data, this.socket.binaryType);
    this.onPacket(packet);
  }
  /**
   * Called with a decoded packet.
   *
   * @protected
   */
  onPacket(packet) {
    super.emitReserved("packet", packet);
  }
  /**
   * Called upon close.
   *
   * @protected
   */
  onClose(details) {
    this.readyState = "closed";
    super.emitReserved("close", details);
  }
  /**
   * Pauses the transport, in order not to lose packets during an upgrade.
   *
   * @param onPause
   */
  pause(onPause) {
  }
}
const alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""), length = 64, map = {};
let seed = 0, i = 0, prev;
function encode$1(num) {
  let encoded = "";
  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);
  return encoded;
}
function yeast() {
  const now = encode$1(+/* @__PURE__ */ new Date());
  if (now !== prev)
    return seed = 0, prev = now;
  return now + "." + encode$1(seed++);
}
for (; i < length; i++)
  map[alphabet[i]] = i;
function encode(obj) {
  let str = "";
  for (let i2 in obj) {
    if (obj.hasOwnProperty(i2)) {
      if (str.length)
        str += "&";
      str += encodeURIComponent(i2) + "=" + encodeURIComponent(obj[i2]);
    }
  }
  return str;
}
function decode(qs) {
  let qry = {};
  let pairs = qs.split("&");
  for (let i2 = 0, l = pairs.length; i2 < l; i2++) {
    let pair = pairs[i2].split("=");
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
}
let value$1 = false;
try {
  value$1 = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
} catch (err) {
}
const hasCORS = value$1;
function XHR(opts) {
  const xdomain = opts.xdomain;
  try {
    if ("undefined" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) {
  }
  if (!xdomain) {
    try {
      return new globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
    } catch (e) {
    }
  }
}
function empty() {
}
const hasXHR2 = function() {
  const xhr = new XHR({
    xdomain: false
  });
  return null != xhr.responseType;
}();
class Polling extends Transport {
  /**
   * XHR Polling constructor.
   *
   * @param {Object} opts
   * @package
   */
  constructor(opts) {
    super(opts);
    this.polling = false;
    if (typeof location !== "undefined") {
      const isSSL = "https:" === location.protocol;
      let port = location.port;
      if (!port) {
        port = isSSL ? "443" : "80";
      }
      this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
      this.xs = opts.secure !== isSSL;
    }
    const forceBase64 = opts && opts.forceBase64;
    this.supportsBinary = hasXHR2 && !forceBase64;
  }
  get name() {
    return "polling";
  }
  /**
   * Opens the socket (triggers polling). We write a PING message to determine
   * when the transport is open.
   *
   * @protected
   */
  doOpen() {
    this.poll();
  }
  /**
   * Pauses polling.
   *
   * @param {Function} onPause - callback upon buffers are flushed and transport is paused
   * @package
   */
  pause(onPause) {
    this.readyState = "pausing";
    const pause = () => {
      this.readyState = "paused";
      onPause();
    };
    if (this.polling || !this.writable) {
      let total = 0;
      if (this.polling) {
        total++;
        this.once("pollComplete", function() {
          --total || pause();
        });
      }
      if (!this.writable) {
        total++;
        this.once("drain", function() {
          --total || pause();
        });
      }
    } else {
      pause();
    }
  }
  /**
   * Starts polling cycle.
   *
   * @private
   */
  poll() {
    this.polling = true;
    this.doPoll();
    this.emitReserved("poll");
  }
  /**
   * Overloads onData to detect payloads.
   *
   * @protected
   */
  onData(data) {
    const callback = (packet) => {
      if ("opening" === this.readyState && packet.type === "open") {
        this.onOpen();
      }
      if ("close" === packet.type) {
        this.onClose({ description: "transport closed by the server" });
        return false;
      }
      this.onPacket(packet);
    };
    decodePayload(data, this.socket.binaryType).forEach(callback);
    if ("closed" !== this.readyState) {
      this.polling = false;
      this.emitReserved("pollComplete");
      if ("open" === this.readyState) {
        this.poll();
      }
    }
  }
  /**
   * For polling, send a close packet.
   *
   * @protected
   */
  doClose() {
    const close = () => {
      this.write([{ type: "close" }]);
    };
    if ("open" === this.readyState) {
      close();
    } else {
      this.once("open", close);
    }
  }
  /**
   * Writes a packets payload.
   *
   * @param {Array} packets - data packets
   * @protected
   */
  write(packets) {
    this.writable = false;
    encodePayload(packets, (data) => {
      this.doWrite(data, () => {
        this.writable = true;
        this.emitReserved("drain");
      });
    });
  }
  /**
   * Generates uri for connection.
   *
   * @private
   */
  uri() {
    let query = this.query || {};
    const schema = this.opts.secure ? "https" : "http";
    let port = "";
    if (false !== this.opts.timestampRequests) {
      query[this.opts.timestampParam] = yeast();
    }
    if (!this.supportsBinary && !query.sid) {
      query.b64 = 1;
    }
    if (this.opts.port && ("https" === schema && Number(this.opts.port) !== 443 || "http" === schema && Number(this.opts.port) !== 80)) {
      port = ":" + this.opts.port;
    }
    const encodedQuery = encode(query);
    const ipv6 = this.opts.hostname.indexOf(":") !== -1;
    return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? "?" + encodedQuery : "");
  }
  /**
   * Creates a request.
   *
   * @param {String} method
   * @private
   */
  request(opts = {}) {
    Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);
    return new Request(this.uri(), opts);
  }
  /**
   * Sends data.
   *
   * @param {String} data to send.
   * @param {Function} called upon flush.
   * @private
   */
  doWrite(data, fn) {
    const req = this.request({
      method: "POST",
      data
    });
    req.on("success", fn);
    req.on("error", (xhrStatus, context) => {
      this.onError("xhr post error", xhrStatus, context);
    });
  }
  /**
   * Starts a poll cycle.
   *
   * @private
   */
  doPoll() {
    const req = this.request();
    req.on("data", this.onData.bind(this));
    req.on("error", (xhrStatus, context) => {
      this.onError("xhr poll error", xhrStatus, context);
    });
    this.pollXhr = req;
  }
}
class Request extends Emitter {
  /**
   * Request constructor
   *
   * @param {Object} options
   * @package
   */
  constructor(uri, opts) {
    super();
    installTimerFunctions(this, opts);
    this.opts = opts;
    this.method = opts.method || "GET";
    this.uri = uri;
    this.async = false !== opts.async;
    this.data = void 0 !== opts.data ? opts.data : null;
    this.create();
  }
  /**
   * Creates the XHR object and sends the request.
   *
   * @private
   */
  create() {
    const opts = pick(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
    opts.xdomain = !!this.opts.xd;
    opts.xscheme = !!this.opts.xs;
    const xhr = this.xhr = new XHR(opts);
    try {
      xhr.open(this.method, this.uri, this.async);
      try {
        if (this.opts.extraHeaders) {
          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
          for (let i2 in this.opts.extraHeaders) {
            if (this.opts.extraHeaders.hasOwnProperty(i2)) {
              xhr.setRequestHeader(i2, this.opts.extraHeaders[i2]);
            }
          }
        }
      } catch (e) {
      }
      if ("POST" === this.method) {
        try {
          xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
        } catch (e) {
        }
      }
      try {
        xhr.setRequestHeader("Accept", "*/*");
      } catch (e) {
      }
      if ("withCredentials" in xhr) {
        xhr.withCredentials = this.opts.withCredentials;
      }
      if (this.opts.requestTimeout) {
        xhr.timeout = this.opts.requestTimeout;
      }
      xhr.onreadystatechange = () => {
        if (4 !== xhr.readyState)
          return;
        if (200 === xhr.status || 1223 === xhr.status) {
          this.onLoad();
        } else {
          this.setTimeoutFn(() => {
            this.onError(typeof xhr.status === "number" ? xhr.status : 0);
          }, 0);
        }
      };
      xhr.send(this.data);
    } catch (e) {
      this.setTimeoutFn(() => {
        this.onError(e);
      }, 0);
      return;
    }
    if (typeof document !== "undefined") {
      this.index = Request.requestsCount++;
      Request.requests[this.index] = this;
    }
  }
  /**
   * Called upon error.
   *
   * @private
   */
  onError(err) {
    this.emitReserved("error", err, this.xhr);
    this.cleanup(true);
  }
  /**
   * Cleans up house.
   *
   * @private
   */
  cleanup(fromError) {
    if ("undefined" === typeof this.xhr || null === this.xhr) {
      return;
    }
    this.xhr.onreadystatechange = empty;
    if (fromError) {
      try {
        this.xhr.abort();
      } catch (e) {
      }
    }
    if (typeof document !== "undefined") {
      delete Request.requests[this.index];
    }
    this.xhr = null;
  }
  /**
   * Called upon load.
   *
   * @private
   */
  onLoad() {
    const data = this.xhr.responseText;
    if (data !== null) {
      this.emitReserved("data", data);
      this.emitReserved("success");
      this.cleanup();
    }
  }
  /**
   * Aborts the request.
   *
   * @package
   */
  abort() {
    this.cleanup();
  }
}
Request.requestsCount = 0;
Request.requests = {};
if (typeof document !== "undefined") {
  if (typeof attachEvent === "function") {
    attachEvent("onunload", unloadHandler);
  } else if (typeof addEventListener === "function") {
    const terminationEvent = "onpagehide" in globalThisShim ? "pagehide" : "unload";
    addEventListener(terminationEvent, unloadHandler, false);
  }
}
function unloadHandler() {
  for (let i2 in Request.requests) {
    if (Request.requests.hasOwnProperty(i2)) {
      Request.requests[i2].abort();
    }
  }
}
const nextTick = (() => {
  const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
  if (isPromiseAvailable) {
    return (cb) => Promise.resolve().then(cb);
  } else {
    return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
  }
})();
const WebSocket = globalThisShim.WebSocket || globalThisShim.MozWebSocket;
const usingBrowserWebSocket = true;
const defaultBinaryType = "arraybuffer";
const isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
class WS extends Transport {
  /**
   * WebSocket transport constructor.
   *
   * @param {Object} opts - connection options
   * @protected
   */
  constructor(opts) {
    super(opts);
    this.supportsBinary = !opts.forceBase64;
  }
  get name() {
    return "websocket";
  }
  doOpen() {
    if (!this.check()) {
      return;
    }
    const uri = this.uri();
    const protocols = this.opts.protocols;
    const opts = isReactNative ? {} : pick(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
    if (this.opts.extraHeaders) {
      opts.headers = this.opts.extraHeaders;
    }
    try {
      this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);
    } catch (err) {
      return this.emitReserved("error", err);
    }
    this.ws.binaryType = this.socket.binaryType || defaultBinaryType;
    this.addEventListeners();
  }
  /**
   * Adds event listeners to the socket
   *
   * @private
   */
  addEventListeners() {
    this.ws.onopen = () => {
      if (this.opts.autoUnref) {
        this.ws._socket.unref();
      }
      this.onOpen();
    };
    this.ws.onclose = (closeEvent) => this.onClose({
      description: "websocket connection closed",
      context: closeEvent
    });
    this.ws.onmessage = (ev) => this.onData(ev.data);
    this.ws.onerror = (e) => this.onError("websocket error", e);
  }
  write(packets) {
    this.writable = false;
    for (let i2 = 0; i2 < packets.length; i2++) {
      const packet = packets[i2];
      const lastPacket = i2 === packets.length - 1;
      encodePacket(packet, this.supportsBinary, (data) => {
        const opts = {};
        try {
          if (usingBrowserWebSocket) {
            this.ws.send(data);
          }
        } catch (e) {
        }
        if (lastPacket) {
          nextTick(() => {
            this.writable = true;
            this.emitReserved("drain");
          }, this.setTimeoutFn);
        }
      });
    }
  }
  doClose() {
    if (typeof this.ws !== "undefined") {
      this.ws.close();
      this.ws = null;
    }
  }
  /**
   * Generates uri for connection.
   *
   * @private
   */
  uri() {
    let query = this.query || {};
    const schema = this.opts.secure ? "wss" : "ws";
    let port = "";
    if (this.opts.port && ("wss" === schema && Number(this.opts.port) !== 443 || "ws" === schema && Number(this.opts.port) !== 80)) {
      port = ":" + this.opts.port;
    }
    if (this.opts.timestampRequests) {
      query[this.opts.timestampParam] = yeast();
    }
    if (!this.supportsBinary) {
      query.b64 = 1;
    }
    const encodedQuery = encode(query);
    const ipv6 = this.opts.hostname.indexOf(":") !== -1;
    return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? "?" + encodedQuery : "");
  }
  /**
   * Feature detection for WebSocket.
   *
   * @return {Boolean} whether this transport is available.
   * @private
   */
  check() {
    return !!WebSocket;
  }
}
const transports = {
  websocket: WS,
  polling: Polling
};
const re = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
const parts = [
  "source",
  "protocol",
  "authority",
  "userInfo",
  "user",
  "password",
  "host",
  "port",
  "relative",
  "path",
  "directory",
  "file",
  "query",
  "anchor"
];
function parse$2(str) {
  const src = str, b = str.indexOf("["), e = str.indexOf("]");
  if (b != -1 && e != -1) {
    str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ";") + str.substring(e, str.length);
  }
  let m = re.exec(str || ""), uri = {}, i2 = 14;
  while (i2--) {
    uri[parts[i2]] = m[i2] || "";
  }
  if (b != -1 && e != -1) {
    uri.source = src;
    uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
    uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
    uri.ipv6uri = true;
  }
  uri.pathNames = pathNames(uri, uri["path"]);
  uri.queryKey = queryKey(uri, uri["query"]);
  return uri;
}
function pathNames(obj, path) {
  const regx = /\/{2,9}/g, names = path.replace(regx, "/").split("/");
  if (path.slice(0, 1) == "/" || path.length === 0) {
    names.splice(0, 1);
  }
  if (path.slice(-1) == "/") {
    names.splice(names.length - 1, 1);
  }
  return names;
}
function queryKey(uri, query) {
  const data = {};
  query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function($0, $1, $2) {
    if ($1) {
      data[$1] = $2;
    }
  });
  return data;
}
let Socket$1 = class Socket extends Emitter {
  /**
   * Socket constructor.
   *
   * @param {String|Object} uri - uri or options
   * @param {Object} opts - options
   */
  constructor(uri, opts = {}) {
    super();
    this.writeBuffer = [];
    if (uri && "object" === typeof uri) {
      opts = uri;
      uri = null;
    }
    if (uri) {
      uri = parse$2(uri);
      opts.hostname = uri.host;
      opts.secure = uri.protocol === "https" || uri.protocol === "wss";
      opts.port = uri.port;
      if (uri.query)
        opts.query = uri.query;
    } else if (opts.host) {
      opts.hostname = parse$2(opts.host).host;
    }
    installTimerFunctions(this, opts);
    this.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;
    if (opts.hostname && !opts.port) {
      opts.port = this.secure ? "443" : "80";
    }
    this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
    this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
    this.transports = opts.transports || ["polling", "websocket"];
    this.writeBuffer = [];
    this.prevBufferLen = 0;
    this.opts = Object.assign({
      path: "/engine.io",
      agent: false,
      withCredentials: false,
      upgrade: true,
      timestampParam: "t",
      rememberUpgrade: false,
      addTrailingSlash: true,
      rejectUnauthorized: true,
      perMessageDeflate: {
        threshold: 1024
      },
      transportOptions: {},
      closeOnBeforeunload: true
    }, opts);
    this.opts.path = this.opts.path.replace(/\/$/, "") + (this.opts.addTrailingSlash ? "/" : "");
    if (typeof this.opts.query === "string") {
      this.opts.query = decode(this.opts.query);
    }
    this.id = null;
    this.upgrades = null;
    this.pingInterval = null;
    this.pingTimeout = null;
    this.pingTimeoutTimer = null;
    if (typeof addEventListener === "function") {
      if (this.opts.closeOnBeforeunload) {
        this.beforeunloadEventListener = () => {
          if (this.transport) {
            this.transport.removeAllListeners();
            this.transport.close();
          }
        };
        addEventListener("beforeunload", this.beforeunloadEventListener, false);
      }
      if (this.hostname !== "localhost") {
        this.offlineEventListener = () => {
          this.onClose("transport close", {
            description: "network connection lost"
          });
        };
        addEventListener("offline", this.offlineEventListener, false);
      }
    }
    this.open();
  }
  /**
   * Creates transport of the given type.
   *
   * @param {String} name - transport name
   * @return {Transport}
   * @private
   */
  createTransport(name) {
    const query = Object.assign({}, this.opts.query);
    query.EIO = protocol$2;
    query.transport = name;
    if (this.id)
      query.sid = this.id;
    const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {
      query,
      socket: this,
      hostname: this.hostname,
      secure: this.secure,
      port: this.port
    });
    return new transports[name](opts);
  }
  /**
   * Initializes transport to use and starts probe.
   *
   * @private
   */
  open() {
    let transport;
    if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) {
      transport = "websocket";
    } else if (0 === this.transports.length) {
      this.setTimeoutFn(() => {
        this.emitReserved("error", "No transports available");
      }, 0);
      return;
    } else {
      transport = this.transports[0];
    }
    this.readyState = "opening";
    try {
      transport = this.createTransport(transport);
    } catch (e) {
      this.transports.shift();
      this.open();
      return;
    }
    transport.open();
    this.setTransport(transport);
  }
  /**
   * Sets the current transport. Disables the existing one (if any).
   *
   * @private
   */
  setTransport(transport) {
    if (this.transport) {
      this.transport.removeAllListeners();
    }
    this.transport = transport;
    transport.on("drain", this.onDrain.bind(this)).on("packet", this.onPacket.bind(this)).on("error", this.onError.bind(this)).on("close", (reason) => this.onClose("transport close", reason));
  }
  /**
   * Probes a transport.
   *
   * @param {String} name - transport name
   * @private
   */
  probe(name) {
    let transport = this.createTransport(name);
    let failed = false;
    Socket.priorWebsocketSuccess = false;
    const onTransportOpen = () => {
      if (failed)
        return;
      transport.send([{ type: "ping", data: "probe" }]);
      transport.once("packet", (msg) => {
        if (failed)
          return;
        if ("pong" === msg.type && "probe" === msg.data) {
          this.upgrading = true;
          this.emitReserved("upgrading", transport);
          if (!transport)
            return;
          Socket.priorWebsocketSuccess = "websocket" === transport.name;
          this.transport.pause(() => {
            if (failed)
              return;
            if ("closed" === this.readyState)
              return;
            cleanup();
            this.setTransport(transport);
            transport.send([{ type: "upgrade" }]);
            this.emitReserved("upgrade", transport);
            transport = null;
            this.upgrading = false;
            this.flush();
          });
        } else {
          const err = new Error("probe error");
          err.transport = transport.name;
          this.emitReserved("upgradeError", err);
        }
      });
    };
    function freezeTransport() {
      if (failed)
        return;
      failed = true;
      cleanup();
      transport.close();
      transport = null;
    }
    const onerror = (err) => {
      const error = new Error("probe error: " + err);
      error.transport = transport.name;
      freezeTransport();
      this.emitReserved("upgradeError", error);
    };
    function onTransportClose() {
      onerror("transport closed");
    }
    function onclose() {
      onerror("socket closed");
    }
    function onupgrade(to) {
      if (transport && to.name !== transport.name) {
        freezeTransport();
      }
    }
    const cleanup = () => {
      transport.removeListener("open", onTransportOpen);
      transport.removeListener("error", onerror);
      transport.removeListener("close", onTransportClose);
      this.off("close", onclose);
      this.off("upgrading", onupgrade);
    };
    transport.once("open", onTransportOpen);
    transport.once("error", onerror);
    transport.once("close", onTransportClose);
    this.once("close", onclose);
    this.once("upgrading", onupgrade);
    transport.open();
  }
  /**
   * Called when connection is deemed open.
   *
   * @private
   */
  onOpen() {
    this.readyState = "open";
    Socket.priorWebsocketSuccess = "websocket" === this.transport.name;
    this.emitReserved("open");
    this.flush();
    if ("open" === this.readyState && this.opts.upgrade) {
      let i2 = 0;
      const l = this.upgrades.length;
      for (; i2 < l; i2++) {
        this.probe(this.upgrades[i2]);
      }
    }
  }
  /**
   * Handles a packet.
   *
   * @private
   */
  onPacket(packet) {
    if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
      this.emitReserved("packet", packet);
      this.emitReserved("heartbeat");
      switch (packet.type) {
        case "open":
          this.onHandshake(JSON.parse(packet.data));
          break;
        case "ping":
          this.resetPingTimeout();
          this.sendPacket("pong");
          this.emitReserved("ping");
          this.emitReserved("pong");
          break;
        case "error":
          const err = new Error("server error");
          err.code = packet.data;
          this.onError(err);
          break;
        case "message":
          this.emitReserved("data", packet.data);
          this.emitReserved("message", packet.data);
          break;
      }
    }
  }
  /**
   * Called upon handshake completion.
   *
   * @param {Object} data - handshake obj
   * @private
   */
  onHandshake(data) {
    this.emitReserved("handshake", data);
    this.id = data.sid;
    this.transport.query.sid = data.sid;
    this.upgrades = this.filterUpgrades(data.upgrades);
    this.pingInterval = data.pingInterval;
    this.pingTimeout = data.pingTimeout;
    this.maxPayload = data.maxPayload;
    this.onOpen();
    if ("closed" === this.readyState)
      return;
    this.resetPingTimeout();
  }
  /**
   * Sets and resets ping timeout timer based on server pings.
   *
   * @private
   */
  resetPingTimeout() {
    this.clearTimeoutFn(this.pingTimeoutTimer);
    this.pingTimeoutTimer = this.setTimeoutFn(() => {
      this.onClose("ping timeout");
    }, this.pingInterval + this.pingTimeout);
    if (this.opts.autoUnref) {
      this.pingTimeoutTimer.unref();
    }
  }
  /**
   * Called on `drain` event
   *
   * @private
   */
  onDrain() {
    this.writeBuffer.splice(0, this.prevBufferLen);
    this.prevBufferLen = 0;
    if (0 === this.writeBuffer.length) {
      this.emitReserved("drain");
    } else {
      this.flush();
    }
  }
  /**
   * Flush write buffers.
   *
   * @private
   */
  flush() {
    if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
      const packets = this.getWritablePackets();
      this.transport.send(packets);
      this.prevBufferLen = packets.length;
      this.emitReserved("flush");
    }
  }
  /**
   * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
   * long-polling)
   *
   * @private
   */
  getWritablePackets() {
    const shouldCheckPayloadSize = this.maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
    if (!shouldCheckPayloadSize) {
      return this.writeBuffer;
    }
    let payloadSize = 1;
    for (let i2 = 0; i2 < this.writeBuffer.length; i2++) {
      const data = this.writeBuffer[i2].data;
      if (data) {
        payloadSize += byteLength(data);
      }
      if (i2 > 0 && payloadSize > this.maxPayload) {
        return this.writeBuffer.slice(0, i2);
      }
      payloadSize += 2;
    }
    return this.writeBuffer;
  }
  /**
   * Sends a message.
   *
   * @param {String} msg - message.
   * @param {Object} options.
   * @param {Function} callback function.
   * @return {Socket} for chaining.
   */
  write(msg, options, fn) {
    this.sendPacket("message", msg, options, fn);
    return this;
  }
  send(msg, options, fn) {
    this.sendPacket("message", msg, options, fn);
    return this;
  }
  /**
   * Sends a packet.
   *
   * @param {String} type: packet type.
   * @param {String} data.
   * @param {Object} options.
   * @param {Function} fn - callback function.
   * @private
   */
  sendPacket(type2, data, options, fn) {
    if ("function" === typeof data) {
      fn = data;
      data = void 0;
    }
    if ("function" === typeof options) {
      fn = options;
      options = null;
    }
    if ("closing" === this.readyState || "closed" === this.readyState) {
      return;
    }
    options = options || {};
    options.compress = false !== options.compress;
    const packet = {
      type: type2,
      data,
      options
    };
    this.emitReserved("packetCreate", packet);
    this.writeBuffer.push(packet);
    if (fn)
      this.once("flush", fn);
    this.flush();
  }
  /**
   * Closes the connection.
   */
  close() {
    const close = () => {
      this.onClose("forced close");
      this.transport.close();
    };
    const cleanupAndClose = () => {
      this.off("upgrade", cleanupAndClose);
      this.off("upgradeError", cleanupAndClose);
      close();
    };
    const waitForUpgrade = () => {
      this.once("upgrade", cleanupAndClose);
      this.once("upgradeError", cleanupAndClose);
    };
    if ("opening" === this.readyState || "open" === this.readyState) {
      this.readyState = "closing";
      if (this.writeBuffer.length) {
        this.once("drain", () => {
          if (this.upgrading) {
            waitForUpgrade();
          } else {
            close();
          }
        });
      } else if (this.upgrading) {
        waitForUpgrade();
      } else {
        close();
      }
    }
    return this;
  }
  /**
   * Called upon transport error
   *
   * @private
   */
  onError(err) {
    Socket.priorWebsocketSuccess = false;
    this.emitReserved("error", err);
    this.onClose("transport error", err);
  }
  /**
   * Called upon transport close.
   *
   * @private
   */
  onClose(reason, description) {
    if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
      this.clearTimeoutFn(this.pingTimeoutTimer);
      this.transport.removeAllListeners("close");
      this.transport.close();
      this.transport.removeAllListeners();
      if (typeof removeEventListener === "function") {
        removeEventListener("beforeunload", this.beforeunloadEventListener, false);
        removeEventListener("offline", this.offlineEventListener, false);
      }
      this.readyState = "closed";
      this.id = null;
      this.emitReserved("close", reason, description);
      this.writeBuffer = [];
      this.prevBufferLen = 0;
    }
  }
  /**
   * Filters upgrades, returning only those matching client transports.
   *
   * @param {Array} upgrades - server upgrades
   * @private
   */
  filterUpgrades(upgrades) {
    const filteredUpgrades = [];
    let i2 = 0;
    const j = upgrades.length;
    for (; i2 < j; i2++) {
      if (~this.transports.indexOf(upgrades[i2]))
        filteredUpgrades.push(upgrades[i2]);
    }
    return filteredUpgrades;
  }
};
Socket$1.protocol = protocol$2;
function url(uri, path = "", loc) {
  let obj = uri;
  loc = loc || typeof location !== "undefined" && location;
  if (null == uri)
    uri = loc.protocol + "//" + loc.host;
  if (typeof uri === "string") {
    if ("/" === uri.charAt(0)) {
      if ("/" === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }
    if (!/^(https?|wss?):\/\//.test(uri)) {
      if ("undefined" !== typeof loc) {
        uri = loc.protocol + "//" + uri;
      } else {
        uri = "https://" + uri;
      }
    }
    obj = parse$2(uri);
  }
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = "80";
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = "443";
    }
  }
  obj.path = obj.path || "/";
  const ipv6 = obj.host.indexOf(":") !== -1;
  const host = ipv6 ? "[" + obj.host + "]" : obj.host;
  obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
  obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
  return obj;
}
const withNativeArrayBuffer = typeof ArrayBuffer === "function";
const isView = (obj) => {
  return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
};
const toString = Object.prototype.toString;
const withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && toString.call(Blob) === "[object BlobConstructor]";
const withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString.call(File) === "[object FileConstructor]";
function isBinary(obj) {
  return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;
}
function hasBinary(obj, toJSON) {
  if (!obj || typeof obj !== "object") {
    return false;
  }
  if (Array.isArray(obj)) {
    for (let i2 = 0, l = obj.length; i2 < l; i2++) {
      if (hasBinary(obj[i2])) {
        return true;
      }
    }
    return false;
  }
  if (isBinary(obj)) {
    return true;
  }
  if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }
  for (const key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }
  return false;
}
function deconstructPacket(packet) {
  const buffers = [];
  const packetData = packet.data;
  const pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length;
  return { packet: pack, buffers };
}
function _deconstructPacket(data, buffers) {
  if (!data)
    return data;
  if (isBinary(data)) {
    const placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (Array.isArray(data)) {
    const newData = new Array(data.length);
    for (let i2 = 0; i2 < data.length; i2++) {
      newData[i2] = _deconstructPacket(data[i2], buffers);
    }
    return newData;
  } else if (typeof data === "object" && !(data instanceof Date)) {
    const newData = {};
    for (const key in data) {
      if (Object.prototype.hasOwnProperty.call(data, key)) {
        newData[key] = _deconstructPacket(data[key], buffers);
      }
    }
    return newData;
  }
  return data;
}
function reconstructPacket(packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  delete packet.attachments;
  return packet;
}
function _reconstructPacket(data, buffers) {
  if (!data)
    return data;
  if (data && data._placeholder === true) {
    const isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;
    if (isIndexValid) {
      return buffers[data.num];
    } else {
      throw new Error("illegal attachments");
    }
  } else if (Array.isArray(data)) {
    for (let i2 = 0; i2 < data.length; i2++) {
      data[i2] = _reconstructPacket(data[i2], buffers);
    }
  } else if (typeof data === "object") {
    for (const key in data) {
      if (Object.prototype.hasOwnProperty.call(data, key)) {
        data[key] = _reconstructPacket(data[key], buffers);
      }
    }
  }
  return data;
}
const RESERVED_EVENTS$1 = [
  "connect",
  "connect_error",
  "disconnect",
  "disconnecting",
  "newListener",
  "removeListener"
  // used by the Node.js EventEmitter
];
const protocol$1 = 5;
var PacketType;
(function(PacketType2) {
  PacketType2[PacketType2["CONNECT"] = 0] = "CONNECT";
  PacketType2[PacketType2["DISCONNECT"] = 1] = "DISCONNECT";
  PacketType2[PacketType2["EVENT"] = 2] = "EVENT";
  PacketType2[PacketType2["ACK"] = 3] = "ACK";
  PacketType2[PacketType2["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
  PacketType2[PacketType2["BINARY_EVENT"] = 5] = "BINARY_EVENT";
  PacketType2[PacketType2["BINARY_ACK"] = 6] = "BINARY_ACK";
})(PacketType || (PacketType = {}));
class Encoder {
  /**
   * Encoder constructor
   *
   * @param {function} replacer - custom replacer to pass down to JSON.parse
   */
  constructor(replacer2) {
    this.replacer = replacer2;
  }
  /**
   * Encode a packet as a single string if non-binary, or as a
   * buffer sequence, depending on packet type.
   *
   * @param {Object} obj - packet object
   */
  encode(obj) {
    if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
      if (hasBinary(obj)) {
        return this.encodeAsBinary({
          type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,
          nsp: obj.nsp,
          data: obj.data,
          id: obj.id
        });
      }
    }
    return [this.encodeAsString(obj)];
  }
  /**
   * Encode packet as string.
   */
  encodeAsString(obj) {
    let str = "" + obj.type;
    if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
      str += obj.attachments + "-";
    }
    if (obj.nsp && "/" !== obj.nsp) {
      str += obj.nsp + ",";
    }
    if (null != obj.id) {
      str += obj.id;
    }
    if (null != obj.data) {
      str += JSON.stringify(obj.data, this.replacer);
    }
    return str;
  }
  /**
   * Encode packet as 'buffer sequence' by removing blobs, and
   * deconstructing packet into object with placeholders and
   * a list of buffers.
   */
  encodeAsBinary(obj) {
    const deconstruction = deconstructPacket(obj);
    const pack = this.encodeAsString(deconstruction.packet);
    const buffers = deconstruction.buffers;
    buffers.unshift(pack);
    return buffers;
  }
}
function isObject(value2) {
  return Object.prototype.toString.call(value2) === "[object Object]";
}
class Decoder extends Emitter {
  /**
   * Decoder constructor
   *
   * @param {function} reviver - custom reviver to pass down to JSON.stringify
   */
  constructor(reviver) {
    super();
    this.reviver = reviver;
  }
  /**
   * Decodes an encoded packet string into packet JSON.
   *
   * @param {String} obj - encoded packet
   */
  add(obj) {
    let packet;
    if (typeof obj === "string") {
      if (this.reconstructor) {
        throw new Error("got plaintext data when reconstructing a packet");
      }
      packet = this.decodeString(obj);
      const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;
      if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {
        packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;
        this.reconstructor = new BinaryReconstructor(packet);
        if (packet.attachments === 0) {
          super.emitReserved("decoded", packet);
        }
      } else {
        super.emitReserved("decoded", packet);
      }
    } else if (isBinary(obj) || obj.base64) {
      if (!this.reconstructor) {
        throw new Error("got binary data when not reconstructing a packet");
      } else {
        packet = this.reconstructor.takeBinaryData(obj);
        if (packet) {
          this.reconstructor = null;
          super.emitReserved("decoded", packet);
        }
      }
    } else {
      throw new Error("Unknown type: " + obj);
    }
  }
  /**
   * Decode a packet String (JSON data)
   *
   * @param {String} str
   * @return {Object} packet
   */
  decodeString(str) {
    let i2 = 0;
    const p2 = {
      type: Number(str.charAt(0))
    };
    if (PacketType[p2.type] === void 0) {
      throw new Error("unknown packet type " + p2.type);
    }
    if (p2.type === PacketType.BINARY_EVENT || p2.type === PacketType.BINARY_ACK) {
      const start = i2 + 1;
      while (str.charAt(++i2) !== "-" && i2 != str.length) {
      }
      const buf2 = str.substring(start, i2);
      if (buf2 != Number(buf2) || str.charAt(i2) !== "-") {
        throw new Error("Illegal attachments");
      }
      p2.attachments = Number(buf2);
    }
    if ("/" === str.charAt(i2 + 1)) {
      const start = i2 + 1;
      while (++i2) {
        const c = str.charAt(i2);
        if ("," === c)
          break;
        if (i2 === str.length)
          break;
      }
      p2.nsp = str.substring(start, i2);
    } else {
      p2.nsp = "/";
    }
    const next2 = str.charAt(i2 + 1);
    if ("" !== next2 && Number(next2) == next2) {
      const start = i2 + 1;
      while (++i2) {
        const c = str.charAt(i2);
        if (null == c || Number(c) != c) {
          --i2;
          break;
        }
        if (i2 === str.length)
          break;
      }
      p2.id = Number(str.substring(start, i2 + 1));
    }
    if (str.charAt(++i2)) {
      const payload = this.tryParse(str.substr(i2));
      if (Decoder.isPayloadValid(p2.type, payload)) {
        p2.data = payload;
      } else {
        throw new Error("invalid payload");
      }
    }
    return p2;
  }
  tryParse(str) {
    try {
      return JSON.parse(str, this.reviver);
    } catch (e) {
      return false;
    }
  }
  static isPayloadValid(type2, payload) {
    switch (type2) {
      case PacketType.CONNECT:
        return isObject(payload);
      case PacketType.DISCONNECT:
        return payload === void 0;
      case PacketType.CONNECT_ERROR:
        return typeof payload === "string" || isObject(payload);
      case PacketType.EVENT:
      case PacketType.BINARY_EVENT:
        return Array.isArray(payload) && (typeof payload[0] === "number" || typeof payload[0] === "string" && RESERVED_EVENTS$1.indexOf(payload[0]) === -1);
      case PacketType.ACK:
      case PacketType.BINARY_ACK:
        return Array.isArray(payload);
    }
  }
  /**
   * Deallocates a parser's resources
   */
  destroy() {
    if (this.reconstructor) {
      this.reconstructor.finishedReconstruction();
      this.reconstructor = null;
    }
  }
}
class BinaryReconstructor {
  constructor(packet) {
    this.packet = packet;
    this.buffers = [];
    this.reconPack = packet;
  }
  /**
   * Method to be called when binary data received from connection
   * after a BINARY_EVENT packet.
   *
   * @param {Buffer | ArrayBuffer} binData - the raw binary data received
   * @return {null | Object} returns null if more binary data is expected or
   *   a reconstructed packet object if all buffers have been received.
   */
  takeBinaryData(binData) {
    this.buffers.push(binData);
    if (this.buffers.length === this.reconPack.attachments) {
      const packet = reconstructPacket(this.reconPack, this.buffers);
      this.finishedReconstruction();
      return packet;
    }
    return null;
  }
  /**
   * Cleans up binary packet reconstruction variables.
   */
  finishedReconstruction() {
    this.reconPack = null;
    this.buffers = [];
  }
}
const parser = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Decoder,
  Encoder,
  get PacketType() {
    return PacketType;
  },
  protocol: protocol$1
}, Symbol.toStringTag, { value: "Module" }));
function on(obj, ev, fn) {
  obj.on(ev, fn);
  return function subDestroy() {
    obj.off(ev, fn);
  };
}
const RESERVED_EVENTS = Object.freeze({
  connect: 1,
  connect_error: 1,
  disconnect: 1,
  disconnecting: 1,
  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
  newListener: 1,
  removeListener: 1
});
class Socket2 extends Emitter {
  /**
   * `Socket` constructor.
   */
  constructor(io, nsp, opts) {
    super();
    this.connected = false;
    this.recovered = false;
    this.receiveBuffer = [];
    this.sendBuffer = [];
    this._queue = [];
    this._queueSeq = 0;
    this.ids = 0;
    this.acks = {};
    this.flags = {};
    this.io = io;
    this.nsp = nsp;
    if (opts && opts.auth) {
      this.auth = opts.auth;
    }
    this._opts = Object.assign({}, opts);
    if (this.io._autoConnect)
      this.open();
  }
  /**
   * Whether the socket is currently disconnected
   *
   * @example
   * const socket = io();
   *
   * socket.on("connect", () => {
   *   console.log(socket.disconnected); // false
   * });
   *
   * socket.on("disconnect", () => {
   *   console.log(socket.disconnected); // true
   * });
   */
  get disconnected() {
    return !this.connected;
  }
  /**
   * Subscribe to open, close and packet events
   *
   * @private
   */
  subEvents() {
    if (this.subs)
      return;
    const io = this.io;
    this.subs = [
      on(io, "open", this.onopen.bind(this)),
      on(io, "packet", this.onpacket.bind(this)),
      on(io, "error", this.onerror.bind(this)),
      on(io, "close", this.onclose.bind(this))
    ];
  }
  /**
   * Whether the Socket will try to reconnect when its Manager connects or reconnects.
   *
   * @example
   * const socket = io();
   *
   * console.log(socket.active); // true
   *
   * socket.on("disconnect", (reason) => {
   *   if (reason === "io server disconnect") {
   *     // the disconnection was initiated by the server, you need to manually reconnect
   *     console.log(socket.active); // false
   *   }
   *   // else the socket will automatically try to reconnect
   *   console.log(socket.active); // true
   * });
   */
  get active() {
    return !!this.subs;
  }
  /**
   * "Opens" the socket.
   *
   * @example
   * const socket = io({
   *   autoConnect: false
   * });
   *
   * socket.connect();
   */
  connect() {
    if (this.connected)
      return this;
    this.subEvents();
    if (!this.io["_reconnecting"])
      this.io.open();
    if ("open" === this.io._readyState)
      this.onopen();
    return this;
  }
  /**
   * Alias for {@link connect()}.
   */
  open() {
    return this.connect();
  }
  /**
   * Sends a `message` event.
   *
   * This method mimics the WebSocket.send() method.
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send
   *
   * @example
   * socket.send("hello");
   *
   * // this is equivalent to
   * socket.emit("message", "hello");
   *
   * @return self
   */
  send(...args) {
    args.unshift("message");
    this.emit.apply(this, args);
    return this;
  }
  /**
   * Override `emit`.
   * If the event is in `events`, it's emitted normally.
   *
   * @example
   * socket.emit("hello", "world");
   *
   * // all serializable datastructures are supported (no need to call JSON.stringify)
   * socket.emit("hello", 1, "2", { 3: ["4"], 5: Uint8Array.from([6]) });
   *
   * // with an acknowledgement from the server
   * socket.emit("hello", "world", (val) => {
   *   // ...
   * });
   *
   * @return self
   */
  emit(ev, ...args) {
    if (RESERVED_EVENTS.hasOwnProperty(ev)) {
      throw new Error('"' + ev.toString() + '" is a reserved event name');
    }
    args.unshift(ev);
    if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {
      this._addToQueue(args);
      return this;
    }
    const packet = {
      type: PacketType.EVENT,
      data: args
    };
    packet.options = {};
    packet.options.compress = this.flags.compress !== false;
    if ("function" === typeof args[args.length - 1]) {
      const id = this.ids++;
      const ack = args.pop();
      this._registerAckCallback(id, ack);
      packet.id = id;
    }
    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;
    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);
    if (discardPacket)
      ;
    else if (this.connected) {
      this.notifyOutgoingListeners(packet);
      this.packet(packet);
    } else {
      this.sendBuffer.push(packet);
    }
    this.flags = {};
    return this;
  }
  /**
   * @private
   */
  _registerAckCallback(id, ack) {
    var _a;
    const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;
    if (timeout === void 0) {
      this.acks[id] = ack;
      return;
    }
    const timer = this.io.setTimeoutFn(() => {
      delete this.acks[id];
      for (let i2 = 0; i2 < this.sendBuffer.length; i2++) {
        if (this.sendBuffer[i2].id === id) {
          this.sendBuffer.splice(i2, 1);
        }
      }
      ack.call(this, new Error("operation has timed out"));
    }, timeout);
    this.acks[id] = (...args) => {
      this.io.clearTimeoutFn(timer);
      ack.apply(this, [null, ...args]);
    };
  }
  /**
   * Emits an event and waits for an acknowledgement
   *
   * @example
   * // without timeout
   * const response = await socket.emitWithAck("hello", "world");
   *
   * // with a specific timeout
   * try {
   *   const response = await socket.timeout(1000).emitWithAck("hello", "world");
   * } catch (err) {
   *   // the server did not acknowledge the event in the given delay
   * }
   *
   * @return a Promise that will be fulfilled when the server acknowledges the event
   */
  emitWithAck(ev, ...args) {
    const withErr = this.flags.timeout !== void 0 || this._opts.ackTimeout !== void 0;
    return new Promise((resolve2, reject) => {
      args.push((arg1, arg2) => {
        if (withErr) {
          return arg1 ? reject(arg1) : resolve2(arg2);
        } else {
          return resolve2(arg1);
        }
      });
      this.emit(ev, ...args);
    });
  }
  /**
   * Add the packet to the queue.
   * @param args
   * @private
   */
  _addToQueue(args) {
    let ack;
    if (typeof args[args.length - 1] === "function") {
      ack = args.pop();
    }
    const packet = {
      id: this._queueSeq++,
      tryCount: 0,
      pending: false,
      args,
      flags: Object.assign({ fromQueue: true }, this.flags)
    };
    args.push((err, ...responseArgs) => {
      if (packet !== this._queue[0]) {
        return;
      }
      const hasError = err !== null;
      if (hasError) {
        if (packet.tryCount > this._opts.retries) {
          this._queue.shift();
          if (ack) {
            ack(err);
          }
        }
      } else {
        this._queue.shift();
        if (ack) {
          ack(null, ...responseArgs);
        }
      }
      packet.pending = false;
      return this._drainQueue();
    });
    this._queue.push(packet);
    this._drainQueue();
  }
  /**
   * Send the first packet of the queue, and wait for an acknowledgement from the server.
   * @param force - whether to resend a packet that has not been acknowledged yet
   *
   * @private
   */
  _drainQueue(force = false) {
    if (!this.connected || this._queue.length === 0) {
      return;
    }
    const packet = this._queue[0];
    if (packet.pending && !force) {
      return;
    }
    packet.pending = true;
    packet.tryCount++;
    this.flags = packet.flags;
    this.emit.apply(this, packet.args);
  }
  /**
   * Sends a packet.
   *
   * @param packet
   * @private
   */
  packet(packet) {
    packet.nsp = this.nsp;
    this.io._packet(packet);
  }
  /**
   * Called upon engine `open`.
   *
   * @private
   */
  onopen() {
    if (typeof this.auth == "function") {
      this.auth((data) => {
        this._sendConnectPacket(data);
      });
    } else {
      this._sendConnectPacket(this.auth);
    }
  }
  /**
   * Sends a CONNECT packet to initiate the Socket.IO session.
   *
   * @param data
   * @private
   */
  _sendConnectPacket(data) {
    this.packet({
      type: PacketType.CONNECT,
      data: this._pid ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data) : data
    });
  }
  /**
   * Called upon engine or manager `error`.
   *
   * @param err
   * @private
   */
  onerror(err) {
    if (!this.connected) {
      this.emitReserved("connect_error", err);
    }
  }
  /**
   * Called upon engine `close`.
   *
   * @param reason
   * @param description
   * @private
   */
  onclose(reason, description) {
    this.connected = false;
    delete this.id;
    this.emitReserved("disconnect", reason, description);
  }
  /**
   * Called with socket packet.
   *
   * @param packet
   * @private
   */
  onpacket(packet) {
    const sameNamespace = packet.nsp === this.nsp;
    if (!sameNamespace)
      return;
    switch (packet.type) {
      case PacketType.CONNECT:
        if (packet.data && packet.data.sid) {
          this.onconnect(packet.data.sid, packet.data.pid);
        } else {
          this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
        }
        break;
      case PacketType.EVENT:
      case PacketType.BINARY_EVENT:
        this.onevent(packet);
        break;
      case PacketType.ACK:
      case PacketType.BINARY_ACK:
        this.onack(packet);
        break;
      case PacketType.DISCONNECT:
        this.ondisconnect();
        break;
      case PacketType.CONNECT_ERROR:
        this.destroy();
        const err = new Error(packet.data.message);
        err.data = packet.data.data;
        this.emitReserved("connect_error", err);
        break;
    }
  }
  /**
   * Called upon a server event.
   *
   * @param packet
   * @private
   */
  onevent(packet) {
    const args = packet.data || [];
    if (null != packet.id) {
      args.push(this.ack(packet.id));
    }
    if (this.connected) {
      this.emitEvent(args);
    } else {
      this.receiveBuffer.push(Object.freeze(args));
    }
  }
  emitEvent(args) {
    if (this._anyListeners && this._anyListeners.length) {
      const listeners = this._anyListeners.slice();
      for (const listener of listeners) {
        listener.apply(this, args);
      }
    }
    super.emit.apply(this, args);
    if (this._pid && args.length && typeof args[args.length - 1] === "string") {
      this._lastOffset = args[args.length - 1];
    }
  }
  /**
   * Produces an ack callback to emit with an event.
   *
   * @private
   */
  ack(id) {
    const self2 = this;
    let sent = false;
    return function(...args) {
      if (sent)
        return;
      sent = true;
      self2.packet({
        type: PacketType.ACK,
        id,
        data: args
      });
    };
  }
  /**
   * Called upon a server acknowlegement.
   *
   * @param packet
   * @private
   */
  onack(packet) {
    const ack = this.acks[packet.id];
    if ("function" === typeof ack) {
      ack.apply(this, packet.data);
      delete this.acks[packet.id];
    }
  }
  /**
   * Called upon server connect.
   *
   * @private
   */
  onconnect(id, pid) {
    this.id = id;
    this.recovered = pid && this._pid === pid;
    this._pid = pid;
    this.connected = true;
    this.emitBuffered();
    this.emitReserved("connect");
    this._drainQueue(true);
  }
  /**
   * Emit buffered events (received and emitted).
   *
   * @private
   */
  emitBuffered() {
    this.receiveBuffer.forEach((args) => this.emitEvent(args));
    this.receiveBuffer = [];
    this.sendBuffer.forEach((packet) => {
      this.notifyOutgoingListeners(packet);
      this.packet(packet);
    });
    this.sendBuffer = [];
  }
  /**
   * Called upon server disconnect.
   *
   * @private
   */
  ondisconnect() {
    this.destroy();
    this.onclose("io server disconnect");
  }
  /**
   * Called upon forced client/server side disconnections,
   * this method ensures the manager stops tracking us and
   * that reconnections don't get triggered for this.
   *
   * @private
   */
  destroy() {
    if (this.subs) {
      this.subs.forEach((subDestroy) => subDestroy());
      this.subs = void 0;
    }
    this.io["_destroy"](this);
  }
  /**
   * Disconnects the socket manually. In that case, the socket will not try to reconnect.
   *
   * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.
   *
   * @example
   * const socket = io();
   *
   * socket.on("disconnect", (reason) => {
   *   // console.log(reason); prints "io client disconnect"
   * });
   *
   * socket.disconnect();
   *
   * @return self
   */
  disconnect() {
    if (this.connected) {
      this.packet({ type: PacketType.DISCONNECT });
    }
    this.destroy();
    if (this.connected) {
      this.onclose("io client disconnect");
    }
    return this;
  }
  /**
   * Alias for {@link disconnect()}.
   *
   * @return self
   */
  close() {
    return this.disconnect();
  }
  /**
   * Sets the compress flag.
   *
   * @example
   * socket.compress(false).emit("hello");
   *
   * @param compress - if `true`, compresses the sending data
   * @return self
   */
  compress(compress) {
    this.flags.compress = compress;
    return this;
  }
  /**
   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
   * ready to send messages.
   *
   * @example
   * socket.volatile.emit("hello"); // the server may or may not receive it
   *
   * @returns self
   */
  get volatile() {
    this.flags.volatile = true;
    return this;
  }
  /**
   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
   * given number of milliseconds have elapsed without an acknowledgement from the server:
   *
   * @example
   * socket.timeout(5000).emit("my-event", (err) => {
   *   if (err) {
   *     // the server did not acknowledge the event in the given delay
   *   }
   * });
   *
   * @returns self
   */
  timeout(timeout) {
    this.flags.timeout = timeout;
    return this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback.
   *
   * @example
   * socket.onAny((event, ...args) => {
   *   console.log(`got ${event}`);
   * });
   *
   * @param listener
   */
  onAny(listener) {
    this._anyListeners = this._anyListeners || [];
    this._anyListeners.push(listener);
    return this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback. The listener is added to the beginning of the listeners array.
   *
   * @example
   * socket.prependAny((event, ...args) => {
   *   console.log(`got event ${event}`);
   * });
   *
   * @param listener
   */
  prependAny(listener) {
    this._anyListeners = this._anyListeners || [];
    this._anyListeners.unshift(listener);
    return this;
  }
  /**
   * Removes the listener that will be fired when any event is emitted.
   *
   * @example
   * const catchAllListener = (event, ...args) => {
   *   console.log(`got event ${event}`);
   * }
   *
   * socket.onAny(catchAllListener);
   *
   * // remove a specific listener
   * socket.offAny(catchAllListener);
   *
   * // or remove all listeners
   * socket.offAny();
   *
   * @param listener
   */
  offAny(listener) {
    if (!this._anyListeners) {
      return this;
    }
    if (listener) {
      const listeners = this._anyListeners;
      for (let i2 = 0; i2 < listeners.length; i2++) {
        if (listener === listeners[i2]) {
          listeners.splice(i2, 1);
          return this;
        }
      }
    } else {
      this._anyListeners = [];
    }
    return this;
  }
  /**
   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
   * e.g. to remove listeners.
   */
  listenersAny() {
    return this._anyListeners || [];
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback.
   *
   * Note: acknowledgements sent to the server are not included.
   *
   * @example
   * socket.onAnyOutgoing((event, ...args) => {
   *   console.log(`sent event ${event}`);
   * });
   *
   * @param listener
   */
  onAnyOutgoing(listener) {
    this._anyOutgoingListeners = this._anyOutgoingListeners || [];
    this._anyOutgoingListeners.push(listener);
    return this;
  }
  /**
   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
   * callback. The listener is added to the beginning of the listeners array.
   *
   * Note: acknowledgements sent to the server are not included.
   *
   * @example
   * socket.prependAnyOutgoing((event, ...args) => {
   *   console.log(`sent event ${event}`);
   * });
   *
   * @param listener
   */
  prependAnyOutgoing(listener) {
    this._anyOutgoingListeners = this._anyOutgoingListeners || [];
    this._anyOutgoingListeners.unshift(listener);
    return this;
  }
  /**
   * Removes the listener that will be fired when any event is emitted.
   *
   * @example
   * const catchAllListener = (event, ...args) => {
   *   console.log(`sent event ${event}`);
   * }
   *
   * socket.onAnyOutgoing(catchAllListener);
   *
   * // remove a specific listener
   * socket.offAnyOutgoing(catchAllListener);
   *
   * // or remove all listeners
   * socket.offAnyOutgoing();
   *
   * @param [listener] - the catch-all listener (optional)
   */
  offAnyOutgoing(listener) {
    if (!this._anyOutgoingListeners) {
      return this;
    }
    if (listener) {
      const listeners = this._anyOutgoingListeners;
      for (let i2 = 0; i2 < listeners.length; i2++) {
        if (listener === listeners[i2]) {
          listeners.splice(i2, 1);
          return this;
        }
      }
    } else {
      this._anyOutgoingListeners = [];
    }
    return this;
  }
  /**
   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
   * e.g. to remove listeners.
   */
  listenersAnyOutgoing() {
    return this._anyOutgoingListeners || [];
  }
  /**
   * Notify the listeners for each packet sent
   *
   * @param packet
   *
   * @private
   */
  notifyOutgoingListeners(packet) {
    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
      const listeners = this._anyOutgoingListeners.slice();
      for (const listener of listeners) {
        listener.apply(this, packet.data);
      }
    }
  }
}
function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 1e4;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}
Backoff.prototype.duration = function() {
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand = Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};
Backoff.prototype.reset = function() {
  this.attempts = 0;
};
Backoff.prototype.setMin = function(min) {
  this.ms = min;
};
Backoff.prototype.setMax = function(max) {
  this.max = max;
};
Backoff.prototype.setJitter = function(jitter) {
  this.jitter = jitter;
};
class Manager extends Emitter {
  constructor(uri, opts) {
    var _a;
    super();
    this.nsps = {};
    this.subs = [];
    if (uri && "object" === typeof uri) {
      opts = uri;
      uri = void 0;
    }
    opts = opts || {};
    opts.path = opts.path || "/socket.io";
    this.opts = opts;
    installTimerFunctions(this, opts);
    this.reconnection(opts.reconnection !== false);
    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
    this.reconnectionDelay(opts.reconnectionDelay || 1e3);
    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);
    this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
    this.backoff = new Backoff({
      min: this.reconnectionDelay(),
      max: this.reconnectionDelayMax(),
      jitter: this.randomizationFactor()
    });
    this.timeout(null == opts.timeout ? 2e4 : opts.timeout);
    this._readyState = "closed";
    this.uri = uri;
    const _parser = opts.parser || parser;
    this.encoder = new _parser.Encoder();
    this.decoder = new _parser.Decoder();
    this._autoConnect = opts.autoConnect !== false;
    if (this._autoConnect)
      this.open();
  }
  reconnection(v) {
    if (!arguments.length)
      return this._reconnection;
    this._reconnection = !!v;
    return this;
  }
  reconnectionAttempts(v) {
    if (v === void 0)
      return this._reconnectionAttempts;
    this._reconnectionAttempts = v;
    return this;
  }
  reconnectionDelay(v) {
    var _a;
    if (v === void 0)
      return this._reconnectionDelay;
    this._reconnectionDelay = v;
    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
    return this;
  }
  randomizationFactor(v) {
    var _a;
    if (v === void 0)
      return this._randomizationFactor;
    this._randomizationFactor = v;
    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
    return this;
  }
  reconnectionDelayMax(v) {
    var _a;
    if (v === void 0)
      return this._reconnectionDelayMax;
    this._reconnectionDelayMax = v;
    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
    return this;
  }
  timeout(v) {
    if (!arguments.length)
      return this._timeout;
    this._timeout = v;
    return this;
  }
  /**
   * Starts trying to reconnect if reconnection is enabled and we have not
   * started reconnecting yet
   *
   * @private
   */
  maybeReconnectOnOpen() {
    if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
      this.reconnect();
    }
  }
  /**
   * Sets the current transport `socket`.
   *
   * @param {Function} fn - optional, callback
   * @return self
   * @public
   */
  open(fn) {
    if (~this._readyState.indexOf("open"))
      return this;
    this.engine = new Socket$1(this.uri, this.opts);
    const socket2 = this.engine;
    const self2 = this;
    this._readyState = "opening";
    this.skipReconnect = false;
    const openSubDestroy = on(socket2, "open", function() {
      self2.onopen();
      fn && fn();
    });
    const errorSub = on(socket2, "error", (err) => {
      self2.cleanup();
      self2._readyState = "closed";
      this.emitReserved("error", err);
      if (fn) {
        fn(err);
      } else {
        self2.maybeReconnectOnOpen();
      }
    });
    if (false !== this._timeout) {
      const timeout = this._timeout;
      if (timeout === 0) {
        openSubDestroy();
      }
      const timer = this.setTimeoutFn(() => {
        openSubDestroy();
        socket2.close();
        socket2.emit("error", new Error("timeout"));
      }, timeout);
      if (this.opts.autoUnref) {
        timer.unref();
      }
      this.subs.push(function subDestroy() {
        clearTimeout(timer);
      });
    }
    this.subs.push(openSubDestroy);
    this.subs.push(errorSub);
    return this;
  }
  /**
   * Alias for open()
   *
   * @return self
   * @public
   */
  connect(fn) {
    return this.open(fn);
  }
  /**
   * Called upon transport open.
   *
   * @private
   */
  onopen() {
    this.cleanup();
    this._readyState = "open";
    this.emitReserved("open");
    const socket2 = this.engine;
    this.subs.push(on(socket2, "ping", this.onping.bind(this)), on(socket2, "data", this.ondata.bind(this)), on(socket2, "error", this.onerror.bind(this)), on(socket2, "close", this.onclose.bind(this)), on(this.decoder, "decoded", this.ondecoded.bind(this)));
  }
  /**
   * Called upon a ping.
   *
   * @private
   */
  onping() {
    this.emitReserved("ping");
  }
  /**
   * Called with data.
   *
   * @private
   */
  ondata(data) {
    try {
      this.decoder.add(data);
    } catch (e) {
      this.onclose("parse error", e);
    }
  }
  /**
   * Called when parser fully decodes a packet.
   *
   * @private
   */
  ondecoded(packet) {
    nextTick(() => {
      this.emitReserved("packet", packet);
    }, this.setTimeoutFn);
  }
  /**
   * Called upon socket error.
   *
   * @private
   */
  onerror(err) {
    this.emitReserved("error", err);
  }
  /**
   * Creates a new socket for the given `nsp`.
   *
   * @return {Socket}
   * @public
   */
  socket(nsp, opts) {
    let socket2 = this.nsps[nsp];
    if (!socket2) {
      socket2 = new Socket2(this, nsp, opts);
      this.nsps[nsp] = socket2;
    } else if (this._autoConnect && !socket2.active) {
      socket2.connect();
    }
    return socket2;
  }
  /**
   * Called upon a socket close.
   *
   * @param socket
   * @private
   */
  _destroy(socket2) {
    const nsps = Object.keys(this.nsps);
    for (const nsp of nsps) {
      const socket3 = this.nsps[nsp];
      if (socket3.active) {
        return;
      }
    }
    this._close();
  }
  /**
   * Writes a packet.
   *
   * @param packet
   * @private
   */
  _packet(packet) {
    const encodedPackets = this.encoder.encode(packet);
    for (let i2 = 0; i2 < encodedPackets.length; i2++) {
      this.engine.write(encodedPackets[i2], packet.options);
    }
  }
  /**
   * Clean up transport subscriptions and packet buffer.
   *
   * @private
   */
  cleanup() {
    this.subs.forEach((subDestroy) => subDestroy());
    this.subs.length = 0;
    this.decoder.destroy();
  }
  /**
   * Close the current socket.
   *
   * @private
   */
  _close() {
    this.skipReconnect = true;
    this._reconnecting = false;
    this.onclose("forced close");
    if (this.engine)
      this.engine.close();
  }
  /**
   * Alias for close()
   *
   * @private
   */
  disconnect() {
    return this._close();
  }
  /**
   * Called upon engine close.
   *
   * @private
   */
  onclose(reason, description) {
    this.cleanup();
    this.backoff.reset();
    this._readyState = "closed";
    this.emitReserved("close", reason, description);
    if (this._reconnection && !this.skipReconnect) {
      this.reconnect();
    }
  }
  /**
   * Attempt a reconnection.
   *
   * @private
   */
  reconnect() {
    if (this._reconnecting || this.skipReconnect)
      return this;
    const self2 = this;
    if (this.backoff.attempts >= this._reconnectionAttempts) {
      this.backoff.reset();
      this.emitReserved("reconnect_failed");
      this._reconnecting = false;
    } else {
      const delay = this.backoff.duration();
      this._reconnecting = true;
      const timer = this.setTimeoutFn(() => {
        if (self2.skipReconnect)
          return;
        this.emitReserved("reconnect_attempt", self2.backoff.attempts);
        if (self2.skipReconnect)
          return;
        self2.open((err) => {
          if (err) {
            self2._reconnecting = false;
            self2.reconnect();
            this.emitReserved("reconnect_error", err);
          } else {
            self2.onreconnect();
          }
        });
      }, delay);
      if (this.opts.autoUnref) {
        timer.unref();
      }
      this.subs.push(function subDestroy() {
        clearTimeout(timer);
      });
    }
  }
  /**
   * Called upon successful reconnect.
   *
   * @private
   */
  onreconnect() {
    const attempt = this.backoff.attempts;
    this._reconnecting = false;
    this.backoff.reset();
    this.emitReserved("reconnect", attempt);
  }
}
const cache = {};
function lookup(uri, opts) {
  if (typeof uri === "object") {
    opts = uri;
    uri = void 0;
  }
  opts = opts || {};
  const parsed = url(uri, opts.path || "/socket.io");
  const source = parsed.source;
  const id = parsed.id;
  const path = parsed.path;
  const sameNamespace = cache[id] && path in cache[id]["nsps"];
  const newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
  let io;
  if (newConnection) {
    io = new Manager(source, opts);
  } else {
    if (!cache[id]) {
      cache[id] = new Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.queryKey;
  }
  return io.socket(parsed.path, opts);
}
Object.assign(lookup, {
  Manager,
  Socket: Socket2,
  io: lookup,
  connect: lookup
});
let socket;
let emitters = void 0;
function startSocket() {
  const port = window.TsErrPort ?? "3000";
  const URL = `http://localhost:${port}`;
  socket = lookup(URL, { autoConnect: false });
  socket.onAny((event, ...args) => {
    console.log(event, args);
  });
  appState.socketStarted = true;
  for (const event in socketHandlers) {
    socket.on(event, socketHandlers[event]);
  }
  socket.connect();
  console.log("socket started");
  return emitters = {
    refreshFrontend: () => {
      socket.emit("refreshFrontend");
    },
    closeProject: (path) => {
      socket.emit("closeProject", path);
    },
    openProject: (path) => {
      socket.emit("openProject", path);
    },
    applyFix: (fixId) => {
      socket.emit("applyFix", fixId);
    },
    setPlugin: (pluginKey, active) => {
      socket.emit("setPlugin", pluginKey, active);
    },
    gotoDefinition: (filename, textContent, fromLine, toLine) => {
      console.log(
        "socket.gotoDefinition",
        filename,
        textContent,
        fromLine,
        toLine
      );
      socket.emit("gotoDefinition", filename, textContent, fromLine, toLine);
    },
    gotoFileLine: (fileName, line) => socket.emit("gotoFileLine", fileName, line)
  };
}
const socketHandlers = {
  connect: () => appState.connected = true,
  error: handleRequestError,
  success: handleRequestSuccess,
  supplement: handleSupplement,
  fixes: handleFixes,
  configs: handleConfigs,
  addPlugin: handleAddPlugin,
  openProject: handleOpenProject,
  hasProject: handleHasProject,
  projectRoot: (path) => appState.projectRoot = path,
  newErrors: handleNewErrors,
  changedErrors: handleNewErrors,
  fixedErrors: handleFixedErrors,
  infoAtPosition
};
const resolvedErrors = errMap([], mergeSources);
const appState = reactive({
  connected: false,
  currentMsgType: "",
  currentMsg: "",
  lastObject: {},
  socketStarted: false,
  error: "",
  plugins: {},
  requests: /* @__PURE__ */ new Map(),
  supplements: {},
  fixes: {},
  projects: {},
  configs: {},
  projectRoot: "",
  shikiTheme: "dracula"
});
const positionInfo = reactive(
  {}
);
function infoAtPosition(pluginName, filename, line, char, info) {
  positionInfo[PluginName.for(pluginName)] = {
    filename: "",
    line: 0,
    char: 0,
    info: []
  };
  nextTick$1(
    () => positionInfo[PluginName.for(pluginName)] = {
      filename,
      line,
      char,
      info
    }
  );
}
function handleAddPlugin(key, active, displayName) {
  const pName = PluginName(key);
  appState.plugins[pName] = { active, displayName };
}
function handleRequestError(requestId, ...args) {
  const request = appState.requests.get(requestId);
  if (!request) {
    unknownRequest(requestId);
    return;
  }
  request.reject(...args);
  appState.requests.delete(requestId);
  appState.error = `${appState.error} - request ${requestId} failed`;
}
function handleRequestSuccess(requestId, ...args) {
  const request = appState.requests.get(requestId);
  if (!request) {
    unknownRequest(requestId);
    return;
  }
  request.resolve(...args);
  appState.requests.delete(requestId);
}
const unknownRequest = (requestId) => appState.error = `request id not found ${requestId}`;
function handleNewErrors(entries) {
  for (const entry of entries) {
    resolvedErrors.set(entry[0], entry[1]);
  }
}
function handleFixedErrors(keys) {
  for (const key of keys) {
    resolvedErrors.delete(key);
  }
}
function handleSupplement(id, supplement) {
  var _a;
  (_a = appState.supplements)[id] ?? (_a[id] = []);
  appState.supplements[id].push(supplement);
}
function handleFixes(fixes) {
  var _a;
  for (const parseId in fixes) {
    (_a = appState.fixes)[parseId] ?? (_a[parseId] = []);
    appState.fixes[parseId].push(...fixes[parseId]);
  }
}
function handleConfigs(configs) {
  appState.configs = configs;
}
function handleHasProject(path, isOpen) {
  var _a, _b;
  const relPath = relativeProjectPath(path);
  if (!(relPath in appState.projects)) {
    (_a = appState.projects)[_b = ProjectPath(relPath)] ?? (_a[_b] = false);
  }
  if (isOpen) {
    handleOpenProject(relPath);
  }
}
function handleOpenProject(path) {
  const relPath = relativeProjectPath(path);
  if (relPath in appState.projects) {
    appState.projects[relPath] = true;
  }
}
function toggleProject(path) {
  const projectPath = ProjectPath.for(path);
  if (projectPath in appState.projects) {
    if (appState.projects[projectPath]) {
      appState.projects[projectPath] = false;
      emitters == null ? void 0 : emitters.closeProject(projectPath);
    } else {
      appState.projects[projectPath] = true;
      emitters == null ? void 0 : emitters.openProject(projectPath);
    }
  }
}
function relativeProjectPath(path) {
  return ProjectPath.for(
    (path.startsWith(appState.projectRoot) ? path.replace(appState.projectRoot, "") : path).replace(/^\.?\/?/, "")
  );
}
function useRefocusTarget(props, rootRef) {
  const refocusRef = ref(null);
  const refocusTargetEl = computed(() => {
    if (props.disable === true) {
      return null;
    }
    return h("span", {
      ref: refocusRef,
      class: "no-outline",
      tabindex: -1
    });
  });
  function refocusTarget(e) {
    const root = rootRef.value;
    if (e !== void 0 && e.type.indexOf("key") === 0) {
      if (root !== null && document.activeElement !== root && root.contains(document.activeElement) === true) {
        root.focus();
      }
    } else if (refocusRef.value !== null && (e === void 0 || root !== null && root.contains(e.target) === true)) {
      refocusRef.value.focus();
    }
  }
  return {
    refocusTargetEl,
    refocusTarget
  };
}
const optionSizes = {
  xs: 30,
  sm: 35,
  md: 40,
  lg: 50,
  xl: 60
};
const useCheckboxProps = {
  ...useDarkProps,
  ...useSizeProps,
  ...useFormProps,
  modelValue: {
    required: true,
    default: null
  },
  val: {},
  trueValue: { default: true },
  falseValue: { default: false },
  indeterminateValue: { default: null },
  checkedIcon: String,
  uncheckedIcon: String,
  indeterminateIcon: String,
  toggleOrder: {
    type: String,
    validator: (v) => v === "tf" || v === "ft"
  },
  toggleIndeterminate: Boolean,
  label: String,
  leftLabel: Boolean,
  color: String,
  keepColor: Boolean,
  dense: Boolean,
  disable: Boolean,
  tabindex: [String, Number]
};
const useCheckboxEmits = ["update:modelValue"];
function useCheckbox(type2, getInner) {
  const { props, slots, emit: emit2, proxy } = getCurrentInstance();
  const { $q } = proxy;
  const isDark = useDark(props, $q);
  const rootRef = ref(null);
  const { refocusTargetEl, refocusTarget } = useRefocusTarget(props, rootRef);
  const sizeStyle = useSize(props, optionSizes);
  const modelIsArray = computed(
    () => props.val !== void 0 && Array.isArray(props.modelValue)
  );
  const index2 = computed(() => {
    const val = toRaw(props.val);
    return modelIsArray.value === true ? props.modelValue.findIndex((opt) => toRaw(opt) === val) : -1;
  });
  const isTrue = computed(() => modelIsArray.value === true ? index2.value > -1 : toRaw(props.modelValue) === toRaw(props.trueValue));
  const isFalse = computed(() => modelIsArray.value === true ? index2.value === -1 : toRaw(props.modelValue) === toRaw(props.falseValue));
  const isIndeterminate = computed(
    () => isTrue.value === false && isFalse.value === false
  );
  const tabindex = computed(() => props.disable === true ? -1 : props.tabindex || 0);
  const classes = computed(
    () => `q-${type2} cursor-pointer no-outline row inline no-wrap items-center` + (props.disable === true ? " disabled" : "") + (isDark.value === true ? ` q-${type2}--dark` : "") + (props.dense === true ? ` q-${type2}--dense` : "") + (props.leftLabel === true ? " reverse" : "")
  );
  const innerClass = computed(() => {
    const state = isTrue.value === true ? "truthy" : isFalse.value === true ? "falsy" : "indet";
    const color = props.color !== void 0 && (props.keepColor === true || (type2 === "toggle" ? isTrue.value === true : isFalse.value !== true)) ? ` text-${props.color}` : "";
    return `q-${type2}__inner relative-position non-selectable q-${type2}__inner--${state}${color}`;
  });
  const formAttrs = computed(() => {
    const prop = { type: "checkbox" };
    props.name !== void 0 && Object.assign(prop, {
      // see https://vuejs.org/guide/extras/render-function.html#creating-vnodes (.prop)
      ".checked": isTrue.value,
      "^checked": isTrue.value === true ? "checked" : void 0,
      name: props.name,
      value: modelIsArray.value === true ? props.val : props.trueValue
    });
    return prop;
  });
  const injectFormInput = useFormInject(formAttrs);
  const attributes = computed(() => {
    const attrs = {
      tabindex: tabindex.value,
      role: type2 === "toggle" ? "switch" : "checkbox",
      "aria-label": props.label,
      "aria-checked": isIndeterminate.value === true ? "mixed" : isTrue.value === true ? "true" : "false"
    };
    if (props.disable === true) {
      attrs["aria-disabled"] = "true";
    }
    return attrs;
  });
  function onClick(e) {
    if (e !== void 0) {
      stopAndPrevent(e);
      refocusTarget(e);
    }
    if (props.disable !== true) {
      emit2("update:modelValue", getNextValue(), e);
    }
  }
  function getNextValue() {
    if (modelIsArray.value === true) {
      if (isTrue.value === true) {
        const val = props.modelValue.slice();
        val.splice(index2.value, 1);
        return val;
      }
      return props.modelValue.concat([props.val]);
    }
    if (isTrue.value === true) {
      if (props.toggleOrder !== "ft" || props.toggleIndeterminate === false) {
        return props.falseValue;
      }
    } else if (isFalse.value === true) {
      if (props.toggleOrder === "ft" || props.toggleIndeterminate === false) {
        return props.trueValue;
      }
    } else {
      return props.toggleOrder !== "ft" ? props.trueValue : props.falseValue;
    }
    return props.indeterminateValue;
  }
  function onKeydown2(e) {
    if (e.keyCode === 13 || e.keyCode === 32) {
      stopAndPrevent(e);
    }
  }
  function onKeyup2(e) {
    if (e.keyCode === 13 || e.keyCode === 32) {
      onClick(e);
    }
  }
  const getInnerContent = getInner(isTrue, isIndeterminate);
  Object.assign(proxy, { toggle: onClick });
  return () => {
    const inner = getInnerContent();
    props.disable !== true && injectFormInput(
      inner,
      "unshift",
      ` q-${type2}__native absolute q-ma-none q-pa-none`
    );
    const child = [
      h("div", {
        class: innerClass.value,
        style: sizeStyle.value,
        "aria-hidden": "true"
      }, inner)
    ];
    if (refocusTargetEl.value !== null) {
      child.push(refocusTargetEl.value);
    }
    const label = props.label !== void 0 ? hMergeSlot(slots.default, [props.label]) : hSlot(slots.default);
    label !== void 0 && child.push(
      h("div", {
        class: `q-${type2}__label q-anchor--skip`
      }, label)
    );
    return h("div", {
      ref: rootRef,
      class: classes.value,
      ...attributes.value,
      onClick,
      onKeydown: onKeydown2,
      onKeyup: onKeyup2
    }, child);
  };
}
const bgNode = h("div", {
  key: "svg",
  class: "q-checkbox__bg absolute"
}, [
  h("svg", {
    class: "q-checkbox__svg fit absolute-full",
    viewBox: "0 0 24 24"
  }, [
    h("path", {
      class: "q-checkbox__truthy",
      fill: "none",
      d: "M1.73,12.91 8.1,19.28 22.79,4.59"
    }),
    h("path", {
      class: "q-checkbox__indet",
      d: "M4,14H20V10H4"
    })
  ])
]);
const QCheckbox = createComponent({
  name: "QCheckbox",
  props: useCheckboxProps,
  emits: useCheckboxEmits,
  setup(props) {
    function getInner(isTrue, isIndeterminate) {
      const icon = computed(
        () => (isTrue.value === true ? props.checkedIcon : isIndeterminate.value === true ? props.indeterminateIcon : props.uncheckedIcon) || null
      );
      return () => icon.value !== null ? [
        h("div", {
          key: "icon",
          class: "q-checkbox__icon-container absolute-full flex flex-center no-wrap"
        }, [
          h(QIcon, {
            class: "q-checkbox__icon",
            name: icon.value
          })
        ])
      ] : [bgNode];
    }
    return useCheckbox("checkbox", getInner);
  }
});
const QSlideTransition = createComponent({
  name: "QSlideTransition",
  props: {
    appear: Boolean,
    duration: {
      type: Number,
      default: 300
    }
  },
  emits: ["show", "hide"],
  setup(props, { slots, emit: emit2 }) {
    let animating = false, doneFn, element;
    let timer = null, timerFallback = null, animListener, lastEvent;
    function cleanup() {
      doneFn && doneFn();
      doneFn = null;
      animating = false;
      if (timer !== null) {
        clearTimeout(timer);
        timer = null;
      }
      if (timerFallback !== null) {
        clearTimeout(timerFallback);
        timerFallback = null;
      }
      element !== void 0 && element.removeEventListener("transitionend", animListener);
      animListener = null;
    }
    function begin(el, height, done) {
      if (height !== void 0) {
        el.style.height = `${height}px`;
      }
      el.style.transition = `height ${props.duration}ms cubic-bezier(.25, .8, .50, 1)`;
      animating = true;
      doneFn = done;
    }
    function end(el, event) {
      el.style.overflowY = null;
      el.style.height = null;
      el.style.transition = null;
      cleanup();
      event !== lastEvent && emit2(event);
    }
    function onEnter(el, done) {
      let pos = 0;
      element = el;
      if (animating === true) {
        cleanup();
        pos = el.offsetHeight === el.scrollHeight ? 0 : void 0;
      } else {
        lastEvent = "hide";
        el.style.overflowY = "hidden";
      }
      begin(el, pos, done);
      timer = setTimeout(() => {
        timer = null;
        el.style.height = `${el.scrollHeight}px`;
        animListener = (evt) => {
          timerFallback = null;
          if (Object(evt) !== evt || evt.target === el) {
            end(el, "show");
          }
        };
        el.addEventListener("transitionend", animListener);
        timerFallback = setTimeout(animListener, props.duration * 1.1);
      }, 100);
    }
    function onLeave(el, done) {
      let pos;
      element = el;
      if (animating === true) {
        cleanup();
      } else {
        lastEvent = "show";
        el.style.overflowY = "hidden";
        pos = el.scrollHeight;
      }
      begin(el, pos, done);
      timer = setTimeout(() => {
        timer = null;
        el.style.height = 0;
        animListener = (evt) => {
          timerFallback = null;
          if (Object(evt) !== evt || evt.target === el) {
            end(el, "hide");
          }
        };
        el.addEventListener("transitionend", animListener);
        timerFallback = setTimeout(animListener, props.duration * 1.1);
      }, 100);
    }
    onBeforeUnmount(() => {
      animating === true && cleanup();
    });
    return () => h(Transition, {
      css: false,
      appear: props.appear,
      onEnter,
      onLeave
    }, slots.default);
  }
});
const tickStrategyOptions = ["none", "strict", "leaf", "leaf-filtered"];
const QTree = createComponent({
  name: "QTree",
  props: {
    ...useDarkProps,
    nodes: {
      type: Array,
      required: true
    },
    nodeKey: {
      type: String,
      required: true
    },
    labelKey: {
      type: String,
      default: "label"
    },
    childrenKey: {
      type: String,
      default: "children"
    },
    dense: Boolean,
    color: String,
    controlColor: String,
    textColor: String,
    selectedColor: String,
    icon: String,
    tickStrategy: {
      type: String,
      default: "none",
      validator: (v) => tickStrategyOptions.includes(v)
    },
    ticked: Array,
    // v-model:ticked
    expanded: Array,
    // v-model:expanded
    selected: {},
    // v-model:selected
    noSelectionUnset: Boolean,
    defaultExpandAll: Boolean,
    accordion: Boolean,
    filter: String,
    filterMethod: Function,
    duration: Number,
    noConnectors: Boolean,
    noTransition: Boolean,
    noNodesLabel: String,
    noResultsLabel: String
  },
  emits: [
    "update:expanded",
    "update:ticked",
    "update:selected",
    "lazyLoad",
    "afterShow",
    "afterHide"
  ],
  setup(props, { slots, emit: emit2 }) {
    const { proxy } = getCurrentInstance();
    const { $q } = proxy;
    const isDark = useDark(props, $q);
    const lazy = ref({});
    const innerTicked = ref(props.ticked || []);
    const innerExpanded = ref(props.expanded || []);
    let blurTargets = {};
    onBeforeUpdate(() => {
      blurTargets = {};
    });
    const classes = computed(
      () => `q-tree q-tree--${props.dense === true ? "dense" : "standard"}` + (props.noConnectors === true ? " q-tree--no-connectors" : "") + (isDark.value === true ? " q-tree--dark" : "") + (props.color !== void 0 ? ` text-${props.color}` : "")
    );
    const hasSelection = computed(() => props.selected !== void 0);
    const computedIcon = computed(() => props.icon || $q.iconSet.tree.icon);
    const computedControlColor = computed(() => props.controlColor || props.color);
    const textColorClass = computed(() => props.textColor !== void 0 ? ` text-${props.textColor}` : "");
    const selectedColorClass = computed(() => {
      const color = props.selectedColor || props.color;
      return color ? ` text-${color}` : "";
    });
    const computedFilterMethod = computed(() => props.filterMethod !== void 0 ? props.filterMethod : (node, filter) => {
      const filt = filter.toLowerCase();
      return node[props.labelKey] && node[props.labelKey].toLowerCase().indexOf(filt) > -1;
    });
    const meta = computed(() => {
      const meta2 = {};
      const travel = (node, parent) => {
        const tickStrategy = node.tickStrategy || (parent ? parent.tickStrategy : props.tickStrategy);
        const key = node[props.nodeKey], isParent = node[props.childrenKey] && node[props.childrenKey].length !== 0, selectable = node.disabled !== true && hasSelection.value === true && node.selectable !== false, expandable = node.disabled !== true && node.expandable !== false, hasTicking = tickStrategy !== "none", strictTicking = tickStrategy === "strict", leafFilteredTicking = tickStrategy === "leaf-filtered", leafTicking = tickStrategy === "leaf" || tickStrategy === "leaf-filtered";
        let tickable = node.disabled !== true && node.tickable !== false;
        if (leafTicking === true && tickable === true && parent && parent.tickable !== true) {
          tickable = false;
        }
        let localLazy = node.lazy;
        if (localLazy === true && lazy.value[key] !== void 0 && Array.isArray(node[props.childrenKey]) === true) {
          localLazy = lazy.value[key];
        }
        const m = {
          key,
          parent,
          isParent,
          lazy: localLazy,
          disabled: node.disabled,
          link: node.disabled !== true && (selectable === true || expandable === true && (isParent === true || localLazy === true)),
          children: [],
          matchesFilter: props.filter ? computedFilterMethod.value(node, props.filter) : true,
          selected: key === props.selected && selectable === true,
          selectable,
          expanded: isParent === true ? innerExpanded.value.includes(key) : false,
          expandable,
          noTick: node.noTick === true || strictTicking !== true && localLazy && localLazy !== "loaded",
          tickable,
          tickStrategy,
          hasTicking,
          strictTicking,
          leafFilteredTicking,
          leafTicking,
          ticked: strictTicking === true ? innerTicked.value.includes(key) : isParent === true ? false : innerTicked.value.includes(key)
        };
        meta2[key] = m;
        if (isParent === true) {
          m.children = node[props.childrenKey].map((n) => travel(n, m));
          if (props.filter) {
            if (m.matchesFilter !== true) {
              m.matchesFilter = m.children.some((n) => n.matchesFilter);
            } else if (m.noTick !== true && m.disabled !== true && m.tickable === true && leafFilteredTicking === true && m.children.every((n) => n.matchesFilter !== true || n.noTick === true || n.tickable !== true) === true) {
              m.tickable = false;
            }
          }
          if (m.matchesFilter === true) {
            if (m.noTick !== true && strictTicking !== true && m.children.every((n) => n.noTick) === true) {
              m.noTick = true;
            }
            if (leafTicking) {
              m.ticked = false;
              m.indeterminate = m.children.some((node2) => node2.indeterminate === true);
              m.tickable = m.tickable === true && m.children.some((node2) => node2.tickable);
              if (m.indeterminate !== true) {
                const sel = m.children.reduce((acc, meta3) => meta3.ticked === true ? acc + 1 : acc, 0);
                if (sel === m.children.length) {
                  m.ticked = true;
                } else if (sel > 0) {
                  m.indeterminate = true;
                }
              }
              if (m.indeterminate === true) {
                m.indeterminateNextState = m.children.every((meta3) => meta3.tickable !== true || meta3.ticked !== true);
              }
            }
          }
        }
        return m;
      };
      props.nodes.forEach((node) => travel(node, null));
      return meta2;
    });
    watch(() => props.ticked, (val) => {
      innerTicked.value = val;
    });
    watch(() => props.expanded, (val) => {
      innerExpanded.value = val;
    });
    function getNodeByKey(key) {
      const reduce = [].reduce;
      const find = (result, node) => {
        if (result || !node) {
          return result;
        }
        if (Array.isArray(node) === true) {
          return reduce.call(Object(node), find, result);
        }
        if (node[props.nodeKey] === key) {
          return node;
        }
        if (node[props.childrenKey]) {
          return find(null, node[props.childrenKey]);
        }
      };
      return find(null, props.nodes);
    }
    function getTickedNodes() {
      return innerTicked.value.map((key) => getNodeByKey(key));
    }
    function getExpandedNodes() {
      return innerExpanded.value.map((key) => getNodeByKey(key));
    }
    function isExpanded(key) {
      return key && meta.value[key] ? meta.value[key].expanded : false;
    }
    function collapseAll() {
      if (props.expanded !== void 0) {
        emit2("update:expanded", []);
      } else {
        innerExpanded.value = [];
      }
    }
    function expandAll() {
      const expanded = [];
      const travel = (node) => {
        if (node[props.childrenKey] && node[props.childrenKey].length !== 0) {
          if (node.expandable !== false && node.disabled !== true) {
            expanded.push(node[props.nodeKey]);
            node[props.childrenKey].forEach(travel);
          }
        }
      };
      props.nodes.forEach(travel);
      if (props.expanded !== void 0) {
        emit2("update:expanded", expanded);
      } else {
        innerExpanded.value = expanded;
      }
    }
    function setExpanded(key, state, node = getNodeByKey(key), m = meta.value[key]) {
      if (m.lazy && m.lazy !== "loaded") {
        if (m.lazy === "loading") {
          return;
        }
        lazy.value[key] = "loading";
        if (Array.isArray(node[props.childrenKey]) !== true) {
          node[props.childrenKey] = [];
        }
        emit2("lazyLoad", {
          node,
          key,
          done: (children) => {
            lazy.value[key] = "loaded";
            node[props.childrenKey] = Array.isArray(children) === true ? children : [];
            nextTick$1(() => {
              const localMeta = meta.value[key];
              if (localMeta && localMeta.isParent === true) {
                localSetExpanded(key, true);
              }
            });
          },
          fail: () => {
            delete lazy.value[key];
            if (node[props.childrenKey].length === 0) {
              delete node[props.childrenKey];
            }
          }
        });
      } else if (m.isParent === true && m.expandable === true) {
        localSetExpanded(key, state);
      }
    }
    function localSetExpanded(key, state) {
      let target2 = innerExpanded.value;
      const shouldEmit = props.expanded !== void 0;
      if (shouldEmit === true) {
        target2 = target2.slice();
      }
      if (state) {
        if (props.accordion) {
          if (meta.value[key]) {
            const collapse = [];
            if (meta.value[key].parent) {
              meta.value[key].parent.children.forEach((m) => {
                if (m.key !== key && m.expandable === true) {
                  collapse.push(m.key);
                }
              });
            } else {
              props.nodes.forEach((node) => {
                const k = node[props.nodeKey];
                if (k !== key) {
                  collapse.push(k);
                }
              });
            }
            if (collapse.length !== 0) {
              target2 = target2.filter((k) => collapse.includes(k) === false);
            }
          }
        }
        target2 = target2.concat([key]).filter((key2, index2, self2) => self2.indexOf(key2) === index2);
      } else {
        target2 = target2.filter((k) => k !== key);
      }
      if (shouldEmit === true) {
        emit2("update:expanded", target2);
      } else {
        innerExpanded.value = target2;
      }
    }
    function isTicked(key) {
      return key && meta.value[key] ? meta.value[key].ticked : false;
    }
    function setTicked(keys, state) {
      let target2 = innerTicked.value;
      const shouldEmit = props.ticked !== void 0;
      if (shouldEmit === true) {
        target2 = target2.slice();
      }
      if (state) {
        target2 = target2.concat(keys).filter((key, index2, self2) => self2.indexOf(key) === index2);
      } else {
        target2 = target2.filter((k) => keys.includes(k) === false);
      }
      if (shouldEmit === true) {
        emit2("update:ticked", target2);
      }
    }
    function getSlotScope(node, meta2, key) {
      const scope2 = { tree: proxy, node, key, color: props.color, dark: isDark.value };
      injectProp(
        scope2,
        "expanded",
        () => {
          return meta2.expanded;
        },
        (val) => {
          val !== meta2.expanded && setExpanded(key, val);
        }
      );
      injectProp(
        scope2,
        "ticked",
        () => {
          return meta2.ticked;
        },
        (val) => {
          val !== meta2.ticked && setTicked([key], val);
        }
      );
      return scope2;
    }
    function getChildren(nodes) {
      return (props.filter ? nodes.filter((n) => meta.value[n[props.nodeKey]].matchesFilter) : nodes).map((child) => getNode(child));
    }
    function getNodeMedia(node) {
      if (node.icon !== void 0) {
        return h(QIcon, {
          class: "q-tree__icon q-mr-sm",
          name: node.icon,
          color: node.iconColor
        });
      }
      const src = node.img || node.avatar;
      if (src) {
        return h("img", {
          class: `q-tree__${node.img ? "img" : "avatar"} q-mr-sm`,
          src
        });
      }
    }
    function onShow() {
      emit2("afterShow");
    }
    function onHide() {
      emit2("afterHide");
    }
    function getNode(node) {
      const key = node[props.nodeKey], m = meta.value[key], header = node.header ? slots[`header-${node.header}`] || slots["default-header"] : slots["default-header"];
      const children = m.isParent === true ? getChildren(node[props.childrenKey]) : [];
      const isParent = children.length !== 0 || m.lazy && m.lazy !== "loaded";
      let body = node.body ? slots[`body-${node.body}`] || slots["default-body"] : slots["default-body"];
      const slotScope = header !== void 0 || body !== void 0 ? getSlotScope(node, m, key) : null;
      if (body !== void 0) {
        body = h("div", { class: "q-tree__node-body relative-position" }, [
          h("div", { class: textColorClass.value }, [
            body(slotScope)
          ])
        ]);
      }
      return h("div", {
        key,
        class: `q-tree__node relative-position q-tree__node--${isParent === true ? "parent" : "child"}`
      }, [
        h("div", {
          class: "q-tree__node-header relative-position row no-wrap items-center" + (m.link === true ? " q-tree__node--link q-hoverable q-focusable" : "") + (m.selected === true ? " q-tree__node--selected" : "") + (m.disabled === true ? " q-tree__node--disabled" : ""),
          tabindex: m.link === true ? 0 : -1,
          onClick: (e) => {
            onClick(node, m, e);
          },
          onKeypress(e) {
            if (shouldIgnoreKey(e) !== true) {
              if (e.keyCode === 13) {
                onClick(node, m, e, true);
              } else if (e.keyCode === 32) {
                onExpandClick(node, m, e, true);
              }
            }
          }
        }, [
          h("div", {
            class: "q-focus-helper",
            tabindex: -1,
            ref: (el) => {
              blurTargets[m.key] = el;
            }
          }),
          m.lazy === "loading" ? h(QSpinner, {
            class: "q-tree__spinner",
            color: computedControlColor.value
          }) : isParent === true ? h(QIcon, {
            class: "q-tree__arrow" + (m.expanded === true ? " q-tree__arrow--rotate" : ""),
            name: computedIcon.value,
            onClick(e) {
              onExpandClick(node, m, e);
            }
          }) : null,
          m.hasTicking === true && m.noTick !== true ? h(QCheckbox, {
            class: "q-tree__tickbox",
            modelValue: m.indeterminate === true ? null : m.ticked,
            color: computedControlColor.value,
            dark: isDark.value,
            dense: true,
            keepColor: true,
            disable: m.tickable !== true,
            onKeydown: stopAndPrevent,
            "onUpdate:modelValue": (v) => {
              onTickedClick(m, v);
            }
          }) : null,
          h("div", {
            class: "q-tree__node-header-content col row no-wrap items-center" + (m.selected === true ? selectedColorClass.value : textColorClass.value)
          }, [
            header ? header(slotScope) : [
              getNodeMedia(node),
              h("div", node[props.labelKey])
            ]
          ])
        ]),
        isParent === true ? props.noTransition === true ? h("div", {
          class: "q-tree__node-collapsible" + textColorClass.value,
          key: `${key}__q`
        }, [
          body,
          h("div", {
            class: "q-tree__children" + (m.disabled === true ? " q-tree__node--disabled" : "")
          }, m.expanded ? children : null)
        ]) : h(QSlideTransition, {
          duration: props.duration,
          onShow,
          onHide
        }, () => withDirectives(
          h("div", {
            class: "q-tree__node-collapsible" + textColorClass.value,
            key: `${key}__q`
          }, [
            body,
            h("div", {
              class: "q-tree__children" + (m.disabled === true ? " q-tree__node--disabled" : "")
            }, children)
          ]),
          [[vShow, m.expanded]]
        )) : body
      ]);
    }
    function blur(key) {
      const blurTarget = blurTargets[key];
      blurTarget && blurTarget.focus();
    }
    function onClick(node, meta2, e, keyboard) {
      keyboard !== true && meta2.selectable !== false && blur(meta2.key);
      if (hasSelection.value && meta2.selectable) {
        if (props.noSelectionUnset === false) {
          emit2("update:selected", meta2.key !== props.selected ? meta2.key : null);
        } else if (meta2.key !== props.selected) {
          emit2("update:selected", meta2.key === void 0 ? null : meta2.key);
        }
      } else {
        onExpandClick(node, meta2, e, keyboard);
      }
      if (typeof node.handler === "function") {
        node.handler(node);
      }
    }
    function onExpandClick(node, meta2, e, keyboard) {
      if (e !== void 0) {
        stopAndPrevent(e);
      }
      keyboard !== true && meta2.selectable !== false && blur(meta2.key);
      setExpanded(meta2.key, !meta2.expanded, node, meta2);
    }
    function onTickedClick(meta2, state) {
      if (meta2.indeterminate === true) {
        state = meta2.indeterminateNextState;
      }
      if (meta2.strictTicking) {
        setTicked([meta2.key], state);
      } else if (meta2.leafTicking) {
        const keys = [];
        const travel = (meta3) => {
          if (meta3.isParent) {
            if (state !== true && meta3.noTick !== true && meta3.tickable === true) {
              keys.push(meta3.key);
            }
            if (meta3.leafTicking === true) {
              meta3.children.forEach(travel);
            }
          } else if (meta3.noTick !== true && meta3.tickable === true && (meta3.leafFilteredTicking !== true || meta3.matchesFilter === true)) {
            keys.push(meta3.key);
          }
        };
        travel(meta2);
        setTicked(keys, state);
      }
    }
    props.defaultExpandAll === true && expandAll();
    Object.assign(proxy, {
      getNodeByKey,
      getTickedNodes,
      getExpandedNodes,
      isExpanded,
      collapseAll,
      expandAll,
      setExpanded,
      isTicked,
      setTicked
    });
    return () => {
      const children = getChildren(props.nodes);
      return h(
        "div",
        {
          class: classes.value
        },
        children.length === 0 ? props.filter ? props.noResultsLabel || $q.lang.tree.noResults : props.noNodesLabel || $q.lang.tree.noNodes : children
      );
    };
  }
});
const _hoisted_1$8 = {
  key: 0,
  class: "row q-gutter-xs"
};
const _hoisted_2$3 = /* @__PURE__ */ createBaseVNode("div", { class: "col-auto" }, "ignore:", -1);
const _sfc_main$b = /* @__PURE__ */ defineComponent({
  __name: "ConfigView",
  setup(__props) {
    function fullPath(dir, path) {
      const ret = dir.replace("./", "") + path;
      console.log("fullPath", ret);
      return ret;
    }
    let idx = 0;
    function asTree() {
      const tree = [];
      const entries = Object.entries(appState.configs).sort();
      const keyStack = [{ key: "./", into: tree }];
      entries.forEach(([key, value2]) => {
        let state = keyStack[keyStack.length - 1];
        while (!key.startsWith(state.key)) {
          keyStack.pop();
          state = keyStack[keyStack.length - 1];
        }
        const children = [];
        state.into.push({
          label: key,
          config: { ...value2, parentPath: state.key },
          children,
          id: idx++
        });
        keyStack.push({ key, into: children });
      });
      return tree;
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", null, [
        createVNode(QTree, {
          dense: "",
          nodes: asTree(),
          "node-key": "label"
        }, {
          "default-body": withCtx(({ node }) => {
            var _a, _b, _c, _d, _e;
            return [
              createTextVNode(toDisplayString(node.title) + " ", 1),
              (openBlock(true), createElementBlock(Fragment, null, renderList(node.config.tsconfig, (ts) => {
                return openBlock(), createBlock(QCheckbox, {
                  key: ts,
                  label: ts,
                  "model-value": unref(appState).projects[fullPath(node.label, ts)] ?? false,
                  "onUpdate:modelValue": ($event) => unref(toggleProject)(fullPath(node.label, ts))
                }, null, 8, ["label", "model-value", "onUpdate:modelValue"]);
              }), 128)),
              ((_c = (_b = (_a = node.config) == null ? void 0 : _a.config) == null ? void 0 : _b.ignoreErrCodes) == null ? void 0 : _c.length) > 0 ? (openBlock(), createElementBlock("div", _hoisted_1$8, [
                _hoisted_2$3,
                (openBlock(true), createElementBlock(Fragment, null, renderList((_e = (_d = node.config) == null ? void 0 : _d.config) == null ? void 0 : _e.ignoreErrCodes, (code) => {
                  return openBlock(), createElementBlock("div", {
                    key: code,
                    class: "col-auto"
                  }, toDisplayString(code), 1);
                }), 128))
              ])) : createCommentVNode("", true)
            ];
          }),
          _: 1
        }, 8, ["nodes"])
      ]);
    };
  }
});
const _hoisted_1$7 = ["checked"];
const _sfc_main$a = /* @__PURE__ */ defineComponent({
  __name: "TserrPlugin",
  props: {
    pluginKey: {}
  },
  setup(__props) {
    const props = __props;
    const emitters2 = inject("emitters");
    function toggle(e) {
      emitters2 == null ? void 0 : emitters2.setPlugin(props.pluginKey, e.target.checked);
    }
    const id = `pluginKey-${props.pluginKey}`;
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("label", { for: id }, toDisplayString(unref(appState).plugins[props.pluginKey].displayName), 1),
        createBaseVNode("input", {
          id,
          type: "checkbox",
          checked: unref(appState).plugins[props.pluginKey].active,
          onInput: toggle
        }, null, 40, _hoisted_1$7)
      ]);
    };
  }
});
const _sfc_main$9 = /* @__PURE__ */ defineComponent({
  __name: "PluginManager",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", null, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(Object.keys(unref(appState).plugins), (pluginKey) => {
          return openBlock(), createBlock(_sfc_main$a, {
            key: pluginKey,
            pluginKey
          }, null, 8, ["pluginKey"]);
        }), 128))
      ]);
    };
  }
});
const _hoisted_1$6 = { dense: "" };
const _hoisted_2$2 = { dense: "" };
const _hoisted_3$2 = { dense: "" };
const _hoisted_4$2 = { dense: "" };
const _sfc_main$8 = /* @__PURE__ */ defineComponent({
  __name: "ServerState",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("div", _hoisted_1$6, "socket started: " + toDisplayString(unref(appState).socketStarted), 1),
        createBaseVNode("div", _hoisted_2$2, "connected: " + toDisplayString(unref(appState).connected), 1),
        createBaseVNode("div", _hoisted_3$2, [
          createVNode(_sfc_main$9)
        ]),
        createBaseVNode("div", _hoisted_4$2, [
          createVNode(_sfc_main$b)
        ])
      ]);
    };
  }
});
const QList = createComponent({
  name: "QList",
  props: {
    ...useDarkProps,
    bordered: Boolean,
    dense: Boolean,
    separator: Boolean,
    padding: Boolean,
    tag: {
      type: String,
      default: "div"
    }
  },
  setup(props, { slots }) {
    const vm = getCurrentInstance();
    const isDark = useDark(props, vm.proxy.$q);
    const classes = computed(
      () => "q-list" + (props.bordered === true ? " q-list--bordered" : "") + (props.dense === true ? " q-list--dense" : "") + (props.separator === true ? " q-list--separator" : "") + (isDark.value === true ? " q-list--dark" : "") + (props.padding === true ? " q-list--padding" : "")
    );
    return () => h(props.tag, { class: classes.value }, hSlot(slots.default));
  }
});
const QSplitter = createComponent({
  name: "QSplitter",
  props: {
    ...useDarkProps,
    modelValue: {
      type: Number,
      required: true
    },
    reverse: Boolean,
    unit: {
      type: String,
      default: "%",
      validator: (v) => ["%", "px"].includes(v)
    },
    limits: {
      type: Array,
      validator: (v) => {
        if (v.length !== 2)
          return false;
        if (typeof v[0] !== "number" || typeof v[1] !== "number")
          return false;
        return v[0] >= 0 && v[0] <= v[1];
      }
    },
    emitImmediately: Boolean,
    horizontal: Boolean,
    disable: Boolean,
    beforeClass: [Array, String, Object],
    afterClass: [Array, String, Object],
    separatorClass: [Array, String, Object],
    separatorStyle: [Array, String, Object]
  },
  emits: ["update:modelValue"],
  setup(props, { slots, emit: emit2 }) {
    const { proxy: { $q } } = getCurrentInstance();
    const isDark = useDark(props, $q);
    const rootRef = ref(null);
    const sideRefs = {
      before: ref(null),
      after: ref(null)
    };
    const classes = computed(
      () => `q-splitter no-wrap ${props.horizontal === true ? "q-splitter--horizontal column" : "q-splitter--vertical row"} q-splitter--${props.disable === true ? "disabled" : "workable"}` + (isDark.value === true ? " q-splitter--dark" : "")
    );
    const propName = computed(() => props.horizontal === true ? "height" : "width");
    const side = computed(() => props.reverse !== true ? "before" : "after");
    const computedLimits = computed(() => props.limits !== void 0 ? props.limits : props.unit === "%" ? [10, 90] : [50, Infinity]);
    function getCSSValue(value2) {
      return (props.unit === "%" ? value2 : Math.round(value2)) + props.unit;
    }
    const styles = computed(() => ({
      [side.value]: {
        [propName.value]: getCSSValue(props.modelValue)
      }
    }));
    let __dir, __maxValue, __value, __multiplier, __normalized;
    function pan(evt) {
      if (evt.isFirst === true) {
        const size2 = rootRef.value.getBoundingClientRect()[propName.value];
        __dir = props.horizontal === true ? "up" : "left";
        __maxValue = props.unit === "%" ? 100 : size2;
        __value = Math.min(__maxValue, computedLimits.value[1], Math.max(computedLimits.value[0], props.modelValue));
        __multiplier = (props.reverse !== true ? 1 : -1) * (props.horizontal === true ? 1 : $q.lang.rtl === true ? -1 : 1) * (props.unit === "%" ? size2 === 0 ? 0 : 100 / size2 : 1);
        rootRef.value.classList.add("q-splitter--active");
        return;
      }
      if (evt.isFinal === true) {
        if (__normalized !== props.modelValue) {
          emit2("update:modelValue", __normalized);
        }
        rootRef.value.classList.remove("q-splitter--active");
        return;
      }
      const val = __value + __multiplier * (evt.direction === __dir ? -1 : 1) * evt.distance[props.horizontal === true ? "y" : "x"];
      __normalized = Math.min(__maxValue, computedLimits.value[1], Math.max(computedLimits.value[0], val));
      sideRefs[side.value].value.style[propName.value] = getCSSValue(__normalized);
      if (props.emitImmediately === true && props.modelValue !== __normalized) {
        emit2("update:modelValue", __normalized);
      }
    }
    const sepDirective = computed(() => {
      return [[
        TouchPan,
        pan,
        void 0,
        {
          [props.horizontal === true ? "vertical" : "horizontal"]: true,
          prevent: true,
          stop: true,
          mouse: true,
          mouseAllDir: true
        }
      ]];
    });
    function normalize(val, limits) {
      if (val < limits[0]) {
        emit2("update:modelValue", limits[0]);
      } else if (val > limits[1]) {
        emit2("update:modelValue", limits[1]);
      }
    }
    watch(() => props.modelValue, (v) => {
      normalize(v, computedLimits.value);
    });
    watch(() => props.limits, () => {
      nextTick$1(() => {
        normalize(props.modelValue, computedLimits.value);
      });
    });
    return () => {
      const child = [
        h("div", {
          ref: sideRefs.before,
          class: [
            "q-splitter__panel q-splitter__before" + (props.reverse === true ? " col" : ""),
            props.beforeClass
          ],
          style: styles.value.before
        }, hSlot(slots.before)),
        h("div", {
          class: [
            "q-splitter__separator",
            props.separatorClass
          ],
          style: props.separatorStyle,
          "aria-disabled": props.disable === true ? "true" : void 0
        }, [
          hDir(
            "div",
            { class: "q-splitter__separator-area absolute-full" },
            hSlot(slots.separator),
            "sep",
            props.disable !== true,
            () => sepDirective.value
          )
        ]),
        h("div", {
          ref: sideRefs.after,
          class: [
            "q-splitter__panel q-splitter__after" + (props.reverse === true ? "" : " col"),
            props.afterClass
          ],
          style: styles.value.after
        }, hSlot(slots.after))
      ];
      return h("div", {
        class: classes.value,
        ref: rootRef
      }, hMergeSlot(slots.default, child));
    };
  }
});
const space = h("div", { class: "q-space" });
const QSpace = createComponent({
  name: "QSpace",
  setup() {
    return () => space;
  }
});
const insetMap = {
  true: "inset",
  item: "item-inset",
  "item-thumbnail": "item-thumbnail-inset"
};
const margins = {
  xs: 2,
  sm: 4,
  md: 8,
  lg: 16,
  xl: 24
};
const QSeparator = createComponent({
  name: "QSeparator",
  props: {
    ...useDarkProps,
    spaced: [Boolean, String],
    inset: [Boolean, String],
    vertical: Boolean,
    color: String,
    size: String
  },
  setup(props) {
    const vm = getCurrentInstance();
    const isDark = useDark(props, vm.proxy.$q);
    const orientation = computed(() => props.vertical === true ? "vertical" : "horizontal");
    const orientClass = computed(() => ` q-separator--${orientation.value}`);
    const insetClass = computed(() => props.inset !== false ? `${orientClass.value}-${insetMap[props.inset]}` : "");
    const classes = computed(
      () => `q-separator${orientClass.value}${insetClass.value}` + (props.color !== void 0 ? ` bg-${props.color}` : "") + (isDark.value === true ? " q-separator--dark" : "")
    );
    const style = computed(() => {
      const acc = {};
      if (props.size !== void 0) {
        acc[props.vertical === true ? "width" : "height"] = props.size;
      }
      if (props.spaced !== false) {
        const size2 = props.spaced === true ? `${margins.md}px` : props.spaced in margins ? `${margins[props.spaced]}px` : props.spaced;
        const dir = props.vertical === true ? ["Left", "Right"] : ["Top", "Bottom"];
        acc[`margin${dir[0]}`] = acc[`margin${dir[1]}`] = size2;
      }
      return acc;
    });
    return () => h("hr", {
      class: classes.value,
      style: style.value,
      "aria-orientation": orientation.value
    });
  }
});
const itemGroups = shallowReactive({});
const LINK_PROPS = Object.keys(useRouterLinkProps);
const QExpansionItem = createComponent({
  name: "QExpansionItem",
  props: {
    ...useRouterLinkProps,
    ...useModelToggleProps,
    ...useDarkProps,
    icon: String,
    label: String,
    labelLines: [Number, String],
    caption: String,
    captionLines: [Number, String],
    dense: Boolean,
    toggleAriaLabel: String,
    expandIcon: String,
    expandedIcon: String,
    expandIconClass: [Array, String, Object],
    duration: Number,
    headerInsetLevel: Number,
    contentInsetLevel: Number,
    expandSeparator: Boolean,
    defaultOpened: Boolean,
    hideExpandIcon: Boolean,
    expandIconToggle: Boolean,
    switchToggleSide: Boolean,
    denseToggle: Boolean,
    group: String,
    popup: Boolean,
    headerStyle: [Array, String, Object],
    headerClass: [Array, String, Object]
  },
  emits: [
    ...useModelToggleEmits,
    "click",
    "afterShow",
    "afterHide"
  ],
  setup(props, { slots, emit: emit2 }) {
    const { proxy: { $q } } = getCurrentInstance();
    const isDark = useDark(props, $q);
    const showing = ref(
      props.modelValue !== null ? props.modelValue : props.defaultOpened
    );
    const blurTargetRef = ref(null);
    const targetUid = uid$1();
    const { show, hide, toggle } = useModelToggle({ showing });
    let uniqueId, exitGroup;
    const classes = computed(
      () => `q-expansion-item q-item-type q-expansion-item--${showing.value === true ? "expanded" : "collapsed"} q-expansion-item--${props.popup === true ? "popup" : "standard"}`
    );
    const contentStyle = computed(() => {
      if (props.contentInsetLevel === void 0) {
        return null;
      }
      const dir = $q.lang.rtl === true ? "Right" : "Left";
      return {
        ["padding" + dir]: props.contentInsetLevel * 56 + "px"
      };
    });
    const hasLink = computed(
      () => props.disable !== true && (props.href !== void 0 || props.to !== void 0 && props.to !== null && props.to !== "")
    );
    const linkProps = computed(() => {
      const acc = {};
      LINK_PROPS.forEach((key) => {
        acc[key] = props[key];
      });
      return acc;
    });
    const isClickable = computed(
      () => hasLink.value === true || props.expandIconToggle !== true
    );
    const expansionIcon = computed(() => props.expandedIcon !== void 0 && showing.value === true ? props.expandedIcon : props.expandIcon || $q.iconSet.expansionItem[props.denseToggle === true ? "denseIcon" : "icon"]);
    const activeToggleIcon = computed(
      () => props.disable !== true && (hasLink.value === true || props.expandIconToggle === true)
    );
    const headerSlotScope = computed(() => ({
      expanded: showing.value === true,
      detailsId: props.targetUid,
      toggle,
      show,
      hide
    }));
    const toggleAriaAttrs = computed(() => {
      const toggleAriaLabel = props.toggleAriaLabel !== void 0 ? props.toggleAriaLabel : $q.lang.label[showing.value === true ? "collapse" : "expand"](props.label);
      return {
        role: "button",
        "aria-expanded": showing.value === true ? "true" : "false",
        "aria-controls": targetUid,
        "aria-label": toggleAriaLabel
      };
    });
    watch(() => props.group, (name) => {
      exitGroup !== void 0 && exitGroup();
      name !== void 0 && enterGroup();
    });
    function onHeaderClick(e) {
      hasLink.value !== true && toggle(e);
      emit2("click", e);
    }
    function toggleIconKeyboard(e) {
      e.keyCode === 13 && toggleIcon(e, true);
    }
    function toggleIcon(e, keyboard) {
      keyboard !== true && blurTargetRef.value !== null && blurTargetRef.value.focus();
      toggle(e);
      stopAndPrevent(e);
    }
    function onShow() {
      emit2("afterShow");
    }
    function onHide() {
      emit2("afterHide");
    }
    function enterGroup() {
      if (uniqueId === void 0) {
        uniqueId = uid$1();
      }
      if (showing.value === true) {
        itemGroups[props.group] = uniqueId;
      }
      const show2 = watch(showing, (val) => {
        if (val === true) {
          itemGroups[props.group] = uniqueId;
        } else if (itemGroups[props.group] === uniqueId) {
          delete itemGroups[props.group];
        }
      });
      const group = watch(
        () => itemGroups[props.group],
        (val, oldVal) => {
          if (oldVal === uniqueId && val !== void 0 && val !== uniqueId) {
            hide();
          }
        }
      );
      exitGroup = () => {
        show2();
        group();
        if (itemGroups[props.group] === uniqueId) {
          delete itemGroups[props.group];
        }
        exitGroup = void 0;
      };
    }
    function getToggleIcon() {
      const data = {
        class: [
          `q-focusable relative-position cursor-pointer${props.denseToggle === true && props.switchToggleSide === true ? " items-end" : ""}`,
          props.expandIconClass
        ],
        side: props.switchToggleSide !== true,
        avatar: props.switchToggleSide
      };
      const child = [
        h(QIcon, {
          class: "q-expansion-item__toggle-icon" + (props.expandedIcon === void 0 && showing.value === true ? " q-expansion-item__toggle-icon--rotated" : ""),
          name: expansionIcon.value
        })
      ];
      if (activeToggleIcon.value === true) {
        Object.assign(data, {
          tabindex: 0,
          ...toggleAriaAttrs.value,
          onClick: toggleIcon,
          onKeyup: toggleIconKeyboard
        });
        child.unshift(
          h("div", {
            ref: blurTargetRef,
            class: "q-expansion-item__toggle-focus q-icon q-focus-helper q-focus-helper--rounded",
            tabindex: -1
          })
        );
      }
      return h(QItemSection, data, () => child);
    }
    function getHeaderChild() {
      let child;
      if (slots.header !== void 0) {
        child = [].concat(slots.header(headerSlotScope.value));
      } else {
        child = [
          h(QItemSection, () => [
            h(QItemLabel, { lines: props.labelLines }, () => props.label || ""),
            props.caption ? h(QItemLabel, { lines: props.captionLines, caption: true }, () => props.caption) : null
          ])
        ];
        props.icon && child[props.switchToggleSide === true ? "push" : "unshift"](
          h(QItemSection, {
            side: props.switchToggleSide === true,
            avatar: props.switchToggleSide !== true
          }, () => h(QIcon, { name: props.icon }))
        );
      }
      if (props.disable !== true && props.hideExpandIcon !== true) {
        child[props.switchToggleSide === true ? "unshift" : "push"](
          getToggleIcon()
        );
      }
      return child;
    }
    function getHeader() {
      const data = {
        ref: "item",
        style: props.headerStyle,
        class: props.headerClass,
        dark: isDark.value,
        disable: props.disable,
        dense: props.dense,
        insetLevel: props.headerInsetLevel
      };
      if (isClickable.value === true) {
        data.clickable = true;
        data.onClick = onHeaderClick;
        Object.assign(
          data,
          hasLink.value === true ? linkProps.value : toggleAriaAttrs.value
        );
      }
      return h(QItem, data, getHeaderChild);
    }
    function getTransitionChild() {
      return withDirectives(
        h("div", {
          key: "e-content",
          class: "q-expansion-item__content relative-position",
          style: contentStyle.value,
          id: targetUid
        }, hSlot(slots.default)),
        [[
          vShow,
          showing.value
        ]]
      );
    }
    function getContent() {
      const node = [
        getHeader(),
        h(QSlideTransition, {
          duration: props.duration,
          onShow,
          onHide
        }, getTransitionChild)
      ];
      if (props.expandSeparator === true) {
        node.push(
          h(QSeparator, {
            class: "q-expansion-item__border q-expansion-item__border--top absolute-top",
            dark: isDark.value
          }),
          h(QSeparator, {
            class: "q-expansion-item__border q-expansion-item__border--bottom absolute-bottom",
            dark: isDark.value
          })
        );
      }
      return node;
    }
    props.group !== void 0 && enterGroup();
    onBeforeUnmount(() => {
      exitGroup !== void 0 && exitGroup();
    });
    return () => h("div", { class: classes.value }, [
      h("div", { class: "q-expansion-item__container relative-position" }, getContent())
    ]);
  }
});
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var standalone = { exports: {} };
(function(module, exports) {
  (function(e) {
    module.exports = e();
  })(function() {
    var xe = (e, r) => () => (r || e((r = { exports: {} }).exports, r), r.exports);
    var pt = xe((r0, pu) => {
      var ir = function(e) {
        return e && e.Math == Math && e;
      };
      pu.exports = ir(typeof globalThis == "object" && globalThis) || ir(typeof window == "object" && window) || ir(typeof self == "object" && self) || ir(typeof commonjsGlobal == "object" && commonjsGlobal) || function() {
        return this;
      }() || Function("return this")();
    });
    var Dt = xe((n0, fu) => {
      fu.exports = function(e) {
        try {
          return !!e();
        } catch {
          return true;
        }
      };
    });
    var yt = xe((u0, Du) => {
      var Mo = Dt();
      Du.exports = !Mo(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] != 7;
      });
    });
    var ar = xe((s0, mu) => {
      var Ro = Dt();
      mu.exports = !Ro(function() {
        var e = function() {
        }.bind();
        return typeof e != "function" || e.hasOwnProperty("prototype");
      });
    });
    var At = xe((i0, du) => {
      var $o = ar(), or = Function.prototype.call;
      du.exports = $o ? or.bind(or) : function() {
        return or.apply(or, arguments);
      };
    });
    var vu = xe((hu) => {
      var gu = {}.propertyIsEnumerable, yu = Object.getOwnPropertyDescriptor, Vo = yu && !gu.call({ 1: 2 }, 1);
      hu.f = Vo ? function(r) {
        var t = yu(this, r);
        return !!t && t.enumerable;
      } : gu;
    });
    var lr = xe((o0, Cu) => {
      Cu.exports = function(e, r) {
        return { enumerable: !(e & 1), configurable: !(e & 2), writable: !(e & 4), value: r };
      };
    });
    var mt = xe((l0, Au) => {
      var Eu = ar(), Fu = Function.prototype, Wr = Fu.call, Wo = Eu && Fu.bind.bind(Wr, Wr);
      Au.exports = Eu ? Wo : function(e) {
        return function() {
          return Wr.apply(e, arguments);
        };
      };
    });
    var Vt = xe((c0, xu) => {
      var Su = mt(), Ho = Su({}.toString), Go = Su("".slice);
      xu.exports = function(e) {
        return Go(Ho(e), 8, -1);
      };
    });
    var Tu = xe((p0, bu) => {
      var Uo = mt(), Jo = Dt(), zo = Vt(), Hr = Object, Xo = Uo("".split);
      bu.exports = Jo(function() {
        return !Hr("z").propertyIsEnumerable(0);
      }) ? function(e) {
        return zo(e) == "String" ? Xo(e, "") : Hr(e);
      } : Hr;
    });
    var cr = xe((f0, Bu) => {
      Bu.exports = function(e) {
        return e == null;
      };
    });
    var Gr = xe((D0, Nu) => {
      var Ko = cr(), Yo = TypeError;
      Nu.exports = function(e) {
        if (Ko(e))
          throw Yo("Can't call method on " + e);
        return e;
      };
    });
    var pr = xe((m0, wu) => {
      var Qo = Tu(), Zo = Gr();
      wu.exports = function(e) {
        return Qo(Zo(e));
      };
    });
    var Jr = xe((d0, _u) => {
      var Ur = typeof document == "object" && document.all, el = typeof Ur > "u" && Ur !== void 0;
      _u.exports = { all: Ur, IS_HTMLDDA: el };
    });
    var ot = xe((g0, Iu) => {
      var Pu = Jr(), tl = Pu.all;
      Iu.exports = Pu.IS_HTMLDDA ? function(e) {
        return typeof e == "function" || e === tl;
      } : function(e) {
        return typeof e == "function";
      };
    });
    var St = xe((y0, Ou) => {
      var ku = ot(), Lu = Jr(), rl = Lu.all;
      Ou.exports = Lu.IS_HTMLDDA ? function(e) {
        return typeof e == "object" ? e !== null : ku(e) || e === rl;
      } : function(e) {
        return typeof e == "object" ? e !== null : ku(e);
      };
    });
    var Wt = xe((h0, ju) => {
      var zr = pt(), nl = ot(), ul = function(e) {
        return nl(e) ? e : void 0;
      };
      ju.exports = function(e, r) {
        return arguments.length < 2 ? ul(zr[e]) : zr[e] && zr[e][r];
      };
    });
    var Xr = xe((v0, qu) => {
      var sl = mt();
      qu.exports = sl({}.isPrototypeOf);
    });
    var Ru = xe((C0, Mu) => {
      var il = Wt();
      Mu.exports = il("navigator", "userAgent") || "";
    });
    var Ju = xe((E0, Uu) => {
      var Gu = pt(), Kr = Ru(), $u = Gu.process, Vu = Gu.Deno, Wu = $u && $u.versions || Vu && Vu.version, Hu = Wu && Wu.v8, dt, fr;
      Hu && (dt = Hu.split("."), fr = dt[0] > 0 && dt[0] < 4 ? 1 : +(dt[0] + dt[1]));
      !fr && Kr && (dt = Kr.match(/Edge\/(\d+)/), (!dt || dt[1] >= 74) && (dt = Kr.match(/Chrome\/(\d+)/), dt && (fr = +dt[1])));
      Uu.exports = fr;
    });
    var Yr = xe((F0, Xu) => {
      var zu = Ju(), al = Dt();
      Xu.exports = !!Object.getOwnPropertySymbols && !al(function() {
        var e = Symbol();
        return !String(e) || !(Object(e) instanceof Symbol) || !Symbol.sham && zu && zu < 41;
      });
    });
    var Qr = xe((A0, Ku) => {
      var ol = Yr();
      Ku.exports = ol && !Symbol.sham && typeof Symbol.iterator == "symbol";
    });
    var Zr = xe((S0, Yu) => {
      var ll = Wt(), cl = ot(), pl = Xr(), fl = Qr(), Dl = Object;
      Yu.exports = fl ? function(e) {
        return typeof e == "symbol";
      } : function(e) {
        var r = ll("Symbol");
        return cl(r) && pl(r.prototype, Dl(e));
      };
    });
    var Dr = xe((x0, Qu) => {
      var ml = String;
      Qu.exports = function(e) {
        try {
          return ml(e);
        } catch {
          return "Object";
        }
      };
    });
    var Ht = xe((b0, Zu) => {
      var dl = ot(), gl = Dr(), yl = TypeError;
      Zu.exports = function(e) {
        if (dl(e))
          return e;
        throw yl(gl(e) + " is not a function");
      };
    });
    var mr = xe((T0, es) => {
      var hl = Ht(), vl = cr();
      es.exports = function(e, r) {
        var t = e[r];
        return vl(t) ? void 0 : hl(t);
      };
    });
    var rs = xe((B0, ts) => {
      var en = At(), tn = ot(), rn = St(), Cl = TypeError;
      ts.exports = function(e, r) {
        var t, s;
        if (r === "string" && tn(t = e.toString) && !rn(s = en(t, e)) || tn(t = e.valueOf) && !rn(s = en(t, e)) || r !== "string" && tn(t = e.toString) && !rn(s = en(t, e)))
          return s;
        throw Cl("Can't convert object to primitive value");
      };
    });
    var us = xe((N0, ns) => {
      ns.exports = false;
    });
    var dr = xe((w0, is) => {
      var ss = pt(), El = Object.defineProperty;
      is.exports = function(e, r) {
        try {
          El(ss, e, { value: r, configurable: true, writable: true });
        } catch {
          ss[e] = r;
        }
        return r;
      };
    });
    var gr = xe((_0, os) => {
      var Fl = pt(), Al = dr(), as = "__core-js_shared__", Sl = Fl[as] || Al(as, {});
      os.exports = Sl;
    });
    var nn = xe((P0, cs) => {
      var xl = us(), ls = gr();
      (cs.exports = function(e, r) {
        return ls[e] || (ls[e] = r !== void 0 ? r : {});
      })("versions", []).push({ version: "3.26.1", mode: xl ? "pure" : "global", copyright: "© 2014-2022 Denis Pushkarev (zloirock.ru)", license: "https://github.com/zloirock/core-js/blob/v3.26.1/LICENSE", source: "https://github.com/zloirock/core-js" });
    });
    var yr = xe((I0, ps) => {
      var bl = Gr(), Tl = Object;
      ps.exports = function(e) {
        return Tl(bl(e));
      };
    });
    var Ct = xe((k0, fs) => {
      var Bl = mt(), Nl = yr(), wl = Bl({}.hasOwnProperty);
      fs.exports = Object.hasOwn || function(r, t) {
        return wl(Nl(r), t);
      };
    });
    var un = xe((L0, Ds) => {
      var _l = mt(), Pl = 0, Il = Math.random(), kl = _l(1 .toString);
      Ds.exports = function(e) {
        return "Symbol(" + (e === void 0 ? "" : e) + ")_" + kl(++Pl + Il, 36);
      };
    });
    var bt = xe((O0, hs) => {
      var Ll = pt(), Ol = nn(), ms = Ct(), jl = un(), ds = Yr(), ys = Qr(), It = Ol("wks"), xt = Ll.Symbol, gs = xt && xt.for, ql = ys ? xt : xt && xt.withoutSetter || jl;
      hs.exports = function(e) {
        if (!ms(It, e) || !(ds || typeof It[e] == "string")) {
          var r = "Symbol." + e;
          ds && ms(xt, e) ? It[e] = xt[e] : ys && gs ? It[e] = gs(r) : It[e] = ql(r);
        }
        return It[e];
      };
    });
    var Fs = xe((j0, Es) => {
      var Ml = At(), vs = St(), Cs = Zr(), Rl = mr(), $l = rs(), Vl = bt(), Wl = TypeError, Hl = Vl("toPrimitive");
      Es.exports = function(e, r) {
        if (!vs(e) || Cs(e))
          return e;
        var t = Rl(e, Hl), s;
        if (t) {
          if (r === void 0 && (r = "default"), s = Ml(t, e, r), !vs(s) || Cs(s))
            return s;
          throw Wl("Can't convert object to primitive value");
        }
        return r === void 0 && (r = "number"), $l(e, r);
      };
    });
    var hr = xe((q0, As) => {
      var Gl = Fs(), Ul = Zr();
      As.exports = function(e) {
        var r = Gl(e, "string");
        return Ul(r) ? r : r + "";
      };
    });
    var bs = xe((M0, xs) => {
      var Jl = pt(), Ss = St(), sn = Jl.document, zl = Ss(sn) && Ss(sn.createElement);
      xs.exports = function(e) {
        return zl ? sn.createElement(e) : {};
      };
    });
    var an = xe((R0, Ts) => {
      var Xl = yt(), Kl = Dt(), Yl = bs();
      Ts.exports = !Xl && !Kl(function() {
        return Object.defineProperty(Yl("div"), "a", { get: function() {
          return 7;
        } }).a != 7;
      });
    });
    var on2 = xe((Ns) => {
      var Ql = yt(), Zl = At(), ec = vu(), tc = lr(), rc = pr(), nc = hr(), uc = Ct(), sc = an(), Bs = Object.getOwnPropertyDescriptor;
      Ns.f = Ql ? Bs : function(r, t) {
        if (r = rc(r), t = nc(t), sc)
          try {
            return Bs(r, t);
          } catch {
          }
        if (uc(r, t))
          return tc(!Zl(ec.f, r, t), r[t]);
      };
    });
    var _s = xe((V0, ws) => {
      var ic = yt(), ac = Dt();
      ws.exports = ic && ac(function() {
        return Object.defineProperty(function() {
        }, "prototype", { value: 42, writable: false }).prototype != 42;
      });
    });
    var Tt = xe((W0, Ps) => {
      var oc = St(), lc = String, cc = TypeError;
      Ps.exports = function(e) {
        if (oc(e))
          return e;
        throw cc(lc(e) + " is not an object");
      };
    });
    var kt = xe((ks) => {
      var pc = yt(), fc = an(), Dc = _s(), vr = Tt(), Is = hr(), mc = TypeError, ln = Object.defineProperty, dc = Object.getOwnPropertyDescriptor, cn = "enumerable", pn = "configurable", fn = "writable";
      ks.f = pc ? Dc ? function(r, t, s) {
        if (vr(r), t = Is(t), vr(s), typeof r == "function" && t === "prototype" && "value" in s && fn in s && !s[fn]) {
          var a = dc(r, t);
          a && a[fn] && (r[t] = s.value, s = { configurable: pn in s ? s[pn] : a[pn], enumerable: cn in s ? s[cn] : a[cn], writable: false });
        }
        return ln(r, t, s);
      } : ln : function(r, t, s) {
        if (vr(r), t = Is(t), vr(s), fc)
          try {
            return ln(r, t, s);
          } catch {
          }
        if ("get" in s || "set" in s)
          throw mc("Accessors not supported");
        return "value" in s && (r[t] = s.value), r;
      };
    });
    var Dn = xe((G0, Ls) => {
      var gc = yt(), yc = kt(), hc = lr();
      Ls.exports = gc ? function(e, r, t) {
        return yc.f(e, r, hc(1, t));
      } : function(e, r, t) {
        return e[r] = t, e;
      };
    });
    var qs = xe((U0, js) => {
      var mn = yt(), vc = Ct(), Os = Function.prototype, Cc = mn && Object.getOwnPropertyDescriptor, dn = vc(Os, "name"), Ec = dn && function() {
      }.name === "something", Fc = dn && (!mn || mn && Cc(Os, "name").configurable);
      js.exports = { EXISTS: dn, PROPER: Ec, CONFIGURABLE: Fc };
    });
    var yn = xe((J0, Ms) => {
      var Ac = mt(), Sc = ot(), gn = gr(), xc = Ac(Function.toString);
      Sc(gn.inspectSource) || (gn.inspectSource = function(e) {
        return xc(e);
      });
      Ms.exports = gn.inspectSource;
    });
    var Vs = xe((z0, $s) => {
      var bc = pt(), Tc = ot(), Rs = bc.WeakMap;
      $s.exports = Tc(Rs) && /native code/.test(String(Rs));
    });
    var Gs = xe((X0, Hs) => {
      var Bc = nn(), Nc = un(), Ws = Bc("keys");
      Hs.exports = function(e) {
        return Ws[e] || (Ws[e] = Nc(e));
      };
    });
    var hn = xe((K0, Us) => {
      Us.exports = {};
    });
    var Ks = xe((Y0, Xs) => {
      var wc = Vs(), zs = pt(), _c = St(), Pc = Dn(), vn = Ct(), Cn = gr(), Ic = Gs(), kc = hn(), Js = "Object already initialized", En = zs.TypeError, Lc = zs.WeakMap, Cr, Gt, Er, Oc = function(e) {
        return Er(e) ? Gt(e) : Cr(e, {});
      }, jc = function(e) {
        return function(r) {
          var t;
          if (!_c(r) || (t = Gt(r)).type !== e)
            throw En("Incompatible receiver, " + e + " required");
          return t;
        };
      };
      wc || Cn.state ? (gt = Cn.state || (Cn.state = new Lc()), gt.get = gt.get, gt.has = gt.has, gt.set = gt.set, Cr = function(e, r) {
        if (gt.has(e))
          throw En(Js);
        return r.facade = e, gt.set(e, r), r;
      }, Gt = function(e) {
        return gt.get(e) || {};
      }, Er = function(e) {
        return gt.has(e);
      }) : (Bt = Ic("state"), kc[Bt] = true, Cr = function(e, r) {
        if (vn(e, Bt))
          throw En(Js);
        return r.facade = e, Pc(e, Bt, r), r;
      }, Gt = function(e) {
        return vn(e, Bt) ? e[Bt] : {};
      }, Er = function(e) {
        return vn(e, Bt);
      });
      var gt, Bt;
      Xs.exports = { set: Cr, get: Gt, has: Er, enforce: Oc, getterFor: jc };
    });
    var An = xe((Q0, Qs) => {
      var qc = Dt(), Mc = ot(), Fr = Ct(), Fn = yt(), Rc = qs().CONFIGURABLE, $c = yn(), Ys = Ks(), Vc = Ys.enforce, Wc = Ys.get, Ar = Object.defineProperty, Hc = Fn && !qc(function() {
        return Ar(function() {
        }, "length", { value: 8 }).length !== 8;
      }), Gc = String(String).split("String"), Uc = Qs.exports = function(e, r, t) {
        String(r).slice(0, 7) === "Symbol(" && (r = "[" + String(r).replace(/^Symbol\(([^)]*)\)/, "$1") + "]"), t && t.getter && (r = "get " + r), t && t.setter && (r = "set " + r), (!Fr(e, "name") || Rc && e.name !== r) && (Fn ? Ar(e, "name", { value: r, configurable: true }) : e.name = r), Hc && t && Fr(t, "arity") && e.length !== t.arity && Ar(e, "length", { value: t.arity });
        try {
          t && Fr(t, "constructor") && t.constructor ? Fn && Ar(e, "prototype", { writable: false }) : e.prototype && (e.prototype = void 0);
        } catch {
        }
        var s = Vc(e);
        return Fr(s, "source") || (s.source = Gc.join(typeof r == "string" ? r : "")), e;
      };
      Function.prototype.toString = Uc(function() {
        return Mc(this) && Wc(this).source || $c(this);
      }, "toString");
    });
    var ei = xe((Z0, Zs) => {
      var Jc = ot(), zc = kt(), Xc = An(), Kc = dr();
      Zs.exports = function(e, r, t, s) {
        s || (s = {});
        var a = s.enumerable, n = s.name !== void 0 ? s.name : r;
        if (Jc(t) && Xc(t, n, s), s.global)
          a ? e[r] = t : Kc(r, t);
        else {
          try {
            s.unsafe ? e[r] && (a = true) : delete e[r];
          } catch {
          }
          a ? e[r] = t : zc.f(e, r, { value: t, enumerable: false, configurable: !s.nonConfigurable, writable: !s.nonWritable });
        }
        return e;
      };
    });
    var ri = xe((ey, ti) => {
      var Yc = Math.ceil, Qc = Math.floor;
      ti.exports = Math.trunc || function(r) {
        var t = +r;
        return (t > 0 ? Qc : Yc)(t);
      };
    });
    var Sr = xe((ty, ni) => {
      var Zc = ri();
      ni.exports = function(e) {
        var r = +e;
        return r !== r || r === 0 ? 0 : Zc(r);
      };
    });
    var si = xe((ry, ui) => {
      var ep = Sr(), tp = Math.max, rp = Math.min;
      ui.exports = function(e, r) {
        var t = ep(e);
        return t < 0 ? tp(t + r, 0) : rp(t, r);
      };
    });
    var ai = xe((ny, ii) => {
      var np = Sr(), up = Math.min;
      ii.exports = function(e) {
        return e > 0 ? up(np(e), 9007199254740991) : 0;
      };
    });
    var Lt = xe((uy, oi) => {
      var sp = ai();
      oi.exports = function(e) {
        return sp(e.length);
      };
    });
    var pi = xe((sy, ci) => {
      var ip = pr(), ap = si(), op = Lt(), li = function(e) {
        return function(r, t, s) {
          var a = ip(r), n = op(a), u = ap(s, n), i2;
          if (e && t != t) {
            for (; n > u; )
              if (i2 = a[u++], i2 != i2)
                return true;
          } else
            for (; n > u; u++)
              if ((e || u in a) && a[u] === t)
                return e || u || 0;
          return !e && -1;
        };
      };
      ci.exports = { includes: li(true), indexOf: li(false) };
    });
    var mi = xe((iy, Di) => {
      var lp = mt(), Sn = Ct(), cp = pr(), pp = pi().indexOf, fp = hn(), fi = lp([].push);
      Di.exports = function(e, r) {
        var t = cp(e), s = 0, a = [], n;
        for (n in t)
          !Sn(fp, n) && Sn(t, n) && fi(a, n);
        for (; r.length > s; )
          Sn(t, n = r[s++]) && (~pp(a, n) || fi(a, n));
        return a;
      };
    });
    var gi = xe((ay, di) => {
      di.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
    });
    var hi = xe((yi) => {
      var Dp = mi(), mp = gi(), dp = mp.concat("length", "prototype");
      yi.f = Object.getOwnPropertyNames || function(r) {
        return Dp(r, dp);
      };
    });
    var Ci = xe((vi) => {
      vi.f = Object.getOwnPropertySymbols;
    });
    var Fi = xe((cy, Ei) => {
      var gp = Wt(), yp = mt(), hp = hi(), vp = Ci(), Cp = Tt(), Ep = yp([].concat);
      Ei.exports = gp("Reflect", "ownKeys") || function(r) {
        var t = hp.f(Cp(r)), s = vp.f;
        return s ? Ep(t, s(r)) : t;
      };
    });
    var xi = xe((py, Si) => {
      var Ai = Ct(), Fp = Fi(), Ap = on2(), Sp = kt();
      Si.exports = function(e, r, t) {
        for (var s = Fp(r), a = Sp.f, n = Ap.f, u = 0; u < s.length; u++) {
          var i2 = s[u];
          !Ai(e, i2) && !(t && Ai(t, i2)) && a(e, i2, n(r, i2));
        }
      };
    });
    var Ti = xe((fy, bi) => {
      var xp = Dt(), bp = ot(), Tp = /#|\.prototype\./, Ut = function(e, r) {
        var t = Np[Bp(e)];
        return t == _p ? true : t == wp ? false : bp(r) ? xp(r) : !!r;
      }, Bp = Ut.normalize = function(e) {
        return String(e).replace(Tp, ".").toLowerCase();
      }, Np = Ut.data = {}, wp = Ut.NATIVE = "N", _p = Ut.POLYFILL = "P";
      bi.exports = Ut;
    });
    var Jt = xe((Dy, Bi) => {
      var xn = pt(), Pp = on2().f, Ip = Dn(), kp = ei(), Lp = dr(), Op = xi(), jp = Ti();
      Bi.exports = function(e, r) {
        var t = e.target, s = e.global, a = e.stat, n, u, i2, l, p2, y;
        if (s ? u = xn : a ? u = xn[t] || Lp(t, {}) : u = (xn[t] || {}).prototype, u)
          for (i2 in r) {
            if (p2 = r[i2], e.dontCallGetSet ? (y = Pp(u, i2), l = y && y.value) : l = u[i2], n = jp(s ? i2 : t + (a ? "." : "#") + i2, e.forced), !n && l !== void 0) {
              if (typeof p2 == typeof l)
                continue;
              Op(p2, l);
            }
            (e.sham || l && l.sham) && Ip(p2, "sham", true), kp(u, i2, p2, e);
          }
      };
    });
    var bn = xe((my, Ni) => {
      var qp = Vt();
      Ni.exports = Array.isArray || function(r) {
        return qp(r) == "Array";
      };
    });
    var _i = xe((dy, wi) => {
      var Mp = TypeError, Rp = 9007199254740991;
      wi.exports = function(e) {
        if (e > Rp)
          throw Mp("Maximum allowed index exceeded");
        return e;
      };
    });
    var Ii = xe((gy, Pi) => {
      var $p = Vt(), Vp = mt();
      Pi.exports = function(e) {
        if ($p(e) === "Function")
          return Vp(e);
      };
    });
    var Tn = xe((yy, Li) => {
      var ki = Ii(), Wp = Ht(), Hp = ar(), Gp = ki(ki.bind);
      Li.exports = function(e, r) {
        return Wp(e), r === void 0 ? e : Hp ? Gp(e, r) : function() {
          return e.apply(r, arguments);
        };
      };
    });
    var Bn = xe((hy, ji) => {
      var Up = bn(), Jp = Lt(), zp = _i(), Xp = Tn(), Oi = function(e, r, t, s, a, n, u, i2) {
        for (var l = a, p2 = 0, y = u ? Xp(u, i2) : false, h2, g; p2 < s; )
          p2 in t && (h2 = y ? y(t[p2], p2, r) : t[p2], n > 0 && Up(h2) ? (g = Jp(h2), l = Oi(e, r, h2, g, l, n - 1) - 1) : (zp(l + 1), e[l] = h2), l++), p2++;
        return l;
      };
      ji.exports = Oi;
    });
    var Ri = xe((vy, Mi) => {
      var Kp = bt(), Yp = Kp("toStringTag"), qi = {};
      qi[Yp] = "z";
      Mi.exports = String(qi) === "[object z]";
    });
    var Nn = xe((Cy, $i) => {
      var Qp = Ri(), Zp = ot(), xr = Vt(), ef = bt(), tf = ef("toStringTag"), rf = Object, nf = xr(function() {
        return arguments;
      }()) == "Arguments", uf = function(e, r) {
        try {
          return e[r];
        } catch {
        }
      };
      $i.exports = Qp ? xr : function(e) {
        var r, t, s;
        return e === void 0 ? "Undefined" : e === null ? "Null" : typeof (t = uf(r = rf(e), tf)) == "string" ? t : nf ? xr(r) : (s = xr(r)) == "Object" && Zp(r.callee) ? "Arguments" : s;
      };
    });
    var Ji = xe((Ey, Ui) => {
      var sf = mt(), af = Dt(), Vi = ot(), of = Nn(), lf = Wt(), cf = yn(), Wi = function() {
      }, pf = [], Hi = lf("Reflect", "construct"), wn = /^\s*(?:class|function)\b/, ff = sf(wn.exec), Df = !wn.exec(Wi), zt = function(r) {
        if (!Vi(r))
          return false;
        try {
          return Hi(Wi, pf, r), true;
        } catch {
          return false;
        }
      }, Gi = function(r) {
        if (!Vi(r))
          return false;
        switch (of(r)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return Df || !!ff(wn, cf(r));
        } catch {
          return true;
        }
      };
      Gi.sham = true;
      Ui.exports = !Hi || af(function() {
        var e;
        return zt(zt.call) || !zt(Object) || !zt(function() {
          e = true;
        }) || e;
      }) ? Gi : zt;
    });
    var Yi = xe((Fy, Ki) => {
      var zi = bn(), mf = Ji(), df = St(), gf = bt(), yf = gf("species"), Xi = Array;
      Ki.exports = function(e) {
        var r;
        return zi(e) && (r = e.constructor, mf(r) && (r === Xi || zi(r.prototype)) ? r = void 0 : df(r) && (r = r[yf], r === null && (r = void 0))), r === void 0 ? Xi : r;
      };
    });
    var _n = xe((Ay, Qi) => {
      var hf = Yi();
      Qi.exports = function(e, r) {
        return new (hf(e))(r === 0 ? 0 : r);
      };
    });
    var Zi = xe(() => {
      var vf = Jt(), Cf = Bn(), Ef = Ht(), Ff = yr(), Af = Lt(), Sf = _n();
      vf({ target: "Array", proto: true }, { flatMap: function(r) {
        var t = Ff(this), s = Af(t), a;
        return Ef(r), a = Sf(t, 0), a.length = Cf(a, t, t, s, 0, 1, r, arguments.length > 1 ? arguments[1] : void 0), a;
      } });
    });
    var Pn = xe((by, ea) => {
      ea.exports = {};
    });
    var ra = xe((Ty, ta) => {
      var xf = bt(), bf = Pn(), Tf = xf("iterator"), Bf = Array.prototype;
      ta.exports = function(e) {
        return e !== void 0 && (bf.Array === e || Bf[Tf] === e);
      };
    });
    var In = xe((By, ua) => {
      var Nf = Nn(), na = mr(), wf = cr(), _f = Pn(), Pf = bt(), If = Pf("iterator");
      ua.exports = function(e) {
        if (!wf(e))
          return na(e, If) || na(e, "@@iterator") || _f[Nf(e)];
      };
    });
    var ia = xe((Ny, sa) => {
      var kf = At(), Lf = Ht(), Of = Tt(), jf = Dr(), qf = In(), Mf = TypeError;
      sa.exports = function(e, r) {
        var t = arguments.length < 2 ? qf(e) : r;
        if (Lf(t))
          return Of(kf(t, e));
        throw Mf(jf(e) + " is not iterable");
      };
    });
    var la = xe((wy, oa) => {
      var Rf = At(), aa = Tt(), $f = mr();
      oa.exports = function(e, r, t) {
        var s, a;
        aa(e);
        try {
          if (s = $f(e, "return"), !s) {
            if (r === "throw")
              throw t;
            return t;
          }
          s = Rf(s, e);
        } catch (n) {
          a = true, s = n;
        }
        if (r === "throw")
          throw t;
        if (a)
          throw s;
        return aa(s), t;
      };
    });
    var ma = xe((_y, Da) => {
      var Vf = Tn(), Wf = At(), Hf = Tt(), Gf = Dr(), Uf = ra(), Jf = Lt(), ca = Xr(), zf = ia(), Xf = In(), pa = la(), Kf = TypeError, br = function(e, r) {
        this.stopped = e, this.result = r;
      }, fa = br.prototype;
      Da.exports = function(e, r, t) {
        var s = t && t.that, a = !!(t && t.AS_ENTRIES), n = !!(t && t.IS_RECORD), u = !!(t && t.IS_ITERATOR), i2 = !!(t && t.INTERRUPTED), l = Vf(r, s), p2, y, h2, g, c, f, F, _ = function(E) {
          return p2 && pa(p2, "normal", E), new br(true, E);
        }, w = function(E) {
          return a ? (Hf(E), i2 ? l(E[0], E[1], _) : l(E[0], E[1])) : i2 ? l(E, _) : l(E);
        };
        if (n)
          p2 = e.iterator;
        else if (u)
          p2 = e;
        else {
          if (y = Xf(e), !y)
            throw Kf(Gf(e) + " is not iterable");
          if (Uf(y)) {
            for (h2 = 0, g = Jf(e); g > h2; h2++)
              if (c = w(e[h2]), c && ca(fa, c))
                return c;
            return new br(false);
          }
          p2 = zf(e, y);
        }
        for (f = n ? e.next : p2.next; !(F = Wf(f, p2)).done; ) {
          try {
            c = w(F.value);
          } catch (E) {
            pa(p2, "throw", E);
          }
          if (typeof c == "object" && c && ca(fa, c))
            return c;
        }
        return new br(false);
      };
    });
    var ga = xe((Py, da) => {
      var Yf = hr(), Qf = kt(), Zf = lr();
      da.exports = function(e, r, t) {
        var s = Yf(r);
        s in e ? Qf.f(e, s, Zf(0, t)) : e[s] = t;
      };
    });
    var ya = xe(() => {
      var eD = Jt(), tD = ma(), rD = ga();
      eD({ target: "Object", stat: true }, { fromEntries: function(r) {
        var t = {};
        return tD(r, function(s, a) {
          rD(t, s, a);
        }, { AS_ENTRIES: true }), t;
      } });
    });
    var Ca = xe((Ly, va) => {
      var ha = An(), nD = kt();
      va.exports = function(e, r, t) {
        return t.get && ha(t.get, r, { getter: true }), t.set && ha(t.set, r, { setter: true }), nD.f(e, r, t);
      };
    });
    var Fa = xe((Oy, Ea) => {
      var uD = Tt();
      Ea.exports = function() {
        var e = uD(this), r = "";
        return e.hasIndices && (r += "d"), e.global && (r += "g"), e.ignoreCase && (r += "i"), e.multiline && (r += "m"), e.dotAll && (r += "s"), e.unicode && (r += "u"), e.unicodeSets && (r += "v"), e.sticky && (r += "y"), r;
      };
    });
    var xa = xe(() => {
      var sD = pt(), iD = yt(), aD = Ca(), oD = Fa(), lD = Dt(), Aa = sD.RegExp, Sa = Aa.prototype, cD = iD && lD(function() {
        var e = true;
        try {
          Aa(".", "d");
        } catch {
          e = false;
        }
        var r = {}, t = "", s = e ? "dgimsy" : "gimsy", a = function(l, p2) {
          Object.defineProperty(r, l, { get: function() {
            return t += p2, true;
          } });
        }, n = { dotAll: "s", global: "g", ignoreCase: "i", multiline: "m", sticky: "y" };
        e && (n.hasIndices = "d");
        for (var u in n)
          a(u, n[u]);
        var i2 = Object.getOwnPropertyDescriptor(Sa, "flags").get.call(r);
        return i2 !== s || t !== s;
      });
      cD && aD(Sa, "flags", { configurable: true, get: oD });
    });
    var ba = xe(() => {
      var pD = Jt(), kn = pt();
      pD({ global: true, forced: kn.globalThis !== kn }, { globalThis: kn });
    });
    var Ta = xe(() => {
      ba();
    });
    var Ba = xe(() => {
      var fD = Jt(), DD = Bn(), mD = yr(), dD = Lt(), gD = Sr(), yD = _n();
      fD({ target: "Array", proto: true }, { flat: function() {
        var r = arguments.length ? arguments[0] : void 0, t = mD(this), s = dD(t), a = yD(t, 0);
        return a.length = DD(a, t, t, s, 0, r === void 0 ? 1 : gD(r)), a;
      } });
    });
    var e0 = xe((Uy, jo) => {
      var hD = ["cliName", "cliCategory", "cliDescription"], vD = ["_"], CD = ["languageId"];
      function Hn(e, r) {
        if (e == null)
          return {};
        var t = ED(e, r), s, a;
        if (Object.getOwnPropertySymbols) {
          var n = Object.getOwnPropertySymbols(e);
          for (a = 0; a < n.length; a++)
            s = n[a], !(r.indexOf(s) >= 0) && Object.prototype.propertyIsEnumerable.call(e, s) && (t[s] = e[s]);
        }
        return t;
      }
      function ED(e, r) {
        if (e == null)
          return {};
        var t = {}, s = Object.keys(e), a, n;
        for (n = 0; n < s.length; n++)
          a = s[n], !(r.indexOf(a) >= 0) && (t[a] = e[a]);
        return t;
      }
      Zi();
      ya();
      xa();
      Ta();
      Ba();
      var FD = Object.create, _r = Object.defineProperty, AD = Object.getOwnPropertyDescriptor, Gn = Object.getOwnPropertyNames, SD = Object.getPrototypeOf, xD = Object.prototype.hasOwnProperty, ht = (e, r) => function() {
        return e && (r = (0, e[Gn(e)[0]])(e = 0)), r;
      }, te = (e, r) => function() {
        return r || (0, e[Gn(e)[0]])((r = { exports: {} }).exports, r), r.exports;
      }, Kt = (e, r) => {
        for (var t in r)
          _r(e, t, { get: r[t], enumerable: true });
      }, Pa = (e, r, t, s) => {
        if (r && typeof r == "object" || typeof r == "function")
          for (let a of Gn(r))
            !xD.call(e, a) && a !== t && _r(e, a, { get: () => r[a], enumerable: !(s = AD(r, a)) || s.enumerable });
        return e;
      }, bD = (e, r, t) => (t = e != null ? FD(SD(e)) : {}, Pa(r || !e || !e.__esModule ? _r(t, "default", { value: e, enumerable: true }) : t, e)), ft = (e) => Pa(_r({}, "__esModule", { value: true }), e), wt, ne = ht({ "<define:process>"() {
        wt = { env: {}, argv: [] };
      } }), Ia = te({ "package.json"(e, r) {
        r.exports = { version: "2.8.8" };
      } }), TD = te({ "node_modules/diff/lib/diff/base.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true }), e.default = r;
        function r() {
        }
        r.prototype = { diff: function(n, u) {
          var i2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, l = i2.callback;
          typeof i2 == "function" && (l = i2, i2 = {}), this.options = i2;
          var p2 = this;
          function y(N) {
            return l ? (setTimeout(function() {
              l(void 0, N);
            }, 0), true) : N;
          }
          n = this.castInput(n), u = this.castInput(u), n = this.removeEmpty(this.tokenize(n)), u = this.removeEmpty(this.tokenize(u));
          var h2 = u.length, g = n.length, c = 1, f = h2 + g, F = [{ newPos: -1, components: [] }], _ = this.extractCommon(F[0], u, n, 0);
          if (F[0].newPos + 1 >= h2 && _ + 1 >= g)
            return y([{ value: this.join(u), count: u.length }]);
          function w() {
            for (var N = -1 * c; N <= c; N += 2) {
              var x = void 0, I = F[N - 1], P = F[N + 1], $ = (P ? P.newPos : 0) - N;
              I && (F[N - 1] = void 0);
              var D = I && I.newPos + 1 < h2, T = P && 0 <= $ && $ < g;
              if (!D && !T) {
                F[N] = void 0;
                continue;
              }
              if (!D || T && I.newPos < P.newPos ? (x = s(P), p2.pushComponent(x.components, void 0, true)) : (x = I, x.newPos++, p2.pushComponent(x.components, true, void 0)), $ = p2.extractCommon(x, u, n, N), x.newPos + 1 >= h2 && $ + 1 >= g)
                return y(t(p2, x.components, u, n, p2.useLongestToken));
              F[N] = x;
            }
            c++;
          }
          if (l)
            (function N() {
              setTimeout(function() {
                if (c > f)
                  return l();
                w() || N();
              }, 0);
            })();
          else
            for (; c <= f; ) {
              var E = w();
              if (E)
                return E;
            }
        }, pushComponent: function(n, u, i2) {
          var l = n[n.length - 1];
          l && l.added === u && l.removed === i2 ? n[n.length - 1] = { count: l.count + 1, added: u, removed: i2 } : n.push({ count: 1, added: u, removed: i2 });
        }, extractCommon: function(n, u, i2, l) {
          for (var p2 = u.length, y = i2.length, h2 = n.newPos, g = h2 - l, c = 0; h2 + 1 < p2 && g + 1 < y && this.equals(u[h2 + 1], i2[g + 1]); )
            h2++, g++, c++;
          return c && n.components.push({ count: c }), n.newPos = h2, g;
        }, equals: function(n, u) {
          return this.options.comparator ? this.options.comparator(n, u) : n === u || this.options.ignoreCase && n.toLowerCase() === u.toLowerCase();
        }, removeEmpty: function(n) {
          for (var u = [], i2 = 0; i2 < n.length; i2++)
            n[i2] && u.push(n[i2]);
          return u;
        }, castInput: function(n) {
          return n;
        }, tokenize: function(n) {
          return n.split("");
        }, join: function(n) {
          return n.join("");
        } };
        function t(a, n, u, i2, l) {
          for (var p2 = 0, y = n.length, h2 = 0, g = 0; p2 < y; p2++) {
            var c = n[p2];
            if (c.removed) {
              if (c.value = a.join(i2.slice(g, g + c.count)), g += c.count, p2 && n[p2 - 1].added) {
                var F = n[p2 - 1];
                n[p2 - 1] = n[p2], n[p2] = F;
              }
            } else {
              if (!c.added && l) {
                var f = u.slice(h2, h2 + c.count);
                f = f.map(function(w, E) {
                  var N = i2[g + E];
                  return N.length > w.length ? N : w;
                }), c.value = a.join(f);
              } else
                c.value = a.join(u.slice(h2, h2 + c.count));
              h2 += c.count, c.added || (g += c.count);
            }
          }
          var _ = n[y - 1];
          return y > 1 && typeof _.value == "string" && (_.added || _.removed) && a.equals("", _.value) && (n[y - 2].value += _.value, n.pop()), n;
        }
        function s(a) {
          return { newPos: a.newPos, components: a.components.slice(0) };
        }
      } }), BD = te({ "node_modules/diff/lib/diff/array.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true }), e.diffArrays = a, e.arrayDiff = void 0;
        var r = t(TD());
        function t(n) {
          return n && n.__esModule ? n : { default: n };
        }
        var s = new r.default();
        e.arrayDiff = s, s.tokenize = function(n) {
          return n.slice();
        }, s.join = s.removeEmpty = function(n) {
          return n;
        };
        function a(n, u, i2) {
          return s.diff(n, u, i2);
        }
      } }), Un = te({ "src/document/doc-builders.js"(e, r) {
        ne();
        function t(C) {
          return { type: "concat", parts: C };
        }
        function s(C) {
          return { type: "indent", contents: C };
        }
        function a(C, o) {
          return { type: "align", contents: o, n: C };
        }
        function n(C) {
          let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          return { type: "group", id: o.id, contents: C, break: Boolean(o.shouldBreak), expandedStates: o.expandedStates };
        }
        function u(C) {
          return a(Number.NEGATIVE_INFINITY, C);
        }
        function i2(C) {
          return a({ type: "root" }, C);
        }
        function l(C) {
          return a(-1, C);
        }
        function p2(C, o) {
          return n(C[0], Object.assign(Object.assign({}, o), {}, { expandedStates: C }));
        }
        function y(C) {
          return { type: "fill", parts: C };
        }
        function h2(C, o) {
          let d = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return { type: "if-break", breakContents: C, flatContents: o, groupId: d.groupId };
        }
        function g(C, o) {
          return { type: "indent-if-break", contents: C, groupId: o.groupId, negate: o.negate };
        }
        function c(C) {
          return { type: "line-suffix", contents: C };
        }
        var f = { type: "line-suffix-boundary" }, F = { type: "break-parent" }, _ = { type: "trim" }, w = { type: "line", hard: true }, E = { type: "line", hard: true, literal: true }, N = { type: "line" }, x = { type: "line", soft: true }, I = t([w, F]), P = t([E, F]), $ = { type: "cursor", placeholder: Symbol("cursor") };
        function D(C, o) {
          let d = [];
          for (let v = 0; v < o.length; v++)
            v !== 0 && d.push(C), d.push(o[v]);
          return t(d);
        }
        function T(C, o, d) {
          let v = C;
          if (o > 0) {
            for (let S = 0; S < Math.floor(o / d); ++S)
              v = s(v);
            v = a(o % d, v), v = a(Number.NEGATIVE_INFINITY, v);
          }
          return v;
        }
        function m(C, o) {
          return { type: "label", label: C, contents: o };
        }
        r.exports = { concat: t, join: D, line: N, softline: x, hardline: I, literalline: P, group: n, conditionalGroup: p2, fill: y, lineSuffix: c, lineSuffixBoundary: f, cursor: $, breakParent: F, ifBreak: h2, trim: _, indent: s, indentIfBreak: g, align: a, addAlignmentToDoc: T, markAsRoot: i2, dedentToRoot: u, dedent: l, hardlineWithoutBreakParent: w, literallineWithoutBreakParent: E, label: m };
      } }), Jn = te({ "src/common/end-of-line.js"(e, r) {
        ne();
        function t(u) {
          let i2 = u.indexOf("\r");
          return i2 >= 0 ? u.charAt(i2 + 1) === `
` ? "crlf" : "cr" : "lf";
        }
        function s(u) {
          switch (u) {
            case "cr":
              return "\r";
            case "crlf":
              return `\r
`;
            default:
              return `
`;
          }
        }
        function a(u, i2) {
          let l;
          switch (i2) {
            case `
`:
              l = /\n/g;
              break;
            case "\r":
              l = /\r/g;
              break;
            case `\r
`:
              l = /\r\n/g;
              break;
            default:
              throw new Error(`Unexpected "eol" ${JSON.stringify(i2)}.`);
          }
          let p2 = u.match(l);
          return p2 ? p2.length : 0;
        }
        function n(u) {
          return u.replace(/\r\n?/g, `
`);
        }
        r.exports = { guessEndOfLine: t, convertEndOfLineToChars: s, countEndOfLineChars: a, normalizeEndOfLine: n };
      } }), lt = te({ "src/utils/get-last.js"(e, r) {
        ne();
        var t = (s) => s[s.length - 1];
        r.exports = t;
      } });
      function ND() {
        let { onlyFirst: e = false } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, r = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
        return new RegExp(r, e ? void 0 : "g");
      }
      var wD = ht({ "node_modules/strip-ansi/node_modules/ansi-regex/index.js"() {
        ne();
      } });
      function _D(e) {
        if (typeof e != "string")
          throw new TypeError(`Expected a \`string\`, got \`${typeof e}\``);
        return e.replace(ND(), "");
      }
      var PD = ht({ "node_modules/strip-ansi/index.js"() {
        ne(), wD();
      } });
      function ID(e) {
        return Number.isInteger(e) ? e >= 4352 && (e <= 4447 || e === 9001 || e === 9002 || 11904 <= e && e <= 12871 && e !== 12351 || 12880 <= e && e <= 19903 || 19968 <= e && e <= 42182 || 43360 <= e && e <= 43388 || 44032 <= e && e <= 55203 || 63744 <= e && e <= 64255 || 65040 <= e && e <= 65049 || 65072 <= e && e <= 65131 || 65281 <= e && e <= 65376 || 65504 <= e && e <= 65510 || 110592 <= e && e <= 110593 || 127488 <= e && e <= 127569 || 131072 <= e && e <= 262141) : false;
      }
      var kD = ht({ "node_modules/is-fullwidth-code-point/index.js"() {
        ne();
      } }), LD = te({ "node_modules/emoji-regex/index.js"(e, r) {
        ne(), r.exports = function() {
          return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
        };
      } }), ka = {};
      Kt(ka, { default: () => OD });
      function OD(e) {
        if (typeof e != "string" || e.length === 0 || (e = _D(e), e.length === 0))
          return 0;
        e = e.replace((0, La.default)(), "  ");
        let r = 0;
        for (let t = 0; t < e.length; t++) {
          let s = e.codePointAt(t);
          s <= 31 || s >= 127 && s <= 159 || s >= 768 && s <= 879 || (s > 65535 && t++, r += ID(s) ? 2 : 1);
        }
        return r;
      }
      var La, jD = ht({ "node_modules/string-width/index.js"() {
        ne(), PD(), kD(), La = bD(LD());
      } }), Oa = te({ "src/utils/get-string-width.js"(e, r) {
        ne();
        var t = (jD(), ft(ka)).default, s = /[^\x20-\x7F]/;
        function a(n) {
          return n ? s.test(n) ? t(n) : n.length : 0;
        }
        r.exports = a;
      } }), Yt = te({ "src/document/doc-utils.js"(e, r) {
        ne();
        var t = lt(), { literalline: s, join: a } = Un(), n = (o) => Array.isArray(o) || o && o.type === "concat", u = (o) => {
          if (Array.isArray(o))
            return o;
          if (o.type !== "concat" && o.type !== "fill")
            throw new Error("Expect doc type to be `concat` or `fill`.");
          return o.parts;
        }, i2 = {};
        function l(o, d, v, S) {
          let b = [o];
          for (; b.length > 0; ) {
            let B = b.pop();
            if (B === i2) {
              v(b.pop());
              continue;
            }
            if (v && b.push(B, i2), !d || d(B) !== false)
              if (n(B) || B.type === "fill") {
                let k = u(B);
                for (let M = k.length, R = M - 1; R >= 0; --R)
                  b.push(k[R]);
              } else if (B.type === "if-break")
                B.flatContents && b.push(B.flatContents), B.breakContents && b.push(B.breakContents);
              else if (B.type === "group" && B.expandedStates)
                if (S)
                  for (let k = B.expandedStates.length, M = k - 1; M >= 0; --M)
                    b.push(B.expandedStates[M]);
                else
                  b.push(B.contents);
              else
                B.contents && b.push(B.contents);
          }
        }
        function p2(o, d) {
          let v = /* @__PURE__ */ new Map();
          return S(o);
          function S(B) {
            if (v.has(B))
              return v.get(B);
            let k = b(B);
            return v.set(B, k), k;
          }
          function b(B) {
            if (Array.isArray(B))
              return d(B.map(S));
            if (B.type === "concat" || B.type === "fill") {
              let k = B.parts.map(S);
              return d(Object.assign(Object.assign({}, B), {}, { parts: k }));
            }
            if (B.type === "if-break") {
              let k = B.breakContents && S(B.breakContents), M = B.flatContents && S(B.flatContents);
              return d(Object.assign(Object.assign({}, B), {}, { breakContents: k, flatContents: M }));
            }
            if (B.type === "group" && B.expandedStates) {
              let k = B.expandedStates.map(S), M = k[0];
              return d(Object.assign(Object.assign({}, B), {}, { contents: M, expandedStates: k }));
            }
            if (B.contents) {
              let k = S(B.contents);
              return d(Object.assign(Object.assign({}, B), {}, { contents: k }));
            }
            return d(B);
          }
        }
        function y(o, d, v) {
          let S = v, b = false;
          function B(k) {
            let M = d(k);
            if (M !== void 0 && (b = true, S = M), b)
              return false;
          }
          return l(o, B), S;
        }
        function h2(o) {
          if (o.type === "group" && o.break || o.type === "line" && o.hard || o.type === "break-parent")
            return true;
        }
        function g(o) {
          return y(o, h2, false);
        }
        function c(o) {
          if (o.length > 0) {
            let d = t(o);
            !d.expandedStates && !d.break && (d.break = "propagated");
          }
          return null;
        }
        function f(o) {
          let d = /* @__PURE__ */ new Set(), v = [];
          function S(B) {
            if (B.type === "break-parent" && c(v), B.type === "group") {
              if (v.push(B), d.has(B))
                return false;
              d.add(B);
            }
          }
          function b(B) {
            B.type === "group" && v.pop().break && c(v);
          }
          l(o, S, b, true);
        }
        function F(o) {
          return o.type === "line" && !o.hard ? o.soft ? "" : " " : o.type === "if-break" ? o.flatContents || "" : o;
        }
        function _(o) {
          return p2(o, F);
        }
        var w = (o, d) => o && o.type === "line" && o.hard && d && d.type === "break-parent";
        function E(o) {
          if (!o)
            return o;
          if (n(o) || o.type === "fill") {
            let d = u(o);
            for (; d.length > 1 && w(...d.slice(-2)); )
              d.length -= 2;
            if (d.length > 0) {
              let v = E(t(d));
              d[d.length - 1] = v;
            }
            return Array.isArray(o) ? d : Object.assign(Object.assign({}, o), {}, { parts: d });
          }
          switch (o.type) {
            case "align":
            case "indent":
            case "indent-if-break":
            case "group":
            case "line-suffix":
            case "label": {
              let d = E(o.contents);
              return Object.assign(Object.assign({}, o), {}, { contents: d });
            }
            case "if-break": {
              let d = E(o.breakContents), v = E(o.flatContents);
              return Object.assign(Object.assign({}, o), {}, { breakContents: d, flatContents: v });
            }
          }
          return o;
        }
        function N(o) {
          return E(I(o));
        }
        function x(o) {
          switch (o.type) {
            case "fill":
              if (o.parts.every((v) => v === ""))
                return "";
              break;
            case "group":
              if (!o.contents && !o.id && !o.break && !o.expandedStates)
                return "";
              if (o.contents.type === "group" && o.contents.id === o.id && o.contents.break === o.break && o.contents.expandedStates === o.expandedStates)
                return o.contents;
              break;
            case "align":
            case "indent":
            case "indent-if-break":
            case "line-suffix":
              if (!o.contents)
                return "";
              break;
            case "if-break":
              if (!o.flatContents && !o.breakContents)
                return "";
              break;
          }
          if (!n(o))
            return o;
          let d = [];
          for (let v of u(o)) {
            if (!v)
              continue;
            let [S, ...b] = n(v) ? u(v) : [v];
            typeof S == "string" && typeof t(d) == "string" ? d[d.length - 1] += S : d.push(S), d.push(...b);
          }
          return d.length === 0 ? "" : d.length === 1 ? d[0] : Array.isArray(o) ? d : Object.assign(Object.assign({}, o), {}, { parts: d });
        }
        function I(o) {
          return p2(o, (d) => x(d));
        }
        function P(o) {
          let d = [], v = o.filter(Boolean);
          for (; v.length > 0; ) {
            let S = v.shift();
            if (S) {
              if (n(S)) {
                v.unshift(...u(S));
                continue;
              }
              if (d.length > 0 && typeof t(d) == "string" && typeof S == "string") {
                d[d.length - 1] += S;
                continue;
              }
              d.push(S);
            }
          }
          return d;
        }
        function $(o) {
          return p2(o, (d) => Array.isArray(d) ? P(d) : d.parts ? Object.assign(Object.assign({}, d), {}, { parts: P(d.parts) }) : d);
        }
        function D(o) {
          return p2(o, (d) => typeof d == "string" && d.includes(`
`) ? T(d) : d);
        }
        function T(o) {
          let d = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : s;
          return a(d, o.split(`
`)).parts;
        }
        function m(o) {
          if (o.type === "line")
            return true;
        }
        function C(o) {
          return y(o, m, false);
        }
        r.exports = { isConcat: n, getDocParts: u, willBreak: g, traverseDoc: l, findInDoc: y, mapDoc: p2, propagateBreaks: f, removeLines: _, stripTrailingHardline: N, normalizeParts: P, normalizeDoc: $, cleanDoc: I, replaceTextEndOfLine: T, replaceEndOfLine: D, canBreak: C };
      } }), qD = te({ "src/document/doc-printer.js"(e, r) {
        ne();
        var { convertEndOfLineToChars: t } = Jn(), s = lt(), a = Oa(), { fill: n, cursor: u, indent: i2 } = Un(), { isConcat: l, getDocParts: p2 } = Yt(), y, h2 = 1, g = 2;
        function c() {
          return { value: "", length: 0, queue: [] };
        }
        function f(x, I) {
          return _(x, { type: "indent" }, I);
        }
        function F(x, I, P) {
          return I === Number.NEGATIVE_INFINITY ? x.root || c() : I < 0 ? _(x, { type: "dedent" }, P) : I ? I.type === "root" ? Object.assign(Object.assign({}, x), {}, { root: x }) : _(x, { type: typeof I == "string" ? "stringAlign" : "numberAlign", n: I }, P) : x;
        }
        function _(x, I, P) {
          let $ = I.type === "dedent" ? x.queue.slice(0, -1) : [...x.queue, I], D = "", T = 0, m = 0, C = 0;
          for (let k of $)
            switch (k.type) {
              case "indent":
                v(), P.useTabs ? o(1) : d(P.tabWidth);
                break;
              case "stringAlign":
                v(), D += k.n, T += k.n.length;
                break;
              case "numberAlign":
                m += 1, C += k.n;
                break;
              default:
                throw new Error(`Unexpected type '${k.type}'`);
            }
          return b(), Object.assign(Object.assign({}, x), {}, { value: D, length: T, queue: $ });
          function o(k) {
            D += "	".repeat(k), T += P.tabWidth * k;
          }
          function d(k) {
            D += " ".repeat(k), T += k;
          }
          function v() {
            P.useTabs ? S() : b();
          }
          function S() {
            m > 0 && o(m), B();
          }
          function b() {
            C > 0 && d(C), B();
          }
          function B() {
            m = 0, C = 0;
          }
        }
        function w(x) {
          if (x.length === 0)
            return 0;
          let I = 0;
          for (; x.length > 0 && typeof s(x) == "string" && /^[\t ]*$/.test(s(x)); )
            I += x.pop().length;
          if (x.length > 0 && typeof s(x) == "string") {
            let P = s(x).replace(/[\t ]*$/, "");
            I += s(x).length - P.length, x[x.length - 1] = P;
          }
          return I;
        }
        function E(x, I, P, $, D) {
          let T = I.length, m = [x], C = [];
          for (; P >= 0; ) {
            if (m.length === 0) {
              if (T === 0)
                return true;
              m.push(I[--T]);
              continue;
            }
            let { mode: o, doc: d } = m.pop();
            if (typeof d == "string")
              C.push(d), P -= a(d);
            else if (l(d) || d.type === "fill") {
              let v = p2(d);
              for (let S = v.length - 1; S >= 0; S--)
                m.push({ mode: o, doc: v[S] });
            } else
              switch (d.type) {
                case "indent":
                case "align":
                case "indent-if-break":
                case "label":
                  m.push({ mode: o, doc: d.contents });
                  break;
                case "trim":
                  P += w(C);
                  break;
                case "group": {
                  if (D && d.break)
                    return false;
                  let v = d.break ? h2 : o, S = d.expandedStates && v === h2 ? s(d.expandedStates) : d.contents;
                  m.push({ mode: v, doc: S });
                  break;
                }
                case "if-break": {
                  let S = (d.groupId ? y[d.groupId] || g : o) === h2 ? d.breakContents : d.flatContents;
                  S && m.push({ mode: o, doc: S });
                  break;
                }
                case "line":
                  if (o === h2 || d.hard)
                    return true;
                  d.soft || (C.push(" "), P--);
                  break;
                case "line-suffix":
                  $ = true;
                  break;
                case "line-suffix-boundary":
                  if ($)
                    return false;
                  break;
              }
          }
          return false;
        }
        function N(x, I) {
          y = {};
          let P = I.printWidth, $ = t(I.endOfLine), D = 0, T = [{ ind: c(), mode: h2, doc: x }], m = [], C = false, o = [];
          for (; T.length > 0; ) {
            let { ind: v, mode: S, doc: b } = T.pop();
            if (typeof b == "string") {
              let B = $ !== `
` ? b.replace(/\n/g, $) : b;
              m.push(B), D += a(B);
            } else if (l(b)) {
              let B = p2(b);
              for (let k = B.length - 1; k >= 0; k--)
                T.push({ ind: v, mode: S, doc: B[k] });
            } else
              switch (b.type) {
                case "cursor":
                  m.push(u.placeholder);
                  break;
                case "indent":
                  T.push({ ind: f(v, I), mode: S, doc: b.contents });
                  break;
                case "align":
                  T.push({ ind: F(v, b.n, I), mode: S, doc: b.contents });
                  break;
                case "trim":
                  D -= w(m);
                  break;
                case "group":
                  switch (S) {
                    case g:
                      if (!C) {
                        T.push({ ind: v, mode: b.break ? h2 : g, doc: b.contents });
                        break;
                      }
                    case h2: {
                      C = false;
                      let B = { ind: v, mode: g, doc: b.contents }, k = P - D, M = o.length > 0;
                      if (!b.break && E(B, T, k, M))
                        T.push(B);
                      else if (b.expandedStates) {
                        let R = s(b.expandedStates);
                        if (b.break) {
                          T.push({ ind: v, mode: h2, doc: R });
                          break;
                        } else
                          for (let q = 1; q < b.expandedStates.length + 1; q++)
                            if (q >= b.expandedStates.length) {
                              T.push({ ind: v, mode: h2, doc: R });
                              break;
                            } else {
                              let J = b.expandedStates[q], L = { ind: v, mode: g, doc: J };
                              if (E(L, T, k, M)) {
                                T.push(L);
                                break;
                              }
                            }
                      } else
                        T.push({ ind: v, mode: h2, doc: b.contents });
                      break;
                    }
                  }
                  b.id && (y[b.id] = s(T).mode);
                  break;
                case "fill": {
                  let B = P - D, { parts: k } = b;
                  if (k.length === 0)
                    break;
                  let [M, R] = k, q = { ind: v, mode: g, doc: M }, J = { ind: v, mode: h2, doc: M }, L = E(q, [], B, o.length > 0, true);
                  if (k.length === 1) {
                    L ? T.push(q) : T.push(J);
                    break;
                  }
                  let Q = { ind: v, mode: g, doc: R }, V = { ind: v, mode: h2, doc: R };
                  if (k.length === 2) {
                    L ? T.push(Q, q) : T.push(V, J);
                    break;
                  }
                  k.splice(0, 2);
                  let j = { ind: v, mode: S, doc: n(k) }, Y = k[0];
                  E({ ind: v, mode: g, doc: [M, R, Y] }, [], B, o.length > 0, true) ? T.push(j, Q, q) : L ? T.push(j, V, q) : T.push(j, V, J);
                  break;
                }
                case "if-break":
                case "indent-if-break": {
                  let B = b.groupId ? y[b.groupId] : S;
                  if (B === h2) {
                    let k = b.type === "if-break" ? b.breakContents : b.negate ? b.contents : i2(b.contents);
                    k && T.push({ ind: v, mode: S, doc: k });
                  }
                  if (B === g) {
                    let k = b.type === "if-break" ? b.flatContents : b.negate ? i2(b.contents) : b.contents;
                    k && T.push({ ind: v, mode: S, doc: k });
                  }
                  break;
                }
                case "line-suffix":
                  o.push({ ind: v, mode: S, doc: b.contents });
                  break;
                case "line-suffix-boundary":
                  o.length > 0 && T.push({ ind: v, mode: S, doc: { type: "line", hard: true } });
                  break;
                case "line":
                  switch (S) {
                    case g:
                      if (b.hard)
                        C = true;
                      else {
                        b.soft || (m.push(" "), D += 1);
                        break;
                      }
                    case h2:
                      if (o.length > 0) {
                        T.push({ ind: v, mode: S, doc: b }, ...o.reverse()), o.length = 0;
                        break;
                      }
                      b.literal ? v.root ? (m.push($, v.root.value), D = v.root.length) : (m.push($), D = 0) : (D -= w(m), m.push($ + v.value), D = v.length);
                      break;
                  }
                  break;
                case "label":
                  T.push({ ind: v, mode: S, doc: b.contents });
                  break;
              }
            T.length === 0 && o.length > 0 && (T.push(...o.reverse()), o.length = 0);
          }
          let d = m.indexOf(u.placeholder);
          if (d !== -1) {
            let v = m.indexOf(u.placeholder, d + 1), S = m.slice(0, d).join(""), b = m.slice(d + 1, v).join(""), B = m.slice(v + 1).join("");
            return { formatted: S + b + B, cursorNodeStart: S.length, cursorNodeText: b };
          }
          return { formatted: m.join("") };
        }
        r.exports = { printDocToString: N };
      } }), MD = te({ "src/document/doc-debug.js"(e, r) {
        ne();
        var { isConcat: t, getDocParts: s } = Yt();
        function a(u) {
          if (!u)
            return "";
          if (t(u)) {
            let i2 = [];
            for (let l of s(u))
              if (t(l))
                i2.push(...a(l).parts);
              else {
                let p2 = a(l);
                p2 !== "" && i2.push(p2);
              }
            return { type: "concat", parts: i2 };
          }
          return u.type === "if-break" ? Object.assign(Object.assign({}, u), {}, { breakContents: a(u.breakContents), flatContents: a(u.flatContents) }) : u.type === "group" ? Object.assign(Object.assign({}, u), {}, { contents: a(u.contents), expandedStates: u.expandedStates && u.expandedStates.map(a) }) : u.type === "fill" ? { type: "fill", parts: u.parts.map(a) } : u.contents ? Object.assign(Object.assign({}, u), {}, { contents: a(u.contents) }) : u;
        }
        function n(u) {
          let i2 = /* @__PURE__ */ Object.create(null), l = /* @__PURE__ */ new Set();
          return p2(a(u));
          function p2(h2, g, c) {
            if (typeof h2 == "string")
              return JSON.stringify(h2);
            if (t(h2)) {
              let f = s(h2).map(p2).filter(Boolean);
              return f.length === 1 ? f[0] : `[${f.join(", ")}]`;
            }
            if (h2.type === "line") {
              let f = Array.isArray(c) && c[g + 1] && c[g + 1].type === "break-parent";
              return h2.literal ? f ? "literalline" : "literallineWithoutBreakParent" : h2.hard ? f ? "hardline" : "hardlineWithoutBreakParent" : h2.soft ? "softline" : "line";
            }
            if (h2.type === "break-parent")
              return Array.isArray(c) && c[g - 1] && c[g - 1].type === "line" && c[g - 1].hard ? void 0 : "breakParent";
            if (h2.type === "trim")
              return "trim";
            if (h2.type === "indent")
              return "indent(" + p2(h2.contents) + ")";
            if (h2.type === "align")
              return h2.n === Number.NEGATIVE_INFINITY ? "dedentToRoot(" + p2(h2.contents) + ")" : h2.n < 0 ? "dedent(" + p2(h2.contents) + ")" : h2.n.type === "root" ? "markAsRoot(" + p2(h2.contents) + ")" : "align(" + JSON.stringify(h2.n) + ", " + p2(h2.contents) + ")";
            if (h2.type === "if-break")
              return "ifBreak(" + p2(h2.breakContents) + (h2.flatContents ? ", " + p2(h2.flatContents) : "") + (h2.groupId ? (h2.flatContents ? "" : ', ""') + `, { groupId: ${y(h2.groupId)} }` : "") + ")";
            if (h2.type === "indent-if-break") {
              let f = [];
              h2.negate && f.push("negate: true"), h2.groupId && f.push(`groupId: ${y(h2.groupId)}`);
              let F = f.length > 0 ? `, { ${f.join(", ")} }` : "";
              return `indentIfBreak(${p2(h2.contents)}${F})`;
            }
            if (h2.type === "group") {
              let f = [];
              h2.break && h2.break !== "propagated" && f.push("shouldBreak: true"), h2.id && f.push(`id: ${y(h2.id)}`);
              let F = f.length > 0 ? `, { ${f.join(", ")} }` : "";
              return h2.expandedStates ? `conditionalGroup([${h2.expandedStates.map((_) => p2(_)).join(",")}]${F})` : `group(${p2(h2.contents)}${F})`;
            }
            if (h2.type === "fill")
              return `fill([${h2.parts.map((f) => p2(f)).join(", ")}])`;
            if (h2.type === "line-suffix")
              return "lineSuffix(" + p2(h2.contents) + ")";
            if (h2.type === "line-suffix-boundary")
              return "lineSuffixBoundary";
            if (h2.type === "label")
              return `label(${JSON.stringify(h2.label)}, ${p2(h2.contents)})`;
            throw new Error("Unknown doc type " + h2.type);
          }
          function y(h2) {
            if (typeof h2 != "symbol")
              return JSON.stringify(String(h2));
            if (h2 in i2)
              return i2[h2];
            let g = String(h2).slice(7, -1) || "symbol";
            for (let c = 0; ; c++) {
              let f = g + (c > 0 ? ` #${c}` : "");
              if (!l.has(f))
                return l.add(f), i2[h2] = `Symbol.for(${JSON.stringify(f)})`;
            }
          }
        }
        r.exports = { printDocToDebug: n };
      } }), qe = te({ "src/document/index.js"(e, r) {
        ne(), r.exports = { builders: Un(), printer: qD(), utils: Yt(), debug: MD() };
      } }), ja = {};
      Kt(ja, { default: () => RD });
      function RD(e) {
        if (typeof e != "string")
          throw new TypeError("Expected a string");
        return e.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
      }
      var $D = ht({ "node_modules/escape-string-regexp/index.js"() {
        ne();
      } }), qa = te({ "node_modules/semver/internal/debug.js"(e, r) {
        ne();
        var t = typeof wt == "object" && wt.env && wt.env.NODE_DEBUG && /\bsemver\b/i.test(wt.env.NODE_DEBUG) ? function() {
          for (var s = arguments.length, a = new Array(s), n = 0; n < s; n++)
            a[n] = arguments[n];
          return console.error("SEMVER", ...a);
        } : () => {
        };
        r.exports = t;
      } }), Ma = te({ "node_modules/semver/internal/constants.js"(e, r) {
        ne();
        var t = "2.0.0", s = 256, a = Number.MAX_SAFE_INTEGER || 9007199254740991, n = 16;
        r.exports = { SEMVER_SPEC_VERSION: t, MAX_LENGTH: s, MAX_SAFE_INTEGER: a, MAX_SAFE_COMPONENT_LENGTH: n };
      } }), VD = te({ "node_modules/semver/internal/re.js"(e, r) {
        ne();
        var { MAX_SAFE_COMPONENT_LENGTH: t } = Ma(), s = qa();
        e = r.exports = {};
        var a = e.re = [], n = e.src = [], u = e.t = {}, i2 = 0, l = (p2, y, h2) => {
          let g = i2++;
          s(p2, g, y), u[p2] = g, n[g] = y, a[g] = new RegExp(y, h2 ? "g" : void 0);
        };
        l("NUMERICIDENTIFIER", "0|[1-9]\\d*"), l("NUMERICIDENTIFIERLOOSE", "[0-9]+"), l("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*"), l("MAINVERSION", `(${n[u.NUMERICIDENTIFIER]})\\.(${n[u.NUMERICIDENTIFIER]})\\.(${n[u.NUMERICIDENTIFIER]})`), l("MAINVERSIONLOOSE", `(${n[u.NUMERICIDENTIFIERLOOSE]})\\.(${n[u.NUMERICIDENTIFIERLOOSE]})\\.(${n[u.NUMERICIDENTIFIERLOOSE]})`), l("PRERELEASEIDENTIFIER", `(?:${n[u.NUMERICIDENTIFIER]}|${n[u.NONNUMERICIDENTIFIER]})`), l("PRERELEASEIDENTIFIERLOOSE", `(?:${n[u.NUMERICIDENTIFIERLOOSE]}|${n[u.NONNUMERICIDENTIFIER]})`), l("PRERELEASE", `(?:-(${n[u.PRERELEASEIDENTIFIER]}(?:\\.${n[u.PRERELEASEIDENTIFIER]})*))`), l("PRERELEASELOOSE", `(?:-?(${n[u.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${n[u.PRERELEASEIDENTIFIERLOOSE]})*))`), l("BUILDIDENTIFIER", "[0-9A-Za-z-]+"), l("BUILD", `(?:\\+(${n[u.BUILDIDENTIFIER]}(?:\\.${n[u.BUILDIDENTIFIER]})*))`), l("FULLPLAIN", `v?${n[u.MAINVERSION]}${n[u.PRERELEASE]}?${n[u.BUILD]}?`), l("FULL", `^${n[u.FULLPLAIN]}$`), l("LOOSEPLAIN", `[v=\\s]*${n[u.MAINVERSIONLOOSE]}${n[u.PRERELEASELOOSE]}?${n[u.BUILD]}?`), l("LOOSE", `^${n[u.LOOSEPLAIN]}$`), l("GTLT", "((?:<|>)?=?)"), l("XRANGEIDENTIFIERLOOSE", `${n[u.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`), l("XRANGEIDENTIFIER", `${n[u.NUMERICIDENTIFIER]}|x|X|\\*`), l("XRANGEPLAIN", `[v=\\s]*(${n[u.XRANGEIDENTIFIER]})(?:\\.(${n[u.XRANGEIDENTIFIER]})(?:\\.(${n[u.XRANGEIDENTIFIER]})(?:${n[u.PRERELEASE]})?${n[u.BUILD]}?)?)?`), l("XRANGEPLAINLOOSE", `[v=\\s]*(${n[u.XRANGEIDENTIFIERLOOSE]})(?:\\.(${n[u.XRANGEIDENTIFIERLOOSE]})(?:\\.(${n[u.XRANGEIDENTIFIERLOOSE]})(?:${n[u.PRERELEASELOOSE]})?${n[u.BUILD]}?)?)?`), l("XRANGE", `^${n[u.GTLT]}\\s*${n[u.XRANGEPLAIN]}$`), l("XRANGELOOSE", `^${n[u.GTLT]}\\s*${n[u.XRANGEPLAINLOOSE]}$`), l("COERCE", `(^|[^\\d])(\\d{1,${t}})(?:\\.(\\d{1,${t}}))?(?:\\.(\\d{1,${t}}))?(?:$|[^\\d])`), l("COERCERTL", n[u.COERCE], true), l("LONETILDE", "(?:~>?)"), l("TILDETRIM", `(\\s*)${n[u.LONETILDE]}\\s+`, true), e.tildeTrimReplace = "$1~", l("TILDE", `^${n[u.LONETILDE]}${n[u.XRANGEPLAIN]}$`), l("TILDELOOSE", `^${n[u.LONETILDE]}${n[u.XRANGEPLAINLOOSE]}$`), l("LONECARET", "(?:\\^)"), l("CARETTRIM", `(\\s*)${n[u.LONECARET]}\\s+`, true), e.caretTrimReplace = "$1^", l("CARET", `^${n[u.LONECARET]}${n[u.XRANGEPLAIN]}$`), l("CARETLOOSE", `^${n[u.LONECARET]}${n[u.XRANGEPLAINLOOSE]}$`), l("COMPARATORLOOSE", `^${n[u.GTLT]}\\s*(${n[u.LOOSEPLAIN]})$|^$`), l("COMPARATOR", `^${n[u.GTLT]}\\s*(${n[u.FULLPLAIN]})$|^$`), l("COMPARATORTRIM", `(\\s*)${n[u.GTLT]}\\s*(${n[u.LOOSEPLAIN]}|${n[u.XRANGEPLAIN]})`, true), e.comparatorTrimReplace = "$1$2$3", l("HYPHENRANGE", `^\\s*(${n[u.XRANGEPLAIN]})\\s+-\\s+(${n[u.XRANGEPLAIN]})\\s*$`), l("HYPHENRANGELOOSE", `^\\s*(${n[u.XRANGEPLAINLOOSE]})\\s+-\\s+(${n[u.XRANGEPLAINLOOSE]})\\s*$`), l("STAR", "(<|>)?=?\\s*\\*"), l("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$"), l("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
      } }), WD = te({ "node_modules/semver/internal/parse-options.js"(e, r) {
        ne();
        var t = ["includePrerelease", "loose", "rtl"], s = (a) => a ? typeof a != "object" ? { loose: true } : t.filter((n) => a[n]).reduce((n, u) => (n[u] = true, n), {}) : {};
        r.exports = s;
      } }), HD = te({ "node_modules/semver/internal/identifiers.js"(e, r) {
        ne();
        var t = /^[0-9]+$/, s = (n, u) => {
          let i2 = t.test(n), l = t.test(u);
          return i2 && l && (n = +n, u = +u), n === u ? 0 : i2 && !l ? -1 : l && !i2 ? 1 : n < u ? -1 : 1;
        }, a = (n, u) => s(u, n);
        r.exports = { compareIdentifiers: s, rcompareIdentifiers: a };
      } }), GD = te({ "node_modules/semver/classes/semver.js"(e, r) {
        ne();
        var t = qa(), { MAX_LENGTH: s, MAX_SAFE_INTEGER: a } = Ma(), { re: n, t: u } = VD(), i2 = WD(), { compareIdentifiers: l } = HD(), p2 = class {
          constructor(y, h2) {
            if (h2 = i2(h2), y instanceof p2) {
              if (y.loose === !!h2.loose && y.includePrerelease === !!h2.includePrerelease)
                return y;
              y = y.version;
            } else if (typeof y != "string")
              throw new TypeError(`Invalid Version: ${y}`);
            if (y.length > s)
              throw new TypeError(`version is longer than ${s} characters`);
            t("SemVer", y, h2), this.options = h2, this.loose = !!h2.loose, this.includePrerelease = !!h2.includePrerelease;
            let g = y.trim().match(h2.loose ? n[u.LOOSE] : n[u.FULL]);
            if (!g)
              throw new TypeError(`Invalid Version: ${y}`);
            if (this.raw = y, this.major = +g[1], this.minor = +g[2], this.patch = +g[3], this.major > a || this.major < 0)
              throw new TypeError("Invalid major version");
            if (this.minor > a || this.minor < 0)
              throw new TypeError("Invalid minor version");
            if (this.patch > a || this.patch < 0)
              throw new TypeError("Invalid patch version");
            g[4] ? this.prerelease = g[4].split(".").map((c) => {
              if (/^[0-9]+$/.test(c)) {
                let f = +c;
                if (f >= 0 && f < a)
                  return f;
              }
              return c;
            }) : this.prerelease = [], this.build = g[5] ? g[5].split(".") : [], this.format();
          }
          format() {
            return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
          }
          toString() {
            return this.version;
          }
          compare(y) {
            if (t("SemVer.compare", this.version, this.options, y), !(y instanceof p2)) {
              if (typeof y == "string" && y === this.version)
                return 0;
              y = new p2(y, this.options);
            }
            return y.version === this.version ? 0 : this.compareMain(y) || this.comparePre(y);
          }
          compareMain(y) {
            return y instanceof p2 || (y = new p2(y, this.options)), l(this.major, y.major) || l(this.minor, y.minor) || l(this.patch, y.patch);
          }
          comparePre(y) {
            if (y instanceof p2 || (y = new p2(y, this.options)), this.prerelease.length && !y.prerelease.length)
              return -1;
            if (!this.prerelease.length && y.prerelease.length)
              return 1;
            if (!this.prerelease.length && !y.prerelease.length)
              return 0;
            let h2 = 0;
            do {
              let g = this.prerelease[h2], c = y.prerelease[h2];
              if (t("prerelease compare", h2, g, c), g === void 0 && c === void 0)
                return 0;
              if (c === void 0)
                return 1;
              if (g === void 0)
                return -1;
              if (g === c)
                continue;
              return l(g, c);
            } while (++h2);
          }
          compareBuild(y) {
            y instanceof p2 || (y = new p2(y, this.options));
            let h2 = 0;
            do {
              let g = this.build[h2], c = y.build[h2];
              if (t("prerelease compare", h2, g, c), g === void 0 && c === void 0)
                return 0;
              if (c === void 0)
                return 1;
              if (g === void 0)
                return -1;
              if (g === c)
                continue;
              return l(g, c);
            } while (++h2);
          }
          inc(y, h2) {
            switch (y) {
              case "premajor":
                this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", h2);
                break;
              case "preminor":
                this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", h2);
                break;
              case "prepatch":
                this.prerelease.length = 0, this.inc("patch", h2), this.inc("pre", h2);
                break;
              case "prerelease":
                this.prerelease.length === 0 && this.inc("patch", h2), this.inc("pre", h2);
                break;
              case "major":
                (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) && this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
                break;
              case "minor":
                (this.patch !== 0 || this.prerelease.length === 0) && this.minor++, this.patch = 0, this.prerelease = [];
                break;
              case "patch":
                this.prerelease.length === 0 && this.patch++, this.prerelease = [];
                break;
              case "pre":
                if (this.prerelease.length === 0)
                  this.prerelease = [0];
                else {
                  let g = this.prerelease.length;
                  for (; --g >= 0; )
                    typeof this.prerelease[g] == "number" && (this.prerelease[g]++, g = -2);
                  g === -1 && this.prerelease.push(0);
                }
                h2 && (l(this.prerelease[0], h2) === 0 ? isNaN(this.prerelease[1]) && (this.prerelease = [h2, 0]) : this.prerelease = [h2, 0]);
                break;
              default:
                throw new Error(`invalid increment argument: ${y}`);
            }
            return this.format(), this.raw = this.version, this;
          }
        };
        r.exports = p2;
      } }), zn = te({ "node_modules/semver/functions/compare.js"(e, r) {
        ne();
        var t = GD(), s = (a, n, u) => new t(a, u).compare(new t(n, u));
        r.exports = s;
      } }), UD = te({ "node_modules/semver/functions/lt.js"(e, r) {
        ne();
        var t = zn(), s = (a, n, u) => t(a, n, u) < 0;
        r.exports = s;
      } }), JD = te({ "node_modules/semver/functions/gte.js"(e, r) {
        ne();
        var t = zn(), s = (a, n, u) => t(a, n, u) >= 0;
        r.exports = s;
      } }), zD = te({ "src/utils/arrayify.js"(e, r) {
        ne(), r.exports = (t, s) => Object.entries(t).map((a) => {
          let [n, u] = a;
          return Object.assign({ [s]: n }, u);
        });
      } }), XD = te({ "node_modules/outdent/lib/index.js"(e, r) {
        ne(), Object.defineProperty(e, "__esModule", { value: true }), e.outdent = void 0;
        function t() {
          for (var E = [], N = 0; N < arguments.length; N++)
            E[N] = arguments[N];
        }
        function s() {
          return typeof WeakMap < "u" ? /* @__PURE__ */ new WeakMap() : a();
        }
        function a() {
          return { add: t, delete: t, get: t, set: t, has: function(E) {
            return false;
          } };
        }
        var n = Object.prototype.hasOwnProperty, u = function(E, N) {
          return n.call(E, N);
        };
        function i2(E, N) {
          for (var x in N)
            u(N, x) && (E[x] = N[x]);
          return E;
        }
        var l = /^[ \t]*(?:\r\n|\r|\n)/, p2 = /(?:\r\n|\r|\n)[ \t]*$/, y = /^(?:[\r\n]|$)/, h2 = /(?:\r\n|\r|\n)([ \t]*)(?:[^ \t\r\n]|$)/, g = /^[ \t]*[\r\n][ \t\r\n]*$/;
        function c(E, N, x) {
          var I = 0, P = E[0].match(h2);
          P && (I = P[1].length);
          var $ = "(\\r\\n|\\r|\\n).{0," + I + "}", D = new RegExp($, "g");
          N && (E = E.slice(1));
          var T = x.newline, m = x.trimLeadingNewline, C = x.trimTrailingNewline, o = typeof T == "string", d = E.length, v = E.map(function(S, b) {
            return S = S.replace(D, "$1"), b === 0 && m && (S = S.replace(l, "")), b === d - 1 && C && (S = S.replace(p2, "")), o && (S = S.replace(/\r\n|\n|\r/g, function(B) {
              return T;
            })), S;
          });
          return v;
        }
        function f(E, N) {
          for (var x = "", I = 0, P = E.length; I < P; I++)
            x += E[I], I < P - 1 && (x += N[I]);
          return x;
        }
        function F(E) {
          return u(E, "raw") && u(E, "length");
        }
        function _(E) {
          var N = s(), x = s();
          function I($) {
            for (var D = [], T = 1; T < arguments.length; T++)
              D[T - 1] = arguments[T];
            if (F($)) {
              var m = $, C = (D[0] === I || D[0] === w) && g.test(m[0]) && y.test(m[1]), o = C ? x : N, d = o.get(m);
              if (d || (d = c(m, C, E), o.set(m, d)), D.length === 0)
                return d[0];
              var v = f(d, C ? D.slice(1) : D);
              return v;
            } else
              return _(i2(i2({}, E), $ || {}));
          }
          var P = i2(I, { string: function($) {
            return c([$], false, E)[0];
          } });
          return P;
        }
        var w = _({ trimLeadingNewline: true, trimTrailingNewline: true });
        if (e.outdent = w, e.default = w, typeof r < "u")
          try {
            r.exports = w, Object.defineProperty(w, "__esModule", { value: true }), w.default = w, w.outdent = w;
          } catch {
          }
      } }), KD = te({ "src/main/core-options.js"(e, r) {
        ne();
        var { outdent: t } = XD(), s = "Config", a = "Editor", n = "Format", u = "Other", i2 = "Output", l = "Global", p2 = "Special", y = { cursorOffset: { since: "1.4.0", category: p2, type: "int", default: -1, range: { start: -1, end: Number.POSITIVE_INFINITY, step: 1 }, description: t`
      Print (to stderr) where a cursor at the given position would move to after formatting.
      This option cannot be used with --range-start and --range-end.
    `, cliCategory: a }, endOfLine: { since: "1.15.0", category: l, type: "choice", default: [{ since: "1.15.0", value: "auto" }, { since: "2.0.0", value: "lf" }], description: "Which end of line characters to apply.", choices: [{ value: "lf", description: "Line Feed only (\\n), common on Linux and macOS as well as inside git repos" }, { value: "crlf", description: "Carriage Return + Line Feed characters (\\r\\n), common on Windows" }, { value: "cr", description: "Carriage Return character only (\\r), used very rarely" }, { value: "auto", description: t`
          Maintain existing
          (mixed values within one file are normalised by looking at what's used after the first line)
        ` }] }, filepath: { since: "1.4.0", category: p2, type: "path", description: "Specify the input filepath. This will be used to do parser inference.", cliName: "stdin-filepath", cliCategory: u, cliDescription: "Path to the file to pretend that stdin comes from." }, insertPragma: { since: "1.8.0", category: p2, type: "boolean", default: false, description: "Insert @format pragma into file's first docblock comment.", cliCategory: u }, parser: { since: "0.0.10", category: l, type: "choice", default: [{ since: "0.0.10", value: "babylon" }, { since: "1.13.0", value: void 0 }], description: "Which parser to use.", exception: (h2) => typeof h2 == "string" || typeof h2 == "function", choices: [{ value: "flow", description: "Flow" }, { value: "babel", since: "1.16.0", description: "JavaScript" }, { value: "babel-flow", since: "1.16.0", description: "Flow" }, { value: "babel-ts", since: "2.0.0", description: "TypeScript" }, { value: "typescript", since: "1.4.0", description: "TypeScript" }, { value: "acorn", since: "2.6.0", description: "JavaScript" }, { value: "espree", since: "2.2.0", description: "JavaScript" }, { value: "meriyah", since: "2.2.0", description: "JavaScript" }, { value: "css", since: "1.7.1", description: "CSS" }, { value: "less", since: "1.7.1", description: "Less" }, { value: "scss", since: "1.7.1", description: "SCSS" }, { value: "json", since: "1.5.0", description: "JSON" }, { value: "json5", since: "1.13.0", description: "JSON5" }, { value: "json-stringify", since: "1.13.0", description: "JSON.stringify" }, { value: "graphql", since: "1.5.0", description: "GraphQL" }, { value: "markdown", since: "1.8.0", description: "Markdown" }, { value: "mdx", since: "1.15.0", description: "MDX" }, { value: "vue", since: "1.10.0", description: "Vue" }, { value: "yaml", since: "1.14.0", description: "YAML" }, { value: "glimmer", since: "2.3.0", description: "Ember / Handlebars" }, { value: "html", since: "1.15.0", description: "HTML" }, { value: "angular", since: "1.15.0", description: "Angular" }, { value: "lwc", since: "1.17.0", description: "Lightning Web Components" }] }, plugins: { since: "1.10.0", type: "path", array: true, default: [{ value: [] }], category: l, description: "Add a plugin. Multiple plugins can be passed as separate `--plugin`s.", exception: (h2) => typeof h2 == "string" || typeof h2 == "object", cliName: "plugin", cliCategory: s }, pluginSearchDirs: { since: "1.13.0", type: "path", array: true, default: [{ value: [] }], category: l, description: t`
      Custom directory that contains prettier plugins in node_modules subdirectory.
      Overrides default behavior when plugins are searched relatively to the location of Prettier.
      Multiple values are accepted.
    `, exception: (h2) => typeof h2 == "string" || typeof h2 == "object", cliName: "plugin-search-dir", cliCategory: s }, printWidth: { since: "0.0.0", category: l, type: "int", default: 80, description: "The line length where Prettier will try wrap.", range: { start: 0, end: Number.POSITIVE_INFINITY, step: 1 } }, rangeEnd: { since: "1.4.0", category: p2, type: "int", default: Number.POSITIVE_INFINITY, range: { start: 0, end: Number.POSITIVE_INFINITY, step: 1 }, description: t`
      Format code ending at a given character offset (exclusive).
      The range will extend forwards to the end of the selected statement.
      This option cannot be used with --cursor-offset.
    `, cliCategory: a }, rangeStart: { since: "1.4.0", category: p2, type: "int", default: 0, range: { start: 0, end: Number.POSITIVE_INFINITY, step: 1 }, description: t`
      Format code starting at a given character offset.
      The range will extend backwards to the start of the first line containing the selected statement.
      This option cannot be used with --cursor-offset.
    `, cliCategory: a }, requirePragma: { since: "1.7.0", category: p2, type: "boolean", default: false, description: t`
      Require either '@prettier' or '@format' to be present in the file's first docblock comment
      in order for it to be formatted.
    `, cliCategory: u }, tabWidth: { type: "int", category: l, default: 2, description: "Number of spaces per indentation level.", range: { start: 0, end: Number.POSITIVE_INFINITY, step: 1 } }, useTabs: { since: "1.0.0", category: l, type: "boolean", default: false, description: "Indent with tabs instead of spaces." }, embeddedLanguageFormatting: { since: "2.1.0", category: l, type: "choice", default: [{ since: "2.1.0", value: "auto" }], description: "Control how Prettier formats quoted code embedded in the file.", choices: [{ value: "auto", description: "Format embedded code if Prettier can automatically identify it." }, { value: "off", description: "Never automatically format embedded code." }] } };
        r.exports = { CATEGORY_CONFIG: s, CATEGORY_EDITOR: a, CATEGORY_FORMAT: n, CATEGORY_OTHER: u, CATEGORY_OUTPUT: i2, CATEGORY_GLOBAL: l, CATEGORY_SPECIAL: p2, options: y };
      } }), Xn = te({ "src/main/support.js"(e, r) {
        ne();
        var t = { compare: zn(), lt: UD(), gte: JD() }, s = zD(), a = Ia().version, n = KD().options;
        function u() {
          let { plugins: l = [], showUnreleased: p2 = false, showDeprecated: y = false, showInternal: h2 = false } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, g = a.split("-", 1)[0], c = l.flatMap((E) => E.languages || []).filter(F), f = s(Object.assign({}, ...l.map((E) => {
            let { options: N } = E;
            return N;
          }), n), "name").filter((E) => F(E) && _(E)).sort((E, N) => E.name === N.name ? 0 : E.name < N.name ? -1 : 1).map(w).map((E) => {
            E = Object.assign({}, E), Array.isArray(E.default) && (E.default = E.default.length === 1 ? E.default[0].value : E.default.filter(F).sort((x, I) => t.compare(I.since, x.since))[0].value), Array.isArray(E.choices) && (E.choices = E.choices.filter((x) => F(x) && _(x)), E.name === "parser" && i2(E, c, l));
            let N = Object.fromEntries(l.filter((x) => x.defaultOptions && x.defaultOptions[E.name] !== void 0).map((x) => [x.name, x.defaultOptions[E.name]]));
            return Object.assign(Object.assign({}, E), {}, { pluginDefaults: N });
          });
          return { languages: c, options: f };
          function F(E) {
            return p2 || !("since" in E) || E.since && t.gte(g, E.since);
          }
          function _(E) {
            return y || !("deprecated" in E) || E.deprecated && t.lt(g, E.deprecated);
          }
          function w(E) {
            if (h2)
              return E;
            return Hn(E, hD);
          }
        }
        function i2(l, p2, y) {
          let h2 = new Set(l.choices.map((g) => g.value));
          for (let g of p2)
            if (g.parsers) {
              for (let c of g.parsers)
                if (!h2.has(c)) {
                  h2.add(c);
                  let f = y.find((_) => _.parsers && _.parsers[c]), F = g.name;
                  f && f.name && (F += ` (plugin: ${f.name})`), l.choices.push({ value: c, description: F });
                }
            }
        }
        r.exports = { getSupportInfo: u };
      } }), Kn = te({ "src/utils/is-non-empty-array.js"(e, r) {
        ne();
        function t(s) {
          return Array.isArray(s) && s.length > 0;
        }
        r.exports = t;
      } }), Pr = te({ "src/utils/text/skip.js"(e, r) {
        ne();
        function t(i2) {
          return (l, p2, y) => {
            let h2 = y && y.backwards;
            if (p2 === false)
              return false;
            let { length: g } = l, c = p2;
            for (; c >= 0 && c < g; ) {
              let f = l.charAt(c);
              if (i2 instanceof RegExp) {
                if (!i2.test(f))
                  return c;
              } else if (!i2.includes(f))
                return c;
              h2 ? c-- : c++;
            }
            return c === -1 || c === g ? c : false;
          };
        }
        var s = t(/\s/), a = t(" 	"), n = t(",; 	"), u = t(/[^\n\r]/);
        r.exports = { skipWhitespace: s, skipSpaces: a, skipToLineEnd: n, skipEverythingButNewLine: u };
      } }), Ra = te({ "src/utils/text/skip-inline-comment.js"(e, r) {
        ne();
        function t(s, a) {
          if (a === false)
            return false;
          if (s.charAt(a) === "/" && s.charAt(a + 1) === "*") {
            for (let n = a + 2; n < s.length; ++n)
              if (s.charAt(n) === "*" && s.charAt(n + 1) === "/")
                return n + 2;
          }
          return a;
        }
        r.exports = t;
      } }), $a = te({ "src/utils/text/skip-trailing-comment.js"(e, r) {
        ne();
        var { skipEverythingButNewLine: t } = Pr();
        function s(a, n) {
          return n === false ? false : a.charAt(n) === "/" && a.charAt(n + 1) === "/" ? t(a, n) : n;
        }
        r.exports = s;
      } }), Va = te({ "src/utils/text/skip-newline.js"(e, r) {
        ne();
        function t(s, a, n) {
          let u = n && n.backwards;
          if (a === false)
            return false;
          let i2 = s.charAt(a);
          if (u) {
            if (s.charAt(a - 1) === "\r" && i2 === `
`)
              return a - 2;
            if (i2 === `
` || i2 === "\r" || i2 === "\u2028" || i2 === "\u2029")
              return a - 1;
          } else {
            if (i2 === "\r" && s.charAt(a + 1) === `
`)
              return a + 2;
            if (i2 === `
` || i2 === "\r" || i2 === "\u2028" || i2 === "\u2029")
              return a + 1;
          }
          return a;
        }
        r.exports = t;
      } }), YD = te({ "src/utils/text/get-next-non-space-non-comment-character-index-with-start-index.js"(e, r) {
        ne();
        var t = Ra(), s = Va(), a = $a(), { skipSpaces: n } = Pr();
        function u(i2, l) {
          let p2 = null, y = l;
          for (; y !== p2; )
            p2 = y, y = n(i2, y), y = t(i2, y), y = a(i2, y), y = s(i2, y);
          return y;
        }
        r.exports = u;
      } }), Ue = te({ "src/common/util.js"(e, r) {
        ne();
        var { default: t } = ($D(), ft(ja)), s = lt(), { getSupportInfo: a } = Xn(), n = Kn(), u = Oa(), { skipWhitespace: i2, skipSpaces: l, skipToLineEnd: p2, skipEverythingButNewLine: y } = Pr(), h2 = Ra(), g = $a(), c = Va(), f = YD(), F = (V) => V[V.length - 2];
        function _(V) {
          return (j, Y, ie) => {
            let ee = ie && ie.backwards;
            if (Y === false)
              return false;
            let { length: ce } = j, W = Y;
            for (; W >= 0 && W < ce; ) {
              let K = j.charAt(W);
              if (V instanceof RegExp) {
                if (!V.test(K))
                  return W;
              } else if (!V.includes(K))
                return W;
              ee ? W-- : W++;
            }
            return W === -1 || W === ce ? W : false;
          };
        }
        function w(V, j) {
          let Y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, ie = l(V, Y.backwards ? j - 1 : j, Y), ee = c(V, ie, Y);
          return ie !== ee;
        }
        function E(V, j, Y) {
          for (let ie = j; ie < Y; ++ie)
            if (V.charAt(ie) === `
`)
              return true;
          return false;
        }
        function N(V, j, Y) {
          let ie = Y(j) - 1;
          ie = l(V, ie, { backwards: true }), ie = c(V, ie, { backwards: true }), ie = l(V, ie, { backwards: true });
          let ee = c(V, ie, { backwards: true });
          return ie !== ee;
        }
        function x(V, j) {
          let Y = null, ie = j;
          for (; ie !== Y; )
            Y = ie, ie = p2(V, ie), ie = h2(V, ie), ie = l(V, ie);
          return ie = g(V, ie), ie = c(V, ie), ie !== false && w(V, ie);
        }
        function I(V, j, Y) {
          return x(V, Y(j));
        }
        function P(V, j, Y) {
          return f(V, Y(j));
        }
        function $(V, j, Y) {
          return V.charAt(P(V, j, Y));
        }
        function D(V, j) {
          let Y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return l(V, Y.backwards ? j - 1 : j, Y) !== j;
        }
        function T(V, j) {
          let Y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, ie = 0;
          for (let ee = Y; ee < V.length; ++ee)
            V[ee] === "	" ? ie = ie + j - ie % j : ie++;
          return ie;
        }
        function m(V, j) {
          let Y = V.lastIndexOf(`
`);
          return Y === -1 ? 0 : T(V.slice(Y + 1).match(/^[\t ]*/)[0], j);
        }
        function C(V, j) {
          let Y = { quote: '"', regex: /"/g, escaped: "&quot;" }, ie = { quote: "'", regex: /'/g, escaped: "&apos;" }, ee = j === "'" ? ie : Y, ce = ee === ie ? Y : ie, W = ee;
          if (V.includes(ee.quote) || V.includes(ce.quote)) {
            let K = (V.match(ee.regex) || []).length, de = (V.match(ce.regex) || []).length;
            W = K > de ? ce : ee;
          }
          return W;
        }
        function o(V, j) {
          let Y = V.slice(1, -1), ie = j.parser === "json" || j.parser === "json5" && j.quoteProps === "preserve" && !j.singleQuote ? '"' : j.__isInHtmlAttribute ? "'" : C(Y, j.singleQuote ? "'" : '"').quote;
          return d(Y, ie, !(j.parser === "css" || j.parser === "less" || j.parser === "scss" || j.__embeddedInHtml));
        }
        function d(V, j, Y) {
          let ie = j === '"' ? "'" : '"', ee = /\\(.)|(["'])/gs, ce = V.replace(ee, (W, K, de) => K === ie ? K : de === j ? "\\" + de : de || (Y && /^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/.test(K) ? K : "\\" + K));
          return j + ce + j;
        }
        function v(V) {
          return V.toLowerCase().replace(/^([+-]?[\d.]+e)(?:\+|(-))?0*(\d)/, "$1$2$3").replace(/^([+-]?[\d.]+)e[+-]?0+$/, "$1").replace(/^([+-])?\./, "$10.").replace(/(\.\d+?)0+(?=e|$)/, "$1").replace(/\.(?=e|$)/, "");
        }
        function S(V, j) {
          let Y = V.match(new RegExp(`(${t(j)})+`, "g"));
          return Y === null ? 0 : Y.reduce((ie, ee) => Math.max(ie, ee.length / j.length), 0);
        }
        function b(V, j) {
          let Y = V.match(new RegExp(`(${t(j)})+`, "g"));
          if (Y === null)
            return 0;
          let ie = /* @__PURE__ */ new Map(), ee = 0;
          for (let ce of Y) {
            let W = ce.length / j.length;
            ie.set(W, true), W > ee && (ee = W);
          }
          for (let ce = 1; ce < ee; ce++)
            if (!ie.get(ce))
              return ce;
          return ee + 1;
        }
        function B(V, j) {
          (V.comments || (V.comments = [])).push(j), j.printed = false, j.nodeDescription = Q(V);
        }
        function k(V, j) {
          j.leading = true, j.trailing = false, B(V, j);
        }
        function M(V, j, Y) {
          j.leading = false, j.trailing = false, Y && (j.marker = Y), B(V, j);
        }
        function R(V, j) {
          j.leading = false, j.trailing = true, B(V, j);
        }
        function q(V, j) {
          let { languages: Y } = a({ plugins: j.plugins }), ie = Y.find((ee) => {
            let { name: ce } = ee;
            return ce.toLowerCase() === V;
          }) || Y.find((ee) => {
            let { aliases: ce } = ee;
            return Array.isArray(ce) && ce.includes(V);
          }) || Y.find((ee) => {
            let { extensions: ce } = ee;
            return Array.isArray(ce) && ce.includes(`.${V}`);
          });
          return ie && ie.parsers[0];
        }
        function J(V) {
          return V && V.type === "front-matter";
        }
        function L(V) {
          let j = /* @__PURE__ */ new WeakMap();
          return function(Y) {
            return j.has(Y) || j.set(Y, Symbol(V)), j.get(Y);
          };
        }
        function Q(V) {
          let j = V.type || V.kind || "(unknown type)", Y = String(V.name || V.id && (typeof V.id == "object" ? V.id.name : V.id) || V.key && (typeof V.key == "object" ? V.key.name : V.key) || V.value && (typeof V.value == "object" ? "" : String(V.value)) || V.operator || "");
          return Y.length > 20 && (Y = Y.slice(0, 19) + "…"), j + (Y ? " " + Y : "");
        }
        r.exports = { inferParserByLanguage: q, getStringWidth: u, getMaxContinuousCount: S, getMinNotPresentContinuousCount: b, getPenultimate: F, getLast: s, getNextNonSpaceNonCommentCharacterIndexWithStartIndex: f, getNextNonSpaceNonCommentCharacterIndex: P, getNextNonSpaceNonCommentCharacter: $, skip: _, skipWhitespace: i2, skipSpaces: l, skipToLineEnd: p2, skipEverythingButNewLine: y, skipInlineComment: h2, skipTrailingComment: g, skipNewline: c, isNextLineEmptyAfterIndex: x, isNextLineEmpty: I, isPreviousLineEmpty: N, hasNewline: w, hasNewlineInRange: E, hasSpaces: D, getAlignmentSize: T, getIndentSize: m, getPreferredQuote: C, printString: o, printNumber: v, makeString: d, addLeadingComment: k, addDanglingComment: M, addTrailingComment: R, isFrontMatterNode: J, isNonEmptyArray: n, createGroupIdMapper: L };
      } }), Wa = {};
      Kt(Wa, { basename: () => za, default: () => Ka, delimiter: () => Mn, dirname: () => Ja, extname: () => Xa, isAbsolute: () => Qn, join: () => Ga, normalize: () => Yn, relative: () => Ua, resolve: () => wr, sep: () => qn });
      function Ha(e, r) {
        for (var t = 0, s = e.length - 1; s >= 0; s--) {
          var a = e[s];
          a === "." ? e.splice(s, 1) : a === ".." ? (e.splice(s, 1), t++) : t && (e.splice(s, 1), t--);
        }
        if (r)
          for (; t--; t)
            e.unshift("..");
        return e;
      }
      function wr() {
        for (var e = "", r = false, t = arguments.length - 1; t >= -1 && !r; t--) {
          var s = t >= 0 ? arguments[t] : "/";
          if (typeof s != "string")
            throw new TypeError("Arguments to path.resolve must be strings");
          if (!s)
            continue;
          e = s + "/" + e, r = s.charAt(0) === "/";
        }
        return e = Ha(Zn(e.split("/"), function(a) {
          return !!a;
        }), !r).join("/"), (r ? "/" : "") + e || ".";
      }
      function Yn(e) {
        var r = Qn(e), t = Ya(e, -1) === "/";
        return e = Ha(Zn(e.split("/"), function(s) {
          return !!s;
        }), !r).join("/"), !e && !r && (e = "."), e && t && (e += "/"), (r ? "/" : "") + e;
      }
      function Qn(e) {
        return e.charAt(0) === "/";
      }
      function Ga() {
        var e = Array.prototype.slice.call(arguments, 0);
        return Yn(Zn(e, function(r, t) {
          if (typeof r != "string")
            throw new TypeError("Arguments to path.join must be strings");
          return r;
        }).join("/"));
      }
      function Ua(e, r) {
        e = wr(e).substr(1), r = wr(r).substr(1);
        function t(p2) {
          for (var y = 0; y < p2.length && p2[y] === ""; y++)
            ;
          for (var h2 = p2.length - 1; h2 >= 0 && p2[h2] === ""; h2--)
            ;
          return y > h2 ? [] : p2.slice(y, h2 - y + 1);
        }
        for (var s = t(e.split("/")), a = t(r.split("/")), n = Math.min(s.length, a.length), u = n, i2 = 0; i2 < n; i2++)
          if (s[i2] !== a[i2]) {
            u = i2;
            break;
          }
        for (var l = [], i2 = u; i2 < s.length; i2++)
          l.push("..");
        return l = l.concat(a.slice(u)), l.join("/");
      }
      function Ja(e) {
        var r = Ir(e), t = r[0], s = r[1];
        return !t && !s ? "." : (s && (s = s.substr(0, s.length - 1)), t + s);
      }
      function za(e, r) {
        var t = Ir(e)[2];
        return r && t.substr(-1 * r.length) === r && (t = t.substr(0, t.length - r.length)), t;
      }
      function Xa(e) {
        return Ir(e)[3];
      }
      function Zn(e, r) {
        if (e.filter)
          return e.filter(r);
        for (var t = [], s = 0; s < e.length; s++)
          r(e[s], s, e) && t.push(e[s]);
        return t;
      }
      var Na, Ir, qn, Mn, Ka, Ya, QD = ht({ "node-modules-polyfills:path"() {
        ne(), Na = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/, Ir = function(e) {
          return Na.exec(e).slice(1);
        }, qn = "/", Mn = ":", Ka = { extname: Xa, basename: za, dirname: Ja, sep: qn, delimiter: Mn, relative: Ua, join: Ga, isAbsolute: Qn, normalize: Yn, resolve: wr }, Ya = "ab".substr(-1) === "b" ? function(e, r, t) {
          return e.substr(r, t);
        } : function(e, r, t) {
          return r < 0 && (r = e.length + r), e.substr(r, t);
        };
      } }), ZD = te({ "node-modules-polyfills-commonjs:path"(e, r) {
        ne();
        var t = (QD(), ft(Wa));
        if (t && t.default) {
          r.exports = t.default;
          for (let s in t)
            r.exports[s] = t[s];
        } else
          t && (r.exports = t);
      } }), Qt = te({ "src/common/errors.js"(e, r) {
        ne();
        var t = class extends Error {
        }, s = class extends Error {
        }, a = class extends Error {
        }, n = class extends Error {
        };
        r.exports = { ConfigError: t, DebugError: s, UndefinedParserError: a, ArgExpansionBailout: n };
      } }), vt = {};
      Kt(vt, { __assign: () => Nr, __asyncDelegator: () => fm, __asyncGenerator: () => pm, __asyncValues: () => Dm, __await: () => Xt, __awaiter: () => sm, __classPrivateFieldGet: () => ym, __classPrivateFieldSet: () => hm, __createBinding: () => am, __decorate: () => rm, __exportStar: () => om, __extends: () => em, __generator: () => im, __importDefault: () => gm, __importStar: () => dm, __makeTemplateObject: () => mm, __metadata: () => um, __param: () => nm, __read: () => Qa, __rest: () => tm, __spread: () => lm, __spreadArrays: () => cm, __values: () => Rn });
      function em(e, r) {
        Br(e, r);
        function t() {
          this.constructor = e;
        }
        e.prototype = r === null ? Object.create(r) : (t.prototype = r.prototype, new t());
      }
      function tm(e, r) {
        var t = {};
        for (var s in e)
          Object.prototype.hasOwnProperty.call(e, s) && r.indexOf(s) < 0 && (t[s] = e[s]);
        if (e != null && typeof Object.getOwnPropertySymbols == "function")
          for (var a = 0, s = Object.getOwnPropertySymbols(e); a < s.length; a++)
            r.indexOf(s[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, s[a]) && (t[s[a]] = e[s[a]]);
        return t;
      }
      function rm(e, r, t, s) {
        var a = arguments.length, n = a < 3 ? r : s === null ? s = Object.getOwnPropertyDescriptor(r, t) : s, u;
        if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
          n = Reflect.decorate(e, r, t, s);
        else
          for (var i2 = e.length - 1; i2 >= 0; i2--)
            (u = e[i2]) && (n = (a < 3 ? u(n) : a > 3 ? u(r, t, n) : u(r, t)) || n);
        return a > 3 && n && Object.defineProperty(r, t, n), n;
      }
      function nm(e, r) {
        return function(t, s) {
          r(t, s, e);
        };
      }
      function um(e, r) {
        if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
          return Reflect.metadata(e, r);
      }
      function sm(e, r, t, s) {
        function a(n) {
          return n instanceof t ? n : new t(function(u) {
            u(n);
          });
        }
        return new (t || (t = Promise))(function(n, u) {
          function i2(y) {
            try {
              p2(s.next(y));
            } catch (h2) {
              u(h2);
            }
          }
          function l(y) {
            try {
              p2(s.throw(y));
            } catch (h2) {
              u(h2);
            }
          }
          function p2(y) {
            y.done ? n(y.value) : a(y.value).then(i2, l);
          }
          p2((s = s.apply(e, r || [])).next());
        });
      }
      function im(e, r) {
        var t = { label: 0, sent: function() {
          if (n[0] & 1)
            throw n[1];
          return n[1];
        }, trys: [], ops: [] }, s, a, n, u;
        return u = { next: i2(0), throw: i2(1), return: i2(2) }, typeof Symbol == "function" && (u[Symbol.iterator] = function() {
          return this;
        }), u;
        function i2(p2) {
          return function(y) {
            return l([p2, y]);
          };
        }
        function l(p2) {
          if (s)
            throw new TypeError("Generator is already executing.");
          for (; t; )
            try {
              if (s = 1, a && (n = p2[0] & 2 ? a.return : p2[0] ? a.throw || ((n = a.return) && n.call(a), 0) : a.next) && !(n = n.call(a, p2[1])).done)
                return n;
              switch (a = 0, n && (p2 = [p2[0] & 2, n.value]), p2[0]) {
                case 0:
                case 1:
                  n = p2;
                  break;
                case 4:
                  return t.label++, { value: p2[1], done: false };
                case 5:
                  t.label++, a = p2[1], p2 = [0];
                  continue;
                case 7:
                  p2 = t.ops.pop(), t.trys.pop();
                  continue;
                default:
                  if (n = t.trys, !(n = n.length > 0 && n[n.length - 1]) && (p2[0] === 6 || p2[0] === 2)) {
                    t = 0;
                    continue;
                  }
                  if (p2[0] === 3 && (!n || p2[1] > n[0] && p2[1] < n[3])) {
                    t.label = p2[1];
                    break;
                  }
                  if (p2[0] === 6 && t.label < n[1]) {
                    t.label = n[1], n = p2;
                    break;
                  }
                  if (n && t.label < n[2]) {
                    t.label = n[2], t.ops.push(p2);
                    break;
                  }
                  n[2] && t.ops.pop(), t.trys.pop();
                  continue;
              }
              p2 = r.call(e, t);
            } catch (y) {
              p2 = [6, y], a = 0;
            } finally {
              s = n = 0;
            }
          if (p2[0] & 5)
            throw p2[1];
          return { value: p2[0] ? p2[1] : void 0, done: true };
        }
      }
      function am(e, r, t, s) {
        s === void 0 && (s = t), e[s] = r[t];
      }
      function om(e, r) {
        for (var t in e)
          t !== "default" && !r.hasOwnProperty(t) && (r[t] = e[t]);
      }
      function Rn(e) {
        var r = typeof Symbol == "function" && Symbol.iterator, t = r && e[r], s = 0;
        if (t)
          return t.call(e);
        if (e && typeof e.length == "number")
          return { next: function() {
            return e && s >= e.length && (e = void 0), { value: e && e[s++], done: !e };
          } };
        throw new TypeError(r ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }
      function Qa(e, r) {
        var t = typeof Symbol == "function" && e[Symbol.iterator];
        if (!t)
          return e;
        var s = t.call(e), a, n = [], u;
        try {
          for (; (r === void 0 || r-- > 0) && !(a = s.next()).done; )
            n.push(a.value);
        } catch (i2) {
          u = { error: i2 };
        } finally {
          try {
            a && !a.done && (t = s.return) && t.call(s);
          } finally {
            if (u)
              throw u.error;
          }
        }
        return n;
      }
      function lm() {
        for (var e = [], r = 0; r < arguments.length; r++)
          e = e.concat(Qa(arguments[r]));
        return e;
      }
      function cm() {
        for (var e = 0, r = 0, t = arguments.length; r < t; r++)
          e += arguments[r].length;
        for (var s = Array(e), a = 0, r = 0; r < t; r++)
          for (var n = arguments[r], u = 0, i2 = n.length; u < i2; u++, a++)
            s[a] = n[u];
        return s;
      }
      function Xt(e) {
        return this instanceof Xt ? (this.v = e, this) : new Xt(e);
      }
      function pm(e, r, t) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var s = t.apply(e, r || []), a, n = [];
        return a = {}, u("next"), u("throw"), u("return"), a[Symbol.asyncIterator] = function() {
          return this;
        }, a;
        function u(g) {
          s[g] && (a[g] = function(c) {
            return new Promise(function(f, F) {
              n.push([g, c, f, F]) > 1 || i2(g, c);
            });
          });
        }
        function i2(g, c) {
          try {
            l(s[g](c));
          } catch (f) {
            h2(n[0][3], f);
          }
        }
        function l(g) {
          g.value instanceof Xt ? Promise.resolve(g.value.v).then(p2, y) : h2(n[0][2], g);
        }
        function p2(g) {
          i2("next", g);
        }
        function y(g) {
          i2("throw", g);
        }
        function h2(g, c) {
          g(c), n.shift(), n.length && i2(n[0][0], n[0][1]);
        }
      }
      function fm(e) {
        var r, t;
        return r = {}, s("next"), s("throw", function(a) {
          throw a;
        }), s("return"), r[Symbol.iterator] = function() {
          return this;
        }, r;
        function s(a, n) {
          r[a] = e[a] ? function(u) {
            return (t = !t) ? { value: Xt(e[a](u)), done: a === "return" } : n ? n(u) : u;
          } : n;
        }
      }
      function Dm(e) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var r = e[Symbol.asyncIterator], t;
        return r ? r.call(e) : (e = typeof Rn == "function" ? Rn(e) : e[Symbol.iterator](), t = {}, s("next"), s("throw"), s("return"), t[Symbol.asyncIterator] = function() {
          return this;
        }, t);
        function s(n) {
          t[n] = e[n] && function(u) {
            return new Promise(function(i2, l) {
              u = e[n](u), a(i2, l, u.done, u.value);
            });
          };
        }
        function a(n, u, i2, l) {
          Promise.resolve(l).then(function(p2) {
            n({ value: p2, done: i2 });
          }, u);
        }
      }
      function mm(e, r) {
        return Object.defineProperty ? Object.defineProperty(e, "raw", { value: r }) : e.raw = r, e;
      }
      function dm(e) {
        if (e && e.__esModule)
          return e;
        var r = {};
        if (e != null)
          for (var t in e)
            Object.hasOwnProperty.call(e, t) && (r[t] = e[t]);
        return r.default = e, r;
      }
      function gm(e) {
        return e && e.__esModule ? e : { default: e };
      }
      function ym(e, r) {
        if (!r.has(e))
          throw new TypeError("attempted to get private field on non-instance");
        return r.get(e);
      }
      function hm(e, r, t) {
        if (!r.has(e))
          throw new TypeError("attempted to set private field on non-instance");
        return r.set(e, t), t;
      }
      var Br, Nr, Et = ht({ "node_modules/tslib/tslib.es6.js"() {
        ne(), Br = function(e, r) {
          return Br = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t, s) {
            t.__proto__ = s;
          } || function(t, s) {
            for (var a in s)
              s.hasOwnProperty(a) && (t[a] = s[a]);
          }, Br(e, r);
        }, Nr = function() {
          return Nr = Object.assign || function(r) {
            for (var t, s = 1, a = arguments.length; s < a; s++) {
              t = arguments[s];
              for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (r[n] = t[n]);
            }
            return r;
          }, Nr.apply(this, arguments);
        };
      } }), Za = te({ "node_modules/vnopts/lib/descriptors/api.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true }), e.apiDescriptor = { key: (r) => /^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(r) ? r : JSON.stringify(r), value(r) {
          if (r === null || typeof r != "object")
            return JSON.stringify(r);
          if (Array.isArray(r))
            return `[${r.map((s) => e.apiDescriptor.value(s)).join(", ")}]`;
          let t = Object.keys(r);
          return t.length === 0 ? "{}" : `{ ${t.map((s) => `${e.apiDescriptor.key(s)}: ${e.apiDescriptor.value(r[s])}`).join(", ")} }`;
        }, pair: (r) => {
          let { key: t, value: s } = r;
          return e.apiDescriptor.value({ [t]: s });
        } };
      } }), vm = te({ "node_modules/vnopts/lib/descriptors/index.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = (Et(), ft(vt));
        r.__exportStar(Za(), e);
      } }), kr = te({ "scripts/build/shims/chalk.cjs"(e, r) {
        ne();
        var t = (s) => s;
        t.grey = t, t.red = t, t.bold = t, t.yellow = t, t.blue = t, t.default = t, r.exports = t;
      } }), eo = te({ "node_modules/vnopts/lib/handlers/deprecated/common.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = kr();
        e.commonDeprecatedHandler = (t, s, a) => {
          let { descriptor: n } = a, u = [`${r.default.yellow(typeof t == "string" ? n.key(t) : n.pair(t))} is deprecated`];
          return s && u.push(`we now treat it as ${r.default.blue(typeof s == "string" ? n.key(s) : n.pair(s))}`), u.join("; ") + ".";
        };
      } }), Cm = te({ "node_modules/vnopts/lib/handlers/deprecated/index.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = (Et(), ft(vt));
        r.__exportStar(eo(), e);
      } }), Em = te({ "node_modules/vnopts/lib/handlers/invalid/common.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = kr();
        e.commonInvalidHandler = (t, s, a) => [`Invalid ${r.default.red(a.descriptor.key(t))} value.`, `Expected ${r.default.blue(a.schemas[t].expected(a))},`, `but received ${r.default.red(a.descriptor.value(s))}.`].join(" ");
      } }), to = te({ "node_modules/vnopts/lib/handlers/invalid/index.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = (Et(), ft(vt));
        r.__exportStar(Em(), e);
      } }), Fm = te({ "node_modules/vnopts/node_modules/leven/index.js"(e, r) {
        ne();
        var t = [], s = [];
        r.exports = function(a, n) {
          if (a === n)
            return 0;
          var u = a;
          a.length > n.length && (a = n, n = u);
          var i2 = a.length, l = n.length;
          if (i2 === 0)
            return l;
          if (l === 0)
            return i2;
          for (; i2 > 0 && a.charCodeAt(~-i2) === n.charCodeAt(~-l); )
            i2--, l--;
          if (i2 === 0)
            return l;
          for (var p2 = 0; p2 < i2 && a.charCodeAt(p2) === n.charCodeAt(p2); )
            p2++;
          if (i2 -= p2, l -= p2, i2 === 0)
            return l;
          for (var y, h2, g, c, f = 0, F = 0; f < i2; )
            s[p2 + f] = a.charCodeAt(p2 + f), t[f] = ++f;
          for (; F < l; )
            for (y = n.charCodeAt(p2 + F), g = F++, h2 = F, f = 0; f < i2; f++)
              c = y === s[p2 + f] ? g : g + 1, g = t[f], h2 = t[f] = g > h2 ? c > h2 ? h2 + 1 : c : c > g ? g + 1 : c;
          return h2;
        };
      } }), ro = te({ "node_modules/vnopts/lib/handlers/unknown/leven.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = kr(), t = Fm();
        e.levenUnknownHandler = (s, a, n) => {
          let { descriptor: u, logger: i2, schemas: l } = n, p2 = [`Ignored unknown option ${r.default.yellow(u.pair({ key: s, value: a }))}.`], y = Object.keys(l).sort().find((h2) => t(s, h2) < 3);
          y && p2.push(`Did you mean ${r.default.blue(u.key(y))}?`), i2.warn(p2.join(" "));
        };
      } }), Am = te({ "node_modules/vnopts/lib/handlers/unknown/index.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = (Et(), ft(vt));
        r.__exportStar(ro(), e);
      } }), Sm = te({ "node_modules/vnopts/lib/handlers/index.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = (Et(), ft(vt));
        r.__exportStar(Cm(), e), r.__exportStar(to(), e), r.__exportStar(Am(), e);
      } }), Ft = te({ "node_modules/vnopts/lib/schema.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = ["default", "expected", "validate", "deprecated", "forward", "redirect", "overlap", "preprocess", "postprocess"];
        function t(n, u) {
          let i2 = new n(u), l = Object.create(i2);
          for (let p2 of r)
            p2 in u && (l[p2] = a(u[p2], i2, s.prototype[p2].length));
          return l;
        }
        e.createSchema = t;
        var s = class {
          constructor(n) {
            this.name = n.name;
          }
          static create(n) {
            return t(this, n);
          }
          default(n) {
          }
          expected(n) {
            return "nothing";
          }
          validate(n, u) {
            return false;
          }
          deprecated(n, u) {
            return false;
          }
          forward(n, u) {
          }
          redirect(n, u) {
          }
          overlap(n, u, i2) {
            return n;
          }
          preprocess(n, u) {
            return n;
          }
          postprocess(n, u) {
            return n;
          }
        };
        e.Schema = s;
        function a(n, u, i2) {
          return typeof n == "function" ? function() {
            for (var l = arguments.length, p2 = new Array(l), y = 0; y < l; y++)
              p2[y] = arguments[y];
            return n(...p2.slice(0, i2 - 1), u, ...p2.slice(i2 - 1));
          } : () => n;
        }
      } }), xm = te({ "node_modules/vnopts/lib/schemas/alias.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = Ft(), t = class extends r.Schema {
          constructor(s) {
            super(s), this._sourceName = s.sourceName;
          }
          expected(s) {
            return s.schemas[this._sourceName].expected(s);
          }
          validate(s, a) {
            return a.schemas[this._sourceName].validate(s, a);
          }
          redirect(s, a) {
            return this._sourceName;
          }
        };
        e.AliasSchema = t;
      } }), bm = te({ "node_modules/vnopts/lib/schemas/any.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = Ft(), t = class extends r.Schema {
          expected() {
            return "anything";
          }
          validate() {
            return true;
          }
        };
        e.AnySchema = t;
      } }), Tm = te({ "node_modules/vnopts/lib/schemas/array.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = (Et(), ft(vt)), t = Ft(), s = class extends t.Schema {
          constructor(n) {
            var { valueSchema: u, name: i2 = u.name } = n, l = r.__rest(n, ["valueSchema", "name"]);
            super(Object.assign({}, l, { name: i2 })), this._valueSchema = u;
          }
          expected(n) {
            return `an array of ${this._valueSchema.expected(n)}`;
          }
          validate(n, u) {
            if (!Array.isArray(n))
              return false;
            let i2 = [];
            for (let l of n) {
              let p2 = u.normalizeValidateResult(this._valueSchema.validate(l, u), l);
              p2 !== true && i2.push(p2.value);
            }
            return i2.length === 0 ? true : { value: i2 };
          }
          deprecated(n, u) {
            let i2 = [];
            for (let l of n) {
              let p2 = u.normalizeDeprecatedResult(this._valueSchema.deprecated(l, u), l);
              p2 !== false && i2.push(...p2.map((y) => {
                let { value: h2 } = y;
                return { value: [h2] };
              }));
            }
            return i2;
          }
          forward(n, u) {
            let i2 = [];
            for (let l of n) {
              let p2 = u.normalizeForwardResult(this._valueSchema.forward(l, u), l);
              i2.push(...p2.map(a));
            }
            return i2;
          }
          redirect(n, u) {
            let i2 = [], l = [];
            for (let p2 of n) {
              let y = u.normalizeRedirectResult(this._valueSchema.redirect(p2, u), p2);
              "remain" in y && i2.push(y.remain), l.push(...y.redirect.map(a));
            }
            return i2.length === 0 ? { redirect: l } : { redirect: l, remain: i2 };
          }
          overlap(n, u) {
            return n.concat(u);
          }
        };
        e.ArraySchema = s;
        function a(n) {
          let { from: u, to: i2 } = n;
          return { from: [u], to: i2 };
        }
      } }), Bm = te({ "node_modules/vnopts/lib/schemas/boolean.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = Ft(), t = class extends r.Schema {
          expected() {
            return "true or false";
          }
          validate(s) {
            return typeof s == "boolean";
          }
        };
        e.BooleanSchema = t;
      } }), eu = te({ "node_modules/vnopts/lib/utils.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        function r(c, f) {
          let F = /* @__PURE__ */ Object.create(null);
          for (let _ of c) {
            let w = _[f];
            if (F[w])
              throw new Error(`Duplicate ${f} ${JSON.stringify(w)}`);
            F[w] = _;
          }
          return F;
        }
        e.recordFromArray = r;
        function t(c, f) {
          let F = /* @__PURE__ */ new Map();
          for (let _ of c) {
            let w = _[f];
            if (F.has(w))
              throw new Error(`Duplicate ${f} ${JSON.stringify(w)}`);
            F.set(w, _);
          }
          return F;
        }
        e.mapFromArray = t;
        function s() {
          let c = /* @__PURE__ */ Object.create(null);
          return (f) => {
            let F = JSON.stringify(f);
            return c[F] ? true : (c[F] = true, false);
          };
        }
        e.createAutoChecklist = s;
        function a(c, f) {
          let F = [], _ = [];
          for (let w of c)
            f(w) ? F.push(w) : _.push(w);
          return [F, _];
        }
        e.partition = a;
        function n(c) {
          return c === Math.floor(c);
        }
        e.isInt = n;
        function u(c, f) {
          if (c === f)
            return 0;
          let F = typeof c, _ = typeof f, w = ["undefined", "object", "boolean", "number", "string"];
          return F !== _ ? w.indexOf(F) - w.indexOf(_) : F !== "string" ? Number(c) - Number(f) : c.localeCompare(f);
        }
        e.comparePrimitive = u;
        function i2(c) {
          return c === void 0 ? {} : c;
        }
        e.normalizeDefaultResult = i2;
        function l(c, f) {
          return c === true ? true : c === false ? { value: f } : c;
        }
        e.normalizeValidateResult = l;
        function p2(c, f) {
          let F = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          return c === false ? false : c === true ? F ? true : [{ value: f }] : "value" in c ? [c] : c.length === 0 ? false : c;
        }
        e.normalizeDeprecatedResult = p2;
        function y(c, f) {
          return typeof c == "string" || "key" in c ? { from: f, to: c } : "from" in c ? { from: c.from, to: c.to } : { from: f, to: c.to };
        }
        e.normalizeTransferResult = y;
        function h2(c, f) {
          return c === void 0 ? [] : Array.isArray(c) ? c.map((F) => y(F, f)) : [y(c, f)];
        }
        e.normalizeForwardResult = h2;
        function g(c, f) {
          let F = h2(typeof c == "object" && "redirect" in c ? c.redirect : c, f);
          return F.length === 0 ? { remain: f, redirect: F } : typeof c == "object" && "remain" in c ? { remain: c.remain, redirect: F } : { redirect: F };
        }
        e.normalizeRedirectResult = g;
      } }), Nm = te({ "node_modules/vnopts/lib/schemas/choice.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = Ft(), t = eu(), s = class extends r.Schema {
          constructor(a) {
            super(a), this._choices = t.mapFromArray(a.choices.map((n) => n && typeof n == "object" ? n : { value: n }), "value");
          }
          expected(a) {
            let { descriptor: n } = a, u = Array.from(this._choices.keys()).map((p2) => this._choices.get(p2)).filter((p2) => !p2.deprecated).map((p2) => p2.value).sort(t.comparePrimitive).map(n.value), i2 = u.slice(0, -2), l = u.slice(-2);
            return i2.concat(l.join(" or ")).join(", ");
          }
          validate(a) {
            return this._choices.has(a);
          }
          deprecated(a) {
            let n = this._choices.get(a);
            return n && n.deprecated ? { value: a } : false;
          }
          forward(a) {
            let n = this._choices.get(a);
            return n ? n.forward : void 0;
          }
          redirect(a) {
            let n = this._choices.get(a);
            return n ? n.redirect : void 0;
          }
        };
        e.ChoiceSchema = s;
      } }), no = te({ "node_modules/vnopts/lib/schemas/number.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = Ft(), t = class extends r.Schema {
          expected() {
            return "a number";
          }
          validate(s, a) {
            return typeof s == "number";
          }
        };
        e.NumberSchema = t;
      } }), wm = te({ "node_modules/vnopts/lib/schemas/integer.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = eu(), t = no(), s = class extends t.NumberSchema {
          expected() {
            return "an integer";
          }
          validate(a, n) {
            return n.normalizeValidateResult(super.validate(a, n), a) === true && r.isInt(a);
          }
        };
        e.IntegerSchema = s;
      } }), _m = te({ "node_modules/vnopts/lib/schemas/string.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = Ft(), t = class extends r.Schema {
          expected() {
            return "a string";
          }
          validate(s) {
            return typeof s == "string";
          }
        };
        e.StringSchema = t;
      } }), Pm = te({ "node_modules/vnopts/lib/schemas/index.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = (Et(), ft(vt));
        r.__exportStar(xm(), e), r.__exportStar(bm(), e), r.__exportStar(Tm(), e), r.__exportStar(Bm(), e), r.__exportStar(Nm(), e), r.__exportStar(wm(), e), r.__exportStar(no(), e), r.__exportStar(_m(), e);
      } }), Im = te({ "node_modules/vnopts/lib/defaults.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = Za(), t = eo(), s = to(), a = ro();
        e.defaultDescriptor = r.apiDescriptor, e.defaultUnknownHandler = a.levenUnknownHandler, e.defaultInvalidHandler = s.commonInvalidHandler, e.defaultDeprecatedHandler = t.commonDeprecatedHandler;
      } }), km = te({ "node_modules/vnopts/lib/normalize.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = Im(), t = eu();
        e.normalize = (a, n, u) => new s(n, u).normalize(a);
        var s = class {
          constructor(a, n) {
            let { logger: u = console, descriptor: i2 = r.defaultDescriptor, unknown: l = r.defaultUnknownHandler, invalid: p2 = r.defaultInvalidHandler, deprecated: y = r.defaultDeprecatedHandler } = n || {};
            this._utils = { descriptor: i2, logger: u || { warn: () => {
            } }, schemas: t.recordFromArray(a, "name"), normalizeDefaultResult: t.normalizeDefaultResult, normalizeDeprecatedResult: t.normalizeDeprecatedResult, normalizeForwardResult: t.normalizeForwardResult, normalizeRedirectResult: t.normalizeRedirectResult, normalizeValidateResult: t.normalizeValidateResult }, this._unknownHandler = l, this._invalidHandler = p2, this._deprecatedHandler = y, this.cleanHistory();
          }
          cleanHistory() {
            this._hasDeprecationWarned = t.createAutoChecklist();
          }
          normalize(a) {
            let n = {}, u = [a], i2 = () => {
              for (; u.length !== 0; ) {
                let l = u.shift(), p2 = this._applyNormalization(l, n);
                u.push(...p2);
              }
            };
            i2();
            for (let l of Object.keys(this._utils.schemas)) {
              let p2 = this._utils.schemas[l];
              if (!(l in n)) {
                let y = t.normalizeDefaultResult(p2.default(this._utils));
                "value" in y && u.push({ [l]: y.value });
              }
            }
            i2();
            for (let l of Object.keys(this._utils.schemas)) {
              let p2 = this._utils.schemas[l];
              l in n && (n[l] = p2.postprocess(n[l], this._utils));
            }
            return n;
          }
          _applyNormalization(a, n) {
            let u = [], [i2, l] = t.partition(Object.keys(a), (p2) => p2 in this._utils.schemas);
            for (let p2 of i2) {
              let y = this._utils.schemas[p2], h2 = y.preprocess(a[p2], this._utils), g = t.normalizeValidateResult(y.validate(h2, this._utils), h2);
              if (g !== true) {
                let { value: w } = g, E = this._invalidHandler(p2, w, this._utils);
                throw typeof E == "string" ? new Error(E) : E;
              }
              let c = (w) => {
                let { from: E, to: N } = w;
                u.push(typeof N == "string" ? { [N]: E } : { [N.key]: N.value });
              }, f = (w) => {
                let { value: E, redirectTo: N } = w, x = t.normalizeDeprecatedResult(y.deprecated(E, this._utils), h2, true);
                if (x !== false)
                  if (x === true)
                    this._hasDeprecationWarned(p2) || this._utils.logger.warn(this._deprecatedHandler(p2, N, this._utils));
                  else
                    for (let { value: I } of x) {
                      let P = { key: p2, value: I };
                      if (!this._hasDeprecationWarned(P)) {
                        let $ = typeof N == "string" ? { key: N, value: I } : N;
                        this._utils.logger.warn(this._deprecatedHandler(P, $, this._utils));
                      }
                    }
              };
              t.normalizeForwardResult(y.forward(h2, this._utils), h2).forEach(c);
              let _ = t.normalizeRedirectResult(y.redirect(h2, this._utils), h2);
              if (_.redirect.forEach(c), "remain" in _) {
                let w = _.remain;
                n[p2] = p2 in n ? y.overlap(n[p2], w, this._utils) : w, f({ value: w });
              }
              for (let { from: w, to: E } of _.redirect)
                f({ value: w, redirectTo: E });
            }
            for (let p2 of l) {
              let y = a[p2], h2 = this._unknownHandler(p2, y, this._utils);
              if (h2)
                for (let g of Object.keys(h2)) {
                  let c = { [g]: h2[g] };
                  g in this._utils.schemas ? u.push(c) : Object.assign(n, c);
                }
            }
            return u;
          }
        };
        e.Normalizer = s;
      } }), Lm = te({ "node_modules/vnopts/lib/index.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = (Et(), ft(vt));
        r.__exportStar(vm(), e), r.__exportStar(Sm(), e), r.__exportStar(Pm(), e), r.__exportStar(km(), e), r.__exportStar(Ft(), e);
      } }), Om = te({ "src/main/options-normalizer.js"(e, r) {
        ne();
        var t = Lm(), s = lt(), a = { key: (g) => g.length === 1 ? `-${g}` : `--${g}`, value: (g) => t.apiDescriptor.value(g), pair: (g) => {
          let { key: c, value: f } = g;
          return f === false ? `--no-${c}` : f === true ? a.key(c) : f === "" ? `${a.key(c)} without an argument` : `${a.key(c)}=${f}`;
        } }, n = (g) => {
          let { colorsModule: c, levenshteinDistance: f } = g;
          return class extends t.ChoiceSchema {
            constructor(_) {
              let { name: w, flags: E } = _;
              super({ name: w, choices: E }), this._flags = [...E].sort();
            }
            preprocess(_, w) {
              if (typeof _ == "string" && _.length > 0 && !this._flags.includes(_)) {
                let E = this._flags.find((N) => f(N, _) < 3);
                if (E)
                  return w.logger.warn([`Unknown flag ${c.yellow(w.descriptor.value(_))},`, `did you mean ${c.blue(w.descriptor.value(E))}?`].join(" ")), E;
              }
              return _;
            }
            expected() {
              return "a flag";
            }
          };
        }, u;
        function i2(g, c) {
          let { logger: f = false, isCLI: F = false, passThrough: _ = false, colorsModule: w = null, levenshteinDistance: E = null } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, N = _ ? Array.isArray(_) ? (T, m) => _.includes(T) ? { [T]: m } : void 0 : (T, m) => ({ [T]: m }) : (T, m, C) => {
            let o = C.schemas, v = Hn(o, vD);
            return t.levenUnknownHandler(T, m, Object.assign(Object.assign({}, C), {}, { schemas: v }));
          }, x = F ? a : t.apiDescriptor, I = l(c, { isCLI: F, colorsModule: w, levenshteinDistance: E }), P = new t.Normalizer(I, { logger: f, unknown: N, descriptor: x }), $ = f !== false;
          $ && u && (P._hasDeprecationWarned = u);
          let D = P.normalize(g);
          return $ && (u = P._hasDeprecationWarned), F && D["plugin-search"] === false && (D["plugin-search-dir"] = false), D;
        }
        function l(g, c) {
          let { isCLI: f, colorsModule: F, levenshteinDistance: _ } = c, w = [];
          f && w.push(t.AnySchema.create({ name: "_" }));
          for (let E of g)
            w.push(p2(E, { isCLI: f, optionInfos: g, colorsModule: F, levenshteinDistance: _ })), E.alias && f && w.push(t.AliasSchema.create({ name: E.alias, sourceName: E.name }));
          return w;
        }
        function p2(g, c) {
          let { isCLI: f, optionInfos: F, colorsModule: _, levenshteinDistance: w } = c, { name: E } = g;
          if (E === "plugin-search-dir" || E === "pluginSearchDirs")
            return t.AnySchema.create({ name: E, preprocess(P) {
              return P === false || (P = Array.isArray(P) ? P : [P]), P;
            }, validate(P) {
              return P === false ? true : P.every(($) => typeof $ == "string");
            }, expected() {
              return "false or paths to plugin search dir";
            } });
          let N = { name: E }, x, I = {};
          switch (g.type) {
            case "int":
              x = t.IntegerSchema, f && (N.preprocess = Number);
              break;
            case "string":
              x = t.StringSchema;
              break;
            case "choice":
              x = t.ChoiceSchema, N.choices = g.choices.map((P) => typeof P == "object" && P.redirect ? Object.assign(Object.assign({}, P), {}, { redirect: { to: { key: g.name, value: P.redirect } } }) : P);
              break;
            case "boolean":
              x = t.BooleanSchema;
              break;
            case "flag":
              x = n({ colorsModule: _, levenshteinDistance: w }), N.flags = F.flatMap((P) => [P.alias, P.description && P.name, P.oppositeDescription && `no-${P.name}`].filter(Boolean));
              break;
            case "path":
              x = t.StringSchema;
              break;
            default:
              throw new Error(`Unexpected type ${g.type}`);
          }
          if (g.exception ? N.validate = (P, $, D) => g.exception(P) || $.validate(P, D) : N.validate = (P, $, D) => P === void 0 || $.validate(P, D), g.redirect && (I.redirect = (P) => P ? { to: { key: g.redirect.option, value: g.redirect.value } } : void 0), g.deprecated && (I.deprecated = true), f && !g.array) {
            let P = N.preprocess || (($) => $);
            N.preprocess = ($, D, T) => D.preprocess(P(Array.isArray($) ? s($) : $), T);
          }
          return g.array ? t.ArraySchema.create(Object.assign(Object.assign(Object.assign({}, f ? { preprocess: (P) => Array.isArray(P) ? P : [P] } : {}), I), {}, { valueSchema: x.create(N) })) : x.create(Object.assign(Object.assign({}, N), I));
        }
        function y(g, c, f) {
          return i2(g, c, f);
        }
        function h2(g, c, f) {
          return i2(g, c, Object.assign({ isCLI: true }, f));
        }
        r.exports = { normalizeApiOptions: y, normalizeCliOptions: h2 };
      } }), ut = te({ "src/language-js/loc.js"(e, r) {
        ne();
        var t = Kn();
        function s(l) {
          var p2, y;
          let h2 = l.range ? l.range[0] : l.start, g = (p2 = (y = l.declaration) === null || y === void 0 ? void 0 : y.decorators) !== null && p2 !== void 0 ? p2 : l.decorators;
          return t(g) ? Math.min(s(g[0]), h2) : h2;
        }
        function a(l) {
          return l.range ? l.range[1] : l.end;
        }
        function n(l, p2) {
          let y = s(l);
          return Number.isInteger(y) && y === s(p2);
        }
        function u(l, p2) {
          let y = a(l);
          return Number.isInteger(y) && y === a(p2);
        }
        function i2(l, p2) {
          return n(l, p2) && u(l, p2);
        }
        r.exports = { locStart: s, locEnd: a, hasSameLocStart: n, hasSameLoc: i2 };
      } }), jm = te({ "src/main/load-parser.js"(e, r) {
        ne(), r.exports = () => {
        };
      } }), qm = te({ "scripts/build/shims/babel-highlight.cjs"(e, r) {
        ne();
        var t = kr(), s = { shouldHighlight: () => false, getChalk: () => t };
        r.exports = s;
      } }), Mm = te({ "node_modules/@babel/code-frame/lib/index.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true }), e.codeFrameColumns = u, e.default = i2;
        var r = qm(), t = false;
        function s(l) {
          return { gutter: l.grey, marker: l.red.bold, message: l.red.bold };
        }
        var a = /\r\n|[\n\r\u2028\u2029]/;
        function n(l, p2, y) {
          let h2 = Object.assign({ column: 0, line: -1 }, l.start), g = Object.assign({}, h2, l.end), { linesAbove: c = 2, linesBelow: f = 3 } = y || {}, F = h2.line, _ = h2.column, w = g.line, E = g.column, N = Math.max(F - (c + 1), 0), x = Math.min(p2.length, w + f);
          F === -1 && (N = 0), w === -1 && (x = p2.length);
          let I = w - F, P = {};
          if (I)
            for (let $ = 0; $ <= I; $++) {
              let D = $ + F;
              if (!_)
                P[D] = true;
              else if ($ === 0) {
                let T = p2[D - 1].length;
                P[D] = [_, T - _ + 1];
              } else if ($ === I)
                P[D] = [0, E];
              else {
                let T = p2[D - $].length;
                P[D] = [0, T];
              }
            }
          else
            _ === E ? _ ? P[F] = [_, 0] : P[F] = true : P[F] = [_, E - _];
          return { start: N, end: x, markerLines: P };
        }
        function u(l, p2) {
          let y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, h2 = (y.highlightCode || y.forceColor) && (0, r.shouldHighlight)(y), g = (0, r.getChalk)(y), c = s(g), f = ($, D) => h2 ? $(D) : D, F = l.split(a), { start: _, end: w, markerLines: E } = n(p2, F, y), N = p2.start && typeof p2.start.column == "number", x = String(w).length, P = (h2 ? (0, r.default)(l, y) : l).split(a, w).slice(_, w).map(($, D) => {
            let T = _ + 1 + D, C = ` ${` ${T}`.slice(-x)} |`, o = E[T], d = !E[T + 1];
            if (o) {
              let v = "";
              if (Array.isArray(o)) {
                let S = $.slice(0, Math.max(o[0] - 1, 0)).replace(/[^\t]/g, " "), b = o[1] || 1;
                v = [`
 `, f(c.gutter, C.replace(/\d/g, " ")), " ", S, f(c.marker, "^").repeat(b)].join(""), d && y.message && (v += " " + f(c.message, y.message));
              }
              return [f(c.marker, ">"), f(c.gutter, C), $.length > 0 ? ` ${$}` : "", v].join("");
            } else
              return ` ${f(c.gutter, C)}${$.length > 0 ? ` ${$}` : ""}`;
          }).join(`
`);
          return y.message && !N && (P = `${" ".repeat(x + 1)}${y.message}
${P}`), h2 ? g.reset(P) : P;
        }
        function i2(l, p2, y) {
          let h2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
          if (!t) {
            t = true;
            let c = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
            if (wt.emitWarning)
              wt.emitWarning(c, "DeprecationWarning");
            else {
              let f = new Error(c);
              f.name = "DeprecationWarning", console.warn(new Error(c));
            }
          }
          return y = Math.max(y, 0), u(l, { start: { column: y, line: p2 } }, h2);
        }
      } }), tu = te({ "src/main/parser.js"(e, r) {
        ne();
        var { ConfigError: t } = Qt(), s = ut();
        jm();
        var { locStart: n, locEnd: u } = s, i2 = Object.getOwnPropertyNames, l = Object.getOwnPropertyDescriptor;
        function p2(g) {
          let c = {};
          for (let f of g.plugins)
            if (f.parsers)
              for (let F of i2(f.parsers))
                Object.defineProperty(c, F, l(f.parsers, F));
          return c;
        }
        function y(g) {
          let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : p2(g);
          if (typeof g.parser == "function")
            return { parse: g.parser, astFormat: "estree", locStart: n, locEnd: u };
          if (typeof g.parser == "string") {
            if (Object.prototype.hasOwnProperty.call(c, g.parser))
              return c[g.parser];
            throw new t(`Couldn't resolve parser "${g.parser}". Parsers must be explicitly added to the standalone bundle.`);
          }
        }
        function h2(g, c) {
          let f = p2(c), F = Object.defineProperties({}, Object.fromEntries(Object.keys(f).map((w) => [w, { enumerable: true, get() {
            return f[w].parse;
          } }]))), _ = y(c, f);
          try {
            return _.preprocess && (g = _.preprocess(g, c)), { text: g, ast: _.parse(g, F, c) };
          } catch (w) {
            let { loc: E } = w;
            if (E) {
              let { codeFrameColumns: N } = Mm();
              throw w.codeFrame = N(g, E, { highlightCode: true }), w.message += `
` + w.codeFrame, w;
            }
            throw w;
          }
        }
        r.exports = { parse: h2, resolveParser: y };
      } }), uo = te({ "src/main/options.js"(e, r) {
        ne();
        var t = ZD(), { UndefinedParserError: s } = Qt(), { getSupportInfo: a } = Xn(), n = Om(), { resolveParser: u } = tu(), i2 = { astFormat: "estree", printer: {}, originalText: void 0, locStart: null, locEnd: null };
        function l(h2) {
          let g = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, c = Object.assign({}, h2), f = a({ plugins: h2.plugins, showUnreleased: true, showDeprecated: true }).options, F = Object.assign(Object.assign({}, i2), Object.fromEntries(f.filter((x) => x.default !== void 0).map((x) => [x.name, x.default])));
          if (!c.parser) {
            if (!c.filepath)
              (g.logger || console).warn("No parser and no filepath given, using 'babel' the parser now but this will throw an error in the future. Please specify a parser or a filepath so one can be inferred."), c.parser = "babel";
            else if (c.parser = y(c.filepath, c.plugins), !c.parser)
              throw new s(`No parser could be inferred for file: ${c.filepath}`);
          }
          let _ = u(n.normalizeApiOptions(c, [f.find((x) => x.name === "parser")], { passThrough: true, logger: false }));
          c.astFormat = _.astFormat, c.locEnd = _.locEnd, c.locStart = _.locStart;
          let w = p2(c);
          c.printer = w.printers[c.astFormat];
          let E = Object.fromEntries(f.filter((x) => x.pluginDefaults && x.pluginDefaults[w.name] !== void 0).map((x) => [x.name, x.pluginDefaults[w.name]])), N = Object.assign(Object.assign({}, F), E);
          for (let [x, I] of Object.entries(N))
            (c[x] === null || c[x] === void 0) && (c[x] = I);
          return c.parser === "json" && (c.trailingComma = "none"), n.normalizeApiOptions(c, f, Object.assign({ passThrough: Object.keys(i2) }, g));
        }
        function p2(h2) {
          let { astFormat: g } = h2;
          if (!g)
            throw new Error("getPlugin() requires astFormat to be set");
          let c = h2.plugins.find((f) => f.printers && f.printers[g]);
          if (!c)
            throw new Error(`Couldn't find plugin for AST format "${g}"`);
          return c;
        }
        function y(h2, g) {
          let c = t.basename(h2).toLowerCase(), F = a({ plugins: g }).languages.filter((_) => _.since !== null).find((_) => _.extensions && _.extensions.some((w) => c.endsWith(w)) || _.filenames && _.filenames.some((w) => w.toLowerCase() === c));
          return F && F.parsers[0];
        }
        r.exports = { normalize: l, hiddenDefaults: i2, inferParser: y };
      } }), Rm = te({ "src/main/massage-ast.js"(e, r) {
        ne();
        function t(s, a, n) {
          if (Array.isArray(s))
            return s.map((p2) => t(p2, a, n)).filter(Boolean);
          if (!s || typeof s != "object")
            return s;
          let u = a.printer.massageAstNode, i2;
          u && u.ignoredProperties ? i2 = u.ignoredProperties : i2 = /* @__PURE__ */ new Set();
          let l = {};
          for (let [p2, y] of Object.entries(s))
            !i2.has(p2) && typeof y != "function" && (l[p2] = t(y, a, s));
          if (u) {
            let p2 = u(s, l, n);
            if (p2 === null)
              return;
            if (p2)
              return p2;
          }
          return l;
        }
        r.exports = t;
      } }), Zt = te({ "scripts/build/shims/assert.cjs"(e, r) {
        ne();
        var t = () => {
        };
        t.ok = t, t.strictEqual = t, r.exports = t;
      } }), et = te({ "src/main/comments.js"(e, r) {
        ne();
        var t = Zt(), { builders: { line: s, hardline: a, breakParent: n, indent: u, lineSuffix: i2, join: l, cursor: p2 } } = qe(), { hasNewline: y, skipNewline: h2, skipSpaces: g, isPreviousLineEmpty: c, addLeadingComment: f, addDanglingComment: F, addTrailingComment: _ } = Ue(), w = /* @__PURE__ */ new WeakMap();
        function E(k, M, R) {
          if (!k)
            return;
          let { printer: q, locStart: J, locEnd: L } = M;
          if (R) {
            if (q.canAttachComment && q.canAttachComment(k)) {
              let V;
              for (V = R.length - 1; V >= 0 && !(J(R[V]) <= J(k) && L(R[V]) <= L(k)); --V)
                ;
              R.splice(V + 1, 0, k);
              return;
            }
          } else if (w.has(k))
            return w.get(k);
          let Q = q.getCommentChildNodes && q.getCommentChildNodes(k, M) || typeof k == "object" && Object.entries(k).filter((V) => {
            let [j] = V;
            return j !== "enclosingNode" && j !== "precedingNode" && j !== "followingNode" && j !== "tokens" && j !== "comments" && j !== "parent";
          }).map((V) => {
            let [, j] = V;
            return j;
          });
          if (Q) {
            R || (R = [], w.set(k, R));
            for (let V of Q)
              E(V, M, R);
            return R;
          }
        }
        function N(k, M, R, q) {
          let { locStart: J, locEnd: L } = R, Q = J(M), V = L(M), j = E(k, R), Y, ie, ee = 0, ce = j.length;
          for (; ee < ce; ) {
            let W = ee + ce >> 1, K = j[W], de = J(K), ue = L(K);
            if (de <= Q && V <= ue)
              return N(K, M, R, K);
            if (ue <= Q) {
              Y = K, ee = W + 1;
              continue;
            }
            if (V <= de) {
              ie = K, ce = W;
              continue;
            }
            throw new Error("Comment location overlaps with node location");
          }
          if (q && q.type === "TemplateLiteral") {
            let { quasis: W } = q, K = C(W, M, R);
            Y && C(W, Y, R) !== K && (Y = null), ie && C(W, ie, R) !== K && (ie = null);
          }
          return { enclosingNode: q, precedingNode: Y, followingNode: ie };
        }
        var x = () => false;
        function I(k, M, R, q) {
          if (!Array.isArray(k))
            return;
          let J = [], { locStart: L, locEnd: Q, printer: { handleComments: V = {} } } = q, { avoidAstMutation: j, ownLine: Y = x, endOfLine: ie = x, remaining: ee = x } = V, ce = k.map((W, K) => Object.assign(Object.assign({}, N(M, W, q)), {}, { comment: W, text: R, options: q, ast: M, isLastComment: k.length - 1 === K }));
          for (let [W, K] of ce.entries()) {
            let { comment: de, precedingNode: ue, enclosingNode: Fe, followingNode: z, text: U, options: Z, ast: se, isLastComment: fe } = K;
            if (Z.parser === "json" || Z.parser === "json5" || Z.parser === "__js_expression" || Z.parser === "__vue_expression" || Z.parser === "__vue_ts_expression") {
              if (L(de) - L(se) <= 0) {
                f(se, de);
                continue;
              }
              if (Q(de) - Q(se) >= 0) {
                _(se, de);
                continue;
              }
            }
            let ge;
            if (j ? ge = [K] : (de.enclosingNode = Fe, de.precedingNode = ue, de.followingNode = z, ge = [de, U, Z, se, fe]), $(U, Z, ce, W))
              de.placement = "ownLine", Y(...ge) || (z ? f(z, de) : ue ? _(ue, de) : F(Fe || se, de));
            else if (D(U, Z, ce, W))
              de.placement = "endOfLine", ie(...ge) || (ue ? _(ue, de) : z ? f(z, de) : F(Fe || se, de));
            else if (de.placement = "remaining", !ee(...ge))
              if (ue && z) {
                let he = J.length;
                he > 0 && J[he - 1].followingNode !== z && T(J, U, Z), J.push(K);
              } else
                ue ? _(ue, de) : z ? f(z, de) : F(Fe || se, de);
          }
          if (T(J, R, q), !j)
            for (let W of k)
              delete W.precedingNode, delete W.enclosingNode, delete W.followingNode;
        }
        var P = (k) => !/[\S\n\u2028\u2029]/.test(k);
        function $(k, M, R, q) {
          let { comment: J, precedingNode: L } = R[q], { locStart: Q, locEnd: V } = M, j = Q(J);
          if (L)
            for (let Y = q - 1; Y >= 0; Y--) {
              let { comment: ie, precedingNode: ee } = R[Y];
              if (ee !== L || !P(k.slice(V(ie), j)))
                break;
              j = Q(ie);
            }
          return y(k, j, { backwards: true });
        }
        function D(k, M, R, q) {
          let { comment: J, followingNode: L } = R[q], { locStart: Q, locEnd: V } = M, j = V(J);
          if (L)
            for (let Y = q + 1; Y < R.length; Y++) {
              let { comment: ie, followingNode: ee } = R[Y];
              if (ee !== L || !P(k.slice(j, Q(ie))))
                break;
              j = V(ie);
            }
          return y(k, j);
        }
        function T(k, M, R) {
          let q = k.length;
          if (q === 0)
            return;
          let { precedingNode: J, followingNode: L, enclosingNode: Q } = k[0], V = R.printer.getGapRegex && R.printer.getGapRegex(Q) || /^[\s(]*$/, j = R.locStart(L), Y;
          for (Y = q; Y > 0; --Y) {
            let { comment: ie, precedingNode: ee, followingNode: ce } = k[Y - 1];
            t.strictEqual(ee, J), t.strictEqual(ce, L);
            let W = M.slice(R.locEnd(ie), j);
            if (V.test(W))
              j = R.locStart(ie);
            else
              break;
          }
          for (let [ie, { comment: ee }] of k.entries())
            ie < Y ? _(J, ee) : f(L, ee);
          for (let ie of [J, L])
            ie.comments && ie.comments.length > 1 && ie.comments.sort((ee, ce) => R.locStart(ee) - R.locStart(ce));
          k.length = 0;
        }
        function m(k, M) {
          let R = k.getValue();
          return R.printed = true, M.printer.printComment(k, M);
        }
        function C(k, M, R) {
          let q = R.locStart(M) - 1;
          for (let J = 1; J < k.length; ++J)
            if (q < R.locStart(k[J]))
              return J - 1;
          return 0;
        }
        function o(k, M) {
          let R = k.getValue(), q = [m(k, M)], { printer: J, originalText: L, locStart: Q, locEnd: V } = M;
          if (J.isBlockComment && J.isBlockComment(R)) {
            let ie = y(L, V(R)) ? y(L, Q(R), { backwards: true }) ? a : s : " ";
            q.push(ie);
          } else
            q.push(a);
          let Y = h2(L, g(L, V(R)));
          return Y !== false && y(L, Y) && q.push(a), q;
        }
        function d(k, M) {
          let R = k.getValue(), q = m(k, M), { printer: J, originalText: L, locStart: Q } = M, V = J.isBlockComment && J.isBlockComment(R);
          if (y(L, Q(R), { backwards: true })) {
            let Y = c(L, R, Q);
            return i2([a, Y ? a : "", q]);
          }
          let j = [" ", q];
          return V || (j = [i2(j), n]), j;
        }
        function v(k, M, R, q) {
          let J = [], L = k.getValue();
          return !L || !L.comments || (k.each(() => {
            let Q = k.getValue();
            !Q.leading && !Q.trailing && (!q || q(Q)) && J.push(m(k, M));
          }, "comments"), J.length === 0) ? "" : R ? l(a, J) : u([a, l(a, J)]);
        }
        function S(k, M, R) {
          let q = k.getValue();
          if (!q)
            return {};
          let J = q.comments || [];
          R && (J = J.filter((j) => !R.has(j)));
          let L = q === M.cursorNode;
          if (J.length === 0) {
            let j = L ? p2 : "";
            return { leading: j, trailing: j };
          }
          let Q = [], V = [];
          return k.each(() => {
            let j = k.getValue();
            if (R && R.has(j))
              return;
            let { leading: Y, trailing: ie } = j;
            Y ? Q.push(o(k, M)) : ie && V.push(d(k, M));
          }, "comments"), L && (Q.unshift(p2), V.push(p2)), { leading: Q, trailing: V };
        }
        function b(k, M, R, q) {
          let { leading: J, trailing: L } = S(k, R, q);
          return !J && !L ? M : [J, M, L];
        }
        function B(k) {
          if (k)
            for (let M of k) {
              if (!M.printed)
                throw new Error('Comment "' + M.value.trim() + '" was not printed. Please report this error!');
              delete M.printed;
            }
        }
        r.exports = { attach: I, printComments: b, printCommentsSeparately: S, printDanglingComments: v, getSortedChildNodes: E, ensureAllCommentsPrinted: B };
      } }), $m = te({ "src/common/ast-path.js"(e, r) {
        ne();
        var t = lt();
        function s(u, i2) {
          let l = a(u.stack, i2);
          return l === -1 ? null : u.stack[l];
        }
        function a(u, i2) {
          for (let l = u.length - 1; l >= 0; l -= 2) {
            let p2 = u[l];
            if (p2 && !Array.isArray(p2) && --i2 < 0)
              return l;
          }
          return -1;
        }
        var n = class {
          constructor(u) {
            this.stack = [u];
          }
          getName() {
            let { stack: u } = this, { length: i2 } = u;
            return i2 > 1 ? u[i2 - 2] : null;
          }
          getValue() {
            return t(this.stack);
          }
          getNode() {
            let u = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
            return s(this, u);
          }
          getParentNode() {
            let u = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
            return s(this, u + 1);
          }
          call(u) {
            let { stack: i2 } = this, { length: l } = i2, p2 = t(i2);
            for (var y = arguments.length, h2 = new Array(y > 1 ? y - 1 : 0), g = 1; g < y; g++)
              h2[g - 1] = arguments[g];
            for (let f of h2)
              p2 = p2[f], i2.push(f, p2);
            let c = u(this);
            return i2.length = l, c;
          }
          callParent(u) {
            let i2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, l = a(this.stack, i2 + 1), p2 = this.stack.splice(l + 1), y = u(this);
            return this.stack.push(...p2), y;
          }
          each(u) {
            let { stack: i2 } = this, { length: l } = i2, p2 = t(i2);
            for (var y = arguments.length, h2 = new Array(y > 1 ? y - 1 : 0), g = 1; g < y; g++)
              h2[g - 1] = arguments[g];
            for (let c of h2)
              p2 = p2[c], i2.push(c, p2);
            for (let c = 0; c < p2.length; ++c)
              i2.push(c, p2[c]), u(this, c, p2), i2.length -= 2;
            i2.length = l;
          }
          map(u) {
            let i2 = [];
            for (var l = arguments.length, p2 = new Array(l > 1 ? l - 1 : 0), y = 1; y < l; y++)
              p2[y - 1] = arguments[y];
            return this.each((h2, g, c) => {
              i2[g] = u(h2, g, c);
            }, ...p2), i2;
          }
          try(u) {
            let { stack: i2 } = this, l = [...i2];
            try {
              return u();
            } finally {
              i2.length = 0, i2.push(...l);
            }
          }
          match() {
            let u = this.stack.length - 1, i2 = null, l = this.stack[u--];
            for (var p2 = arguments.length, y = new Array(p2), h2 = 0; h2 < p2; h2++)
              y[h2] = arguments[h2];
            for (let g of y) {
              if (l === void 0)
                return false;
              let c = null;
              if (typeof i2 == "number" && (c = i2, i2 = this.stack[u--], l = this.stack[u--]), g && !g(l, i2, c))
                return false;
              i2 = this.stack[u--], l = this.stack[u--];
            }
            return true;
          }
          findAncestor(u) {
            let i2 = this.stack.length - 1, l = null, p2 = this.stack[i2--];
            for (; p2; ) {
              let y = null;
              if (typeof l == "number" && (y = l, l = this.stack[i2--], p2 = this.stack[i2--]), l !== null && u(p2, l, y))
                return p2;
              l = this.stack[i2--], p2 = this.stack[i2--];
            }
          }
        };
        r.exports = n;
      } }), Vm = te({ "src/main/multiparser.js"(e, r) {
        ne();
        var { utils: { stripTrailingHardline: t } } = qe(), { normalize: s } = uo(), a = et();
        function n(i2, l, p2, y) {
          if (p2.printer.embed && p2.embeddedLanguageFormatting === "auto")
            return p2.printer.embed(i2, l, (h2, g, c) => u(h2, g, p2, y, c), p2);
        }
        function u(i2, l, p2, y) {
          let { stripTrailingHardline: h2 = false } = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, g = s(Object.assign(Object.assign(Object.assign({}, p2), l), {}, { parentParser: p2.parser, originalText: i2 }), { passThrough: true }), c = tu().parse(i2, g), { ast: f } = c;
          i2 = c.text;
          let F = f.comments;
          delete f.comments, a.attach(F, f, i2, g), g[Symbol.for("comments")] = F || [], g[Symbol.for("tokens")] = f.tokens || [];
          let _ = y(f, g);
          return a.ensureAllCommentsPrinted(F), h2 ? typeof _ == "string" ? _.replace(/(?:\r?\n)*$/, "") : t(_) : _;
        }
        r.exports = { printSubtree: n };
      } }), Wm = te({ "src/main/ast-to-doc.js"(e, r) {
        ne();
        var t = $m(), { builders: { hardline: s, addAlignmentToDoc: a }, utils: { propagateBreaks: n } } = qe(), { printComments: u } = et(), i2 = Vm();
        function l(h2, g) {
          let c = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, { printer: f } = g;
          f.preprocess && (h2 = f.preprocess(h2, g));
          let F = /* @__PURE__ */ new Map(), _ = new t(h2), w = E();
          return c > 0 && (w = a([s, w], c, g.tabWidth)), n(w), w;
          function E(x, I) {
            return x === void 0 || x === _ ? N(I) : Array.isArray(x) ? _.call(() => N(I), ...x) : _.call(() => N(I), x);
          }
          function N(x) {
            let I = _.getValue(), P = I && typeof I == "object" && x === void 0;
            if (P && F.has(I))
              return F.get(I);
            let $ = y(_, g, E, x);
            return P && F.set(I, $), $;
          }
        }
        function p2(h2, g) {
          let { originalText: c, [Symbol.for("comments")]: f, locStart: F, locEnd: _ } = g, w = F(h2), E = _(h2), N = /* @__PURE__ */ new Set();
          for (let x of f)
            F(x) >= w && _(x) <= E && (x.printed = true, N.add(x));
          return { doc: c.slice(w, E), printedComments: N };
        }
        function y(h2, g, c, f) {
          let F = h2.getValue(), { printer: _ } = g, w, E;
          if (_.hasPrettierIgnore && _.hasPrettierIgnore(h2))
            ({ doc: w, printedComments: E } = p2(F, g));
          else {
            if (F)
              try {
                w = i2.printSubtree(h2, c, g, l);
              } catch (N) {
                if (globalThis.PRETTIER_DEBUG)
                  throw N;
              }
            w || (w = _.print(h2, g, c, f));
          }
          return (!_.willPrintOwnComments || !_.willPrintOwnComments(h2, g)) && (w = u(h2, w, g, E)), w;
        }
        r.exports = l;
      } }), Hm = te({ "src/main/range-util.js"(e, r) {
        ne();
        var t = Zt(), s = et(), a = (f) => {
          let { parser: F } = f;
          return F === "json" || F === "json5" || F === "json-stringify";
        };
        function n(f, F) {
          let _ = [f.node, ...f.parentNodes], w = /* @__PURE__ */ new Set([F.node, ...F.parentNodes]);
          return _.find((E) => y.has(E.type) && w.has(E));
        }
        function u(f) {
          let F = f.length - 1;
          for (; ; ) {
            let _ = f[F];
            if (_ && (_.type === "Program" || _.type === "File"))
              F--;
            else
              break;
          }
          return f.slice(0, F + 1);
        }
        function i2(f, F, _) {
          let { locStart: w, locEnd: E } = _, N = f.node, x = F.node;
          if (N === x)
            return { startNode: N, endNode: x };
          let I = w(f.node);
          for (let $ of u(F.parentNodes))
            if (w($) >= I)
              x = $;
            else
              break;
          let P = E(F.node);
          for (let $ of u(f.parentNodes)) {
            if (E($) <= P)
              N = $;
            else
              break;
            if (N === x)
              break;
          }
          return { startNode: N, endNode: x };
        }
        function l(f, F, _, w) {
          let E = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : [], N = arguments.length > 5 ? arguments[5] : void 0, { locStart: x, locEnd: I } = _, P = x(f), $ = I(f);
          if (!(F > $ || F < P || N === "rangeEnd" && F === P || N === "rangeStart" && F === $)) {
            for (let D of s.getSortedChildNodes(f, _)) {
              let T = l(D, F, _, w, [f, ...E], N);
              if (T)
                return T;
            }
            if (!w || w(f, E[0]))
              return { node: f, parentNodes: E };
          }
        }
        function p2(f, F) {
          return F !== "DeclareExportDeclaration" && f !== "TypeParameterDeclaration" && (f === "Directive" || f === "TypeAlias" || f === "TSExportAssignment" || f.startsWith("Declare") || f.startsWith("TSDeclare") || f.endsWith("Statement") || f.endsWith("Declaration"));
        }
        var y = /* @__PURE__ */ new Set(["ObjectExpression", "ArrayExpression", "StringLiteral", "NumericLiteral", "BooleanLiteral", "NullLiteral", "UnaryExpression", "TemplateLiteral"]), h2 = /* @__PURE__ */ new Set(["OperationDefinition", "FragmentDefinition", "VariableDefinition", "TypeExtensionDefinition", "ObjectTypeDefinition", "FieldDefinition", "DirectiveDefinition", "EnumTypeDefinition", "EnumValueDefinition", "InputValueDefinition", "InputObjectTypeDefinition", "SchemaDefinition", "OperationTypeDefinition", "InterfaceTypeDefinition", "UnionTypeDefinition", "ScalarTypeDefinition"]);
        function g(f, F, _) {
          if (!F)
            return false;
          switch (f.parser) {
            case "flow":
            case "babel":
            case "babel-flow":
            case "babel-ts":
            case "typescript":
            case "acorn":
            case "espree":
            case "meriyah":
            case "__babel_estree":
              return p2(F.type, _ && _.type);
            case "json":
            case "json5":
            case "json-stringify":
              return y.has(F.type);
            case "graphql":
              return h2.has(F.kind);
            case "vue":
              return F.tag !== "root";
          }
          return false;
        }
        function c(f, F, _) {
          let { rangeStart: w, rangeEnd: E, locStart: N, locEnd: x } = F;
          t.ok(E > w);
          let I = f.slice(w, E).search(/\S/), P = I === -1;
          if (!P)
            for (w += I; E > w && !/\S/.test(f[E - 1]); --E)
              ;
          let $ = l(_, w, F, (C, o) => g(F, C, o), [], "rangeStart"), D = P ? $ : l(_, E, F, (C) => g(F, C), [], "rangeEnd");
          if (!$ || !D)
            return { rangeStart: 0, rangeEnd: 0 };
          let T, m;
          if (a(F)) {
            let C = n($, D);
            T = C, m = C;
          } else
            ({ startNode: T, endNode: m } = i2($, D, F));
          return { rangeStart: Math.min(N(T), N(m)), rangeEnd: Math.max(x(T), x(m)) };
        }
        r.exports = { calculateRange: c, findNodeAtOffset: l };
      } }), Gm = te({ "src/main/core.js"(e, r) {
        ne();
        var { diffArrays: t } = BD(), { printer: { printDocToString: s }, debug: { printDocToDebug: a } } = qe(), { getAlignmentSize: n } = Ue(), { guessEndOfLine: u, convertEndOfLineToChars: i2, countEndOfLineChars: l, normalizeEndOfLine: p2 } = Jn(), y = uo().normalize, h2 = Rm(), g = et(), c = tu(), f = Wm(), F = Hm(), _ = "\uFEFF", w = Symbol("cursor");
        function E(m, C, o) {
          let d = C.comments;
          return d && (delete C.comments, g.attach(d, C, m, o)), o[Symbol.for("comments")] = d || [], o[Symbol.for("tokens")] = C.tokens || [], o.originalText = m, d;
        }
        function N(m, C) {
          let o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
          if (!m || m.trim().length === 0)
            return { formatted: "", cursorOffset: -1, comments: [] };
          let { ast: d, text: v } = c.parse(m, C);
          if (C.cursorOffset >= 0) {
            let k = F.findNodeAtOffset(d, C.cursorOffset, C);
            k && k.node && (C.cursorNode = k.node);
          }
          let S = E(v, d, C), b = f(d, C, o), B = s(b, C);
          if (g.ensureAllCommentsPrinted(S), o > 0) {
            let k = B.formatted.trim();
            B.cursorNodeStart !== void 0 && (B.cursorNodeStart -= B.formatted.indexOf(k)), B.formatted = k + i2(C.endOfLine);
          }
          if (C.cursorOffset >= 0) {
            let k, M, R, q, J;
            if (C.cursorNode && B.cursorNodeText ? (k = C.locStart(C.cursorNode), M = v.slice(k, C.locEnd(C.cursorNode)), R = C.cursorOffset - k, q = B.cursorNodeStart, J = B.cursorNodeText) : (k = 0, M = v, R = C.cursorOffset, q = 0, J = B.formatted), M === J)
              return { formatted: B.formatted, cursorOffset: q + R, comments: S };
            let L = [...M];
            L.splice(R, 0, w);
            let Q = [...J], V = t(L, Q), j = q;
            for (let Y of V)
              if (Y.removed) {
                if (Y.value.includes(w))
                  break;
              } else
                j += Y.count;
            return { formatted: B.formatted, cursorOffset: j, comments: S };
          }
          return { formatted: B.formatted, cursorOffset: -1, comments: S };
        }
        function x(m, C) {
          let { ast: o, text: d } = c.parse(m, C), { rangeStart: v, rangeEnd: S } = F.calculateRange(d, C, o), b = d.slice(v, S), B = Math.min(v, d.lastIndexOf(`
`, v) + 1), k = d.slice(B, v).match(/^\s*/)[0], M = n(k, C.tabWidth), R = N(b, Object.assign(Object.assign({}, C), {}, { rangeStart: 0, rangeEnd: Number.POSITIVE_INFINITY, cursorOffset: C.cursorOffset > v && C.cursorOffset <= S ? C.cursorOffset - v : -1, endOfLine: "lf" }), M), q = R.formatted.trimEnd(), { cursorOffset: J } = C;
          J > S ? J += q.length - b.length : R.cursorOffset >= 0 && (J = R.cursorOffset + v);
          let L = d.slice(0, v) + q + d.slice(S);
          if (C.endOfLine !== "lf") {
            let Q = i2(C.endOfLine);
            J >= 0 && Q === `\r
` && (J += l(L.slice(0, J), `
`)), L = L.replace(/\n/g, Q);
          }
          return { formatted: L, cursorOffset: J, comments: R.comments };
        }
        function I(m, C, o) {
          return typeof C != "number" || Number.isNaN(C) || C < 0 || C > m.length ? o : C;
        }
        function P(m, C) {
          let { cursorOffset: o, rangeStart: d, rangeEnd: v } = C;
          return o = I(m, o, -1), d = I(m, d, 0), v = I(m, v, m.length), Object.assign(Object.assign({}, C), {}, { cursorOffset: o, rangeStart: d, rangeEnd: v });
        }
        function $(m, C) {
          let { cursorOffset: o, rangeStart: d, rangeEnd: v, endOfLine: S } = P(m, C), b = m.charAt(0) === _;
          if (b && (m = m.slice(1), o--, d--, v--), S === "auto" && (S = u(m)), m.includes("\r")) {
            let B = (k) => l(m.slice(0, Math.max(k, 0)), `\r
`);
            o -= B(o), d -= B(d), v -= B(v), m = p2(m);
          }
          return { hasBOM: b, text: m, options: P(m, Object.assign(Object.assign({}, C), {}, { cursorOffset: o, rangeStart: d, rangeEnd: v, endOfLine: S })) };
        }
        function D(m, C) {
          let o = c.resolveParser(C);
          return !o.hasPragma || o.hasPragma(m);
        }
        function T(m, C) {
          let { hasBOM: o, text: d, options: v } = $(m, y(C));
          if (v.rangeStart >= v.rangeEnd && d !== "" || v.requirePragma && !D(d, v))
            return { formatted: m, cursorOffset: C.cursorOffset, comments: [] };
          let S;
          return v.rangeStart > 0 || v.rangeEnd < d.length ? S = x(d, v) : (!v.requirePragma && v.insertPragma && v.printer.insertPragma && !D(d, v) && (d = v.printer.insertPragma(d)), S = N(d, v)), o && (S.formatted = _ + S.formatted, S.cursorOffset >= 0 && S.cursorOffset++), S;
        }
        r.exports = { formatWithCursor: T, parse(m, C, o) {
          let { text: d, options: v } = $(m, y(C)), S = c.parse(d, v);
          return o && (S.ast = h2(S.ast, v)), S;
        }, formatAST(m, C) {
          C = y(C);
          let o = f(m, C);
          return s(o, C);
        }, formatDoc(m, C) {
          return T(a(m), Object.assign(Object.assign({}, C), {}, { parser: "__js_expression" })).formatted;
        }, printToDoc(m, C) {
          C = y(C);
          let { ast: o, text: d } = c.parse(m, C);
          return E(d, o, C), f(o, C);
        }, printDocToString(m, C) {
          return s(m, y(C));
        } };
      } }), Um = te({ "src/common/util-shared.js"(e, r) {
        ne();
        var { getMaxContinuousCount: t, getStringWidth: s, getAlignmentSize: a, getIndentSize: n, skip: u, skipWhitespace: i2, skipSpaces: l, skipNewline: p2, skipToLineEnd: y, skipEverythingButNewLine: h2, skipInlineComment: g, skipTrailingComment: c, hasNewline: f, hasNewlineInRange: F, hasSpaces: _, isNextLineEmpty: w, isNextLineEmptyAfterIndex: E, isPreviousLineEmpty: N, getNextNonSpaceNonCommentCharacterIndex: x, makeString: I, addLeadingComment: P, addDanglingComment: $, addTrailingComment: D } = Ue();
        r.exports = { getMaxContinuousCount: t, getStringWidth: s, getAlignmentSize: a, getIndentSize: n, skip: u, skipWhitespace: i2, skipSpaces: l, skipNewline: p2, skipToLineEnd: y, skipEverythingButNewLine: h2, skipInlineComment: g, skipTrailingComment: c, hasNewline: f, hasNewlineInRange: F, hasSpaces: _, isNextLineEmpty: w, isNextLineEmptyAfterIndex: E, isPreviousLineEmpty: N, getNextNonSpaceNonCommentCharacterIndex: x, makeString: I, addLeadingComment: P, addDanglingComment: $, addTrailingComment: D };
      } }), _t = te({ "src/utils/create-language.js"(e, r) {
        ne(), r.exports = function(t, s) {
          let { languageId: a } = t, n = Hn(t, CD);
          return Object.assign(Object.assign({ linguistLanguageId: a }, n), s(t));
        };
      } }), Jm = te({ "node_modules/esutils/lib/ast.js"(e, r) {
        ne(), function() {
          function t(l) {
            if (l == null)
              return false;
            switch (l.type) {
              case "ArrayExpression":
              case "AssignmentExpression":
              case "BinaryExpression":
              case "CallExpression":
              case "ConditionalExpression":
              case "FunctionExpression":
              case "Identifier":
              case "Literal":
              case "LogicalExpression":
              case "MemberExpression":
              case "NewExpression":
              case "ObjectExpression":
              case "SequenceExpression":
              case "ThisExpression":
              case "UnaryExpression":
              case "UpdateExpression":
                return true;
            }
            return false;
          }
          function s(l) {
            if (l == null)
              return false;
            switch (l.type) {
              case "DoWhileStatement":
              case "ForInStatement":
              case "ForStatement":
              case "WhileStatement":
                return true;
            }
            return false;
          }
          function a(l) {
            if (l == null)
              return false;
            switch (l.type) {
              case "BlockStatement":
              case "BreakStatement":
              case "ContinueStatement":
              case "DebuggerStatement":
              case "DoWhileStatement":
              case "EmptyStatement":
              case "ExpressionStatement":
              case "ForInStatement":
              case "ForStatement":
              case "IfStatement":
              case "LabeledStatement":
              case "ReturnStatement":
              case "SwitchStatement":
              case "ThrowStatement":
              case "TryStatement":
              case "VariableDeclaration":
              case "WhileStatement":
              case "WithStatement":
                return true;
            }
            return false;
          }
          function n(l) {
            return a(l) || l != null && l.type === "FunctionDeclaration";
          }
          function u(l) {
            switch (l.type) {
              case "IfStatement":
                return l.alternate != null ? l.alternate : l.consequent;
              case "LabeledStatement":
              case "ForStatement":
              case "ForInStatement":
              case "WhileStatement":
              case "WithStatement":
                return l.body;
            }
            return null;
          }
          function i2(l) {
            var p2;
            if (l.type !== "IfStatement" || l.alternate == null)
              return false;
            p2 = l.consequent;
            do {
              if (p2.type === "IfStatement" && p2.alternate == null)
                return true;
              p2 = u(p2);
            } while (p2);
            return false;
          }
          r.exports = { isExpression: t, isStatement: a, isIterationStatement: s, isSourceElement: n, isProblematicIfStatement: i2, trailingStatement: u };
        }();
      } }), so = te({ "node_modules/esutils/lib/code.js"(e, r) {
        ne(), function() {
          var t, s, a, n, u, i2;
          s = { NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/, NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/ }, t = { NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/, NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ };
          function l(E) {
            return 48 <= E && E <= 57;
          }
          function p2(E) {
            return 48 <= E && E <= 57 || 97 <= E && E <= 102 || 65 <= E && E <= 70;
          }
          function y(E) {
            return E >= 48 && E <= 55;
          }
          a = [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279];
          function h2(E) {
            return E === 32 || E === 9 || E === 11 || E === 12 || E === 160 || E >= 5760 && a.indexOf(E) >= 0;
          }
          function g(E) {
            return E === 10 || E === 13 || E === 8232 || E === 8233;
          }
          function c(E) {
            if (E <= 65535)
              return String.fromCharCode(E);
            var N = String.fromCharCode(Math.floor((E - 65536) / 1024) + 55296), x = String.fromCharCode((E - 65536) % 1024 + 56320);
            return N + x;
          }
          for (n = new Array(128), i2 = 0; i2 < 128; ++i2)
            n[i2] = i2 >= 97 && i2 <= 122 || i2 >= 65 && i2 <= 90 || i2 === 36 || i2 === 95;
          for (u = new Array(128), i2 = 0; i2 < 128; ++i2)
            u[i2] = i2 >= 97 && i2 <= 122 || i2 >= 65 && i2 <= 90 || i2 >= 48 && i2 <= 57 || i2 === 36 || i2 === 95;
          function f(E) {
            return E < 128 ? n[E] : s.NonAsciiIdentifierStart.test(c(E));
          }
          function F(E) {
            return E < 128 ? u[E] : s.NonAsciiIdentifierPart.test(c(E));
          }
          function _(E) {
            return E < 128 ? n[E] : t.NonAsciiIdentifierStart.test(c(E));
          }
          function w(E) {
            return E < 128 ? u[E] : t.NonAsciiIdentifierPart.test(c(E));
          }
          r.exports = { isDecimalDigit: l, isHexDigit: p2, isOctalDigit: y, isWhiteSpace: h2, isLineTerminator: g, isIdentifierStartES5: f, isIdentifierPartES5: F, isIdentifierStartES6: _, isIdentifierPartES6: w };
        }();
      } }), zm = te({ "node_modules/esutils/lib/keyword.js"(e, r) {
        ne(), function() {
          var t = so();
          function s(f) {
            switch (f) {
              case "implements":
              case "interface":
              case "package":
              case "private":
              case "protected":
              case "public":
              case "static":
              case "let":
                return true;
              default:
                return false;
            }
          }
          function a(f, F) {
            return !F && f === "yield" ? false : n(f, F);
          }
          function n(f, F) {
            if (F && s(f))
              return true;
            switch (f.length) {
              case 2:
                return f === "if" || f === "in" || f === "do";
              case 3:
                return f === "var" || f === "for" || f === "new" || f === "try";
              case 4:
                return f === "this" || f === "else" || f === "case" || f === "void" || f === "with" || f === "enum";
              case 5:
                return f === "while" || f === "break" || f === "catch" || f === "throw" || f === "const" || f === "yield" || f === "class" || f === "super";
              case 6:
                return f === "return" || f === "typeof" || f === "delete" || f === "switch" || f === "export" || f === "import";
              case 7:
                return f === "default" || f === "finally" || f === "extends";
              case 8:
                return f === "function" || f === "continue" || f === "debugger";
              case 10:
                return f === "instanceof";
              default:
                return false;
            }
          }
          function u(f, F) {
            return f === "null" || f === "true" || f === "false" || a(f, F);
          }
          function i2(f, F) {
            return f === "null" || f === "true" || f === "false" || n(f, F);
          }
          function l(f) {
            return f === "eval" || f === "arguments";
          }
          function p2(f) {
            var F, _, w;
            if (f.length === 0 || (w = f.charCodeAt(0), !t.isIdentifierStartES5(w)))
              return false;
            for (F = 1, _ = f.length; F < _; ++F)
              if (w = f.charCodeAt(F), !t.isIdentifierPartES5(w))
                return false;
            return true;
          }
          function y(f, F) {
            return (f - 55296) * 1024 + (F - 56320) + 65536;
          }
          function h2(f) {
            var F, _, w, E, N;
            if (f.length === 0)
              return false;
            for (N = t.isIdentifierStartES6, F = 0, _ = f.length; F < _; ++F) {
              if (w = f.charCodeAt(F), 55296 <= w && w <= 56319) {
                if (++F, F >= _ || (E = f.charCodeAt(F), !(56320 <= E && E <= 57343)))
                  return false;
                w = y(w, E);
              }
              if (!N(w))
                return false;
              N = t.isIdentifierPartES6;
            }
            return true;
          }
          function g(f, F) {
            return p2(f) && !u(f, F);
          }
          function c(f, F) {
            return h2(f) && !i2(f, F);
          }
          r.exports = { isKeywordES5: a, isKeywordES6: n, isReservedWordES5: u, isReservedWordES6: i2, isRestrictedWord: l, isIdentifierNameES5: p2, isIdentifierNameES6: h2, isIdentifierES5: g, isIdentifierES6: c };
        }();
      } }), Xm = te({ "node_modules/esutils/lib/utils.js"(e) {
        ne(), function() {
          e.ast = Jm(), e.code = so(), e.keyword = zm();
        }();
      } }), Pt = te({ "src/language-js/utils/is-block-comment.js"(e, r) {
        ne();
        var t = /* @__PURE__ */ new Set(["Block", "CommentBlock", "MultiLine"]), s = (a) => t.has(a == null ? void 0 : a.type);
        r.exports = s;
      } }), Km = te({ "src/language-js/utils/is-node-matches.js"(e, r) {
        ne();
        function t(a, n) {
          let u = n.split(".");
          for (let i2 = u.length - 1; i2 >= 0; i2--) {
            let l = u[i2];
            if (i2 === 0)
              return a.type === "Identifier" && a.name === l;
            if (a.type !== "MemberExpression" || a.optional || a.computed || a.property.type !== "Identifier" || a.property.name !== l)
              return false;
            a = a.object;
          }
        }
        function s(a, n) {
          return n.some((u) => t(a, u));
        }
        r.exports = s;
      } }), Ke = te({ "src/language-js/utils/index.js"(e, r) {
        ne();
        var t = Xm().keyword.isIdentifierNameES5, { getLast: s, hasNewline: a, skipWhitespace: n, isNonEmptyArray: u, isNextLineEmptyAfterIndex: i2, getStringWidth: l } = Ue(), { locStart: p2, locEnd: y, hasSameLocStart: h2 } = ut(), g = Pt(), c = Km(), f = "(?:(?=.)\\s)", F = new RegExp(`^${f}*:`), _ = new RegExp(`^${f}*::`);
        function w(O) {
          var me, _e;
          return ((me = O.extra) === null || me === void 0 ? void 0 : me.parenthesized) && g((_e = O.trailingComments) === null || _e === void 0 ? void 0 : _e[0]) && F.test(O.trailingComments[0].value);
        }
        function E(O) {
          let me = O == null ? void 0 : O[0];
          return g(me) && _.test(me.value);
        }
        function N(O, me) {
          if (!O || typeof O != "object")
            return false;
          if (Array.isArray(O))
            return O.some((He) => N(He, me));
          let _e = me(O);
          return typeof _e == "boolean" ? _e : Object.values(O).some((He) => N(He, me));
        }
        function x(O) {
          return O.type === "AssignmentExpression" || O.type === "BinaryExpression" || O.type === "LogicalExpression" || O.type === "NGPipeExpression" || O.type === "ConditionalExpression" || de(O) || ue(O) || O.type === "SequenceExpression" || O.type === "TaggedTemplateExpression" || O.type === "BindExpression" || O.type === "UpdateExpression" && !O.prefix || st(O) || O.type === "TSNonNullExpression";
        }
        function I(O) {
          var me, _e, He, Ge, it, Qe;
          return O.expressions ? O.expressions[0] : (me = (_e = (He = (Ge = (it = (Qe = O.left) !== null && Qe !== void 0 ? Qe : O.test) !== null && it !== void 0 ? it : O.callee) !== null && Ge !== void 0 ? Ge : O.object) !== null && He !== void 0 ? He : O.tag) !== null && _e !== void 0 ? _e : O.argument) !== null && me !== void 0 ? me : O.expression;
        }
        function P(O, me) {
          if (me.expressions)
            return ["expressions", 0];
          if (me.left)
            return ["left"];
          if (me.test)
            return ["test"];
          if (me.object)
            return ["object"];
          if (me.callee)
            return ["callee"];
          if (me.tag)
            return ["tag"];
          if (me.argument)
            return ["argument"];
          if (me.expression)
            return ["expression"];
          throw new Error("Unexpected node has no left side.");
        }
        function $(O) {
          return O = new Set(O), (me) => O.has(me == null ? void 0 : me.type);
        }
        var D = $(["Line", "CommentLine", "SingleLine", "HashbangComment", "HTMLOpen", "HTMLClose"]), T = $(["ExportDefaultDeclaration", "ExportDefaultSpecifier", "DeclareExportDeclaration", "ExportNamedDeclaration", "ExportAllDeclaration"]);
        function m(O) {
          let me = O.getParentNode();
          return O.getName() === "declaration" && T(me) ? me : null;
        }
        var C = $(["BooleanLiteral", "DirectiveLiteral", "Literal", "NullLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "RegExpLiteral", "StringLiteral", "TemplateLiteral", "TSTypeLiteral", "JSXText"]);
        function o(O) {
          return O.type === "NumericLiteral" || O.type === "Literal" && typeof O.value == "number";
        }
        function d(O) {
          return O.type === "UnaryExpression" && (O.operator === "+" || O.operator === "-") && o(O.argument);
        }
        function v(O) {
          return O.type === "StringLiteral" || O.type === "Literal" && typeof O.value == "string";
        }
        var S = $(["ObjectTypeAnnotation", "TSTypeLiteral", "TSMappedType"]), b = $(["FunctionExpression", "ArrowFunctionExpression"]);
        function B(O) {
          return O.type === "FunctionExpression" || O.type === "ArrowFunctionExpression" && O.body.type === "BlockStatement";
        }
        function k(O) {
          return de(O) && O.callee.type === "Identifier" && ["async", "inject", "fakeAsync", "waitForAsync"].includes(O.callee.name);
        }
        var M = $(["JSXElement", "JSXFragment"]);
        function R(O, me) {
          if (O.parentParser !== "markdown" && O.parentParser !== "mdx")
            return false;
          let _e = me.getNode();
          if (!_e.expression || !M(_e.expression))
            return false;
          let He = me.getParentNode();
          return He.type === "Program" && He.body.length === 1;
        }
        function q(O) {
          return O.kind === "get" || O.kind === "set";
        }
        function J(O) {
          return q(O) || h2(O, O.value);
        }
        function L(O) {
          return (O.type === "ObjectTypeProperty" || O.type === "ObjectTypeInternalSlot") && O.value.type === "FunctionTypeAnnotation" && !O.static && !J(O);
        }
        function Q(O) {
          return (O.type === "TypeAnnotation" || O.type === "TSTypeAnnotation") && O.typeAnnotation.type === "FunctionTypeAnnotation" && !O.static && !h2(O, O.typeAnnotation);
        }
        var V = $(["BinaryExpression", "LogicalExpression", "NGPipeExpression"]);
        function j(O) {
          return ue(O) || O.type === "BindExpression" && Boolean(O.object);
        }
        var Y = /* @__PURE__ */ new Set(["AnyTypeAnnotation", "TSAnyKeyword", "NullLiteralTypeAnnotation", "TSNullKeyword", "ThisTypeAnnotation", "TSThisType", "NumberTypeAnnotation", "TSNumberKeyword", "VoidTypeAnnotation", "TSVoidKeyword", "BooleanTypeAnnotation", "TSBooleanKeyword", "BigIntTypeAnnotation", "TSBigIntKeyword", "SymbolTypeAnnotation", "TSSymbolKeyword", "StringTypeAnnotation", "TSStringKeyword", "BooleanLiteralTypeAnnotation", "StringLiteralTypeAnnotation", "BigIntLiteralTypeAnnotation", "NumberLiteralTypeAnnotation", "TSLiteralType", "TSTemplateLiteralType", "EmptyTypeAnnotation", "MixedTypeAnnotation", "TSNeverKeyword", "TSObjectKeyword", "TSUndefinedKeyword", "TSUnknownKeyword"]);
        function ie(O) {
          return O ? !!((O.type === "GenericTypeAnnotation" || O.type === "TSTypeReference") && !O.typeParameters || Y.has(O.type)) : false;
        }
        function ee(O) {
          let me = /^(?:before|after)(?:Each|All)$/;
          return O.callee.type === "Identifier" && me.test(O.callee.name) && O.arguments.length === 1;
        }
        var ce = ["it", "it.only", "it.skip", "describe", "describe.only", "describe.skip", "test", "test.only", "test.skip", "test.step", "test.describe", "test.describe.only", "test.describe.parallel", "test.describe.parallel.only", "test.describe.serial", "test.describe.serial.only", "skip", "xit", "xdescribe", "xtest", "fit", "fdescribe", "ftest"];
        function W(O) {
          return c(O, ce);
        }
        function K(O, me) {
          if (O.type !== "CallExpression")
            return false;
          if (O.arguments.length === 1) {
            if (k(O) && me && K(me))
              return b(O.arguments[0]);
            if (ee(O))
              return k(O.arguments[0]);
          } else if ((O.arguments.length === 2 || O.arguments.length === 3) && (O.arguments[0].type === "TemplateLiteral" || v(O.arguments[0])) && W(O.callee))
            return O.arguments[2] && !o(O.arguments[2]) ? false : (O.arguments.length === 2 ? b(O.arguments[1]) : B(O.arguments[1]) && ve(O.arguments[1]).length <= 1) || k(O.arguments[1]);
          return false;
        }
        var de = $(["CallExpression", "OptionalCallExpression"]), ue = $(["MemberExpression", "OptionalMemberExpression"]);
        function Fe(O) {
          let me = "expressions";
          O.type === "TSTemplateLiteralType" && (me = "types");
          let _e = O[me];
          return _e.length === 0 ? false : _e.every((He) => {
            if (Me(He))
              return false;
            if (He.type === "Identifier" || He.type === "ThisExpression")
              return true;
            if (ue(He)) {
              let Ge = He;
              for (; ue(Ge); )
                if (Ge.property.type !== "Identifier" && Ge.property.type !== "Literal" && Ge.property.type !== "StringLiteral" && Ge.property.type !== "NumericLiteral" || (Ge = Ge.object, Me(Ge)))
                  return false;
              return Ge.type === "Identifier" || Ge.type === "ThisExpression";
            }
            return false;
          });
        }
        function z(O, me) {
          return O === "+" || O === "-" ? O + me : me;
        }
        function U(O, me) {
          let _e = p2(me), He = n(O, y(me));
          return He !== false && O.slice(_e, _e + 2) === "/*" && O.slice(He, He + 2) === "*/";
        }
        function Z(O, me) {
          return M(me) ? Oe(me) : Me(me, Te.Leading, (_e) => a(O, y(_e)));
        }
        function se(O, me) {
          return me.parser !== "json" && v(O.key) && oe(O.key).slice(1, -1) === O.key.value && (t(O.key.value) && !(me.parser === "babel-ts" && O.type === "ClassProperty" || me.parser === "typescript" && O.type === "PropertyDefinition") || fe(O.key.value) && String(Number(O.key.value)) === O.key.value && (me.parser === "babel" || me.parser === "acorn" || me.parser === "espree" || me.parser === "meriyah" || me.parser === "__babel_estree"));
        }
        function fe(O) {
          return /^(?:\d+|\d+\.\d+)$/.test(O);
        }
        function ge(O, me) {
          let _e = /^[fx]?(?:describe|it|test)$/;
          return me.type === "TaggedTemplateExpression" && me.quasi === O && me.tag.type === "MemberExpression" && me.tag.property.type === "Identifier" && me.tag.property.name === "each" && (me.tag.object.type === "Identifier" && _e.test(me.tag.object.name) || me.tag.object.type === "MemberExpression" && me.tag.object.property.type === "Identifier" && (me.tag.object.property.name === "only" || me.tag.object.property.name === "skip") && me.tag.object.object.type === "Identifier" && _e.test(me.tag.object.object.name));
        }
        function he(O) {
          return O.quasis.some((me) => me.value.raw.includes(`
`));
        }
        function we(O, me) {
          return (O.type === "TemplateLiteral" && he(O) || O.type === "TaggedTemplateExpression" && he(O.quasi)) && !a(me, p2(O), { backwards: true });
        }
        function ke(O) {
          if (!Me(O))
            return false;
          let me = s(ae(O, Te.Dangling));
          return me && !g(me);
        }
        function Re(O) {
          if (O.length <= 1)
            return false;
          let me = 0;
          for (let _e of O)
            if (b(_e)) {
              if (me += 1, me > 1)
                return true;
            } else if (de(_e)) {
              for (let He of _e.arguments)
                if (b(He))
                  return true;
            }
          return false;
        }
        function Ne(O) {
          let me = O.getValue(), _e = O.getParentNode();
          return de(me) && de(_e) && _e.callee === me && me.arguments.length > _e.arguments.length && _e.arguments.length > 0;
        }
        function Pe(O, me) {
          if (me >= 2)
            return false;
          let _e = (Qe) => Pe(Qe, me + 1), He = O.type === "Literal" && "regex" in O && O.regex.pattern || O.type === "RegExpLiteral" && O.pattern;
          if (He && l(He) > 5)
            return false;
          if (O.type === "Literal" || O.type === "BigIntLiteral" || O.type === "DecimalLiteral" || O.type === "BooleanLiteral" || O.type === "NullLiteral" || O.type === "NumericLiteral" || O.type === "RegExpLiteral" || O.type === "StringLiteral" || O.type === "Identifier" || O.type === "ThisExpression" || O.type === "Super" || O.type === "PrivateName" || O.type === "PrivateIdentifier" || O.type === "ArgumentPlaceholder" || O.type === "Import")
            return true;
          if (O.type === "TemplateLiteral")
            return O.quasis.every((Qe) => !Qe.value.raw.includes(`
`)) && O.expressions.every(_e);
          if (O.type === "ObjectExpression")
            return O.properties.every((Qe) => !Qe.computed && (Qe.shorthand || Qe.value && _e(Qe.value)));
          if (O.type === "ArrayExpression")
            return O.elements.every((Qe) => Qe === null || _e(Qe));
          if (tt(O))
            return (O.type === "ImportExpression" || Pe(O.callee, me)) && Ye(O).every(_e);
          if (ue(O))
            return Pe(O.object, me) && Pe(O.property, me);
          let Ge = { "!": true, "-": true, "+": true, "~": true };
          if (O.type === "UnaryExpression" && Ge[O.operator])
            return Pe(O.argument, me);
          let it = { "++": true, "--": true };
          return O.type === "UpdateExpression" && it[O.operator] ? Pe(O.argument, me) : O.type === "TSNonNullExpression" ? Pe(O.expression, me) : false;
        }
        function oe(O) {
          var me, _e;
          return (me = (_e = O.extra) === null || _e === void 0 ? void 0 : _e.raw) !== null && me !== void 0 ? me : O.raw;
        }
        function H(O) {
          return O;
        }
        function pe(O) {
          return O.filepath && /\.tsx$/i.test(O.filepath);
        }
        function X(O) {
          let me = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "es5";
          return O.trailingComma === "es5" && me === "es5" || O.trailingComma === "all" && (me === "all" || me === "es5");
        }
        function le(O, me) {
          switch (O.type) {
            case "BinaryExpression":
            case "LogicalExpression":
            case "AssignmentExpression":
            case "NGPipeExpression":
              return le(O.left, me);
            case "MemberExpression":
            case "OptionalMemberExpression":
              return le(O.object, me);
            case "TaggedTemplateExpression":
              return O.tag.type === "FunctionExpression" ? false : le(O.tag, me);
            case "CallExpression":
            case "OptionalCallExpression":
              return O.callee.type === "FunctionExpression" ? false : le(O.callee, me);
            case "ConditionalExpression":
              return le(O.test, me);
            case "UpdateExpression":
              return !O.prefix && le(O.argument, me);
            case "BindExpression":
              return O.object && le(O.object, me);
            case "SequenceExpression":
              return le(O.expressions[0], me);
            case "TSSatisfiesExpression":
            case "TSAsExpression":
            case "TSNonNullExpression":
              return le(O.expression, me);
            default:
              return me(O);
          }
        }
        var Ae = { "==": true, "!=": true, "===": true, "!==": true }, Ee = { "*": true, "/": true, "%": true }, De = { ">>": true, ">>>": true, "<<": true };
        function A(O, me) {
          return !(re2(me) !== re2(O) || O === "**" || Ae[O] && Ae[me] || me === "%" && Ee[O] || O === "%" && Ee[me] || me !== O && Ee[me] && Ee[O] || De[O] && De[me]);
        }
        var G = new Map([["|>"], ["??"], ["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "===", "!=", "!=="], ["<", ">", "<=", ">=", "in", "instanceof"], [">>", "<<", ">>>"], ["+", "-"], ["*", "/", "%"], ["**"]].flatMap((O, me) => O.map((_e) => [_e, me])));
        function re2(O) {
          return G.get(O);
        }
        function ye(O) {
          return Boolean(De[O]) || O === "|" || O === "^" || O === "&";
        }
        function Ce(O) {
          var me;
          if (O.rest)
            return true;
          let _e = ve(O);
          return ((me = s(_e)) === null || me === void 0 ? void 0 : me.type) === "RestElement";
        }
        var Be = /* @__PURE__ */ new WeakMap();
        function ve(O) {
          if (Be.has(O))
            return Be.get(O);
          let me = [];
          return O.this && me.push(O.this), Array.isArray(O.parameters) ? me.push(...O.parameters) : Array.isArray(O.params) && me.push(...O.params), O.rest && me.push(O.rest), Be.set(O, me), me;
        }
        function ze(O, me) {
          let _e = O.getValue(), He = 0, Ge = (it) => me(it, He++);
          _e.this && O.call(Ge, "this"), Array.isArray(_e.parameters) ? O.each(Ge, "parameters") : Array.isArray(_e.params) && O.each(Ge, "params"), _e.rest && O.call(Ge, "rest");
        }
        var be = /* @__PURE__ */ new WeakMap();
        function Ye(O) {
          if (be.has(O))
            return be.get(O);
          let me = O.arguments;
          return O.type === "ImportExpression" && (me = [O.source], O.attributes && me.push(O.attributes)), be.set(O, me), me;
        }
        function Se(O, me) {
          let _e = O.getValue();
          _e.type === "ImportExpression" ? (O.call((He) => me(He, 0), "source"), _e.attributes && O.call((He) => me(He, 1), "attributes")) : O.each(me, "arguments");
        }
        function Ie(O) {
          return O.value.trim() === "prettier-ignore" && !O.unignore;
        }
        function Oe(O) {
          return O && (O.prettierIgnore || Me(O, Te.PrettierIgnore));
        }
        function Je(O) {
          let me = O.getValue();
          return Oe(me);
        }
        var Te = { Leading: 1 << 1, Trailing: 1 << 2, Dangling: 1 << 3, Block: 1 << 4, Line: 1 << 5, PrettierIgnore: 1 << 6, First: 1 << 7, Last: 1 << 8 }, je = (O, me) => {
          if (typeof O == "function" && (me = O, O = 0), O || me)
            return (_e, He, Ge) => !(O & Te.Leading && !_e.leading || O & Te.Trailing && !_e.trailing || O & Te.Dangling && (_e.leading || _e.trailing) || O & Te.Block && !g(_e) || O & Te.Line && !D(_e) || O & Te.First && He !== 0 || O & Te.Last && He !== Ge.length - 1 || O & Te.PrettierIgnore && !Ie(_e) || me && !me(_e));
        };
        function Me(O, me, _e) {
          if (!u(O == null ? void 0 : O.comments))
            return false;
          let He = je(me, _e);
          return He ? O.comments.some(He) : true;
        }
        function ae(O, me, _e) {
          if (!Array.isArray(O == null ? void 0 : O.comments))
            return [];
          let He = je(me, _e);
          return He ? O.comments.filter(He) : O.comments;
        }
        var nt = (O, me) => {
          let { originalText: _e } = me;
          return i2(_e, y(O));
        };
        function tt(O) {
          return de(O) || O.type === "NewExpression" || O.type === "ImportExpression";
        }
        function Ve(O) {
          return O && (O.type === "ObjectProperty" || O.type === "Property" && !O.method && O.kind === "init");
        }
        function We(O) {
          return Boolean(O.__isUsingHackPipeline);
        }
        var Xe = Symbol("ifWithoutBlockAndSameLineComment");
        function st(O) {
          return O.type === "TSAsExpression" || O.type === "TSSatisfiesExpression";
        }
        r.exports = { getFunctionParameters: ve, iterateFunctionParametersPath: ze, getCallArguments: Ye, iterateCallArgumentsPath: Se, hasRestParameter: Ce, getLeftSide: I, getLeftSidePathName: P, getParentExportDeclaration: m, getTypeScriptMappedTypeModifier: z, hasFlowAnnotationComment: E, hasFlowShorthandAnnotationComment: w, hasLeadingOwnLineComment: Z, hasNakedLeftSide: x, hasNode: N, hasIgnoreComment: Je, hasNodeIgnoreComment: Oe, identity: H, isBinaryish: V, isCallLikeExpression: tt, isEnabledHackPipeline: We, isLineComment: D, isPrettierIgnoreComment: Ie, isCallExpression: de, isMemberExpression: ue, isExportDeclaration: T, isFlowAnnotationComment: U, isFunctionCompositionArgs: Re, isFunctionNotation: J, isFunctionOrArrowExpression: b, isGetterOrSetter: q, isJestEachTemplateLiteral: ge, isJsxNode: M, isLiteral: C, isLongCurriedCallExpression: Ne, isSimpleCallArgument: Pe, isMemberish: j, isNumericLiteral: o, isSignedNumericLiteral: d, isObjectProperty: Ve, isObjectType: S, isObjectTypePropertyAFunction: L, isSimpleType: ie, isSimpleNumber: fe, isSimpleTemplateLiteral: Fe, isStringLiteral: v, isStringPropSafeToUnquote: se, isTemplateOnItsOwnLine: we, isTestCall: K, isTheOnlyJsxElementInMarkdown: R, isTSXFile: pe, isTypeAnnotationAFunction: Q, isNextLineEmpty: nt, needsHardlineAfterDanglingComment: ke, rawText: oe, shouldPrintComma: X, isBitwiseOperator: ye, shouldFlatten: A, startsWithNoLookaheadToken: le, getPrecedence: re2, hasComment: Me, getComments: ae, CommentCheckFlags: Te, markerForIfWithoutBlockAndSameLineComment: Xe, isTSTypeExpression: st };
      } }), jt = te({ "src/language-js/print/template-literal.js"(e, r) {
        ne();
        var t = lt(), { getStringWidth: s, getIndentSize: a } = Ue(), { builders: { join: n, hardline: u, softline: i2, group: l, indent: p2, align: y, lineSuffixBoundary: h2, addAlignmentToDoc: g }, printer: { printDocToString: c }, utils: { mapDoc: f } } = qe(), { isBinaryish: F, isJestEachTemplateLiteral: _, isSimpleTemplateLiteral: w, hasComment: E, isMemberExpression: N, isTSTypeExpression: x } = Ke();
        function I(C, o, d) {
          let v = C.getValue();
          if (v.type === "TemplateLiteral" && _(v, C.getParentNode())) {
            let R = P(C, d, o);
            if (R)
              return R;
          }
          let b = "expressions";
          v.type === "TSTemplateLiteralType" && (b = "types");
          let B = [], k = C.map(o, b), M = w(v);
          return M && (k = k.map((R) => c(R, Object.assign(Object.assign({}, d), {}, { printWidth: Number.POSITIVE_INFINITY })).formatted)), B.push(h2, "`"), C.each((R) => {
            let q = R.getName();
            if (B.push(o()), q < k.length) {
              let { tabWidth: J } = d, L = R.getValue(), Q = a(L.value.raw, J), V = k[q];
              if (!M) {
                let Y = v[b][q];
                (E(Y) || N(Y) || Y.type === "ConditionalExpression" || Y.type === "SequenceExpression" || x(Y) || F(Y)) && (V = [p2([i2, V]), i2]);
              }
              let j = Q === 0 && L.value.raw.endsWith(`
`) ? y(Number.NEGATIVE_INFINITY, V) : g(V, Q, J);
              B.push(l(["${", j, h2, "}"]));
            }
          }, "quasis"), B.push("`"), B;
        }
        function P(C, o, d) {
          let v = C.getNode(), S = v.quasis[0].value.raw.trim().split(/\s*\|\s*/);
          if (S.length > 1 || S.some((b) => b.length > 0)) {
            o.__inJestEach = true;
            let b = C.map(d, "expressions");
            o.__inJestEach = false;
            let B = [], k = b.map((L) => "${" + c(L, Object.assign(Object.assign({}, o), {}, { printWidth: Number.POSITIVE_INFINITY, endOfLine: "lf" })).formatted + "}"), M = [{ hasLineBreak: false, cells: [] }];
            for (let L = 1; L < v.quasis.length; L++) {
              let Q = t(M), V = k[L - 1];
              Q.cells.push(V), V.includes(`
`) && (Q.hasLineBreak = true), v.quasis[L].value.raw.includes(`
`) && M.push({ hasLineBreak: false, cells: [] });
            }
            let R = Math.max(S.length, ...M.map((L) => L.cells.length)), q = Array.from({ length: R }).fill(0), J = [{ cells: S }, ...M.filter((L) => L.cells.length > 0)];
            for (let { cells: L } of J.filter((Q) => !Q.hasLineBreak))
              for (let [Q, V] of L.entries())
                q[Q] = Math.max(q[Q], s(V));
            return B.push(h2, "`", p2([u, n(u, J.map((L) => n(" | ", L.cells.map((Q, V) => L.hasLineBreak ? Q : Q + " ".repeat(q[V] - s(Q))))))]), u, "`"), B;
          }
        }
        function $(C, o) {
          let d = C.getValue(), v = o();
          return E(d) && (v = l([p2([i2, v]), i2])), ["${", v, h2, "}"];
        }
        function D(C, o) {
          return C.map((d) => $(d, o), "expressions");
        }
        function T(C, o) {
          return f(C, (d) => typeof d == "string" ? o ? d.replace(/(\\*)`/g, "$1$1\\`") : m(d) : d);
        }
        function m(C) {
          return C.replace(/([\\`]|\${)/g, "\\$1");
        }
        r.exports = { printTemplateLiteral: I, printTemplateExpressions: D, escapeTemplateCharacters: T, uncookTemplateElementValue: m };
      } }), Ym = te({ "src/language-js/embed/markdown.js"(e, r) {
        ne();
        var { builders: { indent: t, softline: s, literalline: a, dedentToRoot: n } } = qe(), { escapeTemplateCharacters: u } = jt();
        function i2(p2, y, h2) {
          let c = p2.getValue().quasis[0].value.raw.replace(/((?:\\\\)*)\\`/g, (w, E) => "\\".repeat(E.length / 2) + "`"), f = l(c), F = f !== "";
          F && (c = c.replace(new RegExp(`^${f}`, "gm"), ""));
          let _ = u(h2(c, { parser: "markdown", __inJsTemplate: true }, { stripTrailingHardline: true }), true);
          return ["`", F ? t([s, _]) : [a, n(_)], s, "`"];
        }
        function l(p2) {
          let y = p2.match(/^([^\S\n]*)\S/m);
          return y === null ? "" : y[1];
        }
        r.exports = i2;
      } }), Qm = te({ "src/language-js/embed/css.js"(e, r) {
        ne();
        var { isNonEmptyArray: t } = Ue(), { builders: { indent: s, hardline: a, softline: n }, utils: { mapDoc: u, replaceEndOfLine: i2, cleanDoc: l } } = qe(), { printTemplateExpressions: p2 } = jt();
        function y(c, f, F) {
          let _ = c.getValue(), w = _.quasis.map((P) => P.value.raw), E = 0, N = w.reduce((P, $, D) => D === 0 ? $ : P + "@prettier-placeholder-" + E++ + "-id" + $, ""), x = F(N, { parser: "scss" }, { stripTrailingHardline: true }), I = p2(c, f);
          return h2(x, _, I);
        }
        function h2(c, f, F) {
          if (f.quasis.length === 1 && !f.quasis[0].value.raw.trim())
            return "``";
          let w = g(c, F);
          if (!w)
            throw new Error("Couldn't insert all the expressions");
          return ["`", s([a, w]), n, "`"];
        }
        function g(c, f) {
          if (!t(f))
            return c;
          let F = 0, _ = u(l(c), (w) => typeof w != "string" || !w.includes("@prettier-placeholder") ? w : w.split(/@prettier-placeholder-(\d+)-id/).map((E, N) => N % 2 === 0 ? i2(E) : (F++, f[E])));
          return f.length === F ? _ : null;
        }
        r.exports = y;
      } }), Zm = te({ "src/language-js/embed/graphql.js"(e, r) {
        ne();
        var { builders: { indent: t, join: s, hardline: a } } = qe(), { escapeTemplateCharacters: n, printTemplateExpressions: u } = jt();
        function i2(p2, y, h2) {
          let g = p2.getValue(), c = g.quasis.length;
          if (c === 1 && g.quasis[0].value.raw.trim() === "")
            return "``";
          let f = u(p2, y), F = [];
          for (let _ = 0; _ < c; _++) {
            let w = g.quasis[_], E = _ === 0, N = _ === c - 1, x = w.value.cooked, I = x.split(`
`), P = I.length, $ = f[_], D = P > 2 && I[0].trim() === "" && I[1].trim() === "", T = P > 2 && I[P - 1].trim() === "" && I[P - 2].trim() === "", m = I.every((o) => /^\s*(?:#[^\n\r]*)?$/.test(o));
            if (!N && /#[^\n\r]*$/.test(I[P - 1]))
              return null;
            let C = null;
            m ? C = l(I) : C = h2(x, { parser: "graphql" }, { stripTrailingHardline: true }), C ? (C = n(C, false), !E && D && F.push(""), F.push(C), !N && T && F.push("")) : !E && !N && D && F.push(""), $ && F.push($);
          }
          return ["`", t([a, s(a, F)]), a, "`"];
        }
        function l(p2) {
          let y = [], h2 = false, g = p2.map((c) => c.trim());
          for (let [c, f] of g.entries())
            f !== "" && (g[c - 1] === "" && h2 ? y.push([a, f]) : y.push(f), h2 = true);
          return y.length === 0 ? null : s(a, y);
        }
        r.exports = i2;
      } }), ed = te({ "src/language-js/embed/html.js"(e, r) {
        ne();
        var { builders: { indent: t, line: s, hardline: a, group: n }, utils: { mapDoc: u } } = qe(), { printTemplateExpressions: i2, uncookTemplateElementValue: l } = jt(), p2 = 0;
        function y(h2, g, c, f, F) {
          let { parser: _ } = F, w = h2.getValue(), E = p2;
          p2 = p2 + 1 >>> 0;
          let N = (d) => `PRETTIER_HTML_PLACEHOLDER_${d}_${E}_IN_JS`, x = w.quasis.map((d, v, S) => v === S.length - 1 ? d.value.cooked : d.value.cooked + N(v)).join(""), I = i2(h2, g);
          if (I.length === 0 && x.trim().length === 0)
            return "``";
          let P = new RegExp(N("(\\d+)"), "g"), $ = 0, D = c(x, { parser: _, __onHtmlRoot(d) {
            $ = d.children.length;
          } }, { stripTrailingHardline: true }), T = u(D, (d) => {
            if (typeof d != "string")
              return d;
            let v = [], S = d.split(P);
            for (let b = 0; b < S.length; b++) {
              let B = S[b];
              if (b % 2 === 0) {
                B && (B = l(B), f.__embeddedInHtml && (B = B.replace(/<\/(script)\b/gi, "<\\/$1")), v.push(B));
                continue;
              }
              let k = Number(B);
              v.push(I[k]);
            }
            return v;
          }), m = /^\s/.test(x) ? " " : "", C = /\s$/.test(x) ? " " : "", o = f.htmlWhitespaceSensitivity === "ignore" ? a : m && C ? s : null;
          return n(o ? ["`", t([o, n(T)]), o, "`"] : ["`", m, $ > 1 ? t(n(T)) : n(T), C, "`"]);
        }
        r.exports = y;
      } }), td = te({ "src/language-js/embed.js"(e, r) {
        ne();
        var { hasComment: t, CommentCheckFlags: s, isObjectProperty: a } = Ke(), n = Ym(), u = Qm(), i2 = Zm(), l = ed();
        function p2(D) {
          if (g(D) || _(D) || w(D) || c(D))
            return "css";
          if (x(D))
            return "graphql";
          if (P(D))
            return "html";
          if (f(D))
            return "angular";
          if (h2(D))
            return "markdown";
        }
        function y(D, T, m, C) {
          let o = D.getValue();
          if (o.type !== "TemplateLiteral" || $(o))
            return;
          let d = p2(D);
          if (d) {
            if (d === "markdown")
              return n(D, T, m);
            if (d === "css")
              return u(D, T, m);
            if (d === "graphql")
              return i2(D, T, m);
            if (d === "html" || d === "angular")
              return l(D, T, m, C, { parser: d });
          }
        }
        function h2(D) {
          let T = D.getValue(), m = D.getParentNode();
          return m && m.type === "TaggedTemplateExpression" && T.quasis.length === 1 && m.tag.type === "Identifier" && (m.tag.name === "md" || m.tag.name === "markdown");
        }
        function g(D) {
          let T = D.getValue(), m = D.getParentNode(), C = D.getParentNode(1);
          return C && T.quasis && m.type === "JSXExpressionContainer" && C.type === "JSXElement" && C.openingElement.name.name === "style" && C.openingElement.attributes.some((o) => o.name.name === "jsx") || m && m.type === "TaggedTemplateExpression" && m.tag.type === "Identifier" && m.tag.name === "css" || m && m.type === "TaggedTemplateExpression" && m.tag.type === "MemberExpression" && m.tag.object.name === "css" && (m.tag.property.name === "global" || m.tag.property.name === "resolve");
        }
        function c(D) {
          return D.match((T) => T.type === "TemplateLiteral", (T, m) => T.type === "ArrayExpression" && m === "elements", (T, m) => a(T) && T.key.type === "Identifier" && T.key.name === "styles" && m === "value", ...F);
        }
        function f(D) {
          return D.match((T) => T.type === "TemplateLiteral", (T, m) => a(T) && T.key.type === "Identifier" && T.key.name === "template" && m === "value", ...F);
        }
        var F = [(D, T) => D.type === "ObjectExpression" && T === "properties", (D, T) => D.type === "CallExpression" && D.callee.type === "Identifier" && D.callee.name === "Component" && T === "arguments", (D, T) => D.type === "Decorator" && T === "expression"];
        function _(D) {
          let T = D.getParentNode();
          if (!T || T.type !== "TaggedTemplateExpression")
            return false;
          let m = T.tag.type === "ParenthesizedExpression" ? T.tag.expression : T.tag;
          switch (m.type) {
            case "MemberExpression":
              return E(m.object) || N(m);
            case "CallExpression":
              return E(m.callee) || m.callee.type === "MemberExpression" && (m.callee.object.type === "MemberExpression" && (E(m.callee.object.object) || N(m.callee.object)) || m.callee.object.type === "CallExpression" && E(m.callee.object.callee));
            case "Identifier":
              return m.name === "css";
            default:
              return false;
          }
        }
        function w(D) {
          let T = D.getParentNode(), m = D.getParentNode(1);
          return m && T.type === "JSXExpressionContainer" && m.type === "JSXAttribute" && m.name.type === "JSXIdentifier" && m.name.name === "css";
        }
        function E(D) {
          return D.type === "Identifier" && D.name === "styled";
        }
        function N(D) {
          return /^[A-Z]/.test(D.object.name) && D.property.name === "extend";
        }
        function x(D) {
          let T = D.getValue(), m = D.getParentNode();
          return I(T, "GraphQL") || m && (m.type === "TaggedTemplateExpression" && (m.tag.type === "MemberExpression" && m.tag.object.name === "graphql" && m.tag.property.name === "experimental" || m.tag.type === "Identifier" && (m.tag.name === "gql" || m.tag.name === "graphql")) || m.type === "CallExpression" && m.callee.type === "Identifier" && m.callee.name === "graphql");
        }
        function I(D, T) {
          return t(D, s.Block | s.Leading, (m) => {
            let { value: C } = m;
            return C === ` ${T} `;
          });
        }
        function P(D) {
          return I(D.getValue(), "HTML") || D.match((T) => T.type === "TemplateLiteral", (T, m) => T.type === "TaggedTemplateExpression" && T.tag.type === "Identifier" && T.tag.name === "html" && m === "quasi");
        }
        function $(D) {
          let { quasis: T } = D;
          return T.some((m) => {
            let { value: { cooked: C } } = m;
            return C === null;
          });
        }
        r.exports = y;
      } }), rd = te({ "src/language-js/clean.js"(e, r) {
        ne();
        var t = Pt(), s = /* @__PURE__ */ new Set(["range", "raw", "comments", "leadingComments", "trailingComments", "innerComments", "extra", "start", "end", "loc", "flags", "errors", "tokens"]), a = (u) => {
          for (let i2 of u.quasis)
            delete i2.value;
        };
        function n(u, i2, l) {
          if (u.type === "Program" && delete i2.sourceType, (u.type === "BigIntLiteral" || u.type === "BigIntLiteralTypeAnnotation") && i2.value && (i2.value = i2.value.toLowerCase()), (u.type === "BigIntLiteral" || u.type === "Literal") && i2.bigint && (i2.bigint = i2.bigint.toLowerCase()), u.type === "DecimalLiteral" && (i2.value = Number(i2.value)), u.type === "Literal" && i2.decimal && (i2.decimal = Number(i2.decimal)), u.type === "EmptyStatement" || u.type === "JSXText" || u.type === "JSXExpressionContainer" && (u.expression.type === "Literal" || u.expression.type === "StringLiteral") && u.expression.value === " ")
            return null;
          if ((u.type === "Property" || u.type === "ObjectProperty" || u.type === "MethodDefinition" || u.type === "ClassProperty" || u.type === "ClassMethod" || u.type === "PropertyDefinition" || u.type === "TSDeclareMethod" || u.type === "TSPropertySignature" || u.type === "ObjectTypeProperty") && typeof u.key == "object" && u.key && (u.key.type === "Literal" || u.key.type === "NumericLiteral" || u.key.type === "StringLiteral" || u.key.type === "Identifier") && delete i2.key, u.type === "JSXElement" && u.openingElement.name.name === "style" && u.openingElement.attributes.some((h2) => h2.name.name === "jsx"))
            for (let { type: h2, expression: g } of i2.children)
              h2 === "JSXExpressionContainer" && g.type === "TemplateLiteral" && a(g);
          u.type === "JSXAttribute" && u.name.name === "css" && u.value.type === "JSXExpressionContainer" && u.value.expression.type === "TemplateLiteral" && a(i2.value.expression), u.type === "JSXAttribute" && u.value && u.value.type === "Literal" && /["']|&quot;|&apos;/.test(u.value.value) && (i2.value.value = i2.value.value.replace(/["']|&quot;|&apos;/g, '"'));
          let p2 = u.expression || u.callee;
          if (u.type === "Decorator" && p2.type === "CallExpression" && p2.callee.name === "Component" && p2.arguments.length === 1) {
            let h2 = u.expression.arguments[0].properties;
            for (let [g, c] of i2.expression.arguments[0].properties.entries())
              switch (h2[g].key.name) {
                case "styles":
                  c.value.type === "ArrayExpression" && a(c.value.elements[0]);
                  break;
                case "template":
                  c.value.type === "TemplateLiteral" && a(c.value);
                  break;
              }
          }
          if (u.type === "TaggedTemplateExpression" && (u.tag.type === "MemberExpression" || u.tag.type === "Identifier" && (u.tag.name === "gql" || u.tag.name === "graphql" || u.tag.name === "css" || u.tag.name === "md" || u.tag.name === "markdown" || u.tag.name === "html") || u.tag.type === "CallExpression") && a(i2.quasi), u.type === "TemplateLiteral") {
            var y;
            (((y = u.leadingComments) === null || y === void 0 ? void 0 : y.some((g) => t(g) && ["GraphQL", "HTML"].some((c) => g.value === ` ${c} `))) || l.type === "CallExpression" && l.callee.name === "graphql" || !u.leadingComments) && a(i2);
          }
          if (u.type === "InterpreterDirective" && (i2.value = i2.value.trimEnd()), (u.type === "TSIntersectionType" || u.type === "TSUnionType") && u.types.length === 1)
            return i2.types[0];
        }
        n.ignoredProperties = s, r.exports = n;
      } }), io = {};
      Kt(io, { EOL: () => Wn, arch: () => nd, cpus: () => Do, default: () => vo, endianness: () => ao, freemem: () => po, getNetworkInterfaces: () => ho, hostname: () => oo, loadavg: () => lo, networkInterfaces: () => yo, platform: () => ud, release: () => go, tmpDir: () => $n, tmpdir: () => Vn, totalmem: () => fo, type: () => mo, uptime: () => co });
      function ao() {
        if (typeof Tr > "u") {
          var e = new ArrayBuffer(2), r = new Uint8Array(e), t = new Uint16Array(e);
          if (r[0] = 1, r[1] = 2, t[0] === 258)
            Tr = "BE";
          else if (t[0] === 513)
            Tr = "LE";
          else
            throw new Error("unable to figure out endianess");
        }
        return Tr;
      }
      function oo() {
        return typeof globalThis.location < "u" ? globalThis.location.hostname : "";
      }
      function lo() {
        return [];
      }
      function co() {
        return 0;
      }
      function po() {
        return Number.MAX_VALUE;
      }
      function fo() {
        return Number.MAX_VALUE;
      }
      function Do() {
        return [];
      }
      function mo() {
        return "Browser";
      }
      function go() {
        return typeof globalThis.navigator < "u" ? globalThis.navigator.appVersion : "";
      }
      function yo() {
      }
      function ho() {
      }
      function nd() {
        return "javascript";
      }
      function ud() {
        return "browser";
      }
      function $n() {
        return "/tmp";
      }
      var Tr, Vn, Wn, vo, sd = ht({ "node-modules-polyfills:os"() {
        ne(), Vn = $n, Wn = `
`, vo = { EOL: Wn, tmpdir: Vn, tmpDir: $n, networkInterfaces: yo, getNetworkInterfaces: ho, release: go, type: mo, cpus: Do, totalmem: fo, freemem: po, uptime: co, loadavg: lo, hostname: oo, endianness: ao };
      } }), id = te({ "node-modules-polyfills-commonjs:os"(e, r) {
        ne();
        var t = (sd(), ft(io));
        if (t && t.default) {
          r.exports = t.default;
          for (let s in t)
            r.exports[s] = t[s];
        } else
          t && (r.exports = t);
      } }), ad = te({ "node_modules/detect-newline/index.js"(e, r) {
        ne();
        var t = (s) => {
          if (typeof s != "string")
            throw new TypeError("Expected a string");
          let a = s.match(/(?:\r?\n)/g) || [];
          if (a.length === 0)
            return;
          let n = a.filter((i2) => i2 === `\r
`).length, u = a.length - n;
          return n > u ? `\r
` : `
`;
        };
        r.exports = t, r.exports.graceful = (s) => typeof s == "string" && t(s) || `
`;
      } }), od = te({ "node_modules/jest-docblock/build/index.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true }), e.extract = c, e.parse = F, e.parseWithComments = _, e.print = w, e.strip = f;
        function r() {
          let N = id();
          return r = function() {
            return N;
          }, N;
        }
        function t() {
          let N = s(ad());
          return t = function() {
            return N;
          }, N;
        }
        function s(N) {
          return N && N.__esModule ? N : { default: N };
        }
        var a = /\*\/$/, n = /^\/\*\*?/, u = /^\s*(\/\*\*?(.|\r?\n)*?\*\/)/, i2 = /(^|\s+)\/\/([^\r\n]*)/g, l = /^(\r?\n)+/, p2 = /(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *(?![^@\r\n]*\/\/[^]*)([^@\r\n\s][^@\r\n]+?) *\r?\n/g, y = /(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g, h2 = /(\r?\n|^) *\* ?/g, g = [];
        function c(N) {
          let x = N.match(u);
          return x ? x[0].trimLeft() : "";
        }
        function f(N) {
          let x = N.match(u);
          return x && x[0] ? N.substring(x[0].length) : N;
        }
        function F(N) {
          return _(N).pragmas;
        }
        function _(N) {
          let x = (0, t().default)(N) || r().EOL;
          N = N.replace(n, "").replace(a, "").replace(h2, "$1");
          let I = "";
          for (; I !== N; )
            I = N, N = N.replace(p2, `${x}$1 $2${x}`);
          N = N.replace(l, "").trimRight();
          let P = /* @__PURE__ */ Object.create(null), $ = N.replace(y, "").replace(l, "").trimRight(), D;
          for (; D = y.exec(N); ) {
            let T = D[2].replace(i2, "");
            typeof P[D[1]] == "string" || Array.isArray(P[D[1]]) ? P[D[1]] = g.concat(P[D[1]], T) : P[D[1]] = T;
          }
          return { comments: $, pragmas: P };
        }
        function w(N) {
          let { comments: x = "", pragmas: I = {} } = N, P = (0, t().default)(x) || r().EOL, $ = "/**", D = " *", T = " */", m = Object.keys(I), C = m.map((d) => E(d, I[d])).reduce((d, v) => d.concat(v), []).map((d) => `${D} ${d}${P}`).join("");
          if (!x) {
            if (m.length === 0)
              return "";
            if (m.length === 1 && !Array.isArray(I[m[0]])) {
              let d = I[m[0]];
              return `${$} ${E(m[0], d)[0]}${T}`;
            }
          }
          let o = x.split(P).map((d) => `${D} ${d}`).join(P) + P;
          return $ + P + (x ? o : "") + (x && m.length ? D + P : "") + C + T;
        }
        function E(N, x) {
          return g.concat(x).map((I) => `@${N} ${I}`.trim());
        }
      } }), ld = te({ "src/language-js/utils/get-shebang.js"(e, r) {
        ne();
        function t(s) {
          if (!s.startsWith("#!"))
            return "";
          let a = s.indexOf(`
`);
          return a === -1 ? s : s.slice(0, a);
        }
        r.exports = t;
      } }), Co = te({ "src/language-js/pragma.js"(e, r) {
        ne();
        var { parseWithComments: t, strip: s, extract: a, print: n } = od(), { normalizeEndOfLine: u } = Jn(), i2 = ld();
        function l(h2) {
          let g = i2(h2);
          g && (h2 = h2.slice(g.length + 1));
          let c = a(h2), { pragmas: f, comments: F } = t(c);
          return { shebang: g, text: h2, pragmas: f, comments: F };
        }
        function p2(h2) {
          let g = Object.keys(l(h2).pragmas);
          return g.includes("prettier") || g.includes("format");
        }
        function y(h2) {
          let { shebang: g, text: c, pragmas: f, comments: F } = l(h2), _ = s(c), w = n({ pragmas: Object.assign({ format: "" }, f), comments: F.trimStart() });
          return (g ? `${g}
` : "") + u(w) + (_.startsWith(`
`) ? `
` : `

`) + _;
        }
        r.exports = { hasPragma: p2, insertPragma: y };
      } }), cd = te({ "src/language-js/utils/is-type-cast-comment.js"(e, r) {
        ne();
        var t = Pt();
        function s(a) {
          return t(a) && a.value[0] === "*" && /@(?:type|satisfies)\b/.test(a.value);
        }
        r.exports = s;
      } }), Eo = te({ "src/language-js/comments.js"(e, r) {
        ne();
        var { getLast: t, hasNewline: s, getNextNonSpaceNonCommentCharacterIndexWithStartIndex: a, getNextNonSpaceNonCommentCharacter: n, hasNewlineInRange: u, addLeadingComment: i2, addTrailingComment: l, addDanglingComment: p2, getNextNonSpaceNonCommentCharacterIndex: y, isNonEmptyArray: h2 } = Ue(), { getFunctionParameters: g, isPrettierIgnoreComment: c, isJsxNode: f, hasFlowShorthandAnnotationComment: F, hasFlowAnnotationComment: _, hasIgnoreComment: w, isCallLikeExpression: E, getCallArguments: N, isCallExpression: x, isMemberExpression: I, isObjectProperty: P, isLineComment: $, getComments: D, CommentCheckFlags: T, markerForIfWithoutBlockAndSameLineComment: m } = Ke(), { locStart: C, locEnd: o } = ut(), d = Pt(), v = cd();
        function S(De) {
          return [H, Fe, Q, q, J, L, ie, he, se, ge, we, ke, ce, z, U].some((A) => A(De));
        }
        function b(De) {
          return [R, Fe, V, we, q, J, L, ie, z, Z, fe, ge, Pe, U, X].some((A) => A(De));
        }
        function B(De) {
          return [H, q, J, j, ue, ce, ge, de, K, pe, U, oe].some((A) => A(De));
        }
        function k(De, A) {
          let G = (De.body || De.properties).find((re2) => {
            let { type: ye } = re2;
            return ye !== "EmptyStatement";
          });
          G ? i2(G, A) : p2(De, A);
        }
        function M(De, A) {
          De.type === "BlockStatement" ? k(De, A) : i2(De, A);
        }
        function R(De) {
          let { comment: A, followingNode: G } = De;
          return G && v(A) ? (i2(G, A), true) : false;
        }
        function q(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2, followingNode: ye, text: Ce } = De;
          if ((re2 == null ? void 0 : re2.type) !== "IfStatement" || !ye)
            return false;
          if (n(Ce, A, o) === ")")
            return l(G, A), true;
          if (G === re2.consequent && ye === re2.alternate) {
            if (G.type === "BlockStatement")
              l(G, A);
            else {
              let ve = A.type === "SingleLine" || A.loc.start.line === A.loc.end.line, ze = A.loc.start.line === G.loc.start.line;
              ve && ze ? p2(G, A, m) : p2(re2, A);
            }
            return true;
          }
          return ye.type === "BlockStatement" ? (k(ye, A), true) : ye.type === "IfStatement" ? (M(ye.consequent, A), true) : re2.consequent === ye ? (i2(ye, A), true) : false;
        }
        function J(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2, followingNode: ye, text: Ce } = De;
          return (re2 == null ? void 0 : re2.type) !== "WhileStatement" || !ye ? false : n(Ce, A, o) === ")" ? (l(G, A), true) : ye.type === "BlockStatement" ? (k(ye, A), true) : re2.body === ye ? (i2(ye, A), true) : false;
        }
        function L(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2, followingNode: ye } = De;
          return (re2 == null ? void 0 : re2.type) !== "TryStatement" && (re2 == null ? void 0 : re2.type) !== "CatchClause" || !ye ? false : re2.type === "CatchClause" && G ? (l(G, A), true) : ye.type === "BlockStatement" ? (k(ye, A), true) : ye.type === "TryStatement" ? (M(ye.finalizer, A), true) : ye.type === "CatchClause" ? (M(ye.body, A), true) : false;
        }
        function Q(De) {
          let { comment: A, enclosingNode: G, followingNode: re2 } = De;
          return I(G) && (re2 == null ? void 0 : re2.type) === "Identifier" ? (i2(G, A), true) : false;
        }
        function V(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2, followingNode: ye, text: Ce } = De, Be = G && !u(Ce, o(G), C(A));
          return (!G || !Be) && ((re2 == null ? void 0 : re2.type) === "ConditionalExpression" || (re2 == null ? void 0 : re2.type) === "TSConditionalType") && ye ? (i2(ye, A), true) : false;
        }
        function j(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2 } = De;
          return P(re2) && re2.shorthand && re2.key === G && re2.value.type === "AssignmentPattern" ? (l(re2.value.left, A), true) : false;
        }
        var Y = /* @__PURE__ */ new Set(["ClassDeclaration", "ClassExpression", "DeclareClass", "DeclareInterface", "InterfaceDeclaration", "TSInterfaceDeclaration"]);
        function ie(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2, followingNode: ye } = De;
          if (Y.has(re2 == null ? void 0 : re2.type)) {
            if (h2(re2.decorators) && !(ye && ye.type === "Decorator"))
              return l(t(re2.decorators), A), true;
            if (re2.body && ye === re2.body)
              return k(re2.body, A), true;
            if (ye) {
              if (re2.superClass && ye === re2.superClass && G && (G === re2.id || G === re2.typeParameters))
                return l(G, A), true;
              for (let Ce of ["implements", "extends", "mixins"])
                if (re2[Ce] && ye === re2[Ce][0])
                  return G && (G === re2.id || G === re2.typeParameters || G === re2.superClass) ? l(G, A) : p2(re2, A, Ce), true;
            }
          }
          return false;
        }
        var ee = /* @__PURE__ */ new Set(["ClassMethod", "ClassProperty", "PropertyDefinition", "TSAbstractPropertyDefinition", "TSAbstractMethodDefinition", "TSDeclareMethod", "MethodDefinition", "ClassAccessorProperty", "AccessorProperty", "TSAbstractAccessorProperty"]);
        function ce(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2, text: ye } = De;
          return re2 && G && n(ye, A, o) === "(" && (re2.type === "Property" || re2.type === "TSDeclareMethod" || re2.type === "TSAbstractMethodDefinition") && G.type === "Identifier" && re2.key === G && n(ye, G, o) !== ":" || (G == null ? void 0 : G.type) === "Decorator" && ee.has(re2 == null ? void 0 : re2.type) ? (l(G, A), true) : false;
        }
        var W = /* @__PURE__ */ new Set(["FunctionDeclaration", "FunctionExpression", "ClassMethod", "MethodDefinition", "ObjectMethod"]);
        function K(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2, text: ye } = De;
          return n(ye, A, o) !== "(" ? false : G && W.has(re2 == null ? void 0 : re2.type) ? (l(G, A), true) : false;
        }
        function de(De) {
          let { comment: A, enclosingNode: G, text: re2 } = De;
          if ((G == null ? void 0 : G.type) !== "ArrowFunctionExpression")
            return false;
          let ye = y(re2, A, o);
          return ye !== false && re2.slice(ye, ye + 2) === "=>" ? (p2(G, A), true) : false;
        }
        function ue(De) {
          let { comment: A, enclosingNode: G, text: re2 } = De;
          return n(re2, A, o) !== ")" ? false : G && (le(G) && g(G).length === 0 || E(G) && N(G).length === 0) ? (p2(G, A), true) : ((G == null ? void 0 : G.type) === "MethodDefinition" || (G == null ? void 0 : G.type) === "TSAbstractMethodDefinition") && g(G.value).length === 0 ? (p2(G.value, A), true) : false;
        }
        function Fe(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2, followingNode: ye, text: Ce } = De;
          if ((G == null ? void 0 : G.type) === "FunctionTypeParam" && (re2 == null ? void 0 : re2.type) === "FunctionTypeAnnotation" && (ye == null ? void 0 : ye.type) !== "FunctionTypeParam" || ((G == null ? void 0 : G.type) === "Identifier" || (G == null ? void 0 : G.type) === "AssignmentPattern") && re2 && le(re2) && n(Ce, A, o) === ")")
            return l(G, A), true;
          if ((re2 == null ? void 0 : re2.type) === "FunctionDeclaration" && (ye == null ? void 0 : ye.type) === "BlockStatement") {
            let Be = (() => {
              let ve = g(re2);
              if (ve.length > 0)
                return a(Ce, o(t(ve)));
              let ze = a(Ce, o(re2.id));
              return ze !== false && a(Ce, ze + 1);
            })();
            if (C(A) > Be)
              return k(ye, A), true;
          }
          return false;
        }
        function z(De) {
          let { comment: A, enclosingNode: G } = De;
          return (G == null ? void 0 : G.type) === "LabeledStatement" ? (i2(G, A), true) : false;
        }
        function U(De) {
          let { comment: A, enclosingNode: G } = De;
          return ((G == null ? void 0 : G.type) === "ContinueStatement" || (G == null ? void 0 : G.type) === "BreakStatement") && !G.label ? (l(G, A), true) : false;
        }
        function Z(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2 } = De;
          return x(re2) && G && re2.callee === G && re2.arguments.length > 0 ? (i2(re2.arguments[0], A), true) : false;
        }
        function se(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2, followingNode: ye } = De;
          return (re2 == null ? void 0 : re2.type) === "UnionTypeAnnotation" || (re2 == null ? void 0 : re2.type) === "TSUnionType" ? (c(A) && (ye.prettierIgnore = true, A.unignore = true), G ? (l(G, A), true) : false) : (((ye == null ? void 0 : ye.type) === "UnionTypeAnnotation" || (ye == null ? void 0 : ye.type) === "TSUnionType") && c(A) && (ye.types[0].prettierIgnore = true, A.unignore = true), false);
        }
        function fe(De) {
          let { comment: A, enclosingNode: G } = De;
          return P(G) ? (i2(G, A), true) : false;
        }
        function ge(De) {
          let { comment: A, enclosingNode: G, followingNode: re2, ast: ye, isLastComment: Ce } = De;
          return ye && ye.body && ye.body.length === 0 ? (Ce ? p2(ye, A) : i2(ye, A), true) : (G == null ? void 0 : G.type) === "Program" && (G == null ? void 0 : G.body.length) === 0 && !h2(G.directives) ? (Ce ? p2(G, A) : i2(G, A), true) : (re2 == null ? void 0 : re2.type) === "Program" && (re2 == null ? void 0 : re2.body.length) === 0 && (G == null ? void 0 : G.type) === "ModuleExpression" ? (p2(re2, A), true) : false;
        }
        function he(De) {
          let { comment: A, enclosingNode: G } = De;
          return (G == null ? void 0 : G.type) === "ForInStatement" || (G == null ? void 0 : G.type) === "ForOfStatement" ? (i2(G, A), true) : false;
        }
        function we(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2, text: ye } = De;
          if ((re2 == null ? void 0 : re2.type) === "ImportSpecifier" || (re2 == null ? void 0 : re2.type) === "ExportSpecifier")
            return i2(re2, A), true;
          let Ce = (G == null ? void 0 : G.type) === "ImportSpecifier" && (re2 == null ? void 0 : re2.type) === "ImportDeclaration", Be = (G == null ? void 0 : G.type) === "ExportSpecifier" && (re2 == null ? void 0 : re2.type) === "ExportNamedDeclaration";
          return (Ce || Be) && s(ye, o(A)) ? (l(G, A), true) : false;
        }
        function ke(De) {
          let { comment: A, enclosingNode: G } = De;
          return (G == null ? void 0 : G.type) === "AssignmentPattern" ? (i2(G, A), true) : false;
        }
        var Re = /* @__PURE__ */ new Set(["VariableDeclarator", "AssignmentExpression", "TypeAlias", "TSTypeAliasDeclaration"]), Ne = /* @__PURE__ */ new Set(["ObjectExpression", "ArrayExpression", "TemplateLiteral", "TaggedTemplateExpression", "ObjectTypeAnnotation", "TSTypeLiteral"]);
        function Pe(De) {
          let { comment: A, enclosingNode: G, followingNode: re2 } = De;
          return Re.has(G == null ? void 0 : G.type) && re2 && (Ne.has(re2.type) || d(A)) ? (i2(re2, A), true) : false;
        }
        function oe(De) {
          let { comment: A, enclosingNode: G, followingNode: re2, text: ye } = De;
          return !re2 && ((G == null ? void 0 : G.type) === "TSMethodSignature" || (G == null ? void 0 : G.type) === "TSDeclareFunction" || (G == null ? void 0 : G.type) === "TSAbstractMethodDefinition") && n(ye, A, o) === ";" ? (l(G, A), true) : false;
        }
        function H(De) {
          let { comment: A, enclosingNode: G, followingNode: re2 } = De;
          if (c(A) && (G == null ? void 0 : G.type) === "TSMappedType" && (re2 == null ? void 0 : re2.type) === "TSTypeParameter" && re2.constraint)
            return G.prettierIgnore = true, A.unignore = true, true;
        }
        function pe(De) {
          let { comment: A, precedingNode: G, enclosingNode: re2, followingNode: ye } = De;
          return (re2 == null ? void 0 : re2.type) !== "TSMappedType" ? false : (ye == null ? void 0 : ye.type) === "TSTypeParameter" && ye.name ? (i2(ye.name, A), true) : (G == null ? void 0 : G.type) === "TSTypeParameter" && G.constraint ? (l(G.constraint, A), true) : false;
        }
        function X(De) {
          let { comment: A, enclosingNode: G, followingNode: re2 } = De;
          return !G || G.type !== "SwitchCase" || G.test || !re2 || re2 !== G.consequent[0] ? false : (re2.type === "BlockStatement" && $(A) ? k(re2, A) : p2(G, A), true);
        }
        function le(De) {
          return De.type === "ArrowFunctionExpression" || De.type === "FunctionExpression" || De.type === "FunctionDeclaration" || De.type === "ObjectMethod" || De.type === "ClassMethod" || De.type === "TSDeclareFunction" || De.type === "TSCallSignatureDeclaration" || De.type === "TSConstructSignatureDeclaration" || De.type === "TSMethodSignature" || De.type === "TSConstructorType" || De.type === "TSFunctionType" || De.type === "TSDeclareMethod";
        }
        function Ae(De, A) {
          if ((A.parser === "typescript" || A.parser === "flow" || A.parser === "acorn" || A.parser === "espree" || A.parser === "meriyah" || A.parser === "__babel_estree") && De.type === "MethodDefinition" && De.value && De.value.type === "FunctionExpression" && g(De.value).length === 0 && !De.value.returnType && !h2(De.value.typeParameters) && De.value.body)
            return [...De.decorators || [], De.key, De.value.body];
        }
        function Ee(De) {
          let A = De.getValue(), G = De.getParentNode(), re2 = (ye) => _(D(ye, T.Leading)) || _(D(ye, T.Trailing));
          return (A && (f(A) || F(A) || x(G) && re2(A)) || G && (G.type === "JSXSpreadAttribute" || G.type === "JSXSpreadChild" || G.type === "UnionTypeAnnotation" || G.type === "TSUnionType" || (G.type === "ClassDeclaration" || G.type === "ClassExpression") && G.superClass === A)) && (!w(De) || G.type === "UnionTypeAnnotation" || G.type === "TSUnionType");
        }
        r.exports = { handleOwnLineComment: S, handleEndOfLineComment: b, handleRemainingComment: B, getCommentChildNodes: Ae, willPrintOwnComments: Ee };
      } }), qt = te({ "src/language-js/needs-parens.js"(e, r) {
        ne();
        var t = lt(), s = Kn(), { getFunctionParameters: a, getLeftSidePathName: n, hasFlowShorthandAnnotationComment: u, hasNakedLeftSide: i2, hasNode: l, isBitwiseOperator: p2, startsWithNoLookaheadToken: y, shouldFlatten: h2, getPrecedence: g, isCallExpression: c, isMemberExpression: f, isObjectProperty: F, isTSTypeExpression: _ } = Ke();
        function w(D, T) {
          let m = D.getParentNode();
          if (!m)
            return false;
          let C = D.getName(), o = D.getNode();
          if (T.__isInHtmlInterpolation && !T.bracketSpacing && I(o) && P(D))
            return true;
          if (E(o))
            return false;
          if (T.parser !== "flow" && u(D.getValue()))
            return true;
          if (o.type === "Identifier") {
            if (o.extra && o.extra.parenthesized && /^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/.test(o.name) || C === "left" && (o.name === "async" && !m.await || o.name === "let") && m.type === "ForOfStatement")
              return true;
            if (o.name === "let") {
              var d;
              let S = (d = D.findAncestor((b) => b.type === "ForOfStatement")) === null || d === void 0 ? void 0 : d.left;
              if (S && y(S, (b) => b === o))
                return true;
            }
            if (C === "object" && o.name === "let" && m.type === "MemberExpression" && m.computed && !m.optional) {
              let S = D.findAncestor((B) => B.type === "ExpressionStatement" || B.type === "ForStatement" || B.type === "ForInStatement"), b = S ? S.type === "ExpressionStatement" ? S.expression : S.type === "ForStatement" ? S.init : S.left : void 0;
              if (b && y(b, (B) => B === o))
                return true;
            }
            return false;
          }
          if (o.type === "ObjectExpression" || o.type === "FunctionExpression" || o.type === "ClassExpression" || o.type === "DoExpression") {
            var v;
            let S = (v = D.findAncestor((b) => b.type === "ExpressionStatement")) === null || v === void 0 ? void 0 : v.expression;
            if (S && y(S, (b) => b === o))
              return true;
          }
          switch (m.type) {
            case "ParenthesizedExpression":
              return false;
            case "ClassDeclaration":
            case "ClassExpression": {
              if (C === "superClass" && (o.type === "ArrowFunctionExpression" || o.type === "AssignmentExpression" || o.type === "AwaitExpression" || o.type === "BinaryExpression" || o.type === "ConditionalExpression" || o.type === "LogicalExpression" || o.type === "NewExpression" || o.type === "ObjectExpression" || o.type === "SequenceExpression" || o.type === "TaggedTemplateExpression" || o.type === "UnaryExpression" || o.type === "UpdateExpression" || o.type === "YieldExpression" || o.type === "TSNonNullExpression"))
                return true;
              break;
            }
            case "ExportDefaultDeclaration":
              return $(D, T) || o.type === "SequenceExpression";
            case "Decorator": {
              if (C === "expression") {
                if (f(o) && o.computed)
                  return true;
                let S = false, b = false, B = o;
                for (; B; )
                  switch (B.type) {
                    case "MemberExpression":
                      b = true, B = B.object;
                      break;
                    case "CallExpression":
                      if (b || S)
                        return T.parser !== "typescript";
                      S = true, B = B.callee;
                      break;
                    case "Identifier":
                      return false;
                    case "TaggedTemplateExpression":
                      return T.parser !== "typescript";
                    default:
                      return true;
                  }
                return true;
              }
              break;
            }
            case "ArrowFunctionExpression": {
              if (C === "body" && o.type !== "SequenceExpression" && y(o, (S) => S.type === "ObjectExpression"))
                return true;
              break;
            }
          }
          switch (o.type) {
            case "UpdateExpression":
              if (m.type === "UnaryExpression")
                return o.prefix && (o.operator === "++" && m.operator === "+" || o.operator === "--" && m.operator === "-");
            case "UnaryExpression":
              switch (m.type) {
                case "UnaryExpression":
                  return o.operator === m.operator && (o.operator === "+" || o.operator === "-");
                case "BindExpression":
                  return true;
                case "MemberExpression":
                case "OptionalMemberExpression":
                  return C === "object";
                case "TaggedTemplateExpression":
                  return true;
                case "NewExpression":
                case "CallExpression":
                case "OptionalCallExpression":
                  return C === "callee";
                case "BinaryExpression":
                  return C === "left" && m.operator === "**";
                case "TSNonNullExpression":
                  return true;
                default:
                  return false;
              }
            case "BinaryExpression": {
              if (m.type === "UpdateExpression" || o.operator === "in" && N(D))
                return true;
              if (o.operator === "|>" && o.extra && o.extra.parenthesized) {
                let S = D.getParentNode(1);
                if (S.type === "BinaryExpression" && S.operator === "|>")
                  return true;
              }
            }
            case "TSTypeAssertion":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "LogicalExpression":
              switch (m.type) {
                case "TSSatisfiesExpression":
                case "TSAsExpression":
                  return !_(o);
                case "ConditionalExpression":
                  return _(o);
                case "CallExpression":
                case "NewExpression":
                case "OptionalCallExpression":
                  return C === "callee";
                case "ClassExpression":
                case "ClassDeclaration":
                  return C === "superClass";
                case "TSTypeAssertion":
                case "TaggedTemplateExpression":
                case "UnaryExpression":
                case "JSXSpreadAttribute":
                case "SpreadElement":
                case "SpreadProperty":
                case "BindExpression":
                case "AwaitExpression":
                case "TSNonNullExpression":
                case "UpdateExpression":
                  return true;
                case "MemberExpression":
                case "OptionalMemberExpression":
                  return C === "object";
                case "AssignmentExpression":
                case "AssignmentPattern":
                  return C === "left" && (o.type === "TSTypeAssertion" || _(o));
                case "LogicalExpression":
                  if (o.type === "LogicalExpression")
                    return m.operator !== o.operator;
                case "BinaryExpression": {
                  let { operator: S, type: b } = o;
                  if (!S && b !== "TSTypeAssertion")
                    return true;
                  let B = g(S), k = m.operator, M = g(k);
                  return M > B || C === "right" && M === B || M === B && !h2(k, S) ? true : M < B && S === "%" ? k === "+" || k === "-" : !!p2(k);
                }
                default:
                  return false;
              }
            case "SequenceExpression":
              switch (m.type) {
                case "ReturnStatement":
                  return false;
                case "ForStatement":
                  return false;
                case "ExpressionStatement":
                  return C !== "expression";
                case "ArrowFunctionExpression":
                  return C !== "body";
                default:
                  return true;
              }
            case "YieldExpression":
              if (m.type === "UnaryExpression" || m.type === "AwaitExpression" || _(m) || m.type === "TSNonNullExpression")
                return true;
            case "AwaitExpression":
              switch (m.type) {
                case "TaggedTemplateExpression":
                case "UnaryExpression":
                case "LogicalExpression":
                case "SpreadElement":
                case "SpreadProperty":
                case "TSAsExpression":
                case "TSSatisfiesExpression":
                case "TSNonNullExpression":
                case "BindExpression":
                  return true;
                case "MemberExpression":
                case "OptionalMemberExpression":
                  return C === "object";
                case "NewExpression":
                case "CallExpression":
                case "OptionalCallExpression":
                  return C === "callee";
                case "ConditionalExpression":
                  return C === "test";
                case "BinaryExpression":
                  return !(!o.argument && m.operator === "|>");
                default:
                  return false;
              }
            case "TSConditionalType":
            case "TSFunctionType":
            case "TSConstructorType":
              if (C === "extendsType" && m.type === "TSConditionalType") {
                if (o.type === "TSConditionalType")
                  return true;
                let { typeAnnotation: S } = o.returnType || o.typeAnnotation;
                if (S.type === "TSTypePredicate" && S.typeAnnotation && (S = S.typeAnnotation.typeAnnotation), S.type === "TSInferType" && S.typeParameter.constraint)
                  return true;
              }
              if (C === "checkType" && m.type === "TSConditionalType")
                return true;
            case "TSUnionType":
            case "TSIntersectionType":
              if ((m.type === "TSUnionType" || m.type === "TSIntersectionType") && m.types.length > 1 && (!o.types || o.types.length > 1))
                return true;
            case "TSInferType":
              if (o.type === "TSInferType" && m.type === "TSRestType")
                return false;
            case "TSTypeOperator":
              return m.type === "TSArrayType" || m.type === "TSOptionalType" || m.type === "TSRestType" || C === "objectType" && m.type === "TSIndexedAccessType" || m.type === "TSTypeOperator" || m.type === "TSTypeAnnotation" && D.getParentNode(1).type.startsWith("TSJSDoc");
            case "TSTypeQuery":
              return C === "objectType" && m.type === "TSIndexedAccessType" || C === "elementType" && m.type === "TSArrayType";
            case "TypeofTypeAnnotation":
              return C === "objectType" && (m.type === "IndexedAccessType" || m.type === "OptionalIndexedAccessType") || C === "elementType" && m.type === "ArrayTypeAnnotation";
            case "ArrayTypeAnnotation":
              return m.type === "NullableTypeAnnotation";
            case "IntersectionTypeAnnotation":
            case "UnionTypeAnnotation":
              return m.type === "ArrayTypeAnnotation" || m.type === "NullableTypeAnnotation" || m.type === "IntersectionTypeAnnotation" || m.type === "UnionTypeAnnotation" || C === "objectType" && (m.type === "IndexedAccessType" || m.type === "OptionalIndexedAccessType");
            case "NullableTypeAnnotation":
              return m.type === "ArrayTypeAnnotation" || C === "objectType" && (m.type === "IndexedAccessType" || m.type === "OptionalIndexedAccessType");
            case "FunctionTypeAnnotation": {
              let S = m.type === "NullableTypeAnnotation" ? D.getParentNode(1) : m;
              return S.type === "UnionTypeAnnotation" || S.type === "IntersectionTypeAnnotation" || S.type === "ArrayTypeAnnotation" || C === "objectType" && (S.type === "IndexedAccessType" || S.type === "OptionalIndexedAccessType") || S.type === "NullableTypeAnnotation" || m.type === "FunctionTypeParam" && m.name === null && a(o).some((b) => b.typeAnnotation && b.typeAnnotation.type === "NullableTypeAnnotation");
            }
            case "OptionalIndexedAccessType":
              return C === "objectType" && m.type === "IndexedAccessType";
            case "StringLiteral":
            case "NumericLiteral":
            case "Literal":
              if (typeof o.value == "string" && m.type === "ExpressionStatement" && !m.directive) {
                let S = D.getParentNode(1);
                return S.type === "Program" || S.type === "BlockStatement";
              }
              return C === "object" && m.type === "MemberExpression" && typeof o.value == "number";
            case "AssignmentExpression": {
              let S = D.getParentNode(1);
              return C === "body" && m.type === "ArrowFunctionExpression" ? true : C === "key" && (m.type === "ClassProperty" || m.type === "PropertyDefinition") && m.computed || (C === "init" || C === "update") && m.type === "ForStatement" ? false : m.type === "ExpressionStatement" ? o.left.type === "ObjectPattern" : !(C === "key" && m.type === "TSPropertySignature" || m.type === "AssignmentExpression" || m.type === "SequenceExpression" && S && S.type === "ForStatement" && (S.init === m || S.update === m) || C === "value" && m.type === "Property" && S && S.type === "ObjectPattern" && S.properties.includes(m) || m.type === "NGChainedExpression");
            }
            case "ConditionalExpression":
              switch (m.type) {
                case "TaggedTemplateExpression":
                case "UnaryExpression":
                case "SpreadElement":
                case "SpreadProperty":
                case "BinaryExpression":
                case "LogicalExpression":
                case "NGPipeExpression":
                case "ExportDefaultDeclaration":
                case "AwaitExpression":
                case "JSXSpreadAttribute":
                case "TSTypeAssertion":
                case "TypeCastExpression":
                case "TSAsExpression":
                case "TSSatisfiesExpression":
                case "TSNonNullExpression":
                  return true;
                case "NewExpression":
                case "CallExpression":
                case "OptionalCallExpression":
                  return C === "callee";
                case "ConditionalExpression":
                  return C === "test";
                case "MemberExpression":
                case "OptionalMemberExpression":
                  return C === "object";
                default:
                  return false;
              }
            case "FunctionExpression":
              switch (m.type) {
                case "NewExpression":
                case "CallExpression":
                case "OptionalCallExpression":
                  return C === "callee";
                case "TaggedTemplateExpression":
                  return true;
                default:
                  return false;
              }
            case "ArrowFunctionExpression":
              switch (m.type) {
                case "BinaryExpression":
                  return m.operator !== "|>" || o.extra && o.extra.parenthesized;
                case "NewExpression":
                case "CallExpression":
                case "OptionalCallExpression":
                  return C === "callee";
                case "MemberExpression":
                case "OptionalMemberExpression":
                  return C === "object";
                case "TSAsExpression":
                case "TSSatisfiesExpression":
                case "TSNonNullExpression":
                case "BindExpression":
                case "TaggedTemplateExpression":
                case "UnaryExpression":
                case "LogicalExpression":
                case "AwaitExpression":
                case "TSTypeAssertion":
                  return true;
                case "ConditionalExpression":
                  return C === "test";
                default:
                  return false;
              }
            case "ClassExpression":
              if (s(o.decorators))
                return true;
              switch (m.type) {
                case "NewExpression":
                  return C === "callee";
                default:
                  return false;
              }
            case "OptionalMemberExpression":
            case "OptionalCallExpression": {
              let S = D.getParentNode(1);
              if (C === "object" && m.type === "MemberExpression" || C === "callee" && (m.type === "CallExpression" || m.type === "NewExpression") || m.type === "TSNonNullExpression" && S.type === "MemberExpression" && S.object === m)
                return true;
            }
            case "CallExpression":
            case "MemberExpression":
            case "TaggedTemplateExpression":
            case "TSNonNullExpression":
              if (C === "callee" && (m.type === "BindExpression" || m.type === "NewExpression")) {
                let S = o;
                for (; S; )
                  switch (S.type) {
                    case "CallExpression":
                    case "OptionalCallExpression":
                      return true;
                    case "MemberExpression":
                    case "OptionalMemberExpression":
                    case "BindExpression":
                      S = S.object;
                      break;
                    case "TaggedTemplateExpression":
                      S = S.tag;
                      break;
                    case "TSNonNullExpression":
                      S = S.expression;
                      break;
                    default:
                      return false;
                  }
              }
              return false;
            case "BindExpression":
              return C === "callee" && (m.type === "BindExpression" || m.type === "NewExpression") || C === "object" && f(m);
            case "NGPipeExpression":
              return !(m.type === "NGRoot" || m.type === "NGMicrosyntaxExpression" || m.type === "ObjectProperty" && !(o.extra && o.extra.parenthesized) || m.type === "ArrayExpression" || c(m) && m.arguments[C] === o || C === "right" && m.type === "NGPipeExpression" || C === "property" && m.type === "MemberExpression" || m.type === "AssignmentExpression");
            case "JSXFragment":
            case "JSXElement":
              return C === "callee" || C === "left" && m.type === "BinaryExpression" && m.operator === "<" || m.type !== "ArrayExpression" && m.type !== "ArrowFunctionExpression" && m.type !== "AssignmentExpression" && m.type !== "AssignmentPattern" && m.type !== "BinaryExpression" && m.type !== "NewExpression" && m.type !== "ConditionalExpression" && m.type !== "ExpressionStatement" && m.type !== "JsExpressionRoot" && m.type !== "JSXAttribute" && m.type !== "JSXElement" && m.type !== "JSXExpressionContainer" && m.type !== "JSXFragment" && m.type !== "LogicalExpression" && !c(m) && !F(m) && m.type !== "ReturnStatement" && m.type !== "ThrowStatement" && m.type !== "TypeCastExpression" && m.type !== "VariableDeclarator" && m.type !== "YieldExpression";
            case "TypeAnnotation":
              return C === "returnType" && m.type === "ArrowFunctionExpression" && x(o);
          }
          return false;
        }
        function E(D) {
          return D.type === "BlockStatement" || D.type === "BreakStatement" || D.type === "ClassBody" || D.type === "ClassDeclaration" || D.type === "ClassMethod" || D.type === "ClassProperty" || D.type === "PropertyDefinition" || D.type === "ClassPrivateProperty" || D.type === "ContinueStatement" || D.type === "DebuggerStatement" || D.type === "DeclareClass" || D.type === "DeclareExportAllDeclaration" || D.type === "DeclareExportDeclaration" || D.type === "DeclareFunction" || D.type === "DeclareInterface" || D.type === "DeclareModule" || D.type === "DeclareModuleExports" || D.type === "DeclareVariable" || D.type === "DoWhileStatement" || D.type === "EnumDeclaration" || D.type === "ExportAllDeclaration" || D.type === "ExportDefaultDeclaration" || D.type === "ExportNamedDeclaration" || D.type === "ExpressionStatement" || D.type === "ForInStatement" || D.type === "ForOfStatement" || D.type === "ForStatement" || D.type === "FunctionDeclaration" || D.type === "IfStatement" || D.type === "ImportDeclaration" || D.type === "InterfaceDeclaration" || D.type === "LabeledStatement" || D.type === "MethodDefinition" || D.type === "ReturnStatement" || D.type === "SwitchStatement" || D.type === "ThrowStatement" || D.type === "TryStatement" || D.type === "TSDeclareFunction" || D.type === "TSEnumDeclaration" || D.type === "TSImportEqualsDeclaration" || D.type === "TSInterfaceDeclaration" || D.type === "TSModuleDeclaration" || D.type === "TSNamespaceExportDeclaration" || D.type === "TypeAlias" || D.type === "VariableDeclaration" || D.type === "WhileStatement" || D.type === "WithStatement";
        }
        function N(D) {
          let T = 0, m = D.getValue();
          for (; m; ) {
            let C = D.getParentNode(T++);
            if (C && C.type === "ForStatement" && C.init === m)
              return true;
            m = C;
          }
          return false;
        }
        function x(D) {
          return l(D, (T) => T.type === "ObjectTypeAnnotation" && l(T, (m) => m.type === "FunctionTypeAnnotation" || void 0) || void 0);
        }
        function I(D) {
          switch (D.type) {
            case "ObjectExpression":
              return true;
            default:
              return false;
          }
        }
        function P(D) {
          let T = D.getValue(), m = D.getParentNode(), C = D.getName();
          switch (m.type) {
            case "NGPipeExpression":
              if (typeof C == "number" && m.arguments[C] === T && m.arguments.length - 1 === C)
                return D.callParent(P);
              break;
            case "ObjectProperty":
              if (C === "value") {
                let o = D.getParentNode(1);
                return t(o.properties) === m;
              }
              break;
            case "BinaryExpression":
            case "LogicalExpression":
              if (C === "right")
                return D.callParent(P);
              break;
            case "ConditionalExpression":
              if (C === "alternate")
                return D.callParent(P);
              break;
            case "UnaryExpression":
              if (m.prefix)
                return D.callParent(P);
              break;
          }
          return false;
        }
        function $(D, T) {
          let m = D.getValue(), C = D.getParentNode();
          return m.type === "FunctionExpression" || m.type === "ClassExpression" ? C.type === "ExportDefaultDeclaration" || !w(D, T) : !i2(m) || C.type !== "ExportDefaultDeclaration" && w(D, T) ? false : D.call((o) => $(o, T), ...n(D, m));
        }
        r.exports = w;
      } }), Fo = te({ "src/language-js/print-preprocess.js"(e, r) {
        ne();
        function t(s, a) {
          switch (a.parser) {
            case "json":
            case "json5":
            case "json-stringify":
            case "__js_expression":
            case "__vue_expression":
            case "__vue_ts_expression":
              return Object.assign(Object.assign({}, s), {}, { type: a.parser.startsWith("__") ? "JsExpressionRoot" : "JsonRoot", node: s, comments: [], rootMarker: a.rootMarker });
            default:
              return s;
          }
        }
        r.exports = t;
      } }), pd = te({ "src/language-js/print/html-binding.js"(e, r) {
        ne();
        var { builders: { join: t, line: s, group: a, softline: n, indent: u } } = qe();
        function i2(p2, y, h2) {
          let g = p2.getValue();
          if (y.__onHtmlBindingRoot && p2.getName() === null && y.__onHtmlBindingRoot(g, y), g.type === "File") {
            if (y.__isVueForBindingLeft)
              return p2.call((c) => {
                let f = t([",", s], c.map(h2, "params")), { params: F } = c.getValue();
                return F.length === 1 ? f : ["(", u([n, a(f)]), n, ")"];
              }, "program", "body", 0);
            if (y.__isVueBindings)
              return p2.call((c) => t([",", s], c.map(h2, "params")), "program", "body", 0);
          }
        }
        function l(p2) {
          switch (p2.type) {
            case "MemberExpression":
              switch (p2.property.type) {
                case "Identifier":
                case "NumericLiteral":
                case "StringLiteral":
                  return l(p2.object);
              }
              return false;
            case "Identifier":
              return true;
            default:
              return false;
          }
        }
        r.exports = { isVueEventBindingExpression: l, printHtmlBinding: i2 };
      } }), ru = te({ "src/language-js/print/binaryish.js"(e, r) {
        ne();
        var { printComments: t } = et(), { getLast: s } = Ue(), { builders: { join: a, line: n, softline: u, group: i2, indent: l, align: p2, indentIfBreak: y }, utils: { cleanDoc: h2, getDocParts: g, isConcat: c } } = qe(), { hasLeadingOwnLineComment: f, isBinaryish: F, isJsxNode: _, shouldFlatten: w, hasComment: E, CommentCheckFlags: N, isCallExpression: x, isMemberExpression: I, isObjectProperty: P, isEnabledHackPipeline: $ } = Ke(), D = 0;
        function T(o, d, v) {
          let S = o.getValue(), b = o.getParentNode(), B = o.getParentNode(1), k = S !== b.body && (b.type === "IfStatement" || b.type === "WhileStatement" || b.type === "SwitchStatement" || b.type === "DoWhileStatement"), M = $(d) && S.operator === "|>", R = m(o, v, d, false, k);
          if (k)
            return R;
          if (M)
            return i2(R);
          if (x(b) && b.callee === S || b.type === "UnaryExpression" || I(b) && !b.computed)
            return i2([l([u, ...R]), u]);
          let q = b.type === "ReturnStatement" || b.type === "ThrowStatement" || b.type === "JSXExpressionContainer" && B.type === "JSXAttribute" || S.operator !== "|" && b.type === "JsExpressionRoot" || S.type !== "NGPipeExpression" && (b.type === "NGRoot" && d.parser === "__ng_binding" || b.type === "NGMicrosyntaxExpression" && B.type === "NGMicrosyntax" && B.body.length === 1) || S === b.body && b.type === "ArrowFunctionExpression" || S !== b.body && b.type === "ForStatement" || b.type === "ConditionalExpression" && B.type !== "ReturnStatement" && B.type !== "ThrowStatement" && !x(B) || b.type === "TemplateLiteral", J = b.type === "AssignmentExpression" || b.type === "VariableDeclarator" || b.type === "ClassProperty" || b.type === "PropertyDefinition" || b.type === "TSAbstractPropertyDefinition" || b.type === "ClassPrivateProperty" || P(b), L = F(S.left) && w(S.operator, S.left.operator);
          if (q || C(S) && !L || !C(S) && J)
            return i2(R);
          if (R.length === 0)
            return "";
          let Q = _(S.right), V = R.findIndex((W) => typeof W != "string" && !Array.isArray(W) && W.type === "group"), j = R.slice(0, V === -1 ? 1 : V + 1), Y = R.slice(j.length, Q ? -1 : void 0), ie = Symbol("logicalChain-" + ++D), ee = i2([...j, l(Y)], { id: ie });
          if (!Q)
            return ee;
          let ce = s(R);
          return i2([ee, y(ce, { groupId: ie })]);
        }
        function m(o, d, v, S, b) {
          let B = o.getValue();
          if (!F(B))
            return [i2(d())];
          let k = [];
          w(B.operator, B.left.operator) ? k = o.call((Y) => m(Y, d, v, true, b), "left") : k.push(i2(d("left")));
          let M = C(B), R = (B.operator === "|>" || B.type === "NGPipeExpression" || B.operator === "|" && v.parser === "__vue_expression") && !f(v.originalText, B.right), q = B.type === "NGPipeExpression" ? "|" : B.operator, J = B.type === "NGPipeExpression" && B.arguments.length > 0 ? i2(l([n, ": ", a([n, ": "], o.map(d, "arguments").map((Y) => p2(2, i2(Y))))])) : "", L;
          if (M)
            L = [q, " ", d("right"), J];
          else {
            let ie = $(v) && q === "|>" ? o.call((ee) => m(ee, d, v, true, b), "right") : d("right");
            L = [R ? n : "", q, R ? " " : n, ie, J];
          }
          let Q = o.getParentNode(), V = E(B.left, N.Trailing | N.Line), j = V || !(b && B.type === "LogicalExpression") && Q.type !== B.type && B.left.type !== B.type && B.right.type !== B.type;
          if (k.push(R ? "" : " ", j ? i2(L, { shouldBreak: V }) : L), S && E(B)) {
            let Y = h2(t(o, k, v));
            return c(Y) || Y.type === "fill" ? g(Y) : [Y];
          }
          return k;
        }
        function C(o) {
          return o.type !== "LogicalExpression" ? false : !!(o.right.type === "ObjectExpression" && o.right.properties.length > 0 || o.right.type === "ArrayExpression" && o.right.elements.length > 0 || _(o.right));
        }
        r.exports = { printBinaryishExpression: T, shouldInlineLogicalExpression: C };
      } }), fd = te({ "src/language-js/print/angular.js"(e, r) {
        ne();
        var { builders: { join: t, line: s, group: a } } = qe(), { hasNode: n, hasComment: u, getComments: i2 } = Ke(), { printBinaryishExpression: l } = ru();
        function p2(g, c, f) {
          let F = g.getValue();
          if (F.type.startsWith("NG"))
            switch (F.type) {
              case "NGRoot":
                return [f("node"), u(F.node) ? " //" + i2(F.node)[0].value.trimEnd() : ""];
              case "NGPipeExpression":
                return l(g, c, f);
              case "NGChainedExpression":
                return a(t([";", s], g.map((_) => h2(_) ? f() : ["(", f(), ")"], "expressions")));
              case "NGEmptyExpression":
                return "";
              case "NGQuotedExpression":
                return [F.prefix, ": ", F.value.trim()];
              case "NGMicrosyntax":
                return g.map((_, w) => [w === 0 ? "" : y(_.getValue(), w, F) ? " " : [";", s], f()], "body");
              case "NGMicrosyntaxKey":
                return /^[$_a-z][\w$]*(?:-[$_a-z][\w$])*$/i.test(F.name) ? F.name : JSON.stringify(F.name);
              case "NGMicrosyntaxExpression":
                return [f("expression"), F.alias === null ? "" : [" as ", f("alias")]];
              case "NGMicrosyntaxKeyedExpression": {
                let _ = g.getName(), w = g.getParentNode(), E = y(F, _, w) || (_ === 1 && (F.key.name === "then" || F.key.name === "else") || _ === 2 && F.key.name === "else" && w.body[_ - 1].type === "NGMicrosyntaxKeyedExpression" && w.body[_ - 1].key.name === "then") && w.body[0].type === "NGMicrosyntaxExpression";
                return [f("key"), E ? " " : ": ", f("expression")];
              }
              case "NGMicrosyntaxLet":
                return ["let ", f("key"), F.value === null ? "" : [" = ", f("value")]];
              case "NGMicrosyntaxAs":
                return [f("key"), " as ", f("alias")];
              default:
                throw new Error(`Unknown Angular node type: ${JSON.stringify(F.type)}.`);
            }
        }
        function y(g, c, f) {
          return g.type === "NGMicrosyntaxKeyedExpression" && g.key.name === "of" && c === 1 && f.body[0].type === "NGMicrosyntaxLet" && f.body[0].value === null;
        }
        function h2(g) {
          return n(g.getValue(), (c) => {
            switch (c.type) {
              case void 0:
                return false;
              case "CallExpression":
              case "OptionalCallExpression":
              case "AssignmentExpression":
                return true;
            }
          });
        }
        r.exports = { printAngular: p2 };
      } }), Dd = te({ "src/language-js/print/jsx.js"(e, r) {
        ne();
        var { printComments: t, printDanglingComments: s, printCommentsSeparately: a } = et(), { builders: { line: n, hardline: u, softline: i2, group: l, indent: p2, conditionalGroup: y, fill: h2, ifBreak: g, lineSuffixBoundary: c, join: f }, utils: { willBreak: F } } = qe(), { getLast: _, getPreferredQuote: w } = Ue(), { isJsxNode: E, rawText: N, isCallExpression: x, isStringLiteral: I, isBinaryish: P, hasComment: $, CommentCheckFlags: D, hasNodeIgnoreComment: T } = Ke(), m = qt(), { willPrintOwnComments: C } = Eo(), o = (U) => U === "" || U === n || U === u || U === i2;
        function d(U, Z, se) {
          let fe = U.getValue();
          if (fe.type === "JSXElement" && de(fe))
            return [se("openingElement"), se("closingElement")];
          let ge = fe.type === "JSXElement" ? se("openingElement") : se("openingFragment"), he = fe.type === "JSXElement" ? se("closingElement") : se("closingFragment");
          if (fe.children.length === 1 && fe.children[0].type === "JSXExpressionContainer" && (fe.children[0].expression.type === "TemplateLiteral" || fe.children[0].expression.type === "TaggedTemplateExpression"))
            return [ge, ...U.map(se, "children"), he];
          fe.children = fe.children.map((A) => Fe(A) ? { type: "JSXText", value: " ", raw: " " } : A);
          let we = fe.children.some(E), ke = fe.children.filter((A) => A.type === "JSXExpressionContainer").length > 1, Re = fe.type === "JSXElement" && fe.openingElement.attributes.length > 1, Ne = F(ge) || we || Re || ke, Pe = U.getParentNode().rootMarker === "mdx", oe = Z.singleQuote ? "{' '}" : '{" "}', H = Pe ? " " : g([oe, i2], " "), pe = fe.openingElement && fe.openingElement.name && fe.openingElement.name.name === "fbt", X = v(U, Z, se, H, pe), le = fe.children.some((A) => ue(A));
          for (let A = X.length - 2; A >= 0; A--) {
            let G = X[A] === "" && X[A + 1] === "", re2 = X[A] === u && X[A + 1] === "" && X[A + 2] === u, ye = (X[A] === i2 || X[A] === u) && X[A + 1] === "" && X[A + 2] === H, Ce = X[A] === H && X[A + 1] === "" && (X[A + 2] === i2 || X[A + 2] === u), Be = X[A] === H && X[A + 1] === "" && X[A + 2] === H, ve = X[A] === i2 && X[A + 1] === "" && X[A + 2] === u || X[A] === u && X[A + 1] === "" && X[A + 2] === i2;
            re2 && le || G || ye || Be || ve ? X.splice(A, 2) : Ce && X.splice(A + 1, 2);
          }
          for (; X.length > 0 && o(_(X)); )
            X.pop();
          for (; X.length > 1 && o(X[0]) && o(X[1]); )
            X.shift(), X.shift();
          let Ae = [];
          for (let [A, G] of X.entries()) {
            if (G === H) {
              if (A === 1 && X[A - 1] === "") {
                if (X.length === 2) {
                  Ae.push(oe);
                  continue;
                }
                Ae.push([oe, u]);
                continue;
              } else if (A === X.length - 1) {
                Ae.push(oe);
                continue;
              } else if (X[A - 1] === "" && X[A - 2] === u) {
                Ae.push(oe);
                continue;
              }
            }
            Ae.push(G), F(G) && (Ne = true);
          }
          let Ee = le ? h2(Ae) : l(Ae, { shouldBreak: true });
          if (Pe)
            return Ee;
          let De = l([ge, p2([u, Ee]), u, he]);
          return Ne ? De : y([l([ge, ...X, he]), De]);
        }
        function v(U, Z, se, fe, ge) {
          let he = [];
          return U.each((we, ke, Re) => {
            let Ne = we.getValue();
            if (Ne.type === "JSXText") {
              let Pe = N(Ne);
              if (ue(Ne)) {
                let oe = Pe.split(ce);
                if (oe[0] === "") {
                  if (he.push(""), oe.shift(), /\n/.test(oe[0])) {
                    let pe = Re[ke + 1];
                    he.push(b(ge, oe[1], Ne, pe));
                  } else
                    he.push(fe);
                  oe.shift();
                }
                let H;
                if (_(oe) === "" && (oe.pop(), H = oe.pop()), oe.length === 0)
                  return;
                for (let [pe, X] of oe.entries())
                  pe % 2 === 1 ? he.push(n) : he.push(X);
                if (H !== void 0)
                  if (/\n/.test(H)) {
                    let pe = Re[ke + 1];
                    he.push(b(ge, _(he), Ne, pe));
                  } else
                    he.push(fe);
                else {
                  let pe = Re[ke + 1];
                  he.push(S(ge, _(he), Ne, pe));
                }
              } else
                /\n/.test(Pe) ? Pe.match(/\n/g).length > 1 && he.push("", u) : he.push("", fe);
            } else {
              let Pe = se();
              he.push(Pe);
              let oe = Re[ke + 1];
              if (oe && ue(oe)) {
                let pe = K(N(oe)).split(ce)[0];
                he.push(S(ge, pe, Ne, oe));
              } else
                he.push(u);
            }
          }, "children"), he;
        }
        function S(U, Z, se, fe) {
          return U ? "" : se.type === "JSXElement" && !se.closingElement || fe && fe.type === "JSXElement" && !fe.closingElement ? Z.length === 1 ? i2 : u : i2;
        }
        function b(U, Z, se, fe) {
          return U ? u : Z.length === 1 ? se.type === "JSXElement" && !se.closingElement || fe && fe.type === "JSXElement" && !fe.closingElement ? u : i2 : u;
        }
        function B(U, Z, se) {
          let fe = U.getParentNode();
          if (!fe || { ArrayExpression: true, JSXAttribute: true, JSXElement: true, JSXExpressionContainer: true, JSXFragment: true, ExpressionStatement: true, CallExpression: true, OptionalCallExpression: true, ConditionalExpression: true, JsExpressionRoot: true }[fe.type])
            return Z;
          let he = U.match(void 0, (ke) => ke.type === "ArrowFunctionExpression", x, (ke) => ke.type === "JSXExpressionContainer"), we = m(U, se);
          return l([we ? "" : g("("), p2([i2, Z]), i2, we ? "" : g(")")], { shouldBreak: he });
        }
        function k(U, Z, se) {
          let fe = U.getValue(), ge = [];
          if (ge.push(se("name")), fe.value) {
            let he;
            if (I(fe.value)) {
              let ke = N(fe.value).slice(1, -1).replace(/&apos;/g, "'").replace(/&quot;/g, '"'), { escaped: Re, quote: Ne, regex: Pe } = w(ke, Z.jsxSingleQuote ? "'" : '"');
              ke = ke.replace(Pe, Re);
              let { leading: oe, trailing: H } = U.call(() => a(U, Z), "value");
              he = [oe, Ne, ke, Ne, H];
            } else
              he = se("value");
            ge.push("=", he);
          }
          return ge;
        }
        function M(U, Z, se) {
          let fe = U.getValue(), ge = (he, we) => he.type === "JSXEmptyExpression" || !$(he) && (he.type === "ArrayExpression" || he.type === "ObjectExpression" || he.type === "ArrowFunctionExpression" || he.type === "AwaitExpression" && (ge(he.argument, he) || he.argument.type === "JSXElement") || x(he) || he.type === "FunctionExpression" || he.type === "TemplateLiteral" || he.type === "TaggedTemplateExpression" || he.type === "DoExpression" || E(we) && (he.type === "ConditionalExpression" || P(he)));
          return ge(fe.expression, U.getParentNode(0)) ? l(["{", se("expression"), c, "}"]) : l(["{", p2([i2, se("expression")]), i2, c, "}"]);
        }
        function R(U, Z, se) {
          let fe = U.getValue(), ge = fe.name && $(fe.name) || fe.typeParameters && $(fe.typeParameters);
          if (fe.selfClosing && fe.attributes.length === 0 && !ge)
            return ["<", se("name"), se("typeParameters"), " />"];
          if (fe.attributes && fe.attributes.length === 1 && fe.attributes[0].value && I(fe.attributes[0].value) && !fe.attributes[0].value.value.includes(`
`) && !ge && !$(fe.attributes[0]))
            return l(["<", se("name"), se("typeParameters"), " ", ...U.map(se, "attributes"), fe.selfClosing ? " />" : ">"]);
          let he = fe.attributes && fe.attributes.some((ke) => ke.value && I(ke.value) && ke.value.value.includes(`
`)), we = Z.singleAttributePerLine && fe.attributes.length > 1 ? u : n;
          return l(["<", se("name"), se("typeParameters"), p2(U.map(() => [we, se()], "attributes")), ...q(fe, Z, ge)], { shouldBreak: he });
        }
        function q(U, Z, se) {
          return U.selfClosing ? [n, "/>"] : J(U, Z, se) ? [">"] : [i2, ">"];
        }
        function J(U, Z, se) {
          let fe = U.attributes.length > 0 && $(_(U.attributes), D.Trailing);
          return U.attributes.length === 0 && !se || (Z.bracketSameLine || Z.jsxBracketSameLine) && (!se || U.attributes.length > 0) && !fe;
        }
        function L(U, Z, se) {
          let fe = U.getValue(), ge = [];
          ge.push("</");
          let he = se("name");
          return $(fe.name, D.Leading | D.Line) ? ge.push(p2([u, he]), u) : $(fe.name, D.Leading | D.Block) ? ge.push(" ", he) : ge.push(he), ge.push(">"), ge;
        }
        function Q(U, Z) {
          let se = U.getValue(), fe = $(se), ge = $(se, D.Line), he = se.type === "JSXOpeningFragment";
          return [he ? "<" : "</", p2([ge ? u : fe && !he ? " " : "", s(U, Z, true)]), ge ? u : "", ">"];
        }
        function V(U, Z, se) {
          let fe = t(U, d(U, Z, se), Z);
          return B(U, fe, Z);
        }
        function j(U, Z) {
          let se = U.getValue(), fe = $(se, D.Line);
          return [s(U, Z, !fe), fe ? u : ""];
        }
        function Y(U, Z, se) {
          let fe = U.getValue();
          return ["{", U.call((ge) => {
            let he = ["...", se()], we = ge.getValue();
            return !$(we) || !C(ge) ? he : [p2([i2, t(ge, he, Z)]), i2];
          }, fe.type === "JSXSpreadAttribute" ? "argument" : "expression"), "}"];
        }
        function ie(U, Z, se) {
          let fe = U.getValue();
          if (fe.type.startsWith("JSX"))
            switch (fe.type) {
              case "JSXAttribute":
                return k(U, Z, se);
              case "JSXIdentifier":
                return String(fe.name);
              case "JSXNamespacedName":
                return f(":", [se("namespace"), se("name")]);
              case "JSXMemberExpression":
                return f(".", [se("object"), se("property")]);
              case "JSXSpreadAttribute":
                return Y(U, Z, se);
              case "JSXSpreadChild":
                return Y(U, Z, se);
              case "JSXExpressionContainer":
                return M(U, Z, se);
              case "JSXFragment":
              case "JSXElement":
                return V(U, Z, se);
              case "JSXOpeningElement":
                return R(U, Z, se);
              case "JSXClosingElement":
                return L(U, Z, se);
              case "JSXOpeningFragment":
              case "JSXClosingFragment":
                return Q(U, Z);
              case "JSXEmptyExpression":
                return j(U, Z);
              case "JSXText":
                throw new Error("JSXText should be handled by JSXElement");
              default:
                throw new Error(`Unknown JSX node type: ${JSON.stringify(fe.type)}.`);
            }
        }
        var ee = ` 
\r	`, ce = new RegExp("([" + ee + "]+)"), W = new RegExp("[^" + ee + "]"), K = (U) => U.replace(new RegExp("(?:^" + ce.source + "|" + ce.source + "$)"), "");
        function de(U) {
          if (U.children.length === 0)
            return true;
          if (U.children.length > 1)
            return false;
          let Z = U.children[0];
          return Z.type === "JSXText" && !ue(Z);
        }
        function ue(U) {
          return U.type === "JSXText" && (W.test(N(U)) || !/\n/.test(N(U)));
        }
        function Fe(U) {
          return U.type === "JSXExpressionContainer" && I(U.expression) && U.expression.value === " " && !$(U.expression);
        }
        function z(U) {
          let Z = U.getValue(), se = U.getParentNode();
          if (!se || !Z || !E(Z) || !E(se))
            return false;
          let fe = se.children.indexOf(Z), ge = null;
          for (let he = fe; he > 0; he--) {
            let we = se.children[he - 1];
            if (!(we.type === "JSXText" && !ue(we))) {
              ge = we;
              break;
            }
          }
          return ge && ge.type === "JSXExpressionContainer" && ge.expression.type === "JSXEmptyExpression" && T(ge.expression);
        }
        r.exports = { hasJsxIgnoreComment: z, printJsx: ie };
      } }), ct = te({ "src/language-js/print/misc.js"(e, r) {
        ne();
        var { isNonEmptyArray: t } = Ue(), { builders: { indent: s, join: a, line: n } } = qe(), { isFlowAnnotationComment: u } = Ke();
        function i2(_) {
          let w = _.getValue();
          return !w.optional || w.type === "Identifier" && w === _.getParentNode().key ? "" : w.type === "OptionalCallExpression" || w.type === "OptionalMemberExpression" && w.computed ? "?." : "?";
        }
        function l(_) {
          return _.getValue().definite || _.match(void 0, (w, E) => E === "id" && w.type === "VariableDeclarator" && w.definite) ? "!" : "";
        }
        function p2(_, w, E) {
          let N = _.getValue();
          return N.typeArguments ? E("typeArguments") : N.typeParameters ? E("typeParameters") : "";
        }
        function y(_, w, E) {
          let N = _.getValue();
          if (!N.typeAnnotation)
            return "";
          let x = _.getParentNode(), I = x.type === "DeclareFunction" && x.id === N;
          return u(w.originalText, N.typeAnnotation) ? [" /*: ", E("typeAnnotation"), " */"] : [I ? "" : ": ", E("typeAnnotation")];
        }
        function h2(_, w, E) {
          return ["::", E("callee")];
        }
        function g(_, w, E) {
          let N = _.getValue();
          return t(N.modifiers) ? [a(" ", _.map(E, "modifiers")), " "] : "";
        }
        function c(_, w, E) {
          return _.type === "EmptyStatement" ? ";" : _.type === "BlockStatement" || E ? [" ", w] : s([n, w]);
        }
        function f(_, w, E) {
          return ["...", E("argument"), y(_, w, E)];
        }
        function F(_, w) {
          let E = _.slice(1, -1);
          if (E.includes('"') || E.includes("'"))
            return _;
          let N = w.singleQuote ? "'" : '"';
          return N + E + N;
        }
        r.exports = { printOptionalToken: i2, printDefiniteToken: l, printFunctionTypeParameters: p2, printBindExpressionCallee: h2, printTypeScriptModifiers: g, printTypeAnnotation: y, printRestSpread: f, adjustClause: c, printDirective: F };
      } }), er = te({ "src/language-js/print/array.js"(e, r) {
        ne();
        var { printDanglingComments: t } = et(), { builders: { line: s, softline: a, hardline: n, group: u, indent: i2, ifBreak: l, fill: p2 } } = qe(), { getLast: y, hasNewline: h2 } = Ue(), { shouldPrintComma: g, hasComment: c, CommentCheckFlags: f, isNextLineEmpty: F, isNumericLiteral: _, isSignedNumericLiteral: w } = Ke(), { locStart: E } = ut(), { printOptionalToken: N, printTypeAnnotation: x } = ct();
        function I(T, m, C) {
          let o = T.getValue(), d = [], v = o.type === "TupleExpression" ? "#[" : "[", S = "]";
          if (o.elements.length === 0)
            c(o, f.Dangling) ? d.push(u([v, t(T, m), a, S])) : d.push(v, S);
          else {
            let b = y(o.elements), B = !(b && b.type === "RestElement"), k = b === null, M = Symbol("array"), R = !m.__inJestEach && o.elements.length > 1 && o.elements.every((L, Q, V) => {
              let j = L && L.type;
              if (j !== "ArrayExpression" && j !== "ObjectExpression")
                return false;
              let Y = V[Q + 1];
              if (Y && j !== Y.type)
                return false;
              let ie = j === "ArrayExpression" ? "elements" : "properties";
              return L[ie] && L[ie].length > 1;
            }), q = P(o, m), J = B ? k ? "," : g(m) ? q ? l(",", "", { groupId: M }) : l(",") : "" : "";
            d.push(u([v, i2([a, q ? D(T, m, C, J) : [$(T, m, "elements", C), J], t(T, m, true)]), a, S], { shouldBreak: R, id: M }));
          }
          return d.push(N(T), x(T, m, C)), d;
        }
        function P(T, m) {
          return T.elements.length > 1 && T.elements.every((C) => C && (_(C) || w(C) && !c(C.argument)) && !c(C, f.Trailing | f.Line, (o) => !h2(m.originalText, E(o), { backwards: true })));
        }
        function $(T, m, C, o) {
          let d = [], v = [];
          return T.each((S) => {
            d.push(v, u(o())), v = [",", s], S.getValue() && F(S.getValue(), m) && v.push(a);
          }, C), d;
        }
        function D(T, m, C, o) {
          let d = [];
          return T.each((v, S, b) => {
            let B = S === b.length - 1;
            d.push([C(), B ? o : ","]), B || d.push(F(v.getValue(), m) ? [n, n] : c(b[S + 1], f.Leading | f.Line) ? n : s);
          }, "elements"), p2(d);
        }
        r.exports = { printArray: I, printArrayItems: $, isConciselyPrintedArray: P };
      } }), Ao = te({ "src/language-js/print/call-arguments.js"(e, r) {
        ne();
        var { printDanglingComments: t } = et(), { getLast: s, getPenultimate: a } = Ue(), { getFunctionParameters: n, hasComment: u, CommentCheckFlags: i2, isFunctionCompositionArgs: l, isJsxNode: p2, isLongCurriedCallExpression: y, shouldPrintComma: h2, getCallArguments: g, iterateCallArgumentsPath: c, isNextLineEmpty: f, isCallExpression: F, isStringLiteral: _, isObjectProperty: w, isTSTypeExpression: E } = Ke(), { builders: { line: N, hardline: x, softline: I, group: P, indent: $, conditionalGroup: D, ifBreak: T, breakParent: m }, utils: { willBreak: C } } = qe(), { ArgExpansionBailout: o } = Qt(), { isConciselyPrintedArray: d } = er();
        function v(q, J, L) {
          let Q = q.getValue(), V = Q.type === "ImportExpression", j = g(Q);
          if (j.length === 0)
            return ["(", t(q, J, true), ")"];
          if (k(j))
            return ["(", L(["arguments", 0]), ", ", L(["arguments", 1]), ")"];
          let Y = false, ie = false, ee = j.length - 1, ce = [];
          c(q, (z, U) => {
            let Z = z.getNode(), se = [L()];
            U === ee || (f(Z, J) ? (U === 0 && (ie = true), Y = true, se.push(",", x, x)) : se.push(",", N)), ce.push(se);
          });
          let W = !(V || Q.callee && Q.callee.type === "Import") && h2(J, "all") ? "," : "";
          function K() {
            return P(["(", $([N, ...ce]), W, N, ")"], { shouldBreak: true });
          }
          if (Y || q.getParentNode().type !== "Decorator" && l(j))
            return K();
          let de = B(j), ue = b(j, J);
          if (de || ue) {
            if (de ? ce.slice(1).some(C) : ce.slice(0, -1).some(C))
              return K();
            let z = [];
            try {
              q.try(() => {
                c(q, (U, Z) => {
                  de && Z === 0 && (z = [[L([], { expandFirstArg: true }), ce.length > 1 ? "," : "", ie ? x : N, ie ? x : ""], ...ce.slice(1)]), ue && Z === ee && (z = [...ce.slice(0, -1), L([], { expandLastArg: true })]);
                });
              });
            } catch (U) {
              if (U instanceof o)
                return K();
              throw U;
            }
            return [ce.some(C) ? m : "", D([["(", ...z, ")"], de ? ["(", P(z[0], { shouldBreak: true }), ...z.slice(1), ")"] : ["(", ...ce.slice(0, -1), P(s(z), { shouldBreak: true }), ")"], K()])];
          }
          let Fe = ["(", $([I, ...ce]), T(W), I, ")"];
          return y(q) ? Fe : P(Fe, { shouldBreak: ce.some(C) || Y });
        }
        function S(q) {
          let J = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          return q.type === "ObjectExpression" && (q.properties.length > 0 || u(q)) || q.type === "ArrayExpression" && (q.elements.length > 0 || u(q)) || q.type === "TSTypeAssertion" && S(q.expression) || E(q) && S(q.expression) || q.type === "FunctionExpression" || q.type === "ArrowFunctionExpression" && (!q.returnType || !q.returnType.typeAnnotation || q.returnType.typeAnnotation.type !== "TSTypeReference" || M(q.body)) && (q.body.type === "BlockStatement" || q.body.type === "ArrowFunctionExpression" && S(q.body, true) || q.body.type === "ObjectExpression" || q.body.type === "ArrayExpression" || !J && (F(q.body) || q.body.type === "ConditionalExpression") || p2(q.body)) || q.type === "DoExpression" || q.type === "ModuleExpression";
        }
        function b(q, J) {
          let L = s(q), Q = a(q);
          return !u(L, i2.Leading) && !u(L, i2.Trailing) && S(L) && (!Q || Q.type !== L.type) && (q.length !== 2 || Q.type !== "ArrowFunctionExpression" || L.type !== "ArrayExpression") && !(q.length > 1 && L.type === "ArrayExpression" && d(L, J));
        }
        function B(q) {
          if (q.length !== 2)
            return false;
          let [J, L] = q;
          return J.type === "ModuleExpression" && R(L) ? true : !u(J) && (J.type === "FunctionExpression" || J.type === "ArrowFunctionExpression" && J.body.type === "BlockStatement") && L.type !== "FunctionExpression" && L.type !== "ArrowFunctionExpression" && L.type !== "ConditionalExpression" && !S(L);
        }
        function k(q) {
          return q.length === 2 && q[0].type === "ArrowFunctionExpression" && n(q[0]).length === 0 && q[0].body.type === "BlockStatement" && q[1].type === "ArrayExpression" && !q.some((J) => u(J));
        }
        function M(q) {
          return q.type === "BlockStatement" && (q.body.some((J) => J.type !== "EmptyStatement") || u(q, i2.Dangling));
        }
        function R(q) {
          return q.type === "ObjectExpression" && q.properties.length === 1 && w(q.properties[0]) && q.properties[0].key.type === "Identifier" && q.properties[0].key.name === "type" && _(q.properties[0].value) && q.properties[0].value.value === "module";
        }
        r.exports = v;
      } }), So = te({ "src/language-js/print/member.js"(e, r) {
        ne();
        var { builders: { softline: t, group: s, indent: a, label: n } } = qe(), { isNumericLiteral: u, isMemberExpression: i2, isCallExpression: l } = Ke(), { printOptionalToken: p2 } = ct();
        function y(g, c, f) {
          let F = g.getValue(), _ = g.getParentNode(), w, E = 0;
          do
            w = g.getParentNode(E), E++;
          while (w && (i2(w) || w.type === "TSNonNullExpression"));
          let N = f("object"), x = h2(g, c, f), I = w && (w.type === "NewExpression" || w.type === "BindExpression" || w.type === "AssignmentExpression" && w.left.type !== "Identifier") || F.computed || F.object.type === "Identifier" && F.property.type === "Identifier" && !i2(_) || (_.type === "AssignmentExpression" || _.type === "VariableDeclarator") && (l(F.object) && F.object.arguments.length > 0 || F.object.type === "TSNonNullExpression" && l(F.object.expression) && F.object.expression.arguments.length > 0 || N.label === "member-chain");
          return n(N.label === "member-chain" ? "member-chain" : "member", [N, I ? x : s(a([t, x]))]);
        }
        function h2(g, c, f) {
          let F = f("property"), _ = g.getValue(), w = p2(g);
          return _.computed ? !_.property || u(_.property) ? [w, "[", F, "]"] : s([w, "[", a([t, F]), t, "]"]) : [w, ".", F];
        }
        r.exports = { printMemberExpression: y, printMemberLookup: h2 };
      } }), md = te({ "src/language-js/print/member-chain.js"(e, r) {
        ne();
        var { printComments: t } = et(), { getLast: s, isNextLineEmptyAfterIndex: a, getNextNonSpaceNonCommentCharacterIndex: n } = Ue(), u = qt(), { isCallExpression: i2, isMemberExpression: l, isFunctionOrArrowExpression: p2, isLongCurriedCallExpression: y, isMemberish: h2, isNumericLiteral: g, isSimpleCallArgument: c, hasComment: f, CommentCheckFlags: F, isNextLineEmpty: _ } = Ke(), { locEnd: w } = ut(), { builders: { join: E, hardline: N, group: x, indent: I, conditionalGroup: P, breakParent: $, label: D }, utils: { willBreak: T } } = qe(), m = Ao(), { printMemberLookup: C } = So(), { printOptionalToken: o, printFunctionTypeParameters: d, printBindExpressionCallee: v } = ct();
        function S(b, B, k) {
          let M = b.getParentNode(), R = !M || M.type === "ExpressionStatement", q = [];
          function J(Ne) {
            let { originalText: Pe } = B, oe = n(Pe, Ne, w);
            return Pe.charAt(oe) === ")" ? oe !== false && a(Pe, oe + 1) : _(Ne, B);
          }
          function L(Ne) {
            let Pe = Ne.getValue();
            i2(Pe) && (h2(Pe.callee) || i2(Pe.callee)) ? (q.unshift({ node: Pe, printed: [t(Ne, [o(Ne), d(Ne, B, k), m(Ne, B, k)], B), J(Pe) ? N : ""] }), Ne.call((oe) => L(oe), "callee")) : h2(Pe) ? (q.unshift({ node: Pe, needsParens: u(Ne, B), printed: t(Ne, l(Pe) ? C(Ne, B, k) : v(Ne, B, k), B) }), Ne.call((oe) => L(oe), "object")) : Pe.type === "TSNonNullExpression" ? (q.unshift({ node: Pe, printed: t(Ne, "!", B) }), Ne.call((oe) => L(oe), "expression")) : q.unshift({ node: Pe, printed: k() });
          }
          let Q = b.getValue();
          q.unshift({ node: Q, printed: [o(b), d(b, B, k), m(b, B, k)] }), Q.callee && b.call((Ne) => L(Ne), "callee");
          let V = [], j = [q[0]], Y = 1;
          for (; Y < q.length && (q[Y].node.type === "TSNonNullExpression" || i2(q[Y].node) || l(q[Y].node) && q[Y].node.computed && g(q[Y].node.property)); ++Y)
            j.push(q[Y]);
          if (!i2(q[0].node))
            for (; Y + 1 < q.length && (h2(q[Y].node) && h2(q[Y + 1].node)); ++Y)
              j.push(q[Y]);
          V.push(j), j = [];
          let ie = false;
          for (; Y < q.length; ++Y) {
            if (ie && h2(q[Y].node)) {
              if (q[Y].node.computed && g(q[Y].node.property)) {
                j.push(q[Y]);
                continue;
              }
              V.push(j), j = [], ie = false;
            }
            (i2(q[Y].node) || q[Y].node.type === "ImportExpression") && (ie = true), j.push(q[Y]), f(q[Y].node, F.Trailing) && (V.push(j), j = [], ie = false);
          }
          j.length > 0 && V.push(j);
          function ee(Ne) {
            return /^[A-Z]|^[$_]+$/.test(Ne);
          }
          function ce(Ne) {
            return Ne.length <= B.tabWidth;
          }
          function W(Ne) {
            let Pe = Ne[1].length > 0 && Ne[1][0].node.computed;
            if (Ne[0].length === 1) {
              let H = Ne[0][0].node;
              return H.type === "ThisExpression" || H.type === "Identifier" && (ee(H.name) || R && ce(H.name) || Pe);
            }
            let oe = s(Ne[0]).node;
            return l(oe) && oe.property.type === "Identifier" && (ee(oe.property.name) || Pe);
          }
          let K = V.length >= 2 && !f(V[1][0].node) && W(V);
          function de(Ne) {
            let Pe = Ne.map((oe) => oe.printed);
            return Ne.length > 0 && s(Ne).needsParens ? ["(", ...Pe, ")"] : Pe;
          }
          function ue(Ne) {
            return Ne.length === 0 ? "" : I(x([N, E(N, Ne.map(de))]));
          }
          let Fe = V.map(de), z = Fe, U = K ? 3 : 2, Z = V.flat(), se = Z.slice(1, -1).some((Ne) => f(Ne.node, F.Leading)) || Z.slice(0, -1).some((Ne) => f(Ne.node, F.Trailing)) || V[U] && f(V[U][0].node, F.Leading);
          if (V.length <= U && !se)
            return y(b) ? z : x(z);
          let fe = s(V[K ? 1 : 0]).node, ge = !i2(fe) && J(fe), he = [de(V[0]), K ? V.slice(1, 2).map(de) : "", ge ? N : "", ue(V.slice(K ? 2 : 1))], we = q.map((Ne) => {
            let { node: Pe } = Ne;
            return Pe;
          }).filter(i2);
          function ke() {
            let Ne = s(s(V)).node, Pe = s(Fe);
            return i2(Ne) && T(Pe) && we.slice(0, -1).some((oe) => oe.arguments.some(p2));
          }
          let Re;
          return se || we.length > 2 && we.some((Ne) => !Ne.arguments.every((Pe) => c(Pe, 0))) || Fe.slice(0, -1).some(T) || ke() ? Re = x(he) : Re = [T(z) || ge ? $ : "", P([z, he])], D("member-chain", Re);
        }
        r.exports = S;
      } }), xo = te({ "src/language-js/print/call-expression.js"(e, r) {
        ne();
        var { builders: { join: t, group: s } } = qe(), a = qt(), { getCallArguments: n, hasFlowAnnotationComment: u, isCallExpression: i2, isMemberish: l, isStringLiteral: p2, isTemplateOnItsOwnLine: y, isTestCall: h2, iterateCallArgumentsPath: g } = Ke(), c = md(), f = Ao(), { printOptionalToken: F, printFunctionTypeParameters: _ } = ct();
        function w(N, x, I) {
          let P = N.getValue(), $ = N.getParentNode(), D = P.type === "NewExpression", T = P.type === "ImportExpression", m = F(N), C = n(P);
          if (C.length > 0 && (!T && !D && E(P, $) || C.length === 1 && y(C[0], x.originalText) || !D && h2(P, $))) {
            let v = [];
            return g(N, () => {
              v.push(I());
            }), [D ? "new " : "", I("callee"), m, _(N, x, I), "(", t(", ", v), ")"];
          }
          let o = (x.parser === "babel" || x.parser === "babel-flow") && P.callee && P.callee.type === "Identifier" && u(P.callee.trailingComments);
          if (o && (P.callee.trailingComments[0].printed = true), !T && !D && l(P.callee) && !N.call((v) => a(v, x), "callee"))
            return c(N, x, I);
          let d = [D ? "new " : "", T ? "import" : I("callee"), m, o ? `/*:: ${P.callee.trailingComments[0].value.slice(2).trim()} */` : "", _(N, x, I), f(N, x, I)];
          return T || i2(P.callee) ? s(d) : d;
        }
        function E(N, x) {
          if (N.callee.type !== "Identifier")
            return false;
          if (N.callee.name === "require")
            return true;
          if (N.callee.name === "define") {
            let I = n(N);
            return x.type === "ExpressionStatement" && (I.length === 1 || I.length === 2 && I[0].type === "ArrayExpression" || I.length === 3 && p2(I[0]) && I[1].type === "ArrayExpression");
          }
          return false;
        }
        r.exports = { printCallExpression: w };
      } }), tr = te({ "src/language-js/print/assignment.js"(e, r) {
        ne();
        var { isNonEmptyArray: t, getStringWidth: s } = Ue(), { builders: { line: a, group: n, indent: u, indentIfBreak: i2, lineSuffixBoundary: l }, utils: { cleanDoc: p2, willBreak: y, canBreak: h2 } } = qe(), { hasLeadingOwnLineComment: g, isBinaryish: c, isStringLiteral: f, isLiteral: F, isNumericLiteral: _, isCallExpression: w, isMemberExpression: E, getCallArguments: N, rawText: x, hasComment: I, isSignedNumericLiteral: P, isObjectProperty: $ } = Ke(), { shouldInlineLogicalExpression: D } = ru(), { printCallExpression: T } = xo();
        function m(W, K, de, ue, Fe, z) {
          let U = d(W, K, de, ue, z), Z = de(z, { assignmentLayout: U });
          switch (U) {
            case "break-after-operator":
              return n([n(ue), Fe, n(u([a, Z]))]);
            case "never-break-after-operator":
              return n([n(ue), Fe, " ", Z]);
            case "fluid": {
              let se = Symbol("assignment");
              return n([n(ue), Fe, n(u(a), { id: se }), l, i2(Z, { groupId: se })]);
            }
            case "break-lhs":
              return n([ue, Fe, " ", n(Z)]);
            case "chain":
              return [n(ue), Fe, a, Z];
            case "chain-tail":
              return [n(ue), Fe, u([a, Z])];
            case "chain-tail-arrow-chain":
              return [n(ue), Fe, Z];
            case "only-left":
              return ue;
          }
        }
        function C(W, K, de) {
          let ue = W.getValue();
          return m(W, K, de, de("left"), [" ", ue.operator], "right");
        }
        function o(W, K, de) {
          return m(W, K, de, de("id"), " =", "init");
        }
        function d(W, K, de, ue, Fe) {
          let z = W.getValue(), U = z[Fe];
          if (!U)
            return "only-left";
          let Z = !b(U);
          if (W.match(b, B, (he) => !Z || he.type !== "ExpressionStatement" && he.type !== "VariableDeclaration"))
            return Z ? U.type === "ArrowFunctionExpression" && U.body.type === "ArrowFunctionExpression" ? "chain-tail-arrow-chain" : "chain-tail" : "chain";
          if (!Z && b(U.right) || g(K.originalText, U))
            return "break-after-operator";
          if (U.type === "CallExpression" && U.callee.name === "require" || K.parser === "json5" || K.parser === "json")
            return "never-break-after-operator";
          if (S(z) || k(z) || q(z) || J(z) && h2(ue))
            return "break-lhs";
          let ge = ie(z, ue, K);
          return W.call(() => v(W, K, de, ge), Fe) ? "break-after-operator" : ge || U.type === "TemplateLiteral" || U.type === "TaggedTemplateExpression" || U.type === "BooleanLiteral" || _(U) || U.type === "ClassExpression" ? "never-break-after-operator" : "fluid";
        }
        function v(W, K, de, ue) {
          let Fe = W.getValue();
          if (c(Fe) && !D(Fe))
            return true;
          switch (Fe.type) {
            case "StringLiteralTypeAnnotation":
            case "SequenceExpression":
              return true;
            case "ConditionalExpression": {
              let { test: Z } = Fe;
              return c(Z) && !D(Z);
            }
            case "ClassExpression":
              return t(Fe.decorators);
          }
          if (ue)
            return false;
          let z = Fe, U = [];
          for (; ; )
            if (z.type === "UnaryExpression")
              z = z.argument, U.push("argument");
            else if (z.type === "TSNonNullExpression")
              z = z.expression, U.push("expression");
            else
              break;
          return !!(f(z) || W.call(() => V(W, K, de), ...U));
        }
        function S(W) {
          if (B(W)) {
            let K = W.left || W.id;
            return K.type === "ObjectPattern" && K.properties.length > 2 && K.properties.some((de) => $(de) && (!de.shorthand || de.value && de.value.type === "AssignmentPattern"));
          }
          return false;
        }
        function b(W) {
          return W.type === "AssignmentExpression";
        }
        function B(W) {
          return b(W) || W.type === "VariableDeclarator";
        }
        function k(W) {
          let K = M(W);
          if (t(K)) {
            let de = W.type === "TSTypeAliasDeclaration" ? "constraint" : "bound";
            if (K.length > 1 && K.some((ue) => ue[de] || ue.default))
              return true;
          }
          return false;
        }
        function M(W) {
          return R(W) && W.typeParameters && W.typeParameters.params ? W.typeParameters.params : null;
        }
        function R(W) {
          return W.type === "TSTypeAliasDeclaration" || W.type === "TypeAlias";
        }
        function q(W) {
          if (W.type !== "VariableDeclarator")
            return false;
          let { typeAnnotation: K } = W.id;
          if (!K || !K.typeAnnotation)
            return false;
          let de = L(K.typeAnnotation);
          return t(de) && de.length > 1 && de.some((ue) => t(L(ue)) || ue.type === "TSConditionalType");
        }
        function J(W) {
          return W.type === "VariableDeclarator" && W.init && W.init.type === "ArrowFunctionExpression";
        }
        function L(W) {
          return Q(W) && W.typeParameters && W.typeParameters.params ? W.typeParameters.params : null;
        }
        function Q(W) {
          return W.type === "TSTypeReference" || W.type === "GenericTypeAnnotation";
        }
        function V(W, K, de) {
          let ue = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, Fe = W.getValue(), z = () => V(W, K, de, true);
          if (Fe.type === "TSNonNullExpression")
            return W.call(z, "expression");
          if (w(Fe)) {
            if (T(W, K, de).label === "member-chain")
              return false;
            let Z = N(Fe);
            return !(Z.length === 0 || Z.length === 1 && Y(Z[0], K)) || ee(Fe, de) ? false : W.call(z, "callee");
          }
          return E(Fe) ? W.call(z, "object") : ue && (Fe.type === "Identifier" || Fe.type === "ThisExpression");
        }
        var j = 0.25;
        function Y(W, K) {
          let { printWidth: de } = K;
          if (I(W))
            return false;
          let ue = de * j;
          if (W.type === "ThisExpression" || W.type === "Identifier" && W.name.length <= ue || P(W) && !I(W.argument))
            return true;
          let Fe = W.type === "Literal" && "regex" in W && W.regex.pattern || W.type === "RegExpLiteral" && W.pattern;
          return Fe ? Fe.length <= ue : f(W) ? x(W).length <= ue : W.type === "TemplateLiteral" ? W.expressions.length === 0 && W.quasis[0].value.raw.length <= ue && !W.quasis[0].value.raw.includes(`
`) : F(W);
        }
        function ie(W, K, de) {
          if (!$(W))
            return false;
          K = p2(K);
          let ue = 3;
          return typeof K == "string" && s(K) < de.tabWidth + ue;
        }
        function ee(W, K) {
          let de = ce(W);
          if (t(de)) {
            if (de.length > 1)
              return true;
            if (de.length === 1) {
              let Fe = de[0];
              if (Fe.type === "TSUnionType" || Fe.type === "UnionTypeAnnotation" || Fe.type === "TSIntersectionType" || Fe.type === "IntersectionTypeAnnotation" || Fe.type === "TSTypeLiteral" || Fe.type === "ObjectTypeAnnotation")
                return true;
            }
            let ue = W.typeParameters ? "typeParameters" : "typeArguments";
            if (y(K(ue)))
              return true;
          }
          return false;
        }
        function ce(W) {
          return W.typeParameters && W.typeParameters.params || W.typeArguments && W.typeArguments.params;
        }
        r.exports = { printVariableDeclarator: o, printAssignmentExpression: C, printAssignment: m, isArrowFunctionVariableDeclarator: J };
      } }), Lr = te({ "src/language-js/print/function-parameters.js"(e, r) {
        ne();
        var { getNextNonSpaceNonCommentCharacter: t } = Ue(), { printDanglingComments: s } = et(), { builders: { line: a, hardline: n, softline: u, group: i2, indent: l, ifBreak: p2 }, utils: { removeLines: y, willBreak: h2 } } = qe(), { getFunctionParameters: g, iterateFunctionParametersPath: c, isSimpleType: f, isTestCall: F, isTypeAnnotationAFunction: _, isObjectType: w, isObjectTypePropertyAFunction: E, hasRestParameter: N, shouldPrintComma: x, hasComment: I, isNextLineEmpty: P } = Ke(), { locEnd: $ } = ut(), { ArgExpansionBailout: D } = Qt(), { printFunctionTypeParameters: T } = ct();
        function m(v, S, b, B, k) {
          let M = v.getValue(), R = g(M), q = k ? T(v, b, S) : "";
          if (R.length === 0)
            return [q, "(", s(v, b, true, (ie) => t(b.originalText, ie, $) === ")"), ")"];
          let J = v.getParentNode(), L = F(J), Q = C(M), V = [];
          if (c(v, (ie, ee) => {
            let ce = ee === R.length - 1;
            ce && M.rest && V.push("..."), V.push(S()), !ce && (V.push(","), L || Q ? V.push(" ") : P(R[ee], b) ? V.push(n, n) : V.push(a));
          }), B) {
            if (h2(q) || h2(V))
              throw new D();
            return i2([y(q), "(", y(V), ")"]);
          }
          let j = R.every((ie) => !ie.decorators);
          return Q && j ? [q, "(", ...V, ")"] : L ? [q, "(", ...V, ")"] : (E(J) || _(J) || J.type === "TypeAlias" || J.type === "UnionTypeAnnotation" || J.type === "TSUnionType" || J.type === "IntersectionTypeAnnotation" || J.type === "FunctionTypeAnnotation" && J.returnType === M) && R.length === 1 && R[0].name === null && M.this !== R[0] && R[0].typeAnnotation && M.typeParameters === null && f(R[0].typeAnnotation) && !M.rest ? b.arrowParens === "always" ? ["(", ...V, ")"] : V : [q, "(", l([u, ...V]), p2(!N(M) && x(b, "all") ? "," : ""), u, ")"];
        }
        function C(v) {
          if (!v)
            return false;
          let S = g(v);
          if (S.length !== 1)
            return false;
          let [b] = S;
          return !I(b) && (b.type === "ObjectPattern" || b.type === "ArrayPattern" || b.type === "Identifier" && b.typeAnnotation && (b.typeAnnotation.type === "TypeAnnotation" || b.typeAnnotation.type === "TSTypeAnnotation") && w(b.typeAnnotation.typeAnnotation) || b.type === "FunctionTypeParam" && w(b.typeAnnotation) || b.type === "AssignmentPattern" && (b.left.type === "ObjectPattern" || b.left.type === "ArrayPattern") && (b.right.type === "Identifier" || b.right.type === "ObjectExpression" && b.right.properties.length === 0 || b.right.type === "ArrayExpression" && b.right.elements.length === 0));
        }
        function o(v) {
          let S;
          return v.returnType ? (S = v.returnType, S.typeAnnotation && (S = S.typeAnnotation)) : v.typeAnnotation && (S = v.typeAnnotation), S;
        }
        function d(v, S) {
          let b = o(v);
          if (!b)
            return false;
          let B = v.typeParameters && v.typeParameters.params;
          if (B) {
            if (B.length > 1)
              return false;
            if (B.length === 1) {
              let k = B[0];
              if (k.constraint || k.default)
                return false;
            }
          }
          return g(v).length === 1 && (w(b) || h2(S));
        }
        r.exports = { printFunctionParameters: m, shouldHugFunctionParameters: C, shouldGroupFunctionParameters: d };
      } }), Or = te({ "src/language-js/print/type-annotation.js"(e, r) {
        ne();
        var { printComments: t, printDanglingComments: s } = et(), { isNonEmptyArray: a } = Ue(), { builders: { group: n, join: u, line: i2, softline: l, indent: p2, align: y, ifBreak: h2 } } = qe(), g = qt(), { locStart: c } = ut(), { isSimpleType: f, isObjectType: F, hasLeadingOwnLineComment: _, isObjectTypePropertyAFunction: w, shouldPrintComma: E } = Ke(), { printAssignment: N } = tr(), { printFunctionParameters: x, shouldGroupFunctionParameters: I } = Lr(), { printArrayItems: P } = er();
        function $(b) {
          if (f(b) || F(b))
            return true;
          if (b.type === "UnionTypeAnnotation" || b.type === "TSUnionType") {
            let B = b.types.filter((M) => M.type === "VoidTypeAnnotation" || M.type === "TSVoidKeyword" || M.type === "NullLiteralTypeAnnotation" || M.type === "TSNullKeyword").length, k = b.types.some((M) => M.type === "ObjectTypeAnnotation" || M.type === "TSTypeLiteral" || M.type === "GenericTypeAnnotation" || M.type === "TSTypeReference");
            if (b.types.length - 1 === B && k)
              return true;
          }
          return false;
        }
        function D(b, B, k) {
          let M = B.semi ? ";" : "", R = b.getValue(), q = [];
          return q.push("opaque type ", k("id"), k("typeParameters")), R.supertype && q.push(": ", k("supertype")), R.impltype && q.push(" = ", k("impltype")), q.push(M), q;
        }
        function T(b, B, k) {
          let M = B.semi ? ";" : "", R = b.getValue(), q = [];
          R.declare && q.push("declare "), q.push("type ", k("id"), k("typeParameters"));
          let J = R.type === "TSTypeAliasDeclaration" ? "typeAnnotation" : "right";
          return [N(b, B, k, q, " =", J), M];
        }
        function m(b, B, k) {
          let M = b.getValue(), R = b.map(k, "types"), q = [], J = false;
          for (let L = 0; L < R.length; ++L)
            L === 0 ? q.push(R[L]) : F(M.types[L - 1]) && F(M.types[L]) ? q.push([" & ", J ? p2(R[L]) : R[L]]) : !F(M.types[L - 1]) && !F(M.types[L]) ? q.push(p2([" &", i2, R[L]])) : (L > 1 && (J = true), q.push(" & ", L > 1 ? p2(R[L]) : R[L]));
          return n(q);
        }
        function C(b, B, k) {
          let M = b.getValue(), R = b.getParentNode(), q = R.type !== "TypeParameterInstantiation" && R.type !== "TSTypeParameterInstantiation" && R.type !== "GenericTypeAnnotation" && R.type !== "TSTypeReference" && R.type !== "TSTypeAssertion" && R.type !== "TupleTypeAnnotation" && R.type !== "TSTupleType" && !(R.type === "FunctionTypeParam" && !R.name && b.getParentNode(1).this !== R) && !((R.type === "TypeAlias" || R.type === "VariableDeclarator" || R.type === "TSTypeAliasDeclaration") && _(B.originalText, M)), J = $(M), L = b.map((j) => {
            let Y = k();
            return J || (Y = y(2, Y)), t(j, Y, B);
          }, "types");
          if (J)
            return u(" | ", L);
          let Q = q && !_(B.originalText, M), V = [h2([Q ? i2 : "", "| "]), u([i2, "| "], L)];
          return g(b, B) ? n([p2(V), l]) : R.type === "TupleTypeAnnotation" && R.types.length > 1 || R.type === "TSTupleType" && R.elementTypes.length > 1 ? n([p2([h2(["(", l]), V]), l, h2(")")]) : n(q ? p2(V) : V);
        }
        function o(b, B, k) {
          let M = b.getValue(), R = [], q = b.getParentNode(0), J = b.getParentNode(1), L = b.getParentNode(2), Q = M.type === "TSFunctionType" || !((q.type === "ObjectTypeProperty" || q.type === "ObjectTypeInternalSlot") && !q.variance && !q.optional && c(q) === c(M) || q.type === "ObjectTypeCallProperty" || L && L.type === "DeclareFunction"), V = Q && (q.type === "TypeAnnotation" || q.type === "TSTypeAnnotation"), j = V && Q && (q.type === "TypeAnnotation" || q.type === "TSTypeAnnotation") && J.type === "ArrowFunctionExpression";
          w(q) && (Q = true, V = true), j && R.push("(");
          let Y = x(b, k, B, false, true), ie = M.returnType || M.predicate || M.typeAnnotation ? [Q ? " => " : ": ", k("returnType"), k("predicate"), k("typeAnnotation")] : "", ee = I(M, ie);
          return R.push(ee ? n(Y) : Y), ie && R.push(ie), j && R.push(")"), n(R);
        }
        function d(b, B, k) {
          let M = b.getValue(), R = M.type === "TSTupleType" ? "elementTypes" : "types", q = M[R], J = a(q), L = J ? l : "";
          return n(["[", p2([L, P(b, B, R, k)]), h2(J && E(B, "all") ? "," : ""), s(b, B, true), L, "]"]);
        }
        function v(b, B, k) {
          let M = b.getValue(), R = M.type === "OptionalIndexedAccessType" && M.optional ? "?.[" : "[";
          return [k("objectType"), R, k("indexType"), "]"];
        }
        function S(b, B, k) {
          let M = b.getValue();
          return [M.postfix ? "" : k, B("typeAnnotation"), M.postfix ? k : ""];
        }
        r.exports = { printOpaqueType: D, printTypeAlias: T, printIntersectionType: m, printUnionType: C, printFunctionType: o, printTupleType: d, printIndexedAccessType: v, shouldHugType: $, printJSDocType: S };
      } }), jr = te({ "src/language-js/print/type-parameters.js"(e, r) {
        ne();
        var { printDanglingComments: t } = et(), { builders: { join: s, line: a, hardline: n, softline: u, group: i2, indent: l, ifBreak: p2 } } = qe(), { isTestCall: y, hasComment: h2, CommentCheckFlags: g, isTSXFile: c, shouldPrintComma: f, getFunctionParameters: F, isObjectType: _, getTypeScriptMappedTypeModifier: w } = Ke(), { createGroupIdMapper: E } = Ue(), { shouldHugType: N } = Or(), { isArrowFunctionVariableDeclarator: x } = tr(), I = E("typeParameters");
        function P(T, m, C, o) {
          let d = T.getValue();
          if (!d[o])
            return "";
          if (!Array.isArray(d[o]))
            return C(o);
          let v = T.getNode(2), S = v && y(v), b = T.match((M) => !(M[o].length === 1 && _(M[o][0])), void 0, (M, R) => R === "typeAnnotation", (M) => M.type === "Identifier", x);
          if (d[o].length === 0 || !b && (S || d[o].length === 1 && (d[o][0].type === "NullableTypeAnnotation" || N(d[o][0]))))
            return ["<", s(", ", T.map(C, o)), $(T, m), ">"];
          let k = d.type === "TSTypeParameterInstantiation" ? "" : F(d).length === 1 && c(m) && !d[o][0].constraint && T.getParentNode().type === "ArrowFunctionExpression" ? "," : f(m, "all") ? p2(",") : "";
          return i2(["<", l([u, s([",", a], T.map(C, o))]), k, u, ">"], { id: I(d) });
        }
        function $(T, m) {
          let C = T.getValue();
          if (!h2(C, g.Dangling))
            return "";
          let o = !h2(C, g.Line), d = t(T, m, o);
          return o ? d : [d, n];
        }
        function D(T, m, C) {
          let o = T.getValue(), d = [o.type === "TSTypeParameter" && o.const ? "const " : ""], v = T.getParentNode();
          return v.type === "TSMappedType" ? (v.readonly && d.push(w(v.readonly, "readonly"), " "), d.push("[", C("name")), o.constraint && d.push(" in ", C("constraint")), v.nameType && d.push(" as ", T.callParent(() => C("nameType"))), d.push("]"), d) : (o.variance && d.push(C("variance")), o.in && d.push("in "), o.out && d.push("out "), d.push(C("name")), o.bound && d.push(": ", C("bound")), o.constraint && d.push(" extends ", C("constraint")), o.default && d.push(" = ", C("default")), d);
        }
        r.exports = { printTypeParameter: D, printTypeParameters: P, getTypeParametersGroupId: I };
      } }), rr = te({ "src/language-js/print/property.js"(e, r) {
        ne();
        var { printComments: t } = et(), { printString: s, printNumber: a } = Ue(), { isNumericLiteral: n, isSimpleNumber: u, isStringLiteral: i2, isStringPropSafeToUnquote: l, rawText: p2 } = Ke(), { printAssignment: y } = tr(), h2 = /* @__PURE__ */ new WeakMap();
        function g(f, F, _) {
          let w = f.getNode();
          if (w.computed)
            return ["[", _("key"), "]"];
          let E = f.getParentNode(), { key: N } = w;
          if (F.quoteProps === "consistent" && !h2.has(E)) {
            let x = (E.properties || E.body || E.members).some((I) => !I.computed && I.key && i2(I.key) && !l(I, F));
            h2.set(E, x);
          }
          if ((N.type === "Identifier" || n(N) && u(a(p2(N))) && String(N.value) === a(p2(N)) && !(F.parser === "typescript" || F.parser === "babel-ts")) && (F.parser === "json" || F.quoteProps === "consistent" && h2.get(E))) {
            let x = s(JSON.stringify(N.type === "Identifier" ? N.name : N.value.toString()), F);
            return f.call((I) => t(I, x, F), "key");
          }
          return l(w, F) && (F.quoteProps === "as-needed" || F.quoteProps === "consistent" && !h2.get(E)) ? f.call((x) => t(x, /^\d/.test(N.value) ? a(N.value) : N.value, F), "key") : _("key");
        }
        function c(f, F, _) {
          return f.getValue().shorthand ? _("value") : y(f, F, _, g(f, F, _), ":", "value");
        }
        r.exports = { printProperty: c, printPropertyKey: g };
      } }), qr = te({ "src/language-js/print/function.js"(e, r) {
        ne();
        var t = Zt(), { printDanglingComments: s, printCommentsSeparately: a } = et(), n = lt(), { getNextNonSpaceNonCommentCharacterIndex: u } = Ue(), { builders: { line: i2, softline: l, group: p2, indent: y, ifBreak: h2, hardline: g, join: c, indentIfBreak: f }, utils: { removeLines: F, willBreak: _ } } = qe(), { ArgExpansionBailout: w } = Qt(), { getFunctionParameters: E, hasLeadingOwnLineComment: N, isFlowAnnotationComment: x, isJsxNode: I, isTemplateOnItsOwnLine: P, shouldPrintComma: $, startsWithNoLookaheadToken: D, isBinaryish: T, isLineComment: m, hasComment: C, getComments: o, CommentCheckFlags: d, isCallLikeExpression: v, isCallExpression: S, getCallArguments: b, hasNakedLeftSide: B, getLeftSide: k } = Ke(), { locEnd: M } = ut(), { printFunctionParameters: R, shouldGroupFunctionParameters: q } = Lr(), { printPropertyKey: J } = rr(), { printFunctionTypeParameters: L } = ct();
        function Q(U, Z, se, fe) {
          let ge = U.getValue(), he = false;
          if ((ge.type === "FunctionDeclaration" || ge.type === "FunctionExpression") && fe && fe.expandLastArg) {
            let Pe = U.getParentNode();
            S(Pe) && b(Pe).length > 1 && (he = true);
          }
          let we = [];
          ge.type === "TSDeclareFunction" && ge.declare && we.push("declare "), ge.async && we.push("async "), ge.generator ? we.push("function* ") : we.push("function "), ge.id && we.push(Z("id"));
          let ke = R(U, Z, se, he), Re = K(U, Z, se), Ne = q(ge, Re);
          return we.push(L(U, se, Z), p2([Ne ? p2(ke) : ke, Re]), ge.body ? " " : "", Z("body")), se.semi && (ge.declare || !ge.body) && we.push(";"), we;
        }
        function V(U, Z, se) {
          let fe = U.getNode(), { kind: ge } = fe, he = fe.value || fe, we = [];
          return !ge || ge === "init" || ge === "method" || ge === "constructor" ? he.async && we.push("async ") : (t.ok(ge === "get" || ge === "set"), we.push(ge, " ")), he.generator && we.push("*"), we.push(J(U, Z, se), fe.optional || fe.key.optional ? "?" : ""), fe === he ? we.push(j(U, Z, se)) : he.type === "FunctionExpression" ? we.push(U.call((ke) => j(ke, Z, se), "value")) : we.push(se("value")), we;
        }
        function j(U, Z, se) {
          let fe = U.getNode(), ge = R(U, se, Z), he = K(U, se, Z), we = q(fe, he), ke = [L(U, Z, se), p2([we ? p2(ge) : ge, he])];
          return fe.body ? ke.push(" ", se("body")) : ke.push(Z.semi ? ";" : ""), ke;
        }
        function Y(U, Z, se, fe) {
          let ge = U.getValue(), he = [];
          if (ge.async && he.push("async "), W(U, Z))
            he.push(se(["params", 0]));
          else {
            let ke = fe && (fe.expandLastArg || fe.expandFirstArg), Re = K(U, se, Z);
            if (ke) {
              if (_(Re))
                throw new w();
              Re = p2(F(Re));
            }
            he.push(p2([R(U, se, Z, ke, true), Re]));
          }
          let we = s(U, Z, true, (ke) => {
            let Re = u(Z.originalText, ke, M);
            return Re !== false && Z.originalText.slice(Re, Re + 2) === "=>";
          });
          return we && he.push(" ", we), he;
        }
        function ie(U, Z, se, fe, ge, he) {
          let we = U.getName(), ke = U.getParentNode(), Re = v(ke) && we === "callee", Ne = Boolean(Z && Z.assignmentLayout), Pe = he.body.type !== "BlockStatement" && he.body.type !== "ObjectExpression" && he.body.type !== "SequenceExpression", oe = Re && Pe || Z && Z.assignmentLayout === "chain-tail-arrow-chain", H = Symbol("arrow-chain");
          return he.body.type === "SequenceExpression" && (ge = p2(["(", y([l, ge]), l, ")"])), p2([p2(y([Re || Ne ? l : "", p2(c([" =>", i2], se), { shouldBreak: fe })]), { id: H, shouldBreak: oe }), " =>", f(Pe ? y([i2, ge]) : [" ", ge], { groupId: H }), Re ? h2(l, "", { groupId: H }) : ""]);
        }
        function ee(U, Z, se, fe) {
          let ge = U.getValue(), he = [], we = [], ke = false;
          if (function H() {
            let pe = Y(U, Z, se, fe);
            if (he.length === 0)
              he.push(pe);
            else {
              let { leading: X, trailing: le } = a(U, Z);
              he.push([X, pe]), we.unshift(le);
            }
            ke = ke || ge.returnType && E(ge).length > 0 || ge.typeParameters || E(ge).some((X) => X.type !== "Identifier"), ge.body.type !== "ArrowFunctionExpression" || fe && fe.expandLastArg ? we.unshift(se("body", fe)) : (ge = ge.body, U.call(H, "body"));
          }(), he.length > 1)
            return ie(U, fe, he, ke, we, ge);
          let Re = he;
          if (Re.push(" =>"), !N(Z.originalText, ge.body) && (ge.body.type === "ArrayExpression" || ge.body.type === "ObjectExpression" || ge.body.type === "BlockStatement" || I(ge.body) || P(ge.body, Z.originalText) || ge.body.type === "ArrowFunctionExpression" || ge.body.type === "DoExpression"))
            return p2([...Re, " ", we]);
          if (ge.body.type === "SequenceExpression")
            return p2([...Re, p2([" (", y([l, we]), l, ")"])]);
          let Ne = (fe && fe.expandLastArg || U.getParentNode().type === "JSXExpressionContainer") && !C(ge), Pe = fe && fe.expandLastArg && $(Z, "all"), oe = ge.body.type === "ConditionalExpression" && !D(ge.body, (H) => H.type === "ObjectExpression");
          return p2([...Re, p2([y([i2, oe ? h2("", "(") : "", we, oe ? h2("", ")") : ""]), Ne ? [h2(Pe ? "," : ""), l] : ""])]);
        }
        function ce(U) {
          let Z = E(U);
          return Z.length === 1 && !U.typeParameters && !C(U, d.Dangling) && Z[0].type === "Identifier" && !Z[0].typeAnnotation && !C(Z[0]) && !Z[0].optional && !U.predicate && !U.returnType;
        }
        function W(U, Z) {
          if (Z.arrowParens === "always")
            return false;
          if (Z.arrowParens === "avoid") {
            let se = U.getValue();
            return ce(se);
          }
          return false;
        }
        function K(U, Z, se) {
          let fe = U.getValue(), ge = Z("returnType");
          if (fe.returnType && x(se.originalText, fe.returnType))
            return [" /*: ", ge, " */"];
          let he = [ge];
          return fe.returnType && fe.returnType.typeAnnotation && he.unshift(": "), fe.predicate && he.push(fe.returnType ? " " : ": ", Z("predicate")), he;
        }
        function de(U, Z, se) {
          let fe = U.getValue(), ge = Z.semi ? ";" : "", he = [];
          fe.argument && (z(Z, fe.argument) ? he.push([" (", y([g, se("argument")]), g, ")"]) : T(fe.argument) || fe.argument.type === "SequenceExpression" ? he.push(p2([h2(" (", " "), y([l, se("argument")]), l, h2(")")])) : he.push(" ", se("argument")));
          let we = o(fe), ke = n(we), Re = ke && m(ke);
          return Re && he.push(ge), C(fe, d.Dangling) && he.push(" ", s(U, Z, true)), Re || he.push(ge), he;
        }
        function ue(U, Z, se) {
          return ["return", de(U, Z, se)];
        }
        function Fe(U, Z, se) {
          return ["throw", de(U, Z, se)];
        }
        function z(U, Z) {
          if (N(U.originalText, Z))
            return true;
          if (B(Z)) {
            let se = Z, fe;
            for (; fe = k(se); )
              if (se = fe, N(U.originalText, se))
                return true;
          }
          return false;
        }
        r.exports = { printFunction: Q, printArrowFunction: ee, printMethod: V, printReturnStatement: ue, printThrowStatement: Fe, printMethodInternal: j, shouldPrintParamsWithoutParens: W };
      } }), nu = te({ "src/language-js/print/decorators.js"(e, r) {
        ne();
        var { isNonEmptyArray: t, hasNewline: s } = Ue(), { builders: { line: a, hardline: n, join: u, breakParent: i2, group: l } } = qe(), { locStart: p2, locEnd: y } = ut(), { getParentExportDeclaration: h2 } = Ke();
        function g(w, E, N) {
          let x = w.getValue();
          return l([u(a, w.map(N, "decorators")), F(x, E) ? n : a]);
        }
        function c(w, E, N) {
          return [u(n, w.map(N, "declaration", "decorators")), n];
        }
        function f(w, E, N) {
          let x = w.getValue(), { decorators: I } = x;
          if (!t(I) || _(w.getParentNode()))
            return;
          let P = x.type === "ClassExpression" || x.type === "ClassDeclaration" || F(x, E);
          return [h2(w) ? n : P ? i2 : "", u(a, w.map(N, "decorators")), a];
        }
        function F(w, E) {
          return w.decorators.some((N) => s(E.originalText, y(N)));
        }
        function _(w) {
          if (w.type !== "ExportDefaultDeclaration" && w.type !== "ExportNamedDeclaration" && w.type !== "DeclareExportDeclaration")
            return false;
          let E = w.declaration && w.declaration.decorators;
          return t(E) && p2(w) === p2(E[0]);
        }
        r.exports = { printDecorators: f, printClassMemberDecorators: g, printDecoratorsBeforeExport: c, hasDecoratorsBeforeExport: _ };
      } }), nr = te({ "src/language-js/print/class.js"(e, r) {
        ne();
        var { isNonEmptyArray: t, createGroupIdMapper: s } = Ue(), { printComments: a, printDanglingComments: n } = et(), { builders: { join: u, line: i2, hardline: l, softline: p2, group: y, indent: h2, ifBreak: g } } = qe(), { hasComment: c, CommentCheckFlags: f } = Ke(), { getTypeParametersGroupId: F } = jr(), { printMethod: _ } = qr(), { printOptionalToken: w, printTypeAnnotation: E, printDefiniteToken: N } = ct(), { printPropertyKey: x } = rr(), { printAssignment: I } = tr(), { printClassMemberDecorators: P } = nu();
        function $(b, B, k) {
          let M = b.getValue(), R = [];
          M.declare && R.push("declare "), M.abstract && R.push("abstract "), R.push("class");
          let q = M.id && c(M.id, f.Trailing) || M.typeParameters && c(M.typeParameters, f.Trailing) || M.superClass && c(M.superClass) || t(M.extends) || t(M.mixins) || t(M.implements), J = [], L = [];
          if (M.id && J.push(" ", k("id")), J.push(k("typeParameters")), M.superClass) {
            let Q = [d(b, B, k), k("superTypeParameters")], V = b.call((j) => ["extends ", a(j, Q, B)], "superClass");
            q ? L.push(i2, y(V)) : L.push(" ", V);
          } else
            L.push(o(b, B, k, "extends"));
          if (L.push(o(b, B, k, "mixins"), o(b, B, k, "implements")), q) {
            let Q;
            C(M) ? Q = [...J, h2(L)] : Q = h2([...J, L]), R.push(y(Q, { id: D(M) }));
          } else
            R.push(...J, ...L);
          return R.push(" ", k("body")), R;
        }
        var D = s("heritageGroup");
        function T(b) {
          return g(l, "", { groupId: D(b) });
        }
        function m(b) {
          return ["superClass", "extends", "mixins", "implements"].filter((B) => Boolean(b[B])).length > 1;
        }
        function C(b) {
          return b.typeParameters && !c(b.typeParameters, f.Trailing | f.Line) && !m(b);
        }
        function o(b, B, k, M) {
          let R = b.getValue();
          if (!t(R[M]))
            return "";
          let q = n(b, B, true, (J) => {
            let { marker: L } = J;
            return L === M;
          });
          return [C(R) ? g(" ", i2, { groupId: F(R.typeParameters) }) : i2, q, q && l, M, y(h2([i2, u([",", i2], b.map(k, M))]))];
        }
        function d(b, B, k) {
          let M = k("superClass");
          return b.getParentNode().type === "AssignmentExpression" ? y(g(["(", h2([p2, M]), p2, ")"], M)) : M;
        }
        function v(b, B, k) {
          let M = b.getValue(), R = [];
          return t(M.decorators) && R.push(P(b, B, k)), M.accessibility && R.push(M.accessibility + " "), M.readonly && R.push("readonly "), M.declare && R.push("declare "), M.static && R.push("static "), (M.type === "TSAbstractMethodDefinition" || M.abstract) && R.push("abstract "), M.override && R.push("override "), R.push(_(b, B, k)), R;
        }
        function S(b, B, k) {
          let M = b.getValue(), R = [], q = B.semi ? ";" : "";
          return t(M.decorators) && R.push(P(b, B, k)), M.accessibility && R.push(M.accessibility + " "), M.declare && R.push("declare "), M.static && R.push("static "), (M.type === "TSAbstractPropertyDefinition" || M.type === "TSAbstractAccessorProperty" || M.abstract) && R.push("abstract "), M.override && R.push("override "), M.readonly && R.push("readonly "), M.variance && R.push(k("variance")), (M.type === "ClassAccessorProperty" || M.type === "AccessorProperty" || M.type === "TSAbstractAccessorProperty") && R.push("accessor "), R.push(x(b, B, k), w(b), N(b), E(b, B, k)), [I(b, B, k, R, " =", "value"), q];
        }
        r.exports = { printClass: $, printClassMethod: v, printClassProperty: S, printHardlineAfterHeritage: T };
      } }), bo = te({ "src/language-js/print/interface.js"(e, r) {
        ne();
        var { isNonEmptyArray: t } = Ue(), { builders: { join: s, line: a, group: n, indent: u, ifBreak: i2 } } = qe(), { hasComment: l, identity: p2, CommentCheckFlags: y } = Ke(), { getTypeParametersGroupId: h2 } = jr(), { printTypeScriptModifiers: g } = ct();
        function c(f, F, _) {
          let w = f.getValue(), E = [];
          w.declare && E.push("declare "), w.type === "TSInterfaceDeclaration" && E.push(w.abstract ? "abstract " : "", g(f, F, _)), E.push("interface");
          let N = [], x = [];
          w.type !== "InterfaceTypeAnnotation" && N.push(" ", _("id"), _("typeParameters"));
          let I = w.typeParameters && !l(w.typeParameters, y.Trailing | y.Line);
          return t(w.extends) && x.push(I ? i2(" ", a, { groupId: h2(w.typeParameters) }) : a, "extends ", (w.extends.length === 1 ? p2 : u)(s([",", a], f.map(_, "extends")))), w.id && l(w.id, y.Trailing) || t(w.extends) ? I ? E.push(n([...N, u(x)])) : E.push(n(u([...N, ...x]))) : E.push(...N, ...x), E.push(" ", _("body")), n(E);
        }
        r.exports = { printInterface: c };
      } }), To = te({ "src/language-js/print/module.js"(e, r) {
        ne();
        var { isNonEmptyArray: t } = Ue(), { builders: { softline: s, group: a, indent: n, join: u, line: i2, ifBreak: l, hardline: p2 } } = qe(), { printDanglingComments: y } = et(), { hasComment: h2, CommentCheckFlags: g, shouldPrintComma: c, needsHardlineAfterDanglingComment: f, isStringLiteral: F, rawText: _ } = Ke(), { locStart: w, hasSameLoc: E } = ut(), { hasDecoratorsBeforeExport: N, printDecoratorsBeforeExport: x } = nu();
        function I(S, b, B) {
          let k = S.getValue(), M = b.semi ? ";" : "", R = [], { importKind: q } = k;
          return R.push("import"), q && q !== "value" && R.push(" ", q), R.push(m(S, b, B), T(S, b, B), o(S, b, B), M), R;
        }
        function P(S, b, B) {
          let k = S.getValue(), M = [];
          N(k) && M.push(x(S, b, B));
          let { type: R, exportKind: q, declaration: J } = k;
          return M.push("export"), (k.default || R === "ExportDefaultDeclaration") && M.push(" default"), h2(k, g.Dangling) && (M.push(" ", y(S, b, true)), f(k) && M.push(p2)), J ? M.push(" ", B("declaration")) : M.push(q === "type" ? " type" : "", m(S, b, B), T(S, b, B), o(S, b, B)), D(k, b) && M.push(";"), M;
        }
        function $(S, b, B) {
          let k = S.getValue(), M = b.semi ? ";" : "", R = [], { exportKind: q, exported: J } = k;
          return R.push("export"), q === "type" && R.push(" type"), R.push(" *"), J && R.push(" as ", B("exported")), R.push(T(S, b, B), o(S, b, B), M), R;
        }
        function D(S, b) {
          if (!b.semi)
            return false;
          let { type: B, declaration: k } = S, M = S.default || B === "ExportDefaultDeclaration";
          if (!k)
            return true;
          let { type: R } = k;
          return !!(M && R !== "ClassDeclaration" && R !== "FunctionDeclaration" && R !== "TSInterfaceDeclaration" && R !== "DeclareClass" && R !== "DeclareFunction" && R !== "TSDeclareFunction" && R !== "EnumDeclaration");
        }
        function T(S, b, B) {
          let k = S.getValue();
          if (!k.source)
            return "";
          let M = [];
          return C(k, b) || M.push(" from"), M.push(" ", B("source")), M;
        }
        function m(S, b, B) {
          let k = S.getValue();
          if (C(k, b))
            return "";
          let M = [" "];
          if (t(k.specifiers)) {
            let R = [], q = [];
            S.each(() => {
              let J = S.getValue().type;
              if (J === "ExportNamespaceSpecifier" || J === "ExportDefaultSpecifier" || J === "ImportNamespaceSpecifier" || J === "ImportDefaultSpecifier")
                R.push(B());
              else if (J === "ExportSpecifier" || J === "ImportSpecifier")
                q.push(B());
              else
                throw new Error(`Unknown specifier type ${JSON.stringify(J)}`);
            }, "specifiers"), M.push(u(", ", R)), q.length > 0 && (R.length > 0 && M.push(", "), q.length > 1 || R.length > 0 || k.specifiers.some((L) => h2(L)) ? M.push(a(["{", n([b.bracketSpacing ? i2 : s, u([",", i2], q)]), l(c(b) ? "," : ""), b.bracketSpacing ? i2 : s, "}"])) : M.push(["{", b.bracketSpacing ? " " : "", ...q, b.bracketSpacing ? " " : "", "}"]));
          } else
            M.push("{}");
          return M;
        }
        function C(S, b) {
          let { type: B, importKind: k, source: M, specifiers: R } = S;
          return B !== "ImportDeclaration" || t(R) || k === "type" ? false : !/{\s*}/.test(b.originalText.slice(w(S), w(M)));
        }
        function o(S, b, B) {
          let k = S.getNode();
          return t(k.assertions) ? [" assert {", b.bracketSpacing ? " " : "", u(", ", S.map(B, "assertions")), b.bracketSpacing ? " " : "", "}"] : "";
        }
        function d(S, b, B) {
          let k = S.getNode(), { type: M } = k, R = [], q = M === "ImportSpecifier" ? k.importKind : k.exportKind;
          q && q !== "value" && R.push(q, " ");
          let J = M.startsWith("Import"), L = J ? "imported" : "local", Q = J ? "local" : "exported", V = k[L], j = k[Q], Y = "", ie = "";
          return M === "ExportNamespaceSpecifier" || M === "ImportNamespaceSpecifier" ? Y = "*" : V && (Y = B(L)), j && !v(k) && (ie = B(Q)), R.push(Y, Y && ie ? " as " : "", ie), R;
        }
        function v(S) {
          if (S.type !== "ImportSpecifier" && S.type !== "ExportSpecifier")
            return false;
          let { local: b, [S.type === "ImportSpecifier" ? "imported" : "exported"]: B } = S;
          if (b.type !== B.type || !E(b, B))
            return false;
          if (F(b))
            return b.value === B.value && _(b) === _(B);
          switch (b.type) {
            case "Identifier":
              return b.name === B.name;
            default:
              return false;
          }
        }
        r.exports = { printImportDeclaration: I, printExportDeclaration: P, printExportAllDeclaration: $, printModuleSpecifier: d };
      } }), uu = te({ "src/language-js/print/object.js"(e, r) {
        ne();
        var { printDanglingComments: t } = et(), { builders: { line: s, softline: a, group: n, indent: u, ifBreak: i2, hardline: l } } = qe(), { getLast: p2, hasNewlineInRange: y, hasNewline: h2, isNonEmptyArray: g } = Ue(), { shouldPrintComma: c, hasComment: f, getComments: F, CommentCheckFlags: _, isNextLineEmpty: w } = Ke(), { locStart: E, locEnd: N } = ut(), { printOptionalToken: x, printTypeAnnotation: I } = ct(), { shouldHugFunctionParameters: P } = Lr(), { shouldHugType: $ } = Or(), { printHardlineAfterHeritage: D } = nr();
        function T(m, C, o) {
          let d = C.semi ? ";" : "", v = m.getValue(), S;
          v.type === "TSTypeLiteral" ? S = "members" : v.type === "TSInterfaceBody" ? S = "body" : S = "properties";
          let b = v.type === "ObjectTypeAnnotation", B = [S];
          b && B.push("indexers", "callProperties", "internalSlots");
          let k = B.map((W) => v[W][0]).sort((W, K) => E(W) - E(K))[0], M = m.getParentNode(0), R = b && M && (M.type === "InterfaceDeclaration" || M.type === "DeclareInterface" || M.type === "DeclareClass") && m.getName() === "body", q = v.type === "TSInterfaceBody" || R || v.type === "ObjectPattern" && M.type !== "FunctionDeclaration" && M.type !== "FunctionExpression" && M.type !== "ArrowFunctionExpression" && M.type !== "ObjectMethod" && M.type !== "ClassMethod" && M.type !== "ClassPrivateMethod" && M.type !== "AssignmentPattern" && M.type !== "CatchClause" && v.properties.some((W) => W.value && (W.value.type === "ObjectPattern" || W.value.type === "ArrayPattern")) || v.type !== "ObjectPattern" && k && y(C.originalText, E(v), E(k)), J = R ? ";" : v.type === "TSInterfaceBody" || v.type === "TSTypeLiteral" ? i2(d, ";") : ",", L = v.type === "RecordExpression" ? "#{" : v.exact ? "{|" : "{", Q = v.exact ? "|}" : "}", V = [];
          for (let W of B)
            m.each((K) => {
              let de = K.getValue();
              V.push({ node: de, printed: o(), loc: E(de) });
            }, W);
          B.length > 1 && V.sort((W, K) => W.loc - K.loc);
          let j = [], Y = V.map((W) => {
            let K = [...j, n(W.printed)];
            return j = [J, s], (W.node.type === "TSPropertySignature" || W.node.type === "TSMethodSignature" || W.node.type === "TSConstructSignatureDeclaration") && f(W.node, _.PrettierIgnore) && j.shift(), w(W.node, C) && j.push(l), K;
          });
          if (v.inexact) {
            let W;
            if (f(v, _.Dangling)) {
              let K = f(v, _.Line);
              W = [t(m, C, true), K || h2(C.originalText, N(p2(F(v)))) ? l : s, "..."];
            } else
              W = ["..."];
            Y.push([...j, ...W]);
          }
          let ie = p2(v[S]), ee = !(v.inexact || ie && ie.type === "RestElement" || ie && (ie.type === "TSPropertySignature" || ie.type === "TSCallSignatureDeclaration" || ie.type === "TSMethodSignature" || ie.type === "TSConstructSignatureDeclaration") && f(ie, _.PrettierIgnore)), ce;
          if (Y.length === 0) {
            if (!f(v, _.Dangling))
              return [L, Q, I(m, C, o)];
            ce = n([L, t(m, C), a, Q, x(m), I(m, C, o)]);
          } else
            ce = [R && g(v.properties) ? D(M) : "", L, u([C.bracketSpacing ? s : a, ...Y]), i2(ee && (J !== "," || c(C)) ? J : ""), C.bracketSpacing ? s : a, Q, x(m), I(m, C, o)];
          return m.match((W) => W.type === "ObjectPattern" && !W.decorators, (W, K, de) => P(W) && (K === "params" || K === "parameters" || K === "this" || K === "rest") && de === 0) || m.match($, (W, K) => K === "typeAnnotation", (W, K) => K === "typeAnnotation", (W, K, de) => P(W) && (K === "params" || K === "parameters" || K === "this" || K === "rest") && de === 0) || !q && m.match((W) => W.type === "ObjectPattern", (W) => W.type === "AssignmentExpression" || W.type === "VariableDeclarator") ? ce : n(ce, { shouldBreak: q });
        }
        r.exports = { printObject: T };
      } }), dd = te({ "src/language-js/print/flow.js"(e, r) {
        ne();
        var t = Zt(), { printDanglingComments: s } = et(), { printString: a, printNumber: n } = Ue(), { builders: { hardline: u, softline: i2, group: l, indent: p2 } } = qe(), { getParentExportDeclaration: y, isFunctionNotation: h2, isGetterOrSetter: g, rawText: c, shouldPrintComma: f } = Ke(), { locStart: F, locEnd: _ } = ut(), { replaceTextEndOfLine: w } = Yt(), { printClass: E } = nr(), { printOpaqueType: N, printTypeAlias: x, printIntersectionType: I, printUnionType: P, printFunctionType: $, printTupleType: D, printIndexedAccessType: T } = Or(), { printInterface: m } = bo(), { printTypeParameter: C, printTypeParameters: o } = jr(), { printExportDeclaration: d, printExportAllDeclaration: v } = To(), { printArrayItems: S } = er(), { printObject: b } = uu(), { printPropertyKey: B } = rr(), { printOptionalToken: k, printTypeAnnotation: M, printRestSpread: R } = ct();
        function q(L, Q, V) {
          let j = L.getValue(), Y = Q.semi ? ";" : "", ie = [];
          switch (j.type) {
            case "DeclareClass":
              return J(L, E(L, Q, V));
            case "DeclareFunction":
              return J(L, ["function ", V("id"), j.predicate ? " " : "", V("predicate"), Y]);
            case "DeclareModule":
              return J(L, ["module ", V("id"), " ", V("body")]);
            case "DeclareModuleExports":
              return J(L, ["module.exports", ": ", V("typeAnnotation"), Y]);
            case "DeclareVariable":
              return J(L, ["var ", V("id"), Y]);
            case "DeclareOpaqueType":
              return J(L, N(L, Q, V));
            case "DeclareInterface":
              return J(L, m(L, Q, V));
            case "DeclareTypeAlias":
              return J(L, x(L, Q, V));
            case "DeclareExportDeclaration":
              return J(L, d(L, Q, V));
            case "DeclareExportAllDeclaration":
              return J(L, v(L, Q, V));
            case "OpaqueType":
              return N(L, Q, V);
            case "TypeAlias":
              return x(L, Q, V);
            case "IntersectionTypeAnnotation":
              return I(L, Q, V);
            case "UnionTypeAnnotation":
              return P(L, Q, V);
            case "FunctionTypeAnnotation":
              return $(L, Q, V);
            case "TupleTypeAnnotation":
              return D(L, Q, V);
            case "GenericTypeAnnotation":
              return [V("id"), o(L, Q, V, "typeParameters")];
            case "IndexedAccessType":
            case "OptionalIndexedAccessType":
              return T(L, Q, V);
            case "TypeAnnotation":
              return V("typeAnnotation");
            case "TypeParameter":
              return C(L, Q, V);
            case "TypeofTypeAnnotation":
              return ["typeof ", V("argument")];
            case "ExistsTypeAnnotation":
              return "*";
            case "EmptyTypeAnnotation":
              return "empty";
            case "MixedTypeAnnotation":
              return "mixed";
            case "ArrayTypeAnnotation":
              return [V("elementType"), "[]"];
            case "BooleanLiteralTypeAnnotation":
              return String(j.value);
            case "EnumDeclaration":
              return ["enum ", V("id"), " ", V("body")];
            case "EnumBooleanBody":
            case "EnumNumberBody":
            case "EnumStringBody":
            case "EnumSymbolBody": {
              if (j.type === "EnumSymbolBody" || j.explicitType) {
                let ee = null;
                switch (j.type) {
                  case "EnumBooleanBody":
                    ee = "boolean";
                    break;
                  case "EnumNumberBody":
                    ee = "number";
                    break;
                  case "EnumStringBody":
                    ee = "string";
                    break;
                  case "EnumSymbolBody":
                    ee = "symbol";
                    break;
                }
                ie.push("of ", ee, " ");
              }
              if (j.members.length === 0 && !j.hasUnknownMembers)
                ie.push(l(["{", s(L, Q), i2, "}"]));
              else {
                let ee = j.members.length > 0 ? [u, S(L, Q, "members", V), j.hasUnknownMembers || f(Q) ? "," : ""] : [];
                ie.push(l(["{", p2([...ee, ...j.hasUnknownMembers ? [u, "..."] : []]), s(L, Q, true), u, "}"]));
              }
              return ie;
            }
            case "EnumBooleanMember":
            case "EnumNumberMember":
            case "EnumStringMember":
              return [V("id"), " = ", typeof j.init == "object" ? V("init") : String(j.init)];
            case "EnumDefaultedMember":
              return V("id");
            case "FunctionTypeParam": {
              let ee = j.name ? V("name") : L.getParentNode().this === j ? "this" : "";
              return [ee, k(L), ee ? ": " : "", V("typeAnnotation")];
            }
            case "InterfaceDeclaration":
            case "InterfaceTypeAnnotation":
              return m(L, Q, V);
            case "ClassImplements":
            case "InterfaceExtends":
              return [V("id"), V("typeParameters")];
            case "NullableTypeAnnotation":
              return ["?", V("typeAnnotation")];
            case "Variance": {
              let { kind: ee } = j;
              return t.ok(ee === "plus" || ee === "minus"), ee === "plus" ? "+" : "-";
            }
            case "ObjectTypeCallProperty":
              return j.static && ie.push("static "), ie.push(V("value")), ie;
            case "ObjectTypeIndexer":
              return [j.static ? "static " : "", j.variance ? V("variance") : "", "[", V("id"), j.id ? ": " : "", V("key"), "]: ", V("value")];
            case "ObjectTypeProperty": {
              let ee = "";
              return j.proto ? ee = "proto " : j.static && (ee = "static "), [ee, g(j) ? j.kind + " " : "", j.variance ? V("variance") : "", B(L, Q, V), k(L), h2(j) ? "" : ": ", V("value")];
            }
            case "ObjectTypeAnnotation":
              return b(L, Q, V);
            case "ObjectTypeInternalSlot":
              return [j.static ? "static " : "", "[[", V("id"), "]]", k(L), j.method ? "" : ": ", V("value")];
            case "ObjectTypeSpreadProperty":
              return R(L, Q, V);
            case "QualifiedTypeofIdentifier":
            case "QualifiedTypeIdentifier":
              return [V("qualification"), ".", V("id")];
            case "StringLiteralTypeAnnotation":
              return w(a(c(j), Q));
            case "NumberLiteralTypeAnnotation":
              t.strictEqual(typeof j.value, "number");
            case "BigIntLiteralTypeAnnotation":
              return j.extra ? n(j.extra.raw) : n(j.raw);
            case "TypeCastExpression":
              return ["(", V("expression"), M(L, Q, V), ")"];
            case "TypeParameterDeclaration":
            case "TypeParameterInstantiation": {
              let ee = o(L, Q, V, "params");
              if (Q.parser === "flow") {
                let ce = F(j), W = _(j), K = Q.originalText.lastIndexOf("/*", ce), de = Q.originalText.indexOf("*/", W);
                if (K !== -1 && de !== -1) {
                  let ue = Q.originalText.slice(K + 2, de).trim();
                  if (ue.startsWith("::") && !ue.includes("/*") && !ue.includes("*/"))
                    return ["/*:: ", ee, " */"];
                }
              }
              return ee;
            }
            case "InferredPredicate":
              return "%checks";
            case "DeclaredPredicate":
              return ["%checks(", V("value"), ")"];
            case "AnyTypeAnnotation":
              return "any";
            case "BooleanTypeAnnotation":
              return "boolean";
            case "BigIntTypeAnnotation":
              return "bigint";
            case "NullLiteralTypeAnnotation":
              return "null";
            case "NumberTypeAnnotation":
              return "number";
            case "SymbolTypeAnnotation":
              return "symbol";
            case "StringTypeAnnotation":
              return "string";
            case "VoidTypeAnnotation":
              return "void";
            case "ThisTypeAnnotation":
              return "this";
            case "Node":
            case "Printable":
            case "SourceLocation":
            case "Position":
            case "Statement":
            case "Function":
            case "Pattern":
            case "Expression":
            case "Declaration":
            case "Specifier":
            case "NamedSpecifier":
            case "Comment":
            case "MemberTypeAnnotation":
            case "Type":
              throw new Error("unprintable type: " + JSON.stringify(j.type));
          }
        }
        function J(L, Q) {
          let V = y(L);
          return V ? (t.strictEqual(V.type, "DeclareExportDeclaration"), Q) : ["declare ", Q];
        }
        r.exports = { printFlow: q };
      } }), gd = te({ "src/language-js/utils/is-ts-keyword-type.js"(e, r) {
        ne();
        function t(s) {
          let { type: a } = s;
          return a.startsWith("TS") && a.endsWith("Keyword");
        }
        r.exports = t;
      } }), Bo = te({ "src/language-js/print/ternary.js"(e, r) {
        ne();
        var { hasNewlineInRange: t } = Ue(), { isJsxNode: s, getComments: a, isCallExpression: n, isMemberExpression: u, isTSTypeExpression: i2 } = Ke(), { locStart: l, locEnd: p2 } = ut(), y = Pt(), { builders: { line: h2, softline: g, group: c, indent: f, align: F, ifBreak: _, dedent: w, breakParent: E } } = qe();
        function N(D) {
          let T = [D];
          for (let m = 0; m < T.length; m++) {
            let C = T[m];
            for (let o of ["test", "consequent", "alternate"]) {
              let d = C[o];
              if (s(d))
                return true;
              d.type === "ConditionalExpression" && T.push(d);
            }
          }
          return false;
        }
        function x(D, T, m) {
          let C = D.getValue(), o = C.type === "ConditionalExpression", d = o ? "alternate" : "falseType", v = D.getParentNode(), S = o ? m("test") : [m("checkType"), " ", "extends", " ", m("extendsType")];
          return v.type === C.type && v[d] === C ? F(2, S) : S;
        }
        var I = /* @__PURE__ */ new Map([["AssignmentExpression", "right"], ["VariableDeclarator", "init"], ["ReturnStatement", "argument"], ["ThrowStatement", "argument"], ["UnaryExpression", "argument"], ["YieldExpression", "argument"]]);
        function P(D) {
          let T = D.getValue();
          if (T.type !== "ConditionalExpression")
            return false;
          let m, C = T;
          for (let o = 0; !m; o++) {
            let d = D.getParentNode(o);
            if (n(d) && d.callee === C || u(d) && d.object === C || d.type === "TSNonNullExpression" && d.expression === C) {
              C = d;
              continue;
            }
            d.type === "NewExpression" && d.callee === C || i2(d) && d.expression === C ? (m = D.getParentNode(o + 1), C = d) : m = d;
          }
          return C === T ? false : m[I.get(m.type)] === C;
        }
        function $(D, T, m) {
          let C = D.getValue(), o = C.type === "ConditionalExpression", d = o ? "consequent" : "trueType", v = o ? "alternate" : "falseType", S = o ? ["test"] : ["checkType", "extendsType"], b = C[d], B = C[v], k = [], M = false, R = D.getParentNode(), q = R.type === C.type && S.some((ue) => R[ue] === C), J = R.type === C.type && !q, L, Q, V = 0;
          do
            Q = L || C, L = D.getParentNode(V), V++;
          while (L && L.type === C.type && S.every((ue) => L[ue] !== Q));
          let j = L || R, Y = Q;
          if (o && (s(C[S[0]]) || s(b) || s(B) || N(Y))) {
            M = true, J = true;
            let ue = (z) => [_("("), f([g, z]), g, _(")")], Fe = (z) => z.type === "NullLiteral" || z.type === "Literal" && z.value === null || z.type === "Identifier" && z.name === "undefined";
            k.push(" ? ", Fe(b) ? m(d) : ue(m(d)), " : ", B.type === C.type || Fe(B) ? m(v) : ue(m(v)));
          } else {
            let ue = [h2, "? ", b.type === C.type ? _("", "(") : "", F(2, m(d)), b.type === C.type ? _("", ")") : "", h2, ": ", B.type === C.type ? m(v) : F(2, m(v))];
            k.push(R.type !== C.type || R[v] === C || q ? ue : T.useTabs ? w(f(ue)) : F(Math.max(0, T.tabWidth - 2), ue));
          }
          let ee = [...S.map((ue) => a(C[ue])), a(b), a(B)].flat().some((ue) => y(ue) && t(T.originalText, l(ue), p2(ue))), ce = (ue) => R === j ? c(ue, { shouldBreak: ee }) : ee ? [ue, E] : ue, W = !M && (u(R) || R.type === "NGPipeExpression" && R.left === C) && !R.computed, K = P(D), de = ce([x(D, T, m), J ? k : f(k), o && W && !K ? g : ""]);
          return q || K ? c([f([g, de]), g]) : de;
        }
        r.exports = { printTernary: $ };
      } }), No = te({ "src/language-js/print/statement.js"(e, r) {
        ne();
        var { builders: { hardline: t } } = qe(), s = qt(), { getLeftSidePathName: a, hasNakedLeftSide: n, isJsxNode: u, isTheOnlyJsxElementInMarkdown: i2, hasComment: l, CommentCheckFlags: p2, isNextLineEmpty: y } = Ke(), { shouldPrintParamsWithoutParens: h2 } = qr();
        function g(x, I, P, $) {
          let D = x.getValue(), T = [], m = D.type === "ClassBody", C = c(D[$]);
          return x.each((o, d, v) => {
            let S = o.getValue();
            if (S.type === "EmptyStatement")
              return;
            let b = P();
            !I.semi && !m && !i2(I, o) && f(o, I) ? l(S, p2.Leading) ? T.push(P([], { needsSemi: true })) : T.push(";", b) : T.push(b), !I.semi && m && E(S) && N(S, v[d + 1]) && T.push(";"), S !== C && (T.push(t), y(S, I) && T.push(t));
          }, $), T;
        }
        function c(x) {
          for (let I = x.length - 1; I >= 0; I--) {
            let P = x[I];
            if (P.type !== "EmptyStatement")
              return P;
          }
        }
        function f(x, I) {
          return x.getNode().type !== "ExpressionStatement" ? false : x.call(($) => F($, I), "expression");
        }
        function F(x, I) {
          let P = x.getValue();
          switch (P.type) {
            case "ParenthesizedExpression":
            case "TypeCastExpression":
            case "ArrayExpression":
            case "ArrayPattern":
            case "TemplateLiteral":
            case "TemplateElement":
            case "RegExpLiteral":
              return true;
            case "ArrowFunctionExpression": {
              if (!h2(x, I))
                return true;
              break;
            }
            case "UnaryExpression": {
              let { prefix: $, operator: D } = P;
              if ($ && (D === "+" || D === "-"))
                return true;
              break;
            }
            case "BindExpression": {
              if (!P.object)
                return true;
              break;
            }
            case "Literal": {
              if (P.regex)
                return true;
              break;
            }
            default:
              if (u(P))
                return true;
          }
          return s(x, I) ? true : n(P) ? x.call(($) => F($, I), ...a(x, P)) : false;
        }
        function _(x, I, P) {
          return g(x, I, P, "body");
        }
        function w(x, I, P) {
          return g(x, I, P, "consequent");
        }
        var E = (x) => {
          let { type: I } = x;
          return I === "ClassProperty" || I === "PropertyDefinition" || I === "ClassPrivateProperty" || I === "ClassAccessorProperty" || I === "AccessorProperty" || I === "TSAbstractPropertyDefinition" || I === "TSAbstractAccessorProperty";
        };
        function N(x, I) {
          let { type: P, name: $ } = x.key;
          if (!x.computed && P === "Identifier" && ($ === "static" || $ === "get" || $ === "set" || $ === "accessor") && !x.value && !x.typeAnnotation)
            return true;
          if (!I || I.static || I.accessibility)
            return false;
          if (!I.computed) {
            let D = I.key && I.key.name;
            if (D === "in" || D === "instanceof")
              return true;
          }
          if (E(I) && I.variance && !I.static && !I.declare)
            return true;
          switch (I.type) {
            case "ClassProperty":
            case "PropertyDefinition":
            case "TSAbstractPropertyDefinition":
              return I.computed;
            case "MethodDefinition":
            case "TSAbstractMethodDefinition":
            case "ClassMethod":
            case "ClassPrivateMethod": {
              if ((I.value ? I.value.async : I.async) || I.kind === "get" || I.kind === "set")
                return false;
              let T = I.value ? I.value.generator : I.generator;
              return !!(I.computed || T);
            }
            case "TSIndexSignature":
              return true;
          }
          return false;
        }
        r.exports = { printBody: _, printSwitchCaseConsequent: w };
      } }), wo = te({ "src/language-js/print/block.js"(e, r) {
        ne();
        var { printDanglingComments: t } = et(), { isNonEmptyArray: s } = Ue(), { builders: { hardline: a, indent: n } } = qe(), { hasComment: u, CommentCheckFlags: i2, isNextLineEmpty: l } = Ke(), { printHardlineAfterHeritage: p2 } = nr(), { printBody: y } = No();
        function h2(c, f, F) {
          let _ = c.getValue(), w = [];
          if (_.type === "StaticBlock" && w.push("static "), _.type === "ClassBody" && s(_.body)) {
            let N = c.getParentNode();
            w.push(p2(N));
          }
          w.push("{");
          let E = g(c, f, F);
          if (E)
            w.push(n([a, E]), a);
          else {
            let N = c.getParentNode(), x = c.getParentNode(1);
            N.type === "ArrowFunctionExpression" || N.type === "FunctionExpression" || N.type === "FunctionDeclaration" || N.type === "ObjectMethod" || N.type === "ClassMethod" || N.type === "ClassPrivateMethod" || N.type === "ForStatement" || N.type === "WhileStatement" || N.type === "DoWhileStatement" || N.type === "DoExpression" || N.type === "CatchClause" && !x.finalizer || N.type === "TSModuleDeclaration" || N.type === "TSDeclareFunction" || _.type === "StaticBlock" || _.type === "ClassBody" || w.push(a);
          }
          return w.push("}"), w;
        }
        function g(c, f, F) {
          let _ = c.getValue(), w = s(_.directives), E = _.body.some((I) => I.type !== "EmptyStatement"), N = u(_, i2.Dangling);
          if (!w && !E && !N)
            return "";
          let x = [];
          if (w && c.each((I, P, $) => {
            x.push(F()), (P < $.length - 1 || E || N) && (x.push(a), l(I.getValue(), f) && x.push(a));
          }, "directives"), E && x.push(y(c, f, F)), N && x.push(t(c, f, true)), _.type === "Program") {
            let I = c.getParentNode();
            (!I || I.type !== "ModuleExpression") && x.push(a);
          }
          return x;
        }
        r.exports = { printBlock: h2, printBlockBody: g };
      } }), yd = te({ "src/language-js/print/typescript.js"(e, r) {
        ne();
        var { printDanglingComments: t } = et(), { hasNewlineInRange: s } = Ue(), { builders: { join: a, line: n, hardline: u, softline: i2, group: l, indent: p2, conditionalGroup: y, ifBreak: h2 } } = qe(), { isStringLiteral: g, getTypeScriptMappedTypeModifier: c, shouldPrintComma: f, isCallExpression: F, isMemberExpression: _ } = Ke(), w = gd(), { locStart: E, locEnd: N } = ut(), { printOptionalToken: x, printTypeScriptModifiers: I } = ct(), { printTernary: P } = Bo(), { printFunctionParameters: $, shouldGroupFunctionParameters: D } = Lr(), { printTemplateLiteral: T } = jt(), { printArrayItems: m } = er(), { printObject: C } = uu(), { printClassProperty: o, printClassMethod: d } = nr(), { printTypeParameter: v, printTypeParameters: S } = jr(), { printPropertyKey: b } = rr(), { printFunction: B, printMethodInternal: k } = qr(), { printInterface: M } = bo(), { printBlock: R } = wo(), { printTypeAlias: q, printIntersectionType: J, printUnionType: L, printFunctionType: Q, printTupleType: V, printIndexedAccessType: j, printJSDocType: Y } = Or();
        function ie(ee, ce, W) {
          let K = ee.getValue();
          if (!K.type.startsWith("TS"))
            return;
          if (w(K))
            return K.type.slice(2, -7).toLowerCase();
          let de = ce.semi ? ";" : "", ue = [];
          switch (K.type) {
            case "TSThisType":
              return "this";
            case "TSTypeAssertion": {
              let Fe = !(K.expression.type === "ArrayExpression" || K.expression.type === "ObjectExpression"), z = l(["<", p2([i2, W("typeAnnotation")]), i2, ">"]), U = [h2("("), p2([i2, W("expression")]), i2, h2(")")];
              return Fe ? y([[z, W("expression")], [z, l(U, { shouldBreak: true })], [z, W("expression")]]) : l([z, W("expression")]);
            }
            case "TSDeclareFunction":
              return B(ee, W, ce);
            case "TSExportAssignment":
              return ["export = ", W("expression"), de];
            case "TSModuleBlock":
              return R(ee, ce, W);
            case "TSInterfaceBody":
            case "TSTypeLiteral":
              return C(ee, ce, W);
            case "TSTypeAliasDeclaration":
              return q(ee, ce, W);
            case "TSQualifiedName":
              return a(".", [W("left"), W("right")]);
            case "TSAbstractMethodDefinition":
            case "TSDeclareMethod":
              return d(ee, ce, W);
            case "TSAbstractAccessorProperty":
            case "TSAbstractPropertyDefinition":
              return o(ee, ce, W);
            case "TSInterfaceHeritage":
            case "TSExpressionWithTypeArguments":
              return ue.push(W("expression")), K.typeParameters && ue.push(W("typeParameters")), ue;
            case "TSTemplateLiteralType":
              return T(ee, W, ce);
            case "TSNamedTupleMember":
              return [W("label"), K.optional ? "?" : "", ": ", W("elementType")];
            case "TSRestType":
              return ["...", W("typeAnnotation")];
            case "TSOptionalType":
              return [W("typeAnnotation"), "?"];
            case "TSInterfaceDeclaration":
              return M(ee, ce, W);
            case "TSClassImplements":
              return [W("expression"), W("typeParameters")];
            case "TSTypeParameterDeclaration":
            case "TSTypeParameterInstantiation":
              return S(ee, ce, W, "params");
            case "TSTypeParameter":
              return v(ee, ce, W);
            case "TSSatisfiesExpression":
            case "TSAsExpression": {
              let Fe = K.type === "TSAsExpression" ? "as" : "satisfies";
              ue.push(W("expression"), ` ${Fe} `, W("typeAnnotation"));
              let z = ee.getParentNode();
              return F(z) && z.callee === K || _(z) && z.object === K ? l([p2([i2, ...ue]), i2]) : ue;
            }
            case "TSArrayType":
              return [W("elementType"), "[]"];
            case "TSPropertySignature":
              return K.readonly && ue.push("readonly "), ue.push(b(ee, ce, W), x(ee)), K.typeAnnotation && ue.push(": ", W("typeAnnotation")), K.initializer && ue.push(" = ", W("initializer")), ue;
            case "TSParameterProperty":
              return K.accessibility && ue.push(K.accessibility + " "), K.export && ue.push("export "), K.static && ue.push("static "), K.override && ue.push("override "), K.readonly && ue.push("readonly "), ue.push(W("parameter")), ue;
            case "TSTypeQuery":
              return ["typeof ", W("exprName"), W("typeParameters")];
            case "TSIndexSignature": {
              let Fe = ee.getParentNode(), z = K.parameters.length > 1 ? h2(f(ce) ? "," : "") : "", U = l([p2([i2, a([", ", i2], ee.map(W, "parameters"))]), z, i2]);
              return [K.export ? "export " : "", K.accessibility ? [K.accessibility, " "] : "", K.static ? "static " : "", K.readonly ? "readonly " : "", K.declare ? "declare " : "", "[", K.parameters ? U : "", K.typeAnnotation ? "]: " : "]", K.typeAnnotation ? W("typeAnnotation") : "", Fe.type === "ClassBody" ? de : ""];
            }
            case "TSTypePredicate":
              return [K.asserts ? "asserts " : "", W("parameterName"), K.typeAnnotation ? [" is ", W("typeAnnotation")] : ""];
            case "TSNonNullExpression":
              return [W("expression"), "!"];
            case "TSImportType":
              return [K.isTypeOf ? "typeof " : "", "import(", W(K.parameter ? "parameter" : "argument"), ")", K.qualifier ? [".", W("qualifier")] : "", S(ee, ce, W, "typeParameters")];
            case "TSLiteralType":
              return W("literal");
            case "TSIndexedAccessType":
              return j(ee, ce, W);
            case "TSConstructSignatureDeclaration":
            case "TSCallSignatureDeclaration":
            case "TSConstructorType": {
              if (K.type === "TSConstructorType" && K.abstract && ue.push("abstract "), K.type !== "TSCallSignatureDeclaration" && ue.push("new "), ue.push(l($(ee, W, ce, false, true))), K.returnType || K.typeAnnotation) {
                let Fe = K.type === "TSConstructorType";
                ue.push(Fe ? " => " : ": ", W("returnType"), W("typeAnnotation"));
              }
              return ue;
            }
            case "TSTypeOperator":
              return [K.operator, " ", W("typeAnnotation")];
            case "TSMappedType": {
              let Fe = s(ce.originalText, E(K), N(K));
              return l(["{", p2([ce.bracketSpacing ? n : i2, W("typeParameter"), K.optional ? c(K.optional, "?") : "", K.typeAnnotation ? ": " : "", W("typeAnnotation"), h2(de)]), t(ee, ce, true), ce.bracketSpacing ? n : i2, "}"], { shouldBreak: Fe });
            }
            case "TSMethodSignature": {
              let Fe = K.kind && K.kind !== "method" ? `${K.kind} ` : "";
              ue.push(K.accessibility ? [K.accessibility, " "] : "", Fe, K.export ? "export " : "", K.static ? "static " : "", K.readonly ? "readonly " : "", K.abstract ? "abstract " : "", K.declare ? "declare " : "", K.computed ? "[" : "", W("key"), K.computed ? "]" : "", x(ee));
              let z = $(ee, W, ce, false, true), U = K.returnType ? "returnType" : "typeAnnotation", Z = K[U], se = Z ? W(U) : "", fe = D(K, se);
              return ue.push(fe ? l(z) : z), Z && ue.push(": ", l(se)), l(ue);
            }
            case "TSNamespaceExportDeclaration":
              return ue.push("export as namespace ", W("id")), ce.semi && ue.push(";"), l(ue);
            case "TSEnumDeclaration":
              return K.declare && ue.push("declare "), K.modifiers && ue.push(I(ee, ce, W)), K.const && ue.push("const "), ue.push("enum ", W("id"), " "), K.members.length === 0 ? ue.push(l(["{", t(ee, ce), i2, "}"])) : ue.push(l(["{", p2([u, m(ee, ce, "members", W), f(ce, "es5") ? "," : ""]), t(ee, ce, true), u, "}"])), ue;
            case "TSEnumMember":
              return K.computed ? ue.push("[", W("id"), "]") : ue.push(W("id")), K.initializer && ue.push(" = ", W("initializer")), ue;
            case "TSImportEqualsDeclaration":
              return K.isExport && ue.push("export "), ue.push("import "), K.importKind && K.importKind !== "value" && ue.push(K.importKind, " "), ue.push(W("id"), " = ", W("moduleReference")), ce.semi && ue.push(";"), l(ue);
            case "TSExternalModuleReference":
              return ["require(", W("expression"), ")"];
            case "TSModuleDeclaration": {
              let Fe = ee.getParentNode(), z = g(K.id), U = Fe.type === "TSModuleDeclaration", Z = K.body && K.body.type === "TSModuleDeclaration";
              if (U)
                ue.push(".");
              else {
                K.declare && ue.push("declare "), ue.push(I(ee, ce, W));
                let se = ce.originalText.slice(E(K), E(K.id));
                K.id.type === "Identifier" && K.id.name === "global" && !/namespace|module/.test(se) || ue.push(z || /(?:^|\s)module(?:\s|$)/.test(se) ? "module " : "namespace ");
              }
              return ue.push(W("id")), Z ? ue.push(W("body")) : K.body ? ue.push(" ", l(W("body"))) : ue.push(de), ue;
            }
            case "TSConditionalType":
              return P(ee, ce, W);
            case "TSInferType":
              return ["infer", " ", W("typeParameter")];
            case "TSIntersectionType":
              return J(ee, ce, W);
            case "TSUnionType":
              return L(ee, ce, W);
            case "TSFunctionType":
              return Q(ee, ce, W);
            case "TSTupleType":
              return V(ee, ce, W);
            case "TSTypeReference":
              return [W("typeName"), S(ee, ce, W, "typeParameters")];
            case "TSTypeAnnotation":
              return W("typeAnnotation");
            case "TSEmptyBodyFunctionExpression":
              return k(ee, ce, W);
            case "TSJSDocAllType":
              return "*";
            case "TSJSDocUnknownType":
              return "?";
            case "TSJSDocNullableType":
              return Y(ee, W, "?");
            case "TSJSDocNonNullableType":
              return Y(ee, W, "!");
            case "TSInstantiationExpression":
              return [W("expression"), W("typeParameters")];
            default:
              throw new Error(`Unknown TypeScript node type: ${JSON.stringify(K.type)}.`);
          }
        }
        r.exports = { printTypescript: ie };
      } }), hd = te({ "src/language-js/print/comment.js"(e, r) {
        ne();
        var { hasNewline: t } = Ue(), { builders: { join: s, hardline: a }, utils: { replaceTextEndOfLine: n } } = qe(), { isLineComment: u } = Ke(), { locStart: i2, locEnd: l } = ut(), p2 = Pt();
        function y(c, f) {
          let F = c.getValue();
          if (u(F))
            return f.originalText.slice(i2(F), l(F)).trimEnd();
          if (p2(F)) {
            if (h2(F)) {
              let E = g(F);
              return F.trailing && !t(f.originalText, i2(F), { backwards: true }) ? [a, E] : E;
            }
            let _ = l(F), w = f.originalText.slice(_ - 3, _) === "*-/";
            return ["/*", n(F.value), w ? "*-/" : "*/"];
          }
          throw new Error("Not a comment: " + JSON.stringify(F));
        }
        function h2(c) {
          let f = `*${c.value}*`.split(`
`);
          return f.length > 1 && f.every((F) => F.trim()[0] === "*");
        }
        function g(c) {
          let f = c.value.split(`
`);
          return ["/*", s(a, f.map((F, _) => _ === 0 ? F.trimEnd() : " " + (_ < f.length - 1 ? F.trim() : F.trimStart()))), "*/"];
        }
        r.exports = { printComment: y };
      } }), vd = te({ "src/language-js/print/literal.js"(e, r) {
        ne();
        var { printString: t, printNumber: s } = Ue(), { replaceTextEndOfLine: a } = Yt(), { printDirective: n } = ct();
        function u(y, h2) {
          let g = y.getNode();
          switch (g.type) {
            case "RegExpLiteral":
              return p2(g);
            case "BigIntLiteral":
              return l(g.bigint || g.extra.raw);
            case "NumericLiteral":
              return s(g.extra.raw);
            case "StringLiteral":
              return a(t(g.extra.raw, h2));
            case "NullLiteral":
              return "null";
            case "BooleanLiteral":
              return String(g.value);
            case "DecimalLiteral":
              return s(g.value) + "m";
            case "Literal": {
              if (g.regex)
                return p2(g.regex);
              if (g.bigint)
                return l(g.raw);
              if (g.decimal)
                return s(g.decimal) + "m";
              let { value: c } = g;
              return typeof c == "number" ? s(g.raw) : typeof c == "string" ? i2(y) ? n(g.raw, h2) : a(t(g.raw, h2)) : String(c);
            }
          }
        }
        function i2(y) {
          if (y.getName() !== "expression")
            return;
          let h2 = y.getParentNode();
          return h2.type === "ExpressionStatement" && h2.directive;
        }
        function l(y) {
          return y.toLowerCase();
        }
        function p2(y) {
          let { pattern: h2, flags: g } = y;
          return g = [...g].sort().join(""), `/${h2}/${g}`;
        }
        r.exports = { printLiteral: u };
      } }), Cd = te({ "src/language-js/printer-estree.js"(e, r) {
        ne();
        var { printDanglingComments: t } = et(), { hasNewline: s } = Ue(), { builders: { join: a, line: n, hardline: u, softline: i2, group: l, indent: p2 }, utils: { replaceTextEndOfLine: y } } = qe(), h2 = td(), g = rd(), { insertPragma: c } = Co(), f = Eo(), F = qt(), _ = Fo(), { hasFlowShorthandAnnotationComment: w, hasComment: E, CommentCheckFlags: N, isTheOnlyJsxElementInMarkdown: x, isLineComment: I, isNextLineEmpty: P, needsHardlineAfterDanglingComment: $, hasIgnoreComment: D, isCallExpression: T, isMemberExpression: m, markerForIfWithoutBlockAndSameLineComment: C } = Ke(), { locStart: o, locEnd: d } = ut(), v = Pt(), { printHtmlBinding: S, isVueEventBindingExpression: b } = pd(), { printAngular: B } = fd(), { printJsx: k, hasJsxIgnoreComment: M } = Dd(), { printFlow: R } = dd(), { printTypescript: q } = yd(), { printOptionalToken: J, printBindExpressionCallee: L, printTypeAnnotation: Q, adjustClause: V, printRestSpread: j, printDefiniteToken: Y, printDirective: ie } = ct(), { printImportDeclaration: ee, printExportDeclaration: ce, printExportAllDeclaration: W, printModuleSpecifier: K } = To(), { printTernary: de } = Bo(), { printTemplateLiteral: ue } = jt(), { printArray: Fe } = er(), { printObject: z } = uu(), { printClass: U, printClassMethod: Z, printClassProperty: se } = nr(), { printProperty: fe } = rr(), { printFunction: ge, printArrowFunction: he, printMethod: we, printReturnStatement: ke, printThrowStatement: Re } = qr(), { printCallExpression: Ne } = xo(), { printVariableDeclarator: Pe, printAssignmentExpression: oe } = tr(), { printBinaryishExpression: H } = ru(), { printSwitchCaseConsequent: pe } = No(), { printMemberExpression: X } = So(), { printBlock: le, printBlockBody: Ae } = wo(), { printComment: Ee } = hd(), { printLiteral: De } = vd(), { printDecorators: A } = nu();
        function G(Ce, Be, ve, ze) {
          let be = re2(Ce, Be, ve, ze);
          if (!be)
            return "";
          let Ye = Ce.getValue(), { type: Se } = Ye;
          if (Se === "ClassMethod" || Se === "ClassPrivateMethod" || Se === "ClassProperty" || Se === "ClassAccessorProperty" || Se === "AccessorProperty" || Se === "TSAbstractAccessorProperty" || Se === "PropertyDefinition" || Se === "TSAbstractPropertyDefinition" || Se === "ClassPrivateProperty" || Se === "MethodDefinition" || Se === "TSAbstractMethodDefinition" || Se === "TSDeclareMethod")
            return be;
          let Ie = [be], Oe = A(Ce, Be, ve), Je = Ye.type === "ClassExpression" && Oe;
          if (Oe && (Ie = [...Oe, be], !Je))
            return l(Ie);
          if (!F(Ce, Be))
            return ze && ze.needsSemi && Ie.unshift(";"), Ie.length === 1 && Ie[0] === be ? be : Ie;
          if (Je && (Ie = [p2([n, ...Ie])]), Ie.unshift("("), ze && ze.needsSemi && Ie.unshift(";"), w(Ye)) {
            let [je] = Ye.trailingComments;
            Ie.push(" /*", je.value.trimStart(), "*/"), je.printed = true;
          }
          return Je && Ie.push(n), Ie.push(")"), Ie;
        }
        function re2(Ce, Be, ve, ze) {
          let be = Ce.getValue(), Ye = Be.semi ? ";" : "";
          if (!be)
            return "";
          if (typeof be == "string")
            return be;
          for (let Ie of [De, S, B, k, R, q]) {
            let Oe = Ie(Ce, Be, ve);
            if (typeof Oe < "u")
              return Oe;
          }
          let Se = [];
          switch (be.type) {
            case "JsExpressionRoot":
              return ve("node");
            case "JsonRoot":
              return [ve("node"), u];
            case "File":
              return be.program && be.program.interpreter && Se.push(ve(["program", "interpreter"])), Se.push(ve("program")), Se;
            case "Program":
              return Ae(Ce, Be, ve);
            case "EmptyStatement":
              return "";
            case "ExpressionStatement": {
              if (Be.parser === "__vue_event_binding" || Be.parser === "__vue_ts_event_binding") {
                let Oe = Ce.getParentNode();
                if (Oe.type === "Program" && Oe.body.length === 1 && Oe.body[0] === be)
                  return [ve("expression"), b(be.expression) ? ";" : ""];
              }
              let Ie = t(Ce, Be, true, (Oe) => {
                let { marker: Je } = Oe;
                return Je === C;
              });
              return [ve("expression"), x(Be, Ce) ? "" : Ye, Ie ? [" ", Ie] : ""];
            }
            case "ParenthesizedExpression":
              return !E(be.expression) && (be.expression.type === "ObjectExpression" || be.expression.type === "ArrayExpression") ? ["(", ve("expression"), ")"] : l(["(", p2([i2, ve("expression")]), i2, ")"]);
            case "AssignmentExpression":
              return oe(Ce, Be, ve);
            case "VariableDeclarator":
              return Pe(Ce, Be, ve);
            case "BinaryExpression":
            case "LogicalExpression":
              return H(Ce, Be, ve);
            case "AssignmentPattern":
              return [ve("left"), " = ", ve("right")];
            case "OptionalMemberExpression":
            case "MemberExpression":
              return X(Ce, Be, ve);
            case "MetaProperty":
              return [ve("meta"), ".", ve("property")];
            case "BindExpression":
              return be.object && Se.push(ve("object")), Se.push(l(p2([i2, L(Ce, Be, ve)]))), Se;
            case "Identifier":
              return [be.name, J(Ce), Y(Ce), Q(Ce, Be, ve)];
            case "V8IntrinsicIdentifier":
              return ["%", be.name];
            case "SpreadElement":
            case "SpreadElementPattern":
            case "SpreadProperty":
            case "SpreadPropertyPattern":
            case "RestElement":
              return j(Ce, Be, ve);
            case "FunctionDeclaration":
            case "FunctionExpression":
              return ge(Ce, ve, Be, ze);
            case "ArrowFunctionExpression":
              return he(Ce, Be, ve, ze);
            case "YieldExpression":
              return Se.push("yield"), be.delegate && Se.push("*"), be.argument && Se.push(" ", ve("argument")), Se;
            case "AwaitExpression": {
              if (Se.push("await"), be.argument) {
                Se.push(" ", ve("argument"));
                let Ie = Ce.getParentNode();
                if (T(Ie) && Ie.callee === be || m(Ie) && Ie.object === be) {
                  Se = [p2([i2, ...Se]), i2];
                  let Oe = Ce.findAncestor((Je) => Je.type === "AwaitExpression" || Je.type === "BlockStatement");
                  if (!Oe || Oe.type !== "AwaitExpression")
                    return l(Se);
                }
              }
              return Se;
            }
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
              return ce(Ce, Be, ve);
            case "ExportAllDeclaration":
              return W(Ce, Be, ve);
            case "ImportDeclaration":
              return ee(Ce, Be, ve);
            case "ImportSpecifier":
            case "ExportSpecifier":
            case "ImportNamespaceSpecifier":
            case "ExportNamespaceSpecifier":
            case "ImportDefaultSpecifier":
            case "ExportDefaultSpecifier":
              return K(Ce, Be, ve);
            case "ImportAttribute":
              return [ve("key"), ": ", ve("value")];
            case "Import":
              return "import";
            case "BlockStatement":
            case "StaticBlock":
            case "ClassBody":
              return le(Ce, Be, ve);
            case "ThrowStatement":
              return Re(Ce, Be, ve);
            case "ReturnStatement":
              return ke(Ce, Be, ve);
            case "NewExpression":
            case "ImportExpression":
            case "OptionalCallExpression":
            case "CallExpression":
              return Ne(Ce, Be, ve);
            case "ObjectExpression":
            case "ObjectPattern":
            case "RecordExpression":
              return z(Ce, Be, ve);
            case "ObjectProperty":
            case "Property":
              return be.method || be.kind === "get" || be.kind === "set" ? we(Ce, Be, ve) : fe(Ce, Be, ve);
            case "ObjectMethod":
              return we(Ce, Be, ve);
            case "Decorator":
              return ["@", ve("expression")];
            case "ArrayExpression":
            case "ArrayPattern":
            case "TupleExpression":
              return Fe(Ce, Be, ve);
            case "SequenceExpression": {
              let Ie = Ce.getParentNode(0);
              if (Ie.type === "ExpressionStatement" || Ie.type === "ForStatement") {
                let Oe = [];
                return Ce.each((Je, Te) => {
                  Te === 0 ? Oe.push(ve()) : Oe.push(",", p2([n, ve()]));
                }, "expressions"), l(Oe);
              }
              return l(a([",", n], Ce.map(ve, "expressions")));
            }
            case "ThisExpression":
              return "this";
            case "Super":
              return "super";
            case "Directive":
              return [ve("value"), Ye];
            case "DirectiveLiteral":
              return ie(be.extra.raw, Be);
            case "UnaryExpression":
              return Se.push(be.operator), /[a-z]$/.test(be.operator) && Se.push(" "), E(be.argument) ? Se.push(l(["(", p2([i2, ve("argument")]), i2, ")"])) : Se.push(ve("argument")), Se;
            case "UpdateExpression":
              return Se.push(ve("argument"), be.operator), be.prefix && Se.reverse(), Se;
            case "ConditionalExpression":
              return de(Ce, Be, ve);
            case "VariableDeclaration": {
              let Ie = Ce.map(ve, "declarations"), Oe = Ce.getParentNode(), Je = Oe.type === "ForStatement" || Oe.type === "ForInStatement" || Oe.type === "ForOfStatement", Te = be.declarations.some((Me) => Me.init), je;
              return Ie.length === 1 && !E(be.declarations[0]) ? je = Ie[0] : Ie.length > 0 && (je = p2(Ie[0])), Se = [be.declare ? "declare " : "", be.kind, je ? [" ", je] : "", p2(Ie.slice(1).map((Me) => [",", Te && !Je ? u : n, Me]))], Je && Oe.body !== be || Se.push(Ye), l(Se);
            }
            case "WithStatement":
              return l(["with (", ve("object"), ")", V(be.body, ve("body"))]);
            case "IfStatement": {
              let Ie = V(be.consequent, ve("consequent")), Oe = l(["if (", l([p2([i2, ve("test")]), i2]), ")", Ie]);
              if (Se.push(Oe), be.alternate) {
                let Je = E(be.consequent, N.Trailing | N.Line) || $(be), Te = be.consequent.type === "BlockStatement" && !Je;
                Se.push(Te ? " " : u), E(be, N.Dangling) && Se.push(t(Ce, Be, true), Je ? u : " "), Se.push("else", l(V(be.alternate, ve("alternate"), be.alternate.type === "IfStatement")));
              }
              return Se;
            }
            case "ForStatement": {
              let Ie = V(be.body, ve("body")), Oe = t(Ce, Be, true), Je = Oe ? [Oe, i2] : "";
              return !be.init && !be.test && !be.update ? [Je, l(["for (;;)", Ie])] : [Je, l(["for (", l([p2([i2, ve("init"), ";", n, ve("test"), ";", n, ve("update")]), i2]), ")", Ie])];
            }
            case "WhileStatement":
              return l(["while (", l([p2([i2, ve("test")]), i2]), ")", V(be.body, ve("body"))]);
            case "ForInStatement":
              return l(["for (", ve("left"), " in ", ve("right"), ")", V(be.body, ve("body"))]);
            case "ForOfStatement":
              return l(["for", be.await ? " await" : "", " (", ve("left"), " of ", ve("right"), ")", V(be.body, ve("body"))]);
            case "DoWhileStatement": {
              let Ie = V(be.body, ve("body"));
              return Se = [l(["do", Ie])], be.body.type === "BlockStatement" ? Se.push(" ") : Se.push(u), Se.push("while (", l([p2([i2, ve("test")]), i2]), ")", Ye), Se;
            }
            case "DoExpression":
              return [be.async ? "async " : "", "do ", ve("body")];
            case "BreakStatement":
              return Se.push("break"), be.label && Se.push(" ", ve("label")), Se.push(Ye), Se;
            case "ContinueStatement":
              return Se.push("continue"), be.label && Se.push(" ", ve("label")), Se.push(Ye), Se;
            case "LabeledStatement":
              return be.body.type === "EmptyStatement" ? [ve("label"), ":;"] : [ve("label"), ": ", ve("body")];
            case "TryStatement":
              return ["try ", ve("block"), be.handler ? [" ", ve("handler")] : "", be.finalizer ? [" finally ", ve("finalizer")] : ""];
            case "CatchClause":
              if (be.param) {
                let Ie = E(be.param, (Je) => !v(Je) || Je.leading && s(Be.originalText, d(Je)) || Je.trailing && s(Be.originalText, o(Je), { backwards: true })), Oe = ve("param");
                return ["catch ", Ie ? ["(", p2([i2, Oe]), i2, ") "] : ["(", Oe, ") "], ve("body")];
              }
              return ["catch ", ve("body")];
            case "SwitchStatement":
              return [l(["switch (", p2([i2, ve("discriminant")]), i2, ")"]), " {", be.cases.length > 0 ? p2([u, a(u, Ce.map((Ie, Oe, Je) => {
                let Te = Ie.getValue();
                return [ve(), Oe !== Je.length - 1 && P(Te, Be) ? u : ""];
              }, "cases"))]) : "", u, "}"];
            case "SwitchCase": {
              be.test ? Se.push("case ", ve("test"), ":") : Se.push("default:"), E(be, N.Dangling) && Se.push(" ", t(Ce, Be, true));
              let Ie = be.consequent.filter((Oe) => Oe.type !== "EmptyStatement");
              if (Ie.length > 0) {
                let Oe = pe(Ce, Be, ve);
                Se.push(Ie.length === 1 && Ie[0].type === "BlockStatement" ? [" ", Oe] : p2([u, Oe]));
              }
              return Se;
            }
            case "DebuggerStatement":
              return ["debugger", Ye];
            case "ClassDeclaration":
            case "ClassExpression":
              return U(Ce, Be, ve);
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "MethodDefinition":
              return Z(Ce, Be, ve);
            case "ClassProperty":
            case "PropertyDefinition":
            case "ClassPrivateProperty":
            case "ClassAccessorProperty":
            case "AccessorProperty":
              return se(Ce, Be, ve);
            case "TemplateElement":
              return y(be.value.raw);
            case "TemplateLiteral":
              return ue(Ce, ve, Be);
            case "TaggedTemplateExpression":
              return [ve("tag"), ve("typeParameters"), ve("quasi")];
            case "PrivateIdentifier":
              return ["#", ve("name")];
            case "PrivateName":
              return ["#", ve("id")];
            case "InterpreterDirective":
              return Se.push("#!", be.value, u), P(be, Be) && Se.push(u), Se;
            case "TopicReference":
              return "%";
            case "ArgumentPlaceholder":
              return "?";
            case "ModuleExpression": {
              Se.push("module {");
              let Ie = ve("body");
              return Ie && Se.push(p2([u, Ie]), u), Se.push("}"), Se;
            }
            default:
              throw new Error("unknown type: " + JSON.stringify(be.type));
          }
        }
        function ye(Ce) {
          return Ce.type && !v(Ce) && !I(Ce) && Ce.type !== "EmptyStatement" && Ce.type !== "TemplateElement" && Ce.type !== "Import" && Ce.type !== "TSEmptyBodyFunctionExpression";
        }
        r.exports = { preprocess: _, print: G, embed: h2, insertPragma: c, massageAstNode: g, hasPrettierIgnore(Ce) {
          return D(Ce) || M(Ce);
        }, willPrintOwnComments: f.willPrintOwnComments, canAttachComment: ye, printComment: Ee, isBlockComment: v, handleComments: { avoidAstMutation: true, ownLine: f.handleOwnLineComment, endOfLine: f.handleEndOfLineComment, remaining: f.handleRemainingComment }, getCommentChildNodes: f.getCommentChildNodes };
      } }), Ed = te({ "src/language-js/printer-estree-json.js"(e, r) {
        ne();
        var { builders: { hardline: t, indent: s, join: a } } = qe(), n = Fo();
        function u(y, h2, g) {
          let c = y.getValue();
          switch (c.type) {
            case "JsonRoot":
              return [g("node"), t];
            case "ArrayExpression": {
              if (c.elements.length === 0)
                return "[]";
              let f = y.map(() => y.getValue() === null ? "null" : g(), "elements");
              return ["[", s([t, a([",", t], f)]), t, "]"];
            }
            case "ObjectExpression":
              return c.properties.length === 0 ? "{}" : ["{", s([t, a([",", t], y.map(g, "properties"))]), t, "}"];
            case "ObjectProperty":
              return [g("key"), ": ", g("value")];
            case "UnaryExpression":
              return [c.operator === "+" ? "" : c.operator, g("argument")];
            case "NullLiteral":
              return "null";
            case "BooleanLiteral":
              return c.value ? "true" : "false";
            case "StringLiteral":
              return JSON.stringify(c.value);
            case "NumericLiteral":
              return i2(y) ? JSON.stringify(String(c.value)) : JSON.stringify(c.value);
            case "Identifier":
              return i2(y) ? JSON.stringify(c.name) : c.name;
            case "TemplateLiteral":
              return g(["quasis", 0]);
            case "TemplateElement":
              return JSON.stringify(c.value.cooked);
            default:
              throw new Error("unknown type: " + JSON.stringify(c.type));
          }
        }
        function i2(y) {
          return y.getName() === "key" && y.getParentNode().type === "ObjectProperty";
        }
        var l = /* @__PURE__ */ new Set(["start", "end", "extra", "loc", "comments", "leadingComments", "trailingComments", "innerComments", "errors", "range", "tokens"]);
        function p2(y, h2) {
          let { type: g } = y;
          if (g === "ObjectProperty") {
            let { key: c } = y;
            c.type === "Identifier" ? h2.key = { type: "StringLiteral", value: c.name } : c.type === "NumericLiteral" && (h2.key = { type: "StringLiteral", value: String(c.value) });
            return;
          }
          if (g === "UnaryExpression" && y.operator === "+")
            return h2.argument;
          if (g === "ArrayExpression") {
            for (let [c, f] of y.elements.entries())
              f === null && h2.elements.splice(c, 0, { type: "NullLiteral" });
            return;
          }
          if (g === "TemplateLiteral")
            return { type: "StringLiteral", value: y.quasis[0].value.cooked };
        }
        p2.ignoredProperties = l, r.exports = { preprocess: n, print: u, massageAstNode: p2 };
      } }), Mt = te({ "src/common/common-options.js"(e, r) {
        ne();
        var t = "Common";
        r.exports = { bracketSpacing: { since: "0.0.0", category: t, type: "boolean", default: true, description: "Print spaces between brackets.", oppositeDescription: "Do not print spaces between brackets." }, singleQuote: { since: "0.0.0", category: t, type: "boolean", default: false, description: "Use single quotes instead of double quotes." }, proseWrap: { since: "1.8.2", category: t, type: "choice", default: [{ since: "1.8.2", value: true }, { since: "1.9.0", value: "preserve" }], description: "How to wrap prose.", choices: [{ since: "1.9.0", value: "always", description: "Wrap prose if it exceeds the print width." }, { since: "1.9.0", value: "never", description: "Do not wrap prose." }, { since: "1.9.0", value: "preserve", description: "Wrap prose as-is." }] }, bracketSameLine: { since: "2.4.0", category: t, type: "boolean", default: false, description: "Put > of opening tags on the last line instead of on a new line." }, singleAttributePerLine: { since: "2.6.0", category: t, type: "boolean", default: false, description: "Enforce single attribute per line in HTML, Vue and JSX." } };
      } }), Fd = te({ "src/language-js/options.js"(e, r) {
        ne();
        var t = Mt(), s = "JavaScript";
        r.exports = { arrowParens: { since: "1.9.0", category: s, type: "choice", default: [{ since: "1.9.0", value: "avoid" }, { since: "2.0.0", value: "always" }], description: "Include parentheses around a sole arrow function parameter.", choices: [{ value: "always", description: "Always include parens. Example: `(x) => x`" }, { value: "avoid", description: "Omit parens when possible. Example: `x => x`" }] }, bracketSameLine: t.bracketSameLine, bracketSpacing: t.bracketSpacing, jsxBracketSameLine: { since: "0.17.0", category: s, type: "boolean", description: "Put > on the last line instead of at a new line.", deprecated: "2.4.0" }, semi: { since: "1.0.0", category: s, type: "boolean", default: true, description: "Print semicolons.", oppositeDescription: "Do not print semicolons, except at the beginning of lines which may need them." }, singleQuote: t.singleQuote, jsxSingleQuote: { since: "1.15.0", category: s, type: "boolean", default: false, description: "Use single quotes in JSX." }, quoteProps: { since: "1.17.0", category: s, type: "choice", default: "as-needed", description: "Change when properties in objects are quoted.", choices: [{ value: "as-needed", description: "Only add quotes around object properties where required." }, { value: "consistent", description: "If at least one property in an object requires quotes, quote all properties." }, { value: "preserve", description: "Respect the input use of quotes in object properties." }] }, trailingComma: { since: "0.0.0", category: s, type: "choice", default: [{ since: "0.0.0", value: false }, { since: "0.19.0", value: "none" }, { since: "2.0.0", value: "es5" }], description: "Print trailing commas wherever possible when multi-line.", choices: [{ value: "es5", description: "Trailing commas where valid in ES5 (objects, arrays, etc.)" }, { value: "none", description: "No trailing commas." }, { value: "all", description: "Trailing commas wherever possible (including function arguments)." }] }, singleAttributePerLine: t.singleAttributePerLine };
      } }), Ad = te({ "src/language-js/parse/parsers.js"() {
        ne();
      } }), Ln = te({ "node_modules/linguist-languages/data/JavaScript.json"(e, r) {
        r.exports = { name: "JavaScript", type: "programming", tmScope: "source.js", aceMode: "javascript", codemirrorMode: "javascript", codemirrorMimeType: "text/javascript", color: "#f1e05a", aliases: ["js", "node"], extensions: [".js", "._js", ".bones", ".cjs", ".es", ".es6", ".frag", ".gs", ".jake", ".javascript", ".jsb", ".jscad", ".jsfl", ".jslib", ".jsm", ".jspre", ".jss", ".jsx", ".mjs", ".njs", ".pac", ".sjs", ".ssjs", ".xsjs", ".xsjslib"], filenames: ["Jakefile"], interpreters: ["chakra", "d8", "gjs", "js", "node", "nodejs", "qjs", "rhino", "v8", "v8-shell"], languageId: 183 };
      } }), Sd = te({ "node_modules/linguist-languages/data/TypeScript.json"(e, r) {
        r.exports = { name: "TypeScript", type: "programming", color: "#3178c6", aliases: ["ts"], interpreters: ["deno", "ts-node"], extensions: [".ts", ".cts", ".mts"], tmScope: "source.ts", aceMode: "typescript", codemirrorMode: "javascript", codemirrorMimeType: "application/typescript", languageId: 378 };
      } }), xd = te({ "node_modules/linguist-languages/data/TSX.json"(e, r) {
        r.exports = { name: "TSX", type: "programming", color: "#3178c6", group: "TypeScript", extensions: [".tsx"], tmScope: "source.tsx", aceMode: "javascript", codemirrorMode: "jsx", codemirrorMimeType: "text/jsx", languageId: 94901924 };
      } }), wa = te({ "node_modules/linguist-languages/data/JSON.json"(e, r) {
        r.exports = { name: "JSON", type: "data", color: "#292929", tmScope: "source.json", aceMode: "json", codemirrorMode: "javascript", codemirrorMimeType: "application/json", aliases: ["geojson", "jsonl", "topojson"], extensions: [".json", ".4DForm", ".4DProject", ".avsc", ".geojson", ".gltf", ".har", ".ice", ".JSON-tmLanguage", ".jsonl", ".mcmeta", ".tfstate", ".tfstate.backup", ".topojson", ".webapp", ".webmanifest", ".yy", ".yyp"], filenames: [".arcconfig", ".auto-changelog", ".c8rc", ".htmlhintrc", ".imgbotconfig", ".nycrc", ".tern-config", ".tern-project", ".watchmanconfig", "Pipfile.lock", "composer.lock", "mcmod.info"], languageId: 174 };
      } }), bd = te({ "node_modules/linguist-languages/data/JSON with Comments.json"(e, r) {
        r.exports = { name: "JSON with Comments", type: "data", color: "#292929", group: "JSON", tmScope: "source.js", aceMode: "javascript", codemirrorMode: "javascript", codemirrorMimeType: "text/javascript", aliases: ["jsonc"], extensions: [".jsonc", ".code-snippets", ".sublime-build", ".sublime-commands", ".sublime-completions", ".sublime-keymap", ".sublime-macro", ".sublime-menu", ".sublime-mousemap", ".sublime-project", ".sublime-settings", ".sublime-theme", ".sublime-workspace", ".sublime_metrics", ".sublime_session"], filenames: [".babelrc", ".devcontainer.json", ".eslintrc.json", ".jscsrc", ".jshintrc", ".jslintrc", "api-extractor.json", "devcontainer.json", "jsconfig.json", "language-configuration.json", "tsconfig.json", "tslint.json"], languageId: 423 };
      } }), Td = te({ "node_modules/linguist-languages/data/JSON5.json"(e, r) {
        r.exports = { name: "JSON5", type: "data", color: "#267CB9", extensions: [".json5"], tmScope: "source.js", aceMode: "javascript", codemirrorMode: "javascript", codemirrorMimeType: "application/json", languageId: 175 };
      } }), Bd = te({ "src/language-js/index.js"(e, r) {
        ne();
        var t = _t(), s = Cd(), a = Ed(), n = Fd(), u = Ad(), i2 = [t(Ln(), (p2) => ({ since: "0.0.0", parsers: ["babel", "acorn", "espree", "meriyah", "babel-flow", "babel-ts", "flow", "typescript"], vscodeLanguageIds: ["javascript", "mongo"], interpreters: [...p2.interpreters, "zx"], extensions: [...p2.extensions.filter((y) => y !== ".jsx"), ".wxs"] })), t(Ln(), () => ({ name: "Flow", since: "0.0.0", parsers: ["flow", "babel-flow"], vscodeLanguageIds: ["javascript"], aliases: [], filenames: [], extensions: [".js.flow"] })), t(Ln(), () => ({ name: "JSX", since: "0.0.0", parsers: ["babel", "babel-flow", "babel-ts", "flow", "typescript", "espree", "meriyah"], vscodeLanguageIds: ["javascriptreact"], aliases: void 0, filenames: void 0, extensions: [".jsx"], group: "JavaScript", interpreters: void 0, tmScope: "source.js.jsx", aceMode: "javascript", codemirrorMode: "jsx", codemirrorMimeType: "text/jsx", color: void 0 })), t(Sd(), () => ({ since: "1.4.0", parsers: ["typescript", "babel-ts"], vscodeLanguageIds: ["typescript"] })), t(xd(), () => ({ since: "1.4.0", parsers: ["typescript", "babel-ts"], vscodeLanguageIds: ["typescriptreact"] })), t(wa(), () => ({ name: "JSON.stringify", since: "1.13.0", parsers: ["json-stringify"], vscodeLanguageIds: ["json"], extensions: [".importmap"], filenames: ["package.json", "package-lock.json", "composer.json"] })), t(wa(), (p2) => ({ since: "1.5.0", parsers: ["json"], vscodeLanguageIds: ["json"], extensions: p2.extensions.filter((y) => y !== ".jsonl") })), t(bd(), (p2) => ({ since: "1.5.0", parsers: ["json"], vscodeLanguageIds: ["jsonc"], filenames: [...p2.filenames, ".eslintrc", ".swcrc"] })), t(Td(), () => ({ since: "1.13.0", parsers: ["json5"], vscodeLanguageIds: ["json5"] }))], l = { estree: s, "estree-json": a };
        r.exports = { languages: i2, options: n, printers: l, parsers: u };
      } }), Nd = te({ "src/language-css/clean.js"(e, r) {
        ne();
        var { isFrontMatterNode: t } = Ue(), s = lt(), a = /* @__PURE__ */ new Set(["raw", "raws", "sourceIndex", "source", "before", "after", "trailingComma"]);
        function n(i2, l, p2) {
          if (t(i2) && i2.lang === "yaml" && delete l.value, i2.type === "css-comment" && p2.type === "css-root" && p2.nodes.length > 0 && ((p2.nodes[0] === i2 || t(p2.nodes[0]) && p2.nodes[1] === i2) && (delete l.text, /^\*\s*@(?:format|prettier)\s*$/.test(i2.text)) || p2.type === "css-root" && s(p2.nodes) === i2))
            return null;
          if (i2.type === "value-root" && delete l.text, (i2.type === "media-query" || i2.type === "media-query-list" || i2.type === "media-feature-expression") && delete l.value, i2.type === "css-rule" && delete l.params, i2.type === "selector-combinator" && (l.value = l.value.replace(/\s+/g, " ")), i2.type === "media-feature" && (l.value = l.value.replace(/ /g, "")), (i2.type === "value-word" && (i2.isColor && i2.isHex || ["initial", "inherit", "unset", "revert"].includes(l.value.replace().toLowerCase())) || i2.type === "media-feature" || i2.type === "selector-root-invalid" || i2.type === "selector-pseudo") && (l.value = l.value.toLowerCase()), i2.type === "css-decl" && (l.prop = l.prop.toLowerCase()), (i2.type === "css-atrule" || i2.type === "css-import") && (l.name = l.name.toLowerCase()), i2.type === "value-number" && (l.unit = l.unit.toLowerCase()), (i2.type === "media-feature" || i2.type === "media-keyword" || i2.type === "media-type" || i2.type === "media-unknown" || i2.type === "media-url" || i2.type === "media-value" || i2.type === "selector-attribute" || i2.type === "selector-string" || i2.type === "selector-class" || i2.type === "selector-combinator" || i2.type === "value-string") && l.value && (l.value = u(l.value)), i2.type === "selector-attribute" && (l.attribute = l.attribute.trim(), l.namespace && typeof l.namespace == "string" && (l.namespace = l.namespace.trim(), l.namespace.length === 0 && (l.namespace = true)), l.value && (l.value = l.value.trim().replace(/^["']|["']$/g, ""), delete l.quoted)), (i2.type === "media-value" || i2.type === "media-type" || i2.type === "value-number" || i2.type === "selector-root-invalid" || i2.type === "selector-class" || i2.type === "selector-combinator" || i2.type === "selector-tag") && l.value && (l.value = l.value.replace(/([\d+.Ee-]+)([A-Za-z]*)/g, (y, h2, g) => {
            let c = Number(h2);
            return Number.isNaN(c) ? y : c + g.toLowerCase();
          })), i2.type === "selector-tag") {
            let y = i2.value.toLowerCase();
            ["from", "to"].includes(y) && (l.value = y);
          }
          if (i2.type === "css-atrule" && i2.name.toLowerCase() === "supports" && delete l.value, i2.type === "selector-unknown" && delete l.value, i2.type === "value-comma_group") {
            let y = i2.groups.findIndex((h2) => h2.type === "value-number" && h2.unit === "...");
            y !== -1 && (l.groups[y].unit = "", l.groups.splice(y + 1, 0, { type: "value-word", value: "...", isColor: false, isHex: false }));
          }
          if (i2.type === "value-comma_group" && i2.groups.some((y) => y.type === "value-atword" && y.value.endsWith("[") || y.type === "value-word" && y.value.startsWith("]")))
            return { type: "value-atword", value: i2.groups.map((y) => y.value).join(""), group: { open: null, close: null, groups: [], type: "value-paren_group" } };
        }
        n.ignoredProperties = a;
        function u(i2) {
          return i2.replace(/'/g, '"').replace(/\\([^\dA-Fa-f])/g, "$1");
        }
        r.exports = n;
      } }), su = te({ "src/utils/front-matter/print.js"(e, r) {
        ne();
        var { builders: { hardline: t, markAsRoot: s } } = qe();
        function a(n, u) {
          if (n.lang === "yaml") {
            let i2 = n.value.trim(), l = i2 ? u(i2, { parser: "yaml" }, { stripTrailingHardline: true }) : "";
            return s([n.startDelimiter, t, l, l ? t : "", n.endDelimiter]);
          }
        }
        r.exports = a;
      } }), wd = te({ "src/language-css/embed.js"(e, r) {
        ne();
        var { builders: { hardline: t } } = qe(), s = su();
        function a(n, u, i2) {
          let l = n.getValue();
          if (l.type === "front-matter") {
            let p2 = s(l, i2);
            return p2 ? [p2, t] : "";
          }
        }
        r.exports = a;
      } }), _o = te({ "src/utils/front-matter/parse.js"(e, r) {
        ne();
        var t = new RegExp("^(?<startDelimiter>-{3}|\\+{3})(?<language>[^\\n]*)\\n(?:|(?<value>.*?)\\n)(?<endDelimiter>\\k<startDelimiter>|\\.{3})[^\\S\\n]*(?:\\n|$)", "s");
        function s(a) {
          let n = a.match(t);
          if (!n)
            return { content: a };
          let { startDelimiter: u, language: i2, value: l = "", endDelimiter: p2 } = n.groups, y = i2.trim() || "yaml";
          if (u === "+++" && (y = "toml"), y !== "yaml" && u !== p2)
            return { content: a };
          let [h2] = n;
          return { frontMatter: { type: "front-matter", lang: y, value: l, startDelimiter: u, endDelimiter: p2, raw: h2.replace(/\n$/, "") }, content: h2.replace(/[^\n]/g, " ") + a.slice(h2.length) };
        }
        r.exports = s;
      } }), _d = te({ "src/language-css/pragma.js"(e, r) {
        ne();
        var t = Co(), s = _o();
        function a(u) {
          return t.hasPragma(s(u).content);
        }
        function n(u) {
          let { frontMatter: i2, content: l } = s(u);
          return (i2 ? i2.raw + `

` : "") + t.insertPragma(l);
        }
        r.exports = { hasPragma: a, insertPragma: n };
      } }), Pd = te({ "src/language-css/utils/index.js"(e, r) {
        ne();
        var t = /* @__PURE__ */ new Set(["red", "green", "blue", "alpha", "a", "rgb", "hue", "h", "saturation", "s", "lightness", "l", "whiteness", "w", "blackness", "b", "tint", "shade", "blend", "blenda", "contrast", "hsl", "hsla", "hwb", "hwba"]);
        function s(z, U) {
          let Z = Array.isArray(U) ? U : [U], se = -1, fe;
          for (; fe = z.getParentNode(++se); )
            if (Z.includes(fe.type))
              return se;
          return -1;
        }
        function a(z, U) {
          let Z = s(z, U);
          return Z === -1 ? null : z.getParentNode(Z);
        }
        function n(z) {
          var U;
          let Z = a(z, "css-decl");
          return Z == null || (U = Z.prop) === null || U === void 0 ? void 0 : U.toLowerCase();
        }
        var u = /* @__PURE__ */ new Set(["initial", "inherit", "unset", "revert"]);
        function i2(z) {
          return u.has(z.toLowerCase());
        }
        function l(z, U) {
          let Z = a(z, "css-atrule");
          return (Z == null ? void 0 : Z.name) && Z.name.toLowerCase().endsWith("keyframes") && ["from", "to"].includes(U.toLowerCase());
        }
        function p2(z) {
          return z.includes("$") || z.includes("@") || z.includes("#") || z.startsWith("%") || z.startsWith("--") || z.startsWith(":--") || z.includes("(") && z.includes(")") ? z : z.toLowerCase();
        }
        function y(z, U) {
          var Z;
          let se = a(z, "value-func");
          return (se == null || (Z = se.value) === null || Z === void 0 ? void 0 : Z.toLowerCase()) === U;
        }
        function h2(z) {
          var U;
          let Z = a(z, "css-rule"), se = Z == null || (U = Z.raws) === null || U === void 0 ? void 0 : U.selector;
          return se && (se.startsWith(":import") || se.startsWith(":export"));
        }
        function g(z, U) {
          let Z = Array.isArray(U) ? U : [U], se = a(z, "css-atrule");
          return se && Z.includes(se.name.toLowerCase());
        }
        function c(z) {
          let U = z.getValue(), Z = a(z, "css-atrule");
          return (Z == null ? void 0 : Z.name) === "import" && U.groups[0].value === "url" && U.groups.length === 2;
        }
        function f(z) {
          return z.type === "value-func" && z.value.toLowerCase() === "url";
        }
        function F(z, U) {
          var Z;
          let se = (Z = z.getParentNode()) === null || Z === void 0 ? void 0 : Z.nodes;
          return se && se.indexOf(U) === se.length - 1;
        }
        function _(z) {
          let { selector: U } = z;
          return U ? typeof U == "string" && /^@.+:.*$/.test(U) || U.value && /^@.+:.*$/.test(U.value) : false;
        }
        function w(z) {
          return z.type === "value-word" && ["from", "through", "end"].includes(z.value);
        }
        function E(z) {
          return z.type === "value-word" && ["and", "or", "not"].includes(z.value);
        }
        function N(z) {
          return z.type === "value-word" && z.value === "in";
        }
        function x(z) {
          return z.type === "value-operator" && z.value === "*";
        }
        function I(z) {
          return z.type === "value-operator" && z.value === "/";
        }
        function P(z) {
          return z.type === "value-operator" && z.value === "+";
        }
        function $(z) {
          return z.type === "value-operator" && z.value === "-";
        }
        function D(z) {
          return z.type === "value-operator" && z.value === "%";
        }
        function T(z) {
          return x(z) || I(z) || P(z) || $(z) || D(z);
        }
        function m(z) {
          return z.type === "value-word" && ["==", "!="].includes(z.value);
        }
        function C(z) {
          return z.type === "value-word" && ["<", ">", "<=", ">="].includes(z.value);
        }
        function o(z) {
          return z.type === "css-atrule" && ["if", "else", "for", "each", "while"].includes(z.name);
        }
        function d(z) {
          var U;
          return ((U = z.raws) === null || U === void 0 ? void 0 : U.params) && /^\(\s*\)$/.test(z.raws.params);
        }
        function v(z) {
          return z.name.startsWith("prettier-placeholder");
        }
        function S(z) {
          return z.prop.startsWith("@prettier-placeholder");
        }
        function b(z, U) {
          return z.value === "$$" && z.type === "value-func" && (U == null ? void 0 : U.type) === "value-word" && !U.raws.before;
        }
        function B(z) {
          var U, Z;
          return ((U = z.value) === null || U === void 0 ? void 0 : U.type) === "value-root" && ((Z = z.value.group) === null || Z === void 0 ? void 0 : Z.type) === "value-value" && z.prop.toLowerCase() === "composes";
        }
        function k(z) {
          var U, Z, se;
          return ((U = z.value) === null || U === void 0 || (Z = U.group) === null || Z === void 0 || (se = Z.group) === null || se === void 0 ? void 0 : se.type) === "value-paren_group" && z.value.group.group.open !== null && z.value.group.group.close !== null;
        }
        function M(z) {
          var U;
          return ((U = z.raws) === null || U === void 0 ? void 0 : U.before) === "";
        }
        function R(z) {
          var U, Z;
          return z.type === "value-comma_group" && ((U = z.groups) === null || U === void 0 || (Z = U[1]) === null || Z === void 0 ? void 0 : Z.type) === "value-colon";
        }
        function q(z) {
          var U;
          return z.type === "value-paren_group" && ((U = z.groups) === null || U === void 0 ? void 0 : U[0]) && R(z.groups[0]);
        }
        function J(z) {
          var U;
          let Z = z.getValue();
          if (Z.groups.length === 0)
            return false;
          let se = z.getParentNode(1);
          if (!q(Z) && !(se && q(se)))
            return false;
          let fe = a(z, "css-decl");
          return !!(fe != null && (U = fe.prop) !== null && U !== void 0 && U.startsWith("$") || q(se) || se.type === "value-func");
        }
        function L(z) {
          return z.type === "value-comment" && z.inline;
        }
        function Q(z) {
          return z.type === "value-word" && z.value === "#";
        }
        function V(z) {
          return z.type === "value-word" && z.value === "{";
        }
        function j(z) {
          return z.type === "value-word" && z.value === "}";
        }
        function Y(z) {
          return ["value-word", "value-atword"].includes(z.type);
        }
        function ie(z) {
          return (z == null ? void 0 : z.type) === "value-colon";
        }
        function ee(z, U) {
          if (!R(U))
            return false;
          let { groups: Z } = U, se = Z.indexOf(z);
          return se === -1 ? false : ie(Z[se + 1]);
        }
        function ce(z) {
          return z.value && ["not", "and", "or"].includes(z.value.toLowerCase());
        }
        function W(z) {
          return z.type !== "value-func" ? false : t.has(z.value.toLowerCase());
        }
        function K(z) {
          return /\/\//.test(z.split(/[\n\r]/).pop());
        }
        function de(z) {
          return (z == null ? void 0 : z.type) === "value-atword" && z.value.startsWith("prettier-placeholder-");
        }
        function ue(z, U) {
          var Z, se;
          if (((Z = z.open) === null || Z === void 0 ? void 0 : Z.value) !== "(" || ((se = z.close) === null || se === void 0 ? void 0 : se.value) !== ")" || z.groups.some((fe) => fe.type !== "value-comma_group"))
            return false;
          if (U.type === "value-comma_group") {
            let fe = U.groups.indexOf(z) - 1, ge = U.groups[fe];
            if ((ge == null ? void 0 : ge.type) === "value-word" && ge.value === "with")
              return true;
          }
          return false;
        }
        function Fe(z) {
          var U, Z;
          return z.type === "value-paren_group" && ((U = z.open) === null || U === void 0 ? void 0 : U.value) === "(" && ((Z = z.close) === null || Z === void 0 ? void 0 : Z.value) === ")";
        }
        r.exports = { getAncestorCounter: s, getAncestorNode: a, getPropOfDeclNode: n, maybeToLowerCase: p2, insideValueFunctionNode: y, insideICSSRuleNode: h2, insideAtRuleNode: g, insideURLFunctionInImportAtRuleNode: c, isKeyframeAtRuleKeywords: l, isWideKeywords: i2, isLastNode: F, isSCSSControlDirectiveNode: o, isDetachedRulesetDeclarationNode: _, isRelationalOperatorNode: C, isEqualityOperatorNode: m, isMultiplicationNode: x, isDivisionNode: I, isAdditionNode: P, isSubtractionNode: $, isModuloNode: D, isMathOperatorNode: T, isEachKeywordNode: N, isForKeywordNode: w, isURLFunctionNode: f, isIfElseKeywordNode: E, hasComposesNode: B, hasParensAroundNode: k, hasEmptyRawBefore: M, isDetachedRulesetCallNode: d, isTemplatePlaceholderNode: v, isTemplatePropNode: S, isPostcssSimpleVarNode: b, isKeyValuePairNode: R, isKeyValuePairInParenGroupNode: q, isKeyInValuePairNode: ee, isSCSSMapItemNode: J, isInlineValueCommentNode: L, isHashNode: Q, isLeftCurlyBraceNode: V, isRightCurlyBraceNode: j, isWordNode: Y, isColonNode: ie, isMediaAndSupportsKeywords: ce, isColorAdjusterFuncNode: W, lastLineHasInlineComment: K, isAtWordPlaceholderNode: de, isConfigurationNode: ue, isParenGroupNode: Fe };
      } }), Id = te({ "src/utils/line-column-to-index.js"(e, r) {
        ne(), r.exports = function(t, s) {
          let a = 0;
          for (let n = 0; n < t.line - 1; ++n)
            a = s.indexOf(`
`, a) + 1;
          return a + t.column;
        };
      } }), kd = te({ "src/language-css/loc.js"(e, r) {
        ne();
        var { skipEverythingButNewLine: t } = Pr(), s = lt(), a = Id();
        function n(c, f) {
          return typeof c.sourceIndex == "number" ? c.sourceIndex : c.source ? a(c.source.start, f) - 1 : null;
        }
        function u(c, f) {
          if (c.type === "css-comment" && c.inline)
            return t(f, c.source.startOffset);
          let F = c.nodes && s(c.nodes);
          return F && c.source && !c.source.end && (c = F), c.source && c.source.end ? a(c.source.end, f) : null;
        }
        function i2(c, f) {
          c.source && (c.source.startOffset = n(c, f), c.source.endOffset = u(c, f));
          for (let F in c) {
            let _ = c[F];
            F === "source" || !_ || typeof _ != "object" || (_.type === "value-root" || _.type === "value-unknown" ? l(_, p2(c), _.text || _.value) : i2(_, f));
          }
        }
        function l(c, f, F) {
          c.source && (c.source.startOffset = n(c, F) + f, c.source.endOffset = u(c, F) + f);
          for (let _ in c) {
            let w = c[_];
            _ === "source" || !w || typeof w != "object" || l(w, f, F);
          }
        }
        function p2(c) {
          let f = c.source.startOffset;
          return typeof c.prop == "string" && (f += c.prop.length), c.type === "css-atrule" && typeof c.name == "string" && (f += 1 + c.name.length + c.raws.afterName.match(/^\s*:?\s*/)[0].length), c.type !== "css-atrule" && c.raws && typeof c.raws.between == "string" && (f += c.raws.between.length), f;
        }
        function y(c) {
          let f = "initial", F = "initial", _, w = false, E = [];
          for (let N = 0; N < c.length; N++) {
            let x = c[N];
            switch (f) {
              case "initial":
                if (x === "'") {
                  f = "single-quotes";
                  continue;
                }
                if (x === '"') {
                  f = "double-quotes";
                  continue;
                }
                if ((x === "u" || x === "U") && c.slice(N, N + 4).toLowerCase() === "url(") {
                  f = "url", N += 3;
                  continue;
                }
                if (x === "*" && c[N - 1] === "/") {
                  f = "comment-block";
                  continue;
                }
                if (x === "/" && c[N - 1] === "/") {
                  f = "comment-inline", _ = N - 1;
                  continue;
                }
                continue;
              case "single-quotes":
                if (x === "'" && c[N - 1] !== "\\" && (f = F, F = "initial"), x === `
` || x === "\r")
                  return c;
                continue;
              case "double-quotes":
                if (x === '"' && c[N - 1] !== "\\" && (f = F, F = "initial"), x === `
` || x === "\r")
                  return c;
                continue;
              case "url":
                if (x === ")" && (f = "initial"), x === `
` || x === "\r")
                  return c;
                if (x === "'") {
                  f = "single-quotes", F = "url";
                  continue;
                }
                if (x === '"') {
                  f = "double-quotes", F = "url";
                  continue;
                }
                continue;
              case "comment-block":
                x === "/" && c[N - 1] === "*" && (f = "initial");
                continue;
              case "comment-inline":
                (x === '"' || x === "'" || x === "*") && (w = true), (x === `
` || x === "\r") && (w && E.push([_, N]), f = "initial", w = false);
                continue;
            }
          }
          for (let [N, x] of E)
            c = c.slice(0, N) + c.slice(N, x).replace(/["'*]/g, " ") + c.slice(x);
          return c;
        }
        function h2(c) {
          return c.source.startOffset;
        }
        function g(c) {
          return c.source.endOffset;
        }
        r.exports = { locStart: h2, locEnd: g, calculateLoc: i2, replaceQuotesInInlineComments: y };
      } }), Ld = te({ "src/language-css/utils/is-less-parser.js"(e, r) {
        ne();
        function t(s) {
          return s.parser === "css" || s.parser === "less";
        }
        r.exports = t;
      } }), Od = te({ "src/language-css/utils/is-scss.js"(e, r) {
        ne();
        function t(s, a) {
          return s === "less" || s === "scss" ? s === "scss" : /(?:\w\s*:\s*[^:}]+|#){|@import[^\n]+(?:url|,)/.test(a);
        }
        r.exports = t;
      } }), jd = te({ "src/language-css/utils/css-units.evaluate.js"(e, r) {
        r.exports = { em: "em", rem: "rem", ex: "ex", rex: "rex", cap: "cap", rcap: "rcap", ch: "ch", rch: "rch", ic: "ic", ric: "ric", lh: "lh", rlh: "rlh", vw: "vw", svw: "svw", lvw: "lvw", dvw: "dvw", vh: "vh", svh: "svh", lvh: "lvh", dvh: "dvh", vi: "vi", svi: "svi", lvi: "lvi", dvi: "dvi", vb: "vb", svb: "svb", lvb: "lvb", dvb: "dvb", vmin: "vmin", svmin: "svmin", lvmin: "lvmin", dvmin: "dvmin", vmax: "vmax", svmax: "svmax", lvmax: "lvmax", dvmax: "dvmax", cm: "cm", mm: "mm", q: "Q", in: "in", pt: "pt", pc: "pc", px: "px", deg: "deg", grad: "grad", rad: "rad", turn: "turn", s: "s", ms: "ms", hz: "Hz", khz: "kHz", dpi: "dpi", dpcm: "dpcm", dppx: "dppx", x: "x" };
      } }), qd = te({ "src/language-css/utils/print-unit.js"(e, r) {
        ne();
        var t = jd();
        function s(a) {
          let n = a.toLowerCase();
          return Object.prototype.hasOwnProperty.call(t, n) ? t[n] : a;
        }
        r.exports = s;
      } }), Md = te({ "src/language-css/printer-postcss.js"(e, r) {
        ne();
        var t = lt(), { printNumber: s, printString: a, hasNewline: n, isFrontMatterNode: u, isNextLineEmpty: i2, isNonEmptyArray: l } = Ue(), { builders: { join: p2, line: y, hardline: h2, softline: g, group: c, fill: f, indent: F, dedent: _, ifBreak: w, breakParent: E }, utils: { removeLines: N, getDocParts: x } } = qe(), I = Nd(), P = wd(), { insertPragma: $ } = _d(), { getAncestorNode: D, getPropOfDeclNode: T, maybeToLowerCase: m, insideValueFunctionNode: C, insideICSSRuleNode: o, insideAtRuleNode: d, insideURLFunctionInImportAtRuleNode: v, isKeyframeAtRuleKeywords: S, isWideKeywords: b, isLastNode: B, isSCSSControlDirectiveNode: k, isDetachedRulesetDeclarationNode: M, isRelationalOperatorNode: R, isEqualityOperatorNode: q, isMultiplicationNode: J, isDivisionNode: L, isAdditionNode: Q, isSubtractionNode: V, isMathOperatorNode: j, isEachKeywordNode: Y, isForKeywordNode: ie, isURLFunctionNode: ee, isIfElseKeywordNode: ce, hasComposesNode: W, hasParensAroundNode: K, hasEmptyRawBefore: de, isKeyValuePairNode: ue, isKeyInValuePairNode: Fe, isDetachedRulesetCallNode: z, isTemplatePlaceholderNode: U, isTemplatePropNode: Z, isPostcssSimpleVarNode: se, isSCSSMapItemNode: fe, isInlineValueCommentNode: ge, isHashNode: he, isLeftCurlyBraceNode: we, isRightCurlyBraceNode: ke, isWordNode: Re, isColonNode: Ne, isMediaAndSupportsKeywords: Pe, isColorAdjusterFuncNode: oe, lastLineHasInlineComment: H, isAtWordPlaceholderNode: pe, isConfigurationNode: X, isParenGroupNode: le } = Pd(), { locStart: Ae, locEnd: Ee } = kd(), De = Ld(), A = Od(), G = qd();
        function re2(Te) {
          return Te.trailingComma === "es5" || Te.trailingComma === "all";
        }
        function ye(Te, je, Me) {
          let ae = Te.getValue();
          if (!ae)
            return "";
          if (typeof ae == "string")
            return ae;
          switch (ae.type) {
            case "front-matter":
              return [ae.raw, h2];
            case "css-root": {
              let Ve = Ce(Te, je, Me), We = ae.raws.after.trim();
              return We.startsWith(";") && (We = We.slice(1).trim()), [Ve, We ? ` ${We}` : "", x(Ve).length > 0 ? h2 : ""];
            }
            case "css-comment": {
              let Ve = ae.inline || ae.raws.inline, We = je.originalText.slice(Ae(ae), Ee(ae));
              return Ve ? We.trimEnd() : We;
            }
            case "css-rule":
              return [Me("selector"), ae.important ? " !important" : "", ae.nodes ? [ae.selector && ae.selector.type === "selector-unknown" && H(ae.selector.value) ? y : " ", "{", ae.nodes.length > 0 ? F([h2, Ce(Te, je, Me)]) : "", h2, "}", M(ae) ? ";" : ""] : ";"];
            case "css-decl": {
              let Ve = Te.getParentNode(), { between: We } = ae.raws, Xe = We.trim(), st = Xe === ":", O = W(ae) ? N(Me("value")) : Me("value");
              return !st && H(Xe) && (O = F([h2, _(O)])), [ae.raws.before.replace(/[\s;]/g, ""), Ve.type === "css-atrule" && Ve.variable || o(Te) ? ae.prop : m(ae.prop), Xe.startsWith("//") ? " " : "", Xe, ae.extend ? "" : " ", De(je) && ae.extend && ae.selector ? ["extend(", Me("selector"), ")"] : "", O, ae.raws.important ? ae.raws.important.replace(/\s*!\s*important/i, " !important") : ae.important ? " !important" : "", ae.raws.scssDefault ? ae.raws.scssDefault.replace(/\s*!default/i, " !default") : ae.scssDefault ? " !default" : "", ae.raws.scssGlobal ? ae.raws.scssGlobal.replace(/\s*!global/i, " !global") : ae.scssGlobal ? " !global" : "", ae.nodes ? [" {", F([g, Ce(Te, je, Me)]), g, "}"] : Z(ae) && !Ve.raws.semicolon && je.originalText[Ee(ae) - 1] !== ";" ? "" : je.__isHTMLStyleAttribute && B(Te, ae) ? w(";") : ";"];
            }
            case "css-atrule": {
              let Ve = Te.getParentNode(), We = U(ae) && !Ve.raws.semicolon && je.originalText[Ee(ae) - 1] !== ";";
              if (De(je)) {
                if (ae.mixin)
                  return [Me("selector"), ae.important ? " !important" : "", We ? "" : ";"];
                if (ae.function)
                  return [ae.name, Me("params"), We ? "" : ";"];
                if (ae.variable)
                  return ["@", ae.name, ": ", ae.value ? Me("value") : "", ae.raws.between.trim() ? ae.raws.between.trim() + " " : "", ae.nodes ? ["{", F([ae.nodes.length > 0 ? g : "", Ce(Te, je, Me)]), g, "}"] : "", We ? "" : ";"];
              }
              return ["@", z(ae) || ae.name.endsWith(":") ? ae.name : m(ae.name), ae.params ? [z(ae) ? "" : U(ae) ? ae.raws.afterName === "" ? "" : ae.name.endsWith(":") ? " " : /^\s*\n\s*\n/.test(ae.raws.afterName) ? [h2, h2] : /^\s*\n/.test(ae.raws.afterName) ? h2 : " " : " ", Me("params")] : "", ae.selector ? F([" ", Me("selector")]) : "", ae.value ? c([" ", Me("value"), k(ae) ? K(ae) ? " " : y : ""]) : ae.name === "else" ? " " : "", ae.nodes ? [k(ae) ? "" : ae.selector && !ae.selector.nodes && typeof ae.selector.value == "string" && H(ae.selector.value) || !ae.selector && typeof ae.params == "string" && H(ae.params) ? y : " ", "{", F([ae.nodes.length > 0 ? g : "", Ce(Te, je, Me)]), g, "}"] : We ? "" : ";"];
            }
            case "media-query-list": {
              let Ve = [];
              return Te.each((We) => {
                let Xe = We.getValue();
                Xe.type === "media-query" && Xe.value === "" || Ve.push(Me());
              }, "nodes"), c(F(p2(y, Ve)));
            }
            case "media-query":
              return [p2(" ", Te.map(Me, "nodes")), B(Te, ae) ? "" : ","];
            case "media-type":
              return Oe(Se(ae.value, je));
            case "media-feature-expression":
              return ae.nodes ? ["(", ...Te.map(Me, "nodes"), ")"] : ae.value;
            case "media-feature":
              return m(Se(ae.value.replace(/ +/g, " "), je));
            case "media-colon":
              return [ae.value, " "];
            case "media-value":
              return Oe(Se(ae.value, je));
            case "media-keyword":
              return Se(ae.value, je);
            case "media-url":
              return Se(ae.value.replace(/^url\(\s+/gi, "url(").replace(/\s+\)$/g, ")"), je);
            case "media-unknown":
              return ae.value;
            case "selector-root":
              return c([d(Te, "custom-selector") ? [D(Te, "css-atrule").customSelector, y] : "", p2([",", d(Te, ["extend", "custom-selector", "nest"]) ? y : h2], Te.map(Me, "nodes"))]);
            case "selector-selector":
              return c(F(Te.map(Me, "nodes")));
            case "selector-comment":
              return ae.value;
            case "selector-string":
              return Se(ae.value, je);
            case "selector-tag": {
              let Ve = Te.getParentNode(), We = Ve && Ve.nodes.indexOf(ae), Xe = We && Ve.nodes[We - 1];
              return [ae.namespace ? [ae.namespace === true ? "" : ae.namespace.trim(), "|"] : "", Xe.type === "selector-nesting" ? ae.value : Oe(S(Te, ae.value) ? ae.value.toLowerCase() : ae.value)];
            }
            case "selector-id":
              return ["#", ae.value];
            case "selector-class":
              return [".", Oe(Se(ae.value, je))];
            case "selector-attribute": {
              var nt;
              return ["[", ae.namespace ? [ae.namespace === true ? "" : ae.namespace.trim(), "|"] : "", ae.attribute.trim(), (nt = ae.operator) !== null && nt !== void 0 ? nt : "", ae.value ? Ie(Se(ae.value.trim(), je), je) : "", ae.insensitive ? " i" : "", "]"];
            }
            case "selector-combinator": {
              if (ae.value === "+" || ae.value === ">" || ae.value === "~" || ae.value === ">>>") {
                let Xe = Te.getParentNode();
                return [Xe.type === "selector-selector" && Xe.nodes[0] === ae ? "" : y, ae.value, B(Te, ae) ? "" : " "];
              }
              let Ve = ae.value.trim().startsWith("(") ? y : "", We = Oe(Se(ae.value.trim(), je)) || y;
              return [Ve, We];
            }
            case "selector-universal":
              return [ae.namespace ? [ae.namespace === true ? "" : ae.namespace.trim(), "|"] : "", ae.value];
            case "selector-pseudo":
              return [m(ae.value), l(ae.nodes) ? c(["(", F([g, p2([",", y], Te.map(Me, "nodes"))]), g, ")"]) : ""];
            case "selector-nesting":
              return ae.value;
            case "selector-unknown": {
              let Ve = D(Te, "css-rule");
              if (Ve && Ve.isSCSSNesterProperty)
                return Oe(Se(m(ae.value), je));
              let We = Te.getParentNode();
              if (We.raws && We.raws.selector) {
                let st = Ae(We), O = st + We.raws.selector.length;
                return je.originalText.slice(st, O).trim();
              }
              let Xe = Te.getParentNode(1);
              if (We.type === "value-paren_group" && Xe && Xe.type === "value-func" && Xe.value === "selector") {
                let st = Ee(We.open) + 1, O = Ae(We.close), me = je.originalText.slice(st, O).trim();
                return H(me) ? [E, me] : me;
              }
              return ae.value;
            }
            case "value-value":
            case "value-root":
              return Me("group");
            case "value-comment":
              return je.originalText.slice(Ae(ae), Ee(ae));
            case "value-comma_group": {
              let Ve = Te.getParentNode(), We = Te.getParentNode(1), Xe = T(Te), st = Xe && Ve.type === "value-value" && (Xe === "grid" || Xe.startsWith("grid-template")), O = D(Te, "css-atrule"), me = O && k(O), _e = ae.groups.some((at) => ge(at)), He = Te.map(Me, "groups"), Ge = [], it = C(Te, "url"), Qe = false, rt = false;
              for (let at = 0; at < ae.groups.length; ++at) {
                var tt;
                Ge.push(He[at]);
                let Ze = ae.groups[at - 1], Le = ae.groups[at], $e = ae.groups[at + 1], sr = ae.groups[at + 2];
                if (it) {
                  ($e && Q($e) || Q(Le)) && Ge.push(" ");
                  continue;
                }
                if (d(Te, "forward") && Le.type === "value-word" && Le.value && Ze !== void 0 && Ze.type === "value-word" && Ze.value === "as" && $e.type === "value-operator" && $e.value === "*" || !$e || Le.type === "value-word" && Le.value.endsWith("-") && pe($e))
                  continue;
                if (Le.type === "value-string" && Le.quoted) {
                  let $r = Le.value.lastIndexOf("#{"), Vr = Le.value.lastIndexOf("}");
                  $r !== -1 && Vr !== -1 ? Qe = $r > Vr : $r !== -1 ? Qe = true : Vr !== -1 && (Qe = false);
                }
                if (Qe || Ne(Le) || Ne($e) || Le.type === "value-atword" && (Le.value === "" || Le.value.endsWith("[")) || $e.type === "value-word" && $e.value.startsWith("]") || Le.value === "~" || Le.value && Le.value.includes("\\") && $e && $e.type !== "value-comment" || Ze && Ze.value && Ze.value.indexOf("\\") === Ze.value.length - 1 && Le.type === "value-operator" && Le.value === "/" || Le.value === "\\" || se(Le, $e) || he(Le) || we(Le) || ke($e) || we($e) && de($e) || ke(Le) && de($e) || Le.value === "--" && he($e))
                  continue;
                let Rr = j(Le), ou = j($e);
                if ((Rr && he($e) || ou && ke(Le)) && de($e) || !Ze && L(Le) || C(Te, "calc") && (Q(Le) || Q($e) || V(Le) || V($e)) && de($e))
                  continue;
                let qo = (Q(Le) || V(Le)) && at === 0 && ($e.type === "value-number" || $e.isHex) && We && oe(We) && !de($e), lu = sr && sr.type === "value-func" || sr && Re(sr) || Le.type === "value-func" || Re(Le), cu = $e.type === "value-func" || Re($e) || Ze && Ze.type === "value-func" || Ze && Re(Ze);
                if (!(!(J($e) || J(Le)) && !C(Te, "calc") && !qo && (L($e) && !lu || L(Le) && !cu || Q($e) && !lu || Q(Le) && !cu || V($e) || V(Le)) && (de($e) || Rr && (!Ze || Ze && j(Ze)))) && !((je.parser === "scss" || je.parser === "less") && Rr && Le.value === "-" && le($e) && Ee(Le) === Ae($e.open) && $e.open.value === "(")) {
                  if (ge(Le)) {
                    if (Ve.type === "value-paren_group") {
                      Ge.push(_(h2));
                      continue;
                    }
                    Ge.push(h2);
                    continue;
                  }
                  if (me && (q($e) || R($e) || ce($e) || Y(Le) || ie(Le))) {
                    Ge.push(" ");
                    continue;
                  }
                  if (O && O.name.toLowerCase() === "namespace") {
                    Ge.push(" ");
                    continue;
                  }
                  if (st) {
                    Le.source && $e.source && Le.source.start.line !== $e.source.start.line ? (Ge.push(h2), rt = true) : Ge.push(" ");
                    continue;
                  }
                  if (ou) {
                    Ge.push(" ");
                    continue;
                  }
                  if (!($e && $e.value === "...") && !(pe(Le) && pe($e) && Ee(Le) === Ae($e))) {
                    if (pe(Le) && le($e) && Ee(Le) === Ae($e.open)) {
                      Ge.push(g);
                      continue;
                    }
                    if (Le.value === "with" && le($e)) {
                      Ge.push(" ");
                      continue;
                    }
                    (tt = Le.value) !== null && tt !== void 0 && tt.endsWith("#") && $e.value === "{" && le($e.group) || Ge.push(y);
                  }
                }
              }
              return _e && Ge.push(E), rt && Ge.unshift(h2), me ? c(F(Ge)) : v(Te) ? c(f(Ge)) : c(F(f(Ge)));
            }
            case "value-paren_group": {
              let Ve = Te.getParentNode();
              if (Ve && ee(Ve) && (ae.groups.length === 1 || ae.groups.length > 0 && ae.groups[0].type === "value-comma_group" && ae.groups[0].groups.length > 0 && ae.groups[0].groups[0].type === "value-word" && ae.groups[0].groups[0].value.startsWith("data:")))
                return [ae.open ? Me("open") : "", p2(",", Te.map(Me, "groups")), ae.close ? Me("close") : ""];
              if (!ae.open) {
                let it = Te.map(Me, "groups"), Qe = [];
                for (let rt = 0; rt < it.length; rt++)
                  rt !== 0 && Qe.push([",", y]), Qe.push(it[rt]);
                return c(F(f(Qe)));
              }
              let We = fe(Te), Xe = t(ae.groups), st = Xe && Xe.type === "value-comment", O = Fe(ae, Ve), me = X(ae, Ve), _e = me || We && !O, He = me || O, Ge = c([ae.open ? Me("open") : "", F([g, p2([y], Te.map((it, Qe) => {
                let rt = it.getValue(), at = Qe === ae.groups.length - 1, Ze = [Me(), at ? "" : ","];
                if (ue(rt) && rt.type === "value-comma_group" && rt.groups && rt.groups[0].type !== "value-paren_group" && rt.groups[2] && rt.groups[2].type === "value-paren_group") {
                  let Le = x(Ze[0].contents.contents);
                  Le[1] = c(Le[1]), Ze = [c(_(Ze))];
                }
                if (!at && rt.type === "value-comma_group" && l(rt.groups)) {
                  let Le = t(rt.groups);
                  !Le.source && Le.close && (Le = Le.close), Le.source && i2(je.originalText, Le, Ee) && Ze.push(h2);
                }
                return Ze;
              }, "groups"))]), w(!st && A(je.parser, je.originalText) && We && re2(je) ? "," : ""), g, ae.close ? Me("close") : ""], { shouldBreak: _e });
              return He ? _(Ge) : Ge;
            }
            case "value-func":
              return [ae.value, d(Te, "supports") && Pe(ae) ? " " : "", Me("group")];
            case "value-paren":
              return ae.value;
            case "value-number":
              return [Je(ae.value), G(ae.unit)];
            case "value-operator":
              return ae.value;
            case "value-word":
              return ae.isColor && ae.isHex || b(ae.value) ? ae.value.toLowerCase() : ae.value;
            case "value-colon": {
              let Ve = Te.getParentNode(), We = Ve && Ve.groups.indexOf(ae), Xe = We && Ve.groups[We - 1];
              return [ae.value, Xe && typeof Xe.value == "string" && t(Xe.value) === "\\" || C(Te, "url") ? "" : y];
            }
            case "value-comma":
              return [ae.value, " "];
            case "value-string":
              return a(ae.raws.quote + ae.value + ae.raws.quote, je);
            case "value-atword":
              return ["@", ae.value];
            case "value-unicode-range":
              return ae.value;
            case "value-unknown":
              return ae.value;
            default:
              throw new Error(`Unknown postcss type ${JSON.stringify(ae.type)}`);
          }
        }
        function Ce(Te, je, Me) {
          let ae = [];
          return Te.each((nt, tt, Ve) => {
            let We = Ve[tt - 1];
            if (We && We.type === "css-comment" && We.text.trim() === "prettier-ignore") {
              let Xe = nt.getValue();
              ae.push(je.originalText.slice(Ae(Xe), Ee(Xe)));
            } else
              ae.push(Me());
            tt !== Ve.length - 1 && (Ve[tt + 1].type === "css-comment" && !n(je.originalText, Ae(Ve[tt + 1]), { backwards: true }) && !u(Ve[tt]) || Ve[tt + 1].type === "css-atrule" && Ve[tt + 1].name === "else" && Ve[tt].type !== "css-comment" ? ae.push(" ") : (ae.push(je.__isHTMLStyleAttribute ? y : h2), i2(je.originalText, nt.getValue(), Ee) && !u(Ve[tt]) && ae.push(h2)));
          }, "nodes"), ae;
        }
        var Be = /(["'])(?:(?!\1)[^\\]|\\.)*\1/gs, ve = /(?:\d*\.\d+|\d+\.?)(?:[Ee][+-]?\d+)?/g, ze = /[A-Za-z]+/g, be = /[$@]?[A-Z_a-z\u0080-\uFFFF][\w\u0080-\uFFFF-]*/g, Ye = new RegExp(Be.source + `|(${be.source})?(${ve.source})(${ze.source})?`, "g");
        function Se(Te, je) {
          return Te.replace(Be, (Me) => a(Me, je));
        }
        function Ie(Te, je) {
          let Me = je.singleQuote ? "'" : '"';
          return Te.includes('"') || Te.includes("'") ? Te : Me + Te + Me;
        }
        function Oe(Te) {
          return Te.replace(Ye, (je, Me, ae, nt, tt) => !ae && nt ? Je(nt) + m(tt || "") : je);
        }
        function Je(Te) {
          return s(Te).replace(/\.0(?=$|e)/, "");
        }
        r.exports = { print: ye, embed: P, insertPragma: $, massageAstNode: I };
      } }), Rd = te({ "src/language-css/options.js"(e, r) {
        ne();
        var t = Mt();
        r.exports = { singleQuote: t.singleQuote };
      } }), $d = te({ "src/language-css/parsers.js"() {
        ne();
      } }), Vd = te({ "node_modules/linguist-languages/data/CSS.json"(e, r) {
        r.exports = { name: "CSS", type: "markup", tmScope: "source.css", aceMode: "css", codemirrorMode: "css", codemirrorMimeType: "text/css", color: "#563d7c", extensions: [".css"], languageId: 50 };
      } }), Wd = te({ "node_modules/linguist-languages/data/PostCSS.json"(e, r) {
        r.exports = { name: "PostCSS", type: "markup", color: "#dc3a0c", tmScope: "source.postcss", group: "CSS", extensions: [".pcss", ".postcss"], aceMode: "text", languageId: 262764437 };
      } }), Hd = te({ "node_modules/linguist-languages/data/Less.json"(e, r) {
        r.exports = { name: "Less", type: "markup", color: "#1d365d", aliases: ["less-css"], extensions: [".less"], tmScope: "source.css.less", aceMode: "less", codemirrorMode: "css", codemirrorMimeType: "text/css", languageId: 198 };
      } }), Gd = te({ "node_modules/linguist-languages/data/SCSS.json"(e, r) {
        r.exports = { name: "SCSS", type: "markup", color: "#c6538c", tmScope: "source.css.scss", aceMode: "scss", codemirrorMode: "css", codemirrorMimeType: "text/x-scss", extensions: [".scss"], languageId: 329 };
      } }), Ud = te({ "src/language-css/index.js"(e, r) {
        ne();
        var t = _t(), s = Md(), a = Rd(), n = $d(), u = [t(Vd(), (l) => ({ since: "1.4.0", parsers: ["css"], vscodeLanguageIds: ["css"], extensions: [...l.extensions, ".wxss"] })), t(Wd(), () => ({ since: "1.4.0", parsers: ["css"], vscodeLanguageIds: ["postcss"] })), t(Hd(), () => ({ since: "1.4.0", parsers: ["less"], vscodeLanguageIds: ["less"] })), t(Gd(), () => ({ since: "1.4.0", parsers: ["scss"], vscodeLanguageIds: ["scss"] }))], i2 = { postcss: s };
        r.exports = { languages: u, options: a, printers: i2, parsers: n };
      } }), Jd = te({ "src/language-handlebars/loc.js"(e, r) {
        ne();
        function t(a) {
          return a.loc.start.offset;
        }
        function s(a) {
          return a.loc.end.offset;
        }
        r.exports = { locStart: t, locEnd: s };
      } }), zd = te({ "src/language-handlebars/clean.js"(e, r) {
        ne();
        function t(s, a) {
          if (s.type === "TextNode") {
            let n = s.chars.trim();
            if (!n)
              return null;
            a.chars = n.replace(/[\t\n\f\r ]+/g, " ");
          }
          s.type === "AttrNode" && s.name.toLowerCase() === "class" && delete a.value;
        }
        t.ignoredProperties = /* @__PURE__ */ new Set(["loc", "selfClosing"]), r.exports = t;
      } }), Xd = te({ "src/language-handlebars/html-void-elements.evaluate.js"(e, r) {
        r.exports = ["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"];
      } }), Kd = te({ "src/language-handlebars/utils.js"(e, r) {
        ne();
        var t = lt(), s = Xd();
        function a(x) {
          let I = x.getValue(), P = x.getParentNode(0);
          return !!(g(x, ["ElementNode"]) && t(P.children) === I || g(x, ["Block"]) && t(P.body) === I);
        }
        function n(x) {
          return x.toUpperCase() === x;
        }
        function u(x) {
          return h2(x, ["ElementNode"]) && typeof x.tag == "string" && !x.tag.startsWith(":") && (n(x.tag[0]) || x.tag.includes("."));
        }
        var i2 = new Set(s);
        function l(x) {
          return i2.has(x.toLowerCase()) && !n(x[0]);
        }
        function p2(x) {
          return x.selfClosing === true || l(x.tag) || u(x) && x.children.every((I) => y(I));
        }
        function y(x) {
          return h2(x, ["TextNode"]) && !/\S/.test(x.chars);
        }
        function h2(x, I) {
          return x && I.includes(x.type);
        }
        function g(x, I) {
          let P = x.getParentNode(0);
          return h2(P, I);
        }
        function c(x, I) {
          let P = _(x);
          return h2(P, I);
        }
        function f(x, I) {
          let P = w(x);
          return h2(P, I);
        }
        function F(x, I) {
          var P, $, D, T;
          let m = x.getValue(), C = (P = x.getParentNode(0)) !== null && P !== void 0 ? P : {}, o = ($ = (D = (T = C.children) !== null && T !== void 0 ? T : C.body) !== null && D !== void 0 ? D : C.parts) !== null && $ !== void 0 ? $ : [], d = o.indexOf(m);
          return d !== -1 && o[d + I];
        }
        function _(x) {
          let I = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
          return F(x, -I);
        }
        function w(x) {
          return F(x, 1);
        }
        function E(x) {
          return h2(x, ["MustacheCommentStatement"]) && typeof x.value == "string" && x.value.trim() === "prettier-ignore";
        }
        function N(x) {
          let I = x.getValue(), P = _(x, 2);
          return E(I) || E(P);
        }
        r.exports = { getNextNode: w, getPreviousNode: _, hasPrettierIgnore: N, isLastNodeOfSiblings: a, isNextNodeOfSomeType: f, isNodeOfSomeType: h2, isParentOfSomeType: g, isPreviousNodeOfSomeType: c, isVoid: p2, isWhitespaceNode: y };
      } }), Yd = te({ "src/language-handlebars/printer-glimmer.js"(e, r) {
        ne();
        var { builders: { dedent: t, fill: s, group: a, hardline: n, ifBreak: u, indent: i2, join: l, line: p2, softline: y }, utils: { getDocParts: h2, replaceTextEndOfLine: g } } = qe(), { getPreferredQuote: c, isNonEmptyArray: f } = Ue(), { locStart: F, locEnd: _ } = Jd(), w = zd(), { getNextNode: E, getPreviousNode: N, hasPrettierIgnore: x, isLastNodeOfSiblings: I, isNextNodeOfSomeType: P, isNodeOfSomeType: $, isParentOfSomeType: D, isPreviousNodeOfSomeType: T, isVoid: m, isWhitespaceNode: C } = Kd(), o = 2;
        function d(H, pe, X) {
          let le = H.getValue();
          if (!le)
            return "";
          if (x(H))
            return pe.originalText.slice(F(le), _(le));
          let Ae = pe.singleQuote ? "'" : '"';
          switch (le.type) {
            case "Block":
            case "Program":
            case "Template":
              return a(H.map(X, "body"));
            case "ElementNode": {
              let Ee = a(S(H, X)), De = pe.htmlWhitespaceSensitivity === "ignore" && P(H, ["ElementNode"]) ? y : "";
              if (m(le))
                return [Ee, De];
              let A = ["</", le.tag, ">"];
              return le.children.length === 0 ? [Ee, i2(A), De] : pe.htmlWhitespaceSensitivity === "ignore" ? [Ee, i2(b(H, pe, X)), n, i2(A), De] : [Ee, i2(a(b(H, pe, X))), i2(A), De];
            }
            case "BlockStatement": {
              let Ee = H.getParentNode(1);
              return Ee && Ee.inverse && Ee.inverse.body.length === 1 && Ee.inverse.body[0] === le && Ee.inverse.body[0].path.parts[0] === Ee.path.parts[0] ? [ie(H, X, Ee.inverse.body[0].path.parts[0]), de(H, X, pe), ue(H, X, pe)] : [j(H, X), a([de(H, X, pe), ue(H, X, pe), ee(H, X, pe)])];
            }
            case "ElementModifierStatement":
              return a(["{{", Re(H, X), "}}"]);
            case "MustacheStatement":
              return a([k(le), Re(H, X), M(le)]);
            case "SubExpression":
              return a(["(", ke(H, X), y, ")"]);
            case "AttrNode": {
              let Ee = le.value.type === "TextNode";
              if (Ee && le.value.chars === "" && F(le.value) === _(le.value))
                return le.name;
              let A = Ee ? c(le.value.chars, Ae).quote : le.value.type === "ConcatStatement" ? c(le.value.parts.filter((re2) => re2.type === "TextNode").map((re2) => re2.chars).join(""), Ae).quote : "", G = X("value");
              return [le.name, "=", A, le.name === "class" && A ? a(i2(G)) : G, A];
            }
            case "ConcatStatement":
              return H.map(X, "parts");
            case "Hash":
              return l(p2, H.map(X, "pairs"));
            case "HashPair":
              return [le.key, "=", X("value")];
            case "TextNode": {
              let Ee = le.chars.replace(/{{/g, "\\{{"), De = U(H);
              if (De) {
                if (De === "class") {
                  let Ye = Ee.trim().split(/\s+/).join(" "), Se = false, Ie = false;
                  return D(H, ["ConcatStatement"]) && (T(H, ["MustacheStatement"]) && /^\s/.test(Ee) && (Se = true), P(H, ["MustacheStatement"]) && /\s$/.test(Ee) && Ye !== "" && (Ie = true)), [Se ? p2 : "", Ye, Ie ? p2 : ""];
                }
                return g(Ee);
              }
              let G = /^[\t\n\f\r ]*$/.test(Ee), re2 = !N(H), ye = !E(H);
              if (pe.htmlWhitespaceSensitivity !== "ignore") {
                let Ye = /^[\t\n\f\r ]*/, Se = /[\t\n\f\r ]*$/, Ie = ye && D(H, ["Template"]), Oe = re2 && D(H, ["Template"]);
                if (G) {
                  if (Oe || Ie)
                    return "";
                  let ae = [p2], nt = Z(Ee);
                  return nt && (ae = ge(nt)), I(H) && (ae = ae.map((tt) => t(tt))), ae;
                }
                let [Je] = Ee.match(Ye), [Te] = Ee.match(Se), je = [];
                if (Je) {
                  je = [p2];
                  let ae = Z(Je);
                  ae && (je = ge(ae)), Ee = Ee.replace(Ye, "");
                }
                let Me = [];
                if (Te) {
                  if (!Ie) {
                    Me = [p2];
                    let ae = Z(Te);
                    ae && (Me = ge(ae)), I(H) && (Me = Me.map((nt) => t(nt)));
                  }
                  Ee = Ee.replace(Se, "");
                }
                return [...je, s(Fe(Ee)), ...Me];
              }
              let Ce = Z(Ee), Be = se(Ee), ve = fe(Ee);
              if ((re2 || ye) && G && D(H, ["Block", "ElementNode", "Template"]))
                return "";
              G && Ce ? (Be = Math.min(Ce, o), ve = 0) : (P(H, ["BlockStatement", "ElementNode"]) && (ve = Math.max(ve, 1)), T(H, ["BlockStatement", "ElementNode"]) && (Be = Math.max(Be, 1)));
              let ze = "", be = "";
              return ve === 0 && P(H, ["MustacheStatement"]) && (be = " "), Be === 0 && T(H, ["MustacheStatement"]) && (ze = " "), re2 && (Be = 0, ze = ""), ye && (ve = 0, be = ""), Ee = Ee.replace(/^[\t\n\f\r ]+/g, ze).replace(/[\t\n\f\r ]+$/, be), [...ge(Be), s(Fe(Ee)), ...ge(ve)];
            }
            case "MustacheCommentStatement": {
              let Ee = F(le), De = _(le), A = pe.originalText.charAt(Ee + 2) === "~", G = pe.originalText.charAt(De - 3) === "~", re2 = le.value.includes("}}") ? "--" : "";
              return ["{{", A ? "~" : "", "!", re2, le.value, re2, G ? "~" : "", "}}"];
            }
            case "PathExpression":
              return le.original;
            case "BooleanLiteral":
              return String(le.value);
            case "CommentStatement":
              return ["<!--", le.value, "-->"];
            case "StringLiteral": {
              if (we(H)) {
                let Ee = pe.singleQuote ? '"' : "'";
                return he(le.value, Ee);
              }
              return he(le.value, Ae);
            }
            case "NumberLiteral":
              return String(le.value);
            case "UndefinedLiteral":
              return "undefined";
            case "NullLiteral":
              return "null";
            default:
              throw new Error("unknown glimmer type: " + JSON.stringify(le.type));
          }
        }
        function v(H, pe) {
          return F(H) - F(pe);
        }
        function S(H, pe) {
          let X = H.getValue(), le = ["attributes", "modifiers", "comments"].filter((Ee) => f(X[Ee])), Ae = le.flatMap((Ee) => X[Ee]).sort(v);
          for (let Ee of le)
            H.each((De) => {
              let A = Ae.indexOf(De.getValue());
              Ae.splice(A, 1, [p2, pe()]);
            }, Ee);
          return f(X.blockParams) && Ae.push(p2, oe(X)), ["<", X.tag, i2(Ae), B(X)];
        }
        function b(H, pe, X) {
          let Ae = H.getValue().children.every((Ee) => C(Ee));
          return pe.htmlWhitespaceSensitivity === "ignore" && Ae ? "" : H.map((Ee, De) => {
            let A = X();
            return De === 0 && pe.htmlWhitespaceSensitivity === "ignore" ? [y, A] : A;
          }, "children");
        }
        function B(H) {
          return m(H) ? u([y, "/>"], [" />", y]) : u([y, ">"], ">");
        }
        function k(H) {
          let pe = H.escaped === false ? "{{{" : "{{", X = H.strip && H.strip.open ? "~" : "";
          return [pe, X];
        }
        function M(H) {
          let pe = H.escaped === false ? "}}}" : "}}";
          return [H.strip && H.strip.close ? "~" : "", pe];
        }
        function R(H) {
          let pe = k(H), X = H.openStrip.open ? "~" : "";
          return [pe, X, "#"];
        }
        function q(H) {
          let pe = M(H);
          return [H.openStrip.close ? "~" : "", pe];
        }
        function J(H) {
          let pe = k(H), X = H.closeStrip.open ? "~" : "";
          return [pe, X, "/"];
        }
        function L(H) {
          let pe = M(H);
          return [H.closeStrip.close ? "~" : "", pe];
        }
        function Q(H) {
          let pe = k(H), X = H.inverseStrip.open ? "~" : "";
          return [pe, X];
        }
        function V(H) {
          let pe = M(H);
          return [H.inverseStrip.close ? "~" : "", pe];
        }
        function j(H, pe) {
          let X = H.getValue(), le = [], Ae = Pe(H, pe);
          return Ae && le.push(a(Ae)), f(X.program.blockParams) && le.push(oe(X.program)), a([R(X), Ne(H, pe), le.length > 0 ? i2([p2, l(p2, le)]) : "", y, q(X)]);
        }
        function Y(H, pe) {
          return [pe.htmlWhitespaceSensitivity === "ignore" ? n : "", Q(H), "else", V(H)];
        }
        function ie(H, pe, X) {
          let le = H.getValue(), Ae = H.getParentNode(1);
          return a([Q(Ae), ["else", " ", X], i2([p2, a(Pe(H, pe)), ...f(le.program.blockParams) ? [p2, oe(le.program)] : []]), y, V(Ae)]);
        }
        function ee(H, pe, X) {
          let le = H.getValue();
          return X.htmlWhitespaceSensitivity === "ignore" ? [ce(le) ? y : n, J(le), pe("path"), L(le)] : [J(le), pe("path"), L(le)];
        }
        function ce(H) {
          return $(H, ["BlockStatement"]) && H.program.body.every((pe) => C(pe));
        }
        function W(H) {
          return K(H) && H.inverse.body.length === 1 && $(H.inverse.body[0], ["BlockStatement"]) && H.inverse.body[0].path.parts[0] === H.path.parts[0];
        }
        function K(H) {
          return $(H, ["BlockStatement"]) && H.inverse;
        }
        function de(H, pe, X) {
          let le = H.getValue();
          if (ce(le))
            return "";
          let Ae = pe("program");
          return X.htmlWhitespaceSensitivity === "ignore" ? i2([n, Ae]) : i2(Ae);
        }
        function ue(H, pe, X) {
          let le = H.getValue(), Ae = pe("inverse"), Ee = X.htmlWhitespaceSensitivity === "ignore" ? [n, Ae] : Ae;
          return W(le) ? Ee : K(le) ? [Y(le, X), i2(Ee)] : "";
        }
        function Fe(H) {
          return h2(l(p2, z(H)));
        }
        function z(H) {
          return H.split(/[\t\n\f\r ]+/);
        }
        function U(H) {
          for (let pe = 0; pe < 2; pe++) {
            let X = H.getParentNode(pe);
            if (X && X.type === "AttrNode")
              return X.name.toLowerCase();
          }
        }
        function Z(H) {
          return H = typeof H == "string" ? H : "", H.split(`
`).length - 1;
        }
        function se(H) {
          H = typeof H == "string" ? H : "";
          let pe = (H.match(/^([^\S\n\r]*[\n\r])+/g) || [])[0] || "";
          return Z(pe);
        }
        function fe(H) {
          H = typeof H == "string" ? H : "";
          let pe = (H.match(/([\n\r][^\S\n\r]*)+$/g) || [])[0] || "";
          return Z(pe);
        }
        function ge() {
          let H = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
          return Array.from({ length: Math.min(H, o) }).fill(n);
        }
        function he(H, pe) {
          let { quote: X, regex: le } = c(H, pe);
          return [X, H.replace(le, `\\${X}`), X];
        }
        function we(H) {
          let pe = 0, X = H.getParentNode(pe);
          for (; X && $(X, ["SubExpression"]); )
            pe++, X = H.getParentNode(pe);
          return !!(X && $(H.getParentNode(pe + 1), ["ConcatStatement"]) && $(H.getParentNode(pe + 2), ["AttrNode"]));
        }
        function ke(H, pe) {
          let X = Ne(H, pe), le = Pe(H, pe);
          return le ? i2([X, p2, a(le)]) : X;
        }
        function Re(H, pe) {
          let X = Ne(H, pe), le = Pe(H, pe);
          return le ? [i2([X, p2, le]), y] : X;
        }
        function Ne(H, pe) {
          return pe("path");
        }
        function Pe(H, pe) {
          let X = H.getValue(), le = [];
          if (X.params.length > 0) {
            let Ae = H.map(pe, "params");
            le.push(...Ae);
          }
          if (X.hash && X.hash.pairs.length > 0) {
            let Ae = pe("hash");
            le.push(Ae);
          }
          return le.length === 0 ? "" : l(p2, le);
        }
        function oe(H) {
          return ["as |", H.blockParams.join(" "), "|"];
        }
        r.exports = { print: d, massageAstNode: w };
      } }), Qd = te({ "src/language-handlebars/parsers.js"() {
        ne();
      } }), Zd = te({ "node_modules/linguist-languages/data/Handlebars.json"(e, r) {
        r.exports = { name: "Handlebars", type: "markup", color: "#f7931e", aliases: ["hbs", "htmlbars"], extensions: [".handlebars", ".hbs"], tmScope: "text.html.handlebars", aceMode: "handlebars", languageId: 155 };
      } }), eg = te({ "src/language-handlebars/index.js"(e, r) {
        ne();
        var t = _t(), s = Yd(), a = Qd(), n = [t(Zd(), () => ({ since: "2.3.0", parsers: ["glimmer"], vscodeLanguageIds: ["handlebars"] }))], u = { glimmer: s };
        r.exports = { languages: n, printers: u, parsers: a };
      } }), tg = te({ "src/language-graphql/pragma.js"(e, r) {
        ne();
        function t(a) {
          return /^\s*#[^\S\n]*@(?:format|prettier)\s*(?:\n|$)/.test(a);
        }
        function s(a) {
          return `# @format

` + a;
        }
        r.exports = { hasPragma: t, insertPragma: s };
      } }), rg = te({ "src/language-graphql/loc.js"(e, r) {
        ne();
        function t(a) {
          return typeof a.start == "number" ? a.start : a.loc && a.loc.start;
        }
        function s(a) {
          return typeof a.end == "number" ? a.end : a.loc && a.loc.end;
        }
        r.exports = { locStart: t, locEnd: s };
      } }), ng = te({ "src/language-graphql/printer-graphql.js"(e, r) {
        ne();
        var { builders: { join: t, hardline: s, line: a, softline: n, group: u, indent: i2, ifBreak: l } } = qe(), { isNextLineEmpty: p2, isNonEmptyArray: y } = Ue(), { insertPragma: h2 } = tg(), { locStart: g, locEnd: c } = rg();
        function f(P, $, D) {
          let T = P.getValue();
          if (!T)
            return "";
          if (typeof T == "string")
            return T;
          switch (T.kind) {
            case "Document": {
              let m = [];
              return P.each((C, o, d) => {
                m.push(D()), o !== d.length - 1 && (m.push(s), p2($.originalText, C.getValue(), c) && m.push(s));
              }, "definitions"), [...m, s];
            }
            case "OperationDefinition": {
              let m = $.originalText[g(T)] !== "{", C = Boolean(T.name);
              return [m ? T.operation : "", m && C ? [" ", D("name")] : "", m && !C && y(T.variableDefinitions) ? " " : "", y(T.variableDefinitions) ? u(["(", i2([n, t([l("", ", "), n], P.map(D, "variableDefinitions"))]), n, ")"]) : "", F(P, D, T), T.selectionSet ? !m && !C ? "" : " " : "", D("selectionSet")];
            }
            case "FragmentDefinition":
              return ["fragment ", D("name"), y(T.variableDefinitions) ? u(["(", i2([n, t([l("", ", "), n], P.map(D, "variableDefinitions"))]), n, ")"]) : "", " on ", D("typeCondition"), F(P, D, T), " ", D("selectionSet")];
            case "SelectionSet":
              return ["{", i2([s, t(s, _(P, $, D, "selections"))]), s, "}"];
            case "Field":
              return u([T.alias ? [D("alias"), ": "] : "", D("name"), T.arguments.length > 0 ? u(["(", i2([n, t([l("", ", "), n], _(P, $, D, "arguments"))]), n, ")"]) : "", F(P, D, T), T.selectionSet ? " " : "", D("selectionSet")]);
            case "Name":
              return T.value;
            case "StringValue": {
              if (T.block) {
                let m = T.value.replace(/"""/g, "\\$&").split(`
`);
                return m.length === 1 && (m[0] = m[0].trim()), m.every((C) => C === "") && (m.length = 0), t(s, ['"""', ...m, '"""']);
              }
              return ['"', T.value.replace(/["\\]/g, "\\$&").replace(/\n/g, "\\n"), '"'];
            }
            case "IntValue":
            case "FloatValue":
            case "EnumValue":
              return T.value;
            case "BooleanValue":
              return T.value ? "true" : "false";
            case "NullValue":
              return "null";
            case "Variable":
              return ["$", D("name")];
            case "ListValue":
              return u(["[", i2([n, t([l("", ", "), n], P.map(D, "values"))]), n, "]"]);
            case "ObjectValue":
              return u(["{", $.bracketSpacing && T.fields.length > 0 ? " " : "", i2([n, t([l("", ", "), n], P.map(D, "fields"))]), n, l("", $.bracketSpacing && T.fields.length > 0 ? " " : ""), "}"]);
            case "ObjectField":
            case "Argument":
              return [D("name"), ": ", D("value")];
            case "Directive":
              return ["@", D("name"), T.arguments.length > 0 ? u(["(", i2([n, t([l("", ", "), n], _(P, $, D, "arguments"))]), n, ")"]) : ""];
            case "NamedType":
              return D("name");
            case "VariableDefinition":
              return [D("variable"), ": ", D("type"), T.defaultValue ? [" = ", D("defaultValue")] : "", F(P, D, T)];
            case "ObjectTypeExtension":
            case "ObjectTypeDefinition":
              return [D("description"), T.description ? s : "", T.kind === "ObjectTypeExtension" ? "extend " : "", "type ", D("name"), T.interfaces.length > 0 ? [" implements ", ...N(P, $, D)] : "", F(P, D, T), T.fields.length > 0 ? [" {", i2([s, t(s, _(P, $, D, "fields"))]), s, "}"] : ""];
            case "FieldDefinition":
              return [D("description"), T.description ? s : "", D("name"), T.arguments.length > 0 ? u(["(", i2([n, t([l("", ", "), n], _(P, $, D, "arguments"))]), n, ")"]) : "", ": ", D("type"), F(P, D, T)];
            case "DirectiveDefinition":
              return [D("description"), T.description ? s : "", "directive ", "@", D("name"), T.arguments.length > 0 ? u(["(", i2([n, t([l("", ", "), n], _(P, $, D, "arguments"))]), n, ")"]) : "", T.repeatable ? " repeatable" : "", " on ", t(" | ", P.map(D, "locations"))];
            case "EnumTypeExtension":
            case "EnumTypeDefinition":
              return [D("description"), T.description ? s : "", T.kind === "EnumTypeExtension" ? "extend " : "", "enum ", D("name"), F(P, D, T), T.values.length > 0 ? [" {", i2([s, t(s, _(P, $, D, "values"))]), s, "}"] : ""];
            case "EnumValueDefinition":
              return [D("description"), T.description ? s : "", D("name"), F(P, D, T)];
            case "InputValueDefinition":
              return [D("description"), T.description ? T.description.block ? s : a : "", D("name"), ": ", D("type"), T.defaultValue ? [" = ", D("defaultValue")] : "", F(P, D, T)];
            case "InputObjectTypeExtension":
            case "InputObjectTypeDefinition":
              return [D("description"), T.description ? s : "", T.kind === "InputObjectTypeExtension" ? "extend " : "", "input ", D("name"), F(P, D, T), T.fields.length > 0 ? [" {", i2([s, t(s, _(P, $, D, "fields"))]), s, "}"] : ""];
            case "SchemaExtension":
              return ["extend schema", F(P, D, T), ...T.operationTypes.length > 0 ? [" {", i2([s, t(s, _(P, $, D, "operationTypes"))]), s, "}"] : []];
            case "SchemaDefinition":
              return [D("description"), T.description ? s : "", "schema", F(P, D, T), " {", T.operationTypes.length > 0 ? i2([s, t(s, _(P, $, D, "operationTypes"))]) : "", s, "}"];
            case "OperationTypeDefinition":
              return [D("operation"), ": ", D("type")];
            case "InterfaceTypeExtension":
            case "InterfaceTypeDefinition":
              return [D("description"), T.description ? s : "", T.kind === "InterfaceTypeExtension" ? "extend " : "", "interface ", D("name"), T.interfaces.length > 0 ? [" implements ", ...N(P, $, D)] : "", F(P, D, T), T.fields.length > 0 ? [" {", i2([s, t(s, _(P, $, D, "fields"))]), s, "}"] : ""];
            case "FragmentSpread":
              return ["...", D("name"), F(P, D, T)];
            case "InlineFragment":
              return ["...", T.typeCondition ? [" on ", D("typeCondition")] : "", F(P, D, T), " ", D("selectionSet")];
            case "UnionTypeExtension":
            case "UnionTypeDefinition":
              return u([D("description"), T.description ? s : "", u([T.kind === "UnionTypeExtension" ? "extend " : "", "union ", D("name"), F(P, D, T), T.types.length > 0 ? [" =", l("", " "), i2([l([a, "  "]), t([a, "| "], P.map(D, "types"))])] : ""])]);
            case "ScalarTypeExtension":
            case "ScalarTypeDefinition":
              return [D("description"), T.description ? s : "", T.kind === "ScalarTypeExtension" ? "extend " : "", "scalar ", D("name"), F(P, D, T)];
            case "NonNullType":
              return [D("type"), "!"];
            case "ListType":
              return ["[", D("type"), "]"];
            default:
              throw new Error("unknown graphql type: " + JSON.stringify(T.kind));
          }
        }
        function F(P, $, D) {
          if (D.directives.length === 0)
            return "";
          let T = t(a, P.map($, "directives"));
          return D.kind === "FragmentDefinition" || D.kind === "OperationDefinition" ? u([a, T]) : [" ", u(i2([n, T]))];
        }
        function _(P, $, D, T) {
          return P.map((m, C, o) => {
            let d = D();
            return C < o.length - 1 && p2($.originalText, m.getValue(), c) ? [d, s] : d;
          }, T);
        }
        function w(P) {
          return P.kind && P.kind !== "Comment";
        }
        function E(P) {
          let $ = P.getValue();
          if ($.kind === "Comment")
            return "#" + $.value.trimEnd();
          throw new Error("Not a comment: " + JSON.stringify($));
        }
        function N(P, $, D) {
          let T = P.getNode(), m = [], { interfaces: C } = T, o = P.map((d) => D(d), "interfaces");
          for (let d = 0; d < C.length; d++) {
            let v = C[d];
            m.push(o[d]);
            let S = C[d + 1];
            if (S) {
              let b = $.originalText.slice(v.loc.end, S.loc.start), B = b.includes("#"), k = b.replace(/#.*/g, "").trim();
              m.push(k === "," ? "," : " &", B ? a : " ");
            }
          }
          return m;
        }
        function x(P, $) {
          P.kind === "StringValue" && P.block && !P.value.includes(`
`) && ($.value = $.value.trim());
        }
        x.ignoredProperties = /* @__PURE__ */ new Set(["loc", "comments"]);
        function I(P) {
          var $;
          let D = P.getValue();
          return D == null || ($ = D.comments) === null || $ === void 0 ? void 0 : $.some((T) => T.value.trim() === "prettier-ignore");
        }
        r.exports = { print: f, massageAstNode: x, hasPrettierIgnore: I, insertPragma: h2, printComment: E, canAttachComment: w };
      } }), ug = te({ "src/language-graphql/options.js"(e, r) {
        ne();
        var t = Mt();
        r.exports = { bracketSpacing: t.bracketSpacing };
      } }), sg = te({ "src/language-graphql/parsers.js"() {
        ne();
      } }), ig = te({ "node_modules/linguist-languages/data/GraphQL.json"(e, r) {
        r.exports = { name: "GraphQL", type: "data", color: "#e10098", extensions: [".graphql", ".gql", ".graphqls"], tmScope: "source.graphql", aceMode: "text", languageId: 139 };
      } }), ag = te({ "src/language-graphql/index.js"(e, r) {
        ne();
        var t = _t(), s = ng(), a = ug(), n = sg(), u = [t(ig(), () => ({ since: "1.5.0", parsers: ["graphql"], vscodeLanguageIds: ["graphql"] }))], i2 = { graphql: s };
        r.exports = { languages: u, options: a, printers: i2, parsers: n };
      } }), Po = te({ "node_modules/collapse-white-space/index.js"(e, r) {
        ne(), r.exports = t;
        function t(s) {
          return String(s).replace(/\s+/g, " ");
        }
      } }), Io = te({ "src/language-markdown/loc.js"(e, r) {
        ne();
        function t(a) {
          return a.position.start.offset;
        }
        function s(a) {
          return a.position.end.offset;
        }
        r.exports = { locStart: t, locEnd: s };
      } }), og = te({ "src/language-markdown/constants.evaluate.js"(e, r) {
        r.exports = { cjkPattern: "(?:[\\u02ea-\\u02eb\\u1100-\\u11ff\\u2e80-\\u2e99\\u2e9b-\\u2ef3\\u2f00-\\u2fd5\\u2ff0-\\u303f\\u3041-\\u3096\\u3099-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u3190-\\u3191\\u3196-\\u31ba\\u31c0-\\u31e3\\u31f0-\\u321e\\u322a-\\u3247\\u3260-\\u327e\\u328a-\\u32b0\\u32c0-\\u32cb\\u32d0-\\u3370\\u337b-\\u337f\\u33e0-\\u33fe\\u3400-\\u4db5\\u4e00-\\u9fef\\ua960-\\ua97c\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufe10-\\ufe1f\\ufe30-\\ufe6f\\uff00-\\uffef]|[\\ud840-\\ud868\\ud86a-\\ud86c\\ud86f-\\ud872\\ud874-\\ud879][\\udc00-\\udfff]|\\ud82c[\\udc00-\\udd1e\\udd50-\\udd52\\udd64-\\udd67]|\\ud83c[\\ude00\\ude50-\\ude51]|\\ud869[\\udc00-\\uded6\\udf00-\\udfff]|\\ud86d[\\udc00-\\udf34\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d\\udc20-\\udfff]|\\ud873[\\udc00-\\udea1\\udeb0-\\udfff]|\\ud87a[\\udc00-\\udfe0]|\\ud87e[\\udc00-\\ude1d])(?:[\\ufe00-\\ufe0f]|\\udb40[\\udd00-\\uddef])?", kPattern: "[\\u1100-\\u11ff\\u3001-\\u3003\\u3008-\\u3011\\u3013-\\u301f\\u302e-\\u3030\\u3037\\u30fb\\u3131-\\u318e\\u3200-\\u321e\\u3260-\\u327e\\ua960-\\ua97c\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\ufe45-\\ufe46\\uff61-\\uff65\\uffa0-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]", punctuationPattern: "[\\u0021-\\u002f\\u003a-\\u0040\\u005b-\\u0060\\u007b-\\u007e\\u00a1\\u00a7\\u00ab\\u00b6-\\u00b7\\u00bb\\u00bf\\u037e\\u0387\\u055a-\\u055f\\u0589-\\u058a\\u05be\\u05c0\\u05c3\\u05c6\\u05f3-\\u05f4\\u0609-\\u060a\\u060c-\\u060d\\u061b\\u061e-\\u061f\\u066a-\\u066d\\u06d4\\u0700-\\u070d\\u07f7-\\u07f9\\u0830-\\u083e\\u085e\\u0964-\\u0965\\u0970\\u09fd\\u0a76\\u0af0\\u0c77\\u0c84\\u0df4\\u0e4f\\u0e5a-\\u0e5b\\u0f04-\\u0f12\\u0f14\\u0f3a-\\u0f3d\\u0f85\\u0fd0-\\u0fd4\\u0fd9-\\u0fda\\u104a-\\u104f\\u10fb\\u1360-\\u1368\\u1400\\u166e\\u169b-\\u169c\\u16eb-\\u16ed\\u1735-\\u1736\\u17d4-\\u17d6\\u17d8-\\u17da\\u1800-\\u180a\\u1944-\\u1945\\u1a1e-\\u1a1f\\u1aa0-\\u1aa6\\u1aa8-\\u1aad\\u1b5a-\\u1b60\\u1bfc-\\u1bff\\u1c3b-\\u1c3f\\u1c7e-\\u1c7f\\u1cc0-\\u1cc7\\u1cd3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205e\\u207d-\\u207e\\u208d-\\u208e\\u2308-\\u230b\\u2329-\\u232a\\u2768-\\u2775\\u27c5-\\u27c6\\u27e6-\\u27ef\\u2983-\\u2998\\u29d8-\\u29db\\u29fc-\\u29fd\\u2cf9-\\u2cfc\\u2cfe-\\u2cff\\u2d70\\u2e00-\\u2e2e\\u2e30-\\u2e4f\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301f\\u3030\\u303d\\u30a0\\u30fb\\ua4fe-\\ua4ff\\ua60d-\\ua60f\\ua673\\ua67e\\ua6f2-\\ua6f7\\ua874-\\ua877\\ua8ce-\\ua8cf\\ua8f8-\\ua8fa\\ua8fc\\ua92e-\\ua92f\\ua95f\\ua9c1-\\ua9cd\\ua9de-\\ua9df\\uaa5c-\\uaa5f\\uaade-\\uaadf\\uaaf0-\\uaaf1\\uabeb\\ufd3e-\\ufd3f\\ufe10-\\ufe19\\ufe30-\\ufe52\\ufe54-\\ufe61\\ufe63\\ufe68\\ufe6a-\\ufe6b\\uff01-\\uff03\\uff05-\\uff0a\\uff0c-\\uff0f\\uff1a-\\uff1b\\uff1f-\\uff20\\uff3b-\\uff3d\\uff3f\\uff5b\\uff5d\\uff5f-\\uff65]|\\ud800[\\udd00-\\udd02\\udf9f\\udfd0]|\\ud801[\\udd6f]|\\ud802[\\udc57\\udd1f\\udd3f\\ude50-\\ude58\\ude7f\\udef0-\\udef6\\udf39-\\udf3f\\udf99-\\udf9c]|\\ud803[\\udf55-\\udf59]|\\ud804[\\udc47-\\udc4d\\udcbb-\\udcbc\\udcbe-\\udcc1\\udd40-\\udd43\\udd74-\\udd75\\uddc5-\\uddc8\\uddcd\\udddb\\udddd-\\udddf\\ude38-\\ude3d\\udea9]|\\ud805[\\udc4b-\\udc4f\\udc5b\\udc5d\\udcc6\\uddc1-\\uddd7\\ude41-\\ude43\\ude60-\\ude6c\\udf3c-\\udf3e]|\\ud806[\\udc3b\\udde2\\ude3f-\\ude46\\ude9a-\\ude9c\\ude9e-\\udea2]|\\ud807[\\udc41-\\udc45\\udc70-\\udc71\\udef7-\\udef8\\udfff]|\\ud809[\\udc70-\\udc74]|\\ud81a[\\ude6e-\\ude6f\\udef5\\udf37-\\udf3b\\udf44]|\\ud81b[\\ude97-\\ude9a\\udfe2]|\\ud82f[\\udc9f]|\\ud836[\\ude87-\\ude8b]|\\ud83a[\\udd5e-\\udd5f]" };
      } }), iu = te({ "src/language-markdown/utils.js"(e, r) {
        ne();
        var { getLast: t } = Ue(), { locStart: s, locEnd: a } = Io(), { cjkPattern: n, kPattern: u, punctuationPattern: i2 } = og(), l = ["liquidNode", "inlineCode", "emphasis", "esComment", "strong", "delete", "wikiLink", "link", "linkReference", "image", "imageReference", "footnote", "footnoteReference", "sentence", "whitespace", "word", "break", "inlineMath"], p2 = [...l, "tableCell", "paragraph", "heading"], y = new RegExp(u), h2 = new RegExp(i2);
        function g(E, N) {
          let x = "non-cjk", I = "cj-letter", P = "k-letter", $ = "cjk-punctuation", D = [], T = (N.proseWrap === "preserve" ? E : E.replace(new RegExp(`(${n})
(${n})`, "g"), "$1$2")).split(/([\t\n ]+)/);
          for (let [C, o] of T.entries()) {
            if (C % 2 === 1) {
              D.push({ type: "whitespace", value: /\n/.test(o) ? `
` : " " });
              continue;
            }
            if ((C === 0 || C === T.length - 1) && o === "")
              continue;
            let d = o.split(new RegExp(`(${n})`));
            for (let [v, S] of d.entries())
              if (!((v === 0 || v === d.length - 1) && S === "")) {
                if (v % 2 === 0) {
                  S !== "" && m({ type: "word", value: S, kind: x, hasLeadingPunctuation: h2.test(S[0]), hasTrailingPunctuation: h2.test(t(S)) });
                  continue;
                }
                m(h2.test(S) ? { type: "word", value: S, kind: $, hasLeadingPunctuation: true, hasTrailingPunctuation: true } : { type: "word", value: S, kind: y.test(S) ? P : I, hasLeadingPunctuation: false, hasTrailingPunctuation: false });
              }
          }
          return D;
          function m(C) {
            let o = t(D);
            o && o.type === "word" && (o.kind === x && C.kind === I && !o.hasTrailingPunctuation || o.kind === I && C.kind === x && !C.hasLeadingPunctuation ? D.push({ type: "whitespace", value: " " }) : !d(x, $) && ![o.value, C.value].some((v) => /\u3000/.test(v)) && D.push({ type: "whitespace", value: "" })), D.push(C);
            function d(v, S) {
              return o.kind === v && C.kind === S || o.kind === S && C.kind === v;
            }
          }
        }
        function c(E, N) {
          let [, x, I, P] = N.slice(E.position.start.offset, E.position.end.offset).match(/^\s*(\d+)(\.|\))(\s*)/);
          return { numberText: x, marker: I, leadingSpaces: P };
        }
        function f(E, N) {
          if (!E.ordered || E.children.length < 2)
            return false;
          let x = Number(c(E.children[0], N.originalText).numberText), I = Number(c(E.children[1], N.originalText).numberText);
          if (x === 0 && E.children.length > 2) {
            let P = Number(c(E.children[2], N.originalText).numberText);
            return I === 1 && P === 1;
          }
          return I === 1;
        }
        function F(E, N) {
          let { value: x } = E;
          return E.position.end.offset === N.length && x.endsWith(`
`) && N.endsWith(`
`) ? x.slice(0, -1) : x;
        }
        function _(E, N) {
          return function x(I, P, $) {
            let D = Object.assign({}, N(I, P, $));
            return D.children && (D.children = D.children.map((T, m) => x(T, m, [D, ...$]))), D;
          }(E, null, []);
        }
        function w(E) {
          if ((E == null ? void 0 : E.type) !== "link" || E.children.length !== 1)
            return false;
          let [N] = E.children;
          return s(E) === s(N) && a(E) === a(N);
        }
        r.exports = { mapAst: _, splitText: g, punctuationPattern: i2, getFencedCodeBlockValue: F, getOrderedListItemInfo: c, hasGitDiffFriendlyOrderedList: f, INLINE_NODE_TYPES: l, INLINE_NODE_WRAPPER_TYPES: p2, isAutolink: w };
      } }), lg = te({ "src/language-markdown/embed.js"(e, r) {
        ne();
        var { inferParserByLanguage: t, getMaxContinuousCount: s } = Ue(), { builders: { hardline: a, markAsRoot: n }, utils: { replaceEndOfLine: u } } = qe(), i2 = su(), { getFencedCodeBlockValue: l } = iu();
        function p2(y, h2, g, c) {
          let f = y.getValue();
          if (f.type === "code" && f.lang !== null) {
            let F = t(f.lang, c);
            if (F) {
              let _ = c.__inJsTemplate ? "~" : "`", w = _.repeat(Math.max(3, s(f.value, _) + 1)), E = { parser: F };
              f.lang === "tsx" && (E.filepath = "dummy.tsx");
              let N = g(l(f, c.originalText), E, { stripTrailingHardline: true });
              return n([w, f.lang, f.meta ? " " + f.meta : "", a, u(N), a, w]);
            }
          }
          switch (f.type) {
            case "front-matter":
              return i2(f, g);
            case "importExport":
              return [g(f.value, { parser: "babel" }, { stripTrailingHardline: true }), a];
            case "jsx":
              return g(`<$>${f.value}</$>`, { parser: "__js_expression", rootMarker: "mdx" }, { stripTrailingHardline: true });
          }
          return null;
        }
        r.exports = p2;
      } }), ko = te({ "src/language-markdown/pragma.js"(e, r) {
        ne();
        var t = _o(), s = ["format", "prettier"];
        function a(n) {
          let u = `@(${s.join("|")})`, i2 = new RegExp([`<!--\\s*${u}\\s*-->`, `{\\s*\\/\\*\\s*${u}\\s*\\*\\/\\s*}`, `<!--.*\r?
[\\s\\S]*(^|
)[^\\S
]*${u}[^\\S
]*($|
)[\\s\\S]*
.*-->`].join("|"), "m"), l = n.match(i2);
          return (l == null ? void 0 : l.index) === 0;
        }
        r.exports = { startWithPragma: a, hasPragma: (n) => a(t(n).content.trimStart()), insertPragma: (n) => {
          let u = t(n), i2 = `<!-- @${s[0]} -->`;
          return u.frontMatter ? `${u.frontMatter.raw}

${i2}

${u.content}` : `${i2}

${u.content}`;
        } };
      } }), cg = te({ "src/language-markdown/print-preprocess.js"(e, r) {
        ne();
        var t = lt(), { getOrderedListItemInfo: s, mapAst: a, splitText: n } = iu(), u = /^.$/su;
        function i2(w, E) {
          return w = y(w, E), w = c(w), w = p2(w, E), w = F(w, E), w = _(w, E), w = f(w, E), w = l(w), w = h2(w), w;
        }
        function l(w) {
          return a(w, (E) => E.type !== "import" && E.type !== "export" ? E : Object.assign(Object.assign({}, E), {}, { type: "importExport" }));
        }
        function p2(w, E) {
          return a(w, (N) => N.type !== "inlineCode" || E.proseWrap === "preserve" ? N : Object.assign(Object.assign({}, N), {}, { value: N.value.replace(/\s+/g, " ") }));
        }
        function y(w, E) {
          return a(w, (N) => N.type !== "text" || N.value === "*" || N.value === "_" || !u.test(N.value) || N.position.end.offset - N.position.start.offset === N.value.length ? N : Object.assign(Object.assign({}, N), {}, { value: E.originalText.slice(N.position.start.offset, N.position.end.offset) }));
        }
        function h2(w) {
          return g(w, (E, N) => E.type === "importExport" && N.type === "importExport", (E, N) => ({ type: "importExport", value: E.value + `

` + N.value, position: { start: E.position.start, end: N.position.end } }));
        }
        function g(w, E, N) {
          return a(w, (x) => {
            if (!x.children)
              return x;
            let I = x.children.reduce((P, $) => {
              let D = t(P);
              return D && E(D, $) ? P.splice(-1, 1, N(D, $)) : P.push($), P;
            }, []);
            return Object.assign(Object.assign({}, x), {}, { children: I });
          });
        }
        function c(w) {
          return g(w, (E, N) => E.type === "text" && N.type === "text", (E, N) => ({ type: "text", value: E.value + N.value, position: { start: E.position.start, end: N.position.end } }));
        }
        function f(w, E) {
          return a(w, (N, x, I) => {
            let [P] = I;
            if (N.type !== "text")
              return N;
            let { value: $ } = N;
            return P.type === "paragraph" && (x === 0 && ($ = $.trimStart()), x === P.children.length - 1 && ($ = $.trimEnd())), { type: "sentence", position: N.position, children: n($, E) };
          });
        }
        function F(w, E) {
          return a(w, (N, x, I) => {
            if (N.type === "code") {
              let P = /^\n?(?: {4,}|\t)/.test(E.originalText.slice(N.position.start.offset, N.position.end.offset));
              if (N.isIndented = P, P)
                for (let $ = 0; $ < I.length; $++) {
                  let D = I[$];
                  if (D.hasIndentedCodeblock)
                    break;
                  D.type === "list" && (D.hasIndentedCodeblock = true);
                }
            }
            return N;
          });
        }
        function _(w, E) {
          return a(w, (I, P, $) => {
            if (I.type === "list" && I.children.length > 0) {
              for (let D = 0; D < $.length; D++) {
                let T = $[D];
                if (T.type === "list" && !T.isAligned)
                  return I.isAligned = false, I;
              }
              I.isAligned = x(I);
            }
            return I;
          });
          function N(I) {
            return I.children.length === 0 ? -1 : I.children[0].position.start.column - 1;
          }
          function x(I) {
            if (!I.ordered)
              return true;
            let [P, $] = I.children;
            if (s(P, E.originalText).leadingSpaces.length > 1)
              return true;
            let T = N(P);
            if (T === -1)
              return false;
            if (I.children.length === 1)
              return T % E.tabWidth === 0;
            let m = N($);
            return T !== m ? false : T % E.tabWidth === 0 ? true : s($, E.originalText).leadingSpaces.length > 1;
          }
        }
        r.exports = i2;
      } }), pg = te({ "src/language-markdown/clean.js"(e, r) {
        ne();
        var t = Po(), { isFrontMatterNode: s } = Ue(), { startWithPragma: a } = ko(), n = /* @__PURE__ */ new Set(["position", "raw"]);
        function u(i2, l, p2) {
          if ((i2.type === "front-matter" || i2.type === "code" || i2.type === "yaml" || i2.type === "import" || i2.type === "export" || i2.type === "jsx") && delete l.value, i2.type === "list" && delete l.isAligned, (i2.type === "list" || i2.type === "listItem") && (delete l.spread, delete l.loose), i2.type === "text" || (i2.type === "inlineCode" && (l.value = i2.value.replace(/[\t\n ]+/g, " ")), i2.type === "wikiLink" && (l.value = i2.value.trim().replace(/[\t\n]+/g, " ")), (i2.type === "definition" || i2.type === "linkReference" || i2.type === "imageReference") && (l.label = t(i2.label)), (i2.type === "definition" || i2.type === "link" || i2.type === "image") && i2.title && (l.title = i2.title.replace(/\\(["')])/g, "$1")), p2 && p2.type === "root" && p2.children.length > 0 && (p2.children[0] === i2 || s(p2.children[0]) && p2.children[1] === i2) && i2.type === "html" && a(i2.value)))
            return null;
        }
        u.ignoredProperties = n, r.exports = u;
      } }), fg = te({ "src/language-markdown/printer-markdown.js"(e, r) {
        ne();
        var t = Po(), { getLast: s, getMinNotPresentContinuousCount: a, getMaxContinuousCount: n, getStringWidth: u, isNonEmptyArray: i2 } = Ue(), { builders: { breakParent: l, join: p2, line: y, literalline: h2, markAsRoot: g, hardline: c, softline: f, ifBreak: F, fill: _, align: w, indent: E, group: N, hardlineWithoutBreakParent: x }, utils: { normalizeDoc: I, replaceTextEndOfLine: P }, printer: { printDocToString: $ } } = qe(), D = lg(), { insertPragma: T } = ko(), { locStart: m, locEnd: C } = Io(), o = cg(), d = pg(), { getFencedCodeBlockValue: v, hasGitDiffFriendlyOrderedList: S, splitText: b, punctuationPattern: B, INLINE_NODE_TYPES: k, INLINE_NODE_WRAPPER_TYPES: M, isAutolink: R } = iu(), q = /* @__PURE__ */ new Set(["importExport"]), J = ["heading", "tableCell", "link", "wikiLink"], L = /* @__PURE__ */ new Set(["listItem", "definition", "footnoteDefinition"]);
        function Q(oe, H, pe) {
          let X = oe.getValue();
          if (ge(oe))
            return b(H.originalText.slice(X.position.start.offset, X.position.end.offset), H).map((le) => le.type === "word" ? le.value : le.value === "" ? "" : W(oe, le.value, H));
          switch (X.type) {
            case "front-matter":
              return H.originalText.slice(X.position.start.offset, X.position.end.offset);
            case "root":
              return X.children.length === 0 ? "" : [I(de(oe, H, pe)), q.has(z(X).type) ? "" : c];
            case "paragraph":
              return ue(oe, H, pe, { postprocessor: _ });
            case "sentence":
              return ue(oe, H, pe);
            case "word": {
              let le = X.value.replace(/\*/g, "\\$&").replace(new RegExp([`(^|${B})(_+)`, `(_+)(${B}|$)`].join("|"), "g"), (De, A, G, re2, ye) => (G ? `${A}${G}` : `${re2}${ye}`).replace(/_/g, "\\_")), Ae = (De, A, G) => De.type === "sentence" && G === 0, Ee = (De, A, G) => R(De.children[G - 1]);
              return le !== X.value && (oe.match(void 0, Ae, Ee) || oe.match(void 0, Ae, (De, A, G) => De.type === "emphasis" && G === 0, Ee)) && (le = le.replace(/^(\\?[*_])+/, (De) => De.replace(/\\/g, ""))), le;
            }
            case "whitespace": {
              let le = oe.getParentNode(), Ae = le.children.indexOf(X), Ee = le.children[Ae + 1], De = Ee && /^>|^(?:[*+-]|#{1,6}|\d+[).])$/.test(Ee.value) ? "never" : H.proseWrap;
              return W(oe, X.value, { proseWrap: De });
            }
            case "emphasis": {
              let le;
              if (R(X.children[0]))
                le = H.originalText[X.position.start.offset];
              else {
                let Ae = oe.getParentNode(), Ee = Ae.children.indexOf(X), De = Ae.children[Ee - 1], A = Ae.children[Ee + 1];
                le = De && De.type === "sentence" && De.children.length > 0 && s(De.children).type === "word" && !s(De.children).hasTrailingPunctuation || A && A.type === "sentence" && A.children.length > 0 && A.children[0].type === "word" && !A.children[0].hasLeadingPunctuation || ce(oe, "emphasis") ? "*" : "_";
              }
              return [le, ue(oe, H, pe), le];
            }
            case "strong":
              return ["**", ue(oe, H, pe), "**"];
            case "delete":
              return ["~~", ue(oe, H, pe), "~~"];
            case "inlineCode": {
              let le = a(X.value, "`"), Ae = "`".repeat(le || 1), Ee = le && !/^\s/.test(X.value) ? " " : "";
              return [Ae, Ee, X.value, Ee, Ae];
            }
            case "wikiLink": {
              let le = "";
              return H.proseWrap === "preserve" ? le = X.value : le = X.value.replace(/[\t\n]+/g, " "), ["[[", le, "]]"];
            }
            case "link":
              switch (H.originalText[X.position.start.offset]) {
                case "<": {
                  let le = "mailto:";
                  return ["<", X.url.startsWith(le) && H.originalText.slice(X.position.start.offset + 1, X.position.start.offset + 1 + le.length) !== le ? X.url.slice(le.length) : X.url, ">"];
                }
                case "[":
                  return ["[", ue(oe, H, pe), "](", he(X.url, ")"), we(X.title, H), ")"];
                default:
                  return H.originalText.slice(X.position.start.offset, X.position.end.offset);
              }
            case "image":
              return ["![", X.alt || "", "](", he(X.url, ")"), we(X.title, H), ")"];
            case "blockquote":
              return ["> ", w("> ", ue(oe, H, pe))];
            case "heading":
              return ["#".repeat(X.depth) + " ", ue(oe, H, pe)];
            case "code": {
              if (X.isIndented) {
                let Ee = " ".repeat(4);
                return w(Ee, [Ee, ...P(X.value, c)]);
              }
              let le = H.__inJsTemplate ? "~" : "`", Ae = le.repeat(Math.max(3, n(X.value, le) + 1));
              return [Ae, X.lang || "", X.meta ? " " + X.meta : "", c, ...P(v(X, H.originalText), c), c, Ae];
            }
            case "html": {
              let le = oe.getParentNode(), Ae = le.type === "root" && s(le.children) === X ? X.value.trimEnd() : X.value, Ee = /^<!--.*-->$/s.test(Ae);
              return P(Ae, Ee ? c : g(h2));
            }
            case "list": {
              let le = Y(X, oe.getParentNode()), Ae = S(X, H);
              return ue(oe, H, pe, { processor: (Ee, De) => {
                let A = re2(), G = Ee.getValue();
                if (G.children.length === 2 && G.children[1].type === "html" && G.children[0].position.start.column !== G.children[1].position.start.column)
                  return [A, V(Ee, H, pe, A)];
                return [A, w(" ".repeat(A.length), V(Ee, H, pe, A))];
                function re2() {
                  let ye = X.ordered ? (De === 0 ? X.start : Ae ? 1 : X.start + De) + (le % 2 === 0 ? ". " : ") ") : le % 2 === 0 ? "- " : "* ";
                  return X.isAligned || X.hasIndentedCodeblock ? j(ye, H) : ye;
                }
              } });
            }
            case "thematicBreak": {
              let le = ee(oe, "list");
              return le === -1 ? "---" : Y(oe.getParentNode(le), oe.getParentNode(le + 1)) % 2 === 0 ? "***" : "---";
            }
            case "linkReference":
              return ["[", ue(oe, H, pe), "]", X.referenceType === "full" ? Ne(X) : X.referenceType === "collapsed" ? "[]" : ""];
            case "imageReference":
              switch (X.referenceType) {
                case "full":
                  return ["![", X.alt || "", "]", Ne(X)];
                default:
                  return ["![", X.alt, "]", X.referenceType === "collapsed" ? "[]" : ""];
              }
            case "definition": {
              let le = H.proseWrap === "always" ? y : " ";
              return N([Ne(X), ":", E([le, he(X.url), X.title === null ? "" : [le, we(X.title, H, false)]])]);
            }
            case "footnote":
              return ["[^", ue(oe, H, pe), "]"];
            case "footnoteReference":
              return Pe(X);
            case "footnoteDefinition": {
              let le = oe.getParentNode().children[oe.getName() + 1], Ae = X.children.length === 1 && X.children[0].type === "paragraph" && (H.proseWrap === "never" || H.proseWrap === "preserve" && X.children[0].position.start.line === X.children[0].position.end.line);
              return [Pe(X), ": ", Ae ? ue(oe, H, pe) : N([w(" ".repeat(4), ue(oe, H, pe, { processor: (Ee, De) => De === 0 ? N([f, pe()]) : pe() })), le && le.type === "footnoteDefinition" ? f : ""])];
            }
            case "table":
              return K(oe, H, pe);
            case "tableCell":
              return ue(oe, H, pe);
            case "break":
              return /\s/.test(H.originalText[X.position.start.offset]) ? ["  ", g(h2)] : ["\\", c];
            case "liquidNode":
              return P(X.value, c);
            case "importExport":
              return [X.value, c];
            case "esComment":
              return ["{/* ", X.value, " */}"];
            case "jsx":
              return X.value;
            case "math":
              return ["$$", c, X.value ? [...P(X.value, c), c] : "", "$$"];
            case "inlineMath":
              return H.originalText.slice(m(X), C(X));
            case "tableRow":
            case "listItem":
            default:
              throw new Error(`Unknown markdown type ${JSON.stringify(X.type)}`);
          }
        }
        function V(oe, H, pe, X) {
          let le = oe.getValue(), Ae = le.checked === null ? "" : le.checked ? "[x] " : "[ ] ";
          return [Ae, ue(oe, H, pe, { processor: (Ee, De) => {
            if (De === 0 && Ee.getValue().type !== "list")
              return w(" ".repeat(Ae.length), pe());
            let A = " ".repeat(ke(H.tabWidth - X.length, 0, 3));
            return [A, w(A, pe())];
          } })];
        }
        function j(oe, H) {
          let pe = X();
          return oe + " ".repeat(pe >= 4 ? 0 : pe);
          function X() {
            let le = oe.length % H.tabWidth;
            return le === 0 ? 0 : H.tabWidth - le;
          }
        }
        function Y(oe, H) {
          return ie(oe, H, (pe) => pe.ordered === oe.ordered);
        }
        function ie(oe, H, pe) {
          let X = -1;
          for (let le of H.children)
            if (le.type === oe.type && pe(le) ? X++ : X = -1, le === oe)
              return X;
        }
        function ee(oe, H) {
          let pe = Array.isArray(H) ? H : [H], X = -1, le;
          for (; le = oe.getParentNode(++X); )
            if (pe.includes(le.type))
              return X;
          return -1;
        }
        function ce(oe, H) {
          let pe = ee(oe, H);
          return pe === -1 ? null : oe.getParentNode(pe);
        }
        function W(oe, H, pe) {
          if (pe.proseWrap === "preserve" && H === `
`)
            return c;
          let X = pe.proseWrap === "always" && !ce(oe, J);
          return H !== "" ? X ? y : " " : X ? f : "";
        }
        function K(oe, H, pe) {
          let X = oe.getValue(), le = [], Ae = oe.map((ye) => ye.map((Ce, Be) => {
            let ve = $(pe(), H).formatted, ze = u(ve);
            return le[Be] = Math.max(le[Be] || 3, ze), { text: ve, width: ze };
          }, "children"), "children"), Ee = A(false);
          if (H.proseWrap !== "never")
            return [l, Ee];
          let De = A(true);
          return [l, N(F(De, Ee))];
          function A(ye) {
            let Ce = [re2(Ae[0], ye), G(ye)];
            return Ae.length > 1 && Ce.push(p2(x, Ae.slice(1).map((Be) => re2(Be, ye)))), p2(x, Ce);
          }
          function G(ye) {
            return `| ${le.map((Be, ve) => {
              let ze = X.align[ve], be = ze === "center" || ze === "left" ? ":" : "-", Ye = ze === "center" || ze === "right" ? ":" : "-", Se = ye ? "-" : "-".repeat(Be - 2);
              return `${be}${Se}${Ye}`;
            }).join(" | ")} |`;
          }
          function re2(ye, Ce) {
            return `| ${ye.map((ve, ze) => {
              let { text: be, width: Ye } = ve;
              if (Ce)
                return be;
              let Se = le[ze] - Ye, Ie = X.align[ze], Oe = 0;
              Ie === "right" ? Oe = Se : Ie === "center" && (Oe = Math.floor(Se / 2));
              let Je = Se - Oe;
              return `${" ".repeat(Oe)}${be}${" ".repeat(Je)}`;
            }).join(" | ")} |`;
          }
        }
        function de(oe, H, pe) {
          let X = [], le = null, { children: Ae } = oe.getValue();
          for (let [Ee, De] of Ae.entries())
            switch (U(De)) {
              case "start":
                le === null && (le = { index: Ee, offset: De.position.end.offset });
                break;
              case "end":
                le !== null && (X.push({ start: le, end: { index: Ee, offset: De.position.start.offset } }), le = null);
                break;
            }
          return ue(oe, H, pe, { processor: (Ee, De) => {
            if (X.length > 0) {
              let A = X[0];
              if (De === A.start.index)
                return [Fe(Ae[A.start.index]), H.originalText.slice(A.start.offset, A.end.offset), Fe(Ae[A.end.index])];
              if (A.start.index < De && De < A.end.index)
                return false;
              if (De === A.end.index)
                return X.shift(), false;
            }
            return pe();
          } });
        }
        function ue(oe, H, pe) {
          let X = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, { postprocessor: le } = X, Ae = X.processor || (() => pe()), Ee = oe.getValue(), De = [], A;
          return oe.each((G, re2) => {
            let ye = G.getValue(), Ce = Ae(G, re2);
            if (Ce !== false) {
              let Be = { parts: De, prevNode: A, parentNode: Ee, options: H };
              Z(ye, Be) && (De.push(c), A && q.has(A.type) || (se(ye, Be) || fe(ye, Be)) && De.push(c), fe(ye, Be) && De.push(c)), De.push(Ce), A = ye;
            }
          }, "children"), le ? le(De) : De;
        }
        function Fe(oe) {
          if (oe.type === "html")
            return oe.value;
          if (oe.type === "paragraph" && Array.isArray(oe.children) && oe.children.length === 1 && oe.children[0].type === "esComment")
            return ["{/* ", oe.children[0].value, " */}"];
        }
        function z(oe) {
          let H = oe;
          for (; i2(H.children); )
            H = s(H.children);
          return H;
        }
        function U(oe) {
          let H;
          if (oe.type === "html")
            H = oe.value.match(/^<!--\s*prettier-ignore(?:-(start|end))?\s*-->$/);
          else {
            let pe;
            oe.type === "esComment" ? pe = oe : oe.type === "paragraph" && oe.children.length === 1 && oe.children[0].type === "esComment" && (pe = oe.children[0]), pe && (H = pe.value.match(/^prettier-ignore(?:-(start|end))?$/));
          }
          return H ? H[1] || "next" : false;
        }
        function Z(oe, H) {
          let pe = H.parts.length === 0, X = k.includes(oe.type), le = oe.type === "html" && M.includes(H.parentNode.type);
          return !pe && !X && !le;
        }
        function se(oe, H) {
          var pe, X, le;
          let Ee = (H.prevNode && H.prevNode.type) === oe.type && L.has(oe.type), De = H.parentNode.type === "listItem" && !H.parentNode.loose, A = ((pe = H.prevNode) === null || pe === void 0 ? void 0 : pe.type) === "listItem" && H.prevNode.loose, G = U(H.prevNode) === "next", re2 = oe.type === "html" && ((X = H.prevNode) === null || X === void 0 ? void 0 : X.type) === "html" && H.prevNode.position.end.line + 1 === oe.position.start.line, ye = oe.type === "html" && H.parentNode.type === "listItem" && ((le = H.prevNode) === null || le === void 0 ? void 0 : le.type) === "paragraph" && H.prevNode.position.end.line + 1 === oe.position.start.line;
          return A || !(Ee || De || G || re2 || ye);
        }
        function fe(oe, H) {
          let pe = H.prevNode && H.prevNode.type === "list", X = oe.type === "code" && oe.isIndented;
          return pe && X;
        }
        function ge(oe) {
          let H = ce(oe, ["linkReference", "imageReference"]);
          return H && (H.type !== "linkReference" || H.referenceType !== "full");
        }
        function he(oe) {
          let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], pe = [" ", ...Array.isArray(H) ? H : [H]];
          return new RegExp(pe.map((X) => `\\${X}`).join("|")).test(oe) ? `<${oe}>` : oe;
        }
        function we(oe, H) {
          let pe = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
          if (!oe)
            return "";
          if (pe)
            return " " + we(oe, H, false);
          if (oe = oe.replace(/\\(["')])/g, "$1"), oe.includes('"') && oe.includes("'") && !oe.includes(")"))
            return `(${oe})`;
          let X = oe.split("'").length - 1, le = oe.split('"').length - 1, Ae = X > le ? '"' : le > X || H.singleQuote ? "'" : '"';
          return oe = oe.replace(/\\/, "\\\\"), oe = oe.replace(new RegExp(`(${Ae})`, "g"), "\\$1"), `${Ae}${oe}${Ae}`;
        }
        function ke(oe, H, pe) {
          return oe < H ? H : oe > pe ? pe : oe;
        }
        function Re(oe) {
          let H = Number(oe.getName());
          if (H === 0)
            return false;
          let pe = oe.getParentNode().children[H - 1];
          return U(pe) === "next";
        }
        function Ne(oe) {
          return `[${t(oe.label)}]`;
        }
        function Pe(oe) {
          return `[^${oe.label}]`;
        }
        r.exports = { preprocess: o, print: Q, embed: D, massageAstNode: d, hasPrettierIgnore: Re, insertPragma: T };
      } }), Dg = te({ "src/language-markdown/options.js"(e, r) {
        ne();
        var t = Mt();
        r.exports = { proseWrap: t.proseWrap, singleQuote: t.singleQuote };
      } }), mg = te({ "src/language-markdown/parsers.js"() {
        ne();
      } }), _a = te({ "node_modules/linguist-languages/data/Markdown.json"(e, r) {
        r.exports = { name: "Markdown", type: "prose", color: "#083fa1", aliases: ["pandoc"], aceMode: "markdown", codemirrorMode: "gfm", codemirrorMimeType: "text/x-gfm", wrap: true, extensions: [".md", ".livemd", ".markdown", ".mdown", ".mdwn", ".mdx", ".mkd", ".mkdn", ".mkdown", ".ronn", ".scd", ".workbook"], filenames: ["contents.lr"], tmScope: "source.gfm", languageId: 222 };
      } }), dg = te({ "src/language-markdown/index.js"(e, r) {
        ne();
        var t = _t(), s = fg(), a = Dg(), n = mg(), u = [t(_a(), (l) => ({ since: "1.8.0", parsers: ["markdown"], vscodeLanguageIds: ["markdown"], filenames: [...l.filenames, "README"], extensions: l.extensions.filter((p2) => p2 !== ".mdx") })), t(_a(), () => ({ name: "MDX", since: "1.15.0", parsers: ["mdx"], vscodeLanguageIds: ["mdx"], filenames: [], extensions: [".mdx"] }))], i2 = { mdast: s };
        r.exports = { languages: u, options: a, printers: i2, parsers: n };
      } }), gg = te({ "src/language-html/clean.js"(e, r) {
        ne();
        var { isFrontMatterNode: t } = Ue(), s = /* @__PURE__ */ new Set(["sourceSpan", "startSourceSpan", "endSourceSpan", "nameSpan", "valueSpan"]);
        function a(n, u) {
          if (n.type === "text" || n.type === "comment" || t(n) || n.type === "yaml" || n.type === "toml")
            return null;
          n.type === "attribute" && delete u.value, n.type === "docType" && delete u.value;
        }
        a.ignoredProperties = s, r.exports = a;
      } }), yg = te({ "src/language-html/constants.evaluate.js"(e, r) {
        r.exports = { CSS_DISPLAY_TAGS: { area: "none", base: "none", basefont: "none", datalist: "none", head: "none", link: "none", meta: "none", noembed: "none", noframes: "none", param: "block", rp: "none", script: "block", source: "block", style: "none", template: "inline", track: "block", title: "none", html: "block", body: "block", address: "block", blockquote: "block", center: "block", div: "block", figure: "block", figcaption: "block", footer: "block", form: "block", header: "block", hr: "block", legend: "block", listing: "block", main: "block", p: "block", plaintext: "block", pre: "block", xmp: "block", slot: "contents", ruby: "ruby", rt: "ruby-text", article: "block", aside: "block", h1: "block", h2: "block", h3: "block", h4: "block", h5: "block", h6: "block", hgroup: "block", nav: "block", section: "block", dir: "block", dd: "block", dl: "block", dt: "block", ol: "block", ul: "block", li: "list-item", table: "table", caption: "table-caption", colgroup: "table-column-group", col: "table-column", thead: "table-header-group", tbody: "table-row-group", tfoot: "table-footer-group", tr: "table-row", td: "table-cell", th: "table-cell", fieldset: "block", button: "inline-block", details: "block", summary: "block", dialog: "block", meter: "inline-block", progress: "inline-block", object: "inline-block", video: "inline-block", audio: "inline-block", select: "inline-block", option: "block", optgroup: "block" }, CSS_DISPLAY_DEFAULT: "inline", CSS_WHITE_SPACE_TAGS: { listing: "pre", plaintext: "pre", pre: "pre", xmp: "pre", nobr: "nowrap", table: "initial", textarea: "pre-wrap" }, CSS_WHITE_SPACE_DEFAULT: "normal" };
      } }), hg = te({ "src/language-html/utils/is-unknown-namespace.js"(e, r) {
        ne();
        function t(s) {
          return s.type === "element" && !s.hasExplicitNamespace && !["html", "svg"].includes(s.namespace);
        }
        r.exports = t;
      } }), Rt = te({ "src/language-html/utils/index.js"(e, r) {
        ne();
        var { inferParserByLanguage: t, isFrontMatterNode: s } = Ue(), { builders: { line: a, hardline: n, join: u }, utils: { getDocParts: i2, replaceTextEndOfLine: l } } = qe(), { CSS_DISPLAY_TAGS: p2, CSS_DISPLAY_DEFAULT: y, CSS_WHITE_SPACE_TAGS: h2, CSS_WHITE_SPACE_DEFAULT: g } = yg(), c = hg(), f = /* @__PURE__ */ new Set(["	", `
`, "\f", "\r", " "]), F = (A) => A.replace(/^[\t\n\f\r ]+/, ""), _ = (A) => A.replace(/[\t\n\f\r ]+$/, ""), w = (A) => F(_(A)), E = (A) => A.replace(/^[\t\f\r ]*\n/g, ""), N = (A) => E(_(A)), x = (A) => A.split(/[\t\n\f\r ]+/), I = (A) => A.match(/^[\t\n\f\r ]*/)[0], P = (A) => {
          let [, G, re2, ye] = A.match(/^([\t\n\f\r ]*)(.*?)([\t\n\f\r ]*)$/s);
          return { leadingWhitespace: G, trailingWhitespace: ye, text: re2 };
        }, $ = (A) => /[\t\n\f\r ]/.test(A);
        function D(A, G) {
          return !!(A.type === "ieConditionalComment" && A.lastChild && !A.lastChild.isSelfClosing && !A.lastChild.endSourceSpan || A.type === "ieConditionalComment" && !A.complete || se(A) && A.children.some((re2) => re2.type !== "text" && re2.type !== "interpolation") || X(A, G) && !o(A) && A.type !== "interpolation");
        }
        function T(A) {
          return A.type === "attribute" || !A.parent || !A.prev ? false : m(A.prev);
        }
        function m(A) {
          return A.type === "comment" && A.value.trim() === "prettier-ignore";
        }
        function C(A) {
          return A.type === "text" || A.type === "comment";
        }
        function o(A) {
          return A.type === "element" && (A.fullName === "script" || A.fullName === "style" || A.fullName === "svg:style" || c(A) && (A.name === "script" || A.name === "style"));
        }
        function d(A) {
          return A.children && !o(A);
        }
        function v(A) {
          return o(A) || A.type === "interpolation" || S(A);
        }
        function S(A) {
          return we(A).startsWith("pre");
        }
        function b(A, G) {
          let re2 = ye();
          if (re2 && !A.prev && A.parent && A.parent.tagDefinition && A.parent.tagDefinition.ignoreFirstLf)
            return A.type === "interpolation";
          return re2;
          function ye() {
            return s(A) ? false : (A.type === "text" || A.type === "interpolation") && A.prev && (A.prev.type === "text" || A.prev.type === "interpolation") ? true : !A.parent || A.parent.cssDisplay === "none" ? false : se(A.parent) ? true : !(!A.prev && (A.parent.type === "root" || se(A) && A.parent || o(A.parent) || H(A.parent, G) || !ue(A.parent.cssDisplay)) || A.prev && !U(A.prev.cssDisplay));
          }
        }
        function B(A, G) {
          return s(A) ? false : (A.type === "text" || A.type === "interpolation") && A.next && (A.next.type === "text" || A.next.type === "interpolation") ? true : !A.parent || A.parent.cssDisplay === "none" ? false : se(A.parent) ? true : !(!A.next && (A.parent.type === "root" || se(A) && A.parent || o(A.parent) || H(A.parent, G) || !Fe(A.parent.cssDisplay)) || A.next && !z(A.next.cssDisplay));
        }
        function k(A) {
          return Z(A.cssDisplay) && !o(A);
        }
        function M(A) {
          return s(A) || A.next && A.sourceSpan.end && A.sourceSpan.end.line + 1 < A.next.sourceSpan.start.line;
        }
        function R(A) {
          return q(A) || A.type === "element" && A.children.length > 0 && (["body", "script", "style"].includes(A.name) || A.children.some((G) => ee(G))) || A.firstChild && A.firstChild === A.lastChild && A.firstChild.type !== "text" && V(A.firstChild) && (!A.lastChild.isTrailingSpaceSensitive || j(A.lastChild));
        }
        function q(A) {
          return A.type === "element" && A.children.length > 0 && (["html", "head", "ul", "ol", "select"].includes(A.name) || A.cssDisplay.startsWith("table") && A.cssDisplay !== "table-cell");
        }
        function J(A) {
          return Y(A) || A.prev && L(A.prev) || Q(A);
        }
        function L(A) {
          return Y(A) || A.type === "element" && A.fullName === "br" || Q(A);
        }
        function Q(A) {
          return V(A) && j(A);
        }
        function V(A) {
          return A.hasLeadingSpaces && (A.prev ? A.prev.sourceSpan.end.line < A.sourceSpan.start.line : A.parent.type === "root" || A.parent.startSourceSpan.end.line < A.sourceSpan.start.line);
        }
        function j(A) {
          return A.hasTrailingSpaces && (A.next ? A.next.sourceSpan.start.line > A.sourceSpan.end.line : A.parent.type === "root" || A.parent.endSourceSpan && A.parent.endSourceSpan.start.line > A.sourceSpan.end.line);
        }
        function Y(A) {
          switch (A.type) {
            case "ieConditionalComment":
            case "comment":
            case "directive":
              return true;
            case "element":
              return ["script", "select"].includes(A.name);
          }
          return false;
        }
        function ie(A) {
          return A.lastChild ? ie(A.lastChild) : A;
        }
        function ee(A) {
          return A.children && A.children.some((G) => G.type !== "text");
        }
        function ce(A) {
          let { type: G, lang: re2 } = A.attrMap;
          if (G === "module" || G === "text/javascript" || G === "text/babel" || G === "application/javascript" || re2 === "jsx")
            return "babel";
          if (G === "application/x-typescript" || re2 === "ts" || re2 === "tsx")
            return "typescript";
          if (G === "text/markdown")
            return "markdown";
          if (G === "text/html")
            return "html";
          if (G && (G.endsWith("json") || G.endsWith("importmap")) || G === "speculationrules")
            return "json";
          if (G === "text/x-handlebars-template")
            return "glimmer";
        }
        function W(A, G) {
          let { lang: re2 } = A.attrMap;
          if (!re2 || re2 === "postcss" || re2 === "css")
            return "css";
          if (re2 === "scss")
            return "scss";
          if (re2 === "less")
            return "less";
          if (re2 === "stylus")
            return t("stylus", G);
        }
        function K(A, G) {
          if (A.name === "script" && !A.attrMap.src)
            return !A.attrMap.lang && !A.attrMap.type ? "babel" : ce(A);
          if (A.name === "style")
            return W(A, G);
          if (G && X(A, G))
            return ce(A) || !("src" in A.attrMap) && t(A.attrMap.lang, G);
        }
        function de(A) {
          return A === "block" || A === "list-item" || A.startsWith("table");
        }
        function ue(A) {
          return !de(A) && A !== "inline-block";
        }
        function Fe(A) {
          return !de(A) && A !== "inline-block";
        }
        function z(A) {
          return !de(A);
        }
        function U(A) {
          return !de(A);
        }
        function Z(A) {
          return !de(A) && A !== "inline-block";
        }
        function se(A) {
          return we(A).startsWith("pre");
        }
        function fe(A, G) {
          let re2 = 0;
          for (let ye = A.stack.length - 1; ye >= 0; ye--) {
            let Ce = A.stack[ye];
            Ce && typeof Ce == "object" && !Array.isArray(Ce) && G(Ce) && re2++;
          }
          return re2;
        }
        function ge(A, G) {
          let re2 = A;
          for (; re2; ) {
            if (G(re2))
              return true;
            re2 = re2.parent;
          }
          return false;
        }
        function he(A, G) {
          if (A.prev && A.prev.type === "comment") {
            let ye = A.prev.value.match(/^\s*display:\s*([a-z]+)\s*$/);
            if (ye)
              return ye[1];
          }
          let re2 = false;
          if (A.type === "element" && A.namespace === "svg")
            if (ge(A, (ye) => ye.fullName === "svg:foreignObject"))
              re2 = true;
            else
              return A.name === "svg" ? "inline-block" : "block";
          switch (G.htmlWhitespaceSensitivity) {
            case "strict":
              return "inline";
            case "ignore":
              return "block";
            default:
              return G.parser === "vue" && A.parent && A.parent.type === "root" ? "block" : A.type === "element" && (!A.namespace || re2 || c(A)) && p2[A.name] || y;
          }
        }
        function we(A) {
          return A.type === "element" && (!A.namespace || c(A)) && h2[A.name] || g;
        }
        function ke(A) {
          let G = Number.POSITIVE_INFINITY;
          for (let re2 of A.split(`
`)) {
            if (re2.length === 0)
              continue;
            if (!f.has(re2[0]))
              return 0;
            let ye = I(re2).length;
            re2.length !== ye && ye < G && (G = ye);
          }
          return G === Number.POSITIVE_INFINITY ? 0 : G;
        }
        function Re(A) {
          let G = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ke(A);
          return G === 0 ? A : A.split(`
`).map((re2) => re2.slice(G)).join(`
`);
        }
        function Ne(A, G) {
          let re2 = 0;
          for (let ye = 0; ye < A.length; ye++)
            A[ye] === G && re2++;
          return re2;
        }
        function Pe(A) {
          return A.replace(/&apos;/g, "'").replace(/&quot;/g, '"');
        }
        var oe = /* @__PURE__ */ new Set(["template", "style", "script"]);
        function H(A, G) {
          return pe(A, G) && !oe.has(A.fullName);
        }
        function pe(A, G) {
          return G.parser === "vue" && A.type === "element" && A.parent.type === "root" && A.fullName.toLowerCase() !== "html";
        }
        function X(A, G) {
          return pe(A, G) && (H(A, G) || A.attrMap.lang && A.attrMap.lang !== "html");
        }
        function le(A) {
          let G = A.fullName;
          return G.charAt(0) === "#" || G === "slot-scope" || G === "v-slot" || G.startsWith("v-slot:");
        }
        function Ae(A, G) {
          let re2 = A.parent;
          if (!pe(re2, G))
            return false;
          let ye = re2.fullName, Ce = A.fullName;
          return ye === "script" && Ce === "setup" || ye === "style" && Ce === "vars";
        }
        function Ee(A) {
          let G = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : A.value;
          return A.parent.isWhitespaceSensitive ? A.parent.isIndentationSensitive ? l(G) : l(Re(N(G)), n) : i2(u(a, x(G)));
        }
        function De(A, G) {
          return pe(A, G) && A.name === "script";
        }
        r.exports = { htmlTrim: w, htmlTrimPreserveIndentation: N, hasHtmlWhitespace: $, getLeadingAndTrailingHtmlWhitespace: P, canHaveInterpolation: d, countChars: Ne, countParents: fe, dedentString: Re, forceBreakChildren: q, forceBreakContent: R, forceNextEmptyLine: M, getLastDescendant: ie, getNodeCssStyleDisplay: he, getNodeCssStyleWhiteSpace: we, hasPrettierIgnore: T, inferScriptParser: K, isVueCustomBlock: H, isVueNonHtmlBlock: X, isVueScriptTag: De, isVueSlotAttribute: le, isVueSfcBindingsAttribute: Ae, isVueSfcBlock: pe, isDanglingSpaceSensitiveNode: k, isIndentationSensitiveNode: S, isLeadingSpaceSensitiveNode: b, isPreLikeNode: se, isScriptLikeTag: o, isTextLikeNode: C, isTrailingSpaceSensitiveNode: B, isWhitespaceSensitiveNode: v, isUnknownNamespace: c, preferHardlineAsLeadingSpaces: J, preferHardlineAsTrailingSpaces: L, shouldPreserveContent: D, unescapeQuoteEntities: Pe, getTextValueParts: Ee };
      } }), vg = te({ "node_modules/angular-html-parser/lib/compiler/src/chars.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true }), e.$EOF = 0, e.$BSPACE = 8, e.$TAB = 9, e.$LF = 10, e.$VTAB = 11, e.$FF = 12, e.$CR = 13, e.$SPACE = 32, e.$BANG = 33, e.$DQ = 34, e.$HASH = 35, e.$$ = 36, e.$PERCENT = 37, e.$AMPERSAND = 38, e.$SQ = 39, e.$LPAREN = 40, e.$RPAREN = 41, e.$STAR = 42, e.$PLUS = 43, e.$COMMA = 44, e.$MINUS = 45, e.$PERIOD = 46, e.$SLASH = 47, e.$COLON = 58, e.$SEMICOLON = 59, e.$LT = 60, e.$EQ = 61, e.$GT = 62, e.$QUESTION = 63, e.$0 = 48, e.$7 = 55, e.$9 = 57, e.$A = 65, e.$E = 69, e.$F = 70, e.$X = 88, e.$Z = 90, e.$LBRACKET = 91, e.$BACKSLASH = 92, e.$RBRACKET = 93, e.$CARET = 94, e.$_ = 95, e.$a = 97, e.$b = 98, e.$e = 101, e.$f = 102, e.$n = 110, e.$r = 114, e.$t = 116, e.$u = 117, e.$v = 118, e.$x = 120, e.$z = 122, e.$LBRACE = 123, e.$BAR = 124, e.$RBRACE = 125, e.$NBSP = 160, e.$PIPE = 124, e.$TILDA = 126, e.$AT = 64, e.$BT = 96;
        function r(i2) {
          return i2 >= e.$TAB && i2 <= e.$SPACE || i2 == e.$NBSP;
        }
        e.isWhitespace = r;
        function t(i2) {
          return e.$0 <= i2 && i2 <= e.$9;
        }
        e.isDigit = t;
        function s(i2) {
          return i2 >= e.$a && i2 <= e.$z || i2 >= e.$A && i2 <= e.$Z;
        }
        e.isAsciiLetter = s;
        function a(i2) {
          return i2 >= e.$a && i2 <= e.$f || i2 >= e.$A && i2 <= e.$F || t(i2);
        }
        e.isAsciiHexDigit = a;
        function n(i2) {
          return i2 === e.$LF || i2 === e.$CR;
        }
        e.isNewLine = n;
        function u(i2) {
          return e.$0 <= i2 && i2 <= e.$7;
        }
        e.isOctalDigit = u;
      } }), Cg = te({ "node_modules/angular-html-parser/lib/compiler/src/aot/static_symbol.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = class {
          constructor(s, a, n) {
            this.filePath = s, this.name = a, this.members = n;
          }
          assertNoMembers() {
            if (this.members.length)
              throw new Error(`Illegal state: symbol without members expected, but got ${JSON.stringify(this)}.`);
          }
        };
        e.StaticSymbol = r;
        var t = class {
          constructor() {
            this.cache = /* @__PURE__ */ new Map();
          }
          get(s, a, n) {
            n = n || [];
            let u = n.length ? `.${n.join(".")}` : "", i2 = `"${s}".${a}${u}`, l = this.cache.get(i2);
            return l || (l = new r(s, a, n), this.cache.set(i2, l)), l;
          }
        };
        e.StaticSymbolCache = t;
      } }), Eg = te({ "node_modules/angular-html-parser/lib/compiler/src/util.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = /-+([a-z0-9])/g;
        function t(o) {
          return o.replace(r, function() {
            for (var d = arguments.length, v = new Array(d), S = 0; S < d; S++)
              v[S] = arguments[S];
            return v[1].toUpperCase();
          });
        }
        e.dashCaseToCamelCase = t;
        function s(o, d) {
          return n(o, ":", d);
        }
        e.splitAtColon = s;
        function a(o, d) {
          return n(o, ".", d);
        }
        e.splitAtPeriod = a;
        function n(o, d, v) {
          let S = o.indexOf(d);
          return S == -1 ? v : [o.slice(0, S).trim(), o.slice(S + 1).trim()];
        }
        function u(o, d, v) {
          return Array.isArray(o) ? d.visitArray(o, v) : E(o) ? d.visitStringMap(o, v) : o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean" ? d.visitPrimitive(o, v) : d.visitOther(o, v);
        }
        e.visitValue = u;
        function i2(o) {
          return o != null;
        }
        e.isDefined = i2;
        function l(o) {
          return o === void 0 ? null : o;
        }
        e.noUndefined = l;
        var p2 = class {
          visitArray(o, d) {
            return o.map((v) => u(v, this, d));
          }
          visitStringMap(o, d) {
            let v = {};
            return Object.keys(o).forEach((S) => {
              v[S] = u(o[S], this, d);
            }), v;
          }
          visitPrimitive(o, d) {
            return o;
          }
          visitOther(o, d) {
            return o;
          }
        };
        e.ValueTransformer = p2, e.SyncAsync = { assertSync: (o) => {
          if (P(o))
            throw new Error("Illegal state: value cannot be a promise");
          return o;
        }, then: (o, d) => P(o) ? o.then(d) : d(o), all: (o) => o.some(P) ? Promise.all(o) : o };
        function y(o) {
          throw new Error(`Internal Error: ${o}`);
        }
        e.error = y;
        function h2(o, d) {
          let v = Error(o);
          return v[g] = true, d && (v[c] = d), v;
        }
        e.syntaxError = h2;
        var g = "ngSyntaxError", c = "ngParseErrors";
        function f(o) {
          return o[g];
        }
        e.isSyntaxError = f;
        function F(o) {
          return o[c] || [];
        }
        e.getParseErrors = F;
        function _(o) {
          return o.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
        }
        e.escapeRegExp = _;
        var w = Object.getPrototypeOf({});
        function E(o) {
          return typeof o == "object" && o !== null && Object.getPrototypeOf(o) === w;
        }
        function N(o) {
          let d = "";
          for (let v = 0; v < o.length; v++) {
            let S = o.charCodeAt(v);
            if (S >= 55296 && S <= 56319 && o.length > v + 1) {
              let b = o.charCodeAt(v + 1);
              b >= 56320 && b <= 57343 && (v++, S = (S - 55296 << 10) + b - 56320 + 65536);
            }
            S <= 127 ? d += String.fromCharCode(S) : S <= 2047 ? d += String.fromCharCode(S >> 6 & 31 | 192, S & 63 | 128) : S <= 65535 ? d += String.fromCharCode(S >> 12 | 224, S >> 6 & 63 | 128, S & 63 | 128) : S <= 2097151 && (d += String.fromCharCode(S >> 18 & 7 | 240, S >> 12 & 63 | 128, S >> 6 & 63 | 128, S & 63 | 128));
          }
          return d;
        }
        e.utf8Encode = N;
        function x(o) {
          if (typeof o == "string")
            return o;
          if (o instanceof Array)
            return "[" + o.map(x).join(", ") + "]";
          if (o == null)
            return "" + o;
          if (o.overriddenName)
            return `${o.overriddenName}`;
          if (o.name)
            return `${o.name}`;
          if (!o.toString)
            return "object";
          let d = o.toString();
          if (d == null)
            return "" + d;
          let v = d.indexOf(`
`);
          return v === -1 ? d : d.substring(0, v);
        }
        e.stringify = x;
        function I(o) {
          return typeof o == "function" && o.hasOwnProperty("__forward_ref__") ? o() : o;
        }
        e.resolveForwardRef = I;
        function P(o) {
          return !!o && typeof o.then == "function";
        }
        e.isPromise = P;
        var $ = class {
          constructor(o) {
            this.full = o;
            let d = o.split(".");
            this.major = d[0], this.minor = d[1], this.patch = d.slice(2).join(".");
          }
        };
        e.Version = $;
        var D = typeof window < "u" && window, T = typeof self < "u" && typeof WorkerGlobalScope < "u" && self instanceof WorkerGlobalScope && self, m = typeof globalThis < "u" && globalThis, C = m || D || T;
        e.global = C;
      } }), Fg = te({ "node_modules/angular-html-parser/lib/compiler/src/compile_metadata.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = Cg(), t = Eg(), s = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
        function a(v) {
          return v.replace(/\W/g, "_");
        }
        e.sanitizeIdentifier = a;
        var n = 0;
        function u(v) {
          if (!v || !v.reference)
            return null;
          let S = v.reference;
          if (S instanceof r.StaticSymbol)
            return S.name;
          if (S.__anonymousType)
            return S.__anonymousType;
          let b = t.stringify(S);
          return b.indexOf("(") >= 0 ? (b = `anonymous_${n++}`, S.__anonymousType = b) : b = a(b), b;
        }
        e.identifierName = u;
        function i2(v) {
          let S = v.reference;
          return S instanceof r.StaticSymbol ? S.filePath : `./${t.stringify(S)}`;
        }
        e.identifierModuleUrl = i2;
        function l(v, S) {
          return `View_${u({ reference: v })}_${S}`;
        }
        e.viewClassName = l;
        function p2(v) {
          return `RenderType_${u({ reference: v })}`;
        }
        e.rendererTypeName = p2;
        function y(v) {
          return `HostView_${u({ reference: v })}`;
        }
        e.hostViewClassName = y;
        function h2(v) {
          return `${u({ reference: v })}NgFactory`;
        }
        e.componentFactoryName = h2;
        var g;
        (function(v) {
          v[v.Pipe = 0] = "Pipe", v[v.Directive = 1] = "Directive", v[v.NgModule = 2] = "NgModule", v[v.Injectable = 3] = "Injectable";
        })(g = e.CompileSummaryKind || (e.CompileSummaryKind = {}));
        function c(v) {
          return v.value != null ? a(v.value) : u(v.identifier);
        }
        e.tokenName = c;
        function f(v) {
          return v.identifier != null ? v.identifier.reference : v.value;
        }
        e.tokenReference = f;
        var F = class {
          constructor() {
            let { moduleUrl: v, styles: S, styleUrls: b } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            this.moduleUrl = v || null, this.styles = P(S), this.styleUrls = P(b);
          }
        };
        e.CompileStylesheetMetadata = F;
        var _ = class {
          constructor(v) {
            let { encapsulation: S, template: b, templateUrl: B, htmlAst: k, styles: M, styleUrls: R, externalStylesheets: q, animations: J, ngContentSelectors: L, interpolation: Q, isInline: V, preserveWhitespaces: j } = v;
            if (this.encapsulation = S, this.template = b, this.templateUrl = B, this.htmlAst = k, this.styles = P(M), this.styleUrls = P(R), this.externalStylesheets = P(q), this.animations = J ? D(J) : [], this.ngContentSelectors = L || [], Q && Q.length != 2)
              throw new Error("'interpolation' should have a start and an end symbol.");
            this.interpolation = Q, this.isInline = V, this.preserveWhitespaces = j;
          }
          toSummary() {
            return { ngContentSelectors: this.ngContentSelectors, encapsulation: this.encapsulation, styles: this.styles, animations: this.animations };
          }
        };
        e.CompileTemplateMetadata = _;
        var w = class {
          static create(v) {
            let { isHost: S, type: b, isComponent: B, selector: k, exportAs: M, changeDetection: R, inputs: q, outputs: J, host: L, providers: Q, viewProviders: V, queries: j, guards: Y, viewQueries: ie, entryComponents: ee, template: ce, componentViewType: W, rendererType: K, componentFactory: de } = v, ue = {}, Fe = {}, z = {};
            L != null && Object.keys(L).forEach((se) => {
              let fe = L[se], ge = se.match(s);
              ge === null ? z[se] = fe : ge[1] != null ? Fe[ge[1]] = fe : ge[2] != null && (ue[ge[2]] = fe);
            });
            let U = {};
            q != null && q.forEach((se) => {
              let fe = t.splitAtColon(se, [se, se]);
              U[fe[0]] = fe[1];
            });
            let Z = {};
            return J != null && J.forEach((se) => {
              let fe = t.splitAtColon(se, [se, se]);
              Z[fe[0]] = fe[1];
            }), new w({ isHost: S, type: b, isComponent: !!B, selector: k, exportAs: M, changeDetection: R, inputs: U, outputs: Z, hostListeners: ue, hostProperties: Fe, hostAttributes: z, providers: Q, viewProviders: V, queries: j, guards: Y, viewQueries: ie, entryComponents: ee, template: ce, componentViewType: W, rendererType: K, componentFactory: de });
          }
          constructor(v) {
            let { isHost: S, type: b, isComponent: B, selector: k, exportAs: M, changeDetection: R, inputs: q, outputs: J, hostListeners: L, hostProperties: Q, hostAttributes: V, providers: j, viewProviders: Y, queries: ie, guards: ee, viewQueries: ce, entryComponents: W, template: K, componentViewType: de, rendererType: ue, componentFactory: Fe } = v;
            this.isHost = !!S, this.type = b, this.isComponent = B, this.selector = k, this.exportAs = M, this.changeDetection = R, this.inputs = q, this.outputs = J, this.hostListeners = L, this.hostProperties = Q, this.hostAttributes = V, this.providers = P(j), this.viewProviders = P(Y), this.queries = P(ie), this.guards = ee, this.viewQueries = P(ce), this.entryComponents = P(W), this.template = K, this.componentViewType = de, this.rendererType = ue, this.componentFactory = Fe;
          }
          toSummary() {
            return { summaryKind: g.Directive, type: this.type, isComponent: this.isComponent, selector: this.selector, exportAs: this.exportAs, inputs: this.inputs, outputs: this.outputs, hostListeners: this.hostListeners, hostProperties: this.hostProperties, hostAttributes: this.hostAttributes, providers: this.providers, viewProviders: this.viewProviders, queries: this.queries, guards: this.guards, viewQueries: this.viewQueries, entryComponents: this.entryComponents, changeDetection: this.changeDetection, template: this.template && this.template.toSummary(), componentViewType: this.componentViewType, rendererType: this.rendererType, componentFactory: this.componentFactory };
          }
        };
        e.CompileDirectiveMetadata = w;
        var E = class {
          constructor(v) {
            let { type: S, name: b, pure: B } = v;
            this.type = S, this.name = b, this.pure = !!B;
          }
          toSummary() {
            return { summaryKind: g.Pipe, type: this.type, name: this.name, pure: this.pure };
          }
        };
        e.CompilePipeMetadata = E;
        var N = class {
        };
        e.CompileShallowModuleMetadata = N;
        var x = class {
          constructor(v) {
            let { type: S, providers: b, declaredDirectives: B, exportedDirectives: k, declaredPipes: M, exportedPipes: R, entryComponents: q, bootstrapComponents: J, importedModules: L, exportedModules: Q, schemas: V, transitiveModule: j, id: Y } = v;
            this.type = S || null, this.declaredDirectives = P(B), this.exportedDirectives = P(k), this.declaredPipes = P(M), this.exportedPipes = P(R), this.providers = P(b), this.entryComponents = P(q), this.bootstrapComponents = P(J), this.importedModules = P(L), this.exportedModules = P(Q), this.schemas = P(V), this.id = Y || null, this.transitiveModule = j || null;
          }
          toSummary() {
            let v = this.transitiveModule;
            return { summaryKind: g.NgModule, type: this.type, entryComponents: v.entryComponents, providers: v.providers, modules: v.modules, exportedDirectives: v.exportedDirectives, exportedPipes: v.exportedPipes };
          }
        };
        e.CompileNgModuleMetadata = x;
        var I = class {
          constructor() {
            this.directivesSet = /* @__PURE__ */ new Set(), this.directives = [], this.exportedDirectivesSet = /* @__PURE__ */ new Set(), this.exportedDirectives = [], this.pipesSet = /* @__PURE__ */ new Set(), this.pipes = [], this.exportedPipesSet = /* @__PURE__ */ new Set(), this.exportedPipes = [], this.modulesSet = /* @__PURE__ */ new Set(), this.modules = [], this.entryComponentsSet = /* @__PURE__ */ new Set(), this.entryComponents = [], this.providers = [];
          }
          addProvider(v, S) {
            this.providers.push({ provider: v, module: S });
          }
          addDirective(v) {
            this.directivesSet.has(v.reference) || (this.directivesSet.add(v.reference), this.directives.push(v));
          }
          addExportedDirective(v) {
            this.exportedDirectivesSet.has(v.reference) || (this.exportedDirectivesSet.add(v.reference), this.exportedDirectives.push(v));
          }
          addPipe(v) {
            this.pipesSet.has(v.reference) || (this.pipesSet.add(v.reference), this.pipes.push(v));
          }
          addExportedPipe(v) {
            this.exportedPipesSet.has(v.reference) || (this.exportedPipesSet.add(v.reference), this.exportedPipes.push(v));
          }
          addModule(v) {
            this.modulesSet.has(v.reference) || (this.modulesSet.add(v.reference), this.modules.push(v));
          }
          addEntryComponent(v) {
            this.entryComponentsSet.has(v.componentType) || (this.entryComponentsSet.add(v.componentType), this.entryComponents.push(v));
          }
        };
        e.TransitiveCompileNgModuleMetadata = I;
        function P(v) {
          return v || [];
        }
        var $ = class {
          constructor(v, S) {
            let { useClass: b, useValue: B, useExisting: k, useFactory: M, deps: R, multi: q } = S;
            this.token = v, this.useClass = b || null, this.useValue = B, this.useExisting = k, this.useFactory = M || null, this.dependencies = R || null, this.multi = !!q;
          }
        };
        e.ProviderMeta = $;
        function D(v) {
          return v.reduce((S, b) => {
            let B = Array.isArray(b) ? D(b) : b;
            return S.concat(B);
          }, []);
        }
        e.flatten = D;
        function T(v) {
          return v.replace(/(\w+:\/\/[\w:-]+)?(\/+)?/, "ng:///");
        }
        function m(v, S, b) {
          let B;
          return b.isInline ? S.type.reference instanceof r.StaticSymbol ? B = `${S.type.reference.filePath}.${S.type.reference.name}.html` : B = `${u(v)}/${u(S.type)}.html` : B = b.templateUrl, S.type.reference instanceof r.StaticSymbol ? B : T(B);
        }
        e.templateSourceUrl = m;
        function C(v, S) {
          let b = v.moduleUrl.split(/\/\\/g), B = b[b.length - 1];
          return T(`css/${S}${B}.ngstyle.js`);
        }
        e.sharedStylesheetJitUrl = C;
        function o(v) {
          return T(`${u(v.type)}/module.ngfactory.js`);
        }
        e.ngModuleJitUrl = o;
        function d(v, S) {
          return T(`${u(v)}/${u(S.type)}.ngfactory.js`);
        }
        e.templateJitUrl = d;
      } }), Ag = te({ "node_modules/angular-html-parser/lib/compiler/src/parse_util.js"(e) {
        ne(), Object.defineProperty(e, "__esModule", { value: true });
        var r = vg(), t = Fg(), s = class {
          constructor(y, h2, g, c) {
            this.file = y, this.offset = h2, this.line = g, this.col = c;
          }
          toString() {
            return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;
          }
          moveBy(y) {
            let h2 = this.file.content, g = h2.length, c = this.offset, f = this.line, F = this.col;
            for (; c > 0 && y < 0; )
              if (c--, y++, h2.charCodeAt(c) == r.$LF) {
                f--;
                let w = h2.substr(0, c - 1).lastIndexOf(String.fromCharCode(r.$LF));
                F = w > 0 ? c - w : c;
              } else
                F--;
            for (; c < g && y > 0; ) {
              let _ = h2.charCodeAt(c);
              c++, y--, _ == r.$LF ? (f++, F = 0) : F++;
            }
            return new s(this.file, c, f, F);
          }
          getContext(y, h2) {
            let g = this.file.content, c = this.offset;
            if (c != null) {
              c > g.length - 1 && (c = g.length - 1);
              let f = c, F = 0, _ = 0;
              for (; F < y && c > 0 && (c--, F++, !(g[c] == `
` && ++_ == h2)); )
                ;
              for (F = 0, _ = 0; F < y && f < g.length - 1 && (f++, F++, !(g[f] == `
` && ++_ == h2)); )
                ;
              return { before: g.substring(c, this.offset), after: g.substring(this.offset, f + 1) };
            }
            return null;
          }
        };
        e.ParseLocation = s;
        var a = class {
          constructor(y, h2) {
            this.content = y, this.url = h2;
          }
        };
        e.ParseSourceFile = a;
        var n = class {
          constructor(y, h2) {
            let g = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            this.start = y, this.end = h2, this.details = g;
          }
          toString() {
            return this.start.file.content.substring(this.start.offset, this.end.offset);
          }
        };
        e.ParseSourceSpan = n, e.EMPTY_PARSE_LOCATION = new s(new a("", ""), 0, 0, 0), e.EMPTY_SOURCE_SPAN = new n(e.EMPTY_PARSE_LOCATION, e.EMPTY_PARSE_LOCATION);
        var u;
        (function(y) {
          y[y.WARNING = 0] = "WARNING", y[y.ERROR = 1] = "ERROR";
        })(u = e.ParseErrorLevel || (e.ParseErrorLevel = {}));
        var i2 = class {
          constructor(y, h2) {
            let g = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : u.ERROR;
            this.span = y, this.msg = h2, this.level = g;
          }
          contextualMessage() {
            let y = this.span.start.getContext(100, 3);
            return y ? `${this.msg} ("${y.before}[${u[this.level]} ->]${y.after}")` : this.msg;
          }
          toString() {
            let y = this.span.details ? `, ${this.span.details}` : "";
            return `${this.contextualMessage()}: ${this.span.start}${y}`;
          }
        };
        e.ParseError = i2;
        function l(y, h2) {
          let g = t.identifierModuleUrl(h2), c = g != null ? `in ${y} ${t.identifierName(h2)} in ${g}` : `in ${y} ${t.identifierName(h2)}`, f = new a("", c);
          return new n(new s(f, -1, -1, -1), new s(f, -1, -1, -1));
        }
        e.typeSourceSpan = l;
        function p2(y, h2, g) {
          let c = `in ${y} ${h2} in ${g}`, f = new a("", c);
          return new n(new s(f, -1, -1, -1), new s(f, -1, -1, -1));
        }
        e.r3JitTypeSourceSpan = p2;
      } }), Sg = te({ "src/language-html/print-preprocess.js"(e, r) {
        ne();
        var { ParseSourceSpan: t } = Ag(), { htmlTrim: s, getLeadingAndTrailingHtmlWhitespace: a, hasHtmlWhitespace: n, canHaveInterpolation: u, getNodeCssStyleDisplay: i2, isDanglingSpaceSensitiveNode: l, isIndentationSensitiveNode: p2, isLeadingSpaceSensitiveNode: y, isTrailingSpaceSensitiveNode: h2, isWhitespaceSensitiveNode: g, isVueScriptTag: c } = Rt(), f = [_, w, N, I, P, T, $, D, m, x, C];
        function F(o, d) {
          for (let v of f)
            v(o, d);
          return o;
        }
        function _(o) {
          o.walk((d) => {
            if (d.type === "element" && d.tagDefinition.ignoreFirstLf && d.children.length > 0 && d.children[0].type === "text" && d.children[0].value[0] === `
`) {
              let v = d.children[0];
              v.value.length === 1 ? d.removeChild(v) : v.value = v.value.slice(1);
            }
          });
        }
        function w(o) {
          let d = (v) => v.type === "element" && v.prev && v.prev.type === "ieConditionalStartComment" && v.prev.sourceSpan.end.offset === v.startSourceSpan.start.offset && v.firstChild && v.firstChild.type === "ieConditionalEndComment" && v.firstChild.sourceSpan.start.offset === v.startSourceSpan.end.offset;
          o.walk((v) => {
            if (v.children)
              for (let S = 0; S < v.children.length; S++) {
                let b = v.children[S];
                if (!d(b))
                  continue;
                let B = b.prev, k = b.firstChild;
                v.removeChild(B), S--;
                let M = new t(B.sourceSpan.start, k.sourceSpan.end), R = new t(M.start, b.sourceSpan.end);
                b.condition = B.condition, b.sourceSpan = R, b.startSourceSpan = M, b.removeChild(k);
              }
          });
        }
        function E(o, d, v) {
          o.walk((S) => {
            if (S.children)
              for (let b = 0; b < S.children.length; b++) {
                let B = S.children[b];
                if (B.type !== "text" && !d(B))
                  continue;
                B.type !== "text" && (B.type = "text", B.value = v(B));
                let k = B.prev;
                !k || k.type !== "text" || (k.value += B.value, k.sourceSpan = new t(k.sourceSpan.start, B.sourceSpan.end), S.removeChild(B), b--);
              }
          });
        }
        function N(o) {
          return E(o, (d) => d.type === "cdata", (d) => `<![CDATA[${d.value}]]>`);
        }
        function x(o) {
          let d = (v) => v.type === "element" && v.attrs.length === 0 && v.children.length === 1 && v.firstChild.type === "text" && !n(v.children[0].value) && !v.firstChild.hasLeadingSpaces && !v.firstChild.hasTrailingSpaces && v.isLeadingSpaceSensitive && !v.hasLeadingSpaces && v.isTrailingSpaceSensitive && !v.hasTrailingSpaces && v.prev && v.prev.type === "text" && v.next && v.next.type === "text";
          o.walk((v) => {
            if (v.children)
              for (let S = 0; S < v.children.length; S++) {
                let b = v.children[S];
                if (!d(b))
                  continue;
                let B = b.prev, k = b.next;
                B.value += `<${b.rawName}>` + b.firstChild.value + `</${b.rawName}>` + k.value, B.sourceSpan = new t(B.sourceSpan.start, k.sourceSpan.end), B.isTrailingSpaceSensitive = k.isTrailingSpaceSensitive, B.hasTrailingSpaces = k.hasTrailingSpaces, v.removeChild(b), S--, v.removeChild(k);
              }
          });
        }
        function I(o, d) {
          if (d.parser === "html")
            return;
          let v = /{{(.+?)}}/s;
          o.walk((S) => {
            if (u(S))
              for (let b of S.children) {
                if (b.type !== "text")
                  continue;
                let B = b.sourceSpan.start, k = null, M = b.value.split(v);
                for (let R = 0; R < M.length; R++, B = k) {
                  let q = M[R];
                  if (R % 2 === 0) {
                    k = B.moveBy(q.length), q.length > 0 && S.insertChildBefore(b, { type: "text", value: q, sourceSpan: new t(B, k) });
                    continue;
                  }
                  k = B.moveBy(q.length + 4), S.insertChildBefore(b, { type: "interpolation", sourceSpan: new t(B, k), children: q.length === 0 ? [] : [{ type: "text", value: q, sourceSpan: new t(B.moveBy(2), k.moveBy(-2)) }] });
                }
                S.removeChild(b);
              }
          });
        }
        function P(o) {
          o.walk((d) => {
            if (!d.children)
              return;
            if (d.children.length === 0 || d.children.length === 1 && d.children[0].type === "text" && s(d.children[0].value).length === 0) {
              d.hasDanglingSpaces = d.children.length > 0, d.children = [];
              return;
            }
            let v = g(d), S = p2(d);
            if (!v)
              for (let b = 0; b < d.children.length; b++) {
                let B = d.children[b];
                if (B.type !== "text")
                  continue;
                let { leadingWhitespace: k, text: M, trailingWhitespace: R } = a(B.value), q = B.prev, J = B.next;
                M ? (B.value = M, B.sourceSpan = new t(B.sourceSpan.start.moveBy(k.length), B.sourceSpan.end.moveBy(-R.length)), k && (q && (q.hasTrailingSpaces = true), B.hasLeadingSpaces = true), R && (B.hasTrailingSpaces = true, J && (J.hasLeadingSpaces = true))) : (d.removeChild(B), b--, (k || R) && (q && (q.hasTrailingSpaces = true), J && (J.hasLeadingSpaces = true)));
              }
            d.isWhitespaceSensitive = v, d.isIndentationSensitive = S;
          });
        }
        function $(o) {
          o.walk((d) => {
            d.isSelfClosing = !d.children || d.type === "element" && (d.tagDefinition.isVoid || d.startSourceSpan === d.endSourceSpan);
          });
        }
        function D(o, d) {
          o.walk((v) => {
            v.type === "element" && (v.hasHtmComponentClosingTag = v.endSourceSpan && /^<\s*\/\s*\/\s*>$/.test(d.originalText.slice(v.endSourceSpan.start.offset, v.endSourceSpan.end.offset)));
          });
        }
        function T(o, d) {
          o.walk((v) => {
            v.cssDisplay = i2(v, d);
          });
        }
        function m(o, d) {
          o.walk((v) => {
            let { children: S } = v;
            if (S) {
              if (S.length === 0) {
                v.isDanglingSpaceSensitive = l(v);
                return;
              }
              for (let b of S)
                b.isLeadingSpaceSensitive = y(b, d), b.isTrailingSpaceSensitive = h2(b, d);
              for (let b = 0; b < S.length; b++) {
                let B = S[b];
                B.isLeadingSpaceSensitive = (b === 0 || B.prev.isTrailingSpaceSensitive) && B.isLeadingSpaceSensitive, B.isTrailingSpaceSensitive = (b === S.length - 1 || B.next.isLeadingSpaceSensitive) && B.isTrailingSpaceSensitive;
              }
            }
          });
        }
        function C(o, d) {
          if (d.parser === "vue") {
            let v = o.children.find((b) => c(b, d));
            if (!v)
              return;
            let { lang: S } = v.attrMap;
            (S === "ts" || S === "typescript") && (d.__should_parse_vue_template_with_ts = true);
          }
        }
        r.exports = F;
      } }), xg = te({ "src/language-html/pragma.js"(e, r) {
        ne();
        function t(a) {
          return /^\s*<!--\s*@(?:format|prettier)\s*-->/.test(a);
        }
        function s(a) {
          return `<!-- @format -->

` + a.replace(/^\s*\n/, "");
        }
        r.exports = { hasPragma: t, insertPragma: s };
      } }), au = te({ "src/language-html/loc.js"(e, r) {
        ne();
        function t(a) {
          return a.sourceSpan.start.offset;
        }
        function s(a) {
          return a.sourceSpan.end.offset;
        }
        r.exports = { locStart: t, locEnd: s };
      } }), ur = te({ "src/language-html/print/tag.js"(e, r) {
        ne();
        var t = Zt(), { isNonEmptyArray: s } = Ue(), { builders: { indent: a, join: n, line: u, softline: i2, hardline: l }, utils: { replaceTextEndOfLine: p2 } } = qe(), { locStart: y, locEnd: h2 } = au(), { isTextLikeNode: g, getLastDescendant: c, isPreLikeNode: f, hasPrettierIgnore: F, shouldPreserveContent: _, isVueSfcBlock: w } = Rt();
        function E(L, Q) {
          return [L.isSelfClosing ? "" : N(L, Q), x(L, Q)];
        }
        function N(L, Q) {
          return L.lastChild && o(L.lastChild) ? "" : [I(L, Q), $(L, Q)];
        }
        function x(L, Q) {
          return (L.next ? m(L.next) : C(L.parent)) ? "" : [D(L, Q), P(L, Q)];
        }
        function I(L, Q) {
          return C(L) ? D(L.lastChild, Q) : "";
        }
        function P(L, Q) {
          return o(L) ? $(L.parent, Q) : d(L) ? q(L.next) : "";
        }
        function $(L, Q) {
          if (t(!L.isSelfClosing), T(L, Q))
            return "";
          switch (L.type) {
            case "ieConditionalComment":
              return "<!";
            case "element":
              if (L.hasHtmComponentClosingTag)
                return "<//";
            default:
              return `</${L.rawName}`;
          }
        }
        function D(L, Q) {
          if (T(L, Q))
            return "";
          switch (L.type) {
            case "ieConditionalComment":
            case "ieConditionalEndComment":
              return "[endif]-->";
            case "ieConditionalStartComment":
              return "]><!-->";
            case "interpolation":
              return "}}";
            case "element":
              if (L.isSelfClosing)
                return "/>";
            default:
              return ">";
          }
        }
        function T(L, Q) {
          return !L.isSelfClosing && !L.endSourceSpan && (F(L) || _(L.parent, Q));
        }
        function m(L) {
          return L.prev && L.prev.type !== "docType" && !g(L.prev) && L.isLeadingSpaceSensitive && !L.hasLeadingSpaces;
        }
        function C(L) {
          return L.lastChild && L.lastChild.isTrailingSpaceSensitive && !L.lastChild.hasTrailingSpaces && !g(c(L.lastChild)) && !f(L);
        }
        function o(L) {
          return !L.next && !L.hasTrailingSpaces && L.isTrailingSpaceSensitive && g(c(L));
        }
        function d(L) {
          return L.next && !g(L.next) && g(L) && L.isTrailingSpaceSensitive && !L.hasTrailingSpaces;
        }
        function v(L) {
          let Q = L.trim().match(/^prettier-ignore-attribute(?:\s+(.+))?$/s);
          return Q ? Q[1] ? Q[1].split(/\s+/) : true : false;
        }
        function S(L) {
          return !L.prev && L.isLeadingSpaceSensitive && !L.hasLeadingSpaces;
        }
        function b(L, Q, V) {
          let j = L.getValue();
          if (!s(j.attrs))
            return j.isSelfClosing ? " " : "";
          let Y = j.prev && j.prev.type === "comment" && v(j.prev.value), ie = typeof Y == "boolean" ? () => Y : Array.isArray(Y) ? (ue) => Y.includes(ue.rawName) : () => false, ee = L.map((ue) => {
            let Fe = ue.getValue();
            return ie(Fe) ? p2(Q.originalText.slice(y(Fe), h2(Fe))) : V();
          }, "attrs"), ce = j.type === "element" && j.fullName === "script" && j.attrs.length === 1 && j.attrs[0].fullName === "src" && j.children.length === 0, K = Q.singleAttributePerLine && j.attrs.length > 1 && !w(j, Q) ? l : u, de = [a([ce ? " " : u, n(K, ee)])];
          return j.firstChild && S(j.firstChild) || j.isSelfClosing && C(j.parent) || ce ? de.push(j.isSelfClosing ? " " : "") : de.push(Q.bracketSameLine ? j.isSelfClosing ? " " : "" : j.isSelfClosing ? u : i2), de;
        }
        function B(L) {
          return L.firstChild && S(L.firstChild) ? "" : J(L);
        }
        function k(L, Q, V) {
          let j = L.getValue();
          return [M(j, Q), b(L, Q, V), j.isSelfClosing ? "" : B(j)];
        }
        function M(L, Q) {
          return L.prev && d(L.prev) ? "" : [R(L, Q), q(L)];
        }
        function R(L, Q) {
          return S(L) ? J(L.parent) : m(L) ? D(L.prev, Q) : "";
        }
        function q(L) {
          switch (L.type) {
            case "ieConditionalComment":
            case "ieConditionalStartComment":
              return `<!--[if ${L.condition}`;
            case "ieConditionalEndComment":
              return "<!--<!";
            case "interpolation":
              return "{{";
            case "docType":
              return "<!DOCTYPE";
            case "element":
              if (L.condition)
                return `<!--[if ${L.condition}]><!--><${L.rawName}`;
            default:
              return `<${L.rawName}`;
          }
        }
        function J(L) {
          switch (t(!L.isSelfClosing), L.type) {
            case "ieConditionalComment":
              return "]>";
            case "element":
              if (L.condition)
                return "><!--<![endif]-->";
            default:
              return ">";
          }
        }
        r.exports = { printClosingTag: E, printClosingTagStart: N, printClosingTagStartMarker: $, printClosingTagEndMarker: D, printClosingTagSuffix: P, printClosingTagEnd: x, needsToBorrowLastChildClosingTagEndMarker: C, needsToBorrowParentClosingTagStartMarker: o, needsToBorrowPrevClosingTagEndMarker: m, printOpeningTag: k, printOpeningTagStart: M, printOpeningTagPrefix: R, printOpeningTagStartMarker: q, printOpeningTagEndMarker: J, needsToBorrowNextOpeningTagStartMarker: d, needsToBorrowParentOpeningTagEndMarker: S };
      } }), bg = te({ "node_modules/parse-srcset/src/parse-srcset.js"(e, r) {
        ne(), function(t, s) {
          typeof r == "object" && r.exports ? r.exports = s() : t.parseSrcset = s();
        }(e, function() {
          return function(t, s) {
            var a = s && s.logger || console;
            function n($) {
              return $ === " " || $ === "	" || $ === `
` || $ === "\f" || $ === "\r";
            }
            function u($) {
              var D, T = $.exec(t.substring(N));
              if (T)
                return D = T[0], N += D.length, D;
            }
            for (var i2 = t.length, l = /^[ \t\n\r\u000c]+/, p2 = /^[, \t\n\r\u000c]+/, y = /^[^ \t\n\r\u000c]+/, h2 = /[,]+$/, g = /^\d+$/, c = /^-?(?:[0-9]+|[0-9]*\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/, f, F, _, w, E, N = 0, x = []; ; ) {
              if (u(p2), N >= i2)
                return x;
              f = u(y), F = [], f.slice(-1) === "," ? (f = f.replace(h2, ""), P()) : I();
            }
            function I() {
              for (u(l), _ = "", w = "in descriptor"; ; ) {
                if (E = t.charAt(N), w === "in descriptor")
                  if (n(E))
                    _ && (F.push(_), _ = "", w = "after descriptor");
                  else if (E === ",") {
                    N += 1, _ && F.push(_), P();
                    return;
                  } else if (E === "(")
                    _ = _ + E, w = "in parens";
                  else if (E === "") {
                    _ && F.push(_), P();
                    return;
                  } else
                    _ = _ + E;
                else if (w === "in parens")
                  if (E === ")")
                    _ = _ + E, w = "in descriptor";
                  else if (E === "") {
                    F.push(_), P();
                    return;
                  } else
                    _ = _ + E;
                else if (w === "after descriptor" && !n(E))
                  if (E === "") {
                    P();
                    return;
                  } else
                    w = "in descriptor", N -= 1;
                N += 1;
              }
            }
            function P() {
              var $ = false, D, T, m, C, o = {}, d, v, S, b, B;
              for (C = 0; C < F.length; C++)
                d = F[C], v = d[d.length - 1], S = d.substring(0, d.length - 1), b = parseInt(S, 10), B = parseFloat(S), g.test(S) && v === "w" ? ((D || T) && ($ = true), b === 0 ? $ = true : D = b) : c.test(S) && v === "x" ? ((D || T || m) && ($ = true), B < 0 ? $ = true : T = B) : g.test(S) && v === "h" ? ((m || T) && ($ = true), b === 0 ? $ = true : m = b) : $ = true;
              $ ? a && a.error && a.error("Invalid srcset descriptor found in '" + t + "' at '" + d + "'.") : (o.url = f, D && (o.w = D), T && (o.d = T), m && (o.h = m), x.push(o));
            }
          };
        });
      } }), Tg = te({ "src/language-html/syntax-attribute.js"(e, r) {
        ne();
        var t = bg(), { builders: { ifBreak: s, join: a, line: n } } = qe();
        function u(l) {
          let p2 = t(l, { logger: { error(I) {
            throw new Error(I);
          } } }), y = p2.some((I) => {
            let { w: P } = I;
            return P;
          }), h2 = p2.some((I) => {
            let { h: P } = I;
            return P;
          }), g = p2.some((I) => {
            let { d: P } = I;
            return P;
          });
          if (y + h2 + g > 1)
            throw new Error("Mixed descriptor in srcset is not supported");
          let c = y ? "w" : h2 ? "h" : "d", f = y ? "w" : h2 ? "h" : "x", F = (I) => Math.max(...I), _ = p2.map((I) => I.url), w = F(_.map((I) => I.length)), E = p2.map((I) => I[c]).map((I) => I ? I.toString() : ""), N = E.map((I) => {
            let P = I.indexOf(".");
            return P === -1 ? I.length : P;
          }), x = F(N);
          return a([",", n], _.map((I, P) => {
            let $ = [I], D = E[P];
            if (D) {
              let T = w - I.length + 1, m = x - N[P], C = " ".repeat(T + m);
              $.push(s(C, " "), D + f);
            }
            return $;
          }));
        }
        function i2(l) {
          return l.trim().split(/\s+/).join(" ");
        }
        r.exports = { printImgSrcset: u, printClassNames: i2 };
      } }), Bg = te({ "src/language-html/syntax-vue.js"(e, r) {
        ne();
        var { builders: { group: t } } = qe();
        function s(i2, l) {
          let { left: p2, operator: y, right: h2 } = a(i2);
          return [t(l(`function _(${p2}) {}`, { parser: "babel", __isVueForBindingLeft: true })), " ", y, " ", l(h2, { parser: "__js_expression" }, { stripTrailingHardline: true })];
        }
        function a(i2) {
          let l = /(.*?)\s+(in|of)\s+(.*)/s, p2 = /,([^,\]}]*)(?:,([^,\]}]*))?$/, y = /^\(|\)$/g, h2 = i2.match(l);
          if (!h2)
            return;
          let g = {};
          if (g.for = h2[3].trim(), !g.for)
            return;
          let c = h2[1].trim().replace(y, ""), f = c.match(p2);
          f ? (g.alias = c.replace(p2, ""), g.iterator1 = f[1].trim(), f[2] && (g.iterator2 = f[2].trim())) : g.alias = c;
          let F = [g.alias, g.iterator1, g.iterator2];
          if (!F.some((_, w) => !_ && (w === 0 || F.slice(w + 1).some(Boolean))))
            return { left: F.filter(Boolean).join(","), operator: h2[2], right: g.for };
        }
        function n(i2, l) {
          return l(`function _(${i2}) {}`, { parser: "babel", __isVueBindings: true });
        }
        function u(i2) {
          let l = /^(?:[\w$]+|\([^)]*\))\s*=>|^function\s*\(/, p2 = /^[$A-Z_a-z][\w$]*(?:\.[$A-Z_a-z][\w$]*|\['[^']*']|\["[^"]*"]|\[\d+]|\[[$A-Z_a-z][\w$]*])*$/, y = i2.trim();
          return l.test(y) || p2.test(y);
        }
        r.exports = { isVueEventBindingExpression: u, printVueFor: s, printVueBindings: n };
      } }), Lo = te({ "src/language-html/get-node-content.js"(e, r) {
        ne();
        var { needsToBorrowParentClosingTagStartMarker: t, printClosingTagStartMarker: s, needsToBorrowLastChildClosingTagEndMarker: a, printClosingTagEndMarker: n, needsToBorrowParentOpeningTagEndMarker: u, printOpeningTagEndMarker: i2 } = ur();
        function l(p2, y) {
          let h2 = p2.startSourceSpan.end.offset;
          p2.firstChild && u(p2.firstChild) && (h2 -= i2(p2).length);
          let g = p2.endSourceSpan.start.offset;
          return p2.lastChild && t(p2.lastChild) ? g += s(p2, y).length : a(p2) && (g -= n(p2.lastChild, y).length), y.originalText.slice(h2, g);
        }
        r.exports = l;
      } }), Ng = te({ "src/language-html/embed.js"(e, r) {
        ne();
        var { builders: { breakParent: t, group: s, hardline: a, indent: n, line: u, fill: i2, softline: l }, utils: { mapDoc: p2, replaceTextEndOfLine: y } } = qe(), h2 = su(), { printClosingTag: g, printClosingTagSuffix: c, needsToBorrowPrevClosingTagEndMarker: f, printOpeningTagPrefix: F, printOpeningTag: _ } = ur(), { printImgSrcset: w, printClassNames: E } = Tg(), { printVueFor: N, printVueBindings: x, isVueEventBindingExpression: I } = Bg(), { isScriptLikeTag: P, isVueNonHtmlBlock: $, inferScriptParser: D, htmlTrimPreserveIndentation: T, dedentString: m, unescapeQuoteEntities: C, isVueSlotAttribute: o, isVueSfcBindingsAttribute: d, getTextValueParts: v } = Rt(), S = Lo();
        function b(k, M, R) {
          let q = (ee) => new RegExp(ee.join("|")).test(k.fullName), J = () => C(k.value), L = false, Q = (ee, ce) => {
            let W = ee.type === "NGRoot" ? ee.node.type === "NGMicrosyntax" && ee.node.body.length === 1 && ee.node.body[0].type === "NGMicrosyntaxExpression" ? ee.node.body[0].expression : ee.node : ee.type === "JsExpressionRoot" ? ee.node : ee;
            W && (W.type === "ObjectExpression" || W.type === "ArrayExpression" || ce.parser === "__vue_expression" && (W.type === "TemplateLiteral" || W.type === "StringLiteral")) && (L = true);
          }, V = (ee) => s(ee), j = function(ee) {
            let ce = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            return s([n([l, ee]), ce ? l : ""]);
          }, Y = (ee) => L ? V(ee) : j(ee), ie = (ee, ce) => M(ee, Object.assign({ __onHtmlBindingRoot: Q, __embeddedInHtml: true }, ce));
          if (k.fullName === "srcset" && (k.parent.fullName === "img" || k.parent.fullName === "source"))
            return j(w(J()));
          if (k.fullName === "class" && !R.parentParser) {
            let ee = J();
            if (!ee.includes("{{"))
              return E(ee);
          }
          if (k.fullName === "style" && !R.parentParser) {
            let ee = J();
            if (!ee.includes("{{"))
              return j(ie(ee, { parser: "css", __isHTMLStyleAttribute: true }));
          }
          if (R.parser === "vue") {
            if (k.fullName === "v-for")
              return N(J(), ie);
            if (o(k) || d(k, R))
              return x(J(), ie);
            let ee = ["^@", "^v-on:"], ce = ["^:", "^v-bind:"], W = ["^v-"];
            if (q(ee)) {
              let K = J(), de = I(K) ? "__js_expression" : R.__should_parse_vue_template_with_ts ? "__vue_ts_event_binding" : "__vue_event_binding";
              return Y(ie(K, { parser: de }));
            }
            if (q(ce))
              return Y(ie(J(), { parser: "__vue_expression" }));
            if (q(W))
              return Y(ie(J(), { parser: "__js_expression" }));
          }
          if (R.parser === "angular") {
            let ee = (z, U) => ie(z, Object.assign(Object.assign({}, U), {}, { trailingComma: "none" })), ce = ["^\\*"], W = ["^\\(.+\\)$", "^on-"], K = ["^\\[.+\\]$", "^bind(on)?-", "^ng-(if|show|hide|class|style)$"], de = ["^i18n(-.+)?$"];
            if (q(W))
              return Y(ee(J(), { parser: "__ng_action" }));
            if (q(K))
              return Y(ee(J(), { parser: "__ng_binding" }));
            if (q(de)) {
              let z = J().trim();
              return j(i2(v(k, z)), !z.includes("@@"));
            }
            if (q(ce))
              return Y(ee(J(), { parser: "__ng_directive" }));
            let ue = /{{(.+?)}}/s, Fe = J();
            if (ue.test(Fe)) {
              let z = [];
              for (let [U, Z] of Fe.split(ue).entries())
                if (U % 2 === 0)
                  z.push(y(Z));
                else
                  try {
                    z.push(s(["{{", n([u, ee(Z, { parser: "__ng_interpolation", __isInHtmlInterpolation: true })]), u, "}}"]));
                  } catch {
                    z.push("{{", y(Z), "}}");
                  }
              return s(z);
            }
          }
          return null;
        }
        function B(k, M, R, q) {
          let J = k.getValue();
          switch (J.type) {
            case "element": {
              if (P(J) || J.type === "interpolation")
                return;
              if (!J.isSelfClosing && $(J, q)) {
                let L = D(J, q);
                if (!L)
                  return;
                let Q = S(J, q), V = /^\s*$/.test(Q), j = "";
                return V || (j = R(T(Q), { parser: L, __embeddedInHtml: true }, { stripTrailingHardline: true }), V = j === ""), [F(J, q), s(_(k, q, M)), V ? "" : a, j, V ? "" : a, g(J, q), c(J, q)];
              }
              break;
            }
            case "text": {
              if (P(J.parent)) {
                let L = D(J.parent, q);
                if (L) {
                  let Q = L === "markdown" ? m(J.value.replace(/^[^\S\n]*\n/, "")) : J.value, V = { parser: L, __embeddedInHtml: true };
                  if (q.parser === "html" && L === "babel") {
                    let j = "script", { attrMap: Y } = J.parent;
                    Y && (Y.type === "module" || Y.type === "text/babel" && Y["data-type"] === "module") && (j = "module"), V.__babelSourceType = j;
                  }
                  return [t, F(J, q), R(Q, V, { stripTrailingHardline: true }), c(J, q)];
                }
              } else if (J.parent.type === "interpolation") {
                let L = { __isInHtmlInterpolation: true, __embeddedInHtml: true };
                return q.parser === "angular" ? (L.parser = "__ng_interpolation", L.trailingComma = "none") : q.parser === "vue" ? L.parser = q.__should_parse_vue_template_with_ts ? "__vue_ts_expression" : "__vue_expression" : L.parser = "__js_expression", [n([u, R(J.value, L, { stripTrailingHardline: true })]), J.parent.next && f(J.parent.next) ? " " : u];
              }
              break;
            }
            case "attribute": {
              if (!J.value)
                break;
              if (/^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/.test(q.originalText.slice(J.valueSpan.start.offset, J.valueSpan.end.offset)))
                return [J.rawName, "=", J.value];
              if (q.parser === "lwc" && /^{.*}$/s.test(q.originalText.slice(J.valueSpan.start.offset, J.valueSpan.end.offset)))
                return [J.rawName, "=", J.value];
              let L = b(J, (Q, V) => R(Q, Object.assign({ __isInHtmlAttribute: true, __embeddedInHtml: true }, V), { stripTrailingHardline: true }), q);
              if (L)
                return [J.rawName, '="', s(p2(L, (Q) => typeof Q == "string" ? Q.replace(/"/g, "&quot;") : Q)), '"'];
              break;
            }
            case "front-matter":
              return h2(J, R);
          }
        }
        r.exports = B;
      } }), Oo = te({ "src/language-html/print/children.js"(e, r) {
        ne();
        var { builders: { breakParent: t, group: s, ifBreak: a, line: n, softline: u, hardline: i2 }, utils: { replaceTextEndOfLine: l } } = qe(), { locStart: p2, locEnd: y } = au(), { forceBreakChildren: h2, forceNextEmptyLine: g, isTextLikeNode: c, hasPrettierIgnore: f, preferHardlineAsLeadingSpaces: F } = Rt(), { printOpeningTagPrefix: _, needsToBorrowNextOpeningTagStartMarker: w, printOpeningTagStartMarker: E, needsToBorrowPrevClosingTagEndMarker: N, printClosingTagEndMarker: x, printClosingTagSuffix: I, needsToBorrowParentClosingTagStartMarker: P } = ur();
        function $(m, C, o) {
          let d = m.getValue();
          return f(d) ? [_(d, C), ...l(C.originalText.slice(p2(d) + (d.prev && w(d.prev) ? E(d).length : 0), y(d) - (d.next && N(d.next) ? x(d, C).length : 0))), I(d, C)] : o();
        }
        function D(m, C) {
          return c(m) && c(C) ? m.isTrailingSpaceSensitive ? m.hasTrailingSpaces ? F(C) ? i2 : n : "" : F(C) ? i2 : u : w(m) && (f(C) || C.firstChild || C.isSelfClosing || C.type === "element" && C.attrs.length > 0) || m.type === "element" && m.isSelfClosing && N(C) ? "" : !C.isLeadingSpaceSensitive || F(C) || N(C) && m.lastChild && P(m.lastChild) && m.lastChild.lastChild && P(m.lastChild.lastChild) ? i2 : C.hasLeadingSpaces ? n : u;
        }
        function T(m, C, o) {
          let d = m.getValue();
          if (h2(d))
            return [t, ...m.map((S) => {
              let b = S.getValue(), B = b.prev ? D(b.prev, b) : "";
              return [B ? [B, g(b.prev) ? i2 : ""] : "", $(S, C, o)];
            }, "children")];
          let v = d.children.map(() => Symbol(""));
          return m.map((S, b) => {
            let B = S.getValue();
            if (c(B)) {
              if (B.prev && c(B.prev)) {
                let Q = D(B.prev, B);
                if (Q)
                  return g(B.prev) ? [i2, i2, $(S, C, o)] : [Q, $(S, C, o)];
              }
              return $(S, C, o);
            }
            let k = [], M = [], R = [], q = [], J = B.prev ? D(B.prev, B) : "", L = B.next ? D(B, B.next) : "";
            return J && (g(B.prev) ? k.push(i2, i2) : J === i2 ? k.push(i2) : c(B.prev) ? M.push(J) : M.push(a("", u, { groupId: v[b - 1] }))), L && (g(B) ? c(B.next) && q.push(i2, i2) : L === i2 ? c(B.next) && q.push(i2) : R.push(L)), [...k, s([...M, s([$(S, C, o), ...R], { id: v[b] })]), ...q];
          }, "children");
        }
        r.exports = { printChildren: T };
      } }), wg = te({ "src/language-html/print/element.js"(e, r) {
        ne();
        var { builders: { breakParent: t, dedentToRoot: s, group: a, ifBreak: n, indentIfBreak: u, indent: i2, line: l, softline: p2 }, utils: { replaceTextEndOfLine: y } } = qe(), h2 = Lo(), { shouldPreserveContent: g, isScriptLikeTag: c, isVueCustomBlock: f, countParents: F, forceBreakContent: _ } = Rt(), { printOpeningTagPrefix: w, printOpeningTag: E, printClosingTagSuffix: N, printClosingTag: x, needsToBorrowPrevClosingTagEndMarker: I, needsToBorrowLastChildClosingTagEndMarker: P } = ur(), { printChildren: $ } = Oo();
        function D(T, m, C) {
          let o = T.getValue();
          if (g(o, m))
            return [w(o, m), a(E(T, m, C)), ...y(h2(o, m)), ...x(o, m), N(o, m)];
          let d = o.children.length === 1 && o.firstChild.type === "interpolation" && o.firstChild.isLeadingSpaceSensitive && !o.firstChild.hasLeadingSpaces && o.lastChild.isTrailingSpaceSensitive && !o.lastChild.hasTrailingSpaces, v = Symbol("element-attr-group-id"), S = (M) => a([a(E(T, m, C), { id: v }), M, x(o, m)]), b = (M) => d ? u(M, { groupId: v }) : (c(o) || f(o, m)) && o.parent.type === "root" && m.parser === "vue" && !m.vueIndentScriptAndStyle ? M : i2(M), B = () => d ? n(p2, "", { groupId: v }) : o.firstChild.hasLeadingSpaces && o.firstChild.isLeadingSpaceSensitive ? l : o.firstChild.type === "text" && o.isWhitespaceSensitive && o.isIndentationSensitive ? s(p2) : p2, k = () => (o.next ? I(o.next) : P(o.parent)) ? o.lastChild.hasTrailingSpaces && o.lastChild.isTrailingSpaceSensitive ? " " : "" : d ? n(p2, "", { groupId: v }) : o.lastChild.hasTrailingSpaces && o.lastChild.isTrailingSpaceSensitive ? l : (o.lastChild.type === "comment" || o.lastChild.type === "text" && o.isWhitespaceSensitive && o.isIndentationSensitive) && new RegExp(`\\n[\\t ]{${m.tabWidth * F(T, (R) => R.parent && R.parent.type !== "root")}}$`).test(o.lastChild.value) ? "" : p2;
          return o.children.length === 0 ? S(o.hasDanglingSpaces && o.isDanglingSpaceSensitive ? l : "") : S([_(o) ? t : "", b([B(), $(T, m, C)]), k()]);
        }
        r.exports = { printElement: D };
      } }), _g = te({ "src/language-html/printer-html.js"(e, r) {
        ne();
        var { builders: { fill: t, group: s, hardline: a, literalline: n }, utils: { cleanDoc: u, getDocParts: i2, isConcat: l, replaceTextEndOfLine: p2 } } = qe(), y = gg(), { countChars: h2, unescapeQuoteEntities: g, getTextValueParts: c } = Rt(), f = Sg(), { insertPragma: F } = xg(), { locStart: _, locEnd: w } = au(), E = Ng(), { printClosingTagSuffix: N, printClosingTagEnd: x, printOpeningTagPrefix: I, printOpeningTagStart: P } = ur(), { printElement: $ } = wg(), { printChildren: D } = Oo();
        function T(m, C, o) {
          let d = m.getValue();
          switch (d.type) {
            case "front-matter":
              return p2(d.raw);
            case "root":
              return C.__onHtmlRoot && C.__onHtmlRoot(d), [s(D(m, C, o)), a];
            case "element":
            case "ieConditionalComment":
              return $(m, C, o);
            case "ieConditionalStartComment":
            case "ieConditionalEndComment":
              return [P(d), x(d)];
            case "interpolation":
              return [P(d, C), ...m.map(o, "children"), x(d, C)];
            case "text": {
              if (d.parent.type === "interpolation") {
                let S = /\n[^\S\n]*$/, b = S.test(d.value), B = b ? d.value.replace(S, "") : d.value;
                return [...p2(B), b ? a : ""];
              }
              let v = u([I(d, C), ...c(d), N(d, C)]);
              return l(v) || v.type === "fill" ? t(i2(v)) : v;
            }
            case "docType":
              return [s([P(d, C), " ", d.value.replace(/^html\b/i, "html").replace(/\s+/g, " ")]), x(d, C)];
            case "comment":
              return [I(d, C), ...p2(C.originalText.slice(_(d), w(d)), n), N(d, C)];
            case "attribute": {
              if (d.value === null)
                return d.rawName;
              let v = g(d.value), S = h2(v, "'"), b = h2(v, '"'), B = S < b ? "'" : '"';
              return [d.rawName, "=", B, ...p2(B === '"' ? v.replace(/"/g, "&quot;") : v.replace(/'/g, "&apos;")), B];
            }
            default:
              throw new Error(`Unexpected node type ${d.type}`);
          }
        }
        r.exports = { preprocess: f, print: T, insertPragma: F, massageAstNode: y, embed: E };
      } }), Pg = te({ "src/language-html/options.js"(e, r) {
        ne();
        var t = Mt(), s = "HTML";
        r.exports = { bracketSameLine: t.bracketSameLine, htmlWhitespaceSensitivity: { since: "1.15.0", category: s, type: "choice", default: "css", description: "How to handle whitespaces in HTML.", choices: [{ value: "css", description: "Respect the default value of CSS display property." }, { value: "strict", description: "Whitespaces are considered sensitive." }, { value: "ignore", description: "Whitespaces are considered insensitive." }] }, singleAttributePerLine: t.singleAttributePerLine, vueIndentScriptAndStyle: { since: "1.19.0", category: s, type: "boolean", default: false, description: "Indent script and style tags in Vue files." } };
      } }), Ig = te({ "src/language-html/parsers.js"() {
        ne();
      } }), On = te({ "node_modules/linguist-languages/data/HTML.json"(e, r) {
        r.exports = { name: "HTML", type: "markup", tmScope: "text.html.basic", aceMode: "html", codemirrorMode: "htmlmixed", codemirrorMimeType: "text/html", color: "#e34c26", aliases: ["xhtml"], extensions: [".html", ".hta", ".htm", ".html.hl", ".inc", ".xht", ".xhtml"], languageId: 146 };
      } }), kg = te({ "node_modules/linguist-languages/data/Vue.json"(e, r) {
        r.exports = { name: "Vue", type: "markup", color: "#41b883", extensions: [".vue"], tmScope: "text.html.vue", aceMode: "html", languageId: 391 };
      } }), Lg = te({ "src/language-html/index.js"(e, r) {
        ne();
        var t = _t(), s = _g(), a = Pg(), n = Ig(), u = [t(On(), () => ({ name: "Angular", since: "1.15.0", parsers: ["angular"], vscodeLanguageIds: ["html"], extensions: [".component.html"], filenames: [] })), t(On(), (l) => ({ since: "1.15.0", parsers: ["html"], vscodeLanguageIds: ["html"], extensions: [...l.extensions, ".mjml"] })), t(On(), () => ({ name: "Lightning Web Components", since: "1.17.0", parsers: ["lwc"], vscodeLanguageIds: ["html"], extensions: [], filenames: [] })), t(kg(), () => ({ since: "1.10.0", parsers: ["vue"], vscodeLanguageIds: ["vue"] }))], i2 = { html: s };
        r.exports = { languages: u, printers: i2, options: a, parsers: n };
      } }), Og = te({ "src/language-yaml/pragma.js"(e, r) {
        ne();
        function t(n) {
          return /^\s*@(?:prettier|format)\s*$/.test(n);
        }
        function s(n) {
          return /^\s*#[^\S\n]*@(?:prettier|format)\s*?(?:\n|$)/.test(n);
        }
        function a(n) {
          return `# @format

${n}`;
        }
        r.exports = { isPragma: t, hasPragma: s, insertPragma: a };
      } }), jg = te({ "src/language-yaml/loc.js"(e, r) {
        ne();
        function t(a) {
          return a.position.start.offset;
        }
        function s(a) {
          return a.position.end.offset;
        }
        r.exports = { locStart: t, locEnd: s };
      } }), qg = te({ "src/language-yaml/embed.js"(e, r) {
        ne();
        function t(s, a, n, u) {
          if (s.getValue().type === "root" && u.filepath && /(?:[/\\]|^)\.(?:prettier|stylelint|lintstaged)rc$/.test(u.filepath))
            return n(u.originalText, Object.assign(Object.assign({}, u), {}, { parser: "json" }));
        }
        r.exports = t;
      } }), $t = te({ "src/language-yaml/utils.js"(e, r) {
        ne();
        var { getLast: t, isNonEmptyArray: s } = Ue();
        function a(D, T) {
          let m = 0, C = D.stack.length - 1;
          for (let o = 0; o < C; o++) {
            let d = D.stack[o];
            n(d) && T(d) && m++;
          }
          return m;
        }
        function n(D, T) {
          return D && typeof D.type == "string" && (!T || T.includes(D.type));
        }
        function u(D, T, m) {
          return T("children" in D ? Object.assign(Object.assign({}, D), {}, { children: D.children.map((C) => u(C, T, D)) }) : D, m);
        }
        function i2(D, T, m) {
          Object.defineProperty(D, T, { get: m, enumerable: false });
        }
        function l(D, T) {
          let m = 0, C = T.length;
          for (let o = D.position.end.offset - 1; o < C; o++) {
            let d = T[o];
            if (d === `
` && m++, m === 1 && /\S/.test(d))
              return false;
            if (m === 2)
              return true;
          }
          return false;
        }
        function p2(D) {
          switch (D.getValue().type) {
            case "tag":
            case "anchor":
            case "comment":
              return false;
          }
          let m = D.stack.length;
          for (let C = 1; C < m; C++) {
            let o = D.stack[C], d = D.stack[C - 1];
            if (Array.isArray(d) && typeof o == "number" && o !== d.length - 1)
              return false;
          }
          return true;
        }
        function y(D) {
          return s(D.children) ? y(t(D.children)) : D;
        }
        function h2(D) {
          return D.value.trim() === "prettier-ignore";
        }
        function g(D) {
          let T = D.getValue();
          if (T.type === "documentBody") {
            let m = D.getParentNode();
            return N(m.head) && h2(t(m.head.endComments));
          }
          return F(T) && h2(t(T.leadingComments));
        }
        function c(D) {
          return !s(D.children) && !f(D);
        }
        function f(D) {
          return F(D) || _(D) || w(D) || E(D) || N(D);
        }
        function F(D) {
          return s(D == null ? void 0 : D.leadingComments);
        }
        function _(D) {
          return s(D == null ? void 0 : D.middleComments);
        }
        function w(D) {
          return D == null ? void 0 : D.indicatorComment;
        }
        function E(D) {
          return D == null ? void 0 : D.trailingComment;
        }
        function N(D) {
          return s(D == null ? void 0 : D.endComments);
        }
        function x(D) {
          let T = [], m;
          for (let C of D.split(/( +)/))
            C !== " " ? m === " " ? T.push(C) : T.push((T.pop() || "") + C) : m === void 0 && T.unshift(""), m = C;
          return m === " " && T.push((T.pop() || "") + " "), T[0] === "" && (T.shift(), T.unshift(" " + (T.shift() || ""))), T;
        }
        function I(D, T, m) {
          let C = T.split(`
`).map((o, d, v) => d === 0 && d === v.length - 1 ? o : d !== 0 && d !== v.length - 1 ? o.trim() : d === 0 ? o.trimEnd() : o.trimStart());
          return m.proseWrap === "preserve" ? C.map((o) => o.length === 0 ? [] : [o]) : C.map((o) => o.length === 0 ? [] : x(o)).reduce((o, d, v) => v !== 0 && C[v - 1].length > 0 && d.length > 0 && !(D === "quoteDouble" && t(t(o)).endsWith("\\")) ? [...o.slice(0, -1), [...t(o), ...d]] : [...o, d], []).map((o) => m.proseWrap === "never" ? [o.join(" ")] : o);
        }
        function P(D, T) {
          let { parentIndent: m, isLastDescendant: C, options: o } = T, d = D.position.start.line === D.position.end.line ? "" : o.originalText.slice(D.position.start.offset, D.position.end.offset).match(/^[^\n]*\n(.*)$/s)[1], v;
          if (D.indent === null) {
            let B = d.match(/^(?<leadingSpace> *)[^\n\r ]/m);
            v = B ? B.groups.leadingSpace.length : Number.POSITIVE_INFINITY;
          } else
            v = D.indent - 1 + m;
          let S = d.split(`
`).map((B) => B.slice(v));
          if (o.proseWrap === "preserve" || D.type === "blockLiteral")
            return b(S.map((B) => B.length === 0 ? [] : [B]));
          return b(S.map((B) => B.length === 0 ? [] : x(B)).reduce((B, k, M) => M !== 0 && S[M - 1].length > 0 && k.length > 0 && !/^\s/.test(k[0]) && !/^\s|\s$/.test(t(B)) ? [...B.slice(0, -1), [...t(B), ...k]] : [...B, k], []).map((B) => B.reduce((k, M) => k.length > 0 && /\s$/.test(t(k)) ? [...k.slice(0, -1), t(k) + " " + M] : [...k, M], [])).map((B) => o.proseWrap === "never" ? [B.join(" ")] : B));
          function b(B) {
            if (D.chomping === "keep")
              return t(B).length === 0 ? B.slice(0, -1) : B;
            let k = 0;
            for (let M = B.length - 1; M >= 0 && B[M].length === 0; M--)
              k++;
            return k === 0 ? B : k >= 2 && !C ? B.slice(0, -(k - 1)) : B.slice(0, -k);
          }
        }
        function $(D) {
          if (!D)
            return true;
          switch (D.type) {
            case "plain":
            case "quoteDouble":
            case "quoteSingle":
            case "alias":
            case "flowMapping":
            case "flowSequence":
              return true;
            default:
              return false;
          }
        }
        r.exports = { getLast: t, getAncestorCount: a, isNode: n, isEmptyNode: c, isInlineNode: $, mapNode: u, defineShortcut: i2, isNextLineEmpty: l, isLastDescendantNode: p2, getBlockValueLineContents: P, getFlowScalarLineContents: I, getLastDescendantNode: y, hasPrettierIgnore: g, hasLeadingComments: F, hasMiddleComments: _, hasIndicatorComment: w, hasTrailingComment: E, hasEndComments: N };
      } }), Mg = te({ "src/language-yaml/print-preprocess.js"(e, r) {
        ne();
        var { defineShortcut: t, mapNode: s } = $t();
        function a(u) {
          return s(u, n);
        }
        function n(u) {
          switch (u.type) {
            case "document":
              t(u, "head", () => u.children[0]), t(u, "body", () => u.children[1]);
              break;
            case "documentBody":
            case "sequenceItem":
            case "flowSequenceItem":
            case "mappingKey":
            case "mappingValue":
              t(u, "content", () => u.children[0]);
              break;
            case "mappingItem":
            case "flowMappingItem":
              t(u, "key", () => u.children[0]), t(u, "value", () => u.children[1]);
              break;
          }
          return u;
        }
        r.exports = a;
      } }), Mr = te({ "src/language-yaml/print/misc.js"(e, r) {
        ne();
        var { builders: { softline: t, align: s } } = qe(), { hasEndComments: a, isNextLineEmpty: n, isNode: u } = $t(), i2 = /* @__PURE__ */ new WeakMap();
        function l(h2, g) {
          let c = h2.getValue(), f = h2.stack[0], F;
          return i2.has(f) ? F = i2.get(f) : (F = /* @__PURE__ */ new Set(), i2.set(f, F)), !F.has(c.position.end.line) && (F.add(c.position.end.line), n(c, g) && !p2(h2.getParentNode())) ? t : "";
        }
        function p2(h2) {
          return a(h2) && !u(h2, ["documentHead", "documentBody", "flowMapping", "flowSequence"]);
        }
        function y(h2, g) {
          return s(" ".repeat(h2), g);
        }
        r.exports = { alignWithSpaces: y, shouldPrintEndComments: p2, printNextEmptyLine: l };
      } }), Rg = te({ "src/language-yaml/print/flow-mapping-sequence.js"(e, r) {
        ne();
        var { builders: { ifBreak: t, line: s, softline: a, hardline: n, join: u } } = qe(), { isEmptyNode: i2, getLast: l, hasEndComments: p2 } = $t(), { printNextEmptyLine: y, alignWithSpaces: h2 } = Mr();
        function g(f, F, _) {
          let w = f.getValue(), E = w.type === "flowMapping", N = E ? "{" : "[", x = E ? "}" : "]", I = a;
          E && w.children.length > 0 && _.bracketSpacing && (I = s);
          let P = l(w.children), $ = P && P.type === "flowMappingItem" && i2(P.key) && i2(P.value);
          return [N, h2(_.tabWidth, [I, c(f, F, _), _.trailingComma === "none" ? "" : t(","), p2(w) ? [n, u(n, f.map(F, "endComments"))] : ""]), $ ? "" : I, x];
        }
        function c(f, F, _) {
          let w = f.getValue();
          return f.map((N, x) => [F(), x === w.children.length - 1 ? "" : [",", s, w.children[x].position.start.line !== w.children[x + 1].position.start.line ? y(N, _.originalText) : ""]], "children");
        }
        r.exports = { printFlowMapping: g, printFlowSequence: g };
      } }), $g = te({ "src/language-yaml/print/mapping-item.js"(e, r) {
        ne();
        var { builders: { conditionalGroup: t, group: s, hardline: a, ifBreak: n, join: u, line: i2 } } = qe(), { hasLeadingComments: l, hasMiddleComments: p2, hasTrailingComment: y, hasEndComments: h2, isNode: g, isEmptyNode: c, isInlineNode: f } = $t(), { alignWithSpaces: F } = Mr();
        function _(x, I, P, $, D) {
          let { key: T, value: m } = x, C = c(T), o = c(m);
          if (C && o)
            return ": ";
          let d = $("key"), v = E(x) ? " " : "";
          if (o)
            return x.type === "flowMappingItem" && I.type === "flowMapping" ? d : x.type === "mappingItem" && w(T.content, D) && !y(T.content) && (!I.tag || I.tag.value !== "tag:yaml.org,2002:set") ? [d, v, ":"] : ["? ", F(2, d)];
          let S = $("value");
          if (C)
            return [": ", F(2, S)];
          if (l(m) || !f(T.content))
            return ["? ", F(2, d), a, u("", P.map($, "value", "leadingComments").map((q) => [q, a])), ": ", F(2, S)];
          if (N(T.content) && !l(T.content) && !p2(T.content) && !y(T.content) && !h2(T) && !l(m.content) && !p2(m.content) && !h2(m) && w(m.content, D))
            return [d, v, ": ", S];
          let b = Symbol("mappingKey"), B = s([n("? "), s(F(2, d), { id: b })]), k = [a, ": ", F(2, S)], M = [v, ":"];
          l(m.content) || h2(m) && m.content && !g(m.content, ["mapping", "sequence"]) || I.type === "mapping" && y(T.content) && f(m.content) || g(m.content, ["mapping", "sequence"]) && m.content.tag === null && m.content.anchor === null ? M.push(a) : m.content && M.push(i2), M.push(S);
          let R = F(D.tabWidth, M);
          return w(T.content, D) && !l(T.content) && !p2(T.content) && !h2(T) ? t([[d, R]]) : t([[B, n(k, R, { groupId: b })]]);
        }
        function w(x, I) {
          if (!x)
            return true;
          switch (x.type) {
            case "plain":
            case "quoteSingle":
            case "quoteDouble":
              break;
            case "alias":
              return true;
            default:
              return false;
          }
          if (I.proseWrap === "preserve")
            return x.position.start.line === x.position.end.line;
          if (/\\$/m.test(I.originalText.slice(x.position.start.offset, x.position.end.offset)))
            return false;
          switch (I.proseWrap) {
            case "never":
              return !x.value.includes(`
`);
            case "always":
              return !/[\n ]/.test(x.value);
            default:
              return false;
          }
        }
        function E(x) {
          return x.key.content && x.key.content.type === "alias";
        }
        function N(x) {
          if (!x)
            return true;
          switch (x.type) {
            case "plain":
            case "quoteDouble":
            case "quoteSingle":
              return x.position.start.line === x.position.end.line;
            case "alias":
              return true;
            default:
              return false;
          }
        }
        r.exports = _;
      } }), Vg = te({ "src/language-yaml/print/block.js"(e, r) {
        ne();
        var { builders: { dedent: t, dedentToRoot: s, fill: a, hardline: n, join: u, line: i2, literalline: l, markAsRoot: p2 }, utils: { getDocParts: y } } = qe(), { getAncestorCount: h2, getBlockValueLineContents: g, hasIndicatorComment: c, isLastDescendantNode: f, isNode: F } = $t(), { alignWithSpaces: _ } = Mr();
        function w(E, N, x) {
          let I = E.getValue(), P = h2(E, (C) => F(C, ["sequence", "mapping"])), $ = f(E), D = [I.type === "blockFolded" ? ">" : "|"];
          I.indent !== null && D.push(I.indent.toString()), I.chomping !== "clip" && D.push(I.chomping === "keep" ? "+" : "-"), c(I) && D.push(" ", N("indicatorComment"));
          let T = g(I, { parentIndent: P, isLastDescendant: $, options: x }), m = [];
          for (let [C, o] of T.entries())
            C === 0 && m.push(n), m.push(a(y(u(i2, o)))), C !== T.length - 1 ? m.push(o.length === 0 ? n : p2(l)) : I.chomping === "keep" && $ && m.push(s(o.length === 0 ? n : l));
          return I.indent === null ? D.push(t(_(x.tabWidth, m))) : D.push(s(_(I.indent - 1 + P, m))), D;
        }
        r.exports = w;
      } }), Wg = te({ "src/language-yaml/printer-yaml.js"(e, r) {
        ne();
        var { builders: { breakParent: t, fill: s, group: a, hardline: n, join: u, line: i2, lineSuffix: l, literalline: p2 }, utils: { getDocParts: y, replaceTextEndOfLine: h2 } } = qe(), { isPreviousLineEmpty: g } = Ue(), { insertPragma: c, isPragma: f } = Og(), { locStart: F } = jg(), _ = qg(), { getFlowScalarLineContents: w, getLastDescendantNode: E, hasLeadingComments: N, hasMiddleComments: x, hasTrailingComment: I, hasEndComments: P, hasPrettierIgnore: $, isLastDescendantNode: D, isNode: T, isInlineNode: m } = $t(), C = Mg(), { alignWithSpaces: o, printNextEmptyLine: d, shouldPrintEndComments: v } = Mr(), { printFlowMapping: S, printFlowSequence: b } = Rg(), B = $g(), k = Vg();
        function M(j, Y, ie) {
          let ee = j.getValue(), ce = [];
          ee.type !== "mappingValue" && N(ee) && ce.push([u(n, j.map(ie, "leadingComments")), n]);
          let { tag: W, anchor: K } = ee;
          W && ce.push(ie("tag")), W && K && ce.push(" "), K && ce.push(ie("anchor"));
          let de = "";
          T(ee, ["mapping", "sequence", "comment", "directive", "mappingItem", "sequenceItem"]) && !D(j) && (de = d(j, Y.originalText)), (W || K) && (T(ee, ["sequence", "mapping"]) && !x(ee) ? ce.push(n) : ce.push(" ")), x(ee) && ce.push([ee.middleComments.length === 1 ? "" : n, u(n, j.map(ie, "middleComments")), n]);
          let ue = j.getParentNode();
          return $(j) ? ce.push(h2(Y.originalText.slice(ee.position.start.offset, ee.position.end.offset).trimEnd(), p2)) : ce.push(a(R(ee, ue, j, Y, ie))), I(ee) && !T(ee, ["document", "documentHead"]) && ce.push(l([ee.type === "mappingValue" && !ee.content ? "" : " ", ue.type === "mappingKey" && j.getParentNode(2).type === "mapping" && m(ee) ? "" : t, ie("trailingComment")])), v(ee) && ce.push(o(ee.type === "sequenceItem" ? 2 : 0, [n, u(n, j.map((Fe) => [g(Y.originalText, Fe.getValue(), F) ? n : "", ie()], "endComments"))])), ce.push(de), ce;
        }
        function R(j, Y, ie, ee, ce) {
          switch (j.type) {
            case "root": {
              let { children: W } = j, K = [];
              ie.each((ue, Fe) => {
                let z = W[Fe], U = W[Fe + 1];
                Fe !== 0 && K.push(n), K.push(ce()), J(z, U) ? (K.push(n, "..."), I(z) && K.push(" ", ce("trailingComment"))) : U && !I(U.head) && K.push(n, "---");
              }, "children");
              let de = E(j);
              return (!T(de, ["blockLiteral", "blockFolded"]) || de.chomping !== "keep") && K.push(n), K;
            }
            case "document": {
              let W = Y.children[ie.getName() + 1], K = [];
              return L(j, W, Y, ee) === "head" && ((j.head.children.length > 0 || j.head.endComments.length > 0) && K.push(ce("head")), I(j.head) ? K.push(["---", " ", ce(["head", "trailingComment"])]) : K.push("---")), q(j) && K.push(ce("body")), u(n, K);
            }
            case "documentHead":
              return u(n, [...ie.map(ce, "children"), ...ie.map(ce, "endComments")]);
            case "documentBody": {
              let { children: W, endComments: K } = j, de = "";
              if (W.length > 0 && K.length > 0) {
                let ue = E(j);
                T(ue, ["blockFolded", "blockLiteral"]) ? ue.chomping !== "keep" && (de = [n, n]) : de = n;
              }
              return [u(n, ie.map(ce, "children")), de, u(n, ie.map(ce, "endComments"))];
            }
            case "directive":
              return ["%", u(" ", [j.name, ...j.parameters])];
            case "comment":
              return ["#", j.value];
            case "alias":
              return ["*", j.value];
            case "tag":
              return ee.originalText.slice(j.position.start.offset, j.position.end.offset);
            case "anchor":
              return ["&", j.value];
            case "plain":
              return Q(j.type, ee.originalText.slice(j.position.start.offset, j.position.end.offset), ee);
            case "quoteDouble":
            case "quoteSingle": {
              let W = "'", K = '"', de = ee.originalText.slice(j.position.start.offset + 1, j.position.end.offset - 1);
              if (j.type === "quoteSingle" && de.includes("\\") || j.type === "quoteDouble" && /\\[^"]/.test(de)) {
                let Fe = j.type === "quoteDouble" ? K : W;
                return [Fe, Q(j.type, de, ee), Fe];
              }
              if (de.includes(K))
                return [W, Q(j.type, j.type === "quoteDouble" ? de.replace(/\\"/g, K).replace(/'/g, W.repeat(2)) : de, ee), W];
              if (de.includes(W))
                return [K, Q(j.type, j.type === "quoteSingle" ? de.replace(/''/g, W) : de, ee), K];
              let ue = ee.singleQuote ? W : K;
              return [ue, Q(j.type, de, ee), ue];
            }
            case "blockFolded":
            case "blockLiteral":
              return k(ie, ce, ee);
            case "mapping":
            case "sequence":
              return u(n, ie.map(ce, "children"));
            case "sequenceItem":
              return ["- ", o(2, j.content ? ce("content") : "")];
            case "mappingKey":
            case "mappingValue":
              return j.content ? ce("content") : "";
            case "mappingItem":
            case "flowMappingItem":
              return B(j, Y, ie, ce, ee);
            case "flowMapping":
              return S(ie, ce, ee);
            case "flowSequence":
              return b(ie, ce, ee);
            case "flowSequenceItem":
              return ce("content");
            default:
              throw new Error(`Unexpected node type ${j.type}`);
          }
        }
        function q(j) {
          return j.body.children.length > 0 || P(j.body);
        }
        function J(j, Y) {
          return I(j) || Y && (Y.head.children.length > 0 || P(Y.head));
        }
        function L(j, Y, ie, ee) {
          return ie.children[0] === j && /---(?:\s|$)/.test(ee.originalText.slice(F(j), F(j) + 4)) || j.head.children.length > 0 || P(j.head) || I(j.head) ? "head" : J(j, Y) ? false : Y ? "root" : false;
        }
        function Q(j, Y, ie) {
          let ee = w(j, Y, ie);
          return u(n, ee.map((ce) => s(y(u(i2, ce)))));
        }
        function V(j, Y) {
          if (T(Y))
            switch (delete Y.position, Y.type) {
              case "comment":
                if (f(Y.value))
                  return null;
                break;
              case "quoteDouble":
              case "quoteSingle":
                Y.type = "quote";
                break;
            }
        }
        r.exports = { preprocess: C, embed: _, print: M, massageAstNode: V, insertPragma: c };
      } }), Hg = te({ "src/language-yaml/options.js"(e, r) {
        ne();
        var t = Mt();
        r.exports = { bracketSpacing: t.bracketSpacing, singleQuote: t.singleQuote, proseWrap: t.proseWrap };
      } }), Gg = te({ "src/language-yaml/parsers.js"() {
        ne();
      } }), Ug = te({ "node_modules/linguist-languages/data/YAML.json"(e, r) {
        r.exports = { name: "YAML", type: "data", color: "#cb171e", tmScope: "source.yaml", aliases: ["yml"], extensions: [".yml", ".mir", ".reek", ".rviz", ".sublime-syntax", ".syntax", ".yaml", ".yaml-tmlanguage", ".yaml.sed", ".yml.mysql"], filenames: [".clang-format", ".clang-tidy", ".gemrc", "CITATION.cff", "glide.lock", "yarn.lock"], aceMode: "yaml", codemirrorMode: "yaml", codemirrorMimeType: "text/x-yaml", languageId: 407 };
      } }), Jg = te({ "src/language-yaml/index.js"(e, r) {
        ne();
        var t = _t(), s = Wg(), a = Hg(), n = Gg(), u = [t(Ug(), (i2) => ({ since: "1.14.0", parsers: ["yaml"], vscodeLanguageIds: ["yaml", "ansible", "home-assistant"], filenames: [...i2.filenames.filter((l) => l !== "yarn.lock"), ".prettierrc", ".stylelintrc", ".lintstagedrc"] }))];
        r.exports = { languages: u, printers: { yaml: s }, options: a, parsers: n };
      } }), zg = te({ "src/languages.js"(e, r) {
        ne(), r.exports = [Bd(), Ud(), eg(), ag(), dg(), Lg(), Jg()];
      } });
      ne();
      var { version: Xg } = Ia(), Ot = Gm(), { getSupportInfo: Kg } = Xn(), Yg = Um(), Qg = zg(), Zg = qe();
      function Nt(e) {
        let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        return function() {
          for (var t = arguments.length, s = new Array(t), a = 0; a < t; a++)
            s[a] = arguments[a];
          let n = s[r] || {}, u = n.plugins || [];
          return s[r] = Object.assign(Object.assign({}, n), {}, { plugins: [...Qg, ...Array.isArray(u) ? u : Object.values(u)] }), e(...s);
        };
      }
      var jn = Nt(Ot.formatWithCursor);
      jo.exports = { formatWithCursor: jn, format(e, r) {
        return jn(e, r).formatted;
      }, check(e, r) {
        let { formatted: t } = jn(e, r);
        return t === e;
      }, doc: Zg, getSupportInfo: Nt(Kg, 0), version: Xg, util: Yg, __debug: { parse: Nt(Ot.parse), formatAST: Nt(Ot.formatAST), formatDoc: Nt(Ot.formatDoc), printToDoc: Nt(Ot.printToDoc), printDocToString: Nt(Ot.printDocToString) } };
    });
    return e0();
  });
})(standalone);
var standaloneExports = standalone.exports;
var parserTypescript = { exports: {} };
(function(module, exports) {
  (function(e) {
    module.exports = e();
  })(function() {
    var dt = (a, _) => () => (_ || a((_ = { exports: {} }).exports, _), _.exports);
    var Mi = dt((dH, J7) => {
      var Yh = function(a) {
        return a && a.Math == Math && a;
      };
      J7.exports = Yh(typeof globalThis == "object" && globalThis) || Yh(typeof window == "object" && window) || Yh(typeof self == "object" && self) || Yh(typeof commonjsGlobal == "object" && commonjsGlobal) || function() {
        return this;
      }() || Function("return this")();
    });
    var Ha = dt((mH, F7) => {
      F7.exports = function(a) {
        try {
          return !!a();
        } catch {
          return true;
        }
      };
    });
    var As = dt((hH, B7) => {
      var tq = Ha();
      B7.exports = !tq(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] != 7;
      });
    });
    var p6 = dt((gH, q7) => {
      var rq = Ha();
      q7.exports = !rq(function() {
        var a = function() {
        }.bind();
        return typeof a != "function" || a.hasOwnProperty("prototype");
      });
    });
    var Zh = dt((yH, U7) => {
      var nq = p6(), Qh = Function.prototype.call;
      U7.exports = nq ? Qh.bind(Qh) : function() {
        return Qh.apply(Qh, arguments);
      };
    });
    var H7 = dt((V7) => {
      var z7 = {}.propertyIsEnumerable, W7 = Object.getOwnPropertyDescriptor, iq = W7 && !z7.call({ 1: 2 }, 1);
      V7.f = iq ? function(_) {
        var v = W7(this, _);
        return !!v && v.enumerable;
      } : z7;
    });
    var f6 = dt((bH, G7) => {
      G7.exports = function(a, _) {
        return { enumerable: !(a & 1), configurable: !(a & 2), writable: !(a & 4), value: _ };
      };
    });
    var Ps = dt((TH, X7) => {
      var $7 = p6(), K7 = Function.prototype, d6 = K7.call, aq = $7 && K7.bind.bind(d6, d6);
      X7.exports = $7 ? aq : function(a) {
        return function() {
          return d6.apply(a, arguments);
        };
      };
    });
    var Z7 = dt((SH, Q7) => {
      var Y7 = Ps(), sq = Y7({}.toString), oq = Y7("".slice);
      Q7.exports = function(a) {
        return oq(sq(a), 8, -1);
      };
    });
    var tw = dt((xH, ew) => {
      var _q = Ps(), cq = Ha(), lq = Z7(), m6 = Object, uq = _q("".split);
      ew.exports = cq(function() {
        return !m6("z").propertyIsEnumerable(0);
      }) ? function(a) {
        return lq(a) == "String" ? uq(a, "") : m6(a);
      } : m6;
    });
    var h6 = dt((EH, rw) => {
      rw.exports = function(a) {
        return a == null;
      };
    });
    var g6 = dt((wH, nw) => {
      var pq = h6(), fq = TypeError;
      nw.exports = function(a) {
        if (pq(a))
          throw fq("Can't call method on " + a);
        return a;
      };
    });
    var e1 = dt((CH, iw) => {
      var dq = tw(), mq = g6();
      iw.exports = function(a) {
        return dq(mq(a));
      };
    });
    var v6 = dt((AH, aw) => {
      var y6 = typeof document == "object" && document.all, hq = typeof y6 > "u" && y6 !== void 0;
      aw.exports = { all: y6, IS_HTMLDDA: hq };
    });
    var aa = dt((PH, ow) => {
      var sw = v6(), gq = sw.all;
      ow.exports = sw.IS_HTMLDDA ? function(a) {
        return typeof a == "function" || a === gq;
      } : function(a) {
        return typeof a == "function";
      };
    });
    var Jc = dt((DH, lw) => {
      var _w = aa(), cw = v6(), yq = cw.all;
      lw.exports = cw.IS_HTMLDDA ? function(a) {
        return typeof a == "object" ? a !== null : _w(a) || a === yq;
      } : function(a) {
        return typeof a == "object" ? a !== null : _w(a);
      };
    });
    var t1 = dt((kH, uw) => {
      var b6 = Mi(), vq = aa(), bq = function(a) {
        return vq(a) ? a : void 0;
      };
      uw.exports = function(a, _) {
        return arguments.length < 2 ? bq(b6[a]) : b6[a] && b6[a][_];
      };
    });
    var fw = dt((IH, pw) => {
      var Tq = Ps();
      pw.exports = Tq({}.isPrototypeOf);
    });
    var mw = dt((NH, dw) => {
      var Sq = t1();
      dw.exports = Sq("navigator", "userAgent") || "";
    });
    var Sw = dt((OH, Tw) => {
      var bw = Mi(), T6 = mw(), hw = bw.process, gw = bw.Deno, yw = hw && hw.versions || gw && gw.version, vw = yw && yw.v8, sa, r1;
      vw && (sa = vw.split("."), r1 = sa[0] > 0 && sa[0] < 4 ? 1 : +(sa[0] + sa[1]));
      !r1 && T6 && (sa = T6.match(/Edge\/(\d+)/), (!sa || sa[1] >= 74) && (sa = T6.match(/Chrome\/(\d+)/), sa && (r1 = +sa[1])));
      Tw.exports = r1;
    });
    var S6 = dt((MH, Ew) => {
      var xw = Sw(), xq = Ha();
      Ew.exports = !!Object.getOwnPropertySymbols && !xq(function() {
        var a = Symbol();
        return !String(a) || !(Object(a) instanceof Symbol) || !Symbol.sham && xw && xw < 41;
      });
    });
    var x6 = dt((LH, ww) => {
      var Eq = S6();
      ww.exports = Eq && !Symbol.sham && typeof Symbol.iterator == "symbol";
    });
    var E6 = dt((RH, Cw) => {
      var wq = t1(), Cq = aa(), Aq = fw(), Pq = x6(), Dq = Object;
      Cw.exports = Pq ? function(a) {
        return typeof a == "symbol";
      } : function(a) {
        var _ = wq("Symbol");
        return Cq(_) && Aq(_.prototype, Dq(a));
      };
    });
    var Pw = dt((jH, Aw) => {
      var kq = String;
      Aw.exports = function(a) {
        try {
          return kq(a);
        } catch {
          return "Object";
        }
      };
    });
    var kw = dt((JH, Dw) => {
      var Iq = aa(), Nq = Pw(), Oq = TypeError;
      Dw.exports = function(a) {
        if (Iq(a))
          return a;
        throw Oq(Nq(a) + " is not a function");
      };
    });
    var Nw = dt((FH, Iw) => {
      var Mq = kw(), Lq = h6();
      Iw.exports = function(a, _) {
        var v = a[_];
        return Lq(v) ? void 0 : Mq(v);
      };
    });
    var Mw = dt((BH, Ow) => {
      var w6 = Zh(), C6 = aa(), A6 = Jc(), Rq = TypeError;
      Ow.exports = function(a, _) {
        var v, h2;
        if (_ === "string" && C6(v = a.toString) && !A6(h2 = w6(v, a)) || C6(v = a.valueOf) && !A6(h2 = w6(v, a)) || _ !== "string" && C6(v = a.toString) && !A6(h2 = w6(v, a)))
          return h2;
        throw Rq("Can't convert object to primitive value");
      };
    });
    var Rw = dt((qH, Lw) => {
      Lw.exports = false;
    });
    var n1 = dt((UH, Jw) => {
      var jw = Mi(), jq = Object.defineProperty;
      Jw.exports = function(a, _) {
        try {
          jq(jw, a, { value: _, configurable: true, writable: true });
        } catch {
          jw[a] = _;
        }
        return _;
      };
    });
    var i1 = dt((zH, Bw) => {
      var Jq = Mi(), Fq = n1(), Fw = "__core-js_shared__", Bq = Jq[Fw] || Fq(Fw, {});
      Bw.exports = Bq;
    });
    var P6 = dt((WH, Uw) => {
      var qq = Rw(), qw = i1();
      (Uw.exports = function(a, _) {
        return qw[a] || (qw[a] = _ !== void 0 ? _ : {});
      })("versions", []).push({ version: "3.26.1", mode: qq ? "pure" : "global", copyright: "© 2014-2022 Denis Pushkarev (zloirock.ru)", license: "https://github.com/zloirock/core-js/blob/v3.26.1/LICENSE", source: "https://github.com/zloirock/core-js" });
    });
    var Ww = dt((VH, zw) => {
      var Uq = g6(), zq = Object;
      zw.exports = function(a) {
        return zq(Uq(a));
      };
    });
    var oo = dt((HH, Vw) => {
      var Wq = Ps(), Vq = Ww(), Hq = Wq({}.hasOwnProperty);
      Vw.exports = Object.hasOwn || function(_, v) {
        return Hq(Vq(_), v);
      };
    });
    var D6 = dt((GH, Hw) => {
      var Gq = Ps(), $q = 0, Kq = Math.random(), Xq = Gq(1 .toString);
      Hw.exports = function(a) {
        return "Symbol(" + (a === void 0 ? "" : a) + ")_" + Xq(++$q + Kq, 36);
      };
    });
    var Qw = dt(($H, Yw) => {
      var Yq = Mi(), Qq = P6(), Gw = oo(), Zq = D6(), $w = S6(), Xw = x6(), Fc = Qq("wks"), p_ = Yq.Symbol, Kw = p_ && p_.for, eU = Xw ? p_ : p_ && p_.withoutSetter || Zq;
      Yw.exports = function(a) {
        if (!Gw(Fc, a) || !($w || typeof Fc[a] == "string")) {
          var _ = "Symbol." + a;
          $w && Gw(p_, a) ? Fc[a] = p_[a] : Xw && Kw ? Fc[a] = Kw(_) : Fc[a] = eU(_);
        }
        return Fc[a];
      };
    });
    var rC = dt((KH, tC) => {
      var tU = Zh(), Zw = Jc(), eC = E6(), rU = Nw(), nU = Mw(), iU = Qw(), aU = TypeError, sU = iU("toPrimitive");
      tC.exports = function(a, _) {
        if (!Zw(a) || eC(a))
          return a;
        var v = rU(a, sU), h2;
        if (v) {
          if (_ === void 0 && (_ = "default"), h2 = tU(v, a, _), !Zw(h2) || eC(h2))
            return h2;
          throw aU("Can't convert object to primitive value");
        }
        return _ === void 0 && (_ = "number"), nU(a, _);
      };
    });
    var k6 = dt((XH, nC) => {
      var oU = rC(), _U = E6();
      nC.exports = function(a) {
        var _ = oU(a, "string");
        return _U(_) ? _ : _ + "";
      };
    });
    var sC = dt((YH, aC) => {
      var cU = Mi(), iC = Jc(), I6 = cU.document, lU = iC(I6) && iC(I6.createElement);
      aC.exports = function(a) {
        return lU ? I6.createElement(a) : {};
      };
    });
    var N6 = dt((QH, oC) => {
      var uU = As(), pU = Ha(), fU = sC();
      oC.exports = !uU && !pU(function() {
        return Object.defineProperty(fU("div"), "a", { get: function() {
          return 7;
        } }).a != 7;
      });
    });
    var O6 = dt((cC) => {
      var dU = As(), mU = Zh(), hU = H7(), gU = f6(), yU = e1(), vU = k6(), bU = oo(), TU = N6(), _C = Object.getOwnPropertyDescriptor;
      cC.f = dU ? _C : function(_, v) {
        if (_ = yU(_), v = vU(v), TU)
          try {
            return _C(_, v);
          } catch {
          }
        if (bU(_, v))
          return gU(!mU(hU.f, _, v), _[v]);
      };
    });
    var uC = dt((eG, lC) => {
      var SU = As(), xU = Ha();
      lC.exports = SU && xU(function() {
        return Object.defineProperty(function() {
        }, "prototype", { value: 42, writable: false }).prototype != 42;
      });
    });
    var a1 = dt((tG, pC) => {
      var EU = Jc(), wU = String, CU = TypeError;
      pC.exports = function(a) {
        if (EU(a))
          return a;
        throw CU(wU(a) + " is not an object");
      };
    });
    var dp = dt((dC) => {
      var AU = As(), PU = N6(), DU = uC(), s1 = a1(), fC = k6(), kU = TypeError, M6 = Object.defineProperty, IU = Object.getOwnPropertyDescriptor, L6 = "enumerable", R6 = "configurable", j6 = "writable";
      dC.f = AU ? DU ? function(_, v, h2) {
        if (s1(_), v = fC(v), s1(h2), typeof _ == "function" && v === "prototype" && "value" in h2 && j6 in h2 && !h2[j6]) {
          var D = IU(_, v);
          D && D[j6] && (_[v] = h2.value, h2 = { configurable: R6 in h2 ? h2[R6] : D[R6], enumerable: L6 in h2 ? h2[L6] : D[L6], writable: false });
        }
        return M6(_, v, h2);
      } : M6 : function(_, v, h2) {
        if (s1(_), v = fC(v), s1(h2), PU)
          try {
            return M6(_, v, h2);
          } catch {
          }
        if ("get" in h2 || "set" in h2)
          throw kU("Accessors not supported");
        return "value" in h2 && (_[v] = h2.value), _;
      };
    });
    var J6 = dt((nG, mC) => {
      var NU = As(), OU = dp(), MU = f6();
      mC.exports = NU ? function(a, _, v) {
        return OU.f(a, _, MU(1, v));
      } : function(a, _, v) {
        return a[_] = v, a;
      };
    });
    var yC = dt((iG, gC) => {
      var F6 = As(), LU = oo(), hC = Function.prototype, RU = F6 && Object.getOwnPropertyDescriptor, B6 = LU(hC, "name"), jU = B6 && function() {
      }.name === "something", JU = B6 && (!F6 || F6 && RU(hC, "name").configurable);
      gC.exports = { EXISTS: B6, PROPER: jU, CONFIGURABLE: JU };
    });
    var bC = dt((aG, vC) => {
      var FU = Ps(), BU = aa(), q6 = i1(), qU = FU(Function.toString);
      BU(q6.inspectSource) || (q6.inspectSource = function(a) {
        return qU(a);
      });
      vC.exports = q6.inspectSource;
    });
    var xC = dt((sG, SC) => {
      var UU = Mi(), zU = aa(), TC = UU.WeakMap;
      SC.exports = zU(TC) && /native code/.test(String(TC));
    });
    var CC = dt((oG, wC) => {
      var WU = P6(), VU = D6(), EC = WU("keys");
      wC.exports = function(a) {
        return EC[a] || (EC[a] = VU(a));
      };
    });
    var U6 = dt((_G, AC) => {
      AC.exports = {};
    });
    var IC = dt((cG, kC) => {
      var HU = xC(), DC = Mi(), GU = Jc(), $U = J6(), z6 = oo(), W6 = i1(), KU = CC(), XU = U6(), PC = "Object already initialized", V6 = DC.TypeError, YU = DC.WeakMap, o1, mp, _1, QU = function(a) {
        return _1(a) ? mp(a) : o1(a, {});
      }, ZU = function(a) {
        return function(_) {
          var v;
          if (!GU(_) || (v = mp(_)).type !== a)
            throw V6("Incompatible receiver, " + a + " required");
          return v;
        };
      };
      HU || W6.state ? (oa = W6.state || (W6.state = new YU()), oa.get = oa.get, oa.has = oa.has, oa.set = oa.set, o1 = function(a, _) {
        if (oa.has(a))
          throw V6(PC);
        return _.facade = a, oa.set(a, _), _;
      }, mp = function(a) {
        return oa.get(a) || {};
      }, _1 = function(a) {
        return oa.has(a);
      }) : (f_ = KU("state"), XU[f_] = true, o1 = function(a, _) {
        if (z6(a, f_))
          throw V6(PC);
        return _.facade = a, $U(a, f_, _), _;
      }, mp = function(a) {
        return z6(a, f_) ? a[f_] : {};
      }, _1 = function(a) {
        return z6(a, f_);
      });
      var oa, f_;
      kC.exports = { set: o1, get: mp, has: _1, enforce: QU, getterFor: ZU };
    });
    var G6 = dt((lG, OC) => {
      var ez = Ha(), tz = aa(), c1 = oo(), H6 = As(), rz = yC().CONFIGURABLE, nz = bC(), NC = IC(), iz = NC.enforce, az = NC.get, l1 = Object.defineProperty, sz = H6 && !ez(function() {
        return l1(function() {
        }, "length", { value: 8 }).length !== 8;
      }), oz = String(String).split("String"), _z = OC.exports = function(a, _, v) {
        String(_).slice(0, 7) === "Symbol(" && (_ = "[" + String(_).replace(/^Symbol\(([^)]*)\)/, "$1") + "]"), v && v.getter && (_ = "get " + _), v && v.setter && (_ = "set " + _), (!c1(a, "name") || rz && a.name !== _) && (H6 ? l1(a, "name", { value: _, configurable: true }) : a.name = _), sz && v && c1(v, "arity") && a.length !== v.arity && l1(a, "length", { value: v.arity });
        try {
          v && c1(v, "constructor") && v.constructor ? H6 && l1(a, "prototype", { writable: false }) : a.prototype && (a.prototype = void 0);
        } catch {
        }
        var h2 = iz(a);
        return c1(h2, "source") || (h2.source = oz.join(typeof _ == "string" ? _ : "")), a;
      };
      Function.prototype.toString = _z(function() {
        return tz(this) && az(this).source || nz(this);
      }, "toString");
    });
    var LC = dt((uG, MC) => {
      var cz = aa(), lz = dp(), uz = G6(), pz = n1();
      MC.exports = function(a, _, v, h2) {
        h2 || (h2 = {});
        var D = h2.enumerable, P = h2.name !== void 0 ? h2.name : _;
        if (cz(v) && uz(v, P, h2), h2.global)
          D ? a[_] = v : pz(_, v);
        else {
          try {
            h2.unsafe ? a[_] && (D = true) : delete a[_];
          } catch {
          }
          D ? a[_] = v : lz.f(a, _, { value: v, enumerable: false, configurable: !h2.nonConfigurable, writable: !h2.nonWritable });
        }
        return a;
      };
    });
    var jC = dt((pG, RC) => {
      var fz = Math.ceil, dz = Math.floor;
      RC.exports = Math.trunc || function(_) {
        var v = +_;
        return (v > 0 ? dz : fz)(v);
      };
    });
    var $6 = dt((fG, JC) => {
      var mz = jC();
      JC.exports = function(a) {
        var _ = +a;
        return _ !== _ || _ === 0 ? 0 : mz(_);
      };
    });
    var BC = dt((dG, FC) => {
      var hz = $6(), gz = Math.max, yz = Math.min;
      FC.exports = function(a, _) {
        var v = hz(a);
        return v < 0 ? gz(v + _, 0) : yz(v, _);
      };
    });
    var UC = dt((mG, qC) => {
      var vz = $6(), bz = Math.min;
      qC.exports = function(a) {
        return a > 0 ? bz(vz(a), 9007199254740991) : 0;
      };
    });
    var WC = dt((hG, zC) => {
      var Tz = UC();
      zC.exports = function(a) {
        return Tz(a.length);
      };
    });
    var GC = dt((gG, HC) => {
      var Sz = e1(), xz = BC(), Ez = WC(), VC = function(a) {
        return function(_, v, h2) {
          var D = Sz(_), P = Ez(D), y = xz(h2, P), m;
          if (a && v != v) {
            for (; P > y; )
              if (m = D[y++], m != m)
                return true;
          } else
            for (; P > y; y++)
              if ((a || y in D) && D[y] === v)
                return a || y || 0;
          return !a && -1;
        };
      };
      HC.exports = { includes: VC(true), indexOf: VC(false) };
    });
    var XC = dt((yG, KC) => {
      var wz = Ps(), K6 = oo(), Cz = e1(), Az = GC().indexOf, Pz = U6(), $C = wz([].push);
      KC.exports = function(a, _) {
        var v = Cz(a), h2 = 0, D = [], P;
        for (P in v)
          !K6(Pz, P) && K6(v, P) && $C(D, P);
        for (; _.length > h2; )
          K6(v, P = _[h2++]) && (~Az(D, P) || $C(D, P));
        return D;
      };
    });
    var QC = dt((vG, YC) => {
      YC.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
    });
    var e9 = dt((ZC) => {
      var Dz = XC(), kz = QC(), Iz = kz.concat("length", "prototype");
      ZC.f = Object.getOwnPropertyNames || function(_) {
        return Dz(_, Iz);
      };
    });
    var r9 = dt((t9) => {
      t9.f = Object.getOwnPropertySymbols;
    });
    var i9 = dt((SG, n9) => {
      var Nz = t1(), Oz = Ps(), Mz = e9(), Lz = r9(), Rz = a1(), jz = Oz([].concat);
      n9.exports = Nz("Reflect", "ownKeys") || function(_) {
        var v = Mz.f(Rz(_)), h2 = Lz.f;
        return h2 ? jz(v, h2(_)) : v;
      };
    });
    var o9 = dt((xG, s9) => {
      var a9 = oo(), Jz = i9(), Fz = O6(), Bz = dp();
      s9.exports = function(a, _, v) {
        for (var h2 = Jz(_), D = Bz.f, P = Fz.f, y = 0; y < h2.length; y++) {
          var m = h2[y];
          !a9(a, m) && !(v && a9(v, m)) && D(a, m, P(_, m));
        }
      };
    });
    var c9 = dt((EG, _9) => {
      var qz = Ha(), Uz = aa(), zz = /#|\.prototype\./, hp = function(a, _) {
        var v = Vz[Wz(a)];
        return v == Gz ? true : v == Hz ? false : Uz(_) ? qz(_) : !!_;
      }, Wz = hp.normalize = function(a) {
        return String(a).replace(zz, ".").toLowerCase();
      }, Vz = hp.data = {}, Hz = hp.NATIVE = "N", Gz = hp.POLYFILL = "P";
      _9.exports = hp;
    });
    var u9 = dt((wG, l9) => {
      var X6 = Mi(), $z = O6().f, Kz = J6(), Xz = LC(), Yz = n1(), Qz = o9(), Zz = c9();
      l9.exports = function(a, _) {
        var v = a.target, h2 = a.global, D = a.stat, P, y, m, C, d, E;
        if (h2 ? y = X6 : D ? y = X6[v] || Yz(v, {}) : y = (X6[v] || {}).prototype, y)
          for (m in _) {
            if (d = _[m], a.dontCallGetSet ? (E = $z(y, m), C = E && E.value) : C = y[m], P = Zz(h2 ? m : v + (D ? "." : "#") + m, a.forced), !P && C !== void 0) {
              if (typeof d == typeof C)
                continue;
              Qz(d, C);
            }
            (a.sham || C && C.sham) && Kz(d, "sham", true), Xz(y, m, d, a);
          }
      };
    });
    var p9 = dt(() => {
      var eW = u9(), Y6 = Mi();
      eW({ global: true, forced: Y6.globalThis !== Y6 }, { globalThis: Y6 });
    });
    var f9 = dt(() => {
      p9();
    });
    var h9 = dt((kG, m9) => {
      var d9 = G6(), tW = dp();
      m9.exports = function(a, _, v) {
        return v.get && d9(v.get, _, { getter: true }), v.set && d9(v.set, _, { setter: true }), tW.f(a, _, v);
      };
    });
    var y9 = dt((IG, g9) => {
      var rW = a1();
      g9.exports = function() {
        var a = rW(this), _ = "";
        return a.hasIndices && (_ += "d"), a.global && (_ += "g"), a.ignoreCase && (_ += "i"), a.multiline && (_ += "m"), a.dotAll && (_ += "s"), a.unicode && (_ += "u"), a.unicodeSets && (_ += "v"), a.sticky && (_ += "y"), _;
      };
    });
    var T9 = dt(() => {
      var nW = Mi(), iW = As(), aW = h9(), sW = y9(), oW = Ha(), v9 = nW.RegExp, b9 = v9.prototype, _W = iW && oW(function() {
        var a = true;
        try {
          v9(".", "d");
        } catch {
          a = false;
        }
        var _ = {}, v = "", h2 = a ? "dgimsy" : "gimsy", D = function(C, d) {
          Object.defineProperty(_, C, { get: function() {
            return v += d, true;
          } });
        }, P = { dotAll: "s", global: "g", ignoreCase: "i", multiline: "m", sticky: "y" };
        a && (P.hasIndices = "d");
        for (var y in P)
          D(y, P[y]);
        var m = Object.getOwnPropertyDescriptor(b9, "flags").get.call(_);
        return m !== h2 || v !== h2;
      });
      _W && aW(b9, "flags", { configurable: true, get: sW });
    });
    var uH = dt((MG, v5) => {
      f9();
      T9();
      var iT = Object.defineProperty, cW = Object.getOwnPropertyDescriptor, aT = Object.getOwnPropertyNames, lW = Object.prototype.hasOwnProperty, yp = (a, _) => function() {
        return a && (_ = (0, a[aT(a)[0]])(a = 0)), _;
      }, Oe = (a, _) => function() {
        return _ || (0, a[aT(a)[0]])((_ = { exports: {} }).exports, _), _.exports;
      }, m1 = (a, _) => {
        for (var v in _)
          iT(a, v, { get: _[v], enumerable: true });
      }, uW = (a, _, v, h2) => {
        if (_ && typeof _ == "object" || typeof _ == "function")
          for (let D of aT(_))
            !lW.call(a, D) && D !== v && iT(a, D, { get: () => _[D], enumerable: !(h2 = cW(_, D)) || h2.enumerable });
        return a;
      }, Li = (a) => uW(iT({}, "__esModule", { value: true }), a), cn, De = yp({ "<define:process>"() {
        cn = { env: {}, argv: [] };
      } }), w9 = Oe({ "src/common/parser-create-error.js"(a, _) {
        De();
        function v(h2, D) {
          let P = new SyntaxError(h2 + " (" + D.start.line + ":" + D.start.column + ")");
          return P.loc = D, P;
        }
        _.exports = v;
      } }), pW = Oe({ "src/utils/try-combinations.js"(a, _) {
        De();
        function v() {
          let h2;
          for (var D = arguments.length, P = new Array(D), y = 0; y < D; y++)
            P[y] = arguments[y];
          for (let [m, C] of P.entries())
            try {
              return { result: C() };
            } catch (d) {
              m === 0 && (h2 = d);
            }
          return { error: h2 };
        }
        _.exports = v;
      } }), C9 = {};
      m1(C9, { EOL: () => eT, arch: () => fW, cpus: () => O9, default: () => J9, endianness: () => A9, freemem: () => I9, getNetworkInterfaces: () => j9, hostname: () => P9, loadavg: () => D9, networkInterfaces: () => R9, platform: () => dW, release: () => L9, tmpDir: () => Q6, tmpdir: () => Z6, totalmem: () => N9, type: () => M9, uptime: () => k9 });
      function A9() {
        if (typeof u1 > "u") {
          var a = new ArrayBuffer(2), _ = new Uint8Array(a), v = new Uint16Array(a);
          if (_[0] = 1, _[1] = 2, v[0] === 258)
            u1 = "BE";
          else if (v[0] === 513)
            u1 = "LE";
          else
            throw new Error("unable to figure out endianess");
        }
        return u1;
      }
      function P9() {
        return typeof globalThis.location < "u" ? globalThis.location.hostname : "";
      }
      function D9() {
        return [];
      }
      function k9() {
        return 0;
      }
      function I9() {
        return Number.MAX_VALUE;
      }
      function N9() {
        return Number.MAX_VALUE;
      }
      function O9() {
        return [];
      }
      function M9() {
        return "Browser";
      }
      function L9() {
        return typeof globalThis.navigator < "u" ? globalThis.navigator.appVersion : "";
      }
      function R9() {
      }
      function j9() {
      }
      function fW() {
        return "javascript";
      }
      function dW() {
        return "browser";
      }
      function Q6() {
        return "/tmp";
      }
      var u1, Z6, eT, J9, mW = yp({ "node-modules-polyfills:os"() {
        De(), Z6 = Q6, eT = `
`, J9 = { EOL: eT, tmpdir: Z6, tmpDir: Q6, networkInterfaces: R9, getNetworkInterfaces: j9, release: L9, type: M9, cpus: O9, totalmem: N9, freemem: I9, uptime: k9, loadavg: D9, hostname: P9, endianness: A9 };
      } }), hW = Oe({ "node-modules-polyfills-commonjs:os"(a, _) {
        De();
        var v = (mW(), Li(C9));
        if (v && v.default) {
          _.exports = v.default;
          for (let h2 in v)
            _.exports[h2] = v[h2];
        } else
          v && (_.exports = v);
      } }), gW = Oe({ "node_modules/detect-newline/index.js"(a, _) {
        De();
        var v = (h2) => {
          if (typeof h2 != "string")
            throw new TypeError("Expected a string");
          let D = h2.match(/(?:\r?\n)/g) || [];
          if (D.length === 0)
            return;
          let P = D.filter((m) => m === `\r
`).length, y = D.length - P;
          return P > y ? `\r
` : `
`;
        };
        _.exports = v, _.exports.graceful = (h2) => typeof h2 == "string" && v(h2) || `
`;
      } }), yW = Oe({ "node_modules/jest-docblock/build/index.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.extract = M, a.parse = W, a.parseWithComments = K, a.print = ce, a.strip = q;
        function _() {
          let me = hW();
          return _ = function() {
            return me;
          }, me;
        }
        function v() {
          let me = h2(gW());
          return v = function() {
            return me;
          }, me;
        }
        function h2(me) {
          return me && me.__esModule ? me : { default: me };
        }
        var D = /\*\/$/, P = /^\/\*\*?/, y = /^\s*(\/\*\*?(.|\r?\n)*?\*\/)/, m = /(^|\s+)\/\/([^\r\n]*)/g, C = /^(\r?\n)+/, d = /(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *(?![^@\r\n]*\/\/[^]*)([^@\r\n\s][^@\r\n]+?) *\r?\n/g, E = /(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g, I = /(\r?\n|^) *\* ?/g, c = [];
        function M(me) {
          let Ae = me.match(y);
          return Ae ? Ae[0].trimLeft() : "";
        }
        function q(me) {
          let Ae = me.match(y);
          return Ae && Ae[0] ? me.substring(Ae[0].length) : me;
        }
        function W(me) {
          return K(me).pragmas;
        }
        function K(me) {
          let Ae = (0, v().default)(me) || _().EOL;
          me = me.replace(P, "").replace(D, "").replace(I, "$1");
          let te = "";
          for (; te !== me; )
            te = me, me = me.replace(d, `${Ae}$1 $2${Ae}`);
          me = me.replace(C, "").trimRight();
          let he = /* @__PURE__ */ Object.create(null), Pe = me.replace(E, "").replace(C, "").trimRight(), R;
          for (; R = E.exec(me); ) {
            let pe = R[2].replace(m, "");
            typeof he[R[1]] == "string" || Array.isArray(he[R[1]]) ? he[R[1]] = c.concat(he[R[1]], pe) : he[R[1]] = pe;
          }
          return { comments: Pe, pragmas: he };
        }
        function ce(me) {
          let { comments: Ae = "", pragmas: te = {} } = me, he = (0, v().default)(Ae) || _().EOL, Pe = "/**", R = " *", pe = " */", ke = Object.keys(te), Je = ke.map((ee) => Ie(ee, te[ee])).reduce((ee, je) => ee.concat(je), []).map((ee) => `${R} ${ee}${he}`).join("");
          if (!Ae) {
            if (ke.length === 0)
              return "";
            if (ke.length === 1 && !Array.isArray(te[ke[0]])) {
              let ee = te[ke[0]];
              return `${Pe} ${Ie(ke[0], ee)[0]}${pe}`;
            }
          }
          let Xe = Ae.split(he).map((ee) => `${R} ${ee}`).join(he) + he;
          return Pe + he + (Ae ? Xe : "") + (Ae && ke.length ? R + he : "") + Je + pe;
        }
        function Ie(me, Ae) {
          return c.concat(Ae).map((te) => `@${me} ${te}`.trim());
        }
      } }), vW = Oe({ "src/common/end-of-line.js"(a, _) {
        De();
        function v(y) {
          let m = y.indexOf("\r");
          return m >= 0 ? y.charAt(m + 1) === `
` ? "crlf" : "cr" : "lf";
        }
        function h2(y) {
          switch (y) {
            case "cr":
              return "\r";
            case "crlf":
              return `\r
`;
            default:
              return `
`;
          }
        }
        function D(y, m) {
          let C;
          switch (m) {
            case `
`:
              C = /\n/g;
              break;
            case "\r":
              C = /\r/g;
              break;
            case `\r
`:
              C = /\r\n/g;
              break;
            default:
              throw new Error(`Unexpected "eol" ${JSON.stringify(m)}.`);
          }
          let d = y.match(C);
          return d ? d.length : 0;
        }
        function P(y) {
          return y.replace(/\r\n?/g, `
`);
        }
        _.exports = { guessEndOfLine: v, convertEndOfLineToChars: h2, countEndOfLineChars: D, normalizeEndOfLine: P };
      } }), bW = Oe({ "src/language-js/utils/get-shebang.js"(a, _) {
        De();
        function v(h2) {
          if (!h2.startsWith("#!"))
            return "";
          let D = h2.indexOf(`
`);
          return D === -1 ? h2 : h2.slice(0, D);
        }
        _.exports = v;
      } }), TW = Oe({ "src/language-js/pragma.js"(a, _) {
        De();
        var { parseWithComments: v, strip: h2, extract: D, print: P } = yW(), { normalizeEndOfLine: y } = vW(), m = bW();
        function C(I) {
          let c = m(I);
          c && (I = I.slice(c.length + 1));
          let M = D(I), { pragmas: q, comments: W } = v(M);
          return { shebang: c, text: I, pragmas: q, comments: W };
        }
        function d(I) {
          let c = Object.keys(C(I).pragmas);
          return c.includes("prettier") || c.includes("format");
        }
        function E(I) {
          let { shebang: c, text: M, pragmas: q, comments: W } = C(I), K = h2(M), ce = P({ pragmas: Object.assign({ format: "" }, q), comments: W.trimStart() });
          return (c ? `${c}
` : "") + y(ce) + (K.startsWith(`
`) ? `
` : `

`) + K;
        }
        _.exports = { hasPragma: d, insertPragma: E };
      } }), F9 = Oe({ "src/utils/is-non-empty-array.js"(a, _) {
        De();
        function v(h2) {
          return Array.isArray(h2) && h2.length > 0;
        }
        _.exports = v;
      } }), B9 = Oe({ "src/language-js/loc.js"(a, _) {
        De();
        var v = F9();
        function h2(C) {
          var d, E;
          let I = C.range ? C.range[0] : C.start, c = (d = (E = C.declaration) === null || E === void 0 ? void 0 : E.decorators) !== null && d !== void 0 ? d : C.decorators;
          return v(c) ? Math.min(h2(c[0]), I) : I;
        }
        function D(C) {
          return C.range ? C.range[1] : C.end;
        }
        function P(C, d) {
          let E = h2(C);
          return Number.isInteger(E) && E === h2(d);
        }
        function y(C, d) {
          let E = D(C);
          return Number.isInteger(E) && E === D(d);
        }
        function m(C, d) {
          return P(C, d) && y(C, d);
        }
        _.exports = { locStart: h2, locEnd: D, hasSameLocStart: P, hasSameLoc: m };
      } }), SW = Oe({ "src/language-js/parse/utils/create-parser.js"(a, _) {
        De();
        var { hasPragma: v } = TW(), { locStart: h2, locEnd: D } = B9();
        function P(y) {
          return y = typeof y == "function" ? { parse: y } : y, Object.assign({ astFormat: "estree", hasPragma: v, locStart: h2, locEnd: D }, y);
        }
        _.exports = P;
      } }), xW = Oe({ "src/language-js/parse/utils/replace-hashbang.js"(a, _) {
        De();
        function v(h2) {
          return h2.charAt(0) === "#" && h2.charAt(1) === "!" ? "//" + h2.slice(2) : h2;
        }
        _.exports = v;
      } }), EW = Oe({ "src/language-js/utils/is-ts-keyword-type.js"(a, _) {
        De();
        function v(h2) {
          let { type: D } = h2;
          return D.startsWith("TS") && D.endsWith("Keyword");
        }
        _.exports = v;
      } }), wW = Oe({ "src/language-js/utils/is-block-comment.js"(a, _) {
        De();
        var v = /* @__PURE__ */ new Set(["Block", "CommentBlock", "MultiLine"]), h2 = (D) => v.has(D == null ? void 0 : D.type);
        _.exports = h2;
      } }), CW = Oe({ "src/language-js/utils/is-type-cast-comment.js"(a, _) {
        De();
        var v = wW();
        function h2(D) {
          return v(D) && D.value[0] === "*" && /@(?:type|satisfies)\b/.test(D.value);
        }
        _.exports = h2;
      } }), AW = Oe({ "src/utils/get-last.js"(a, _) {
        De();
        var v = (h2) => h2[h2.length - 1];
        _.exports = v;
      } }), q9 = Oe({ "src/language-js/parse/postprocess/visit-node.js"(a, _) {
        De();
        function v(h2, D) {
          if (Array.isArray(h2)) {
            for (let P = 0; P < h2.length; P++)
              h2[P] = v(h2[P], D);
            return h2;
          }
          if (h2 && typeof h2 == "object" && typeof h2.type == "string") {
            let P = Object.keys(h2);
            for (let y = 0; y < P.length; y++)
              h2[P[y]] = v(h2[P[y]], D);
            return D(h2) || h2;
          }
          return h2;
        }
        _.exports = v;
      } }), U9 = Oe({ "src/language-js/parse/postprocess/throw-syntax-error.js"(a, _) {
        De();
        var v = w9();
        function h2(D, P) {
          let { start: y, end: m } = D.loc;
          throw v(P, { start: { line: y.line, column: y.column + 1 }, end: { line: m.line, column: m.column + 1 } });
        }
        _.exports = h2;
      } }), PW = Oe({ "src/language-js/parse/postprocess/index.js"(a, _) {
        De();
        var { locStart: v, locEnd: h2 } = B9(), D = EW(), P = CW(), y = AW(), m = q9(), C = U9();
        function d(M, q) {
          if (q.parser !== "typescript" && q.parser !== "flow" && q.parser !== "acorn" && q.parser !== "espree" && q.parser !== "meriyah") {
            let K = /* @__PURE__ */ new Set();
            M = m(M, (ce) => {
              ce.leadingComments && ce.leadingComments.some(P) && K.add(v(ce));
            }), M = m(M, (ce) => {
              if (ce.type === "ParenthesizedExpression") {
                let { expression: Ie } = ce;
                if (Ie.type === "TypeCastExpression")
                  return Ie.range = ce.range, Ie;
                let me = v(ce);
                if (!K.has(me))
                  return Ie.extra = Object.assign(Object.assign({}, Ie.extra), {}, { parenthesized: true }), Ie;
              }
            });
          }
          return M = m(M, (K) => {
            switch (K.type) {
              case "ChainExpression":
                return E(K.expression);
              case "LogicalExpression": {
                if (I(K))
                  return c(K);
                break;
              }
              case "VariableDeclaration": {
                let ce = y(K.declarations);
                ce && ce.init && W(K, ce);
                break;
              }
              case "TSParenthesizedType":
                return D(K.typeAnnotation) || K.typeAnnotation.type === "TSThisType" || (K.typeAnnotation.range = [v(K), h2(K)]), K.typeAnnotation;
              case "TSTypeParameter":
                if (typeof K.name == "string") {
                  let ce = v(K);
                  K.name = { type: "Identifier", name: K.name, range: [ce, ce + K.name.length] };
                }
                break;
              case "ObjectExpression":
                if (q.parser === "typescript") {
                  let ce = K.properties.find((Ie) => Ie.type === "Property" && Ie.value.type === "TSEmptyBodyFunctionExpression");
                  ce && C(ce.value, "Unexpected token.");
                }
                break;
              case "SequenceExpression": {
                let ce = y(K.expressions);
                K.range = [v(K), Math.min(h2(ce), h2(K))];
                break;
              }
              case "TopicReference":
                q.__isUsingHackPipeline = true;
                break;
              case "ExportAllDeclaration": {
                let { exported: ce } = K;
                if (q.parser === "meriyah" && ce && ce.type === "Identifier") {
                  let Ie = q.originalText.slice(v(ce), h2(ce));
                  (Ie.startsWith('"') || Ie.startsWith("'")) && (K.exported = Object.assign(Object.assign({}, K.exported), {}, { type: "Literal", value: K.exported.name, raw: Ie }));
                }
                break;
              }
              case "PropertyDefinition":
                if (q.parser === "meriyah" && K.static && !K.computed && !K.key) {
                  let ce = "static", Ie = v(K);
                  Object.assign(K, { static: false, key: { type: "Identifier", name: ce, range: [Ie, Ie + ce.length] } });
                }
                break;
            }
          }), M;
          function W(K, ce) {
            q.originalText[h2(ce)] !== ";" && (K.range = [v(K), h2(ce)]);
          }
        }
        function E(M) {
          switch (M.type) {
            case "CallExpression":
              M.type = "OptionalCallExpression", M.callee = E(M.callee);
              break;
            case "MemberExpression":
              M.type = "OptionalMemberExpression", M.object = E(M.object);
              break;
            case "TSNonNullExpression":
              M.expression = E(M.expression);
              break;
          }
          return M;
        }
        function I(M) {
          return M.type === "LogicalExpression" && M.right.type === "LogicalExpression" && M.operator === M.right.operator;
        }
        function c(M) {
          return I(M) ? c({ type: "LogicalExpression", operator: M.operator, left: c({ type: "LogicalExpression", operator: M.operator, left: M.left, right: M.right.left, range: [v(M.left), h2(M.right.left)] }), right: M.right.right, range: [v(M), h2(M)] }) : M;
        }
        _.exports = d;
      } }), vr = Oe({ "node_modules/typescript/lib/typescript.js"(a, _) {
        De();
        var v = Object.defineProperty, h2 = Object.getOwnPropertyNames, D = (e, t) => function() {
          return e && (t = (0, e[h2(e)[0]])(e = 0)), t;
        }, P = (e, t) => function() {
          return t || (0, e[h2(e)[0]])((t = { exports: {} }).exports, t), t.exports;
        }, y = (e, t) => {
          for (var r in t)
            v(e, r, { get: t[r], enumerable: true });
        }, m, C, d, E = D({ "src/compiler/corePublic.ts"() {
          m = "5.0", C = "5.0.2", d = ((e) => (e[e.LessThan = -1] = "LessThan", e[e.EqualTo = 0] = "EqualTo", e[e.GreaterThan = 1] = "GreaterThan", e))(d || {});
        } });
        function I(e) {
          return e ? e.length : 0;
        }
        function c(e, t) {
          if (e)
            for (let r = 0; r < e.length; r++) {
              let s = t(e[r], r);
              if (s)
                return s;
            }
        }
        function M(e, t) {
          if (e)
            for (let r = e.length - 1; r >= 0; r--) {
              let s = t(e[r], r);
              if (s)
                return s;
            }
        }
        function q(e, t) {
          if (e !== void 0)
            for (let r = 0; r < e.length; r++) {
              let s = t(e[r], r);
              if (s !== void 0)
                return s;
            }
        }
        function W(e, t) {
          for (let r of e) {
            let s = t(r);
            if (s !== void 0)
              return s;
          }
        }
        function K(e, t, r) {
          let s = r;
          if (e) {
            let f = 0;
            for (let x of e)
              s = t(s, x, f), f++;
          }
          return s;
        }
        function ce(e, t, r) {
          let s = [];
          Y.assertEqual(e.length, t.length);
          for (let f = 0; f < e.length; f++)
            s.push(r(e[f], t[f], f));
          return s;
        }
        function Ie(e, t) {
          if (e.length <= 1)
            return e;
          let r = [];
          for (let s = 0, f = e.length; s < f; s++)
            s && r.push(t), r.push(e[s]);
          return r;
        }
        function me(e, t) {
          if (e) {
            for (let r = 0; r < e.length; r++)
              if (!t(e[r], r))
                return false;
          }
          return true;
        }
        function Ae(e, t, r) {
          if (e !== void 0)
            for (let s = r != null ? r : 0; s < e.length; s++) {
              let f = e[s];
              if (t(f, s))
                return f;
            }
        }
        function te(e, t, r) {
          if (e !== void 0)
            for (let s = r != null ? r : e.length - 1; s >= 0; s--) {
              let f = e[s];
              if (t(f, s))
                return f;
            }
        }
        function he(e, t, r) {
          if (e === void 0)
            return -1;
          for (let s = r != null ? r : 0; s < e.length; s++)
            if (t(e[s], s))
              return s;
          return -1;
        }
        function Pe(e, t, r) {
          if (e === void 0)
            return -1;
          for (let s = r != null ? r : e.length - 1; s >= 0; s--)
            if (t(e[s], s))
              return s;
          return -1;
        }
        function R(e, t) {
          for (let r = 0; r < e.length; r++) {
            let s = t(e[r], r);
            if (s)
              return s;
          }
          return Y.fail();
        }
        function pe(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : fa;
          if (e) {
            for (let s of e)
              if (r(s, t))
                return true;
          }
          return false;
        }
        function ke(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : fa;
          return e.length === t.length && e.every((s, f) => r(s, t[f]));
        }
        function Je(e, t, r) {
          for (let s = r || 0; s < e.length; s++)
            if (pe(t, e.charCodeAt(s)))
              return s;
          return -1;
        }
        function Xe(e, t) {
          let r = 0;
          if (e)
            for (let s = 0; s < e.length; s++) {
              let f = e[s];
              t(f, s) && r++;
            }
          return r;
        }
        function ee(e, t) {
          if (e) {
            let r = e.length, s = 0;
            for (; s < r && t(e[s]); )
              s++;
            if (s < r) {
              let f = e.slice(0, s);
              for (s++; s < r; ) {
                let x = e[s];
                t(x) && f.push(x), s++;
              }
              return f;
            }
          }
          return e;
        }
        function je(e, t) {
          let r = 0;
          for (let s = 0; s < e.length; s++)
            t(e[s], s, e) && (e[r] = e[s], r++);
          e.length = r;
        }
        function nt(e) {
          e.length = 0;
        }
        function Ze(e, t) {
          let r;
          if (e) {
            r = [];
            for (let s = 0; s < e.length; s++)
              r.push(t(e[s], s));
          }
          return r;
        }
        function* st(e, t) {
          for (let r of e)
            yield t(r);
        }
        function tt(e, t) {
          if (e)
            for (let r = 0; r < e.length; r++) {
              let s = e[r], f = t(s, r);
              if (s !== f) {
                let x = e.slice(0, r);
                for (x.push(f), r++; r < e.length; r++)
                  x.push(t(e[r], r));
                return x;
              }
            }
          return e;
        }
        function ct(e) {
          let t = [];
          for (let r of e)
            r && (ir(r) ? jr(t, r) : t.push(r));
          return t;
        }
        function ne(e, t) {
          let r;
          if (e)
            for (let s = 0; s < e.length; s++) {
              let f = t(e[s], s);
              f && (ir(f) ? r = jr(r, f) : r = tr(r, f));
            }
          return r || Bt;
        }
        function ge(e, t) {
          let r = [];
          if (e)
            for (let s = 0; s < e.length; s++) {
              let f = t(e[s], s);
              f && (ir(f) ? jr(r, f) : r.push(f));
            }
          return r;
        }
        function* Fe(e, t) {
          for (let r of e) {
            let s = t(r);
            s && (yield* s);
          }
        }
        function at(e, t) {
          let r;
          if (e)
            for (let s = 0; s < e.length; s++) {
              let f = e[s], x = t(f, s);
              (r || f !== x || ir(x)) && (r || (r = e.slice(0, s)), ir(x) ? jr(r, x) : r.push(x));
            }
          return r || e;
        }
        function Pt(e, t) {
          let r = [];
          for (let s = 0; s < e.length; s++) {
            let f = t(e[s], s);
            if (f === void 0)
              return;
            r.push(f);
          }
          return r;
        }
        function qt(e, t) {
          let r = [];
          if (e)
            for (let s = 0; s < e.length; s++) {
              let f = t(e[s], s);
              f !== void 0 && r.push(f);
            }
          return r;
        }
        function* Zr(e, t) {
          for (let r of e) {
            let s = t(r);
            s !== void 0 && (yield s);
          }
        }
        function Ri(e, t) {
          if (!e)
            return;
          let r = /* @__PURE__ */ new Map();
          return e.forEach((s, f) => {
            let x = t(f, s);
            if (x !== void 0) {
              let [w, A] = x;
              w !== void 0 && A !== void 0 && r.set(w, A);
            }
          }), r;
        }
        function la(e, t, r) {
          if (e.has(t))
            return e.get(t);
          let s = r();
          return e.set(t, s), s;
        }
        function ua(e, t) {
          return e.has(t) ? false : (e.add(t), true);
        }
        function* Ka(e) {
          yield e;
        }
        function co(e, t, r) {
          let s;
          if (e) {
            s = [];
            let f = e.length, x, w, A = 0, g = 0;
            for (; A < f; ) {
              for (; g < f; ) {
                let B = e[g];
                if (w = t(B, g), g === 0)
                  x = w;
                else if (w !== x)
                  break;
                g++;
              }
              if (A < g) {
                let B = r(e.slice(A, g), x, A, g);
                B && s.push(B), A = g;
              }
              x = w, g++;
            }
          }
          return s;
        }
        function be(e, t) {
          if (!e)
            return;
          let r = /* @__PURE__ */ new Map();
          return e.forEach((s, f) => {
            let [x, w] = t(f, s);
            r.set(x, w);
          }), r;
        }
        function Ke(e, t) {
          if (e)
            if (t) {
              for (let r of e)
                if (t(r))
                  return true;
            } else
              return e.length > 0;
          return false;
        }
        function Et(e, t, r) {
          let s;
          for (let f = 0; f < e.length; f++)
            t(e[f]) ? s = s === void 0 ? f : s : s !== void 0 && (r(s, f), s = void 0);
          s !== void 0 && r(s, e.length);
        }
        function Ft(e, t) {
          return Ke(t) ? Ke(e) ? [...e, ...t] : t : e;
        }
        function or(e, t) {
          return t;
        }
        function Wr(e) {
          return e.map(or);
        }
        function m_(e, t, r) {
          let s = Wr(e);
          ks(e, s, r);
          let f = e[s[0]], x = [s[0]];
          for (let w = 1; w < s.length; w++) {
            let A = s[w], g = e[A];
            t(f, g) || (x.push(A), f = g);
          }
          return x.sort(), x.map((w) => e[w]);
        }
        function Uc(e, t) {
          let r = [];
          for (let s of e)
            qn(r, s, t);
          return r;
        }
        function ji(e, t, r) {
          return e.length === 0 ? [] : e.length === 1 ? e.slice() : r ? m_(e, t, r) : Uc(e, t);
        }
        function lo(e, t) {
          if (e.length === 0)
            return Bt;
          let r = e[0], s = [r];
          for (let f = 1; f < e.length; f++) {
            let x = e[f];
            switch (t(x, r)) {
              case true:
              case 0:
                continue;
              case -1:
                return Y.fail("Array is unsorted.");
            }
            s.push(r = x);
          }
          return s;
        }
        function zc() {
          return [];
        }
        function Qn(e, t, r, s) {
          if (e.length === 0)
            return e.push(t), true;
          let f = Ya(e, t, rr, r);
          return f < 0 ? (e.splice(~f, 0, t), true) : s ? (e.splice(f, 0, t), true) : false;
        }
        function uo(e, t, r) {
          return lo(Is(e, t), r || t || ri);
        }
        function Wc(e, t) {
          if (e.length < 2)
            return true;
          for (let r = 1, s = e.length; r < s; r++)
            if (t(e[r - 1], e[r]) === 1)
              return false;
          return true;
        }
        function Vc(e, t, r, s) {
          let f = 3;
          if (e.length < 2)
            return f;
          let x = t(e[0]);
          for (let w = 1, A = e.length; w < A && f !== 0; w++) {
            let g = t(e[w]);
            f & 1 && r(x, g) > 0 && (f &= -2), f & 2 && s(x, g) > 0 && (f &= -3), x = g;
          }
          return f;
        }
        function Hc(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : fa;
          if (!e || !t)
            return e === t;
          if (e.length !== t.length)
            return false;
          for (let s = 0; s < e.length; s++)
            if (!r(e[s], t[s], s))
              return false;
          return true;
        }
        function Gc(e) {
          let t;
          if (e)
            for (let r = 0; r < e.length; r++) {
              let s = e[r];
              (t || !s) && (t || (t = e.slice(0, r)), s && t.push(s));
            }
          return t || e;
        }
        function h_(e, t, r) {
          if (!t || !e || t.length === 0 || e.length === 0)
            return t;
          let s = [];
          e:
            for (let f = 0, x = 0; x < t.length; x++) {
              x > 0 && Y.assertGreaterThanOrEqual(r(t[x], t[x - 1]), 0);
              t:
                for (let w = f; f < e.length; f++)
                  switch (f > w && Y.assertGreaterThanOrEqual(r(e[f], e[f - 1]), 0), r(t[x], e[f])) {
                    case -1:
                      s.push(t[x]);
                      continue e;
                    case 0:
                      continue e;
                    case 1:
                      continue t;
                  }
            }
          return s;
        }
        function tr(e, t) {
          return t === void 0 ? e : e === void 0 ? [t] : (e.push(t), e);
        }
        function $c(e, t) {
          return e === void 0 ? t : t === void 0 ? e : ir(e) ? ir(t) ? Ft(e, t) : tr(e, t) : ir(t) ? tr(t, e) : [e, t];
        }
        function po(e, t) {
          return t < 0 ? e.length + t : t;
        }
        function jr(e, t, r, s) {
          if (t === void 0 || t.length === 0)
            return e;
          if (e === void 0)
            return t.slice(r, s);
          r = r === void 0 ? 0 : po(t, r), s = s === void 0 ? t.length : po(t, s);
          for (let f = r; f < s && f < t.length; f++)
            t[f] !== void 0 && e.push(t[f]);
          return e;
        }
        function qn(e, t, r) {
          return pe(e, t, r) ? false : (e.push(t), true);
        }
        function g_(e, t, r) {
          return e ? (qn(e, t, r), e) : [t];
        }
        function ks(e, t, r) {
          t.sort((s, f) => r(e[s], e[f]) || Vr(s, f));
        }
        function Is(e, t) {
          return e.length === 0 ? e : e.slice().sort(t);
        }
        function* y_(e) {
          for (let t = e.length - 1; t >= 0; t--)
            yield e[t];
        }
        function Ns(e, t) {
          let r = Wr(e);
          return ks(e, r, t), r.map((s) => e[s]);
        }
        function Kc(e, t, r, s) {
          for (; r < s; ) {
            if (e[r] !== t[r])
              return false;
            r++;
          }
          return true;
        }
        function pa(e) {
          return e === void 0 || e.length === 0 ? void 0 : e[0];
        }
        function Xc(e) {
          if (e)
            for (let t of e)
              return t;
        }
        function fo(e) {
          return Y.assert(e.length !== 0), e[0];
        }
        function v_(e) {
          for (let t of e)
            return t;
          Y.fail("iterator is empty");
        }
        function Cn(e) {
          return e === void 0 || e.length === 0 ? void 0 : e[e.length - 1];
        }
        function Zn(e) {
          return Y.assert(e.length !== 0), e[e.length - 1];
        }
        function Xa(e) {
          return e && e.length === 1 ? e[0] : void 0;
        }
        function Yc(e) {
          return Y.checkDefined(Xa(e));
        }
        function mo(e) {
          return e && e.length === 1 ? e[0] : e;
        }
        function ei(e, t, r) {
          let s = e.slice(0);
          return s[t] = r, s;
        }
        function Ya(e, t, r, s, f) {
          return b_(e, r(t), r, s, f);
        }
        function b_(e, t, r, s, f) {
          if (!Ke(e))
            return -1;
          let x = f || 0, w = e.length - 1;
          for (; x <= w; ) {
            let A = x + (w - x >> 1), g = r(e[A], A);
            switch (s(g, t)) {
              case -1:
                x = A + 1;
                break;
              case 0:
                return A;
              case 1:
                w = A - 1;
                break;
            }
          }
          return ~x;
        }
        function Qa(e, t, r, s, f) {
          if (e && e.length > 0) {
            let x = e.length;
            if (x > 0) {
              let w = s === void 0 || s < 0 ? 0 : s, A = f === void 0 || w + f > x - 1 ? x - 1 : w + f, g;
              for (arguments.length <= 2 ? (g = e[w], w++) : g = r; w <= A; )
                g = t(g, e[w], w), w++;
              return g;
            }
          }
          return r;
        }
        function Jr(e, t) {
          return ni.call(e, t);
        }
        function Qc(e, t) {
          return ni.call(e, t) ? e[t] : void 0;
        }
        function ho(e) {
          let t = [];
          for (let r in e)
            ni.call(e, r) && t.push(r);
          return t;
        }
        function T_(e) {
          let t = [];
          do {
            let r = Object.getOwnPropertyNames(e);
            for (let s of r)
              qn(t, s);
          } while (e = Object.getPrototypeOf(e));
          return t;
        }
        function go(e) {
          let t = [];
          for (let r in e)
            ni.call(e, r) && t.push(e[r]);
          return t;
        }
        function yo(e, t) {
          let r = new Array(e);
          for (let s = 0; s < e; s++)
            r[s] = t(s);
          return r;
        }
        function Za(e, t) {
          let r = [];
          for (let s of e)
            r.push(t ? t(s) : s);
          return r;
        }
        function vo(e) {
          for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++)
            r[s - 1] = arguments[s];
          for (let f of r)
            if (f !== void 0)
              for (let x in f)
                Jr(f, x) && (e[x] = f[x]);
          return e;
        }
        function S_(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : fa;
          if (e === t)
            return true;
          if (!e || !t)
            return false;
          for (let s in e)
            if (ni.call(e, s) && (!ni.call(t, s) || !r(e[s], t[s])))
              return false;
          for (let s in t)
            if (ni.call(t, s) && !ni.call(e, s))
              return false;
          return true;
        }
        function Zc(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : rr, s = /* @__PURE__ */ new Map();
          for (let f of e) {
            let x = t(f);
            x !== void 0 && s.set(x, r(f));
          }
          return s;
        }
        function Os(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : rr, s = [];
          for (let f of e)
            s[t(f)] = r(f);
          return s;
        }
        function bo(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : rr, s = Be();
          for (let f of e)
            s.add(t(f), r(f));
          return s;
        }
        function el(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : rr;
          return Za(bo(e, t).values(), r);
        }
        function x_(e, t) {
          var r;
          let s = {};
          if (e)
            for (let f of e) {
              let x = `${t(f)}`;
              ((r = s[x]) != null ? r : s[x] = []).push(f);
            }
          return s;
        }
        function E_(e) {
          let t = {};
          for (let r in e)
            ni.call(e, r) && (t[r] = e[r]);
          return t;
        }
        function S(e, t) {
          let r = {};
          for (let s in t)
            ni.call(t, s) && (r[s] = t[s]);
          for (let s in e)
            ni.call(e, s) && (r[s] = e[s]);
          return r;
        }
        function H(e, t) {
          for (let r in t)
            ni.call(t, r) && (e[r] = t[r]);
        }
        function le(e, t) {
          return t ? t.bind(e) : void 0;
        }
        function Be() {
          let e = /* @__PURE__ */ new Map();
          return e.add = rt, e.remove = ut, e;
        }
        function rt(e, t) {
          let r = this.get(e);
          return r ? r.push(t) : this.set(e, r = [t]), r;
        }
        function ut(e, t) {
          let r = this.get(e);
          r && (bT(r, t), r.length || this.delete(e));
        }
        function Ht() {
          return Be();
        }
        function Fr(e) {
          let t = (e == null ? void 0 : e.slice()) || [], r = 0;
          function s() {
            return r === t.length;
          }
          function f() {
            t.push(...arguments);
          }
          function x() {
            if (s())
              throw new Error("Queue is empty");
            let w = t[r];
            if (t[r] = void 0, r++, r > 100 && r > t.length >> 1) {
              let A = t.length - r;
              t.copyWithin(0, r), t.length = A, r = 0;
            }
            return w;
          }
          return { enqueue: f, dequeue: x, isEmpty: s };
        }
        function Cr(e, t) {
          let r = /* @__PURE__ */ new Map(), s = 0;
          function* f() {
            for (let w of r.values())
              ir(w) ? yield* w : yield w;
          }
          let x = { has(w) {
            let A = e(w);
            if (!r.has(A))
              return false;
            let g = r.get(A);
            if (!ir(g))
              return t(g, w);
            for (let B of g)
              if (t(B, w))
                return true;
            return false;
          }, add(w) {
            let A = e(w);
            if (r.has(A)) {
              let g = r.get(A);
              if (ir(g))
                pe(g, w, t) || (g.push(w), s++);
              else {
                let B = g;
                t(B, w) || (r.set(A, [B, w]), s++);
              }
            } else
              r.set(A, w), s++;
            return this;
          }, delete(w) {
            let A = e(w);
            if (!r.has(A))
              return false;
            let g = r.get(A);
            if (ir(g)) {
              for (let B = 0; B < g.length; B++)
                if (t(g[B], w))
                  return g.length === 1 ? r.delete(A) : g.length === 2 ? r.set(A, g[1 - B]) : U1(g, B), s--, true;
            } else if (t(g, w))
              return r.delete(A), s--, true;
            return false;
          }, clear() {
            r.clear(), s = 0;
          }, get size() {
            return s;
          }, forEach(w) {
            for (let A of Za(r.values()))
              if (ir(A))
                for (let g of A)
                  w(g, g, x);
              else {
                let g = A;
                w(g, g, x);
              }
          }, keys() {
            return f();
          }, values() {
            return f();
          }, *entries() {
            for (let w of f())
              yield [w, w];
          }, [Symbol.iterator]: () => f(), [Symbol.toStringTag]: r[Symbol.toStringTag] };
          return x;
        }
        function ir(e) {
          return Array.isArray(e);
        }
        function en(e) {
          return ir(e) ? e : [e];
        }
        function Ji(e) {
          return typeof e == "string";
        }
        function gi(e) {
          return typeof e == "number";
        }
        function ln(e, t) {
          return e !== void 0 && t(e) ? e : void 0;
        }
        function ti(e, t) {
          return e !== void 0 && t(e) ? e : Y.fail(`Invalid cast. The supplied value ${e} did not pass the test '${Y.getFunctionName(t)}'.`);
        }
        function yn(e) {
        }
        function w_() {
          return false;
        }
        function vp() {
          return true;
        }
        function C1() {
        }
        function rr(e) {
          return e;
        }
        function bp(e) {
          return e.toLowerCase();
        }
        function Tp(e) {
          return G1.test(e) ? e.replace(G1, bp) : e;
        }
        function A1() {
          throw new Error("Not implemented");
        }
        function tl(e) {
          let t;
          return () => (e && (t = e(), e = void 0), t);
        }
        function An(e) {
          let t = /* @__PURE__ */ new Map();
          return (r) => {
            let s = `${typeof r}:${r}`, f = t.get(s);
            return f === void 0 && !t.has(s) && (f = e(r), t.set(s, f)), f;
          };
        }
        function P1(e) {
          let t = /* @__PURE__ */ new WeakMap();
          return (r) => {
            let s = t.get(r);
            return s === void 0 && !t.has(r) && (s = e(r), t.set(r, s)), s;
          };
        }
        function D1(e, t) {
          return function() {
            for (var r = arguments.length, s = new Array(r), f = 0; f < r; f++)
              s[f] = arguments[f];
            let x = t.get(s);
            return x === void 0 && !t.has(s) && (x = e(...s), t.set(s, x)), x;
          };
        }
        function k1(e, t, r, s, f) {
          if (f) {
            let x = [];
            for (let w = 0; w < arguments.length; w++)
              x[w] = arguments[w];
            return (w) => Qa(x, (A, g) => g(A), w);
          } else
            return s ? (x) => s(r(t(e(x)))) : r ? (x) => r(t(e(x))) : t ? (x) => t(e(x)) : e ? (x) => e(x) : (x) => x;
        }
        function fa(e, t) {
          return e === t;
        }
        function Ms(e, t) {
          return e === t || e !== void 0 && t !== void 0 && e.toUpperCase() === t.toUpperCase();
        }
        function To(e, t) {
          return fa(e, t);
        }
        function Sp(e, t) {
          return e === t ? 0 : e === void 0 ? -1 : t === void 0 ? 1 : e < t ? -1 : 1;
        }
        function Vr(e, t) {
          return Sp(e, t);
        }
        function I1(e, t) {
          return Vr(e == null ? void 0 : e.start, t == null ? void 0 : t.start) || Vr(e == null ? void 0 : e.length, t == null ? void 0 : t.length);
        }
        function N1(e, t) {
          return Qa(e, (r, s) => t(r, s) === -1 ? r : s);
        }
        function C_(e, t) {
          return e === t ? 0 : e === void 0 ? -1 : t === void 0 ? 1 : (e = e.toUpperCase(), t = t.toUpperCase(), e < t ? -1 : e > t ? 1 : 0);
        }
        function O1(e, t) {
          return e === t ? 0 : e === void 0 ? -1 : t === void 0 ? 1 : (e = e.toLowerCase(), t = t.toLowerCase(), e < t ? -1 : e > t ? 1 : 0);
        }
        function ri(e, t) {
          return Sp(e, t);
        }
        function rl(e) {
          return e ? C_ : ri;
        }
        function M1() {
          return Ap;
        }
        function xp(e) {
          Ap !== e && (Ap = e, K1 = void 0);
        }
        function L1(e, t) {
          return (K1 || (K1 = AT(Ap)))(e, t);
        }
        function R1(e, t, r, s) {
          return e === t ? 0 : e === void 0 ? -1 : t === void 0 ? 1 : s(e[r], t[r]);
        }
        function j1(e, t) {
          return Vr(e ? 1 : 0, t ? 1 : 0);
        }
        function Ep(e, t, r) {
          let s = Math.max(2, Math.floor(e.length * 0.34)), f = Math.floor(e.length * 0.4) + 1, x;
          for (let w of t) {
            let A = r(w);
            if (A !== void 0 && Math.abs(A.length - e.length) <= s) {
              if (A === e || A.length < 3 && A.toLowerCase() !== e.toLowerCase())
                continue;
              let g = J1(e, A, f - 0.1);
              if (g === void 0)
                continue;
              Y.assert(g < f), f = g, x = w;
            }
          }
          return x;
        }
        function J1(e, t, r) {
          let s = new Array(t.length + 1), f = new Array(t.length + 1), x = r + 0.01;
          for (let A = 0; A <= t.length; A++)
            s[A] = A;
          for (let A = 1; A <= e.length; A++) {
            let g = e.charCodeAt(A - 1), B = Math.ceil(A > r ? A - r : 1), N = Math.floor(t.length > r + A ? r + A : t.length);
            f[0] = A;
            let X = A;
            for (let $ = 1; $ < B; $++)
              f[$] = x;
            for (let $ = B; $ <= N; $++) {
              let ae = e[A - 1].toLowerCase() === t[$ - 1].toLowerCase() ? s[$ - 1] + 0.1 : s[$ - 1] + 2, Te = g === t.charCodeAt($ - 1) ? s[$ - 1] : Math.min(s[$] + 1, f[$ - 1] + 1, ae);
              f[$] = Te, X = Math.min(X, Te);
            }
            for (let $ = N + 1; $ <= t.length; $++)
              f[$] = x;
            if (X > r)
              return;
            let F = s;
            s = f, f = F;
          }
          let w = s[t.length];
          return w > r ? void 0 : w;
        }
        function es(e, t) {
          let r = e.length - t.length;
          return r >= 0 && e.indexOf(t, r) === r;
        }
        function F1(e, t) {
          return es(e, t) ? e.slice(0, e.length - t.length) : e;
        }
        function B1(e, t) {
          return es(e, t) ? e.slice(0, e.length - t.length) : void 0;
        }
        function Fi(e, t) {
          return e.indexOf(t) !== -1;
        }
        function q1(e) {
          let t = e.length;
          for (let r = t - 1; r > 0; r--) {
            let s = e.charCodeAt(r);
            if (s >= 48 && s <= 57)
              do
                --r, s = e.charCodeAt(r);
              while (r > 0 && s >= 48 && s <= 57);
            else if (r > 4 && (s === 110 || s === 78)) {
              if (--r, s = e.charCodeAt(r), s !== 105 && s !== 73 || (--r, s = e.charCodeAt(r), s !== 109 && s !== 77))
                break;
              --r, s = e.charCodeAt(r);
            } else
              break;
            if (s !== 45 && s !== 46)
              break;
            t = r;
          }
          return t === e.length ? e : e.slice(0, t);
        }
        function J(e, t) {
          for (let r = 0; r < e.length; r++)
            if (e[r] === t)
              return vT(e, r), true;
          return false;
        }
        function vT(e, t) {
          for (let r = t; r < e.length - 1; r++)
            e[r] = e[r + 1];
          e.pop();
        }
        function U1(e, t) {
          e[t] = e[e.length - 1], e.pop();
        }
        function bT(e, t) {
          return b5(e, (r) => r === t);
        }
        function b5(e, t) {
          for (let r = 0; r < e.length; r++)
            if (t(e[r]))
              return U1(e, r), true;
          return false;
        }
        function wp(e) {
          return e ? rr : Tp;
        }
        function T5(e) {
          let { prefix: t, suffix: r } = e;
          return `${t}*${r}`;
        }
        function S5(e, t) {
          return Y.assert(z1(e, t)), t.substring(e.prefix.length, t.length - e.suffix.length);
        }
        function TT(e, t, r) {
          let s, f = -1;
          for (let x of e) {
            let w = t(x);
            z1(w, r) && w.prefix.length > f && (f = w.prefix.length, s = x);
          }
          return s;
        }
        function Pn(e, t) {
          return e.lastIndexOf(t, 0) === 0;
        }
        function x5(e, t) {
          return Pn(e, t) ? e.substr(t.length) : e;
        }
        function ST(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : rr;
          return Pn(r(e), r(t)) ? e.substring(t.length) : void 0;
        }
        function z1(e, t) {
          let { prefix: r, suffix: s } = e;
          return t.length >= r.length + s.length && Pn(t, r) && es(t, s);
        }
        function E5(e, t) {
          return (r) => e(r) && t(r);
        }
        function W1() {
          for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
            t[r] = arguments[r];
          return function() {
            let s;
            for (let f of t)
              if (s = f(...arguments), s)
                return s;
            return s;
          };
        }
        function w5(e) {
          return function() {
            return !e(...arguments);
          };
        }
        function C5(e) {
        }
        function Cp(e) {
          return e === void 0 ? void 0 : [e];
        }
        function A5(e, t, r, s, f, x) {
          x = x || yn;
          let w = 0, A = 0, g = e.length, B = t.length, N = false;
          for (; w < g && A < B; ) {
            let X = e[w], F = t[A], $ = r(X, F);
            $ === -1 ? (s(X), w++, N = true) : $ === 1 ? (f(F), A++, N = true) : (x(F, X), w++, A++);
          }
          for (; w < g; )
            s(e[w++]), N = true;
          for (; A < B; )
            f(t[A++]), N = true;
          return N;
        }
        function P5(e) {
          let t = [];
          return xT(e, t, void 0, 0), t;
        }
        function xT(e, t, r, s) {
          for (let f of e[s]) {
            let x;
            r ? (x = r.slice(), x.push(f)) : x = [f], s === e.length - 1 ? t.push(x) : xT(e, t, x, s + 1);
          }
        }
        function D5(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : " ";
          return t <= e.length ? e : r.repeat(t - e.length) + e;
        }
        function k5(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : " ";
          return t <= e.length ? e : e + r.repeat(t - e.length);
        }
        function I5(e, t) {
          if (e) {
            let r = e.length, s = 0;
            for (; s < r && t(e[s]); )
              s++;
            return e.slice(0, s);
          }
        }
        function N5(e, t) {
          if (e) {
            let r = e.length, s = 0;
            for (; s < r && t(e[s]); )
              s++;
            return e.slice(s);
          }
        }
        function O5(e) {
          let t = e.length - 1;
          for (; t >= 0 && os(e.charCodeAt(t)); )
            t--;
          return e.slice(0, t + 1);
        }
        function M5() {
          return typeof cn < "u" && cn.nextTick && !cn.browser && typeof _ == "object";
        }
        var Bt, V1, ET, H1, wT, ni, CT, G1, $1, AT, K1, Ap, Pp, X1, nl, L5 = D({ "src/compiler/core.ts"() {
          nn(), Bt = [], V1 = /* @__PURE__ */ new Map(), ET = /* @__PURE__ */ new Set(), H1 = ((e) => (e[e.None = 0] = "None", e[e.CaseSensitive = 1] = "CaseSensitive", e[e.CaseInsensitive = 2] = "CaseInsensitive", e[e.Both = 3] = "Both", e))(H1 || {}), wT = Array.prototype.at ? (e, t) => e == null ? void 0 : e.at(t) : (e, t) => {
            if (e && (t = po(e, t), t < e.length))
              return e[t];
          }, ni = Object.prototype.hasOwnProperty, CT = { push: yn, length: 0 }, G1 = /[^\u0130\u0131\u00DFa-z0-9\\/:\-_\. ]+/g, $1 = ((e) => (e[e.None = 0] = "None", e[e.Normal = 1] = "Normal", e[e.Aggressive = 2] = "Aggressive", e[e.VeryAggressive = 3] = "VeryAggressive", e))($1 || {}), AT = (() => {
            let e, t, r = A();
            return g;
            function s(B, N, X) {
              if (B === N)
                return 0;
              if (B === void 0)
                return -1;
              if (N === void 0)
                return 1;
              let F = X(B, N);
              return F < 0 ? -1 : F > 0 ? 1 : 0;
            }
            function f(B) {
              let N = new Intl.Collator(B, { usage: "sort", sensitivity: "variant" }).compare;
              return (X, F) => s(X, F, N);
            }
            function x(B) {
              if (B !== void 0)
                return w();
              return (X, F) => s(X, F, N);
              function N(X, F) {
                return X.localeCompare(F);
              }
            }
            function w() {
              return (X, F) => s(X, F, B);
              function B(X, F) {
                return N(X.toUpperCase(), F.toUpperCase()) || N(X, F);
              }
              function N(X, F) {
                return X < F ? -1 : X > F ? 1 : 0;
              }
            }
            function A() {
              return typeof Intl == "object" && typeof Intl.Collator == "function" ? f : typeof String.prototype.localeCompare == "function" && typeof String.prototype.toLocaleUpperCase == "function" && "a".localeCompare("B") < 0 ? x : w;
            }
            function g(B) {
              return B === void 0 ? e || (e = r(B)) : B === "en-US" ? t || (t = r(B)) : r(B);
            }
          })(), Pp = String.prototype.trim ? (e) => e.trim() : (e) => X1(nl(e)), X1 = String.prototype.trimEnd ? (e) => e.trimEnd() : O5, nl = String.prototype.trimStart ? (e) => e.trimStart() : (e) => e.replace(/^\s+/g, "");
        } }), Y1, Y, PT = D({ "src/compiler/debug.ts"() {
          nn(), nn(), Y1 = ((e) => (e[e.Off = 0] = "Off", e[e.Error = 1] = "Error", e[e.Warning = 2] = "Warning", e[e.Info = 3] = "Info", e[e.Verbose = 4] = "Verbose", e))(Y1 || {}), ((e) => {
            let t = 0;
            e.currentLogLevel = 2, e.isDebugging = false;
            function r(ue) {
              return e.currentLogLevel <= ue;
            }
            e.shouldLog = r;
            function s(ue, He) {
              e.loggingHost && r(ue) && e.loggingHost.log(ue, He);
            }
            function f(ue) {
              s(3, ue);
            }
            e.log = f, ((ue) => {
              function He(zt) {
                s(1, zt);
              }
              ue.error = He;
              function _t(zt) {
                s(2, zt);
              }
              ue.warn = _t;
              function ft(zt) {
                s(3, zt);
              }
              ue.log = ft;
              function Kt(zt) {
                s(4, zt);
              }
              ue.trace = Kt;
            })(f = e.log || (e.log = {}));
            let x = {};
            function w() {
              return t;
            }
            e.getAssertionLevel = w;
            function A(ue) {
              let He = t;
              if (t = ue, ue > He)
                for (let _t of ho(x)) {
                  let ft = x[_t];
                  ft !== void 0 && e[_t] !== ft.assertion && ue >= ft.level && (e[_t] = ft, x[_t] = void 0);
                }
            }
            e.setAssertionLevel = A;
            function g(ue) {
              return t >= ue;
            }
            e.shouldAssert = g;
            function B(ue, He) {
              return g(ue) ? true : (x[He] = { level: ue, assertion: e[He] }, e[He] = yn, false);
            }
            function N(ue, He) {
              debugger;
              let _t = new Error(ue ? `Debug Failure. ${ue}` : "Debug Failure.");
              throw Error.captureStackTrace && Error.captureStackTrace(_t, He || N), _t;
            }
            e.fail = N;
            function X(ue, He, _t) {
              return N(`${He || "Unexpected node."}\r
Node ${mr(ue.kind)} was unexpected.`, _t || X);
            }
            e.failBadSyntaxKind = X;
            function F(ue, He, _t, ft) {
              ue || (He = He ? `False expression: ${He}` : "False expression.", _t && (He += `\r
Verbose Debug Information: ` + (typeof _t == "string" ? _t : _t())), N(He, ft || F));
            }
            e.assert = F;
            function $(ue, He, _t, ft, Kt) {
              if (ue !== He) {
                let zt = _t ? ft ? `${_t} ${ft}` : _t : "";
                N(`Expected ${ue} === ${He}. ${zt}`, Kt || $);
              }
            }
            e.assertEqual = $;
            function ae(ue, He, _t, ft) {
              ue >= He && N(`Expected ${ue} < ${He}. ${_t || ""}`, ft || ae);
            }
            e.assertLessThan = ae;
            function Te(ue, He, _t) {
              ue > He && N(`Expected ${ue} <= ${He}`, _t || Te);
            }
            e.assertLessThanOrEqual = Te;
            function Se(ue, He, _t) {
              ue < He && N(`Expected ${ue} >= ${He}`, _t || Se);
            }
            e.assertGreaterThanOrEqual = Se;
            function Ye(ue, He, _t) {
              ue == null && N(He, _t || Ye);
            }
            e.assertIsDefined = Ye;
            function Ne(ue, He, _t) {
              return Ye(ue, He, _t || Ne), ue;
            }
            e.checkDefined = Ne;
            function oe(ue, He, _t) {
              for (let ft of ue)
                Ye(ft, He, _t || oe);
            }
            e.assertEachIsDefined = oe;
            function Ve(ue, He, _t) {
              return oe(ue, He, _t || Ve), ue;
            }
            e.checkEachDefined = Ve;
            function pt(ue) {
              let He = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "Illegal value:", _t = arguments.length > 2 ? arguments[2] : void 0, ft = typeof ue == "object" && Jr(ue, "kind") && Jr(ue, "pos") ? "SyntaxKind: " + mr(ue.kind) : JSON.stringify(ue);
              return N(`${He} ${ft}`, _t || pt);
            }
            e.assertNever = pt;
            function Gt(ue, He, _t, ft) {
              B(1, "assertEachNode") && F(He === void 0 || me(ue, He), _t || "Unexpected node.", () => `Node array did not pass test '${pn(He)}'.`, ft || Gt);
            }
            e.assertEachNode = Gt;
            function Nt(ue, He, _t, ft) {
              B(1, "assertNode") && F(ue !== void 0 && (He === void 0 || He(ue)), _t || "Unexpected node.", () => `Node ${mr(ue == null ? void 0 : ue.kind)} did not pass test '${pn(He)}'.`, ft || Nt);
            }
            e.assertNode = Nt;
            function Xt(ue, He, _t, ft) {
              B(1, "assertNotNode") && F(ue === void 0 || He === void 0 || !He(ue), _t || "Unexpected node.", () => `Node ${mr(ue.kind)} should not have passed test '${pn(He)}'.`, ft || Xt);
            }
            e.assertNotNode = Xt;
            function er(ue, He, _t, ft) {
              B(1, "assertOptionalNode") && F(He === void 0 || ue === void 0 || He(ue), _t || "Unexpected node.", () => `Node ${mr(ue == null ? void 0 : ue.kind)} did not pass test '${pn(He)}'.`, ft || er);
            }
            e.assertOptionalNode = er;
            function Tn(ue, He, _t, ft) {
              B(1, "assertOptionalToken") && F(He === void 0 || ue === void 0 || ue.kind === He, _t || "Unexpected node.", () => `Node ${mr(ue == null ? void 0 : ue.kind)} was not a '${mr(He)}' token.`, ft || Tn);
            }
            e.assertOptionalToken = Tn;
            function Hr(ue, He, _t) {
              B(1, "assertMissingNode") && F(ue === void 0, He || "Unexpected node.", () => `Node ${mr(ue.kind)} was unexpected'.`, _t || Hr);
            }
            e.assertMissingNode = Hr;
            function Gi(ue) {
            }
            e.type = Gi;
            function pn(ue) {
              if (typeof ue != "function")
                return "";
              if (Jr(ue, "name"))
                return ue.name;
              {
                let He = Function.prototype.toString.call(ue), _t = /^function\s+([\w\$]+)\s*\(/.exec(He);
                return _t ? _t[1] : "";
              }
            }
            e.getFunctionName = pn;
            function fn(ue) {
              return `{ name: ${dl(ue.escapedName)}; flags: ${Sn(ue.flags)}; declarations: ${Ze(ue.declarations, (He) => mr(He.kind))} }`;
            }
            e.formatSymbol = fn;
            function Ut() {
              let ue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, He = arguments.length > 1 ? arguments[1] : void 0, _t = arguments.length > 2 ? arguments[2] : void 0, ft = an(He);
              if (ue === 0)
                return ft.length > 0 && ft[0][0] === 0 ? ft[0][1] : "0";
              if (_t) {
                let Kt = [], zt = ue;
                for (let [xe, Le] of ft) {
                  if (xe > ue)
                    break;
                  xe !== 0 && xe & ue && (Kt.push(Le), zt &= ~xe);
                }
                if (zt === 0)
                  return Kt.join("|");
              } else
                for (let [Kt, zt] of ft)
                  if (Kt === ue)
                    return zt;
              return ue.toString();
            }
            e.formatEnum = Ut;
            let kn = /* @__PURE__ */ new Map();
            function an(ue) {
              let He = kn.get(ue);
              if (He)
                return He;
              let _t = [];
              for (let Kt in ue) {
                let zt = ue[Kt];
                typeof zt == "number" && _t.push([zt, Kt]);
              }
              let ft = Ns(_t, (Kt, zt) => Vr(Kt[0], zt[0]));
              return kn.set(ue, ft), ft;
            }
            function mr(ue) {
              return Ut(ue, Np, false);
            }
            e.formatSyntaxKind = mr;
            function $i(ue) {
              return Ut(ue, zp, false);
            }
            e.formatSnippetKind = $i;
            function dn(ue) {
              return Ut(ue, Op, true);
            }
            e.formatNodeFlags = dn;
            function Ur(ue) {
              return Ut(ue, Mp, true);
            }
            e.formatModifierFlags = Ur;
            function Gr(ue) {
              return Ut(ue, Up, true);
            }
            e.formatTransformFlags = Gr;
            function _r(ue) {
              return Ut(ue, Wp, true);
            }
            e.formatEmitFlags = _r;
            function Sn(ue) {
              return Ut(ue, jp, true);
            }
            e.formatSymbolFlags = Sn;
            function In(ue) {
              return Ut(ue, Jp, true);
            }
            e.formatTypeFlags = In;
            function pr(ue) {
              return Ut(ue, Bp, true);
            }
            e.formatSignatureFlags = pr;
            function Zt(ue) {
              return Ut(ue, Fp, true);
            }
            e.formatObjectFlags = Zt;
            function Or(ue) {
              return Ut(ue, il, true);
            }
            e.formatFlowFlags = Or;
            function Nn(ue) {
              return Ut(ue, Lp, true);
            }
            e.formatRelationComparisonResult = Nn;
            function ar(ue) {
              return Ut(ue, CheckMode, true);
            }
            e.formatCheckMode = ar;
            function oi(ue) {
              return Ut(ue, SignatureCheckMode, true);
            }
            e.formatSignatureCheckMode = oi;
            function cr(ue) {
              return Ut(ue, TypeFacts, true);
            }
            e.formatTypeFacts = cr;
            let $r = false, hr;
            function On(ue) {
              "__debugFlowFlags" in ue || Object.defineProperties(ue, { __tsDebuggerDisplay: { value() {
                let He = this.flags & 2 ? "FlowStart" : this.flags & 4 ? "FlowBranchLabel" : this.flags & 8 ? "FlowLoopLabel" : this.flags & 16 ? "FlowAssignment" : this.flags & 32 ? "FlowTrueCondition" : this.flags & 64 ? "FlowFalseCondition" : this.flags & 128 ? "FlowSwitchClause" : this.flags & 256 ? "FlowArrayMutation" : this.flags & 512 ? "FlowCall" : this.flags & 1024 ? "FlowReduceLabel" : this.flags & 1 ? "FlowUnreachable" : "UnknownFlow", _t = this.flags & ~(2048 - 1);
                return `${He}${_t ? ` (${Or(_t)})` : ""}`;
              } }, __debugFlowFlags: { get() {
                return Ut(this.flags, il, true);
              } }, __debugToString: { value() {
                return St(this);
              } } });
            }
            function nr(ue) {
              $r && (typeof Object.setPrototypeOf == "function" ? (hr || (hr = Object.create(Object.prototype), On(hr)), Object.setPrototypeOf(ue, hr)) : On(ue));
            }
            e.attachFlowNodeDebugInfo = nr;
            let br;
            function Kr(ue) {
              "__tsDebuggerDisplay" in ue || Object.defineProperties(ue, { __tsDebuggerDisplay: { value(He) {
                return He = String(He).replace(/(?:,[\s\w\d_]+:[^,]+)+\]$/, "]"), `NodeArray ${He}`;
              } } });
            }
            function wa(ue) {
              $r && (typeof Object.setPrototypeOf == "function" ? (br || (br = Object.create(Array.prototype), Kr(br)), Object.setPrototypeOf(ue, br)) : Kr(ue));
            }
            e.attachNodeArrayDebugInfo = wa;
            function $n() {
              if ($r)
                return;
              let ue = /* @__PURE__ */ new WeakMap(), He = /* @__PURE__ */ new WeakMap();
              Object.defineProperties(lr.getSymbolConstructor().prototype, { __tsDebuggerDisplay: { value() {
                let ft = this.flags & 33554432 ? "TransientSymbol" : "Symbol", Kt = this.flags & -33554433;
                return `${ft} '${rf(this)}'${Kt ? ` (${Sn(Kt)})` : ""}`;
              } }, __debugFlags: { get() {
                return Sn(this.flags);
              } } }), Object.defineProperties(lr.getTypeConstructor().prototype, { __tsDebuggerDisplay: { value() {
                let ft = this.flags & 98304 ? "NullableType" : this.flags & 384 ? `LiteralType ${JSON.stringify(this.value)}` : this.flags & 2048 ? `LiteralType ${this.value.negative ? "-" : ""}${this.value.base10Value}n` : this.flags & 8192 ? "UniqueESSymbolType" : this.flags & 32 ? "EnumType" : this.flags & 67359327 ? `IntrinsicType ${this.intrinsicName}` : this.flags & 1048576 ? "UnionType" : this.flags & 2097152 ? "IntersectionType" : this.flags & 4194304 ? "IndexType" : this.flags & 8388608 ? "IndexedAccessType" : this.flags & 16777216 ? "ConditionalType" : this.flags & 33554432 ? "SubstitutionType" : this.flags & 262144 ? "TypeParameter" : this.flags & 524288 ? this.objectFlags & 3 ? "InterfaceType" : this.objectFlags & 4 ? "TypeReference" : this.objectFlags & 8 ? "TupleType" : this.objectFlags & 16 ? "AnonymousType" : this.objectFlags & 32 ? "MappedType" : this.objectFlags & 1024 ? "ReverseMappedType" : this.objectFlags & 256 ? "EvolvingArrayType" : "ObjectType" : "Type", Kt = this.flags & 524288 ? this.objectFlags & -1344 : 0;
                return `${ft}${this.symbol ? ` '${rf(this.symbol)}'` : ""}${Kt ? ` (${Zt(Kt)})` : ""}`;
              } }, __debugFlags: { get() {
                return In(this.flags);
              } }, __debugObjectFlags: { get() {
                return this.flags & 524288 ? Zt(this.objectFlags) : "";
              } }, __debugTypeToString: { value() {
                let ft = ue.get(this);
                return ft === void 0 && (ft = this.checker.typeToString(this), ue.set(this, ft)), ft;
              } } }), Object.defineProperties(lr.getSignatureConstructor().prototype, { __debugFlags: { get() {
                return pr(this.flags);
              } }, __debugSignatureToString: { value() {
                var ft;
                return (ft = this.checker) == null ? void 0 : ft.signatureToString(this);
              } } });
              let _t = [lr.getNodeConstructor(), lr.getIdentifierConstructor(), lr.getTokenConstructor(), lr.getSourceFileConstructor()];
              for (let ft of _t)
                Jr(ft.prototype, "__debugKind") || Object.defineProperties(ft.prototype, { __tsDebuggerDisplay: { value() {
                  return `${cs(this) ? "GeneratedIdentifier" : yt(this) ? `Identifier '${qr(this)}'` : vn(this) ? `PrivateIdentifier '${qr(this)}'` : Gn(this) ? `StringLiteral ${JSON.stringify(this.text.length < 10 ? this.text : this.text.slice(10) + "...")}` : zs(this) ? `NumericLiteral ${this.text}` : Uv(this) ? `BigIntLiteral ${this.text}n` : Fo(this) ? "TypeParameterDeclaration" : Vs(this) ? "ParameterDeclaration" : nc(this) ? "ConstructorDeclaration" : Gl(this) ? "GetAccessorDeclaration" : ic(this) ? "SetAccessorDeclaration" : Vv(this) ? "CallSignatureDeclaration" : R8(this) ? "ConstructSignatureDeclaration" : Hv(this) ? "IndexSignatureDeclaration" : j8(this) ? "TypePredicateNode" : ac(this) ? "TypeReferenceNode" : $l(this) ? "FunctionTypeNode" : Gv(this) ? "ConstructorTypeNode" : J8(this) ? "TypeQueryNode" : id(this) ? "TypeLiteralNode" : F8(this) ? "ArrayTypeNode" : B8(this) ? "TupleTypeNode" : q8(this) ? "OptionalTypeNode" : U8(this) ? "RestTypeNode" : z8(this) ? "UnionTypeNode" : W8(this) ? "IntersectionTypeNode" : V8(this) ? "ConditionalTypeNode" : H8(this) ? "InferTypeNode" : Kv(this) ? "ParenthesizedTypeNode" : Xv(this) ? "ThisTypeNode" : G8(this) ? "TypeOperatorNode" : $8(this) ? "IndexedAccessTypeNode" : K8(this) ? "MappedTypeNode" : Yv(this) ? "LiteralTypeNode" : $v(this) ? "NamedTupleMember" : Kl(this) ? "ImportTypeNode" : mr(this.kind)}${this.flags ? ` (${dn(this.flags)})` : ""}`;
                } }, __debugKind: { get() {
                  return mr(this.kind);
                } }, __debugNodeFlags: { get() {
                  return dn(this.flags);
                } }, __debugModifierFlags: { get() {
                  return Ur(Y4(this));
                } }, __debugTransformFlags: { get() {
                  return Gr(this.transformFlags);
                } }, __debugIsParseTreeNode: { get() {
                  return pl(this);
                } }, __debugEmitFlags: { get() {
                  return _r(xi(this));
                } }, __debugGetText: { value(Kt) {
                  if (fs(this))
                    return "";
                  let zt = He.get(this);
                  if (zt === void 0) {
                    let xe = fl(this), Le = xe && Si(xe);
                    zt = Le ? No(Le, xe, Kt) : "", He.set(this, zt);
                  }
                  return zt;
                } } });
              $r = true;
            }
            e.enableDebugInfo = $n;
            function Ki(ue) {
              let He = ue & 7, _t = He === 0 ? "in out" : He === 3 ? "[bivariant]" : He === 2 ? "in" : He === 1 ? "out" : He === 4 ? "[independent]" : "";
              return ue & 8 ? _t += " (unmeasurable)" : ue & 16 && (_t += " (unreliable)"), _t;
            }
            e.formatVariance = Ki;
            class Mn {
              __debugToString() {
                var He;
                switch (this.kind) {
                  case 3:
                    return ((He = this.debugInfo) == null ? void 0 : He.call(this)) || "(function mapper)";
                  case 0:
                    return `${this.source.__debugTypeToString()} -> ${this.target.__debugTypeToString()}`;
                  case 1:
                    return ce(this.sources, this.targets || Ze(this.sources, () => "any"), (_t, ft) => `${_t.__debugTypeToString()} -> ${typeof ft == "string" ? ft : ft.__debugTypeToString()}`).join(", ");
                  case 2:
                    return ce(this.sources, this.targets, (_t, ft) => `${_t.__debugTypeToString()} -> ${ft().__debugTypeToString()}`).join(", ");
                  case 5:
                  case 4:
                    return `m1: ${this.mapper1.__debugToString().split(`
`).join(`
    `)}
m2: ${this.mapper2.__debugToString().split(`
`).join(`
    `)}`;
                  default:
                    return pt(this);
                }
              }
            }
            e.DebugTypeMapper = Mn;
            function _i(ue) {
              return e.isDebugging ? Object.setPrototypeOf(ue, Mn.prototype) : ue;
            }
            e.attachDebugPrototypeIfDebug = _i;
            function Ca(ue) {
              return console.log(St(ue));
            }
            e.printControlFlowGraph = Ca;
            function St(ue) {
              let He = -1;
              function _t(U) {
                return U.id || (U.id = He, He--), U.id;
              }
              let ft;
              ((U) => {
                U.lr = "─", U.ud = "│", U.dr = "╭", U.dl = "╮", U.ul = "╯", U.ur = "╰", U.udr = "├", U.udl = "┤", U.dlr = "┬", U.ulr = "┴", U.udlr = "╫";
              })(ft || (ft = {}));
              let Kt;
              ((U) => {
                U[U.None = 0] = "None", U[U.Up = 1] = "Up", U[U.Down = 2] = "Down", U[U.Left = 4] = "Left", U[U.Right = 8] = "Right", U[U.UpDown = 3] = "UpDown", U[U.LeftRight = 12] = "LeftRight", U[U.UpLeft = 5] = "UpLeft", U[U.UpRight = 9] = "UpRight", U[U.DownLeft = 6] = "DownLeft", U[U.DownRight = 10] = "DownRight", U[U.UpDownLeft = 7] = "UpDownLeft", U[U.UpDownRight = 11] = "UpDownRight", U[U.UpLeftRight = 13] = "UpLeftRight", U[U.DownLeftRight = 14] = "DownLeftRight", U[U.UpDownLeftRight = 15] = "UpDownLeftRight", U[U.NoChildren = 16] = "NoChildren";
              })(Kt || (Kt = {}));
              let zt = 2032, xe = 882, Le = /* @__PURE__ */ Object.create(null), Re = [], Ct = Aa(ue, /* @__PURE__ */ new Set());
              for (let U of Re)
                U.text = xn(U.flowNode, U.circular), $s(U);
              let Mt = li(Ct), It = Yi(Mt);
              return Qi(Ct, 0), Dt();
              function Mr(U) {
                return !!(U.flags & 128);
              }
              function gr(U) {
                return !!(U.flags & 12) && !!U.antecedents;
              }
              function Ln(U) {
                return !!(U.flags & zt);
              }
              function ys(U) {
                return !!(U.flags & xe);
              }
              function ci(U) {
                let L = [];
                for (let fe of U.edges)
                  fe.source === U && L.push(fe.target);
                return L;
              }
              function Xi(U) {
                let L = [];
                for (let fe of U.edges)
                  fe.target === U && L.push(fe.source);
                return L;
              }
              function Aa(U, L) {
                let fe = _t(U), T = Le[fe];
                if (T && L.has(U))
                  return T.circular = true, T = { id: -1, flowNode: U, edges: [], text: "", lane: -1, endLane: -1, level: -1, circular: "circularity" }, Re.push(T), T;
                if (L.add(U), !T)
                  if (Le[fe] = T = { id: fe, flowNode: U, edges: [], text: "", lane: -1, endLane: -1, level: -1, circular: false }, Re.push(T), gr(U))
                    for (let it of U.antecedents)
                      vs(T, it, L);
                  else
                    Ln(U) && vs(T, U.antecedent, L);
                return L.delete(U), T;
              }
              function vs(U, L, fe) {
                let T = Aa(L, fe), it = { source: U, target: T };
                U.edges.push(it), T.edges.push(it);
              }
              function $s(U) {
                if (U.level !== -1)
                  return U.level;
                let L = 0;
                for (let fe of Xi(U))
                  L = Math.max(L, $s(fe) + 1);
                return U.level = L;
              }
              function li(U) {
                let L = 0;
                for (let fe of ci(U))
                  L = Math.max(L, li(fe));
                return L + 1;
              }
              function Yi(U) {
                let L = Z(Array(U), 0);
                for (let fe of Re)
                  L[fe.level] = Math.max(L[fe.level], fe.text.length);
                return L;
              }
              function Qi(U, L) {
                if (U.lane === -1) {
                  U.lane = L, U.endLane = L;
                  let fe = ci(U);
                  for (let T = 0; T < fe.length; T++) {
                    T > 0 && L++;
                    let it = fe[T];
                    Qi(it, L), it.endLane > U.endLane && (L = it.endLane);
                  }
                  U.endLane = L;
                }
              }
              function bs(U) {
                if (U & 2)
                  return "Start";
                if (U & 4)
                  return "Branch";
                if (U & 8)
                  return "Loop";
                if (U & 16)
                  return "Assignment";
                if (U & 32)
                  return "True";
                if (U & 64)
                  return "False";
                if (U & 128)
                  return "SwitchClause";
                if (U & 256)
                  return "ArrayMutation";
                if (U & 512)
                  return "Call";
                if (U & 1024)
                  return "ReduceLabel";
                if (U & 1)
                  return "Unreachable";
                throw new Error();
              }
              function Ai(U) {
                let L = Si(U);
                return No(L, U, false);
              }
              function xn(U, L) {
                let fe = bs(U.flags);
                if (L && (fe = `${fe}#${_t(U)}`), ys(U))
                  U.node && (fe += ` (${Ai(U.node)})`);
                else if (Mr(U)) {
                  let T = [];
                  for (let it = U.clauseStart; it < U.clauseEnd; it++) {
                    let mt = U.switchStatement.caseBlock.clauses[it];
                    oE(mt) ? T.push("default") : T.push(Ai(mt.expression));
                  }
                  fe += ` (${T.join(", ")})`;
                }
                return L === "circularity" ? `Circular(${fe})` : fe;
              }
              function Dt() {
                let U = It.length, L = Re.reduce((_e, Ge) => Math.max(_e, Ge.lane), 0) + 1, fe = Z(Array(L), ""), T = It.map(() => Array(L)), it = It.map(() => Z(Array(L), 0));
                for (let _e of Re) {
                  T[_e.level][_e.lane] = _e;
                  let Ge = ci(_e);
                  for (let jt = 0; jt < Ge.length; jt++) {
                    let Yt = Ge[jt], $t = 8;
                    Yt.lane === _e.lane && ($t |= 4), jt > 0 && ($t |= 1), jt < Ge.length - 1 && ($t |= 2), it[_e.level][Yt.lane] |= $t;
                  }
                  Ge.length === 0 && (it[_e.level][_e.lane] |= 16);
                  let bt = Xi(_e);
                  for (let jt = 0; jt < bt.length; jt++) {
                    let Yt = bt[jt], $t = 4;
                    jt > 0 && ($t |= 1), jt < bt.length - 1 && ($t |= 2), it[_e.level - 1][Yt.lane] |= $t;
                  }
                }
                for (let _e = 0; _e < U; _e++)
                  for (let Ge = 0; Ge < L; Ge++) {
                    let bt = _e > 0 ? it[_e - 1][Ge] : 0, jt = Ge > 0 ? it[_e][Ge - 1] : 0, Yt = it[_e][Ge];
                    Yt || (bt & 8 && (Yt |= 12), jt & 2 && (Yt |= 3), it[_e][Ge] = Yt);
                  }
                for (let _e = 0; _e < U; _e++)
                  for (let Ge = 0; Ge < fe.length; Ge++) {
                    let bt = it[_e][Ge], jt = bt & 4 ? "─" : " ", Yt = T[_e][Ge];
                    Yt ? (mt(Ge, Yt.text), _e < U - 1 && (mt(Ge, " "), mt(Ge, ie(jt, It[_e] - Yt.text.length)))) : _e < U - 1 && mt(Ge, ie(jt, It[_e] + 1)), mt(Ge, Pi(bt)), mt(Ge, bt & 8 && _e < U - 1 && !T[_e + 1][Ge] ? "─" : " ");
                  }
                return `
${fe.join(`
`)}
`;
                function mt(_e, Ge) {
                  fe[_e] += Ge;
                }
              }
              function Pi(U) {
                switch (U) {
                  case 3:
                    return "│";
                  case 12:
                    return "─";
                  case 5:
                    return "╯";
                  case 9:
                    return "╰";
                  case 6:
                    return "╮";
                  case 10:
                    return "╭";
                  case 7:
                    return "┤";
                  case 11:
                    return "├";
                  case 13:
                    return "┴";
                  case 14:
                    return "┬";
                  case 15:
                    return "╫";
                }
                return " ";
              }
              function Z(U, L) {
                if (U.fill)
                  U.fill(L);
                else
                  for (let fe = 0; fe < U.length; fe++)
                    U[fe] = L;
                return U;
              }
              function ie(U, L) {
                if (U.repeat)
                  return L > 0 ? U.repeat(L) : "";
                let fe = "";
                for (; fe.length < L; )
                  fe += U;
                return fe;
              }
            }
            e.formatControlFlowGraph = St;
          })(Y || (Y = {}));
        } }), J5 = () => {
        }, ts = Date.now, Dp = new Proxy(() => {
        }, { get: () => Dp });
        var rs;
        function z5(e) {
          let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true, r = qp[e.category];
          return t ? r.toLowerCase() : r;
        }
        var Np, Op, Mp, tg, Lp, rg, ng, il, ig, Rp, ag, sg, og, _g, cg, lg, ug, pg, fg, dg, mg, hg, gg, yg, vg, jp, bg, Tg, Sg, xg, Jp, Fp, Eg, wg, Cg, Ag, Pg, Bp, Dg, kg, Ig, Ng, Og, Mg, qp, Lg, Rg, jg, Jg, Fg, Bg, qg, Ug, zg, Wg, Vg, Hg, Gg, $g, Kg, Up, zp, Wp, Xg, Yg, Qg, Zg, ey, ty, ry, ny, Vp, NT = D({ "src/compiler/types.ts"() {
          Np = ((e) => (e[e.Unknown = 0] = "Unknown", e[e.EndOfFileToken = 1] = "EndOfFileToken", e[e.SingleLineCommentTrivia = 2] = "SingleLineCommentTrivia", e[e.MultiLineCommentTrivia = 3] = "MultiLineCommentTrivia", e[e.NewLineTrivia = 4] = "NewLineTrivia", e[e.WhitespaceTrivia = 5] = "WhitespaceTrivia", e[e.ShebangTrivia = 6] = "ShebangTrivia", e[e.ConflictMarkerTrivia = 7] = "ConflictMarkerTrivia", e[e.NumericLiteral = 8] = "NumericLiteral", e[e.BigIntLiteral = 9] = "BigIntLiteral", e[e.StringLiteral = 10] = "StringLiteral", e[e.JsxText = 11] = "JsxText", e[e.JsxTextAllWhiteSpaces = 12] = "JsxTextAllWhiteSpaces", e[e.RegularExpressionLiteral = 13] = "RegularExpressionLiteral", e[e.NoSubstitutionTemplateLiteral = 14] = "NoSubstitutionTemplateLiteral", e[e.TemplateHead = 15] = "TemplateHead", e[e.TemplateMiddle = 16] = "TemplateMiddle", e[e.TemplateTail = 17] = "TemplateTail", e[e.OpenBraceToken = 18] = "OpenBraceToken", e[e.CloseBraceToken = 19] = "CloseBraceToken", e[e.OpenParenToken = 20] = "OpenParenToken", e[e.CloseParenToken = 21] = "CloseParenToken", e[e.OpenBracketToken = 22] = "OpenBracketToken", e[e.CloseBracketToken = 23] = "CloseBracketToken", e[e.DotToken = 24] = "DotToken", e[e.DotDotDotToken = 25] = "DotDotDotToken", e[e.SemicolonToken = 26] = "SemicolonToken", e[e.CommaToken = 27] = "CommaToken", e[e.QuestionDotToken = 28] = "QuestionDotToken", e[e.LessThanToken = 29] = "LessThanToken", e[e.LessThanSlashToken = 30] = "LessThanSlashToken", e[e.GreaterThanToken = 31] = "GreaterThanToken", e[e.LessThanEqualsToken = 32] = "LessThanEqualsToken", e[e.GreaterThanEqualsToken = 33] = "GreaterThanEqualsToken", e[e.EqualsEqualsToken = 34] = "EqualsEqualsToken", e[e.ExclamationEqualsToken = 35] = "ExclamationEqualsToken", e[e.EqualsEqualsEqualsToken = 36] = "EqualsEqualsEqualsToken", e[e.ExclamationEqualsEqualsToken = 37] = "ExclamationEqualsEqualsToken", e[e.EqualsGreaterThanToken = 38] = "EqualsGreaterThanToken", e[e.PlusToken = 39] = "PlusToken", e[e.MinusToken = 40] = "MinusToken", e[e.AsteriskToken = 41] = "AsteriskToken", e[e.AsteriskAsteriskToken = 42] = "AsteriskAsteriskToken", e[e.SlashToken = 43] = "SlashToken", e[e.PercentToken = 44] = "PercentToken", e[e.PlusPlusToken = 45] = "PlusPlusToken", e[e.MinusMinusToken = 46] = "MinusMinusToken", e[e.LessThanLessThanToken = 47] = "LessThanLessThanToken", e[e.GreaterThanGreaterThanToken = 48] = "GreaterThanGreaterThanToken", e[e.GreaterThanGreaterThanGreaterThanToken = 49] = "GreaterThanGreaterThanGreaterThanToken", e[e.AmpersandToken = 50] = "AmpersandToken", e[e.BarToken = 51] = "BarToken", e[e.CaretToken = 52] = "CaretToken", e[e.ExclamationToken = 53] = "ExclamationToken", e[e.TildeToken = 54] = "TildeToken", e[e.AmpersandAmpersandToken = 55] = "AmpersandAmpersandToken", e[e.BarBarToken = 56] = "BarBarToken", e[e.QuestionToken = 57] = "QuestionToken", e[e.ColonToken = 58] = "ColonToken", e[e.AtToken = 59] = "AtToken", e[e.QuestionQuestionToken = 60] = "QuestionQuestionToken", e[e.BacktickToken = 61] = "BacktickToken", e[e.HashToken = 62] = "HashToken", e[e.EqualsToken = 63] = "EqualsToken", e[e.PlusEqualsToken = 64] = "PlusEqualsToken", e[e.MinusEqualsToken = 65] = "MinusEqualsToken", e[e.AsteriskEqualsToken = 66] = "AsteriskEqualsToken", e[e.AsteriskAsteriskEqualsToken = 67] = "AsteriskAsteriskEqualsToken", e[e.SlashEqualsToken = 68] = "SlashEqualsToken", e[e.PercentEqualsToken = 69] = "PercentEqualsToken", e[e.LessThanLessThanEqualsToken = 70] = "LessThanLessThanEqualsToken", e[e.GreaterThanGreaterThanEqualsToken = 71] = "GreaterThanGreaterThanEqualsToken", e[e.GreaterThanGreaterThanGreaterThanEqualsToken = 72] = "GreaterThanGreaterThanGreaterThanEqualsToken", e[e.AmpersandEqualsToken = 73] = "AmpersandEqualsToken", e[e.BarEqualsToken = 74] = "BarEqualsToken", e[e.BarBarEqualsToken = 75] = "BarBarEqualsToken", e[e.AmpersandAmpersandEqualsToken = 76] = "AmpersandAmpersandEqualsToken", e[e.QuestionQuestionEqualsToken = 77] = "QuestionQuestionEqualsToken", e[e.CaretEqualsToken = 78] = "CaretEqualsToken", e[e.Identifier = 79] = "Identifier", e[e.PrivateIdentifier = 80] = "PrivateIdentifier", e[e.BreakKeyword = 81] = "BreakKeyword", e[e.CaseKeyword = 82] = "CaseKeyword", e[e.CatchKeyword = 83] = "CatchKeyword", e[e.ClassKeyword = 84] = "ClassKeyword", e[e.ConstKeyword = 85] = "ConstKeyword", e[e.ContinueKeyword = 86] = "ContinueKeyword", e[e.DebuggerKeyword = 87] = "DebuggerKeyword", e[e.DefaultKeyword = 88] = "DefaultKeyword", e[e.DeleteKeyword = 89] = "DeleteKeyword", e[e.DoKeyword = 90] = "DoKeyword", e[e.ElseKeyword = 91] = "ElseKeyword", e[e.EnumKeyword = 92] = "EnumKeyword", e[e.ExportKeyword = 93] = "ExportKeyword", e[e.ExtendsKeyword = 94] = "ExtendsKeyword", e[e.FalseKeyword = 95] = "FalseKeyword", e[e.FinallyKeyword = 96] = "FinallyKeyword", e[e.ForKeyword = 97] = "ForKeyword", e[e.FunctionKeyword = 98] = "FunctionKeyword", e[e.IfKeyword = 99] = "IfKeyword", e[e.ImportKeyword = 100] = "ImportKeyword", e[e.InKeyword = 101] = "InKeyword", e[e.InstanceOfKeyword = 102] = "InstanceOfKeyword", e[e.NewKeyword = 103] = "NewKeyword", e[e.NullKeyword = 104] = "NullKeyword", e[e.ReturnKeyword = 105] = "ReturnKeyword", e[e.SuperKeyword = 106] = "SuperKeyword", e[e.SwitchKeyword = 107] = "SwitchKeyword", e[e.ThisKeyword = 108] = "ThisKeyword", e[e.ThrowKeyword = 109] = "ThrowKeyword", e[e.TrueKeyword = 110] = "TrueKeyword", e[e.TryKeyword = 111] = "TryKeyword", e[e.TypeOfKeyword = 112] = "TypeOfKeyword", e[e.VarKeyword = 113] = "VarKeyword", e[e.VoidKeyword = 114] = "VoidKeyword", e[e.WhileKeyword = 115] = "WhileKeyword", e[e.WithKeyword = 116] = "WithKeyword", e[e.ImplementsKeyword = 117] = "ImplementsKeyword", e[e.InterfaceKeyword = 118] = "InterfaceKeyword", e[e.LetKeyword = 119] = "LetKeyword", e[e.PackageKeyword = 120] = "PackageKeyword", e[e.PrivateKeyword = 121] = "PrivateKeyword", e[e.ProtectedKeyword = 122] = "ProtectedKeyword", e[e.PublicKeyword = 123] = "PublicKeyword", e[e.StaticKeyword = 124] = "StaticKeyword", e[e.YieldKeyword = 125] = "YieldKeyword", e[e.AbstractKeyword = 126] = "AbstractKeyword", e[e.AccessorKeyword = 127] = "AccessorKeyword", e[e.AsKeyword = 128] = "AsKeyword", e[e.AssertsKeyword = 129] = "AssertsKeyword", e[e.AssertKeyword = 130] = "AssertKeyword", e[e.AnyKeyword = 131] = "AnyKeyword", e[e.AsyncKeyword = 132] = "AsyncKeyword", e[e.AwaitKeyword = 133] = "AwaitKeyword", e[e.BooleanKeyword = 134] = "BooleanKeyword", e[e.ConstructorKeyword = 135] = "ConstructorKeyword", e[e.DeclareKeyword = 136] = "DeclareKeyword", e[e.GetKeyword = 137] = "GetKeyword", e[e.InferKeyword = 138] = "InferKeyword", e[e.IntrinsicKeyword = 139] = "IntrinsicKeyword", e[e.IsKeyword = 140] = "IsKeyword", e[e.KeyOfKeyword = 141] = "KeyOfKeyword", e[e.ModuleKeyword = 142] = "ModuleKeyword", e[e.NamespaceKeyword = 143] = "NamespaceKeyword", e[e.NeverKeyword = 144] = "NeverKeyword", e[e.OutKeyword = 145] = "OutKeyword", e[e.ReadonlyKeyword = 146] = "ReadonlyKeyword", e[e.RequireKeyword = 147] = "RequireKeyword", e[e.NumberKeyword = 148] = "NumberKeyword", e[e.ObjectKeyword = 149] = "ObjectKeyword", e[e.SatisfiesKeyword = 150] = "SatisfiesKeyword", e[e.SetKeyword = 151] = "SetKeyword", e[e.StringKeyword = 152] = "StringKeyword", e[e.SymbolKeyword = 153] = "SymbolKeyword", e[e.TypeKeyword = 154] = "TypeKeyword", e[e.UndefinedKeyword = 155] = "UndefinedKeyword", e[e.UniqueKeyword = 156] = "UniqueKeyword", e[e.UnknownKeyword = 157] = "UnknownKeyword", e[e.FromKeyword = 158] = "FromKeyword", e[e.GlobalKeyword = 159] = "GlobalKeyword", e[e.BigIntKeyword = 160] = "BigIntKeyword", e[e.OverrideKeyword = 161] = "OverrideKeyword", e[e.OfKeyword = 162] = "OfKeyword", e[e.QualifiedName = 163] = "QualifiedName", e[e.ComputedPropertyName = 164] = "ComputedPropertyName", e[e.TypeParameter = 165] = "TypeParameter", e[e.Parameter = 166] = "Parameter", e[e.Decorator = 167] = "Decorator", e[e.PropertySignature = 168] = "PropertySignature", e[e.PropertyDeclaration = 169] = "PropertyDeclaration", e[e.MethodSignature = 170] = "MethodSignature", e[e.MethodDeclaration = 171] = "MethodDeclaration", e[e.ClassStaticBlockDeclaration = 172] = "ClassStaticBlockDeclaration", e[e.Constructor = 173] = "Constructor", e[e.GetAccessor = 174] = "GetAccessor", e[e.SetAccessor = 175] = "SetAccessor", e[e.CallSignature = 176] = "CallSignature", e[e.ConstructSignature = 177] = "ConstructSignature", e[e.IndexSignature = 178] = "IndexSignature", e[e.TypePredicate = 179] = "TypePredicate", e[e.TypeReference = 180] = "TypeReference", e[e.FunctionType = 181] = "FunctionType", e[e.ConstructorType = 182] = "ConstructorType", e[e.TypeQuery = 183] = "TypeQuery", e[e.TypeLiteral = 184] = "TypeLiteral", e[e.ArrayType = 185] = "ArrayType", e[e.TupleType = 186] = "TupleType", e[e.OptionalType = 187] = "OptionalType", e[e.RestType = 188] = "RestType", e[e.UnionType = 189] = "UnionType", e[e.IntersectionType = 190] = "IntersectionType", e[e.ConditionalType = 191] = "ConditionalType", e[e.InferType = 192] = "InferType", e[e.ParenthesizedType = 193] = "ParenthesizedType", e[e.ThisType = 194] = "ThisType", e[e.TypeOperator = 195] = "TypeOperator", e[e.IndexedAccessType = 196] = "IndexedAccessType", e[e.MappedType = 197] = "MappedType", e[e.LiteralType = 198] = "LiteralType", e[e.NamedTupleMember = 199] = "NamedTupleMember", e[e.TemplateLiteralType = 200] = "TemplateLiteralType", e[e.TemplateLiteralTypeSpan = 201] = "TemplateLiteralTypeSpan", e[e.ImportType = 202] = "ImportType", e[e.ObjectBindingPattern = 203] = "ObjectBindingPattern", e[e.ArrayBindingPattern = 204] = "ArrayBindingPattern", e[e.BindingElement = 205] = "BindingElement", e[e.ArrayLiteralExpression = 206] = "ArrayLiteralExpression", e[e.ObjectLiteralExpression = 207] = "ObjectLiteralExpression", e[e.PropertyAccessExpression = 208] = "PropertyAccessExpression", e[e.ElementAccessExpression = 209] = "ElementAccessExpression", e[e.CallExpression = 210] = "CallExpression", e[e.NewExpression = 211] = "NewExpression", e[e.TaggedTemplateExpression = 212] = "TaggedTemplateExpression", e[e.TypeAssertionExpression = 213] = "TypeAssertionExpression", e[e.ParenthesizedExpression = 214] = "ParenthesizedExpression", e[e.FunctionExpression = 215] = "FunctionExpression", e[e.ArrowFunction = 216] = "ArrowFunction", e[e.DeleteExpression = 217] = "DeleteExpression", e[e.TypeOfExpression = 218] = "TypeOfExpression", e[e.VoidExpression = 219] = "VoidExpression", e[e.AwaitExpression = 220] = "AwaitExpression", e[e.PrefixUnaryExpression = 221] = "PrefixUnaryExpression", e[e.PostfixUnaryExpression = 222] = "PostfixUnaryExpression", e[e.BinaryExpression = 223] = "BinaryExpression", e[e.ConditionalExpression = 224] = "ConditionalExpression", e[e.TemplateExpression = 225] = "TemplateExpression", e[e.YieldExpression = 226] = "YieldExpression", e[e.SpreadElement = 227] = "SpreadElement", e[e.ClassExpression = 228] = "ClassExpression", e[e.OmittedExpression = 229] = "OmittedExpression", e[e.ExpressionWithTypeArguments = 230] = "ExpressionWithTypeArguments", e[e.AsExpression = 231] = "AsExpression", e[e.NonNullExpression = 232] = "NonNullExpression", e[e.MetaProperty = 233] = "MetaProperty", e[e.SyntheticExpression = 234] = "SyntheticExpression", e[e.SatisfiesExpression = 235] = "SatisfiesExpression", e[e.TemplateSpan = 236] = "TemplateSpan", e[e.SemicolonClassElement = 237] = "SemicolonClassElement", e[e.Block = 238] = "Block", e[e.EmptyStatement = 239] = "EmptyStatement", e[e.VariableStatement = 240] = "VariableStatement", e[e.ExpressionStatement = 241] = "ExpressionStatement", e[e.IfStatement = 242] = "IfStatement", e[e.DoStatement = 243] = "DoStatement", e[e.WhileStatement = 244] = "WhileStatement", e[e.ForStatement = 245] = "ForStatement", e[e.ForInStatement = 246] = "ForInStatement", e[e.ForOfStatement = 247] = "ForOfStatement", e[e.ContinueStatement = 248] = "ContinueStatement", e[e.BreakStatement = 249] = "BreakStatement", e[e.ReturnStatement = 250] = "ReturnStatement", e[e.WithStatement = 251] = "WithStatement", e[e.SwitchStatement = 252] = "SwitchStatement", e[e.LabeledStatement = 253] = "LabeledStatement", e[e.ThrowStatement = 254] = "ThrowStatement", e[e.TryStatement = 255] = "TryStatement", e[e.DebuggerStatement = 256] = "DebuggerStatement", e[e.VariableDeclaration = 257] = "VariableDeclaration", e[e.VariableDeclarationList = 258] = "VariableDeclarationList", e[e.FunctionDeclaration = 259] = "FunctionDeclaration", e[e.ClassDeclaration = 260] = "ClassDeclaration", e[e.InterfaceDeclaration = 261] = "InterfaceDeclaration", e[e.TypeAliasDeclaration = 262] = "TypeAliasDeclaration", e[e.EnumDeclaration = 263] = "EnumDeclaration", e[e.ModuleDeclaration = 264] = "ModuleDeclaration", e[e.ModuleBlock = 265] = "ModuleBlock", e[e.CaseBlock = 266] = "CaseBlock", e[e.NamespaceExportDeclaration = 267] = "NamespaceExportDeclaration", e[e.ImportEqualsDeclaration = 268] = "ImportEqualsDeclaration", e[e.ImportDeclaration = 269] = "ImportDeclaration", e[e.ImportClause = 270] = "ImportClause", e[e.NamespaceImport = 271] = "NamespaceImport", e[e.NamedImports = 272] = "NamedImports", e[e.ImportSpecifier = 273] = "ImportSpecifier", e[e.ExportAssignment = 274] = "ExportAssignment", e[e.ExportDeclaration = 275] = "ExportDeclaration", e[e.NamedExports = 276] = "NamedExports", e[e.NamespaceExport = 277] = "NamespaceExport", e[e.ExportSpecifier = 278] = "ExportSpecifier", e[e.MissingDeclaration = 279] = "MissingDeclaration", e[e.ExternalModuleReference = 280] = "ExternalModuleReference", e[e.JsxElement = 281] = "JsxElement", e[e.JsxSelfClosingElement = 282] = "JsxSelfClosingElement", e[e.JsxOpeningElement = 283] = "JsxOpeningElement", e[e.JsxClosingElement = 284] = "JsxClosingElement", e[e.JsxFragment = 285] = "JsxFragment", e[e.JsxOpeningFragment = 286] = "JsxOpeningFragment", e[e.JsxClosingFragment = 287] = "JsxClosingFragment", e[e.JsxAttribute = 288] = "JsxAttribute", e[e.JsxAttributes = 289] = "JsxAttributes", e[e.JsxSpreadAttribute = 290] = "JsxSpreadAttribute", e[e.JsxExpression = 291] = "JsxExpression", e[e.CaseClause = 292] = "CaseClause", e[e.DefaultClause = 293] = "DefaultClause", e[e.HeritageClause = 294] = "HeritageClause", e[e.CatchClause = 295] = "CatchClause", e[e.AssertClause = 296] = "AssertClause", e[e.AssertEntry = 297] = "AssertEntry", e[e.ImportTypeAssertionContainer = 298] = "ImportTypeAssertionContainer", e[e.PropertyAssignment = 299] = "PropertyAssignment", e[e.ShorthandPropertyAssignment = 300] = "ShorthandPropertyAssignment", e[e.SpreadAssignment = 301] = "SpreadAssignment", e[e.EnumMember = 302] = "EnumMember", e[e.UnparsedPrologue = 303] = "UnparsedPrologue", e[e.UnparsedPrepend = 304] = "UnparsedPrepend", e[e.UnparsedText = 305] = "UnparsedText", e[e.UnparsedInternalText = 306] = "UnparsedInternalText", e[e.UnparsedSyntheticReference = 307] = "UnparsedSyntheticReference", e[e.SourceFile = 308] = "SourceFile", e[e.Bundle = 309] = "Bundle", e[e.UnparsedSource = 310] = "UnparsedSource", e[e.InputFiles = 311] = "InputFiles", e[e.JSDocTypeExpression = 312] = "JSDocTypeExpression", e[e.JSDocNameReference = 313] = "JSDocNameReference", e[e.JSDocMemberName = 314] = "JSDocMemberName", e[e.JSDocAllType = 315] = "JSDocAllType", e[e.JSDocUnknownType = 316] = "JSDocUnknownType", e[e.JSDocNullableType = 317] = "JSDocNullableType", e[e.JSDocNonNullableType = 318] = "JSDocNonNullableType", e[e.JSDocOptionalType = 319] = "JSDocOptionalType", e[e.JSDocFunctionType = 320] = "JSDocFunctionType", e[e.JSDocVariadicType = 321] = "JSDocVariadicType", e[e.JSDocNamepathType = 322] = "JSDocNamepathType", e[e.JSDoc = 323] = "JSDoc", e[e.JSDocComment = 323] = "JSDocComment", e[e.JSDocText = 324] = "JSDocText", e[e.JSDocTypeLiteral = 325] = "JSDocTypeLiteral", e[e.JSDocSignature = 326] = "JSDocSignature", e[e.JSDocLink = 327] = "JSDocLink", e[e.JSDocLinkCode = 328] = "JSDocLinkCode", e[e.JSDocLinkPlain = 329] = "JSDocLinkPlain", e[e.JSDocTag = 330] = "JSDocTag", e[e.JSDocAugmentsTag = 331] = "JSDocAugmentsTag", e[e.JSDocImplementsTag = 332] = "JSDocImplementsTag", e[e.JSDocAuthorTag = 333] = "JSDocAuthorTag", e[e.JSDocDeprecatedTag = 334] = "JSDocDeprecatedTag", e[e.JSDocClassTag = 335] = "JSDocClassTag", e[e.JSDocPublicTag = 336] = "JSDocPublicTag", e[e.JSDocPrivateTag = 337] = "JSDocPrivateTag", e[e.JSDocProtectedTag = 338] = "JSDocProtectedTag", e[e.JSDocReadonlyTag = 339] = "JSDocReadonlyTag", e[e.JSDocOverrideTag = 340] = "JSDocOverrideTag", e[e.JSDocCallbackTag = 341] = "JSDocCallbackTag", e[e.JSDocOverloadTag = 342] = "JSDocOverloadTag", e[e.JSDocEnumTag = 343] = "JSDocEnumTag", e[e.JSDocParameterTag = 344] = "JSDocParameterTag", e[e.JSDocReturnTag = 345] = "JSDocReturnTag", e[e.JSDocThisTag = 346] = "JSDocThisTag", e[e.JSDocTypeTag = 347] = "JSDocTypeTag", e[e.JSDocTemplateTag = 348] = "JSDocTemplateTag", e[e.JSDocTypedefTag = 349] = "JSDocTypedefTag", e[e.JSDocSeeTag = 350] = "JSDocSeeTag", e[e.JSDocPropertyTag = 351] = "JSDocPropertyTag", e[e.JSDocThrowsTag = 352] = "JSDocThrowsTag", e[e.JSDocSatisfiesTag = 353] = "JSDocSatisfiesTag", e[e.SyntaxList = 354] = "SyntaxList", e[e.NotEmittedStatement = 355] = "NotEmittedStatement", e[e.PartiallyEmittedExpression = 356] = "PartiallyEmittedExpression", e[e.CommaListExpression = 357] = "CommaListExpression", e[e.MergeDeclarationMarker = 358] = "MergeDeclarationMarker", e[e.EndOfDeclarationMarker = 359] = "EndOfDeclarationMarker", e[e.SyntheticReferenceExpression = 360] = "SyntheticReferenceExpression", e[e.Count = 361] = "Count", e[e.FirstAssignment = 63] = "FirstAssignment", e[e.LastAssignment = 78] = "LastAssignment", e[e.FirstCompoundAssignment = 64] = "FirstCompoundAssignment", e[e.LastCompoundAssignment = 78] = "LastCompoundAssignment", e[e.FirstReservedWord = 81] = "FirstReservedWord", e[e.LastReservedWord = 116] = "LastReservedWord", e[e.FirstKeyword = 81] = "FirstKeyword", e[e.LastKeyword = 162] = "LastKeyword", e[e.FirstFutureReservedWord = 117] = "FirstFutureReservedWord", e[e.LastFutureReservedWord = 125] = "LastFutureReservedWord", e[e.FirstTypeNode = 179] = "FirstTypeNode", e[e.LastTypeNode = 202] = "LastTypeNode", e[e.FirstPunctuation = 18] = "FirstPunctuation", e[e.LastPunctuation = 78] = "LastPunctuation", e[e.FirstToken = 0] = "FirstToken", e[e.LastToken = 162] = "LastToken", e[e.FirstTriviaToken = 2] = "FirstTriviaToken", e[e.LastTriviaToken = 7] = "LastTriviaToken", e[e.FirstLiteralToken = 8] = "FirstLiteralToken", e[e.LastLiteralToken = 14] = "LastLiteralToken", e[e.FirstTemplateToken = 14] = "FirstTemplateToken", e[e.LastTemplateToken = 17] = "LastTemplateToken", e[e.FirstBinaryOperator = 29] = "FirstBinaryOperator", e[e.LastBinaryOperator = 78] = "LastBinaryOperator", e[e.FirstStatement = 240] = "FirstStatement", e[e.LastStatement = 256] = "LastStatement", e[e.FirstNode = 163] = "FirstNode", e[e.FirstJSDocNode = 312] = "FirstJSDocNode", e[e.LastJSDocNode = 353] = "LastJSDocNode", e[e.FirstJSDocTagNode = 330] = "FirstJSDocTagNode", e[e.LastJSDocTagNode = 353] = "LastJSDocTagNode", e[e.FirstContextualKeyword = 126] = "FirstContextualKeyword", e[e.LastContextualKeyword = 162] = "LastContextualKeyword", e))(Np || {}), Op = ((e) => (e[e.None = 0] = "None", e[e.Let = 1] = "Let", e[e.Const = 2] = "Const", e[e.NestedNamespace = 4] = "NestedNamespace", e[e.Synthesized = 8] = "Synthesized", e[e.Namespace = 16] = "Namespace", e[e.OptionalChain = 32] = "OptionalChain", e[e.ExportContext = 64] = "ExportContext", e[e.ContainsThis = 128] = "ContainsThis", e[e.HasImplicitReturn = 256] = "HasImplicitReturn", e[e.HasExplicitReturn = 512] = "HasExplicitReturn", e[e.GlobalAugmentation = 1024] = "GlobalAugmentation", e[e.HasAsyncFunctions = 2048] = "HasAsyncFunctions", e[e.DisallowInContext = 4096] = "DisallowInContext", e[e.YieldContext = 8192] = "YieldContext", e[e.DecoratorContext = 16384] = "DecoratorContext", e[e.AwaitContext = 32768] = "AwaitContext", e[e.DisallowConditionalTypesContext = 65536] = "DisallowConditionalTypesContext", e[e.ThisNodeHasError = 131072] = "ThisNodeHasError", e[e.JavaScriptFile = 262144] = "JavaScriptFile", e[e.ThisNodeOrAnySubNodesHasError = 524288] = "ThisNodeOrAnySubNodesHasError", e[e.HasAggregatedChildData = 1048576] = "HasAggregatedChildData", e[e.PossiblyContainsDynamicImport = 2097152] = "PossiblyContainsDynamicImport", e[e.PossiblyContainsImportMeta = 4194304] = "PossiblyContainsImportMeta", e[e.JSDoc = 8388608] = "JSDoc", e[e.Ambient = 16777216] = "Ambient", e[e.InWithStatement = 33554432] = "InWithStatement", e[e.JsonFile = 67108864] = "JsonFile", e[e.TypeCached = 134217728] = "TypeCached", e[e.Deprecated = 268435456] = "Deprecated", e[e.BlockScoped = 3] = "BlockScoped", e[e.ReachabilityCheckFlags = 768] = "ReachabilityCheckFlags", e[e.ReachabilityAndEmitFlags = 2816] = "ReachabilityAndEmitFlags", e[e.ContextFlags = 50720768] = "ContextFlags", e[e.TypeExcludesFlags = 40960] = "TypeExcludesFlags", e[e.PermanentlySetIncrementalFlags = 6291456] = "PermanentlySetIncrementalFlags", e[e.IdentifierHasExtendedUnicodeEscape = 128] = "IdentifierHasExtendedUnicodeEscape", e[e.IdentifierIsInJSDocNamespace = 2048] = "IdentifierIsInJSDocNamespace", e))(Op || {}), Mp = ((e) => (e[e.None = 0] = "None", e[e.Export = 1] = "Export", e[e.Ambient = 2] = "Ambient", e[e.Public = 4] = "Public", e[e.Private = 8] = "Private", e[e.Protected = 16] = "Protected", e[e.Static = 32] = "Static", e[e.Readonly = 64] = "Readonly", e[e.Accessor = 128] = "Accessor", e[e.Abstract = 256] = "Abstract", e[e.Async = 512] = "Async", e[e.Default = 1024] = "Default", e[e.Const = 2048] = "Const", e[e.HasComputedJSDocModifiers = 4096] = "HasComputedJSDocModifiers", e[e.Deprecated = 8192] = "Deprecated", e[e.Override = 16384] = "Override", e[e.In = 32768] = "In", e[e.Out = 65536] = "Out", e[e.Decorator = 131072] = "Decorator", e[e.HasComputedFlags = 536870912] = "HasComputedFlags", e[e.AccessibilityModifier = 28] = "AccessibilityModifier", e[e.ParameterPropertyModifier = 16476] = "ParameterPropertyModifier", e[e.NonPublicAccessibilityModifier = 24] = "NonPublicAccessibilityModifier", e[e.TypeScriptModifier = 117086] = "TypeScriptModifier", e[e.ExportDefault = 1025] = "ExportDefault", e[e.All = 258047] = "All", e[e.Modifier = 126975] = "Modifier", e))(Mp || {}), tg = ((e) => (e[e.None = 0] = "None", e[e.IntrinsicNamedElement = 1] = "IntrinsicNamedElement", e[e.IntrinsicIndexedElement = 2] = "IntrinsicIndexedElement", e[e.IntrinsicElement = 3] = "IntrinsicElement", e))(tg || {}), Lp = ((e) => (e[e.Succeeded = 1] = "Succeeded", e[e.Failed = 2] = "Failed", e[e.Reported = 4] = "Reported", e[e.ReportsUnmeasurable = 8] = "ReportsUnmeasurable", e[e.ReportsUnreliable = 16] = "ReportsUnreliable", e[e.ReportsMask = 24] = "ReportsMask", e))(Lp || {}), rg = ((e) => (e[e.None = 0] = "None", e[e.Auto = 1] = "Auto", e[e.Loop = 2] = "Loop", e[e.Unique = 3] = "Unique", e[e.Node = 4] = "Node", e[e.KindMask = 7] = "KindMask", e[e.ReservedInNestedScopes = 8] = "ReservedInNestedScopes", e[e.Optimistic = 16] = "Optimistic", e[e.FileLevel = 32] = "FileLevel", e[e.AllowNameSubstitution = 64] = "AllowNameSubstitution", e))(rg || {}), ng = ((e) => (e[e.None = 0] = "None", e[e.PrecedingLineBreak = 1] = "PrecedingLineBreak", e[e.PrecedingJSDocComment = 2] = "PrecedingJSDocComment", e[e.Unterminated = 4] = "Unterminated", e[e.ExtendedUnicodeEscape = 8] = "ExtendedUnicodeEscape", e[e.Scientific = 16] = "Scientific", e[e.Octal = 32] = "Octal", e[e.HexSpecifier = 64] = "HexSpecifier", e[e.BinarySpecifier = 128] = "BinarySpecifier", e[e.OctalSpecifier = 256] = "OctalSpecifier", e[e.ContainsSeparator = 512] = "ContainsSeparator", e[e.UnicodeEscape = 1024] = "UnicodeEscape", e[e.ContainsInvalidEscape = 2048] = "ContainsInvalidEscape", e[e.BinaryOrOctalSpecifier = 384] = "BinaryOrOctalSpecifier", e[e.NumericLiteralFlags = 1008] = "NumericLiteralFlags", e[e.TemplateLiteralLikeFlags = 2048] = "TemplateLiteralLikeFlags", e))(ng || {}), il = ((e) => (e[e.Unreachable = 1] = "Unreachable", e[e.Start = 2] = "Start", e[e.BranchLabel = 4] = "BranchLabel", e[e.LoopLabel = 8] = "LoopLabel", e[e.Assignment = 16] = "Assignment", e[e.TrueCondition = 32] = "TrueCondition", e[e.FalseCondition = 64] = "FalseCondition", e[e.SwitchClause = 128] = "SwitchClause", e[e.ArrayMutation = 256] = "ArrayMutation", e[e.Call = 512] = "Call", e[e.ReduceLabel = 1024] = "ReduceLabel", e[e.Referenced = 2048] = "Referenced", e[e.Shared = 4096] = "Shared", e[e.Label = 12] = "Label", e[e.Condition = 96] = "Condition", e))(il || {}), ig = ((e) => (e[e.ExpectError = 0] = "ExpectError", e[e.Ignore = 1] = "Ignore", e))(ig || {}), Rp = class {
          }, ag = ((e) => (e[e.RootFile = 0] = "RootFile", e[e.SourceFromProjectReference = 1] = "SourceFromProjectReference", e[e.OutputFromProjectReference = 2] = "OutputFromProjectReference", e[e.Import = 3] = "Import", e[e.ReferenceFile = 4] = "ReferenceFile", e[e.TypeReferenceDirective = 5] = "TypeReferenceDirective", e[e.LibFile = 6] = "LibFile", e[e.LibReferenceDirective = 7] = "LibReferenceDirective", e[e.AutomaticTypeDirectiveFile = 8] = "AutomaticTypeDirectiveFile", e))(ag || {}), sg = ((e) => (e[e.FilePreprocessingReferencedDiagnostic = 0] = "FilePreprocessingReferencedDiagnostic", e[e.FilePreprocessingFileExplainingDiagnostic = 1] = "FilePreprocessingFileExplainingDiagnostic", e[e.ResolutionDiagnostics = 2] = "ResolutionDiagnostics", e))(sg || {}), og = ((e) => (e[e.Js = 0] = "Js", e[e.Dts = 1] = "Dts", e))(og || {}), _g = ((e) => (e[e.Not = 0] = "Not", e[e.SafeModules = 1] = "SafeModules", e[e.Completely = 2] = "Completely", e))(_g || {}), cg = ((e) => (e[e.Success = 0] = "Success", e[e.DiagnosticsPresent_OutputsSkipped = 1] = "DiagnosticsPresent_OutputsSkipped", e[e.DiagnosticsPresent_OutputsGenerated = 2] = "DiagnosticsPresent_OutputsGenerated", e[e.InvalidProject_OutputsSkipped = 3] = "InvalidProject_OutputsSkipped", e[e.ProjectReferenceCycle_OutputsSkipped = 4] = "ProjectReferenceCycle_OutputsSkipped", e))(cg || {}), lg = ((e) => (e[e.Ok = 0] = "Ok", e[e.NeedsOverride = 1] = "NeedsOverride", e[e.HasInvalidOverride = 2] = "HasInvalidOverride", e))(lg || {}), ug = ((e) => (e[e.None = 0] = "None", e[e.Literal = 1] = "Literal", e[e.Subtype = 2] = "Subtype", e))(ug || {}), pg = ((e) => (e[e.None = 0] = "None", e[e.Signature = 1] = "Signature", e[e.NoConstraints = 2] = "NoConstraints", e[e.Completions = 4] = "Completions", e[e.SkipBindingPatterns = 8] = "SkipBindingPatterns", e))(pg || {}), fg = ((e) => (e[e.None = 0] = "None", e[e.NoTruncation = 1] = "NoTruncation", e[e.WriteArrayAsGenericType = 2] = "WriteArrayAsGenericType", e[e.GenerateNamesForShadowedTypeParams = 4] = "GenerateNamesForShadowedTypeParams", e[e.UseStructuralFallback = 8] = "UseStructuralFallback", e[e.ForbidIndexedAccessSymbolReferences = 16] = "ForbidIndexedAccessSymbolReferences", e[e.WriteTypeArgumentsOfSignature = 32] = "WriteTypeArgumentsOfSignature", e[e.UseFullyQualifiedType = 64] = "UseFullyQualifiedType", e[e.UseOnlyExternalAliasing = 128] = "UseOnlyExternalAliasing", e[e.SuppressAnyReturnType = 256] = "SuppressAnyReturnType", e[e.WriteTypeParametersInQualifiedName = 512] = "WriteTypeParametersInQualifiedName", e[e.MultilineObjectLiterals = 1024] = "MultilineObjectLiterals", e[e.WriteClassExpressionAsTypeLiteral = 2048] = "WriteClassExpressionAsTypeLiteral", e[e.UseTypeOfFunction = 4096] = "UseTypeOfFunction", e[e.OmitParameterModifiers = 8192] = "OmitParameterModifiers", e[e.UseAliasDefinedOutsideCurrentScope = 16384] = "UseAliasDefinedOutsideCurrentScope", e[e.UseSingleQuotesForStringLiteralType = 268435456] = "UseSingleQuotesForStringLiteralType", e[e.NoTypeReduction = 536870912] = "NoTypeReduction", e[e.OmitThisParameter = 33554432] = "OmitThisParameter", e[e.AllowThisInObjectLiteral = 32768] = "AllowThisInObjectLiteral", e[e.AllowQualifiedNameInPlaceOfIdentifier = 65536] = "AllowQualifiedNameInPlaceOfIdentifier", e[e.AllowAnonymousIdentifier = 131072] = "AllowAnonymousIdentifier", e[e.AllowEmptyUnionOrIntersection = 262144] = "AllowEmptyUnionOrIntersection", e[e.AllowEmptyTuple = 524288] = "AllowEmptyTuple", e[e.AllowUniqueESSymbolType = 1048576] = "AllowUniqueESSymbolType", e[e.AllowEmptyIndexInfoType = 2097152] = "AllowEmptyIndexInfoType", e[e.WriteComputedProps = 1073741824] = "WriteComputedProps", e[e.AllowNodeModulesRelativePaths = 67108864] = "AllowNodeModulesRelativePaths", e[e.DoNotIncludeSymbolChain = 134217728] = "DoNotIncludeSymbolChain", e[e.IgnoreErrors = 70221824] = "IgnoreErrors", e[e.InObjectTypeLiteral = 4194304] = "InObjectTypeLiteral", e[e.InTypeAlias = 8388608] = "InTypeAlias", e[e.InInitialEntityName = 16777216] = "InInitialEntityName", e))(fg || {}), dg = ((e) => (e[e.None = 0] = "None", e[e.NoTruncation = 1] = "NoTruncation", e[e.WriteArrayAsGenericType = 2] = "WriteArrayAsGenericType", e[e.UseStructuralFallback = 8] = "UseStructuralFallback", e[e.WriteTypeArgumentsOfSignature = 32] = "WriteTypeArgumentsOfSignature", e[e.UseFullyQualifiedType = 64] = "UseFullyQualifiedType", e[e.SuppressAnyReturnType = 256] = "SuppressAnyReturnType", e[e.MultilineObjectLiterals = 1024] = "MultilineObjectLiterals", e[e.WriteClassExpressionAsTypeLiteral = 2048] = "WriteClassExpressionAsTypeLiteral", e[e.UseTypeOfFunction = 4096] = "UseTypeOfFunction", e[e.OmitParameterModifiers = 8192] = "OmitParameterModifiers", e[e.UseAliasDefinedOutsideCurrentScope = 16384] = "UseAliasDefinedOutsideCurrentScope", e[e.UseSingleQuotesForStringLiteralType = 268435456] = "UseSingleQuotesForStringLiteralType", e[e.NoTypeReduction = 536870912] = "NoTypeReduction", e[e.OmitThisParameter = 33554432] = "OmitThisParameter", e[e.AllowUniqueESSymbolType = 1048576] = "AllowUniqueESSymbolType", e[e.AddUndefined = 131072] = "AddUndefined", e[e.WriteArrowStyleSignature = 262144] = "WriteArrowStyleSignature", e[e.InArrayType = 524288] = "InArrayType", e[e.InElementType = 2097152] = "InElementType", e[e.InFirstTypeArgument = 4194304] = "InFirstTypeArgument", e[e.InTypeAlias = 8388608] = "InTypeAlias", e[e.NodeBuilderFlagsMask = 848330091] = "NodeBuilderFlagsMask", e))(dg || {}), mg = ((e) => (e[e.None = 0] = "None", e[e.WriteTypeParametersOrArguments = 1] = "WriteTypeParametersOrArguments", e[e.UseOnlyExternalAliasing = 2] = "UseOnlyExternalAliasing", e[e.AllowAnyNodeKind = 4] = "AllowAnyNodeKind", e[e.UseAliasDefinedOutsideCurrentScope = 8] = "UseAliasDefinedOutsideCurrentScope", e[e.WriteComputedProps = 16] = "WriteComputedProps", e[e.DoNotIncludeSymbolChain = 32] = "DoNotIncludeSymbolChain", e))(mg || {}), hg = ((e) => (e[e.Accessible = 0] = "Accessible", e[e.NotAccessible = 1] = "NotAccessible", e[e.CannotBeNamed = 2] = "CannotBeNamed", e))(hg || {}), gg = ((e) => (e[e.UnionOrIntersection = 0] = "UnionOrIntersection", e[e.Spread = 1] = "Spread", e))(gg || {}), yg = ((e) => (e[e.This = 0] = "This", e[e.Identifier = 1] = "Identifier", e[e.AssertsThis = 2] = "AssertsThis", e[e.AssertsIdentifier = 3] = "AssertsIdentifier", e))(yg || {}), vg = ((e) => (e[e.Unknown = 0] = "Unknown", e[e.TypeWithConstructSignatureAndValue = 1] = "TypeWithConstructSignatureAndValue", e[e.VoidNullableOrNeverType = 2] = "VoidNullableOrNeverType", e[e.NumberLikeType = 3] = "NumberLikeType", e[e.BigIntLikeType = 4] = "BigIntLikeType", e[e.StringLikeType = 5] = "StringLikeType", e[e.BooleanType = 6] = "BooleanType", e[e.ArrayLikeType = 7] = "ArrayLikeType", e[e.ESSymbolType = 8] = "ESSymbolType", e[e.Promise = 9] = "Promise", e[e.TypeWithCallSignature = 10] = "TypeWithCallSignature", e[e.ObjectType = 11] = "ObjectType", e))(vg || {}), jp = ((e) => (e[e.None = 0] = "None", e[e.FunctionScopedVariable = 1] = "FunctionScopedVariable", e[e.BlockScopedVariable = 2] = "BlockScopedVariable", e[e.Property = 4] = "Property", e[e.EnumMember = 8] = "EnumMember", e[e.Function = 16] = "Function", e[e.Class = 32] = "Class", e[e.Interface = 64] = "Interface", e[e.ConstEnum = 128] = "ConstEnum", e[e.RegularEnum = 256] = "RegularEnum", e[e.ValueModule = 512] = "ValueModule", e[e.NamespaceModule = 1024] = "NamespaceModule", e[e.TypeLiteral = 2048] = "TypeLiteral", e[e.ObjectLiteral = 4096] = "ObjectLiteral", e[e.Method = 8192] = "Method", e[e.Constructor = 16384] = "Constructor", e[e.GetAccessor = 32768] = "GetAccessor", e[e.SetAccessor = 65536] = "SetAccessor", e[e.Signature = 131072] = "Signature", e[e.TypeParameter = 262144] = "TypeParameter", e[e.TypeAlias = 524288] = "TypeAlias", e[e.ExportValue = 1048576] = "ExportValue", e[e.Alias = 2097152] = "Alias", e[e.Prototype = 4194304] = "Prototype", e[e.ExportStar = 8388608] = "ExportStar", e[e.Optional = 16777216] = "Optional", e[e.Transient = 33554432] = "Transient", e[e.Assignment = 67108864] = "Assignment", e[e.ModuleExports = 134217728] = "ModuleExports", e[e.All = 67108863] = "All", e[e.Enum = 384] = "Enum", e[e.Variable = 3] = "Variable", e[e.Value = 111551] = "Value", e[e.Type = 788968] = "Type", e[e.Namespace = 1920] = "Namespace", e[e.Module = 1536] = "Module", e[e.Accessor = 98304] = "Accessor", e[e.FunctionScopedVariableExcludes = 111550] = "FunctionScopedVariableExcludes", e[e.BlockScopedVariableExcludes = 111551] = "BlockScopedVariableExcludes", e[e.ParameterExcludes = 111551] = "ParameterExcludes", e[e.PropertyExcludes = 0] = "PropertyExcludes", e[e.EnumMemberExcludes = 900095] = "EnumMemberExcludes", e[e.FunctionExcludes = 110991] = "FunctionExcludes", e[e.ClassExcludes = 899503] = "ClassExcludes", e[e.InterfaceExcludes = 788872] = "InterfaceExcludes", e[e.RegularEnumExcludes = 899327] = "RegularEnumExcludes", e[e.ConstEnumExcludes = 899967] = "ConstEnumExcludes", e[e.ValueModuleExcludes = 110735] = "ValueModuleExcludes", e[e.NamespaceModuleExcludes = 0] = "NamespaceModuleExcludes", e[e.MethodExcludes = 103359] = "MethodExcludes", e[e.GetAccessorExcludes = 46015] = "GetAccessorExcludes", e[e.SetAccessorExcludes = 78783] = "SetAccessorExcludes", e[e.AccessorExcludes = 13247] = "AccessorExcludes", e[e.TypeParameterExcludes = 526824] = "TypeParameterExcludes", e[e.TypeAliasExcludes = 788968] = "TypeAliasExcludes", e[e.AliasExcludes = 2097152] = "AliasExcludes", e[e.ModuleMember = 2623475] = "ModuleMember", e[e.ExportHasLocal = 944] = "ExportHasLocal", e[e.BlockScoped = 418] = "BlockScoped", e[e.PropertyOrAccessor = 98308] = "PropertyOrAccessor", e[e.ClassMember = 106500] = "ClassMember", e[e.ExportSupportsDefaultModifier = 112] = "ExportSupportsDefaultModifier", e[e.ExportDoesNotSupportDefaultModifier = -113] = "ExportDoesNotSupportDefaultModifier", e[e.Classifiable = 2885600] = "Classifiable", e[e.LateBindingContainer = 6256] = "LateBindingContainer", e))(jp || {}), bg = ((e) => (e[e.Numeric = 0] = "Numeric", e[e.Literal = 1] = "Literal", e))(bg || {}), Tg = ((e) => (e[e.None = 0] = "None", e[e.Instantiated = 1] = "Instantiated", e[e.SyntheticProperty = 2] = "SyntheticProperty", e[e.SyntheticMethod = 4] = "SyntheticMethod", e[e.Readonly = 8] = "Readonly", e[e.ReadPartial = 16] = "ReadPartial", e[e.WritePartial = 32] = "WritePartial", e[e.HasNonUniformType = 64] = "HasNonUniformType", e[e.HasLiteralType = 128] = "HasLiteralType", e[e.ContainsPublic = 256] = "ContainsPublic", e[e.ContainsProtected = 512] = "ContainsProtected", e[e.ContainsPrivate = 1024] = "ContainsPrivate", e[e.ContainsStatic = 2048] = "ContainsStatic", e[e.Late = 4096] = "Late", e[e.ReverseMapped = 8192] = "ReverseMapped", e[e.OptionalParameter = 16384] = "OptionalParameter", e[e.RestParameter = 32768] = "RestParameter", e[e.DeferredType = 65536] = "DeferredType", e[e.HasNeverType = 131072] = "HasNeverType", e[e.Mapped = 262144] = "Mapped", e[e.StripOptional = 524288] = "StripOptional", e[e.Unresolved = 1048576] = "Unresolved", e[e.Synthetic = 6] = "Synthetic", e[e.Discriminant = 192] = "Discriminant", e[e.Partial = 48] = "Partial", e))(Tg || {}), Sg = ((e) => (e.Call = "__call", e.Constructor = "__constructor", e.New = "__new", e.Index = "__index", e.ExportStar = "__export", e.Global = "__global", e.Missing = "__missing", e.Type = "__type", e.Object = "__object", e.JSXAttributes = "__jsxAttributes", e.Class = "__class", e.Function = "__function", e.Computed = "__computed", e.Resolving = "__resolving__", e.ExportEquals = "export=", e.Default = "default", e.This = "this", e))(Sg || {}), xg = ((e) => (e[e.None = 0] = "None", e[e.TypeChecked = 1] = "TypeChecked", e[e.LexicalThis = 2] = "LexicalThis", e[e.CaptureThis = 4] = "CaptureThis", e[e.CaptureNewTarget = 8] = "CaptureNewTarget", e[e.SuperInstance = 16] = "SuperInstance", e[e.SuperStatic = 32] = "SuperStatic", e[e.ContextChecked = 64] = "ContextChecked", e[e.MethodWithSuperPropertyAccessInAsync = 128] = "MethodWithSuperPropertyAccessInAsync", e[e.MethodWithSuperPropertyAssignmentInAsync = 256] = "MethodWithSuperPropertyAssignmentInAsync", e[e.CaptureArguments = 512] = "CaptureArguments", e[e.EnumValuesComputed = 1024] = "EnumValuesComputed", e[e.LexicalModuleMergesWithClass = 2048] = "LexicalModuleMergesWithClass", e[e.LoopWithCapturedBlockScopedBinding = 4096] = "LoopWithCapturedBlockScopedBinding", e[e.ContainsCapturedBlockScopeBinding = 8192] = "ContainsCapturedBlockScopeBinding", e[e.CapturedBlockScopedBinding = 16384] = "CapturedBlockScopedBinding", e[e.BlockScopedBindingInLoop = 32768] = "BlockScopedBindingInLoop", e[e.ClassWithBodyScopedClassBinding = 65536] = "ClassWithBodyScopedClassBinding", e[e.BodyScopedClassBinding = 131072] = "BodyScopedClassBinding", e[e.NeedsLoopOutParameter = 262144] = "NeedsLoopOutParameter", e[e.AssignmentsMarked = 524288] = "AssignmentsMarked", e[e.ClassWithConstructorReference = 1048576] = "ClassWithConstructorReference", e[e.ConstructorReferenceInClass = 2097152] = "ConstructorReferenceInClass", e[e.ContainsClassWithPrivateIdentifiers = 4194304] = "ContainsClassWithPrivateIdentifiers", e[e.ContainsSuperPropertyInStaticInitializer = 8388608] = "ContainsSuperPropertyInStaticInitializer", e[e.InCheckIdentifier = 16777216] = "InCheckIdentifier", e))(xg || {}), Jp = ((e) => (e[e.Any = 1] = "Any", e[e.Unknown = 2] = "Unknown", e[e.String = 4] = "String", e[e.Number = 8] = "Number", e[e.Boolean = 16] = "Boolean", e[e.Enum = 32] = "Enum", e[e.BigInt = 64] = "BigInt", e[e.StringLiteral = 128] = "StringLiteral", e[e.NumberLiteral = 256] = "NumberLiteral", e[e.BooleanLiteral = 512] = "BooleanLiteral", e[e.EnumLiteral = 1024] = "EnumLiteral", e[e.BigIntLiteral = 2048] = "BigIntLiteral", e[e.ESSymbol = 4096] = "ESSymbol", e[e.UniqueESSymbol = 8192] = "UniqueESSymbol", e[e.Void = 16384] = "Void", e[e.Undefined = 32768] = "Undefined", e[e.Null = 65536] = "Null", e[e.Never = 131072] = "Never", e[e.TypeParameter = 262144] = "TypeParameter", e[e.Object = 524288] = "Object", e[e.Union = 1048576] = "Union", e[e.Intersection = 2097152] = "Intersection", e[e.Index = 4194304] = "Index", e[e.IndexedAccess = 8388608] = "IndexedAccess", e[e.Conditional = 16777216] = "Conditional", e[e.Substitution = 33554432] = "Substitution", e[e.NonPrimitive = 67108864] = "NonPrimitive", e[e.TemplateLiteral = 134217728] = "TemplateLiteral", e[e.StringMapping = 268435456] = "StringMapping", e[e.AnyOrUnknown = 3] = "AnyOrUnknown", e[e.Nullable = 98304] = "Nullable", e[e.Literal = 2944] = "Literal", e[e.Unit = 109472] = "Unit", e[e.Freshable = 2976] = "Freshable", e[e.StringOrNumberLiteral = 384] = "StringOrNumberLiteral", e[e.StringOrNumberLiteralOrUnique = 8576] = "StringOrNumberLiteralOrUnique", e[e.DefinitelyFalsy = 117632] = "DefinitelyFalsy", e[e.PossiblyFalsy = 117724] = "PossiblyFalsy", e[e.Intrinsic = 67359327] = "Intrinsic", e[e.Primitive = 134348796] = "Primitive", e[e.StringLike = 402653316] = "StringLike", e[e.NumberLike = 296] = "NumberLike", e[e.BigIntLike = 2112] = "BigIntLike", e[e.BooleanLike = 528] = "BooleanLike", e[e.EnumLike = 1056] = "EnumLike", e[e.ESSymbolLike = 12288] = "ESSymbolLike", e[e.VoidLike = 49152] = "VoidLike", e[e.DefinitelyNonNullable = 470302716] = "DefinitelyNonNullable", e[e.DisjointDomains = 469892092] = "DisjointDomains", e[e.UnionOrIntersection = 3145728] = "UnionOrIntersection", e[e.StructuredType = 3670016] = "StructuredType", e[e.TypeVariable = 8650752] = "TypeVariable", e[e.InstantiableNonPrimitive = 58982400] = "InstantiableNonPrimitive", e[e.InstantiablePrimitive = 406847488] = "InstantiablePrimitive", e[e.Instantiable = 465829888] = "Instantiable", e[e.StructuredOrInstantiable = 469499904] = "StructuredOrInstantiable", e[e.ObjectFlagsType = 3899393] = "ObjectFlagsType", e[e.Simplifiable = 25165824] = "Simplifiable", e[e.Singleton = 67358815] = "Singleton", e[e.Narrowable = 536624127] = "Narrowable", e[e.IncludesMask = 205258751] = "IncludesMask", e[e.IncludesMissingType = 262144] = "IncludesMissingType", e[e.IncludesNonWideningType = 4194304] = "IncludesNonWideningType", e[e.IncludesWildcard = 8388608] = "IncludesWildcard", e[e.IncludesEmptyObject = 16777216] = "IncludesEmptyObject", e[e.IncludesInstantiable = 33554432] = "IncludesInstantiable", e[e.NotPrimitiveUnion = 36323363] = "NotPrimitiveUnion", e))(Jp || {}), Fp = ((e) => (e[e.None = 0] = "None", e[e.Class = 1] = "Class", e[e.Interface = 2] = "Interface", e[e.Reference = 4] = "Reference", e[e.Tuple = 8] = "Tuple", e[e.Anonymous = 16] = "Anonymous", e[e.Mapped = 32] = "Mapped", e[e.Instantiated = 64] = "Instantiated", e[e.ObjectLiteral = 128] = "ObjectLiteral", e[e.EvolvingArray = 256] = "EvolvingArray", e[e.ObjectLiteralPatternWithComputedProperties = 512] = "ObjectLiteralPatternWithComputedProperties", e[e.ReverseMapped = 1024] = "ReverseMapped", e[e.JsxAttributes = 2048] = "JsxAttributes", e[e.JSLiteral = 4096] = "JSLiteral", e[e.FreshLiteral = 8192] = "FreshLiteral", e[e.ArrayLiteral = 16384] = "ArrayLiteral", e[e.PrimitiveUnion = 32768] = "PrimitiveUnion", e[e.ContainsWideningType = 65536] = "ContainsWideningType", e[e.ContainsObjectOrArrayLiteral = 131072] = "ContainsObjectOrArrayLiteral", e[e.NonInferrableType = 262144] = "NonInferrableType", e[e.CouldContainTypeVariablesComputed = 524288] = "CouldContainTypeVariablesComputed", e[e.CouldContainTypeVariables = 1048576] = "CouldContainTypeVariables", e[e.ClassOrInterface = 3] = "ClassOrInterface", e[e.RequiresWidening = 196608] = "RequiresWidening", e[e.PropagatingFlags = 458752] = "PropagatingFlags", e[e.ObjectTypeKindMask = 1343] = "ObjectTypeKindMask", e[e.ContainsSpread = 2097152] = "ContainsSpread", e[e.ObjectRestType = 4194304] = "ObjectRestType", e[e.InstantiationExpressionType = 8388608] = "InstantiationExpressionType", e[e.IsClassInstanceClone = 16777216] = "IsClassInstanceClone", e[e.IdenticalBaseTypeCalculated = 33554432] = "IdenticalBaseTypeCalculated", e[e.IdenticalBaseTypeExists = 67108864] = "IdenticalBaseTypeExists", e[e.IsGenericTypeComputed = 2097152] = "IsGenericTypeComputed", e[e.IsGenericObjectType = 4194304] = "IsGenericObjectType", e[e.IsGenericIndexType = 8388608] = "IsGenericIndexType", e[e.IsGenericType = 12582912] = "IsGenericType", e[e.ContainsIntersections = 16777216] = "ContainsIntersections", e[e.IsUnknownLikeUnionComputed = 33554432] = "IsUnknownLikeUnionComputed", e[e.IsUnknownLikeUnion = 67108864] = "IsUnknownLikeUnion", e[e.IsNeverIntersectionComputed = 16777216] = "IsNeverIntersectionComputed", e[e.IsNeverIntersection = 33554432] = "IsNeverIntersection", e))(Fp || {}), Eg = ((e) => (e[e.Invariant = 0] = "Invariant", e[e.Covariant = 1] = "Covariant", e[e.Contravariant = 2] = "Contravariant", e[e.Bivariant = 3] = "Bivariant", e[e.Independent = 4] = "Independent", e[e.VarianceMask = 7] = "VarianceMask", e[e.Unmeasurable = 8] = "Unmeasurable", e[e.Unreliable = 16] = "Unreliable", e[e.AllowsStructuralFallback = 24] = "AllowsStructuralFallback", e))(Eg || {}), wg = ((e) => (e[e.Required = 1] = "Required", e[e.Optional = 2] = "Optional", e[e.Rest = 4] = "Rest", e[e.Variadic = 8] = "Variadic", e[e.Fixed = 3] = "Fixed", e[e.Variable = 12] = "Variable", e[e.NonRequired = 14] = "NonRequired", e[e.NonRest = 11] = "NonRest", e))(wg || {}), Cg = ((e) => (e[e.None = 0] = "None", e[e.IncludeUndefined = 1] = "IncludeUndefined", e[e.NoIndexSignatures = 2] = "NoIndexSignatures", e[e.Writing = 4] = "Writing", e[e.CacheSymbol = 8] = "CacheSymbol", e[e.NoTupleBoundsCheck = 16] = "NoTupleBoundsCheck", e[e.ExpressionPosition = 32] = "ExpressionPosition", e[e.ReportDeprecated = 64] = "ReportDeprecated", e[e.SuppressNoImplicitAnyError = 128] = "SuppressNoImplicitAnyError", e[e.Contextual = 256] = "Contextual", e[e.Persistent = 1] = "Persistent", e))(Cg || {}), Ag = ((e) => (e[e.Component = 0] = "Component", e[e.Function = 1] = "Function", e[e.Mixed = 2] = "Mixed", e))(Ag || {}), Pg = ((e) => (e[e.Call = 0] = "Call", e[e.Construct = 1] = "Construct", e))(Pg || {}), Bp = ((e) => (e[e.None = 0] = "None", e[e.HasRestParameter = 1] = "HasRestParameter", e[e.HasLiteralTypes = 2] = "HasLiteralTypes", e[e.Abstract = 4] = "Abstract", e[e.IsInnerCallChain = 8] = "IsInnerCallChain", e[e.IsOuterCallChain = 16] = "IsOuterCallChain", e[e.IsUntypedSignatureInJSFile = 32] = "IsUntypedSignatureInJSFile", e[e.PropagatingFlags = 39] = "PropagatingFlags", e[e.CallChainFlags = 24] = "CallChainFlags", e))(Bp || {}), Dg = ((e) => (e[e.String = 0] = "String", e[e.Number = 1] = "Number", e))(Dg || {}), kg = ((e) => (e[e.Simple = 0] = "Simple", e[e.Array = 1] = "Array", e[e.Deferred = 2] = "Deferred", e[e.Function = 3] = "Function", e[e.Composite = 4] = "Composite", e[e.Merged = 5] = "Merged", e))(kg || {}), Ig = ((e) => (e[e.None = 0] = "None", e[e.NakedTypeVariable = 1] = "NakedTypeVariable", e[e.SpeculativeTuple = 2] = "SpeculativeTuple", e[e.SubstituteSource = 4] = "SubstituteSource", e[e.HomomorphicMappedType = 8] = "HomomorphicMappedType", e[e.PartialHomomorphicMappedType = 16] = "PartialHomomorphicMappedType", e[e.MappedTypeConstraint = 32] = "MappedTypeConstraint", e[e.ContravariantConditional = 64] = "ContravariantConditional", e[e.ReturnType = 128] = "ReturnType", e[e.LiteralKeyof = 256] = "LiteralKeyof", e[e.NoConstraints = 512] = "NoConstraints", e[e.AlwaysStrict = 1024] = "AlwaysStrict", e[e.MaxValue = 2048] = "MaxValue", e[e.PriorityImpliesCombination = 416] = "PriorityImpliesCombination", e[e.Circularity = -1] = "Circularity", e))(Ig || {}), Ng = ((e) => (e[e.None = 0] = "None", e[e.NoDefault = 1] = "NoDefault", e[e.AnyDefault = 2] = "AnyDefault", e[e.SkippedGenericFunction = 4] = "SkippedGenericFunction", e))(Ng || {}), Og = ((e) => (e[e.False = 0] = "False", e[e.Unknown = 1] = "Unknown", e[e.Maybe = 3] = "Maybe", e[e.True = -1] = "True", e))(Og || {}), Mg = ((e) => (e[e.None = 0] = "None", e[e.ExportsProperty = 1] = "ExportsProperty", e[e.ModuleExports = 2] = "ModuleExports", e[e.PrototypeProperty = 3] = "PrototypeProperty", e[e.ThisProperty = 4] = "ThisProperty", e[e.Property = 5] = "Property", e[e.Prototype = 6] = "Prototype", e[e.ObjectDefinePropertyValue = 7] = "ObjectDefinePropertyValue", e[e.ObjectDefinePropertyExports = 8] = "ObjectDefinePropertyExports", e[e.ObjectDefinePrototypeProperty = 9] = "ObjectDefinePrototypeProperty", e))(Mg || {}), qp = ((e) => (e[e.Warning = 0] = "Warning", e[e.Error = 1] = "Error", e[e.Suggestion = 2] = "Suggestion", e[e.Message = 3] = "Message", e))(qp || {}), Lg = ((e) => (e[e.Classic = 1] = "Classic", e[e.NodeJs = 2] = "NodeJs", e[e.Node10 = 2] = "Node10", e[e.Node16 = 3] = "Node16", e[e.NodeNext = 99] = "NodeNext", e[e.Bundler = 100] = "Bundler", e))(Lg || {}), Rg = ((e) => (e[e.Legacy = 1] = "Legacy", e[e.Auto = 2] = "Auto", e[e.Force = 3] = "Force", e))(Rg || {}), jg = ((e) => (e[e.FixedPollingInterval = 0] = "FixedPollingInterval", e[e.PriorityPollingInterval = 1] = "PriorityPollingInterval", e[e.DynamicPriorityPolling = 2] = "DynamicPriorityPolling", e[e.FixedChunkSizePolling = 3] = "FixedChunkSizePolling", e[e.UseFsEvents = 4] = "UseFsEvents", e[e.UseFsEventsOnParentDirectory = 5] = "UseFsEventsOnParentDirectory", e))(jg || {}), Jg = ((e) => (e[e.UseFsEvents = 0] = "UseFsEvents", e[e.FixedPollingInterval = 1] = "FixedPollingInterval", e[e.DynamicPriorityPolling = 2] = "DynamicPriorityPolling", e[e.FixedChunkSizePolling = 3] = "FixedChunkSizePolling", e))(Jg || {}), Fg = ((e) => (e[e.FixedInterval = 0] = "FixedInterval", e[e.PriorityInterval = 1] = "PriorityInterval", e[e.DynamicPriority = 2] = "DynamicPriority", e[e.FixedChunkSize = 3] = "FixedChunkSize", e))(Fg || {}), Bg = ((e) => (e[e.None = 0] = "None", e[e.CommonJS = 1] = "CommonJS", e[e.AMD = 2] = "AMD", e[e.UMD = 3] = "UMD", e[e.System = 4] = "System", e[e.ES2015 = 5] = "ES2015", e[e.ES2020 = 6] = "ES2020", e[e.ES2022 = 7] = "ES2022", e[e.ESNext = 99] = "ESNext", e[e.Node16 = 100] = "Node16", e[e.NodeNext = 199] = "NodeNext", e))(Bg || {}), qg = ((e) => (e[e.None = 0] = "None", e[e.Preserve = 1] = "Preserve", e[e.React = 2] = "React", e[e.ReactNative = 3] = "ReactNative", e[e.ReactJSX = 4] = "ReactJSX", e[e.ReactJSXDev = 5] = "ReactJSXDev", e))(qg || {}), Ug = ((e) => (e[e.Remove = 0] = "Remove", e[e.Preserve = 1] = "Preserve", e[e.Error = 2] = "Error", e))(Ug || {}), zg = ((e) => (e[e.CarriageReturnLineFeed = 0] = "CarriageReturnLineFeed", e[e.LineFeed = 1] = "LineFeed", e))(zg || {}), Wg = ((e) => (e[e.Unknown = 0] = "Unknown", e[e.JS = 1] = "JS", e[e.JSX = 2] = "JSX", e[e.TS = 3] = "TS", e[e.TSX = 4] = "TSX", e[e.External = 5] = "External", e[e.JSON = 6] = "JSON", e[e.Deferred = 7] = "Deferred", e))(Wg || {}), Vg = ((e) => (e[e.ES3 = 0] = "ES3", e[e.ES5 = 1] = "ES5", e[e.ES2015 = 2] = "ES2015", e[e.ES2016 = 3] = "ES2016", e[e.ES2017 = 4] = "ES2017", e[e.ES2018 = 5] = "ES2018", e[e.ES2019 = 6] = "ES2019", e[e.ES2020 = 7] = "ES2020", e[e.ES2021 = 8] = "ES2021", e[e.ES2022 = 9] = "ES2022", e[e.ESNext = 99] = "ESNext", e[e.JSON = 100] = "JSON", e[e.Latest = 99] = "Latest", e))(Vg || {}), Hg = ((e) => (e[e.Standard = 0] = "Standard", e[e.JSX = 1] = "JSX", e))(Hg || {}), Gg = ((e) => (e[e.None = 0] = "None", e[e.Recursive = 1] = "Recursive", e))(Gg || {}), $g = ((e) => (e[e.nullCharacter = 0] = "nullCharacter", e[e.maxAsciiCharacter = 127] = "maxAsciiCharacter", e[e.lineFeed = 10] = "lineFeed", e[e.carriageReturn = 13] = "carriageReturn", e[e.lineSeparator = 8232] = "lineSeparator", e[e.paragraphSeparator = 8233] = "paragraphSeparator", e[e.nextLine = 133] = "nextLine", e[e.space = 32] = "space", e[e.nonBreakingSpace = 160] = "nonBreakingSpace", e[e.enQuad = 8192] = "enQuad", e[e.emQuad = 8193] = "emQuad", e[e.enSpace = 8194] = "enSpace", e[e.emSpace = 8195] = "emSpace", e[e.threePerEmSpace = 8196] = "threePerEmSpace", e[e.fourPerEmSpace = 8197] = "fourPerEmSpace", e[e.sixPerEmSpace = 8198] = "sixPerEmSpace", e[e.figureSpace = 8199] = "figureSpace", e[e.punctuationSpace = 8200] = "punctuationSpace", e[e.thinSpace = 8201] = "thinSpace", e[e.hairSpace = 8202] = "hairSpace", e[e.zeroWidthSpace = 8203] = "zeroWidthSpace", e[e.narrowNoBreakSpace = 8239] = "narrowNoBreakSpace", e[e.ideographicSpace = 12288] = "ideographicSpace", e[e.mathematicalSpace = 8287] = "mathematicalSpace", e[e.ogham = 5760] = "ogham", e[e._ = 95] = "_", e[e.$ = 36] = "$", e[e._0 = 48] = "_0", e[e._1 = 49] = "_1", e[e._2 = 50] = "_2", e[e._3 = 51] = "_3", e[e._4 = 52] = "_4", e[e._5 = 53] = "_5", e[e._6 = 54] = "_6", e[e._7 = 55] = "_7", e[e._8 = 56] = "_8", e[e._9 = 57] = "_9", e[e.a = 97] = "a", e[e.b = 98] = "b", e[e.c = 99] = "c", e[e.d = 100] = "d", e[e.e = 101] = "e", e[e.f = 102] = "f", e[e.g = 103] = "g", e[e.h = 104] = "h", e[e.i = 105] = "i", e[e.j = 106] = "j", e[e.k = 107] = "k", e[e.l = 108] = "l", e[e.m = 109] = "m", e[e.n = 110] = "n", e[e.o = 111] = "o", e[e.p = 112] = "p", e[e.q = 113] = "q", e[e.r = 114] = "r", e[e.s = 115] = "s", e[e.t = 116] = "t", e[e.u = 117] = "u", e[e.v = 118] = "v", e[e.w = 119] = "w", e[e.x = 120] = "x", e[e.y = 121] = "y", e[e.z = 122] = "z", e[e.A = 65] = "A", e[e.B = 66] = "B", e[e.C = 67] = "C", e[e.D = 68] = "D", e[e.E = 69] = "E", e[e.F = 70] = "F", e[e.G = 71] = "G", e[e.H = 72] = "H", e[e.I = 73] = "I", e[e.J = 74] = "J", e[e.K = 75] = "K", e[e.L = 76] = "L", e[e.M = 77] = "M", e[e.N = 78] = "N", e[e.O = 79] = "O", e[e.P = 80] = "P", e[e.Q = 81] = "Q", e[e.R = 82] = "R", e[e.S = 83] = "S", e[e.T = 84] = "T", e[e.U = 85] = "U", e[e.V = 86] = "V", e[e.W = 87] = "W", e[e.X = 88] = "X", e[e.Y = 89] = "Y", e[e.Z = 90] = "Z", e[e.ampersand = 38] = "ampersand", e[e.asterisk = 42] = "asterisk", e[e.at = 64] = "at", e[e.backslash = 92] = "backslash", e[e.backtick = 96] = "backtick", e[e.bar = 124] = "bar", e[e.caret = 94] = "caret", e[e.closeBrace = 125] = "closeBrace", e[e.closeBracket = 93] = "closeBracket", e[e.closeParen = 41] = "closeParen", e[e.colon = 58] = "colon", e[e.comma = 44] = "comma", e[e.dot = 46] = "dot", e[e.doubleQuote = 34] = "doubleQuote", e[e.equals = 61] = "equals", e[e.exclamation = 33] = "exclamation", e[e.greaterThan = 62] = "greaterThan", e[e.hash = 35] = "hash", e[e.lessThan = 60] = "lessThan", e[e.minus = 45] = "minus", e[e.openBrace = 123] = "openBrace", e[e.openBracket = 91] = "openBracket", e[e.openParen = 40] = "openParen", e[e.percent = 37] = "percent", e[e.plus = 43] = "plus", e[e.question = 63] = "question", e[e.semicolon = 59] = "semicolon", e[e.singleQuote = 39] = "singleQuote", e[e.slash = 47] = "slash", e[e.tilde = 126] = "tilde", e[e.backspace = 8] = "backspace", e[e.formFeed = 12] = "formFeed", e[e.byteOrderMark = 65279] = "byteOrderMark", e[e.tab = 9] = "tab", e[e.verticalTab = 11] = "verticalTab", e))($g || {}), Kg = ((e) => (e.Ts = ".ts", e.Tsx = ".tsx", e.Dts = ".d.ts", e.Js = ".js", e.Jsx = ".jsx", e.Json = ".json", e.TsBuildInfo = ".tsbuildinfo", e.Mjs = ".mjs", e.Mts = ".mts", e.Dmts = ".d.mts", e.Cjs = ".cjs", e.Cts = ".cts", e.Dcts = ".d.cts", e))(Kg || {}), Up = ((e) => (e[e.None = 0] = "None", e[e.ContainsTypeScript = 1] = "ContainsTypeScript", e[e.ContainsJsx = 2] = "ContainsJsx", e[e.ContainsESNext = 4] = "ContainsESNext", e[e.ContainsES2022 = 8] = "ContainsES2022", e[e.ContainsES2021 = 16] = "ContainsES2021", e[e.ContainsES2020 = 32] = "ContainsES2020", e[e.ContainsES2019 = 64] = "ContainsES2019", e[e.ContainsES2018 = 128] = "ContainsES2018", e[e.ContainsES2017 = 256] = "ContainsES2017", e[e.ContainsES2016 = 512] = "ContainsES2016", e[e.ContainsES2015 = 1024] = "ContainsES2015", e[e.ContainsGenerator = 2048] = "ContainsGenerator", e[e.ContainsDestructuringAssignment = 4096] = "ContainsDestructuringAssignment", e[e.ContainsTypeScriptClassSyntax = 8192] = "ContainsTypeScriptClassSyntax", e[e.ContainsLexicalThis = 16384] = "ContainsLexicalThis", e[e.ContainsRestOrSpread = 32768] = "ContainsRestOrSpread", e[e.ContainsObjectRestOrSpread = 65536] = "ContainsObjectRestOrSpread", e[e.ContainsComputedPropertyName = 131072] = "ContainsComputedPropertyName", e[e.ContainsBlockScopedBinding = 262144] = "ContainsBlockScopedBinding", e[e.ContainsBindingPattern = 524288] = "ContainsBindingPattern", e[e.ContainsYield = 1048576] = "ContainsYield", e[e.ContainsAwait = 2097152] = "ContainsAwait", e[e.ContainsHoistedDeclarationOrCompletion = 4194304] = "ContainsHoistedDeclarationOrCompletion", e[e.ContainsDynamicImport = 8388608] = "ContainsDynamicImport", e[e.ContainsClassFields = 16777216] = "ContainsClassFields", e[e.ContainsDecorators = 33554432] = "ContainsDecorators", e[e.ContainsPossibleTopLevelAwait = 67108864] = "ContainsPossibleTopLevelAwait", e[e.ContainsLexicalSuper = 134217728] = "ContainsLexicalSuper", e[e.ContainsUpdateExpressionForIdentifier = 268435456] = "ContainsUpdateExpressionForIdentifier", e[e.ContainsPrivateIdentifierInExpression = 536870912] = "ContainsPrivateIdentifierInExpression", e[e.HasComputedFlags = -2147483648] = "HasComputedFlags", e[e.AssertTypeScript = 1] = "AssertTypeScript", e[e.AssertJsx = 2] = "AssertJsx", e[e.AssertESNext = 4] = "AssertESNext", e[e.AssertES2022 = 8] = "AssertES2022", e[e.AssertES2021 = 16] = "AssertES2021", e[e.AssertES2020 = 32] = "AssertES2020", e[e.AssertES2019 = 64] = "AssertES2019", e[e.AssertES2018 = 128] = "AssertES2018", e[e.AssertES2017 = 256] = "AssertES2017", e[e.AssertES2016 = 512] = "AssertES2016", e[e.AssertES2015 = 1024] = "AssertES2015", e[e.AssertGenerator = 2048] = "AssertGenerator", e[e.AssertDestructuringAssignment = 4096] = "AssertDestructuringAssignment", e[e.OuterExpressionExcludes = -2147483648] = "OuterExpressionExcludes", e[e.PropertyAccessExcludes = -2147483648] = "PropertyAccessExcludes", e[e.NodeExcludes = -2147483648] = "NodeExcludes", e[e.ArrowFunctionExcludes = -2072174592] = "ArrowFunctionExcludes", e[e.FunctionExcludes = -1937940480] = "FunctionExcludes", e[e.ConstructorExcludes = -1937948672] = "ConstructorExcludes", e[e.MethodOrAccessorExcludes = -2005057536] = "MethodOrAccessorExcludes", e[e.PropertyExcludes = -2013249536] = "PropertyExcludes", e[e.ClassExcludes = -2147344384] = "ClassExcludes", e[e.ModuleExcludes = -1941676032] = "ModuleExcludes", e[e.TypeExcludes = -2] = "TypeExcludes", e[e.ObjectLiteralExcludes = -2147278848] = "ObjectLiteralExcludes", e[e.ArrayLiteralOrCallOrNewExcludes = -2147450880] = "ArrayLiteralOrCallOrNewExcludes", e[e.VariableDeclarationListExcludes = -2146893824] = "VariableDeclarationListExcludes", e[e.ParameterExcludes = -2147483648] = "ParameterExcludes", e[e.CatchClauseExcludes = -2147418112] = "CatchClauseExcludes", e[e.BindingPatternExcludes = -2147450880] = "BindingPatternExcludes", e[e.ContainsLexicalThisOrSuper = 134234112] = "ContainsLexicalThisOrSuper", e[e.PropertyNamePropagatingFlags = 134234112] = "PropertyNamePropagatingFlags", e))(Up || {}), zp = ((e) => (e[e.TabStop = 0] = "TabStop", e[e.Placeholder = 1] = "Placeholder", e[e.Choice = 2] = "Choice", e[e.Variable = 3] = "Variable", e))(zp || {}), Wp = ((e) => (e[e.None = 0] = "None", e[e.SingleLine = 1] = "SingleLine", e[e.MultiLine = 2] = "MultiLine", e[e.AdviseOnEmitNode = 4] = "AdviseOnEmitNode", e[e.NoSubstitution = 8] = "NoSubstitution", e[e.CapturesThis = 16] = "CapturesThis", e[e.NoLeadingSourceMap = 32] = "NoLeadingSourceMap", e[e.NoTrailingSourceMap = 64] = "NoTrailingSourceMap", e[e.NoSourceMap = 96] = "NoSourceMap", e[e.NoNestedSourceMaps = 128] = "NoNestedSourceMaps", e[e.NoTokenLeadingSourceMaps = 256] = "NoTokenLeadingSourceMaps", e[e.NoTokenTrailingSourceMaps = 512] = "NoTokenTrailingSourceMaps", e[e.NoTokenSourceMaps = 768] = "NoTokenSourceMaps", e[e.NoLeadingComments = 1024] = "NoLeadingComments", e[e.NoTrailingComments = 2048] = "NoTrailingComments", e[e.NoComments = 3072] = "NoComments", e[e.NoNestedComments = 4096] = "NoNestedComments", e[e.HelperName = 8192] = "HelperName", e[e.ExportName = 16384] = "ExportName", e[e.LocalName = 32768] = "LocalName", e[e.InternalName = 65536] = "InternalName", e[e.Indented = 131072] = "Indented", e[e.NoIndentation = 262144] = "NoIndentation", e[e.AsyncFunctionBody = 524288] = "AsyncFunctionBody", e[e.ReuseTempVariableScope = 1048576] = "ReuseTempVariableScope", e[e.CustomPrologue = 2097152] = "CustomPrologue", e[e.NoHoisting = 4194304] = "NoHoisting", e[e.HasEndOfDeclarationMarker = 8388608] = "HasEndOfDeclarationMarker", e[e.Iterator = 16777216] = "Iterator", e[e.NoAsciiEscaping = 33554432] = "NoAsciiEscaping", e))(Wp || {}), Xg = ((e) => (e[e.None = 0] = "None", e[e.TypeScriptClassWrapper = 1] = "TypeScriptClassWrapper", e[e.NeverApplyImportHelper = 2] = "NeverApplyImportHelper", e[e.IgnoreSourceNewlines = 4] = "IgnoreSourceNewlines", e[e.Immutable = 8] = "Immutable", e[e.IndirectCall = 16] = "IndirectCall", e[e.TransformPrivateStaticElements = 32] = "TransformPrivateStaticElements", e))(Xg || {}), Yg = ((e) => (e[e.Extends = 1] = "Extends", e[e.Assign = 2] = "Assign", e[e.Rest = 4] = "Rest", e[e.Decorate = 8] = "Decorate", e[e.ESDecorateAndRunInitializers = 8] = "ESDecorateAndRunInitializers", e[e.Metadata = 16] = "Metadata", e[e.Param = 32] = "Param", e[e.Awaiter = 64] = "Awaiter", e[e.Generator = 128] = "Generator", e[e.Values = 256] = "Values", e[e.Read = 512] = "Read", e[e.SpreadArray = 1024] = "SpreadArray", e[e.Await = 2048] = "Await", e[e.AsyncGenerator = 4096] = "AsyncGenerator", e[e.AsyncDelegator = 8192] = "AsyncDelegator", e[e.AsyncValues = 16384] = "AsyncValues", e[e.ExportStar = 32768] = "ExportStar", e[e.ImportStar = 65536] = "ImportStar", e[e.ImportDefault = 131072] = "ImportDefault", e[e.MakeTemplateObject = 262144] = "MakeTemplateObject", e[e.ClassPrivateFieldGet = 524288] = "ClassPrivateFieldGet", e[e.ClassPrivateFieldSet = 1048576] = "ClassPrivateFieldSet", e[e.ClassPrivateFieldIn = 2097152] = "ClassPrivateFieldIn", e[e.CreateBinding = 4194304] = "CreateBinding", e[e.SetFunctionName = 8388608] = "SetFunctionName", e[e.PropKey = 16777216] = "PropKey", e[e.FirstEmitHelper = 1] = "FirstEmitHelper", e[e.LastEmitHelper = 16777216] = "LastEmitHelper", e[e.ForOfIncludes = 256] = "ForOfIncludes", e[e.ForAwaitOfIncludes = 16384] = "ForAwaitOfIncludes", e[e.AsyncGeneratorIncludes = 6144] = "AsyncGeneratorIncludes", e[e.AsyncDelegatorIncludes = 26624] = "AsyncDelegatorIncludes", e[e.SpreadIncludes = 1536] = "SpreadIncludes", e))(Yg || {}), Qg = ((e) => (e[e.SourceFile = 0] = "SourceFile", e[e.Expression = 1] = "Expression", e[e.IdentifierName = 2] = "IdentifierName", e[e.MappedTypeParameter = 3] = "MappedTypeParameter", e[e.Unspecified = 4] = "Unspecified", e[e.EmbeddedStatement = 5] = "EmbeddedStatement", e[e.JsxAttributeValue = 6] = "JsxAttributeValue", e))(Qg || {}), Zg = ((e) => (e[e.Parentheses = 1] = "Parentheses", e[e.TypeAssertions = 2] = "TypeAssertions", e[e.NonNullAssertions = 4] = "NonNullAssertions", e[e.PartiallyEmittedExpressions = 8] = "PartiallyEmittedExpressions", e[e.Assertions = 6] = "Assertions", e[e.All = 15] = "All", e[e.ExcludeJSDocTypeAssertion = 16] = "ExcludeJSDocTypeAssertion", e))(Zg || {}), ey = ((e) => (e[e.None = 0] = "None", e[e.InParameters = 1] = "InParameters", e[e.VariablesHoistedInParameters = 2] = "VariablesHoistedInParameters", e))(ey || {}), ty = ((e) => (e.Prologue = "prologue", e.EmitHelpers = "emitHelpers", e.NoDefaultLib = "no-default-lib", e.Reference = "reference", e.Type = "type", e.TypeResolutionModeRequire = "type-require", e.TypeResolutionModeImport = "type-import", e.Lib = "lib", e.Prepend = "prepend", e.Text = "text", e.Internal = "internal", e))(ty || {}), ry = ((e) => (e[e.None = 0] = "None", e[e.SingleLine = 0] = "SingleLine", e[e.MultiLine = 1] = "MultiLine", e[e.PreserveLines = 2] = "PreserveLines", e[e.LinesMask = 3] = "LinesMask", e[e.NotDelimited = 0] = "NotDelimited", e[e.BarDelimited = 4] = "BarDelimited", e[e.AmpersandDelimited = 8] = "AmpersandDelimited", e[e.CommaDelimited = 16] = "CommaDelimited", e[e.AsteriskDelimited = 32] = "AsteriskDelimited", e[e.DelimitersMask = 60] = "DelimitersMask", e[e.AllowTrailingComma = 64] = "AllowTrailingComma", e[e.Indented = 128] = "Indented", e[e.SpaceBetweenBraces = 256] = "SpaceBetweenBraces", e[e.SpaceBetweenSiblings = 512] = "SpaceBetweenSiblings", e[e.Braces = 1024] = "Braces", e[e.Parenthesis = 2048] = "Parenthesis", e[e.AngleBrackets = 4096] = "AngleBrackets", e[e.SquareBrackets = 8192] = "SquareBrackets", e[e.BracketsMask = 15360] = "BracketsMask", e[e.OptionalIfUndefined = 16384] = "OptionalIfUndefined", e[e.OptionalIfEmpty = 32768] = "OptionalIfEmpty", e[e.Optional = 49152] = "Optional", e[e.PreferNewLine = 65536] = "PreferNewLine", e[e.NoTrailingNewLine = 131072] = "NoTrailingNewLine", e[e.NoInterveningComments = 262144] = "NoInterveningComments", e[e.NoSpaceIfEmpty = 524288] = "NoSpaceIfEmpty", e[e.SingleElement = 1048576] = "SingleElement", e[e.SpaceAfterList = 2097152] = "SpaceAfterList", e[e.Modifiers = 2359808] = "Modifiers", e[e.HeritageClauses = 512] = "HeritageClauses", e[e.SingleLineTypeLiteralMembers = 768] = "SingleLineTypeLiteralMembers", e[e.MultiLineTypeLiteralMembers = 32897] = "MultiLineTypeLiteralMembers", e[e.SingleLineTupleTypeElements = 528] = "SingleLineTupleTypeElements", e[e.MultiLineTupleTypeElements = 657] = "MultiLineTupleTypeElements", e[e.UnionTypeConstituents = 516] = "UnionTypeConstituents", e[e.IntersectionTypeConstituents = 520] = "IntersectionTypeConstituents", e[e.ObjectBindingPatternElements = 525136] = "ObjectBindingPatternElements", e[e.ArrayBindingPatternElements = 524880] = "ArrayBindingPatternElements", e[e.ObjectLiteralExpressionProperties = 526226] = "ObjectLiteralExpressionProperties", e[e.ImportClauseEntries = 526226] = "ImportClauseEntries", e[e.ArrayLiteralExpressionElements = 8914] = "ArrayLiteralExpressionElements", e[e.CommaListElements = 528] = "CommaListElements", e[e.CallExpressionArguments = 2576] = "CallExpressionArguments", e[e.NewExpressionArguments = 18960] = "NewExpressionArguments", e[e.TemplateExpressionSpans = 262144] = "TemplateExpressionSpans", e[e.SingleLineBlockStatements = 768] = "SingleLineBlockStatements", e[e.MultiLineBlockStatements = 129] = "MultiLineBlockStatements", e[e.VariableDeclarationList = 528] = "VariableDeclarationList", e[e.SingleLineFunctionBodyStatements = 768] = "SingleLineFunctionBodyStatements", e[e.MultiLineFunctionBodyStatements = 1] = "MultiLineFunctionBodyStatements", e[e.ClassHeritageClauses = 0] = "ClassHeritageClauses", e[e.ClassMembers = 129] = "ClassMembers", e[e.InterfaceMembers = 129] = "InterfaceMembers", e[e.EnumMembers = 145] = "EnumMembers", e[e.CaseBlockClauses = 129] = "CaseBlockClauses", e[e.NamedImportsOrExportsElements = 525136] = "NamedImportsOrExportsElements", e[e.JsxElementOrFragmentChildren = 262144] = "JsxElementOrFragmentChildren", e[e.JsxElementAttributes = 262656] = "JsxElementAttributes", e[e.CaseOrDefaultClauseStatements = 163969] = "CaseOrDefaultClauseStatements", e[e.HeritageClauseTypes = 528] = "HeritageClauseTypes", e[e.SourceFileStatements = 131073] = "SourceFileStatements", e[e.Decorators = 2146305] = "Decorators", e[e.TypeArguments = 53776] = "TypeArguments", e[e.TypeParameters = 53776] = "TypeParameters", e[e.Parameters = 2576] = "Parameters", e[e.IndexSignatureParameters = 8848] = "IndexSignatureParameters", e[e.JSDocComment = 33] = "JSDocComment", e))(ry || {}), ny = ((e) => (e[e.None = 0] = "None", e[e.TripleSlashXML = 1] = "TripleSlashXML", e[e.SingleLine = 2] = "SingleLine", e[e.MultiLine = 4] = "MultiLine", e[e.All = 7] = "All", e[e.Default = 7] = "Default", e))(ny || {}), Vp = { reference: { args: [{ name: "types", optional: true, captureSpan: true }, { name: "lib", optional: true, captureSpan: true }, { name: "path", optional: true, captureSpan: true }, { name: "no-default-lib", optional: true }, { name: "resolution-mode", optional: true }], kind: 1 }, "amd-dependency": { args: [{ name: "path" }, { name: "name", optional: true }], kind: 1 }, "amd-module": { args: [{ name: "name" }], kind: 1 }, "ts-check": { kind: 2 }, "ts-nocheck": { kind: 2 }, jsx: { args: [{ name: "factory" }], kind: 4 }, jsxfrag: { args: [{ name: "factory" }], kind: 4 }, jsximportsource: { args: [{ name: "factory" }], kind: 4 }, jsxruntime: { args: [{ name: "factory" }], kind: 4 } };
        } }), iy;
        function ay(e) {
          return e === 47 || e === 92;
        }
        function V5(e) {
          return al(e) < 0;
        }
        function A_(e) {
          return al(e) > 0;
        }
        function H5(e) {
          let t = al(e);
          return t > 0 && t === e.length;
        }
        function sy(e) {
          return al(e) !== 0;
        }
        function So(e) {
          return /^\.\.?($|[\\/])/.test(e);
        }
        function G5(e) {
          return !sy(e) && !So(e);
        }
        function OT(e) {
          return Fi(sl(e), ".");
        }
        function ns(e, t) {
          return e.length > t.length && es(e, t);
        }
        function da(e, t) {
          for (let r of t)
            if (ns(e, r))
              return true;
          return false;
        }
        function Hp(e) {
          return e.length > 0 && ay(e.charCodeAt(e.length - 1));
        }
        function MT(e) {
          return e >= 97 && e <= 122 || e >= 65 && e <= 90;
        }
        function $5(e, t) {
          let r = e.charCodeAt(t);
          if (r === 58)
            return t + 1;
          if (r === 37 && e.charCodeAt(t + 1) === 51) {
            let s = e.charCodeAt(t + 2);
            if (s === 97 || s === 65)
              return t + 3;
          }
          return -1;
        }
        function al(e) {
          if (!e)
            return 0;
          let t = e.charCodeAt(0);
          if (t === 47 || t === 92) {
            if (e.charCodeAt(1) !== t)
              return 1;
            let s = e.indexOf(t === 47 ? zn : py, 2);
            return s < 0 ? e.length : s + 1;
          }
          if (MT(t) && e.charCodeAt(1) === 58) {
            let s = e.charCodeAt(2);
            if (s === 47 || s === 92)
              return 3;
            if (e.length === 2)
              return 2;
          }
          let r = e.indexOf(fy);
          if (r !== -1) {
            let s = r + fy.length, f = e.indexOf(zn, s);
            if (f !== -1) {
              let x = e.slice(0, r), w = e.slice(s, f);
              if (x === "file" && (w === "" || w === "localhost") && MT(e.charCodeAt(f + 1))) {
                let A = $5(e, f + 2);
                if (A !== -1) {
                  if (e.charCodeAt(A) === 47)
                    return ~(A + 1);
                  if (A === e.length)
                    return ~A;
                }
              }
              return ~(f + 1);
            }
            return ~e.length;
          }
          return 0;
        }
        function Bi(e) {
          let t = al(e);
          return t < 0 ? ~t : t;
        }
        function ma(e) {
          e = Eo(e);
          let t = Bi(e);
          return t === e.length ? e : (e = P_(e), e.slice(0, Math.max(t, e.lastIndexOf(zn))));
        }
        function sl(e, t, r) {
          if (e = Eo(e), Bi(e) === e.length)
            return "";
          e = P_(e);
          let f = e.slice(Math.max(Bi(e), e.lastIndexOf(zn) + 1)), x = t !== void 0 && r !== void 0 ? Gp(f, t, r) : void 0;
          return x ? f.slice(0, f.length - x.length) : f;
        }
        function LT(e, t, r) {
          if (Pn(t, ".") || (t = "." + t), e.length >= t.length && e.charCodeAt(e.length - t.length) === 46) {
            let s = e.slice(e.length - t.length);
            if (r(s, t))
              return s;
          }
        }
        function K5(e, t, r) {
          if (typeof t == "string")
            return LT(e, t, r) || "";
          for (let s of t) {
            let f = LT(e, s, r);
            if (f)
              return f;
          }
          return "";
        }
        function Gp(e, t, r) {
          if (t)
            return K5(P_(e), t, r ? Ms : To);
          let s = sl(e), f = s.lastIndexOf(".");
          return f >= 0 ? s.substring(f) : "";
        }
        function X5(e, t) {
          let r = e.substring(0, t), s = e.substring(t).split(zn);
          return s.length && !Cn(s) && s.pop(), [r, ...s];
        }
        function qi(e) {
          let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
          return e = tn(t, e), X5(e, Bi(e));
        }
        function xo(e) {
          return e.length === 0 ? "" : (e[0] && wo(e[0])) + e.slice(1).join(zn);
        }
        function Eo(e) {
          return e.indexOf("\\") !== -1 ? e.replace(BT, zn) : e;
        }
        function is(e) {
          if (!Ke(e))
            return [];
          let t = [e[0]];
          for (let r = 1; r < e.length; r++) {
            let s = e[r];
            if (s && s !== ".") {
              if (s === "..") {
                if (t.length > 1) {
                  if (t[t.length - 1] !== "..") {
                    t.pop();
                    continue;
                  }
                } else if (t[0])
                  continue;
              }
              t.push(s);
            }
          }
          return t;
        }
        function tn(e) {
          e && (e = Eo(e));
          for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++)
            r[s - 1] = arguments[s];
          for (let f of r)
            f && (f = Eo(f), !e || Bi(f) !== 0 ? e = f : e = wo(e) + f);
          return e;
        }
        function oy(e) {
          for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++)
            r[s - 1] = arguments[s];
          return Un(Ke(r) ? tn(e, ...r) : Eo(e));
        }
        function $p(e, t) {
          return is(qi(e, t));
        }
        function as(e, t) {
          return xo($p(e, t));
        }
        function Un(e) {
          if (e = Eo(e), !ol.test(e))
            return e;
          let t = e.replace(/\/\.\//g, "/").replace(/^\.\//, "");
          if (t !== e && (e = t, !ol.test(e)))
            return e;
          let r = xo(is(qi(e)));
          return r && Hp(e) ? wo(r) : r;
        }
        function Y5(e) {
          return e.length === 0 ? "" : e.slice(1).join(zn);
        }
        function Q5(e, t) {
          return Y5($p(e, t));
        }
        function Ui(e, t, r) {
          let s = A_(e) ? Un(e) : as(e, t);
          return r(s);
        }
        function P_(e) {
          return Hp(e) ? e.substr(0, e.length - 1) : e;
        }
        function wo(e) {
          return Hp(e) ? e : e + zn;
        }
        function _y(e) {
          return !sy(e) && !So(e) ? "./" + e : e;
        }
        function RT(e, t, r, s) {
          let f = r !== void 0 && s !== void 0 ? Gp(e, r, s) : Gp(e);
          return f ? e.slice(0, e.length - f.length) + (Pn(t, ".") ? t : "." + t) : e;
        }
        function cy(e, t, r) {
          if (e === t)
            return 0;
          if (e === void 0)
            return -1;
          if (t === void 0)
            return 1;
          let s = e.substring(0, Bi(e)), f = t.substring(0, Bi(t)), x = C_(s, f);
          if (x !== 0)
            return x;
          let w = e.substring(s.length), A = t.substring(f.length);
          if (!ol.test(w) && !ol.test(A))
            return r(w, A);
          let g = is(qi(e)), B = is(qi(t)), N = Math.min(g.length, B.length);
          for (let X = 1; X < N; X++) {
            let F = r(g[X], B[X]);
            if (F !== 0)
              return F;
          }
          return Vr(g.length, B.length);
        }
        function Z5(e, t) {
          return cy(e, t, ri);
        }
        function eA(e, t) {
          return cy(e, t, C_);
        }
        function tA(e, t, r, s) {
          return typeof r == "string" ? (e = tn(r, e), t = tn(r, t)) : typeof r == "boolean" && (s = r), cy(e, t, rl(s));
        }
        function jT(e, t, r, s) {
          if (typeof r == "string" ? (e = tn(r, e), t = tn(r, t)) : typeof r == "boolean" && (s = r), e === void 0 || t === void 0)
            return false;
          if (e === t)
            return true;
          let f = is(qi(e)), x = is(qi(t));
          if (x.length < f.length)
            return false;
          let w = s ? Ms : To;
          for (let A = 0; A < f.length; A++)
            if (!(A === 0 ? Ms : w)(f[A], x[A]))
              return false;
          return true;
        }
        function rA(e, t, r) {
          let s = r(e), f = r(t);
          return Pn(s, f + "/") || Pn(s, f + "\\");
        }
        function ly(e, t, r, s) {
          let f = is(qi(e)), x = is(qi(t)), w;
          for (w = 0; w < f.length && w < x.length; w++) {
            let B = s(f[w]), N = s(x[w]);
            if (!(w === 0 ? Ms : r)(B, N))
              break;
          }
          if (w === 0)
            return x;
          let A = x.slice(w), g = [];
          for (; w < f.length; w++)
            g.push("..");
          return ["", ...g, ...A];
        }
        function JT(e, t, r) {
          Y.assert(Bi(e) > 0 == Bi(t) > 0, "Paths must either both be absolute or both be relative");
          let x = ly(e, t, (typeof r == "boolean" ? r : false) ? Ms : To, typeof r == "function" ? r : rr);
          return xo(x);
        }
        function nA(e, t, r) {
          return A_(e) ? uy(t, e, t, r, false) : e;
        }
        function iA(e, t, r) {
          return _y(JT(ma(e), t, r));
        }
        function uy(e, t, r, s, f) {
          let x = ly(oy(r, e), oy(r, t), To, s), w = x[0];
          if (f && A_(w)) {
            let A = w.charAt(0) === zn ? "file://" : "file:///";
            x[0] = A + w;
          }
          return xo(x);
        }
        function FT(e, t) {
          for (; ; ) {
            let r = t(e);
            if (r !== void 0)
              return r;
            let s = ma(e);
            if (s === e)
              return;
            e = s;
          }
        }
        function aA(e) {
          return es(e, "/node_modules");
        }
        var zn, py, fy, BT, ol, sA = D({ "src/compiler/path.ts"() {
          nn(), zn = "/", py = "\\", fy = "://", BT = /\\/g, ol = /(?:\/\/)|(?:^|\/)\.\.?(?:$|\/)/;
        } });
        function i2(e, t, r, s, f, x, w) {
          return { code: e, category: t, key: r, message: s, reportsUnnecessary: f, elidedInCompatabilityPyramid: x, reportsDeprecated: w };
        }
        var ve, oA = D({ "src/compiler/diagnosticInformationMap.generated.ts"() {
          NT(), ve = { Unterminated_string_literal: i2(1002, 1, "Unterminated_string_literal_1002", "Unterminated string literal."), Identifier_expected: i2(1003, 1, "Identifier_expected_1003", "Identifier expected."), _0_expected: i2(1005, 1, "_0_expected_1005", "'{0}' expected."), A_file_cannot_have_a_reference_to_itself: i2(1006, 1, "A_file_cannot_have_a_reference_to_itself_1006", "A file cannot have a reference to itself."), The_parser_expected_to_find_a_1_to_match_the_0_token_here: i2(1007, 1, "The_parser_expected_to_find_a_1_to_match_the_0_token_here_1007", "The parser expected to find a '{1}' to match the '{0}' token here."), Trailing_comma_not_allowed: i2(1009, 1, "Trailing_comma_not_allowed_1009", "Trailing comma not allowed."), Asterisk_Slash_expected: i2(1010, 1, "Asterisk_Slash_expected_1010", "'*/' expected."), An_element_access_expression_should_take_an_argument: i2(1011, 1, "An_element_access_expression_should_take_an_argument_1011", "An element access expression should take an argument."), Unexpected_token: i2(1012, 1, "Unexpected_token_1012", "Unexpected token."), A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma: i2(1013, 1, "A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma_1013", "A rest parameter or binding pattern may not have a trailing comma."), A_rest_parameter_must_be_last_in_a_parameter_list: i2(1014, 1, "A_rest_parameter_must_be_last_in_a_parameter_list_1014", "A rest parameter must be last in a parameter list."), Parameter_cannot_have_question_mark_and_initializer: i2(1015, 1, "Parameter_cannot_have_question_mark_and_initializer_1015", "Parameter cannot have question mark and initializer."), A_required_parameter_cannot_follow_an_optional_parameter: i2(1016, 1, "A_required_parameter_cannot_follow_an_optional_parameter_1016", "A required parameter cannot follow an optional parameter."), An_index_signature_cannot_have_a_rest_parameter: i2(1017, 1, "An_index_signature_cannot_have_a_rest_parameter_1017", "An index signature cannot have a rest parameter."), An_index_signature_parameter_cannot_have_an_accessibility_modifier: i2(1018, 1, "An_index_signature_parameter_cannot_have_an_accessibility_modifier_1018", "An index signature parameter cannot have an accessibility modifier."), An_index_signature_parameter_cannot_have_a_question_mark: i2(1019, 1, "An_index_signature_parameter_cannot_have_a_question_mark_1019", "An index signature parameter cannot have a question mark."), An_index_signature_parameter_cannot_have_an_initializer: i2(1020, 1, "An_index_signature_parameter_cannot_have_an_initializer_1020", "An index signature parameter cannot have an initializer."), An_index_signature_must_have_a_type_annotation: i2(1021, 1, "An_index_signature_must_have_a_type_annotation_1021", "An index signature must have a type annotation."), An_index_signature_parameter_must_have_a_type_annotation: i2(1022, 1, "An_index_signature_parameter_must_have_a_type_annotation_1022", "An index signature parameter must have a type annotation."), readonly_modifier_can_only_appear_on_a_property_declaration_or_index_signature: i2(1024, 1, "readonly_modifier_can_only_appear_on_a_property_declaration_or_index_signature_1024", "'readonly' modifier can only appear on a property declaration or index signature."), An_index_signature_cannot_have_a_trailing_comma: i2(1025, 1, "An_index_signature_cannot_have_a_trailing_comma_1025", "An index signature cannot have a trailing comma."), Accessibility_modifier_already_seen: i2(1028, 1, "Accessibility_modifier_already_seen_1028", "Accessibility modifier already seen."), _0_modifier_must_precede_1_modifier: i2(1029, 1, "_0_modifier_must_precede_1_modifier_1029", "'{0}' modifier must precede '{1}' modifier."), _0_modifier_already_seen: i2(1030, 1, "_0_modifier_already_seen_1030", "'{0}' modifier already seen."), _0_modifier_cannot_appear_on_class_elements_of_this_kind: i2(1031, 1, "_0_modifier_cannot_appear_on_class_elements_of_this_kind_1031", "'{0}' modifier cannot appear on class elements of this kind."), super_must_be_followed_by_an_argument_list_or_member_access: i2(1034, 1, "super_must_be_followed_by_an_argument_list_or_member_access_1034", "'super' must be followed by an argument list or member access."), Only_ambient_modules_can_use_quoted_names: i2(1035, 1, "Only_ambient_modules_can_use_quoted_names_1035", "Only ambient modules can use quoted names."), Statements_are_not_allowed_in_ambient_contexts: i2(1036, 1, "Statements_are_not_allowed_in_ambient_contexts_1036", "Statements are not allowed in ambient contexts."), A_declare_modifier_cannot_be_used_in_an_already_ambient_context: i2(1038, 1, "A_declare_modifier_cannot_be_used_in_an_already_ambient_context_1038", "A 'declare' modifier cannot be used in an already ambient context."), Initializers_are_not_allowed_in_ambient_contexts: i2(1039, 1, "Initializers_are_not_allowed_in_ambient_contexts_1039", "Initializers are not allowed in ambient contexts."), _0_modifier_cannot_be_used_in_an_ambient_context: i2(1040, 1, "_0_modifier_cannot_be_used_in_an_ambient_context_1040", "'{0}' modifier cannot be used in an ambient context."), _0_modifier_cannot_be_used_here: i2(1042, 1, "_0_modifier_cannot_be_used_here_1042", "'{0}' modifier cannot be used here."), _0_modifier_cannot_appear_on_a_module_or_namespace_element: i2(1044, 1, "_0_modifier_cannot_appear_on_a_module_or_namespace_element_1044", "'{0}' modifier cannot appear on a module or namespace element."), Top_level_declarations_in_d_ts_files_must_start_with_either_a_declare_or_export_modifier: i2(1046, 1, "Top_level_declarations_in_d_ts_files_must_start_with_either_a_declare_or_export_modifier_1046", "Top-level declarations in .d.ts files must start with either a 'declare' or 'export' modifier."), A_rest_parameter_cannot_be_optional: i2(1047, 1, "A_rest_parameter_cannot_be_optional_1047", "A rest parameter cannot be optional."), A_rest_parameter_cannot_have_an_initializer: i2(1048, 1, "A_rest_parameter_cannot_have_an_initializer_1048", "A rest parameter cannot have an initializer."), A_set_accessor_must_have_exactly_one_parameter: i2(1049, 1, "A_set_accessor_must_have_exactly_one_parameter_1049", "A 'set' accessor must have exactly one parameter."), A_set_accessor_cannot_have_an_optional_parameter: i2(1051, 1, "A_set_accessor_cannot_have_an_optional_parameter_1051", "A 'set' accessor cannot have an optional parameter."), A_set_accessor_parameter_cannot_have_an_initializer: i2(1052, 1, "A_set_accessor_parameter_cannot_have_an_initializer_1052", "A 'set' accessor parameter cannot have an initializer."), A_set_accessor_cannot_have_rest_parameter: i2(1053, 1, "A_set_accessor_cannot_have_rest_parameter_1053", "A 'set' accessor cannot have rest parameter."), A_get_accessor_cannot_have_parameters: i2(1054, 1, "A_get_accessor_cannot_have_parameters_1054", "A 'get' accessor cannot have parameters."), Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Promise_compatible_constructor_value: i2(1055, 1, "Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Prom_1055", "Type '{0}' is not a valid async function return type in ES5/ES3 because it does not refer to a Promise-compatible constructor value."), Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher: i2(1056, 1, "Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher_1056", "Accessors are only available when targeting ECMAScript 5 and higher."), The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: i2(1058, 1, "The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_t_1058", "The return type of an async function must either be a valid promise or must not contain a callable 'then' member."), A_promise_must_have_a_then_method: i2(1059, 1, "A_promise_must_have_a_then_method_1059", "A promise must have a 'then' method."), The_first_parameter_of_the_then_method_of_a_promise_must_be_a_callback: i2(1060, 1, "The_first_parameter_of_the_then_method_of_a_promise_must_be_a_callback_1060", "The first parameter of the 'then' method of a promise must be a callback."), Enum_member_must_have_initializer: i2(1061, 1, "Enum_member_must_have_initializer_1061", "Enum member must have initializer."), Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method: i2(1062, 1, "Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method_1062", "Type is referenced directly or indirectly in the fulfillment callback of its own 'then' method."), An_export_assignment_cannot_be_used_in_a_namespace: i2(1063, 1, "An_export_assignment_cannot_be_used_in_a_namespace_1063", "An export assignment cannot be used in a namespace."), The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type_Did_you_mean_to_write_Promise_0: i2(1064, 1, "The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type_Did_you_mean_to_wri_1064", "The return type of an async function or method must be the global Promise<T> type. Did you mean to write 'Promise<{0}>'?"), In_ambient_enum_declarations_member_initializer_must_be_constant_expression: i2(1066, 1, "In_ambient_enum_declarations_member_initializer_must_be_constant_expression_1066", "In ambient enum declarations member initializer must be constant expression."), Unexpected_token_A_constructor_method_accessor_or_property_was_expected: i2(1068, 1, "Unexpected_token_A_constructor_method_accessor_or_property_was_expected_1068", "Unexpected token. A constructor, method, accessor, or property was expected."), Unexpected_token_A_type_parameter_name_was_expected_without_curly_braces: i2(1069, 1, "Unexpected_token_A_type_parameter_name_was_expected_without_curly_braces_1069", "Unexpected token. A type parameter name was expected without curly braces."), _0_modifier_cannot_appear_on_a_type_member: i2(1070, 1, "_0_modifier_cannot_appear_on_a_type_member_1070", "'{0}' modifier cannot appear on a type member."), _0_modifier_cannot_appear_on_an_index_signature: i2(1071, 1, "_0_modifier_cannot_appear_on_an_index_signature_1071", "'{0}' modifier cannot appear on an index signature."), A_0_modifier_cannot_be_used_with_an_import_declaration: i2(1079, 1, "A_0_modifier_cannot_be_used_with_an_import_declaration_1079", "A '{0}' modifier cannot be used with an import declaration."), Invalid_reference_directive_syntax: i2(1084, 1, "Invalid_reference_directive_syntax_1084", "Invalid 'reference' directive syntax."), Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher_Use_the_syntax_0: i2(1085, 1, "Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher_Use_the_syntax_0_1085", "Octal literals are not available when targeting ECMAScript 5 and higher. Use the syntax '{0}'."), _0_modifier_cannot_appear_on_a_constructor_declaration: i2(1089, 1, "_0_modifier_cannot_appear_on_a_constructor_declaration_1089", "'{0}' modifier cannot appear on a constructor declaration."), _0_modifier_cannot_appear_on_a_parameter: i2(1090, 1, "_0_modifier_cannot_appear_on_a_parameter_1090", "'{0}' modifier cannot appear on a parameter."), Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement: i2(1091, 1, "Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement_1091", "Only a single variable declaration is allowed in a 'for...in' statement."), Type_parameters_cannot_appear_on_a_constructor_declaration: i2(1092, 1, "Type_parameters_cannot_appear_on_a_constructor_declaration_1092", "Type parameters cannot appear on a constructor declaration."), Type_annotation_cannot_appear_on_a_constructor_declaration: i2(1093, 1, "Type_annotation_cannot_appear_on_a_constructor_declaration_1093", "Type annotation cannot appear on a constructor declaration."), An_accessor_cannot_have_type_parameters: i2(1094, 1, "An_accessor_cannot_have_type_parameters_1094", "An accessor cannot have type parameters."), A_set_accessor_cannot_have_a_return_type_annotation: i2(1095, 1, "A_set_accessor_cannot_have_a_return_type_annotation_1095", "A 'set' accessor cannot have a return type annotation."), An_index_signature_must_have_exactly_one_parameter: i2(1096, 1, "An_index_signature_must_have_exactly_one_parameter_1096", "An index signature must have exactly one parameter."), _0_list_cannot_be_empty: i2(1097, 1, "_0_list_cannot_be_empty_1097", "'{0}' list cannot be empty."), Type_parameter_list_cannot_be_empty: i2(1098, 1, "Type_parameter_list_cannot_be_empty_1098", "Type parameter list cannot be empty."), Type_argument_list_cannot_be_empty: i2(1099, 1, "Type_argument_list_cannot_be_empty_1099", "Type argument list cannot be empty."), Invalid_use_of_0_in_strict_mode: i2(1100, 1, "Invalid_use_of_0_in_strict_mode_1100", "Invalid use of '{0}' in strict mode."), with_statements_are_not_allowed_in_strict_mode: i2(1101, 1, "with_statements_are_not_allowed_in_strict_mode_1101", "'with' statements are not allowed in strict mode."), delete_cannot_be_called_on_an_identifier_in_strict_mode: i2(1102, 1, "delete_cannot_be_called_on_an_identifier_in_strict_mode_1102", "'delete' cannot be called on an identifier in strict mode."), for_await_loops_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules: i2(1103, 1, "for_await_loops_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules_1103", "'for await' loops are only allowed within async functions and at the top levels of modules."), A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement: i2(1104, 1, "A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement_1104", "A 'continue' statement can only be used within an enclosing iteration statement."), A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement: i2(1105, 1, "A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement_1105", "A 'break' statement can only be used within an enclosing iteration or switch statement."), The_left_hand_side_of_a_for_of_statement_may_not_be_async: i2(1106, 1, "The_left_hand_side_of_a_for_of_statement_may_not_be_async_1106", "The left-hand side of a 'for...of' statement may not be 'async'."), Jump_target_cannot_cross_function_boundary: i2(1107, 1, "Jump_target_cannot_cross_function_boundary_1107", "Jump target cannot cross function boundary."), A_return_statement_can_only_be_used_within_a_function_body: i2(1108, 1, "A_return_statement_can_only_be_used_within_a_function_body_1108", "A 'return' statement can only be used within a function body."), Expression_expected: i2(1109, 1, "Expression_expected_1109", "Expression expected."), Type_expected: i2(1110, 1, "Type_expected_1110", "Type expected."), A_default_clause_cannot_appear_more_than_once_in_a_switch_statement: i2(1113, 1, "A_default_clause_cannot_appear_more_than_once_in_a_switch_statement_1113", "A 'default' clause cannot appear more than once in a 'switch' statement."), Duplicate_label_0: i2(1114, 1, "Duplicate_label_0_1114", "Duplicate label '{0}'."), A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement: i2(1115, 1, "A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement_1115", "A 'continue' statement can only jump to a label of an enclosing iteration statement."), A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement: i2(1116, 1, "A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement_1116", "A 'break' statement can only jump to a label of an enclosing statement."), An_object_literal_cannot_have_multiple_properties_with_the_same_name: i2(1117, 1, "An_object_literal_cannot_have_multiple_properties_with_the_same_name_1117", "An object literal cannot have multiple properties with the same name."), An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name: i2(1118, 1, "An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name_1118", "An object literal cannot have multiple get/set accessors with the same name."), An_object_literal_cannot_have_property_and_accessor_with_the_same_name: i2(1119, 1, "An_object_literal_cannot_have_property_and_accessor_with_the_same_name_1119", "An object literal cannot have property and accessor with the same name."), An_export_assignment_cannot_have_modifiers: i2(1120, 1, "An_export_assignment_cannot_have_modifiers_1120", "An export assignment cannot have modifiers."), Octal_literals_are_not_allowed_in_strict_mode: i2(1121, 1, "Octal_literals_are_not_allowed_in_strict_mode_1121", "Octal literals are not allowed in strict mode."), Variable_declaration_list_cannot_be_empty: i2(1123, 1, "Variable_declaration_list_cannot_be_empty_1123", "Variable declaration list cannot be empty."), Digit_expected: i2(1124, 1, "Digit_expected_1124", "Digit expected."), Hexadecimal_digit_expected: i2(1125, 1, "Hexadecimal_digit_expected_1125", "Hexadecimal digit expected."), Unexpected_end_of_text: i2(1126, 1, "Unexpected_end_of_text_1126", "Unexpected end of text."), Invalid_character: i2(1127, 1, "Invalid_character_1127", "Invalid character."), Declaration_or_statement_expected: i2(1128, 1, "Declaration_or_statement_expected_1128", "Declaration or statement expected."), Statement_expected: i2(1129, 1, "Statement_expected_1129", "Statement expected."), case_or_default_expected: i2(1130, 1, "case_or_default_expected_1130", "'case' or 'default' expected."), Property_or_signature_expected: i2(1131, 1, "Property_or_signature_expected_1131", "Property or signature expected."), Enum_member_expected: i2(1132, 1, "Enum_member_expected_1132", "Enum member expected."), Variable_declaration_expected: i2(1134, 1, "Variable_declaration_expected_1134", "Variable declaration expected."), Argument_expression_expected: i2(1135, 1, "Argument_expression_expected_1135", "Argument expression expected."), Property_assignment_expected: i2(1136, 1, "Property_assignment_expected_1136", "Property assignment expected."), Expression_or_comma_expected: i2(1137, 1, "Expression_or_comma_expected_1137", "Expression or comma expected."), Parameter_declaration_expected: i2(1138, 1, "Parameter_declaration_expected_1138", "Parameter declaration expected."), Type_parameter_declaration_expected: i2(1139, 1, "Type_parameter_declaration_expected_1139", "Type parameter declaration expected."), Type_argument_expected: i2(1140, 1, "Type_argument_expected_1140", "Type argument expected."), String_literal_expected: i2(1141, 1, "String_literal_expected_1141", "String literal expected."), Line_break_not_permitted_here: i2(1142, 1, "Line_break_not_permitted_here_1142", "Line break not permitted here."), or_expected: i2(1144, 1, "or_expected_1144", "'{' or ';' expected."), or_JSX_element_expected: i2(1145, 1, "or_JSX_element_expected_1145", "'{' or JSX element expected."), Declaration_expected: i2(1146, 1, "Declaration_expected_1146", "Declaration expected."), Import_declarations_in_a_namespace_cannot_reference_a_module: i2(1147, 1, "Import_declarations_in_a_namespace_cannot_reference_a_module_1147", "Import declarations in a namespace cannot reference a module."), Cannot_use_imports_exports_or_module_augmentations_when_module_is_none: i2(1148, 1, "Cannot_use_imports_exports_or_module_augmentations_when_module_is_none_1148", "Cannot use imports, exports, or module augmentations when '--module' is 'none'."), File_name_0_differs_from_already_included_file_name_1_only_in_casing: i2(1149, 1, "File_name_0_differs_from_already_included_file_name_1_only_in_casing_1149", "File name '{0}' differs from already included file name '{1}' only in casing."), const_declarations_must_be_initialized: i2(1155, 1, "const_declarations_must_be_initialized_1155", "'const' declarations must be initialized."), const_declarations_can_only_be_declared_inside_a_block: i2(1156, 1, "const_declarations_can_only_be_declared_inside_a_block_1156", "'const' declarations can only be declared inside a block."), let_declarations_can_only_be_declared_inside_a_block: i2(1157, 1, "let_declarations_can_only_be_declared_inside_a_block_1157", "'let' declarations can only be declared inside a block."), Unterminated_template_literal: i2(1160, 1, "Unterminated_template_literal_1160", "Unterminated template literal."), Unterminated_regular_expression_literal: i2(1161, 1, "Unterminated_regular_expression_literal_1161", "Unterminated regular expression literal."), An_object_member_cannot_be_declared_optional: i2(1162, 1, "An_object_member_cannot_be_declared_optional_1162", "An object member cannot be declared optional."), A_yield_expression_is_only_allowed_in_a_generator_body: i2(1163, 1, "A_yield_expression_is_only_allowed_in_a_generator_body_1163", "A 'yield' expression is only allowed in a generator body."), Computed_property_names_are_not_allowed_in_enums: i2(1164, 1, "Computed_property_names_are_not_allowed_in_enums_1164", "Computed property names are not allowed in enums."), A_computed_property_name_in_an_ambient_context_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: i2(1165, 1, "A_computed_property_name_in_an_ambient_context_must_refer_to_an_expression_whose_type_is_a_literal_t_1165", "A computed property name in an ambient context must refer to an expression whose type is a literal type or a 'unique symbol' type."), A_computed_property_name_in_a_class_property_declaration_must_have_a_simple_literal_type_or_a_unique_symbol_type: i2(1166, 1, "A_computed_property_name_in_a_class_property_declaration_must_have_a_simple_literal_type_or_a_unique_1166", "A computed property name in a class property declaration must have a simple literal type or a 'unique symbol' type."), A_computed_property_name_in_a_method_overload_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: i2(1168, 1, "A_computed_property_name_in_a_method_overload_must_refer_to_an_expression_whose_type_is_a_literal_ty_1168", "A computed property name in a method overload must refer to an expression whose type is a literal type or a 'unique symbol' type."), A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: i2(1169, 1, "A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_1169", "A computed property name in an interface must refer to an expression whose type is a literal type or a 'unique symbol' type."), A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type: i2(1170, 1, "A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type__1170", "A computed property name in a type literal must refer to an expression whose type is a literal type or a 'unique symbol' type."), A_comma_expression_is_not_allowed_in_a_computed_property_name: i2(1171, 1, "A_comma_expression_is_not_allowed_in_a_computed_property_name_1171", "A comma expression is not allowed in a computed property name."), extends_clause_already_seen: i2(1172, 1, "extends_clause_already_seen_1172", "'extends' clause already seen."), extends_clause_must_precede_implements_clause: i2(1173, 1, "extends_clause_must_precede_implements_clause_1173", "'extends' clause must precede 'implements' clause."), Classes_can_only_extend_a_single_class: i2(1174, 1, "Classes_can_only_extend_a_single_class_1174", "Classes can only extend a single class."), implements_clause_already_seen: i2(1175, 1, "implements_clause_already_seen_1175", "'implements' clause already seen."), Interface_declaration_cannot_have_implements_clause: i2(1176, 1, "Interface_declaration_cannot_have_implements_clause_1176", "Interface declaration cannot have 'implements' clause."), Binary_digit_expected: i2(1177, 1, "Binary_digit_expected_1177", "Binary digit expected."), Octal_digit_expected: i2(1178, 1, "Octal_digit_expected_1178", "Octal digit expected."), Unexpected_token_expected: i2(1179, 1, "Unexpected_token_expected_1179", "Unexpected token. '{' expected."), Property_destructuring_pattern_expected: i2(1180, 1, "Property_destructuring_pattern_expected_1180", "Property destructuring pattern expected."), Array_element_destructuring_pattern_expected: i2(1181, 1, "Array_element_destructuring_pattern_expected_1181", "Array element destructuring pattern expected."), A_destructuring_declaration_must_have_an_initializer: i2(1182, 1, "A_destructuring_declaration_must_have_an_initializer_1182", "A destructuring declaration must have an initializer."), An_implementation_cannot_be_declared_in_ambient_contexts: i2(1183, 1, "An_implementation_cannot_be_declared_in_ambient_contexts_1183", "An implementation cannot be declared in ambient contexts."), Modifiers_cannot_appear_here: i2(1184, 1, "Modifiers_cannot_appear_here_1184", "Modifiers cannot appear here."), Merge_conflict_marker_encountered: i2(1185, 1, "Merge_conflict_marker_encountered_1185", "Merge conflict marker encountered."), A_rest_element_cannot_have_an_initializer: i2(1186, 1, "A_rest_element_cannot_have_an_initializer_1186", "A rest element cannot have an initializer."), A_parameter_property_may_not_be_declared_using_a_binding_pattern: i2(1187, 1, "A_parameter_property_may_not_be_declared_using_a_binding_pattern_1187", "A parameter property may not be declared using a binding pattern."), Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement: i2(1188, 1, "Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement_1188", "Only a single variable declaration is allowed in a 'for...of' statement."), The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer: i2(1189, 1, "The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer_1189", "The variable declaration of a 'for...in' statement cannot have an initializer."), The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer: i2(1190, 1, "The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer_1190", "The variable declaration of a 'for...of' statement cannot have an initializer."), An_import_declaration_cannot_have_modifiers: i2(1191, 1, "An_import_declaration_cannot_have_modifiers_1191", "An import declaration cannot have modifiers."), Module_0_has_no_default_export: i2(1192, 1, "Module_0_has_no_default_export_1192", "Module '{0}' has no default export."), An_export_declaration_cannot_have_modifiers: i2(1193, 1, "An_export_declaration_cannot_have_modifiers_1193", "An export declaration cannot have modifiers."), Export_declarations_are_not_permitted_in_a_namespace: i2(1194, 1, "Export_declarations_are_not_permitted_in_a_namespace_1194", "Export declarations are not permitted in a namespace."), export_Asterisk_does_not_re_export_a_default: i2(1195, 1, "export_Asterisk_does_not_re_export_a_default_1195", "'export *' does not re-export a default."), Catch_clause_variable_type_annotation_must_be_any_or_unknown_if_specified: i2(1196, 1, "Catch_clause_variable_type_annotation_must_be_any_or_unknown_if_specified_1196", "Catch clause variable type annotation must be 'any' or 'unknown' if specified."), Catch_clause_variable_cannot_have_an_initializer: i2(1197, 1, "Catch_clause_variable_cannot_have_an_initializer_1197", "Catch clause variable cannot have an initializer."), An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive: i2(1198, 1, "An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive_1198", "An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive."), Unterminated_Unicode_escape_sequence: i2(1199, 1, "Unterminated_Unicode_escape_sequence_1199", "Unterminated Unicode escape sequence."), Line_terminator_not_permitted_before_arrow: i2(1200, 1, "Line_terminator_not_permitted_before_arrow_1200", "Line terminator not permitted before arrow."), Import_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_import_d_from_mod_or_another_module_format_instead: i2(1202, 1, "Import_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_import_Asterisk_as_1202", `Import assignment cannot be used when targeting ECMAScript modules. Consider using 'import * as ns from "mod"', 'import {a} from "mod"', 'import d from "mod"', or another module format instead.`), Export_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_export_default_or_another_module_format_instead: i2(1203, 1, "Export_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_export_default_or__1203", "Export assignment cannot be used when targeting ECMAScript modules. Consider using 'export default' or another module format instead."), Re_exporting_a_type_when_0_is_enabled_requires_using_export_type: i2(1205, 1, "Re_exporting_a_type_when_0_is_enabled_requires_using_export_type_1205", "Re-exporting a type when '{0}' is enabled requires using 'export type'."), Decorators_are_not_valid_here: i2(1206, 1, "Decorators_are_not_valid_here_1206", "Decorators are not valid here."), Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name: i2(1207, 1, "Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name_1207", "Decorators cannot be applied to multiple get/set accessors of the same name."), Invalid_optional_chain_from_new_expression_Did_you_mean_to_call_0: i2(1209, 1, "Invalid_optional_chain_from_new_expression_Did_you_mean_to_call_0_1209", "Invalid optional chain from new expression. Did you mean to call '{0}()'?"), Code_contained_in_a_class_is_evaluated_in_JavaScript_s_strict_mode_which_does_not_allow_this_use_of_0_For_more_information_see_https_Colon_Slash_Slashdeveloper_mozilla_org_Slashen_US_Slashdocs_SlashWeb_SlashJavaScript_SlashReference_SlashStrict_mode: i2(1210, 1, "Code_contained_in_a_class_is_evaluated_in_JavaScript_s_strict_mode_which_does_not_allow_this_use_of__1210", "Code contained in a class is evaluated in JavaScript's strict mode which does not allow this use of '{0}'. For more information, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode."), A_class_declaration_without_the_default_modifier_must_have_a_name: i2(1211, 1, "A_class_declaration_without_the_default_modifier_must_have_a_name_1211", "A class declaration without the 'default' modifier must have a name."), Identifier_expected_0_is_a_reserved_word_in_strict_mode: i2(1212, 1, "Identifier_expected_0_is_a_reserved_word_in_strict_mode_1212", "Identifier expected. '{0}' is a reserved word in strict mode."), Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode: i2(1213, 1, "Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_stric_1213", "Identifier expected. '{0}' is a reserved word in strict mode. Class definitions are automatically in strict mode."), Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode: i2(1214, 1, "Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode_1214", "Identifier expected. '{0}' is a reserved word in strict mode. Modules are automatically in strict mode."), Invalid_use_of_0_Modules_are_automatically_in_strict_mode: i2(1215, 1, "Invalid_use_of_0_Modules_are_automatically_in_strict_mode_1215", "Invalid use of '{0}'. Modules are automatically in strict mode."), Identifier_expected_esModule_is_reserved_as_an_exported_marker_when_transforming_ECMAScript_modules: i2(1216, 1, "Identifier_expected_esModule_is_reserved_as_an_exported_marker_when_transforming_ECMAScript_modules_1216", "Identifier expected. '__esModule' is reserved as an exported marker when transforming ECMAScript modules."), Export_assignment_is_not_supported_when_module_flag_is_system: i2(1218, 1, "Export_assignment_is_not_supported_when_module_flag_is_system_1218", "Export assignment is not supported when '--module' flag is 'system'."), Generators_are_not_allowed_in_an_ambient_context: i2(1221, 1, "Generators_are_not_allowed_in_an_ambient_context_1221", "Generators are not allowed in an ambient context."), An_overload_signature_cannot_be_declared_as_a_generator: i2(1222, 1, "An_overload_signature_cannot_be_declared_as_a_generator_1222", "An overload signature cannot be declared as a generator."), _0_tag_already_specified: i2(1223, 1, "_0_tag_already_specified_1223", "'{0}' tag already specified."), Signature_0_must_be_a_type_predicate: i2(1224, 1, "Signature_0_must_be_a_type_predicate_1224", "Signature '{0}' must be a type predicate."), Cannot_find_parameter_0: i2(1225, 1, "Cannot_find_parameter_0_1225", "Cannot find parameter '{0}'."), Type_predicate_0_is_not_assignable_to_1: i2(1226, 1, "Type_predicate_0_is_not_assignable_to_1_1226", "Type predicate '{0}' is not assignable to '{1}'."), Parameter_0_is_not_in_the_same_position_as_parameter_1: i2(1227, 1, "Parameter_0_is_not_in_the_same_position_as_parameter_1_1227", "Parameter '{0}' is not in the same position as parameter '{1}'."), A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods: i2(1228, 1, "A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods_1228", "A type predicate is only allowed in return type position for functions and methods."), A_type_predicate_cannot_reference_a_rest_parameter: i2(1229, 1, "A_type_predicate_cannot_reference_a_rest_parameter_1229", "A type predicate cannot reference a rest parameter."), A_type_predicate_cannot_reference_element_0_in_a_binding_pattern: i2(1230, 1, "A_type_predicate_cannot_reference_element_0_in_a_binding_pattern_1230", "A type predicate cannot reference element '{0}' in a binding pattern."), An_export_assignment_must_be_at_the_top_level_of_a_file_or_module_declaration: i2(1231, 1, "An_export_assignment_must_be_at_the_top_level_of_a_file_or_module_declaration_1231", "An export assignment must be at the top level of a file or module declaration."), An_import_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module: i2(1232, 1, "An_import_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module_1232", "An import declaration can only be used at the top level of a namespace or module."), An_export_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module: i2(1233, 1, "An_export_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module_1233", "An export declaration can only be used at the top level of a namespace or module."), An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file: i2(1234, 1, "An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file_1234", "An ambient module declaration is only allowed at the top level in a file."), A_namespace_declaration_is_only_allowed_at_the_top_level_of_a_namespace_or_module: i2(1235, 1, "A_namespace_declaration_is_only_allowed_at_the_top_level_of_a_namespace_or_module_1235", "A namespace declaration is only allowed at the top level of a namespace or module."), The_return_type_of_a_property_decorator_function_must_be_either_void_or_any: i2(1236, 1, "The_return_type_of_a_property_decorator_function_must_be_either_void_or_any_1236", "The return type of a property decorator function must be either 'void' or 'any'."), The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any: i2(1237, 1, "The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any_1237", "The return type of a parameter decorator function must be either 'void' or 'any'."), Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression: i2(1238, 1, "Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression_1238", "Unable to resolve signature of class decorator when called as an expression."), Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression: i2(1239, 1, "Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression_1239", "Unable to resolve signature of parameter decorator when called as an expression."), Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression: i2(1240, 1, "Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression_1240", "Unable to resolve signature of property decorator when called as an expression."), Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression: i2(1241, 1, "Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression_1241", "Unable to resolve signature of method decorator when called as an expression."), abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration: i2(1242, 1, "abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration_1242", "'abstract' modifier can only appear on a class, method, or property declaration."), _0_modifier_cannot_be_used_with_1_modifier: i2(1243, 1, "_0_modifier_cannot_be_used_with_1_modifier_1243", "'{0}' modifier cannot be used with '{1}' modifier."), Abstract_methods_can_only_appear_within_an_abstract_class: i2(1244, 1, "Abstract_methods_can_only_appear_within_an_abstract_class_1244", "Abstract methods can only appear within an abstract class."), Method_0_cannot_have_an_implementation_because_it_is_marked_abstract: i2(1245, 1, "Method_0_cannot_have_an_implementation_because_it_is_marked_abstract_1245", "Method '{0}' cannot have an implementation because it is marked abstract."), An_interface_property_cannot_have_an_initializer: i2(1246, 1, "An_interface_property_cannot_have_an_initializer_1246", "An interface property cannot have an initializer."), A_type_literal_property_cannot_have_an_initializer: i2(1247, 1, "A_type_literal_property_cannot_have_an_initializer_1247", "A type literal property cannot have an initializer."), A_class_member_cannot_have_the_0_keyword: i2(1248, 1, "A_class_member_cannot_have_the_0_keyword_1248", "A class member cannot have the '{0}' keyword."), A_decorator_can_only_decorate_a_method_implementation_not_an_overload: i2(1249, 1, "A_decorator_can_only_decorate_a_method_implementation_not_an_overload_1249", "A decorator can only decorate a method implementation, not an overload."), Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5: i2(1250, 1, "Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_1250", "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'."), Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Class_definitions_are_automatically_in_strict_mode: i2(1251, 1, "Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Class_d_1251", "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Class definitions are automatically in strict mode."), Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Modules_are_automatically_in_strict_mode: i2(1252, 1, "Function_declarations_are_not_allowed_inside_blocks_in_strict_mode_when_targeting_ES3_or_ES5_Modules_1252", "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Modules are automatically in strict mode."), A_const_initializer_in_an_ambient_context_must_be_a_string_or_numeric_literal_or_literal_enum_reference: i2(1254, 1, "A_const_initializer_in_an_ambient_context_must_be_a_string_or_numeric_literal_or_literal_enum_refere_1254", "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference."), A_definite_assignment_assertion_is_not_permitted_in_this_context: i2(1255, 1, "A_definite_assignment_assertion_is_not_permitted_in_this_context_1255", "A definite assignment assertion '!' is not permitted in this context."), A_required_element_cannot_follow_an_optional_element: i2(1257, 1, "A_required_element_cannot_follow_an_optional_element_1257", "A required element cannot follow an optional element."), A_default_export_must_be_at_the_top_level_of_a_file_or_module_declaration: i2(1258, 1, "A_default_export_must_be_at_the_top_level_of_a_file_or_module_declaration_1258", "A default export must be at the top level of a file or module declaration."), Module_0_can_only_be_default_imported_using_the_1_flag: i2(1259, 1, "Module_0_can_only_be_default_imported_using_the_1_flag_1259", "Module '{0}' can only be default-imported using the '{1}' flag"), Keywords_cannot_contain_escape_characters: i2(1260, 1, "Keywords_cannot_contain_escape_characters_1260", "Keywords cannot contain escape characters."), Already_included_file_name_0_differs_from_file_name_1_only_in_casing: i2(1261, 1, "Already_included_file_name_0_differs_from_file_name_1_only_in_casing_1261", "Already included file name '{0}' differs from file name '{1}' only in casing."), Identifier_expected_0_is_a_reserved_word_at_the_top_level_of_a_module: i2(1262, 1, "Identifier_expected_0_is_a_reserved_word_at_the_top_level_of_a_module_1262", "Identifier expected. '{0}' is a reserved word at the top-level of a module."), Declarations_with_initializers_cannot_also_have_definite_assignment_assertions: i2(1263, 1, "Declarations_with_initializers_cannot_also_have_definite_assignment_assertions_1263", "Declarations with initializers cannot also have definite assignment assertions."), Declarations_with_definite_assignment_assertions_must_also_have_type_annotations: i2(1264, 1, "Declarations_with_definite_assignment_assertions_must_also_have_type_annotations_1264", "Declarations with definite assignment assertions must also have type annotations."), A_rest_element_cannot_follow_another_rest_element: i2(1265, 1, "A_rest_element_cannot_follow_another_rest_element_1265", "A rest element cannot follow another rest element."), An_optional_element_cannot_follow_a_rest_element: i2(1266, 1, "An_optional_element_cannot_follow_a_rest_element_1266", "An optional element cannot follow a rest element."), Property_0_cannot_have_an_initializer_because_it_is_marked_abstract: i2(1267, 1, "Property_0_cannot_have_an_initializer_because_it_is_marked_abstract_1267", "Property '{0}' cannot have an initializer because it is marked abstract."), An_index_signature_parameter_type_must_be_string_number_symbol_or_a_template_literal_type: i2(1268, 1, "An_index_signature_parameter_type_must_be_string_number_symbol_or_a_template_literal_type_1268", "An index signature parameter type must be 'string', 'number', 'symbol', or a template literal type."), Cannot_use_export_import_on_a_type_or_type_only_namespace_when_0_is_enabled: i2(1269, 1, "Cannot_use_export_import_on_a_type_or_type_only_namespace_when_0_is_enabled_1269", "Cannot use 'export import' on a type or type-only namespace when '{0}' is enabled."), Decorator_function_return_type_0_is_not_assignable_to_type_1: i2(1270, 1, "Decorator_function_return_type_0_is_not_assignable_to_type_1_1270", "Decorator function return type '{0}' is not assignable to type '{1}'."), Decorator_function_return_type_is_0_but_is_expected_to_be_void_or_any: i2(1271, 1, "Decorator_function_return_type_is_0_but_is_expected_to_be_void_or_any_1271", "Decorator function return type is '{0}' but is expected to be 'void' or 'any'."), A_type_referenced_in_a_decorated_signature_must_be_imported_with_import_type_or_a_namespace_import_when_isolatedModules_and_emitDecoratorMetadata_are_enabled: i2(1272, 1, "A_type_referenced_in_a_decorated_signature_must_be_imported_with_import_type_or_a_namespace_import_w_1272", "A type referenced in a decorated signature must be imported with 'import type' or a namespace import when 'isolatedModules' and 'emitDecoratorMetadata' are enabled."), _0_modifier_cannot_appear_on_a_type_parameter: i2(1273, 1, "_0_modifier_cannot_appear_on_a_type_parameter_1273", "'{0}' modifier cannot appear on a type parameter"), _0_modifier_can_only_appear_on_a_type_parameter_of_a_class_interface_or_type_alias: i2(1274, 1, "_0_modifier_can_only_appear_on_a_type_parameter_of_a_class_interface_or_type_alias_1274", "'{0}' modifier can only appear on a type parameter of a class, interface or type alias"), accessor_modifier_can_only_appear_on_a_property_declaration: i2(1275, 1, "accessor_modifier_can_only_appear_on_a_property_declaration_1275", "'accessor' modifier can only appear on a property declaration."), An_accessor_property_cannot_be_declared_optional: i2(1276, 1, "An_accessor_property_cannot_be_declared_optional_1276", "An 'accessor' property cannot be declared optional."), _0_modifier_can_only_appear_on_a_type_parameter_of_a_function_method_or_class: i2(1277, 1, "_0_modifier_can_only_appear_on_a_type_parameter_of_a_function_method_or_class_1277", "'{0}' modifier can only appear on a type parameter of a function, method or class"), The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_0: i2(1278, 1, "The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_0_1278", "The runtime will invoke the decorator with {1} arguments, but the decorator expects {0}."), The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_at_least_0: i2(1279, 1, "The_runtime_will_invoke_the_decorator_with_1_arguments_but_the_decorator_expects_at_least_0_1279", "The runtime will invoke the decorator with {1} arguments, but the decorator expects at least {0}."), Namespaces_are_not_allowed_in_global_script_files_when_0_is_enabled_If_this_file_is_not_intended_to_be_a_global_script_set_moduleDetection_to_force_or_add_an_empty_export_statement: i2(1280, 1, "Namespaces_are_not_allowed_in_global_script_files_when_0_is_enabled_If_this_file_is_not_intended_to__1280", "Namespaces are not allowed in global script files when '{0}' is enabled. If this file is not intended to be a global script, set 'moduleDetection' to 'force' or add an empty 'export {}' statement."), Cannot_access_0_from_another_file_without_qualification_when_1_is_enabled_Use_2_instead: i2(1281, 1, "Cannot_access_0_from_another_file_without_qualification_when_1_is_enabled_Use_2_instead_1281", "Cannot access '{0}' from another file without qualification when '{1}' is enabled. Use '{2}' instead."), An_export_declaration_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers_to_a_type: i2(1282, 1, "An_export_declaration_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers__1282", "An 'export =' declaration must reference a value when 'verbatimModuleSyntax' is enabled, but '{0}' only refers to a type."), An_export_declaration_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolves_to_a_type_only_declaration: i2(1283, 1, "An_export_declaration_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolve_1283", "An 'export =' declaration must reference a real value when 'verbatimModuleSyntax' is enabled, but '{0}' resolves to a type-only declaration."), An_export_default_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers_to_a_type: i2(1284, 1, "An_export_default_must_reference_a_value_when_verbatimModuleSyntax_is_enabled_but_0_only_refers_to_a_1284", "An 'export default' must reference a value when 'verbatimModuleSyntax' is enabled, but '{0}' only refers to a type."), An_export_default_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolves_to_a_type_only_declaration: i2(1285, 1, "An_export_default_must_reference_a_real_value_when_verbatimModuleSyntax_is_enabled_but_0_resolves_to_1285", "An 'export default' must reference a real value when 'verbatimModuleSyntax' is enabled, but '{0}' resolves to a type-only declaration."), ESM_syntax_is_not_allowed_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled: i2(1286, 1, "ESM_syntax_is_not_allowed_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled_1286", "ESM syntax is not allowed in a CommonJS module when 'verbatimModuleSyntax' is enabled."), A_top_level_export_modifier_cannot_be_used_on_value_declarations_in_a_CommonJS_module_when_verbatimModuleSyntax_is_enabled: i2(1287, 1, "A_top_level_export_modifier_cannot_be_used_on_value_declarations_in_a_CommonJS_module_when_verbatimM_1287", "A top-level 'export' modifier cannot be used on value declarations in a CommonJS module when 'verbatimModuleSyntax' is enabled."), An_import_alias_cannot_resolve_to_a_type_or_type_only_declaration_when_verbatimModuleSyntax_is_enabled: i2(1288, 1, "An_import_alias_cannot_resolve_to_a_type_or_type_only_declaration_when_verbatimModuleSyntax_is_enabl_1288", "An import alias cannot resolve to a type or type-only declaration when 'verbatimModuleSyntax' is enabled."), with_statements_are_not_allowed_in_an_async_function_block: i2(1300, 1, "with_statements_are_not_allowed_in_an_async_function_block_1300", "'with' statements are not allowed in an async function block."), await_expressions_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules: i2(1308, 1, "await_expressions_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules_1308", "'await' expressions are only allowed within async functions and at the top levels of modules."), The_current_file_is_a_CommonJS_module_and_cannot_use_await_at_the_top_level: i2(1309, 1, "The_current_file_is_a_CommonJS_module_and_cannot_use_await_at_the_top_level_1309", "The current file is a CommonJS module and cannot use 'await' at the top level."), Did_you_mean_to_use_a_Colon_An_can_only_follow_a_property_name_when_the_containing_object_literal_is_part_of_a_destructuring_pattern: i2(1312, 1, "Did_you_mean_to_use_a_Colon_An_can_only_follow_a_property_name_when_the_containing_object_literal_is_1312", "Did you mean to use a ':'? An '=' can only follow a property name when the containing object literal is part of a destructuring pattern."), The_body_of_an_if_statement_cannot_be_the_empty_statement: i2(1313, 1, "The_body_of_an_if_statement_cannot_be_the_empty_statement_1313", "The body of an 'if' statement cannot be the empty statement."), Global_module_exports_may_only_appear_in_module_files: i2(1314, 1, "Global_module_exports_may_only_appear_in_module_files_1314", "Global module exports may only appear in module files."), Global_module_exports_may_only_appear_in_declaration_files: i2(1315, 1, "Global_module_exports_may_only_appear_in_declaration_files_1315", "Global module exports may only appear in declaration files."), Global_module_exports_may_only_appear_at_top_level: i2(1316, 1, "Global_module_exports_may_only_appear_at_top_level_1316", "Global module exports may only appear at top level."), A_parameter_property_cannot_be_declared_using_a_rest_parameter: i2(1317, 1, "A_parameter_property_cannot_be_declared_using_a_rest_parameter_1317", "A parameter property cannot be declared using a rest parameter."), An_abstract_accessor_cannot_have_an_implementation: i2(1318, 1, "An_abstract_accessor_cannot_have_an_implementation_1318", "An abstract accessor cannot have an implementation."), A_default_export_can_only_be_used_in_an_ECMAScript_style_module: i2(1319, 1, "A_default_export_can_only_be_used_in_an_ECMAScript_style_module_1319", "A default export can only be used in an ECMAScript-style module."), Type_of_await_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: i2(1320, 1, "Type_of_await_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member_1320", "Type of 'await' operand must either be a valid promise or must not contain a callable 'then' member."), Type_of_yield_operand_in_an_async_generator_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: i2(1321, 1, "Type_of_yield_operand_in_an_async_generator_must_either_be_a_valid_promise_or_must_not_contain_a_cal_1321", "Type of 'yield' operand in an async generator must either be a valid promise or must not contain a callable 'then' member."), Type_of_iterated_elements_of_a_yield_Asterisk_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member: i2(1322, 1, "Type_of_iterated_elements_of_a_yield_Asterisk_operand_must_either_be_a_valid_promise_or_must_not_con_1322", "Type of iterated elements of a 'yield*' operand must either be a valid promise or must not contain a callable 'then' member."), Dynamic_imports_are_only_supported_when_the_module_flag_is_set_to_es2020_es2022_esnext_commonjs_amd_system_umd_node16_or_nodenext: i2(1323, 1, "Dynamic_imports_are_only_supported_when_the_module_flag_is_set_to_es2020_es2022_esnext_commonjs_amd__1323", "Dynamic imports are only supported when the '--module' flag is set to 'es2020', 'es2022', 'esnext', 'commonjs', 'amd', 'system', 'umd', 'node16', or 'nodenext'."), Dynamic_imports_only_support_a_second_argument_when_the_module_option_is_set_to_esnext_node16_or_nodenext: i2(1324, 1, "Dynamic_imports_only_support_a_second_argument_when_the_module_option_is_set_to_esnext_node16_or_nod_1324", "Dynamic imports only support a second argument when the '--module' option is set to 'esnext', 'node16', or 'nodenext'."), Argument_of_dynamic_import_cannot_be_spread_element: i2(1325, 1, "Argument_of_dynamic_import_cannot_be_spread_element_1325", "Argument of dynamic import cannot be spread element."), This_use_of_import_is_invalid_import_calls_can_be_written_but_they_must_have_parentheses_and_cannot_have_type_arguments: i2(1326, 1, "This_use_of_import_is_invalid_import_calls_can_be_written_but_they_must_have_parentheses_and_cannot__1326", "This use of 'import' is invalid. 'import()' calls can be written, but they must have parentheses and cannot have type arguments."), String_literal_with_double_quotes_expected: i2(1327, 1, "String_literal_with_double_quotes_expected_1327", "String literal with double quotes expected."), Property_value_can_only_be_string_literal_numeric_literal_true_false_null_object_literal_or_array_literal: i2(1328, 1, "Property_value_can_only_be_string_literal_numeric_literal_true_false_null_object_literal_or_array_li_1328", "Property value can only be string literal, numeric literal, 'true', 'false', 'null', object literal or array literal."), _0_accepts_too_few_arguments_to_be_used_as_a_decorator_here_Did_you_mean_to_call_it_first_and_write_0: i2(1329, 1, "_0_accepts_too_few_arguments_to_be_used_as_a_decorator_here_Did_you_mean_to_call_it_first_and_write__1329", "'{0}' accepts too few arguments to be used as a decorator here. Did you mean to call it first and write '@{0}()'?"), A_property_of_an_interface_or_type_literal_whose_type_is_a_unique_symbol_type_must_be_readonly: i2(1330, 1, "A_property_of_an_interface_or_type_literal_whose_type_is_a_unique_symbol_type_must_be_readonly_1330", "A property of an interface or type literal whose type is a 'unique symbol' type must be 'readonly'."), A_property_of_a_class_whose_type_is_a_unique_symbol_type_must_be_both_static_and_readonly: i2(1331, 1, "A_property_of_a_class_whose_type_is_a_unique_symbol_type_must_be_both_static_and_readonly_1331", "A property of a class whose type is a 'unique symbol' type must be both 'static' and 'readonly'."), A_variable_whose_type_is_a_unique_symbol_type_must_be_const: i2(1332, 1, "A_variable_whose_type_is_a_unique_symbol_type_must_be_const_1332", "A variable whose type is a 'unique symbol' type must be 'const'."), unique_symbol_types_may_not_be_used_on_a_variable_declaration_with_a_binding_name: i2(1333, 1, "unique_symbol_types_may_not_be_used_on_a_variable_declaration_with_a_binding_name_1333", "'unique symbol' types may not be used on a variable declaration with a binding name."), unique_symbol_types_are_only_allowed_on_variables_in_a_variable_statement: i2(1334, 1, "unique_symbol_types_are_only_allowed_on_variables_in_a_variable_statement_1334", "'unique symbol' types are only allowed on variables in a variable statement."), unique_symbol_types_are_not_allowed_here: i2(1335, 1, "unique_symbol_types_are_not_allowed_here_1335", "'unique symbol' types are not allowed here."), An_index_signature_parameter_type_cannot_be_a_literal_type_or_generic_type_Consider_using_a_mapped_object_type_instead: i2(1337, 1, "An_index_signature_parameter_type_cannot_be_a_literal_type_or_generic_type_Consider_using_a_mapped_o_1337", "An index signature parameter type cannot be a literal type or generic type. Consider using a mapped object type instead."), infer_declarations_are_only_permitted_in_the_extends_clause_of_a_conditional_type: i2(1338, 1, "infer_declarations_are_only_permitted_in_the_extends_clause_of_a_conditional_type_1338", "'infer' declarations are only permitted in the 'extends' clause of a conditional type."), Module_0_does_not_refer_to_a_value_but_is_used_as_a_value_here: i2(1339, 1, "Module_0_does_not_refer_to_a_value_but_is_used_as_a_value_here_1339", "Module '{0}' does not refer to a value, but is used as a value here."), Module_0_does_not_refer_to_a_type_but_is_used_as_a_type_here_Did_you_mean_typeof_import_0: i2(1340, 1, "Module_0_does_not_refer_to_a_type_but_is_used_as_a_type_here_Did_you_mean_typeof_import_0_1340", "Module '{0}' does not refer to a type, but is used as a type here. Did you mean 'typeof import('{0}')'?"), Class_constructor_may_not_be_an_accessor: i2(1341, 1, "Class_constructor_may_not_be_an_accessor_1341", "Class constructor may not be an accessor."), The_import_meta_meta_property_is_only_allowed_when_the_module_option_is_es2020_es2022_esnext_system_node16_or_nodenext: i2(1343, 1, "The_import_meta_meta_property_is_only_allowed_when_the_module_option_is_es2020_es2022_esnext_system__1343", "The 'import.meta' meta-property is only allowed when the '--module' option is 'es2020', 'es2022', 'esnext', 'system', 'node16', or 'nodenext'."), A_label_is_not_allowed_here: i2(1344, 1, "A_label_is_not_allowed_here_1344", "'A label is not allowed here."), An_expression_of_type_void_cannot_be_tested_for_truthiness: i2(1345, 1, "An_expression_of_type_void_cannot_be_tested_for_truthiness_1345", "An expression of type 'void' cannot be tested for truthiness."), This_parameter_is_not_allowed_with_use_strict_directive: i2(1346, 1, "This_parameter_is_not_allowed_with_use_strict_directive_1346", "This parameter is not allowed with 'use strict' directive."), use_strict_directive_cannot_be_used_with_non_simple_parameter_list: i2(1347, 1, "use_strict_directive_cannot_be_used_with_non_simple_parameter_list_1347", "'use strict' directive cannot be used with non-simple parameter list."), Non_simple_parameter_declared_here: i2(1348, 1, "Non_simple_parameter_declared_here_1348", "Non-simple parameter declared here."), use_strict_directive_used_here: i2(1349, 1, "use_strict_directive_used_here_1349", "'use strict' directive used here."), Print_the_final_configuration_instead_of_building: i2(1350, 3, "Print_the_final_configuration_instead_of_building_1350", "Print the final configuration instead of building."), An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal: i2(1351, 1, "An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal_1351", "An identifier or keyword cannot immediately follow a numeric literal."), A_bigint_literal_cannot_use_exponential_notation: i2(1352, 1, "A_bigint_literal_cannot_use_exponential_notation_1352", "A bigint literal cannot use exponential notation."), A_bigint_literal_must_be_an_integer: i2(1353, 1, "A_bigint_literal_must_be_an_integer_1353", "A bigint literal must be an integer."), readonly_type_modifier_is_only_permitted_on_array_and_tuple_literal_types: i2(1354, 1, "readonly_type_modifier_is_only_permitted_on_array_and_tuple_literal_types_1354", "'readonly' type modifier is only permitted on array and tuple literal types."), A_const_assertions_can_only_be_applied_to_references_to_enum_members_or_string_number_boolean_array_or_object_literals: i2(1355, 1, "A_const_assertions_can_only_be_applied_to_references_to_enum_members_or_string_number_boolean_array__1355", "A 'const' assertions can only be applied to references to enum members, or string, number, boolean, array, or object literals."), Did_you_mean_to_mark_this_function_as_async: i2(1356, 1, "Did_you_mean_to_mark_this_function_as_async_1356", "Did you mean to mark this function as 'async'?"), An_enum_member_name_must_be_followed_by_a_or: i2(1357, 1, "An_enum_member_name_must_be_followed_by_a_or_1357", "An enum member name must be followed by a ',', '=', or '}'."), Tagged_template_expressions_are_not_permitted_in_an_optional_chain: i2(1358, 1, "Tagged_template_expressions_are_not_permitted_in_an_optional_chain_1358", "Tagged template expressions are not permitted in an optional chain."), Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here: i2(1359, 1, "Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here_1359", "Identifier expected. '{0}' is a reserved word that cannot be used here."), Type_0_does_not_satisfy_the_expected_type_1: i2(1360, 1, "Type_0_does_not_satisfy_the_expected_type_1_1360", "Type '{0}' does not satisfy the expected type '{1}'."), _0_cannot_be_used_as_a_value_because_it_was_imported_using_import_type: i2(1361, 1, "_0_cannot_be_used_as_a_value_because_it_was_imported_using_import_type_1361", "'{0}' cannot be used as a value because it was imported using 'import type'."), _0_cannot_be_used_as_a_value_because_it_was_exported_using_export_type: i2(1362, 1, "_0_cannot_be_used_as_a_value_because_it_was_exported_using_export_type_1362", "'{0}' cannot be used as a value because it was exported using 'export type'."), A_type_only_import_can_specify_a_default_import_or_named_bindings_but_not_both: i2(1363, 1, "A_type_only_import_can_specify_a_default_import_or_named_bindings_but_not_both_1363", "A type-only import can specify a default import or named bindings, but not both."), Convert_to_type_only_export: i2(1364, 3, "Convert_to_type_only_export_1364", "Convert to type-only export"), Convert_all_re_exported_types_to_type_only_exports: i2(1365, 3, "Convert_all_re_exported_types_to_type_only_exports_1365", "Convert all re-exported types to type-only exports"), Split_into_two_separate_import_declarations: i2(1366, 3, "Split_into_two_separate_import_declarations_1366", "Split into two separate import declarations"), Split_all_invalid_type_only_imports: i2(1367, 3, "Split_all_invalid_type_only_imports_1367", "Split all invalid type-only imports"), Class_constructor_may_not_be_a_generator: i2(1368, 1, "Class_constructor_may_not_be_a_generator_1368", "Class constructor may not be a generator."), Did_you_mean_0: i2(1369, 3, "Did_you_mean_0_1369", "Did you mean '{0}'?"), This_import_is_never_used_as_a_value_and_must_use_import_type_because_importsNotUsedAsValues_is_set_to_error: i2(1371, 1, "This_import_is_never_used_as_a_value_and_must_use_import_type_because_importsNotUsedAsValues_is_set__1371", "This import is never used as a value and must use 'import type' because 'importsNotUsedAsValues' is set to 'error'."), Convert_to_type_only_import: i2(1373, 3, "Convert_to_type_only_import_1373", "Convert to type-only import"), Convert_all_imports_not_used_as_a_value_to_type_only_imports: i2(1374, 3, "Convert_all_imports_not_used_as_a_value_to_type_only_imports_1374", "Convert all imports not used as a value to type-only imports"), await_expressions_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module: i2(1375, 1, "await_expressions_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_fi_1375", "'await' expressions are only allowed at the top level of a file when that file is a module, but this file has no imports or exports. Consider adding an empty 'export {}' to make this file a module."), _0_was_imported_here: i2(1376, 3, "_0_was_imported_here_1376", "'{0}' was imported here."), _0_was_exported_here: i2(1377, 3, "_0_was_exported_here_1377", "'{0}' was exported here."), Top_level_await_expressions_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_node16_or_nodenext_and_the_target_option_is_set_to_es2017_or_higher: i2(1378, 1, "Top_level_await_expressions_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_n_1378", "Top-level 'await' expressions are only allowed when the 'module' option is set to 'es2022', 'esnext', 'system', 'node16', or 'nodenext', and the 'target' option is set to 'es2017' or higher."), An_import_alias_cannot_reference_a_declaration_that_was_exported_using_export_type: i2(1379, 1, "An_import_alias_cannot_reference_a_declaration_that_was_exported_using_export_type_1379", "An import alias cannot reference a declaration that was exported using 'export type'."), An_import_alias_cannot_reference_a_declaration_that_was_imported_using_import_type: i2(1380, 1, "An_import_alias_cannot_reference_a_declaration_that_was_imported_using_import_type_1380", "An import alias cannot reference a declaration that was imported using 'import type'."), Unexpected_token_Did_you_mean_or_rbrace: i2(1381, 1, "Unexpected_token_Did_you_mean_or_rbrace_1381", "Unexpected token. Did you mean `{'}'}` or `&rbrace;`?"), Unexpected_token_Did_you_mean_or_gt: i2(1382, 1, "Unexpected_token_Did_you_mean_or_gt_1382", "Unexpected token. Did you mean `{'>'}` or `&gt;`?"), Function_type_notation_must_be_parenthesized_when_used_in_a_union_type: i2(1385, 1, "Function_type_notation_must_be_parenthesized_when_used_in_a_union_type_1385", "Function type notation must be parenthesized when used in a union type."), Constructor_type_notation_must_be_parenthesized_when_used_in_a_union_type: i2(1386, 1, "Constructor_type_notation_must_be_parenthesized_when_used_in_a_union_type_1386", "Constructor type notation must be parenthesized when used in a union type."), Function_type_notation_must_be_parenthesized_when_used_in_an_intersection_type: i2(1387, 1, "Function_type_notation_must_be_parenthesized_when_used_in_an_intersection_type_1387", "Function type notation must be parenthesized when used in an intersection type."), Constructor_type_notation_must_be_parenthesized_when_used_in_an_intersection_type: i2(1388, 1, "Constructor_type_notation_must_be_parenthesized_when_used_in_an_intersection_type_1388", "Constructor type notation must be parenthesized when used in an intersection type."), _0_is_not_allowed_as_a_variable_declaration_name: i2(1389, 1, "_0_is_not_allowed_as_a_variable_declaration_name_1389", "'{0}' is not allowed as a variable declaration name."), _0_is_not_allowed_as_a_parameter_name: i2(1390, 1, "_0_is_not_allowed_as_a_parameter_name_1390", "'{0}' is not allowed as a parameter name."), An_import_alias_cannot_use_import_type: i2(1392, 1, "An_import_alias_cannot_use_import_type_1392", "An import alias cannot use 'import type'"), Imported_via_0_from_file_1: i2(1393, 3, "Imported_via_0_from_file_1_1393", "Imported via {0} from file '{1}'"), Imported_via_0_from_file_1_with_packageId_2: i2(1394, 3, "Imported_via_0_from_file_1_with_packageId_2_1394", "Imported via {0} from file '{1}' with packageId '{2}'"), Imported_via_0_from_file_1_to_import_importHelpers_as_specified_in_compilerOptions: i2(1395, 3, "Imported_via_0_from_file_1_to_import_importHelpers_as_specified_in_compilerOptions_1395", "Imported via {0} from file '{1}' to import 'importHelpers' as specified in compilerOptions"), Imported_via_0_from_file_1_with_packageId_2_to_import_importHelpers_as_specified_in_compilerOptions: i2(1396, 3, "Imported_via_0_from_file_1_with_packageId_2_to_import_importHelpers_as_specified_in_compilerOptions_1396", "Imported via {0} from file '{1}' with packageId '{2}' to import 'importHelpers' as specified in compilerOptions"), Imported_via_0_from_file_1_to_import_jsx_and_jsxs_factory_functions: i2(1397, 3, "Imported_via_0_from_file_1_to_import_jsx_and_jsxs_factory_functions_1397", "Imported via {0} from file '{1}' to import 'jsx' and 'jsxs' factory functions"), Imported_via_0_from_file_1_with_packageId_2_to_import_jsx_and_jsxs_factory_functions: i2(1398, 3, "Imported_via_0_from_file_1_with_packageId_2_to_import_jsx_and_jsxs_factory_functions_1398", "Imported via {0} from file '{1}' with packageId '{2}' to import 'jsx' and 'jsxs' factory functions"), File_is_included_via_import_here: i2(1399, 3, "File_is_included_via_import_here_1399", "File is included via import here."), Referenced_via_0_from_file_1: i2(1400, 3, "Referenced_via_0_from_file_1_1400", "Referenced via '{0}' from file '{1}'"), File_is_included_via_reference_here: i2(1401, 3, "File_is_included_via_reference_here_1401", "File is included via reference here."), Type_library_referenced_via_0_from_file_1: i2(1402, 3, "Type_library_referenced_via_0_from_file_1_1402", "Type library referenced via '{0}' from file '{1}'"), Type_library_referenced_via_0_from_file_1_with_packageId_2: i2(1403, 3, "Type_library_referenced_via_0_from_file_1_with_packageId_2_1403", "Type library referenced via '{0}' from file '{1}' with packageId '{2}'"), File_is_included_via_type_library_reference_here: i2(1404, 3, "File_is_included_via_type_library_reference_here_1404", "File is included via type library reference here."), Library_referenced_via_0_from_file_1: i2(1405, 3, "Library_referenced_via_0_from_file_1_1405", "Library referenced via '{0}' from file '{1}'"), File_is_included_via_library_reference_here: i2(1406, 3, "File_is_included_via_library_reference_here_1406", "File is included via library reference here."), Matched_by_include_pattern_0_in_1: i2(1407, 3, "Matched_by_include_pattern_0_in_1_1407", "Matched by include pattern '{0}' in '{1}'"), File_is_matched_by_include_pattern_specified_here: i2(1408, 3, "File_is_matched_by_include_pattern_specified_here_1408", "File is matched by include pattern specified here."), Part_of_files_list_in_tsconfig_json: i2(1409, 3, "Part_of_files_list_in_tsconfig_json_1409", "Part of 'files' list in tsconfig.json"), File_is_matched_by_files_list_specified_here: i2(1410, 3, "File_is_matched_by_files_list_specified_here_1410", "File is matched by 'files' list specified here."), Output_from_referenced_project_0_included_because_1_specified: i2(1411, 3, "Output_from_referenced_project_0_included_because_1_specified_1411", "Output from referenced project '{0}' included because '{1}' specified"), Output_from_referenced_project_0_included_because_module_is_specified_as_none: i2(1412, 3, "Output_from_referenced_project_0_included_because_module_is_specified_as_none_1412", "Output from referenced project '{0}' included because '--module' is specified as 'none'"), File_is_output_from_referenced_project_specified_here: i2(1413, 3, "File_is_output_from_referenced_project_specified_here_1413", "File is output from referenced project specified here."), Source_from_referenced_project_0_included_because_1_specified: i2(1414, 3, "Source_from_referenced_project_0_included_because_1_specified_1414", "Source from referenced project '{0}' included because '{1}' specified"), Source_from_referenced_project_0_included_because_module_is_specified_as_none: i2(1415, 3, "Source_from_referenced_project_0_included_because_module_is_specified_as_none_1415", "Source from referenced project '{0}' included because '--module' is specified as 'none'"), File_is_source_from_referenced_project_specified_here: i2(1416, 3, "File_is_source_from_referenced_project_specified_here_1416", "File is source from referenced project specified here."), Entry_point_of_type_library_0_specified_in_compilerOptions: i2(1417, 3, "Entry_point_of_type_library_0_specified_in_compilerOptions_1417", "Entry point of type library '{0}' specified in compilerOptions"), Entry_point_of_type_library_0_specified_in_compilerOptions_with_packageId_1: i2(1418, 3, "Entry_point_of_type_library_0_specified_in_compilerOptions_with_packageId_1_1418", "Entry point of type library '{0}' specified in compilerOptions with packageId '{1}'"), File_is_entry_point_of_type_library_specified_here: i2(1419, 3, "File_is_entry_point_of_type_library_specified_here_1419", "File is entry point of type library specified here."), Entry_point_for_implicit_type_library_0: i2(1420, 3, "Entry_point_for_implicit_type_library_0_1420", "Entry point for implicit type library '{0}'"), Entry_point_for_implicit_type_library_0_with_packageId_1: i2(1421, 3, "Entry_point_for_implicit_type_library_0_with_packageId_1_1421", "Entry point for implicit type library '{0}' with packageId '{1}'"), Library_0_specified_in_compilerOptions: i2(1422, 3, "Library_0_specified_in_compilerOptions_1422", "Library '{0}' specified in compilerOptions"), File_is_library_specified_here: i2(1423, 3, "File_is_library_specified_here_1423", "File is library specified here."), Default_library: i2(1424, 3, "Default_library_1424", "Default library"), Default_library_for_target_0: i2(1425, 3, "Default_library_for_target_0_1425", "Default library for target '{0}'"), File_is_default_library_for_target_specified_here: i2(1426, 3, "File_is_default_library_for_target_specified_here_1426", "File is default library for target specified here."), Root_file_specified_for_compilation: i2(1427, 3, "Root_file_specified_for_compilation_1427", "Root file specified for compilation"), File_is_output_of_project_reference_source_0: i2(1428, 3, "File_is_output_of_project_reference_source_0_1428", "File is output of project reference source '{0}'"), File_redirects_to_file_0: i2(1429, 3, "File_redirects_to_file_0_1429", "File redirects to file '{0}'"), The_file_is_in_the_program_because_Colon: i2(1430, 3, "The_file_is_in_the_program_because_Colon_1430", "The file is in the program because:"), for_await_loops_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module: i2(1431, 1, "for_await_loops_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_1431", "'for await' loops are only allowed at the top level of a file when that file is a module, but this file has no imports or exports. Consider adding an empty 'export {}' to make this file a module."), Top_level_for_await_loops_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_node16_or_nodenext_and_the_target_option_is_set_to_es2017_or_higher: i2(1432, 1, "Top_level_for_await_loops_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_nod_1432", "Top-level 'for await' loops are only allowed when the 'module' option is set to 'es2022', 'esnext', 'system', 'node16', or 'nodenext', and the 'target' option is set to 'es2017' or higher."), Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters: i2(1433, 1, "Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters_1433", "Neither decorators nor modifiers may be applied to 'this' parameters."), Unexpected_keyword_or_identifier: i2(1434, 1, "Unexpected_keyword_or_identifier_1434", "Unexpected keyword or identifier."), Unknown_keyword_or_identifier_Did_you_mean_0: i2(1435, 1, "Unknown_keyword_or_identifier_Did_you_mean_0_1435", "Unknown keyword or identifier. Did you mean '{0}'?"), Decorators_must_precede_the_name_and_all_keywords_of_property_declarations: i2(1436, 1, "Decorators_must_precede_the_name_and_all_keywords_of_property_declarations_1436", "Decorators must precede the name and all keywords of property declarations."), Namespace_must_be_given_a_name: i2(1437, 1, "Namespace_must_be_given_a_name_1437", "Namespace must be given a name."), Interface_must_be_given_a_name: i2(1438, 1, "Interface_must_be_given_a_name_1438", "Interface must be given a name."), Type_alias_must_be_given_a_name: i2(1439, 1, "Type_alias_must_be_given_a_name_1439", "Type alias must be given a name."), Variable_declaration_not_allowed_at_this_location: i2(1440, 1, "Variable_declaration_not_allowed_at_this_location_1440", "Variable declaration not allowed at this location."), Cannot_start_a_function_call_in_a_type_annotation: i2(1441, 1, "Cannot_start_a_function_call_in_a_type_annotation_1441", "Cannot start a function call in a type annotation."), Expected_for_property_initializer: i2(1442, 1, "Expected_for_property_initializer_1442", "Expected '=' for property initializer."), Module_declaration_names_may_only_use_or_quoted_strings: i2(1443, 1, "Module_declaration_names_may_only_use_or_quoted_strings_1443", `Module declaration names may only use ' or " quoted strings.`), _0_is_a_type_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedModules_are_both_enabled: i2(1444, 1, "_0_is_a_type_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedMod_1444", "'{0}' is a type and must be imported using a type-only import when 'preserveValueImports' and 'isolatedModules' are both enabled."), _0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedModules_are_both_enabled: i2(1446, 1, "_0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_preserveVa_1446", "'{0}' resolves to a type-only declaration and must be imported using a type-only import when 'preserveValueImports' and 'isolatedModules' are both enabled."), _0_resolves_to_a_type_only_declaration_and_must_be_re_exported_using_a_type_only_re_export_when_1_is_enabled: i2(1448, 1, "_0_resolves_to_a_type_only_declaration_and_must_be_re_exported_using_a_type_only_re_export_when_1_is_1448", "'{0}' resolves to a type-only declaration and must be re-exported using a type-only re-export when '{1}' is enabled."), Preserve_unused_imported_values_in_the_JavaScript_output_that_would_otherwise_be_removed: i2(1449, 3, "Preserve_unused_imported_values_in_the_JavaScript_output_that_would_otherwise_be_removed_1449", "Preserve unused imported values in the JavaScript output that would otherwise be removed."), Dynamic_imports_can_only_accept_a_module_specifier_and_an_optional_assertion_as_arguments: i2(1450, 3, "Dynamic_imports_can_only_accept_a_module_specifier_and_an_optional_assertion_as_arguments_1450", "Dynamic imports can only accept a module specifier and an optional assertion as arguments"), Private_identifiers_are_only_allowed_in_class_bodies_and_may_only_be_used_as_part_of_a_class_member_declaration_property_access_or_on_the_left_hand_side_of_an_in_expression: i2(1451, 1, "Private_identifiers_are_only_allowed_in_class_bodies_and_may_only_be_used_as_part_of_a_class_member__1451", "Private identifiers are only allowed in class bodies and may only be used as part of a class member declaration, property access, or on the left-hand-side of an 'in' expression"), resolution_mode_assertions_are_only_supported_when_moduleResolution_is_node16_or_nodenext: i2(1452, 1, "resolution_mode_assertions_are_only_supported_when_moduleResolution_is_node16_or_nodenext_1452", "'resolution-mode' assertions are only supported when `moduleResolution` is `node16` or `nodenext`."), resolution_mode_should_be_either_require_or_import: i2(1453, 1, "resolution_mode_should_be_either_require_or_import_1453", "`resolution-mode` should be either `require` or `import`."), resolution_mode_can_only_be_set_for_type_only_imports: i2(1454, 1, "resolution_mode_can_only_be_set_for_type_only_imports_1454", "`resolution-mode` can only be set for type-only imports."), resolution_mode_is_the_only_valid_key_for_type_import_assertions: i2(1455, 1, "resolution_mode_is_the_only_valid_key_for_type_import_assertions_1455", "`resolution-mode` is the only valid key for type import assertions."), Type_import_assertions_should_have_exactly_one_key_resolution_mode_with_value_import_or_require: i2(1456, 1, "Type_import_assertions_should_have_exactly_one_key_resolution_mode_with_value_import_or_require_1456", "Type import assertions should have exactly one key - `resolution-mode` - with value `import` or `require`."), Matched_by_default_include_pattern_Asterisk_Asterisk_Slash_Asterisk: i2(1457, 3, "Matched_by_default_include_pattern_Asterisk_Asterisk_Slash_Asterisk_1457", "Matched by default include pattern '**/*'"), File_is_ECMAScript_module_because_0_has_field_type_with_value_module: i2(1458, 3, "File_is_ECMAScript_module_because_0_has_field_type_with_value_module_1458", `File is ECMAScript module because '{0}' has field "type" with value "module"`), File_is_CommonJS_module_because_0_has_field_type_whose_value_is_not_module: i2(1459, 3, "File_is_CommonJS_module_because_0_has_field_type_whose_value_is_not_module_1459", `File is CommonJS module because '{0}' has field "type" whose value is not "module"`), File_is_CommonJS_module_because_0_does_not_have_field_type: i2(1460, 3, "File_is_CommonJS_module_because_0_does_not_have_field_type_1460", `File is CommonJS module because '{0}' does not have field "type"`), File_is_CommonJS_module_because_package_json_was_not_found: i2(1461, 3, "File_is_CommonJS_module_because_package_json_was_not_found_1461", "File is CommonJS module because 'package.json' was not found"), The_import_meta_meta_property_is_not_allowed_in_files_which_will_build_into_CommonJS_output: i2(1470, 1, "The_import_meta_meta_property_is_not_allowed_in_files_which_will_build_into_CommonJS_output_1470", "The 'import.meta' meta-property is not allowed in files which will build into CommonJS output."), Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_cannot_be_imported_with_require_Use_an_ECMAScript_import_instead: i2(1471, 1, "Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_c_1471", "Module '{0}' cannot be imported using this construct. The specifier only resolves to an ES module, which cannot be imported with 'require'. Use an ECMAScript import instead."), catch_or_finally_expected: i2(1472, 1, "catch_or_finally_expected_1472", "'catch' or 'finally' expected."), An_import_declaration_can_only_be_used_at_the_top_level_of_a_module: i2(1473, 1, "An_import_declaration_can_only_be_used_at_the_top_level_of_a_module_1473", "An import declaration can only be used at the top level of a module."), An_export_declaration_can_only_be_used_at_the_top_level_of_a_module: i2(1474, 1, "An_export_declaration_can_only_be_used_at_the_top_level_of_a_module_1474", "An export declaration can only be used at the top level of a module."), Control_what_method_is_used_to_detect_module_format_JS_files: i2(1475, 3, "Control_what_method_is_used_to_detect_module_format_JS_files_1475", "Control what method is used to detect module-format JS files."), auto_Colon_Treat_files_with_imports_exports_import_meta_jsx_with_jsx_Colon_react_jsx_or_esm_format_with_module_Colon_node16_as_modules: i2(1476, 3, "auto_Colon_Treat_files_with_imports_exports_import_meta_jsx_with_jsx_Colon_react_jsx_or_esm_format_w_1476", '"auto": Treat files with imports, exports, import.meta, jsx (with jsx: react-jsx), or esm format (with module: node16+) as modules.'), An_instantiation_expression_cannot_be_followed_by_a_property_access: i2(1477, 1, "An_instantiation_expression_cannot_be_followed_by_a_property_access_1477", "An instantiation expression cannot be followed by a property access."), Identifier_or_string_literal_expected: i2(1478, 1, "Identifier_or_string_literal_expected_1478", "Identifier or string literal expected."), The_current_file_is_a_CommonJS_module_whose_imports_will_produce_require_calls_however_the_referenced_file_is_an_ECMAScript_module_and_cannot_be_imported_with_require_Consider_writing_a_dynamic_import_0_call_instead: i2(1479, 1, "The_current_file_is_a_CommonJS_module_whose_imports_will_produce_require_calls_however_the_reference_1479", `The current file is a CommonJS module whose imports will produce 'require' calls; however, the referenced file is an ECMAScript module and cannot be imported with 'require'. Consider writing a dynamic 'import("{0}")' call instead.`), To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_create_a_local_package_json_file_with_type_Colon_module: i2(1480, 3, "To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_create_a_local_packag_1480", 'To convert this file to an ECMAScript module, change its file extension to \'{0}\' or create a local package.json file with `{ "type": "module" }`.'), To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_add_the_field_type_Colon_module_to_1: i2(1481, 3, "To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_add_the_field_type_Co_1481", `To convert this file to an ECMAScript module, change its file extension to '{0}', or add the field \`"type": "module"\` to '{1}'.`), To_convert_this_file_to_an_ECMAScript_module_add_the_field_type_Colon_module_to_0: i2(1482, 3, "To_convert_this_file_to_an_ECMAScript_module_add_the_field_type_Colon_module_to_0_1482", 'To convert this file to an ECMAScript module, add the field `"type": "module"` to \'{0}\'.'), To_convert_this_file_to_an_ECMAScript_module_create_a_local_package_json_file_with_type_Colon_module: i2(1483, 3, "To_convert_this_file_to_an_ECMAScript_module_create_a_local_package_json_file_with_type_Colon_module_1483", 'To convert this file to an ECMAScript module, create a local package.json file with `{ "type": "module" }`.'), _0_is_a_type_and_must_be_imported_using_a_type_only_import_when_verbatimModuleSyntax_is_enabled: i2(1484, 1, "_0_is_a_type_and_must_be_imported_using_a_type_only_import_when_verbatimModuleSyntax_is_enabled_1484", "'{0}' is a type and must be imported using a type-only import when 'verbatimModuleSyntax' is enabled."), _0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_verbatimModuleSyntax_is_enabled: i2(1485, 1, "_0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_verbatimMo_1485", "'{0}' resolves to a type-only declaration and must be imported using a type-only import when 'verbatimModuleSyntax' is enabled."), Decorator_used_before_export_here: i2(1486, 1, "Decorator_used_before_export_here_1486", "Decorator used before 'export' here."), The_types_of_0_are_incompatible_between_these_types: i2(2200, 1, "The_types_of_0_are_incompatible_between_these_types_2200", "The types of '{0}' are incompatible between these types."), The_types_returned_by_0_are_incompatible_between_these_types: i2(2201, 1, "The_types_returned_by_0_are_incompatible_between_these_types_2201", "The types returned by '{0}' are incompatible between these types."), Call_signature_return_types_0_and_1_are_incompatible: i2(2202, 1, "Call_signature_return_types_0_and_1_are_incompatible_2202", "Call signature return types '{0}' and '{1}' are incompatible.", void 0, true), Construct_signature_return_types_0_and_1_are_incompatible: i2(2203, 1, "Construct_signature_return_types_0_and_1_are_incompatible_2203", "Construct signature return types '{0}' and '{1}' are incompatible.", void 0, true), Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1: i2(2204, 1, "Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1_2204", "Call signatures with no arguments have incompatible return types '{0}' and '{1}'.", void 0, true), Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1: i2(2205, 1, "Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1_2205", "Construct signatures with no arguments have incompatible return types '{0}' and '{1}'.", void 0, true), The_type_modifier_cannot_be_used_on_a_named_import_when_import_type_is_used_on_its_import_statement: i2(2206, 1, "The_type_modifier_cannot_be_used_on_a_named_import_when_import_type_is_used_on_its_import_statement_2206", "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement."), The_type_modifier_cannot_be_used_on_a_named_export_when_export_type_is_used_on_its_export_statement: i2(2207, 1, "The_type_modifier_cannot_be_used_on_a_named_export_when_export_type_is_used_on_its_export_statement_2207", "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement."), This_type_parameter_might_need_an_extends_0_constraint: i2(2208, 1, "This_type_parameter_might_need_an_extends_0_constraint_2208", "This type parameter might need an `extends {0}` constraint."), The_project_root_is_ambiguous_but_is_required_to_resolve_export_map_entry_0_in_file_1_Supply_the_rootDir_compiler_option_to_disambiguate: i2(2209, 1, "The_project_root_is_ambiguous_but_is_required_to_resolve_export_map_entry_0_in_file_1_Supply_the_roo_2209", "The project root is ambiguous, but is required to resolve export map entry '{0}' in file '{1}'. Supply the `rootDir` compiler option to disambiguate."), The_project_root_is_ambiguous_but_is_required_to_resolve_import_map_entry_0_in_file_1_Supply_the_rootDir_compiler_option_to_disambiguate: i2(2210, 1, "The_project_root_is_ambiguous_but_is_required_to_resolve_import_map_entry_0_in_file_1_Supply_the_roo_2210", "The project root is ambiguous, but is required to resolve import map entry '{0}' in file '{1}'. Supply the `rootDir` compiler option to disambiguate."), Add_extends_constraint: i2(2211, 3, "Add_extends_constraint_2211", "Add `extends` constraint."), Add_extends_constraint_to_all_type_parameters: i2(2212, 3, "Add_extends_constraint_to_all_type_parameters_2212", "Add `extends` constraint to all type parameters"), Duplicate_identifier_0: i2(2300, 1, "Duplicate_identifier_0_2300", "Duplicate identifier '{0}'."), Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor: i2(2301, 1, "Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor_2301", "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor."), Static_members_cannot_reference_class_type_parameters: i2(2302, 1, "Static_members_cannot_reference_class_type_parameters_2302", "Static members cannot reference class type parameters."), Circular_definition_of_import_alias_0: i2(2303, 1, "Circular_definition_of_import_alias_0_2303", "Circular definition of import alias '{0}'."), Cannot_find_name_0: i2(2304, 1, "Cannot_find_name_0_2304", "Cannot find name '{0}'."), Module_0_has_no_exported_member_1: i2(2305, 1, "Module_0_has_no_exported_member_1_2305", "Module '{0}' has no exported member '{1}'."), File_0_is_not_a_module: i2(2306, 1, "File_0_is_not_a_module_2306", "File '{0}' is not a module."), Cannot_find_module_0_or_its_corresponding_type_declarations: i2(2307, 1, "Cannot_find_module_0_or_its_corresponding_type_declarations_2307", "Cannot find module '{0}' or its corresponding type declarations."), Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambiguity: i2(2308, 1, "Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambig_2308", "Module {0} has already exported a member named '{1}'. Consider explicitly re-exporting to resolve the ambiguity."), An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements: i2(2309, 1, "An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements_2309", "An export assignment cannot be used in a module with other exported elements."), Type_0_recursively_references_itself_as_a_base_type: i2(2310, 1, "Type_0_recursively_references_itself_as_a_base_type_2310", "Type '{0}' recursively references itself as a base type."), Cannot_find_name_0_Did_you_mean_to_write_this_in_an_async_function: i2(2311, 1, "Cannot_find_name_0_Did_you_mean_to_write_this_in_an_async_function_2311", "Cannot find name '{0}'. Did you mean to write this in an async function?"), An_interface_can_only_extend_an_object_type_or_intersection_of_object_types_with_statically_known_members: i2(2312, 1, "An_interface_can_only_extend_an_object_type_or_intersection_of_object_types_with_statically_known_me_2312", "An interface can only extend an object type or intersection of object types with statically known members."), Type_parameter_0_has_a_circular_constraint: i2(2313, 1, "Type_parameter_0_has_a_circular_constraint_2313", "Type parameter '{0}' has a circular constraint."), Generic_type_0_requires_1_type_argument_s: i2(2314, 1, "Generic_type_0_requires_1_type_argument_s_2314", "Generic type '{0}' requires {1} type argument(s)."), Type_0_is_not_generic: i2(2315, 1, "Type_0_is_not_generic_2315", "Type '{0}' is not generic."), Global_type_0_must_be_a_class_or_interface_type: i2(2316, 1, "Global_type_0_must_be_a_class_or_interface_type_2316", "Global type '{0}' must be a class or interface type."), Global_type_0_must_have_1_type_parameter_s: i2(2317, 1, "Global_type_0_must_have_1_type_parameter_s_2317", "Global type '{0}' must have {1} type parameter(s)."), Cannot_find_global_type_0: i2(2318, 1, "Cannot_find_global_type_0_2318", "Cannot find global type '{0}'."), Named_property_0_of_types_1_and_2_are_not_identical: i2(2319, 1, "Named_property_0_of_types_1_and_2_are_not_identical_2319", "Named property '{0}' of types '{1}' and '{2}' are not identical."), Interface_0_cannot_simultaneously_extend_types_1_and_2: i2(2320, 1, "Interface_0_cannot_simultaneously_extend_types_1_and_2_2320", "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}'."), Excessive_stack_depth_comparing_types_0_and_1: i2(2321, 1, "Excessive_stack_depth_comparing_types_0_and_1_2321", "Excessive stack depth comparing types '{0}' and '{1}'."), Type_0_is_not_assignable_to_type_1: i2(2322, 1, "Type_0_is_not_assignable_to_type_1_2322", "Type '{0}' is not assignable to type '{1}'."), Cannot_redeclare_exported_variable_0: i2(2323, 1, "Cannot_redeclare_exported_variable_0_2323", "Cannot redeclare exported variable '{0}'."), Property_0_is_missing_in_type_1: i2(2324, 1, "Property_0_is_missing_in_type_1_2324", "Property '{0}' is missing in type '{1}'."), Property_0_is_private_in_type_1_but_not_in_type_2: i2(2325, 1, "Property_0_is_private_in_type_1_but_not_in_type_2_2325", "Property '{0}' is private in type '{1}' but not in type '{2}'."), Types_of_property_0_are_incompatible: i2(2326, 1, "Types_of_property_0_are_incompatible_2326", "Types of property '{0}' are incompatible."), Property_0_is_optional_in_type_1_but_required_in_type_2: i2(2327, 1, "Property_0_is_optional_in_type_1_but_required_in_type_2_2327", "Property '{0}' is optional in type '{1}' but required in type '{2}'."), Types_of_parameters_0_and_1_are_incompatible: i2(2328, 1, "Types_of_parameters_0_and_1_are_incompatible_2328", "Types of parameters '{0}' and '{1}' are incompatible."), Index_signature_for_type_0_is_missing_in_type_1: i2(2329, 1, "Index_signature_for_type_0_is_missing_in_type_1_2329", "Index signature for type '{0}' is missing in type '{1}'."), _0_and_1_index_signatures_are_incompatible: i2(2330, 1, "_0_and_1_index_signatures_are_incompatible_2330", "'{0}' and '{1}' index signatures are incompatible."), this_cannot_be_referenced_in_a_module_or_namespace_body: i2(2331, 1, "this_cannot_be_referenced_in_a_module_or_namespace_body_2331", "'this' cannot be referenced in a module or namespace body."), this_cannot_be_referenced_in_current_location: i2(2332, 1, "this_cannot_be_referenced_in_current_location_2332", "'this' cannot be referenced in current location."), this_cannot_be_referenced_in_constructor_arguments: i2(2333, 1, "this_cannot_be_referenced_in_constructor_arguments_2333", "'this' cannot be referenced in constructor arguments."), this_cannot_be_referenced_in_a_static_property_initializer: i2(2334, 1, "this_cannot_be_referenced_in_a_static_property_initializer_2334", "'this' cannot be referenced in a static property initializer."), super_can_only_be_referenced_in_a_derived_class: i2(2335, 1, "super_can_only_be_referenced_in_a_derived_class_2335", "'super' can only be referenced in a derived class."), super_cannot_be_referenced_in_constructor_arguments: i2(2336, 1, "super_cannot_be_referenced_in_constructor_arguments_2336", "'super' cannot be referenced in constructor arguments."), Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors: i2(2337, 1, "Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors_2337", "Super calls are not permitted outside constructors or in nested functions inside constructors."), super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class: i2(2338, 1, "super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_der_2338", "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class."), Property_0_does_not_exist_on_type_1: i2(2339, 1, "Property_0_does_not_exist_on_type_1_2339", "Property '{0}' does not exist on type '{1}'."), Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword: i2(2340, 1, "Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword_2340", "Only public and protected methods of the base class are accessible via the 'super' keyword."), Property_0_is_private_and_only_accessible_within_class_1: i2(2341, 1, "Property_0_is_private_and_only_accessible_within_class_1_2341", "Property '{0}' is private and only accessible within class '{1}'."), This_syntax_requires_an_imported_helper_named_1_which_does_not_exist_in_0_Consider_upgrading_your_version_of_0: i2(2343, 1, "This_syntax_requires_an_imported_helper_named_1_which_does_not_exist_in_0_Consider_upgrading_your_ve_2343", "This syntax requires an imported helper named '{1}' which does not exist in '{0}'. Consider upgrading your version of '{0}'."), Type_0_does_not_satisfy_the_constraint_1: i2(2344, 1, "Type_0_does_not_satisfy_the_constraint_1_2344", "Type '{0}' does not satisfy the constraint '{1}'."), Argument_of_type_0_is_not_assignable_to_parameter_of_type_1: i2(2345, 1, "Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_2345", "Argument of type '{0}' is not assignable to parameter of type '{1}'."), Call_target_does_not_contain_any_signatures: i2(2346, 1, "Call_target_does_not_contain_any_signatures_2346", "Call target does not contain any signatures."), Untyped_function_calls_may_not_accept_type_arguments: i2(2347, 1, "Untyped_function_calls_may_not_accept_type_arguments_2347", "Untyped function calls may not accept type arguments."), Value_of_type_0_is_not_callable_Did_you_mean_to_include_new: i2(2348, 1, "Value_of_type_0_is_not_callable_Did_you_mean_to_include_new_2348", "Value of type '{0}' is not callable. Did you mean to include 'new'?"), This_expression_is_not_callable: i2(2349, 1, "This_expression_is_not_callable_2349", "This expression is not callable."), Only_a_void_function_can_be_called_with_the_new_keyword: i2(2350, 1, "Only_a_void_function_can_be_called_with_the_new_keyword_2350", "Only a void function can be called with the 'new' keyword."), This_expression_is_not_constructable: i2(2351, 1, "This_expression_is_not_constructable_2351", "This expression is not constructable."), Conversion_of_type_0_to_type_1_may_be_a_mistake_because_neither_type_sufficiently_overlaps_with_the_other_If_this_was_intentional_convert_the_expression_to_unknown_first: i2(2352, 1, "Conversion_of_type_0_to_type_1_may_be_a_mistake_because_neither_type_sufficiently_overlaps_with_the__2352", "Conversion of type '{0}' to type '{1}' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first."), Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1: i2(2353, 1, "Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1_2353", "Object literal may only specify known properties, and '{0}' does not exist in type '{1}'."), This_syntax_requires_an_imported_helper_but_module_0_cannot_be_found: i2(2354, 1, "This_syntax_requires_an_imported_helper_but_module_0_cannot_be_found_2354", "This syntax requires an imported helper but module '{0}' cannot be found."), A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value: i2(2355, 1, "A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_2355", "A function whose declared type is neither 'void' nor 'any' must return a value."), An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type: i2(2356, 1, "An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type_2356", "An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type."), The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access: i2(2357, 1, "The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access_2357", "The operand of an increment or decrement operator must be a variable or a property access."), The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: i2(2358, 1, "The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_paramete_2358", "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter."), The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type: i2(2359, 1, "The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_F_2359", "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type."), The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type: i2(2362, 1, "The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type_2362", "The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."), The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type: i2(2363, 1, "The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type_2363", "The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."), The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access: i2(2364, 1, "The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access_2364", "The left-hand side of an assignment expression must be a variable or a property access."), Operator_0_cannot_be_applied_to_types_1_and_2: i2(2365, 1, "Operator_0_cannot_be_applied_to_types_1_and_2_2365", "Operator '{0}' cannot be applied to types '{1}' and '{2}'."), Function_lacks_ending_return_statement_and_return_type_does_not_include_undefined: i2(2366, 1, "Function_lacks_ending_return_statement_and_return_type_does_not_include_undefined_2366", "Function lacks ending return statement and return type does not include 'undefined'."), This_comparison_appears_to_be_unintentional_because_the_types_0_and_1_have_no_overlap: i2(2367, 1, "This_comparison_appears_to_be_unintentional_because_the_types_0_and_1_have_no_overlap_2367", "This comparison appears to be unintentional because the types '{0}' and '{1}' have no overlap."), Type_parameter_name_cannot_be_0: i2(2368, 1, "Type_parameter_name_cannot_be_0_2368", "Type parameter name cannot be '{0}'."), A_parameter_property_is_only_allowed_in_a_constructor_implementation: i2(2369, 1, "A_parameter_property_is_only_allowed_in_a_constructor_implementation_2369", "A parameter property is only allowed in a constructor implementation."), A_rest_parameter_must_be_of_an_array_type: i2(2370, 1, "A_rest_parameter_must_be_of_an_array_type_2370", "A rest parameter must be of an array type."), A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation: i2(2371, 1, "A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation_2371", "A parameter initializer is only allowed in a function or constructor implementation."), Parameter_0_cannot_reference_itself: i2(2372, 1, "Parameter_0_cannot_reference_itself_2372", "Parameter '{0}' cannot reference itself."), Parameter_0_cannot_reference_identifier_1_declared_after_it: i2(2373, 1, "Parameter_0_cannot_reference_identifier_1_declared_after_it_2373", "Parameter '{0}' cannot reference identifier '{1}' declared after it."), Duplicate_index_signature_for_type_0: i2(2374, 1, "Duplicate_index_signature_for_type_0_2374", "Duplicate index signature for type '{0}'."), Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties: i2(2375, 1, "Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefi_2375", "Type '{0}' is not assignable to type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties."), A_super_call_must_be_the_first_statement_in_the_constructor_to_refer_to_super_or_this_when_a_derived_class_contains_initialized_properties_parameter_properties_or_private_identifiers: i2(2376, 1, "A_super_call_must_be_the_first_statement_in_the_constructor_to_refer_to_super_or_this_when_a_derived_2376", "A 'super' call must be the first statement in the constructor to refer to 'super' or 'this' when a derived class contains initialized properties, parameter properties, or private identifiers."), Constructors_for_derived_classes_must_contain_a_super_call: i2(2377, 1, "Constructors_for_derived_classes_must_contain_a_super_call_2377", "Constructors for derived classes must contain a 'super' call."), A_get_accessor_must_return_a_value: i2(2378, 1, "A_get_accessor_must_return_a_value_2378", "A 'get' accessor must return a value."), Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties: i2(2379, 1, "Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_with_exactOptionalPropertyTypes_Colon_tr_2379", "Argument of type '{0}' is not assignable to parameter of type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the types of the target's properties."), The_return_type_of_a_get_accessor_must_be_assignable_to_its_set_accessor_type: i2(2380, 1, "The_return_type_of_a_get_accessor_must_be_assignable_to_its_set_accessor_type_2380", "The return type of a 'get' accessor must be assignable to its 'set' accessor type"), Overload_signatures_must_all_be_exported_or_non_exported: i2(2383, 1, "Overload_signatures_must_all_be_exported_or_non_exported_2383", "Overload signatures must all be exported or non-exported."), Overload_signatures_must_all_be_ambient_or_non_ambient: i2(2384, 1, "Overload_signatures_must_all_be_ambient_or_non_ambient_2384", "Overload signatures must all be ambient or non-ambient."), Overload_signatures_must_all_be_public_private_or_protected: i2(2385, 1, "Overload_signatures_must_all_be_public_private_or_protected_2385", "Overload signatures must all be public, private or protected."), Overload_signatures_must_all_be_optional_or_required: i2(2386, 1, "Overload_signatures_must_all_be_optional_or_required_2386", "Overload signatures must all be optional or required."), Function_overload_must_be_static: i2(2387, 1, "Function_overload_must_be_static_2387", "Function overload must be static."), Function_overload_must_not_be_static: i2(2388, 1, "Function_overload_must_not_be_static_2388", "Function overload must not be static."), Function_implementation_name_must_be_0: i2(2389, 1, "Function_implementation_name_must_be_0_2389", "Function implementation name must be '{0}'."), Constructor_implementation_is_missing: i2(2390, 1, "Constructor_implementation_is_missing_2390", "Constructor implementation is missing."), Function_implementation_is_missing_or_not_immediately_following_the_declaration: i2(2391, 1, "Function_implementation_is_missing_or_not_immediately_following_the_declaration_2391", "Function implementation is missing or not immediately following the declaration."), Multiple_constructor_implementations_are_not_allowed: i2(2392, 1, "Multiple_constructor_implementations_are_not_allowed_2392", "Multiple constructor implementations are not allowed."), Duplicate_function_implementation: i2(2393, 1, "Duplicate_function_implementation_2393", "Duplicate function implementation."), This_overload_signature_is_not_compatible_with_its_implementation_signature: i2(2394, 1, "This_overload_signature_is_not_compatible_with_its_implementation_signature_2394", "This overload signature is not compatible with its implementation signature."), Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local: i2(2395, 1, "Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local_2395", "Individual declarations in merged declaration '{0}' must be all exported or all local."), Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters: i2(2396, 1, "Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters_2396", "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters."), Declaration_name_conflicts_with_built_in_global_identifier_0: i2(2397, 1, "Declaration_name_conflicts_with_built_in_global_identifier_0_2397", "Declaration name conflicts with built-in global identifier '{0}'."), constructor_cannot_be_used_as_a_parameter_property_name: i2(2398, 1, "constructor_cannot_be_used_as_a_parameter_property_name_2398", "'constructor' cannot be used as a parameter property name."), Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference: i2(2399, 1, "Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference_2399", "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference."), Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference: i2(2400, 1, "Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference_2400", "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference."), A_super_call_must_be_a_root_level_statement_within_a_constructor_of_a_derived_class_that_contains_initialized_properties_parameter_properties_or_private_identifiers: i2(2401, 1, "A_super_call_must_be_a_root_level_statement_within_a_constructor_of_a_derived_class_that_contains_in_2401", "A 'super' call must be a root-level statement within a constructor of a derived class that contains initialized properties, parameter properties, or private identifiers."), Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference: i2(2402, 1, "Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference_2402", "Expression resolves to '_super' that compiler uses to capture base class reference."), Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2: i2(2403, 1, "Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_t_2403", "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'."), The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation: i2(2404, 1, "The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation_2404", "The left-hand side of a 'for...in' statement cannot use a type annotation."), The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any: i2(2405, 1, "The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any_2405", "The left-hand side of a 'for...in' statement must be of type 'string' or 'any'."), The_left_hand_side_of_a_for_in_statement_must_be_a_variable_or_a_property_access: i2(2406, 1, "The_left_hand_side_of_a_for_in_statement_must_be_a_variable_or_a_property_access_2406", "The left-hand side of a 'for...in' statement must be a variable or a property access."), The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter_but_here_has_type_0: i2(2407, 1, "The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter_but_2407", "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter, but here has type '{0}'."), Setters_cannot_return_a_value: i2(2408, 1, "Setters_cannot_return_a_value_2408", "Setters cannot return a value."), Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class: i2(2409, 1, "Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class_2409", "Return type of constructor signature must be assignable to the instance type of the class."), The_with_statement_is_not_supported_All_symbols_in_a_with_block_will_have_type_any: i2(2410, 1, "The_with_statement_is_not_supported_All_symbols_in_a_with_block_will_have_type_any_2410", "The 'with' statement is not supported. All symbols in a 'with' block will have type 'any'."), Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_type_of_the_target: i2(2412, 1, "Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefi_2412", "Type '{0}' is not assignable to type '{1}' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target."), Property_0_of_type_1_is_not_assignable_to_2_index_type_3: i2(2411, 1, "Property_0_of_type_1_is_not_assignable_to_2_index_type_3_2411", "Property '{0}' of type '{1}' is not assignable to '{2}' index type '{3}'."), _0_index_type_1_is_not_assignable_to_2_index_type_3: i2(2413, 1, "_0_index_type_1_is_not_assignable_to_2_index_type_3_2413", "'{0}' index type '{1}' is not assignable to '{2}' index type '{3}'."), Class_name_cannot_be_0: i2(2414, 1, "Class_name_cannot_be_0_2414", "Class name cannot be '{0}'."), Class_0_incorrectly_extends_base_class_1: i2(2415, 1, "Class_0_incorrectly_extends_base_class_1_2415", "Class '{0}' incorrectly extends base class '{1}'."), Property_0_in_type_1_is_not_assignable_to_the_same_property_in_base_type_2: i2(2416, 1, "Property_0_in_type_1_is_not_assignable_to_the_same_property_in_base_type_2_2416", "Property '{0}' in type '{1}' is not assignable to the same property in base type '{2}'."), Class_static_side_0_incorrectly_extends_base_class_static_side_1: i2(2417, 1, "Class_static_side_0_incorrectly_extends_base_class_static_side_1_2417", "Class static side '{0}' incorrectly extends base class static side '{1}'."), Type_of_computed_property_s_value_is_0_which_is_not_assignable_to_type_1: i2(2418, 1, "Type_of_computed_property_s_value_is_0_which_is_not_assignable_to_type_1_2418", "Type of computed property's value is '{0}', which is not assignable to type '{1}'."), Types_of_construct_signatures_are_incompatible: i2(2419, 1, "Types_of_construct_signatures_are_incompatible_2419", "Types of construct signatures are incompatible."), Class_0_incorrectly_implements_interface_1: i2(2420, 1, "Class_0_incorrectly_implements_interface_1_2420", "Class '{0}' incorrectly implements interface '{1}'."), A_class_can_only_implement_an_object_type_or_intersection_of_object_types_with_statically_known_members: i2(2422, 1, "A_class_can_only_implement_an_object_type_or_intersection_of_object_types_with_statically_known_memb_2422", "A class can only implement an object type or intersection of object types with statically known members."), Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor: i2(2423, 1, "Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_access_2423", "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor."), Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function: i2(2425, 1, "Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_functi_2425", "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function."), Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function: i2(2426, 1, "Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_functi_2426", "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function."), Interface_name_cannot_be_0: i2(2427, 1, "Interface_name_cannot_be_0_2427", "Interface name cannot be '{0}'."), All_declarations_of_0_must_have_identical_type_parameters: i2(2428, 1, "All_declarations_of_0_must_have_identical_type_parameters_2428", "All declarations of '{0}' must have identical type parameters."), Interface_0_incorrectly_extends_interface_1: i2(2430, 1, "Interface_0_incorrectly_extends_interface_1_2430", "Interface '{0}' incorrectly extends interface '{1}'."), Enum_name_cannot_be_0: i2(2431, 1, "Enum_name_cannot_be_0_2431", "Enum name cannot be '{0}'."), In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element: i2(2432, 1, "In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enu_2432", "In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element."), A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged: i2(2433, 1, "A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merg_2433", "A namespace declaration cannot be in a different file from a class or function with which it is merged."), A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged: i2(2434, 1, "A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged_2434", "A namespace declaration cannot be located prior to a class or function with which it is merged."), Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces: i2(2435, 1, "Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces_2435", "Ambient modules cannot be nested in other modules or namespaces."), Ambient_module_declaration_cannot_specify_relative_module_name: i2(2436, 1, "Ambient_module_declaration_cannot_specify_relative_module_name_2436", "Ambient module declaration cannot specify relative module name."), Module_0_is_hidden_by_a_local_declaration_with_the_same_name: i2(2437, 1, "Module_0_is_hidden_by_a_local_declaration_with_the_same_name_2437", "Module '{0}' is hidden by a local declaration with the same name."), Import_name_cannot_be_0: i2(2438, 1, "Import_name_cannot_be_0_2438", "Import name cannot be '{0}'."), Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name: i2(2439, 1, "Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relati_2439", "Import or export declaration in an ambient module declaration cannot reference module through relative module name."), Import_declaration_conflicts_with_local_declaration_of_0: i2(2440, 1, "Import_declaration_conflicts_with_local_declaration_of_0_2440", "Import declaration conflicts with local declaration of '{0}'."), Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module: i2(2441, 1, "Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_2441", "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module."), Types_have_separate_declarations_of_a_private_property_0: i2(2442, 1, "Types_have_separate_declarations_of_a_private_property_0_2442", "Types have separate declarations of a private property '{0}'."), Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2: i2(2443, 1, "Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2_2443", "Property '{0}' is protected but type '{1}' is not a class derived from '{2}'."), Property_0_is_protected_in_type_1_but_public_in_type_2: i2(2444, 1, "Property_0_is_protected_in_type_1_but_public_in_type_2_2444", "Property '{0}' is protected in type '{1}' but public in type '{2}'."), Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses: i2(2445, 1, "Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses_2445", "Property '{0}' is protected and only accessible within class '{1}' and its subclasses."), Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1_This_is_an_instance_of_class_2: i2(2446, 1, "Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1_This_is_an_instance_of_cl_2446", "Property '{0}' is protected and only accessible through an instance of class '{1}'. This is an instance of class '{2}'."), The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead: i2(2447, 1, "The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead_2447", "The '{0}' operator is not allowed for boolean types. Consider using '{1}' instead."), Block_scoped_variable_0_used_before_its_declaration: i2(2448, 1, "Block_scoped_variable_0_used_before_its_declaration_2448", "Block-scoped variable '{0}' used before its declaration."), Class_0_used_before_its_declaration: i2(2449, 1, "Class_0_used_before_its_declaration_2449", "Class '{0}' used before its declaration."), Enum_0_used_before_its_declaration: i2(2450, 1, "Enum_0_used_before_its_declaration_2450", "Enum '{0}' used before its declaration."), Cannot_redeclare_block_scoped_variable_0: i2(2451, 1, "Cannot_redeclare_block_scoped_variable_0_2451", "Cannot redeclare block-scoped variable '{0}'."), An_enum_member_cannot_have_a_numeric_name: i2(2452, 1, "An_enum_member_cannot_have_a_numeric_name_2452", "An enum member cannot have a numeric name."), Variable_0_is_used_before_being_assigned: i2(2454, 1, "Variable_0_is_used_before_being_assigned_2454", "Variable '{0}' is used before being assigned."), Type_alias_0_circularly_references_itself: i2(2456, 1, "Type_alias_0_circularly_references_itself_2456", "Type alias '{0}' circularly references itself."), Type_alias_name_cannot_be_0: i2(2457, 1, "Type_alias_name_cannot_be_0_2457", "Type alias name cannot be '{0}'."), An_AMD_module_cannot_have_multiple_name_assignments: i2(2458, 1, "An_AMD_module_cannot_have_multiple_name_assignments_2458", "An AMD module cannot have multiple name assignments."), Module_0_declares_1_locally_but_it_is_not_exported: i2(2459, 1, "Module_0_declares_1_locally_but_it_is_not_exported_2459", "Module '{0}' declares '{1}' locally, but it is not exported."), Module_0_declares_1_locally_but_it_is_exported_as_2: i2(2460, 1, "Module_0_declares_1_locally_but_it_is_exported_as_2_2460", "Module '{0}' declares '{1}' locally, but it is exported as '{2}'."), Type_0_is_not_an_array_type: i2(2461, 1, "Type_0_is_not_an_array_type_2461", "Type '{0}' is not an array type."), A_rest_element_must_be_last_in_a_destructuring_pattern: i2(2462, 1, "A_rest_element_must_be_last_in_a_destructuring_pattern_2462", "A rest element must be last in a destructuring pattern."), A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature: i2(2463, 1, "A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature_2463", "A binding pattern parameter cannot be optional in an implementation signature."), A_computed_property_name_must_be_of_type_string_number_symbol_or_any: i2(2464, 1, "A_computed_property_name_must_be_of_type_string_number_symbol_or_any_2464", "A computed property name must be of type 'string', 'number', 'symbol', or 'any'."), this_cannot_be_referenced_in_a_computed_property_name: i2(2465, 1, "this_cannot_be_referenced_in_a_computed_property_name_2465", "'this' cannot be referenced in a computed property name."), super_cannot_be_referenced_in_a_computed_property_name: i2(2466, 1, "super_cannot_be_referenced_in_a_computed_property_name_2466", "'super' cannot be referenced in a computed property name."), A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type: i2(2467, 1, "A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type_2467", "A computed property name cannot reference a type parameter from its containing type."), Cannot_find_global_value_0: i2(2468, 1, "Cannot_find_global_value_0_2468", "Cannot find global value '{0}'."), The_0_operator_cannot_be_applied_to_type_symbol: i2(2469, 1, "The_0_operator_cannot_be_applied_to_type_symbol_2469", "The '{0}' operator cannot be applied to type 'symbol'."), Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher: i2(2472, 1, "Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher_2472", "Spread operator in 'new' expressions is only available when targeting ECMAScript 5 and higher."), Enum_declarations_must_all_be_const_or_non_const: i2(2473, 1, "Enum_declarations_must_all_be_const_or_non_const_2473", "Enum declarations must all be const or non-const."), const_enum_member_initializers_must_be_constant_expressions: i2(2474, 1, "const_enum_member_initializers_must_be_constant_expressions_2474", "const enum member initializers must be constant expressions."), const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment_or_type_query: i2(2475, 1, "const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_im_2475", "'const' enums can only be used in property or index access expressions or the right hand side of an import declaration or export assignment or type query."), A_const_enum_member_can_only_be_accessed_using_a_string_literal: i2(2476, 1, "A_const_enum_member_can_only_be_accessed_using_a_string_literal_2476", "A const enum member can only be accessed using a string literal."), const_enum_member_initializer_was_evaluated_to_a_non_finite_value: i2(2477, 1, "const_enum_member_initializer_was_evaluated_to_a_non_finite_value_2477", "'const' enum member initializer was evaluated to a non-finite value."), const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN: i2(2478, 1, "const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN_2478", "'const' enum member initializer was evaluated to disallowed value 'NaN'."), let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations: i2(2480, 1, "let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations_2480", "'let' is not allowed to be used as a name in 'let' or 'const' declarations."), Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1: i2(2481, 1, "Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1_2481", "Cannot initialize outer scoped variable '{0}' in the same scope as block scoped declaration '{1}'."), The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation: i2(2483, 1, "The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation_2483", "The left-hand side of a 'for...of' statement cannot use a type annotation."), Export_declaration_conflicts_with_exported_declaration_of_0: i2(2484, 1, "Export_declaration_conflicts_with_exported_declaration_of_0_2484", "Export declaration conflicts with exported declaration of '{0}'."), The_left_hand_side_of_a_for_of_statement_must_be_a_variable_or_a_property_access: i2(2487, 1, "The_left_hand_side_of_a_for_of_statement_must_be_a_variable_or_a_property_access_2487", "The left-hand side of a 'for...of' statement must be a variable or a property access."), Type_0_must_have_a_Symbol_iterator_method_that_returns_an_iterator: i2(2488, 1, "Type_0_must_have_a_Symbol_iterator_method_that_returns_an_iterator_2488", "Type '{0}' must have a '[Symbol.iterator]()' method that returns an iterator."), An_iterator_must_have_a_next_method: i2(2489, 1, "An_iterator_must_have_a_next_method_2489", "An iterator must have a 'next()' method."), The_type_returned_by_the_0_method_of_an_iterator_must_have_a_value_property: i2(2490, 1, "The_type_returned_by_the_0_method_of_an_iterator_must_have_a_value_property_2490", "The type returned by the '{0}()' method of an iterator must have a 'value' property."), The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern: i2(2491, 1, "The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern_2491", "The left-hand side of a 'for...in' statement cannot be a destructuring pattern."), Cannot_redeclare_identifier_0_in_catch_clause: i2(2492, 1, "Cannot_redeclare_identifier_0_in_catch_clause_2492", "Cannot redeclare identifier '{0}' in catch clause."), Tuple_type_0_of_length_1_has_no_element_at_index_2: i2(2493, 1, "Tuple_type_0_of_length_1_has_no_element_at_index_2_2493", "Tuple type '{0}' of length '{1}' has no element at index '{2}'."), Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher: i2(2494, 1, "Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher_2494", "Using a string in a 'for...of' statement is only supported in ECMAScript 5 and higher."), Type_0_is_not_an_array_type_or_a_string_type: i2(2495, 1, "Type_0_is_not_an_array_type_or_a_string_type_2495", "Type '{0}' is not an array type or a string type."), The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression: i2(2496, 1, "The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_stand_2496", "The 'arguments' object cannot be referenced in an arrow function in ES3 and ES5. Consider using a standard function expression."), This_module_can_only_be_referenced_with_ECMAScript_imports_Slashexports_by_turning_on_the_0_flag_and_referencing_its_default_export: i2(2497, 1, "This_module_can_only_be_referenced_with_ECMAScript_imports_Slashexports_by_turning_on_the_0_flag_and_2497", "This module can only be referenced with ECMAScript imports/exports by turning on the '{0}' flag and referencing its default export."), Module_0_uses_export_and_cannot_be_used_with_export_Asterisk: i2(2498, 1, "Module_0_uses_export_and_cannot_be_used_with_export_Asterisk_2498", "Module '{0}' uses 'export =' and cannot be used with 'export *'."), An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments: i2(2499, 1, "An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments_2499", "An interface can only extend an identifier/qualified-name with optional type arguments."), A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments: i2(2500, 1, "A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments_2500", "A class can only implement an identifier/qualified-name with optional type arguments."), A_rest_element_cannot_contain_a_binding_pattern: i2(2501, 1, "A_rest_element_cannot_contain_a_binding_pattern_2501", "A rest element cannot contain a binding pattern."), _0_is_referenced_directly_or_indirectly_in_its_own_type_annotation: i2(2502, 1, "_0_is_referenced_directly_or_indirectly_in_its_own_type_annotation_2502", "'{0}' is referenced directly or indirectly in its own type annotation."), Cannot_find_namespace_0: i2(2503, 1, "Cannot_find_namespace_0_2503", "Cannot find namespace '{0}'."), Type_0_must_have_a_Symbol_asyncIterator_method_that_returns_an_async_iterator: i2(2504, 1, "Type_0_must_have_a_Symbol_asyncIterator_method_that_returns_an_async_iterator_2504", "Type '{0}' must have a '[Symbol.asyncIterator]()' method that returns an async iterator."), A_generator_cannot_have_a_void_type_annotation: i2(2505, 1, "A_generator_cannot_have_a_void_type_annotation_2505", "A generator cannot have a 'void' type annotation."), _0_is_referenced_directly_or_indirectly_in_its_own_base_expression: i2(2506, 1, "_0_is_referenced_directly_or_indirectly_in_its_own_base_expression_2506", "'{0}' is referenced directly or indirectly in its own base expression."), Type_0_is_not_a_constructor_function_type: i2(2507, 1, "Type_0_is_not_a_constructor_function_type_2507", "Type '{0}' is not a constructor function type."), No_base_constructor_has_the_specified_number_of_type_arguments: i2(2508, 1, "No_base_constructor_has_the_specified_number_of_type_arguments_2508", "No base constructor has the specified number of type arguments."), Base_constructor_return_type_0_is_not_an_object_type_or_intersection_of_object_types_with_statically_known_members: i2(2509, 1, "Base_constructor_return_type_0_is_not_an_object_type_or_intersection_of_object_types_with_statically_2509", "Base constructor return type '{0}' is not an object type or intersection of object types with statically known members."), Base_constructors_must_all_have_the_same_return_type: i2(2510, 1, "Base_constructors_must_all_have_the_same_return_type_2510", "Base constructors must all have the same return type."), Cannot_create_an_instance_of_an_abstract_class: i2(2511, 1, "Cannot_create_an_instance_of_an_abstract_class_2511", "Cannot create an instance of an abstract class."), Overload_signatures_must_all_be_abstract_or_non_abstract: i2(2512, 1, "Overload_signatures_must_all_be_abstract_or_non_abstract_2512", "Overload signatures must all be abstract or non-abstract."), Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression: i2(2513, 1, "Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression_2513", "Abstract method '{0}' in class '{1}' cannot be accessed via super expression."), A_tuple_type_cannot_be_indexed_with_a_negative_value: i2(2514, 1, "A_tuple_type_cannot_be_indexed_with_a_negative_value_2514", "A tuple type cannot be indexed with a negative value."), Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2: i2(2515, 1, "Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2_2515", "Non-abstract class '{0}' does not implement inherited abstract member '{1}' from class '{2}'."), All_declarations_of_an_abstract_method_must_be_consecutive: i2(2516, 1, "All_declarations_of_an_abstract_method_must_be_consecutive_2516", "All declarations of an abstract method must be consecutive."), Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type: i2(2517, 1, "Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type_2517", "Cannot assign an abstract constructor type to a non-abstract constructor type."), A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard: i2(2518, 1, "A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard_2518", "A 'this'-based type guard is not compatible with a parameter-based type guard."), An_async_iterator_must_have_a_next_method: i2(2519, 1, "An_async_iterator_must_have_a_next_method_2519", "An async iterator must have a 'next()' method."), Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions: i2(2520, 1, "Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions_2520", "Duplicate identifier '{0}'. Compiler uses declaration '{1}' to support async functions."), The_arguments_object_cannot_be_referenced_in_an_async_function_or_method_in_ES3_and_ES5_Consider_using_a_standard_function_or_method: i2(2522, 1, "The_arguments_object_cannot_be_referenced_in_an_async_function_or_method_in_ES3_and_ES5_Consider_usi_2522", "The 'arguments' object cannot be referenced in an async function or method in ES3 and ES5. Consider using a standard function or method."), yield_expressions_cannot_be_used_in_a_parameter_initializer: i2(2523, 1, "yield_expressions_cannot_be_used_in_a_parameter_initializer_2523", "'yield' expressions cannot be used in a parameter initializer."), await_expressions_cannot_be_used_in_a_parameter_initializer: i2(2524, 1, "await_expressions_cannot_be_used_in_a_parameter_initializer_2524", "'await' expressions cannot be used in a parameter initializer."), Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value: i2(2525, 1, "Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value_2525", "Initializer provides no value for this binding element and the binding element has no default value."), A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface: i2(2526, 1, "A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface_2526", "A 'this' type is available only in a non-static member of a class or interface."), The_inferred_type_of_0_references_an_inaccessible_1_type_A_type_annotation_is_necessary: i2(2527, 1, "The_inferred_type_of_0_references_an_inaccessible_1_type_A_type_annotation_is_necessary_2527", "The inferred type of '{0}' references an inaccessible '{1}' type. A type annotation is necessary."), A_module_cannot_have_multiple_default_exports: i2(2528, 1, "A_module_cannot_have_multiple_default_exports_2528", "A module cannot have multiple default exports."), Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_functions: i2(2529, 1, "Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_func_2529", "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module containing async functions."), Property_0_is_incompatible_with_index_signature: i2(2530, 1, "Property_0_is_incompatible_with_index_signature_2530", "Property '{0}' is incompatible with index signature."), Object_is_possibly_null: i2(2531, 1, "Object_is_possibly_null_2531", "Object is possibly 'null'."), Object_is_possibly_undefined: i2(2532, 1, "Object_is_possibly_undefined_2532", "Object is possibly 'undefined'."), Object_is_possibly_null_or_undefined: i2(2533, 1, "Object_is_possibly_null_or_undefined_2533", "Object is possibly 'null' or 'undefined'."), A_function_returning_never_cannot_have_a_reachable_end_point: i2(2534, 1, "A_function_returning_never_cannot_have_a_reachable_end_point_2534", "A function returning 'never' cannot have a reachable end point."), Type_0_cannot_be_used_to_index_type_1: i2(2536, 1, "Type_0_cannot_be_used_to_index_type_1_2536", "Type '{0}' cannot be used to index type '{1}'."), Type_0_has_no_matching_index_signature_for_type_1: i2(2537, 1, "Type_0_has_no_matching_index_signature_for_type_1_2537", "Type '{0}' has no matching index signature for type '{1}'."), Type_0_cannot_be_used_as_an_index_type: i2(2538, 1, "Type_0_cannot_be_used_as_an_index_type_2538", "Type '{0}' cannot be used as an index type."), Cannot_assign_to_0_because_it_is_not_a_variable: i2(2539, 1, "Cannot_assign_to_0_because_it_is_not_a_variable_2539", "Cannot assign to '{0}' because it is not a variable."), Cannot_assign_to_0_because_it_is_a_read_only_property: i2(2540, 1, "Cannot_assign_to_0_because_it_is_a_read_only_property_2540", "Cannot assign to '{0}' because it is a read-only property."), Index_signature_in_type_0_only_permits_reading: i2(2542, 1, "Index_signature_in_type_0_only_permits_reading_2542", "Index signature in type '{0}' only permits reading."), Duplicate_identifier_newTarget_Compiler_uses_variable_declaration_newTarget_to_capture_new_target_meta_property_reference: i2(2543, 1, "Duplicate_identifier_newTarget_Compiler_uses_variable_declaration_newTarget_to_capture_new_target_me_2543", "Duplicate identifier '_newTarget'. Compiler uses variable declaration '_newTarget' to capture 'new.target' meta-property reference."), Expression_resolves_to_variable_declaration_newTarget_that_compiler_uses_to_capture_new_target_meta_property_reference: i2(2544, 1, "Expression_resolves_to_variable_declaration_newTarget_that_compiler_uses_to_capture_new_target_meta__2544", "Expression resolves to variable declaration '_newTarget' that compiler uses to capture 'new.target' meta-property reference."), A_mixin_class_must_have_a_constructor_with_a_single_rest_parameter_of_type_any: i2(2545, 1, "A_mixin_class_must_have_a_constructor_with_a_single_rest_parameter_of_type_any_2545", "A mixin class must have a constructor with a single rest parameter of type 'any[]'."), The_type_returned_by_the_0_method_of_an_async_iterator_must_be_a_promise_for_a_type_with_a_value_property: i2(2547, 1, "The_type_returned_by_the_0_method_of_an_async_iterator_must_be_a_promise_for_a_type_with_a_value_pro_2547", "The type returned by the '{0}()' method of an async iterator must be a promise for a type with a 'value' property."), Type_0_is_not_an_array_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator: i2(2548, 1, "Type_0_is_not_an_array_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator_2548", "Type '{0}' is not an array type or does not have a '[Symbol.iterator]()' method that returns an iterator."), Type_0_is_not_an_array_type_or_a_string_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator: i2(2549, 1, "Type_0_is_not_an_array_type_or_a_string_type_or_does_not_have_a_Symbol_iterator_method_that_returns__2549", "Type '{0}' is not an array type or a string type or does not have a '[Symbol.iterator]()' method that returns an iterator."), Property_0_does_not_exist_on_type_1_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2_or_later: i2(2550, 1, "Property_0_does_not_exist_on_type_1_Do_you_need_to_change_your_target_library_Try_changing_the_lib_c_2550", "Property '{0}' does not exist on type '{1}'. Do you need to change your target library? Try changing the 'lib' compiler option to '{2}' or later."), Property_0_does_not_exist_on_type_1_Did_you_mean_2: i2(2551, 1, "Property_0_does_not_exist_on_type_1_Did_you_mean_2_2551", "Property '{0}' does not exist on type '{1}'. Did you mean '{2}'?"), Cannot_find_name_0_Did_you_mean_1: i2(2552, 1, "Cannot_find_name_0_Did_you_mean_1_2552", "Cannot find name '{0}'. Did you mean '{1}'?"), Computed_values_are_not_permitted_in_an_enum_with_string_valued_members: i2(2553, 1, "Computed_values_are_not_permitted_in_an_enum_with_string_valued_members_2553", "Computed values are not permitted in an enum with string valued members."), Expected_0_arguments_but_got_1: i2(2554, 1, "Expected_0_arguments_but_got_1_2554", "Expected {0} arguments, but got {1}."), Expected_at_least_0_arguments_but_got_1: i2(2555, 1, "Expected_at_least_0_arguments_but_got_1_2555", "Expected at least {0} arguments, but got {1}."), A_spread_argument_must_either_have_a_tuple_type_or_be_passed_to_a_rest_parameter: i2(2556, 1, "A_spread_argument_must_either_have_a_tuple_type_or_be_passed_to_a_rest_parameter_2556", "A spread argument must either have a tuple type or be passed to a rest parameter."), Expected_0_type_arguments_but_got_1: i2(2558, 1, "Expected_0_type_arguments_but_got_1_2558", "Expected {0} type arguments, but got {1}."), Type_0_has_no_properties_in_common_with_type_1: i2(2559, 1, "Type_0_has_no_properties_in_common_with_type_1_2559", "Type '{0}' has no properties in common with type '{1}'."), Value_of_type_0_has_no_properties_in_common_with_type_1_Did_you_mean_to_call_it: i2(2560, 1, "Value_of_type_0_has_no_properties_in_common_with_type_1_Did_you_mean_to_call_it_2560", "Value of type '{0}' has no properties in common with type '{1}'. Did you mean to call it?"), Object_literal_may_only_specify_known_properties_but_0_does_not_exist_in_type_1_Did_you_mean_to_write_2: i2(2561, 1, "Object_literal_may_only_specify_known_properties_but_0_does_not_exist_in_type_1_Did_you_mean_to_writ_2561", "Object literal may only specify known properties, but '{0}' does not exist in type '{1}'. Did you mean to write '{2}'?"), Base_class_expressions_cannot_reference_class_type_parameters: i2(2562, 1, "Base_class_expressions_cannot_reference_class_type_parameters_2562", "Base class expressions cannot reference class type parameters."), The_containing_function_or_module_body_is_too_large_for_control_flow_analysis: i2(2563, 1, "The_containing_function_or_module_body_is_too_large_for_control_flow_analysis_2563", "The containing function or module body is too large for control flow analysis."), Property_0_has_no_initializer_and_is_not_definitely_assigned_in_the_constructor: i2(2564, 1, "Property_0_has_no_initializer_and_is_not_definitely_assigned_in_the_constructor_2564", "Property '{0}' has no initializer and is not definitely assigned in the constructor."), Property_0_is_used_before_being_assigned: i2(2565, 1, "Property_0_is_used_before_being_assigned_2565", "Property '{0}' is used before being assigned."), A_rest_element_cannot_have_a_property_name: i2(2566, 1, "A_rest_element_cannot_have_a_property_name_2566", "A rest element cannot have a property name."), Enum_declarations_can_only_merge_with_namespace_or_other_enum_declarations: i2(2567, 1, "Enum_declarations_can_only_merge_with_namespace_or_other_enum_declarations_2567", "Enum declarations can only merge with namespace or other enum declarations."), Property_0_may_not_exist_on_type_1_Did_you_mean_2: i2(2568, 1, "Property_0_may_not_exist_on_type_1_Did_you_mean_2_2568", "Property '{0}' may not exist on type '{1}'. Did you mean '{2}'?"), Could_not_find_name_0_Did_you_mean_1: i2(2570, 1, "Could_not_find_name_0_Did_you_mean_1_2570", "Could not find name '{0}'. Did you mean '{1}'?"), Object_is_of_type_unknown: i2(2571, 1, "Object_is_of_type_unknown_2571", "Object is of type 'unknown'."), A_rest_element_type_must_be_an_array_type: i2(2574, 1, "A_rest_element_type_must_be_an_array_type_2574", "A rest element type must be an array type."), No_overload_expects_0_arguments_but_overloads_do_exist_that_expect_either_1_or_2_arguments: i2(2575, 1, "No_overload_expects_0_arguments_but_overloads_do_exist_that_expect_either_1_or_2_arguments_2575", "No overload expects {0} arguments, but overloads do exist that expect either {1} or {2} arguments."), Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead: i2(2576, 1, "Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead_2576", "Property '{0}' does not exist on type '{1}'. Did you mean to access the static member '{2}' instead?"), Return_type_annotation_circularly_references_itself: i2(2577, 1, "Return_type_annotation_circularly_references_itself_2577", "Return type annotation circularly references itself."), Unused_ts_expect_error_directive: i2(2578, 1, "Unused_ts_expect_error_directive_2578", "Unused '@ts-expect-error' directive."), Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode: i2(2580, 1, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashno_2580", "Cannot find name '{0}'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node`."), Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery: i2(2581, 1, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slash_2581", "Cannot find name '{0}'. Do you need to install type definitions for jQuery? Try `npm i --save-dev @types/jquery`."), Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha: i2(2582, 1, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_type_2582", "Cannot find name '{0}'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`."), Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_1_or_later: i2(2583, 1, "Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2583", "Cannot find name '{0}'. Do you need to change your target library? Try changing the 'lib' compiler option to '{1}' or later."), Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_include_dom: i2(2584, 1, "Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2584", "Cannot find name '{0}'. Do you need to change your target library? Try changing the 'lib' compiler option to include 'dom'."), _0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_es2015_or_later: i2(2585, 1, "_0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Do_you_need_to_change_your_target_library_2585", "'{0}' only refers to a type, but is being used as a value here. Do you need to change your target library? Try changing the 'lib' compiler option to es2015 or later."), Cannot_assign_to_0_because_it_is_a_constant: i2(2588, 1, "Cannot_assign_to_0_because_it_is_a_constant_2588", "Cannot assign to '{0}' because it is a constant."), Type_instantiation_is_excessively_deep_and_possibly_infinite: i2(2589, 1, "Type_instantiation_is_excessively_deep_and_possibly_infinite_2589", "Type instantiation is excessively deep and possibly infinite."), Expression_produces_a_union_type_that_is_too_complex_to_represent: i2(2590, 1, "Expression_produces_a_union_type_that_is_too_complex_to_represent_2590", "Expression produces a union type that is too complex to represent."), Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode_and_then_add_node_to_the_types_field_in_your_tsconfig: i2(2591, 1, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashno_2591", "Cannot find name '{0}'. Do you need to install type definitions for node? Try `npm i --save-dev @types/node` and then add 'node' to the types field in your tsconfig."), Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery_and_then_add_jquery_to_the_types_field_in_your_tsconfig: i2(2592, 1, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slash_2592", "Cannot find name '{0}'. Do you need to install type definitions for jQuery? Try `npm i --save-dev @types/jquery` and then add 'jquery' to the types field in your tsconfig."), Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha_and_then_add_jest_or_mocha_to_the_types_field_in_your_tsconfig: i2(2593, 1, "Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_type_2593", "Cannot find name '{0}'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha` and then add 'jest' or 'mocha' to the types field in your tsconfig."), This_module_is_declared_with_export_and_can_only_be_used_with_a_default_import_when_using_the_0_flag: i2(2594, 1, "This_module_is_declared_with_export_and_can_only_be_used_with_a_default_import_when_using_the_0_flag_2594", "This module is declared with 'export =', and can only be used with a default import when using the '{0}' flag."), _0_can_only_be_imported_by_using_a_default_import: i2(2595, 1, "_0_can_only_be_imported_by_using_a_default_import_2595", "'{0}' can only be imported by using a default import."), _0_can_only_be_imported_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import: i2(2596, 1, "_0_can_only_be_imported_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import_2596", "'{0}' can only be imported by turning on the 'esModuleInterop' flag and using a default import."), _0_can_only_be_imported_by_using_a_require_call_or_by_using_a_default_import: i2(2597, 1, "_0_can_only_be_imported_by_using_a_require_call_or_by_using_a_default_import_2597", "'{0}' can only be imported by using a 'require' call or by using a default import."), _0_can_only_be_imported_by_using_a_require_call_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import: i2(2598, 1, "_0_can_only_be_imported_by_using_a_require_call_or_by_turning_on_the_esModuleInterop_flag_and_using__2598", "'{0}' can only be imported by using a 'require' call or by turning on the 'esModuleInterop' flag and using a default import."), JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist: i2(2602, 1, "JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist_2602", "JSX element implicitly has type 'any' because the global type 'JSX.Element' does not exist."), Property_0_in_type_1_is_not_assignable_to_type_2: i2(2603, 1, "Property_0_in_type_1_is_not_assignable_to_type_2_2603", "Property '{0}' in type '{1}' is not assignable to type '{2}'."), JSX_element_type_0_does_not_have_any_construct_or_call_signatures: i2(2604, 1, "JSX_element_type_0_does_not_have_any_construct_or_call_signatures_2604", "JSX element type '{0}' does not have any construct or call signatures."), Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property: i2(2606, 1, "Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property_2606", "Property '{0}' of JSX spread attribute is not assignable to target property."), JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property: i2(2607, 1, "JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property_2607", "JSX element class does not support attributes because it does not have a '{0}' property."), The_global_type_JSX_0_may_not_have_more_than_one_property: i2(2608, 1, "The_global_type_JSX_0_may_not_have_more_than_one_property_2608", "The global type 'JSX.{0}' may not have more than one property."), JSX_spread_child_must_be_an_array_type: i2(2609, 1, "JSX_spread_child_must_be_an_array_type_2609", "JSX spread child must be an array type."), _0_is_defined_as_an_accessor_in_class_1_but_is_overridden_here_in_2_as_an_instance_property: i2(2610, 1, "_0_is_defined_as_an_accessor_in_class_1_but_is_overridden_here_in_2_as_an_instance_property_2610", "'{0}' is defined as an accessor in class '{1}', but is overridden here in '{2}' as an instance property."), _0_is_defined_as_a_property_in_class_1_but_is_overridden_here_in_2_as_an_accessor: i2(2611, 1, "_0_is_defined_as_a_property_in_class_1_but_is_overridden_here_in_2_as_an_accessor_2611", "'{0}' is defined as a property in class '{1}', but is overridden here in '{2}' as an accessor."), Property_0_will_overwrite_the_base_property_in_1_If_this_is_intentional_add_an_initializer_Otherwise_add_a_declare_modifier_or_remove_the_redundant_declaration: i2(2612, 1, "Property_0_will_overwrite_the_base_property_in_1_If_this_is_intentional_add_an_initializer_Otherwise_2612", "Property '{0}' will overwrite the base property in '{1}'. If this is intentional, add an initializer. Otherwise, add a 'declare' modifier or remove the redundant declaration."), Module_0_has_no_default_export_Did_you_mean_to_use_import_1_from_0_instead: i2(2613, 1, "Module_0_has_no_default_export_Did_you_mean_to_use_import_1_from_0_instead_2613", "Module '{0}' has no default export. Did you mean to use 'import { {1} } from {0}' instead?"), Module_0_has_no_exported_member_1_Did_you_mean_to_use_import_1_from_0_instead: i2(2614, 1, "Module_0_has_no_exported_member_1_Did_you_mean_to_use_import_1_from_0_instead_2614", "Module '{0}' has no exported member '{1}'. Did you mean to use 'import {1} from {0}' instead?"), Type_of_property_0_circularly_references_itself_in_mapped_type_1: i2(2615, 1, "Type_of_property_0_circularly_references_itself_in_mapped_type_1_2615", "Type of property '{0}' circularly references itself in mapped type '{1}'."), _0_can_only_be_imported_by_using_import_1_require_2_or_a_default_import: i2(2616, 1, "_0_can_only_be_imported_by_using_import_1_require_2_or_a_default_import_2616", "'{0}' can only be imported by using 'import {1} = require({2})' or a default import."), _0_can_only_be_imported_by_using_import_1_require_2_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import: i2(2617, 1, "_0_can_only_be_imported_by_using_import_1_require_2_or_by_turning_on_the_esModuleInterop_flag_and_us_2617", "'{0}' can only be imported by using 'import {1} = require({2})' or by turning on the 'esModuleInterop' flag and using a default import."), Source_has_0_element_s_but_target_requires_1: i2(2618, 1, "Source_has_0_element_s_but_target_requires_1_2618", "Source has {0} element(s) but target requires {1}."), Source_has_0_element_s_but_target_allows_only_1: i2(2619, 1, "Source_has_0_element_s_but_target_allows_only_1_2619", "Source has {0} element(s) but target allows only {1}."), Target_requires_0_element_s_but_source_may_have_fewer: i2(2620, 1, "Target_requires_0_element_s_but_source_may_have_fewer_2620", "Target requires {0} element(s) but source may have fewer."), Target_allows_only_0_element_s_but_source_may_have_more: i2(2621, 1, "Target_allows_only_0_element_s_but_source_may_have_more_2621", "Target allows only {0} element(s) but source may have more."), Source_provides_no_match_for_required_element_at_position_0_in_target: i2(2623, 1, "Source_provides_no_match_for_required_element_at_position_0_in_target_2623", "Source provides no match for required element at position {0} in target."), Source_provides_no_match_for_variadic_element_at_position_0_in_target: i2(2624, 1, "Source_provides_no_match_for_variadic_element_at_position_0_in_target_2624", "Source provides no match for variadic element at position {0} in target."), Variadic_element_at_position_0_in_source_does_not_match_element_at_position_1_in_target: i2(2625, 1, "Variadic_element_at_position_0_in_source_does_not_match_element_at_position_1_in_target_2625", "Variadic element at position {0} in source does not match element at position {1} in target."), Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target: i2(2626, 1, "Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target_2626", "Type at position {0} in source is not compatible with type at position {1} in target."), Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target: i2(2627, 1, "Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target_2627", "Type at positions {0} through {1} in source is not compatible with type at position {2} in target."), Cannot_assign_to_0_because_it_is_an_enum: i2(2628, 1, "Cannot_assign_to_0_because_it_is_an_enum_2628", "Cannot assign to '{0}' because it is an enum."), Cannot_assign_to_0_because_it_is_a_class: i2(2629, 1, "Cannot_assign_to_0_because_it_is_a_class_2629", "Cannot assign to '{0}' because it is a class."), Cannot_assign_to_0_because_it_is_a_function: i2(2630, 1, "Cannot_assign_to_0_because_it_is_a_function_2630", "Cannot assign to '{0}' because it is a function."), Cannot_assign_to_0_because_it_is_a_namespace: i2(2631, 1, "Cannot_assign_to_0_because_it_is_a_namespace_2631", "Cannot assign to '{0}' because it is a namespace."), Cannot_assign_to_0_because_it_is_an_import: i2(2632, 1, "Cannot_assign_to_0_because_it_is_an_import_2632", "Cannot assign to '{0}' because it is an import."), JSX_property_access_expressions_cannot_include_JSX_namespace_names: i2(2633, 1, "JSX_property_access_expressions_cannot_include_JSX_namespace_names_2633", "JSX property access expressions cannot include JSX namespace names"), _0_index_signatures_are_incompatible: i2(2634, 1, "_0_index_signatures_are_incompatible_2634", "'{0}' index signatures are incompatible."), Type_0_has_no_signatures_for_which_the_type_argument_list_is_applicable: i2(2635, 1, "Type_0_has_no_signatures_for_which_the_type_argument_list_is_applicable_2635", "Type '{0}' has no signatures for which the type argument list is applicable."), Type_0_is_not_assignable_to_type_1_as_implied_by_variance_annotation: i2(2636, 1, "Type_0_is_not_assignable_to_type_1_as_implied_by_variance_annotation_2636", "Type '{0}' is not assignable to type '{1}' as implied by variance annotation."), Variance_annotations_are_only_supported_in_type_aliases_for_object_function_constructor_and_mapped_types: i2(2637, 1, "Variance_annotations_are_only_supported_in_type_aliases_for_object_function_constructor_and_mapped_t_2637", "Variance annotations are only supported in type aliases for object, function, constructor, and mapped types."), Type_0_may_represent_a_primitive_value_which_is_not_permitted_as_the_right_operand_of_the_in_operator: i2(2638, 1, "Type_0_may_represent_a_primitive_value_which_is_not_permitted_as_the_right_operand_of_the_in_operato_2638", "Type '{0}' may represent a primitive value, which is not permitted as the right operand of the 'in' operator."), Cannot_augment_module_0_with_value_exports_because_it_resolves_to_a_non_module_entity: i2(2649, 1, "Cannot_augment_module_0_with_value_exports_because_it_resolves_to_a_non_module_entity_2649", "Cannot augment module '{0}' with value exports because it resolves to a non-module entity."), A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums: i2(2651, 1, "A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_memb_2651", "A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums."), Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_default_0_declaration_instead: i2(2652, 1, "Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_d_2652", "Merged declaration '{0}' cannot include a default export declaration. Consider adding a separate 'export default {0}' declaration instead."), Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1: i2(2653, 1, "Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1_2653", "Non-abstract class expression does not implement inherited abstract member '{0}' from class '{1}'."), JSX_expressions_must_have_one_parent_element: i2(2657, 1, "JSX_expressions_must_have_one_parent_element_2657", "JSX expressions must have one parent element."), Type_0_provides_no_match_for_the_signature_1: i2(2658, 1, "Type_0_provides_no_match_for_the_signature_1_2658", "Type '{0}' provides no match for the signature '{1}'."), super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_higher: i2(2659, 1, "super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_highe_2659", "'super' is only allowed in members of object literal expressions when option 'target' is 'ES2015' or higher."), super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions: i2(2660, 1, "super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions_2660", "'super' can only be referenced in members of derived classes or object literal expressions."), Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module: i2(2661, 1, "Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module_2661", "Cannot export '{0}'. Only local declarations can be exported from a module."), Cannot_find_name_0_Did_you_mean_the_static_member_1_0: i2(2662, 1, "Cannot_find_name_0_Did_you_mean_the_static_member_1_0_2662", "Cannot find name '{0}'. Did you mean the static member '{1}.{0}'?"), Cannot_find_name_0_Did_you_mean_the_instance_member_this_0: i2(2663, 1, "Cannot_find_name_0_Did_you_mean_the_instance_member_this_0_2663", "Cannot find name '{0}'. Did you mean the instance member 'this.{0}'?"), Invalid_module_name_in_augmentation_module_0_cannot_be_found: i2(2664, 1, "Invalid_module_name_in_augmentation_module_0_cannot_be_found_2664", "Invalid module name in augmentation, module '{0}' cannot be found."), Invalid_module_name_in_augmentation_Module_0_resolves_to_an_untyped_module_at_1_which_cannot_be_augmented: i2(2665, 1, "Invalid_module_name_in_augmentation_Module_0_resolves_to_an_untyped_module_at_1_which_cannot_be_augm_2665", "Invalid module name in augmentation. Module '{0}' resolves to an untyped module at '{1}', which cannot be augmented."), Exports_and_export_assignments_are_not_permitted_in_module_augmentations: i2(2666, 1, "Exports_and_export_assignments_are_not_permitted_in_module_augmentations_2666", "Exports and export assignments are not permitted in module augmentations."), Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_module: i2(2667, 1, "Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_mod_2667", "Imports are not permitted in module augmentations. Consider moving them to the enclosing external module."), export_modifier_cannot_be_applied_to_ambient_modules_and_module_augmentations_since_they_are_always_visible: i2(2668, 1, "export_modifier_cannot_be_applied_to_ambient_modules_and_module_augmentations_since_they_are_always__2668", "'export' modifier cannot be applied to ambient modules and module augmentations since they are always visible."), Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations: i2(2669, 1, "Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_2669", "Augmentations for the global scope can only be directly nested in external modules or ambient module declarations."), Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambient_context: i2(2670, 1, "Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambien_2670", "Augmentations for the global scope should have 'declare' modifier unless they appear in already ambient context."), Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity: i2(2671, 1, "Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity_2671", "Cannot augment module '{0}' because it resolves to a non-module entity."), Cannot_assign_a_0_constructor_type_to_a_1_constructor_type: i2(2672, 1, "Cannot_assign_a_0_constructor_type_to_a_1_constructor_type_2672", "Cannot assign a '{0}' constructor type to a '{1}' constructor type."), Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration: i2(2673, 1, "Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration_2673", "Constructor of class '{0}' is private and only accessible within the class declaration."), Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration: i2(2674, 1, "Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration_2674", "Constructor of class '{0}' is protected and only accessible within the class declaration."), Cannot_extend_a_class_0_Class_constructor_is_marked_as_private: i2(2675, 1, "Cannot_extend_a_class_0_Class_constructor_is_marked_as_private_2675", "Cannot extend a class '{0}'. Class constructor is marked as private."), Accessors_must_both_be_abstract_or_non_abstract: i2(2676, 1, "Accessors_must_both_be_abstract_or_non_abstract_2676", "Accessors must both be abstract or non-abstract."), A_type_predicate_s_type_must_be_assignable_to_its_parameter_s_type: i2(2677, 1, "A_type_predicate_s_type_must_be_assignable_to_its_parameter_s_type_2677", "A type predicate's type must be assignable to its parameter's type."), Type_0_is_not_comparable_to_type_1: i2(2678, 1, "Type_0_is_not_comparable_to_type_1_2678", "Type '{0}' is not comparable to type '{1}'."), A_function_that_is_called_with_the_new_keyword_cannot_have_a_this_type_that_is_void: i2(2679, 1, "A_function_that_is_called_with_the_new_keyword_cannot_have_a_this_type_that_is_void_2679", "A function that is called with the 'new' keyword cannot have a 'this' type that is 'void'."), A_0_parameter_must_be_the_first_parameter: i2(2680, 1, "A_0_parameter_must_be_the_first_parameter_2680", "A '{0}' parameter must be the first parameter."), A_constructor_cannot_have_a_this_parameter: i2(2681, 1, "A_constructor_cannot_have_a_this_parameter_2681", "A constructor cannot have a 'this' parameter."), this_implicitly_has_type_any_because_it_does_not_have_a_type_annotation: i2(2683, 1, "this_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_2683", "'this' implicitly has type 'any' because it does not have a type annotation."), The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1: i2(2684, 1, "The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1_2684", "The 'this' context of type '{0}' is not assignable to method's 'this' of type '{1}'."), The_this_types_of_each_signature_are_incompatible: i2(2685, 1, "The_this_types_of_each_signature_are_incompatible_2685", "The 'this' types of each signature are incompatible."), _0_refers_to_a_UMD_global_but_the_current_file_is_a_module_Consider_adding_an_import_instead: i2(2686, 1, "_0_refers_to_a_UMD_global_but_the_current_file_is_a_module_Consider_adding_an_import_instead_2686", "'{0}' refers to a UMD global, but the current file is a module. Consider adding an import instead."), All_declarations_of_0_must_have_identical_modifiers: i2(2687, 1, "All_declarations_of_0_must_have_identical_modifiers_2687", "All declarations of '{0}' must have identical modifiers."), Cannot_find_type_definition_file_for_0: i2(2688, 1, "Cannot_find_type_definition_file_for_0_2688", "Cannot find type definition file for '{0}'."), Cannot_extend_an_interface_0_Did_you_mean_implements: i2(2689, 1, "Cannot_extend_an_interface_0_Did_you_mean_implements_2689", "Cannot extend an interface '{0}'. Did you mean 'implements'?"), _0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Did_you_mean_to_use_1_in_0: i2(2690, 1, "_0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Did_you_mean_to_use_1_in_0_2690", "'{0}' only refers to a type, but is being used as a value here. Did you mean to use '{1} in {0}'?"), _0_is_a_primitive_but_1_is_a_wrapper_object_Prefer_using_0_when_possible: i2(2692, 1, "_0_is_a_primitive_but_1_is_a_wrapper_object_Prefer_using_0_when_possible_2692", "'{0}' is a primitive, but '{1}' is a wrapper object. Prefer using '{0}' when possible."), _0_only_refers_to_a_type_but_is_being_used_as_a_value_here: i2(2693, 1, "_0_only_refers_to_a_type_but_is_being_used_as_a_value_here_2693", "'{0}' only refers to a type, but is being used as a value here."), Namespace_0_has_no_exported_member_1: i2(2694, 1, "Namespace_0_has_no_exported_member_1_2694", "Namespace '{0}' has no exported member '{1}'."), Left_side_of_comma_operator_is_unused_and_has_no_side_effects: i2(2695, 1, "Left_side_of_comma_operator_is_unused_and_has_no_side_effects_2695", "Left side of comma operator is unused and has no side effects.", true), The_Object_type_is_assignable_to_very_few_other_types_Did_you_mean_to_use_the_any_type_instead: i2(2696, 1, "The_Object_type_is_assignable_to_very_few_other_types_Did_you_mean_to_use_the_any_type_instead_2696", "The 'Object' type is assignable to very few other types. Did you mean to use the 'any' type instead?"), An_async_function_or_method_must_return_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option: i2(2697, 1, "An_async_function_or_method_must_return_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_in_2697", "An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option."), Spread_types_may_only_be_created_from_object_types: i2(2698, 1, "Spread_types_may_only_be_created_from_object_types_2698", "Spread types may only be created from object types."), Static_property_0_conflicts_with_built_in_property_Function_0_of_constructor_function_1: i2(2699, 1, "Static_property_0_conflicts_with_built_in_property_Function_0_of_constructor_function_1_2699", "Static property '{0}' conflicts with built-in property 'Function.{0}' of constructor function '{1}'."), Rest_types_may_only_be_created_from_object_types: i2(2700, 1, "Rest_types_may_only_be_created_from_object_types_2700", "Rest types may only be created from object types."), The_target_of_an_object_rest_assignment_must_be_a_variable_or_a_property_access: i2(2701, 1, "The_target_of_an_object_rest_assignment_must_be_a_variable_or_a_property_access_2701", "The target of an object rest assignment must be a variable or a property access."), _0_only_refers_to_a_type_but_is_being_used_as_a_namespace_here: i2(2702, 1, "_0_only_refers_to_a_type_but_is_being_used_as_a_namespace_here_2702", "'{0}' only refers to a type, but is being used as a namespace here."), The_operand_of_a_delete_operator_must_be_a_property_reference: i2(2703, 1, "The_operand_of_a_delete_operator_must_be_a_property_reference_2703", "The operand of a 'delete' operator must be a property reference."), The_operand_of_a_delete_operator_cannot_be_a_read_only_property: i2(2704, 1, "The_operand_of_a_delete_operator_cannot_be_a_read_only_property_2704", "The operand of a 'delete' operator cannot be a read-only property."), An_async_function_or_method_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option: i2(2705, 1, "An_async_function_or_method_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_de_2705", "An async function or method in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option."), Required_type_parameters_may_not_follow_optional_type_parameters: i2(2706, 1, "Required_type_parameters_may_not_follow_optional_type_parameters_2706", "Required type parameters may not follow optional type parameters."), Generic_type_0_requires_between_1_and_2_type_arguments: i2(2707, 1, "Generic_type_0_requires_between_1_and_2_type_arguments_2707", "Generic type '{0}' requires between {1} and {2} type arguments."), Cannot_use_namespace_0_as_a_value: i2(2708, 1, "Cannot_use_namespace_0_as_a_value_2708", "Cannot use namespace '{0}' as a value."), Cannot_use_namespace_0_as_a_type: i2(2709, 1, "Cannot_use_namespace_0_as_a_type_2709", "Cannot use namespace '{0}' as a type."), _0_are_specified_twice_The_attribute_named_0_will_be_overwritten: i2(2710, 1, "_0_are_specified_twice_The_attribute_named_0_will_be_overwritten_2710", "'{0}' are specified twice. The attribute named '{0}' will be overwritten."), A_dynamic_import_call_returns_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option: i2(2711, 1, "A_dynamic_import_call_returns_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES20_2711", "A dynamic import call returns a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your '--lib' option."), A_dynamic_import_call_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option: i2(2712, 1, "A_dynamic_import_call_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declarat_2712", "A dynamic import call in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your '--lib' option."), Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_property_1_in_0_with_0_1: i2(2713, 1, "Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_p_2713", `Cannot access '{0}.{1}' because '{0}' is a type, but not a namespace. Did you mean to retrieve the type of the property '{1}' in '{0}' with '{0}["{1}"]'?`), The_expression_of_an_export_assignment_must_be_an_identifier_or_qualified_name_in_an_ambient_context: i2(2714, 1, "The_expression_of_an_export_assignment_must_be_an_identifier_or_qualified_name_in_an_ambient_context_2714", "The expression of an export assignment must be an identifier or qualified name in an ambient context."), Abstract_property_0_in_class_1_cannot_be_accessed_in_the_constructor: i2(2715, 1, "Abstract_property_0_in_class_1_cannot_be_accessed_in_the_constructor_2715", "Abstract property '{0}' in class '{1}' cannot be accessed in the constructor."), Type_parameter_0_has_a_circular_default: i2(2716, 1, "Type_parameter_0_has_a_circular_default_2716", "Type parameter '{0}' has a circular default."), Subsequent_property_declarations_must_have_the_same_type_Property_0_must_be_of_type_1_but_here_has_type_2: i2(2717, 1, "Subsequent_property_declarations_must_have_the_same_type_Property_0_must_be_of_type_1_but_here_has_t_2717", "Subsequent property declarations must have the same type.  Property '{0}' must be of type '{1}', but here has type '{2}'."), Duplicate_property_0: i2(2718, 1, "Duplicate_property_0_2718", "Duplicate property '{0}'."), Type_0_is_not_assignable_to_type_1_Two_different_types_with_this_name_exist_but_they_are_unrelated: i2(2719, 1, "Type_0_is_not_assignable_to_type_1_Two_different_types_with_this_name_exist_but_they_are_unrelated_2719", "Type '{0}' is not assignable to type '{1}'. Two different types with this name exist, but they are unrelated."), Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclass: i2(2720, 1, "Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclas_2720", "Class '{0}' incorrectly implements class '{1}'. Did you mean to extend '{1}' and inherit its members as a subclass?"), Cannot_invoke_an_object_which_is_possibly_null: i2(2721, 1, "Cannot_invoke_an_object_which_is_possibly_null_2721", "Cannot invoke an object which is possibly 'null'."), Cannot_invoke_an_object_which_is_possibly_undefined: i2(2722, 1, "Cannot_invoke_an_object_which_is_possibly_undefined_2722", "Cannot invoke an object which is possibly 'undefined'."), Cannot_invoke_an_object_which_is_possibly_null_or_undefined: i2(2723, 1, "Cannot_invoke_an_object_which_is_possibly_null_or_undefined_2723", "Cannot invoke an object which is possibly 'null' or 'undefined'."), _0_has_no_exported_member_named_1_Did_you_mean_2: i2(2724, 1, "_0_has_no_exported_member_named_1_Did_you_mean_2_2724", "'{0}' has no exported member named '{1}'. Did you mean '{2}'?"), Class_name_cannot_be_Object_when_targeting_ES5_with_module_0: i2(2725, 1, "Class_name_cannot_be_Object_when_targeting_ES5_with_module_0_2725", "Class name cannot be 'Object' when targeting ES5 with module {0}."), Cannot_find_lib_definition_for_0: i2(2726, 1, "Cannot_find_lib_definition_for_0_2726", "Cannot find lib definition for '{0}'."), Cannot_find_lib_definition_for_0_Did_you_mean_1: i2(2727, 1, "Cannot_find_lib_definition_for_0_Did_you_mean_1_2727", "Cannot find lib definition for '{0}'. Did you mean '{1}'?"), _0_is_declared_here: i2(2728, 3, "_0_is_declared_here_2728", "'{0}' is declared here."), Property_0_is_used_before_its_initialization: i2(2729, 1, "Property_0_is_used_before_its_initialization_2729", "Property '{0}' is used before its initialization."), An_arrow_function_cannot_have_a_this_parameter: i2(2730, 1, "An_arrow_function_cannot_have_a_this_parameter_2730", "An arrow function cannot have a 'this' parameter."), Implicit_conversion_of_a_symbol_to_a_string_will_fail_at_runtime_Consider_wrapping_this_expression_in_String: i2(2731, 1, "Implicit_conversion_of_a_symbol_to_a_string_will_fail_at_runtime_Consider_wrapping_this_expression_i_2731", "Implicit conversion of a 'symbol' to a 'string' will fail at runtime. Consider wrapping this expression in 'String(...)'."), Cannot_find_module_0_Consider_using_resolveJsonModule_to_import_module_with_json_extension: i2(2732, 1, "Cannot_find_module_0_Consider_using_resolveJsonModule_to_import_module_with_json_extension_2732", "Cannot find module '{0}'. Consider using '--resolveJsonModule' to import module with '.json' extension."), Property_0_was_also_declared_here: i2(2733, 1, "Property_0_was_also_declared_here_2733", "Property '{0}' was also declared here."), Are_you_missing_a_semicolon: i2(2734, 1, "Are_you_missing_a_semicolon_2734", "Are you missing a semicolon?"), Did_you_mean_for_0_to_be_constrained_to_type_new_args_Colon_any_1: i2(2735, 1, "Did_you_mean_for_0_to_be_constrained_to_type_new_args_Colon_any_1_2735", "Did you mean for '{0}' to be constrained to type 'new (...args: any[]) => {1}'?"), Operator_0_cannot_be_applied_to_type_1: i2(2736, 1, "Operator_0_cannot_be_applied_to_type_1_2736", "Operator '{0}' cannot be applied to type '{1}'."), BigInt_literals_are_not_available_when_targeting_lower_than_ES2020: i2(2737, 1, "BigInt_literals_are_not_available_when_targeting_lower_than_ES2020_2737", "BigInt literals are not available when targeting lower than ES2020."), An_outer_value_of_this_is_shadowed_by_this_container: i2(2738, 3, "An_outer_value_of_this_is_shadowed_by_this_container_2738", "An outer value of 'this' is shadowed by this container."), Type_0_is_missing_the_following_properties_from_type_1_Colon_2: i2(2739, 1, "Type_0_is_missing_the_following_properties_from_type_1_Colon_2_2739", "Type '{0}' is missing the following properties from type '{1}': {2}"), Type_0_is_missing_the_following_properties_from_type_1_Colon_2_and_3_more: i2(2740, 1, "Type_0_is_missing_the_following_properties_from_type_1_Colon_2_and_3_more_2740", "Type '{0}' is missing the following properties from type '{1}': {2}, and {3} more."), Property_0_is_missing_in_type_1_but_required_in_type_2: i2(2741, 1, "Property_0_is_missing_in_type_1_but_required_in_type_2_2741", "Property '{0}' is missing in type '{1}' but required in type '{2}'."), The_inferred_type_of_0_cannot_be_named_without_a_reference_to_1_This_is_likely_not_portable_A_type_annotation_is_necessary: i2(2742, 1, "The_inferred_type_of_0_cannot_be_named_without_a_reference_to_1_This_is_likely_not_portable_A_type_a_2742", "The inferred type of '{0}' cannot be named without a reference to '{1}'. This is likely not portable. A type annotation is necessary."), No_overload_expects_0_type_arguments_but_overloads_do_exist_that_expect_either_1_or_2_type_arguments: i2(2743, 1, "No_overload_expects_0_type_arguments_but_overloads_do_exist_that_expect_either_1_or_2_type_arguments_2743", "No overload expects {0} type arguments, but overloads do exist that expect either {1} or {2} type arguments."), Type_parameter_defaults_can_only_reference_previously_declared_type_parameters: i2(2744, 1, "Type_parameter_defaults_can_only_reference_previously_declared_type_parameters_2744", "Type parameter defaults can only reference previously declared type parameters."), This_JSX_tag_s_0_prop_expects_type_1_which_requires_multiple_children_but_only_a_single_child_was_provided: i2(2745, 1, "This_JSX_tag_s_0_prop_expects_type_1_which_requires_multiple_children_but_only_a_single_child_was_pr_2745", "This JSX tag's '{0}' prop expects type '{1}' which requires multiple children, but only a single child was provided."), This_JSX_tag_s_0_prop_expects_a_single_child_of_type_1_but_multiple_children_were_provided: i2(2746, 1, "This_JSX_tag_s_0_prop_expects_a_single_child_of_type_1_but_multiple_children_were_provided_2746", "This JSX tag's '{0}' prop expects a single child of type '{1}', but multiple children were provided."), _0_components_don_t_accept_text_as_child_elements_Text_in_JSX_has_the_type_string_but_the_expected_type_of_1_is_2: i2(2747, 1, "_0_components_don_t_accept_text_as_child_elements_Text_in_JSX_has_the_type_string_but_the_expected_t_2747", "'{0}' components don't accept text as child elements. Text in JSX has the type 'string', but the expected type of '{1}' is '{2}'."), Cannot_access_ambient_const_enums_when_0_is_enabled: i2(2748, 1, "Cannot_access_ambient_const_enums_when_0_is_enabled_2748", "Cannot access ambient const enums when '{0}' is enabled."), _0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0: i2(2749, 1, "_0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0_2749", "'{0}' refers to a value, but is being used as a type here. Did you mean 'typeof {0}'?"), The_implementation_signature_is_declared_here: i2(2750, 1, "The_implementation_signature_is_declared_here_2750", "The implementation signature is declared here."), Circularity_originates_in_type_at_this_location: i2(2751, 1, "Circularity_originates_in_type_at_this_location_2751", "Circularity originates in type at this location."), The_first_export_default_is_here: i2(2752, 1, "The_first_export_default_is_here_2752", "The first export default is here."), Another_export_default_is_here: i2(2753, 1, "Another_export_default_is_here_2753", "Another export default is here."), super_may_not_use_type_arguments: i2(2754, 1, "super_may_not_use_type_arguments_2754", "'super' may not use type arguments."), No_constituent_of_type_0_is_callable: i2(2755, 1, "No_constituent_of_type_0_is_callable_2755", "No constituent of type '{0}' is callable."), Not_all_constituents_of_type_0_are_callable: i2(2756, 1, "Not_all_constituents_of_type_0_are_callable_2756", "Not all constituents of type '{0}' are callable."), Type_0_has_no_call_signatures: i2(2757, 1, "Type_0_has_no_call_signatures_2757", "Type '{0}' has no call signatures."), Each_member_of_the_union_type_0_has_signatures_but_none_of_those_signatures_are_compatible_with_each_other: i2(2758, 1, "Each_member_of_the_union_type_0_has_signatures_but_none_of_those_signatures_are_compatible_with_each_2758", "Each member of the union type '{0}' has signatures, but none of those signatures are compatible with each other."), No_constituent_of_type_0_is_constructable: i2(2759, 1, "No_constituent_of_type_0_is_constructable_2759", "No constituent of type '{0}' is constructable."), Not_all_constituents_of_type_0_are_constructable: i2(2760, 1, "Not_all_constituents_of_type_0_are_constructable_2760", "Not all constituents of type '{0}' are constructable."), Type_0_has_no_construct_signatures: i2(2761, 1, "Type_0_has_no_construct_signatures_2761", "Type '{0}' has no construct signatures."), Each_member_of_the_union_type_0_has_construct_signatures_but_none_of_those_signatures_are_compatible_with_each_other: i2(2762, 1, "Each_member_of_the_union_type_0_has_construct_signatures_but_none_of_those_signatures_are_compatible_2762", "Each member of the union type '{0}' has construct signatures, but none of those signatures are compatible with each other."), Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_for_of_will_always_send_0: i2(2763, 1, "Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_for_of_will_always_s_2763", "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but for-of will always send '{0}'."), Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_spread_will_always_send_0: i2(2764, 1, "Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_spread_will_al_2764", "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but array spread will always send '{0}'."), Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_destructuring_will_always_send_0: i2(2765, 1, "Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_destructuring__2765", "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but array destructuring will always send '{0}'."), Cannot_delegate_iteration_to_value_because_the_next_method_of_its_iterator_expects_type_1_but_the_containing_generator_will_always_send_0: i2(2766, 1, "Cannot_delegate_iteration_to_value_because_the_next_method_of_its_iterator_expects_type_1_but_the_co_2766", "Cannot delegate iteration to value because the 'next' method of its iterator expects type '{1}', but the containing generator will always send '{0}'."), The_0_property_of_an_iterator_must_be_a_method: i2(2767, 1, "The_0_property_of_an_iterator_must_be_a_method_2767", "The '{0}' property of an iterator must be a method."), The_0_property_of_an_async_iterator_must_be_a_method: i2(2768, 1, "The_0_property_of_an_async_iterator_must_be_a_method_2768", "The '{0}' property of an async iterator must be a method."), No_overload_matches_this_call: i2(2769, 1, "No_overload_matches_this_call_2769", "No overload matches this call."), The_last_overload_gave_the_following_error: i2(2770, 1, "The_last_overload_gave_the_following_error_2770", "The last overload gave the following error."), The_last_overload_is_declared_here: i2(2771, 1, "The_last_overload_is_declared_here_2771", "The last overload is declared here."), Overload_0_of_1_2_gave_the_following_error: i2(2772, 1, "Overload_0_of_1_2_gave_the_following_error_2772", "Overload {0} of {1}, '{2}', gave the following error."), Did_you_forget_to_use_await: i2(2773, 1, "Did_you_forget_to_use_await_2773", "Did you forget to use 'await'?"), This_condition_will_always_return_true_since_this_function_is_always_defined_Did_you_mean_to_call_it_instead: i2(2774, 1, "This_condition_will_always_return_true_since_this_function_is_always_defined_Did_you_mean_to_call_it_2774", "This condition will always return true since this function is always defined. Did you mean to call it instead?"), Assertions_require_every_name_in_the_call_target_to_be_declared_with_an_explicit_type_annotation: i2(2775, 1, "Assertions_require_every_name_in_the_call_target_to_be_declared_with_an_explicit_type_annotation_2775", "Assertions require every name in the call target to be declared with an explicit type annotation."), Assertions_require_the_call_target_to_be_an_identifier_or_qualified_name: i2(2776, 1, "Assertions_require_the_call_target_to_be_an_identifier_or_qualified_name_2776", "Assertions require the call target to be an identifier or qualified name."), The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access: i2(2777, 1, "The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access_2777", "The operand of an increment or decrement operator may not be an optional property access."), The_target_of_an_object_rest_assignment_may_not_be_an_optional_property_access: i2(2778, 1, "The_target_of_an_object_rest_assignment_may_not_be_an_optional_property_access_2778", "The target of an object rest assignment may not be an optional property access."), The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access: i2(2779, 1, "The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access_2779", "The left-hand side of an assignment expression may not be an optional property access."), The_left_hand_side_of_a_for_in_statement_may_not_be_an_optional_property_access: i2(2780, 1, "The_left_hand_side_of_a_for_in_statement_may_not_be_an_optional_property_access_2780", "The left-hand side of a 'for...in' statement may not be an optional property access."), The_left_hand_side_of_a_for_of_statement_may_not_be_an_optional_property_access: i2(2781, 1, "The_left_hand_side_of_a_for_of_statement_may_not_be_an_optional_property_access_2781", "The left-hand side of a 'for...of' statement may not be an optional property access."), _0_needs_an_explicit_type_annotation: i2(2782, 3, "_0_needs_an_explicit_type_annotation_2782", "'{0}' needs an explicit type annotation."), _0_is_specified_more_than_once_so_this_usage_will_be_overwritten: i2(2783, 1, "_0_is_specified_more_than_once_so_this_usage_will_be_overwritten_2783", "'{0}' is specified more than once, so this usage will be overwritten."), get_and_set_accessors_cannot_declare_this_parameters: i2(2784, 1, "get_and_set_accessors_cannot_declare_this_parameters_2784", "'get' and 'set' accessors cannot declare 'this' parameters."), This_spread_always_overwrites_this_property: i2(2785, 1, "This_spread_always_overwrites_this_property_2785", "This spread always overwrites this property."), _0_cannot_be_used_as_a_JSX_component: i2(2786, 1, "_0_cannot_be_used_as_a_JSX_component_2786", "'{0}' cannot be used as a JSX component."), Its_return_type_0_is_not_a_valid_JSX_element: i2(2787, 1, "Its_return_type_0_is_not_a_valid_JSX_element_2787", "Its return type '{0}' is not a valid JSX element."), Its_instance_type_0_is_not_a_valid_JSX_element: i2(2788, 1, "Its_instance_type_0_is_not_a_valid_JSX_element_2788", "Its instance type '{0}' is not a valid JSX element."), Its_element_type_0_is_not_a_valid_JSX_element: i2(2789, 1, "Its_element_type_0_is_not_a_valid_JSX_element_2789", "Its element type '{0}' is not a valid JSX element."), The_operand_of_a_delete_operator_must_be_optional: i2(2790, 1, "The_operand_of_a_delete_operator_must_be_optional_2790", "The operand of a 'delete' operator must be optional."), Exponentiation_cannot_be_performed_on_bigint_values_unless_the_target_option_is_set_to_es2016_or_later: i2(2791, 1, "Exponentiation_cannot_be_performed_on_bigint_values_unless_the_target_option_is_set_to_es2016_or_lat_2791", "Exponentiation cannot be performed on 'bigint' values unless the 'target' option is set to 'es2016' or later."), Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_nodenext_or_to_add_aliases_to_the_paths_option: i2(2792, 1, "Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_nodenext_or_to_add_aliases_t_2792", "Cannot find module '{0}'. Did you mean to set the 'moduleResolution' option to 'nodenext', or to add aliases to the 'paths' option?"), The_call_would_have_succeeded_against_this_implementation_but_implementation_signatures_of_overloads_are_not_externally_visible: i2(2793, 1, "The_call_would_have_succeeded_against_this_implementation_but_implementation_signatures_of_overloads_2793", "The call would have succeeded against this implementation, but implementation signatures of overloads are not externally visible."), Expected_0_arguments_but_got_1_Did_you_forget_to_include_void_in_your_type_argument_to_Promise: i2(2794, 1, "Expected_0_arguments_but_got_1_Did_you_forget_to_include_void_in_your_type_argument_to_Promise_2794", "Expected {0} arguments, but got {1}. Did you forget to include 'void' in your type argument to 'Promise'?"), The_intrinsic_keyword_can_only_be_used_to_declare_compiler_provided_intrinsic_types: i2(2795, 1, "The_intrinsic_keyword_can_only_be_used_to_declare_compiler_provided_intrinsic_types_2795", "The 'intrinsic' keyword can only be used to declare compiler provided intrinsic types."), It_is_likely_that_you_are_missing_a_comma_to_separate_these_two_template_expressions_They_form_a_tagged_template_expression_which_cannot_be_invoked: i2(2796, 1, "It_is_likely_that_you_are_missing_a_comma_to_separate_these_two_template_expressions_They_form_a_tag_2796", "It is likely that you are missing a comma to separate these two template expressions. They form a tagged template expression which cannot be invoked."), A_mixin_class_that_extends_from_a_type_variable_containing_an_abstract_construct_signature_must_also_be_declared_abstract: i2(2797, 1, "A_mixin_class_that_extends_from_a_type_variable_containing_an_abstract_construct_signature_must_also_2797", "A mixin class that extends from a type variable containing an abstract construct signature must also be declared 'abstract'."), The_declaration_was_marked_as_deprecated_here: i2(2798, 1, "The_declaration_was_marked_as_deprecated_here_2798", "The declaration was marked as deprecated here."), Type_produces_a_tuple_type_that_is_too_large_to_represent: i2(2799, 1, "Type_produces_a_tuple_type_that_is_too_large_to_represent_2799", "Type produces a tuple type that is too large to represent."), Expression_produces_a_tuple_type_that_is_too_large_to_represent: i2(2800, 1, "Expression_produces_a_tuple_type_that_is_too_large_to_represent_2800", "Expression produces a tuple type that is too large to represent."), This_condition_will_always_return_true_since_this_0_is_always_defined: i2(2801, 1, "This_condition_will_always_return_true_since_this_0_is_always_defined_2801", "This condition will always return true since this '{0}' is always defined."), Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es2015_or_higher: i2(2802, 1, "Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es201_2802", "Type '{0}' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher."), Cannot_assign_to_private_method_0_Private_methods_are_not_writable: i2(2803, 1, "Cannot_assign_to_private_method_0_Private_methods_are_not_writable_2803", "Cannot assign to private method '{0}'. Private methods are not writable."), Duplicate_identifier_0_Static_and_instance_elements_cannot_share_the_same_private_name: i2(2804, 1, "Duplicate_identifier_0_Static_and_instance_elements_cannot_share_the_same_private_name_2804", "Duplicate identifier '{0}'. Static and instance elements cannot share the same private name."), Private_accessor_was_defined_without_a_getter: i2(2806, 1, "Private_accessor_was_defined_without_a_getter_2806", "Private accessor was defined without a getter."), This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0: i2(2807, 1, "This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_o_2807", "This syntax requires an imported helper named '{1}' with {2} parameters, which is not compatible with the one in '{0}'. Consider upgrading your version of '{0}'."), A_get_accessor_must_be_at_least_as_accessible_as_the_setter: i2(2808, 1, "A_get_accessor_must_be_at_least_as_accessible_as_the_setter_2808", "A get accessor must be at least as accessible as the setter"), Declaration_or_statement_expected_This_follows_a_block_of_statements_so_if_you_intended_to_write_a_destructuring_assignment_you_might_need_to_wrap_the_whole_assignment_in_parentheses: i2(2809, 1, "Declaration_or_statement_expected_This_follows_a_block_of_statements_so_if_you_intended_to_write_a_d_2809", "Declaration or statement expected. This '=' follows a block of statements, so if you intended to write a destructuring assignment, you might need to wrap the whole assignment in parentheses."), Expected_1_argument_but_got_0_new_Promise_needs_a_JSDoc_hint_to_produce_a_resolve_that_can_be_called_without_arguments: i2(2810, 1, "Expected_1_argument_but_got_0_new_Promise_needs_a_JSDoc_hint_to_produce_a_resolve_that_can_be_called_2810", "Expected 1 argument, but got 0. 'new Promise()' needs a JSDoc hint to produce a 'resolve' that can be called without arguments."), Initializer_for_property_0: i2(2811, 1, "Initializer_for_property_0_2811", "Initializer for property '{0}'"), Property_0_does_not_exist_on_type_1_Try_changing_the_lib_compiler_option_to_include_dom: i2(2812, 1, "Property_0_does_not_exist_on_type_1_Try_changing_the_lib_compiler_option_to_include_dom_2812", "Property '{0}' does not exist on type '{1}'. Try changing the 'lib' compiler option to include 'dom'."), Class_declaration_cannot_implement_overload_list_for_0: i2(2813, 1, "Class_declaration_cannot_implement_overload_list_for_0_2813", "Class declaration cannot implement overload list for '{0}'."), Function_with_bodies_can_only_merge_with_classes_that_are_ambient: i2(2814, 1, "Function_with_bodies_can_only_merge_with_classes_that_are_ambient_2814", "Function with bodies can only merge with classes that are ambient."), arguments_cannot_be_referenced_in_property_initializers: i2(2815, 1, "arguments_cannot_be_referenced_in_property_initializers_2815", "'arguments' cannot be referenced in property initializers."), Cannot_use_this_in_a_static_property_initializer_of_a_decorated_class: i2(2816, 1, "Cannot_use_this_in_a_static_property_initializer_of_a_decorated_class_2816", "Cannot use 'this' in a static property initializer of a decorated class."), Property_0_has_no_initializer_and_is_not_definitely_assigned_in_a_class_static_block: i2(2817, 1, "Property_0_has_no_initializer_and_is_not_definitely_assigned_in_a_class_static_block_2817", "Property '{0}' has no initializer and is not definitely assigned in a class static block."), Duplicate_identifier_0_Compiler_reserves_name_1_when_emitting_super_references_in_static_initializers: i2(2818, 1, "Duplicate_identifier_0_Compiler_reserves_name_1_when_emitting_super_references_in_static_initializer_2818", "Duplicate identifier '{0}'. Compiler reserves name '{1}' when emitting 'super' references in static initializers."), Namespace_name_cannot_be_0: i2(2819, 1, "Namespace_name_cannot_be_0_2819", "Namespace name cannot be '{0}'."), Type_0_is_not_assignable_to_type_1_Did_you_mean_2: i2(2820, 1, "Type_0_is_not_assignable_to_type_1_Did_you_mean_2_2820", "Type '{0}' is not assignable to type '{1}'. Did you mean '{2}'?"), Import_assertions_are_only_supported_when_the_module_option_is_set_to_esnext_or_nodenext: i2(2821, 1, "Import_assertions_are_only_supported_when_the_module_option_is_set_to_esnext_or_nodenext_2821", "Import assertions are only supported when the '--module' option is set to 'esnext' or 'nodenext'."), Import_assertions_cannot_be_used_with_type_only_imports_or_exports: i2(2822, 1, "Import_assertions_cannot_be_used_with_type_only_imports_or_exports_2822", "Import assertions cannot be used with type-only imports or exports."), Cannot_find_namespace_0_Did_you_mean_1: i2(2833, 1, "Cannot_find_namespace_0_Did_you_mean_1_2833", "Cannot find namespace '{0}'. Did you mean '{1}'?"), Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_node16_or_nodenext_Consider_adding_an_extension_to_the_import_path: i2(2834, 1, "Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_n_2834", "Relative import paths need explicit file extensions in EcmaScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Consider adding an extension to the import path."), Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_node16_or_nodenext_Did_you_mean_0: i2(2835, 1, "Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_n_2835", "Relative import paths need explicit file extensions in EcmaScript imports when '--moduleResolution' is 'node16' or 'nodenext'. Did you mean '{0}'?"), Import_assertions_are_not_allowed_on_statements_that_transpile_to_commonjs_require_calls: i2(2836, 1, "Import_assertions_are_not_allowed_on_statements_that_transpile_to_commonjs_require_calls_2836", "Import assertions are not allowed on statements that transpile to commonjs 'require' calls."), Import_assertion_values_must_be_string_literal_expressions: i2(2837, 1, "Import_assertion_values_must_be_string_literal_expressions_2837", "Import assertion values must be string literal expressions."), All_declarations_of_0_must_have_identical_constraints: i2(2838, 1, "All_declarations_of_0_must_have_identical_constraints_2838", "All declarations of '{0}' must have identical constraints."), This_condition_will_always_return_0_since_JavaScript_compares_objects_by_reference_not_value: i2(2839, 1, "This_condition_will_always_return_0_since_JavaScript_compares_objects_by_reference_not_value_2839", "This condition will always return '{0}' since JavaScript compares objects by reference, not value."), An_interface_cannot_extend_a_primitive_type_like_0_an_interface_can_only_extend_named_types_and_classes: i2(2840, 1, "An_interface_cannot_extend_a_primitive_type_like_0_an_interface_can_only_extend_named_types_and_clas_2840", "An interface cannot extend a primitive type like '{0}'; an interface can only extend named types and classes"), The_type_of_this_expression_cannot_be_named_without_a_resolution_mode_assertion_which_is_an_unstable_feature_Use_nightly_TypeScript_to_silence_this_error_Try_updating_with_npm_install_D_typescript_next: i2(2841, 1, "The_type_of_this_expression_cannot_be_named_without_a_resolution_mode_assertion_which_is_an_unstable_2841", "The type of this expression cannot be named without a 'resolution-mode' assertion, which is an unstable feature. Use nightly TypeScript to silence this error. Try updating with 'npm install -D typescript@next'."), _0_is_an_unused_renaming_of_1_Did_you_intend_to_use_it_as_a_type_annotation: i2(2842, 1, "_0_is_an_unused_renaming_of_1_Did_you_intend_to_use_it_as_a_type_annotation_2842", "'{0}' is an unused renaming of '{1}'. Did you intend to use it as a type annotation?"), We_can_only_write_a_type_for_0_by_adding_a_type_for_the_entire_parameter_here: i2(2843, 1, "We_can_only_write_a_type_for_0_by_adding_a_type_for_the_entire_parameter_here_2843", "We can only write a type for '{0}' by adding a type for the entire parameter here."), Type_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor: i2(2844, 1, "Type_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor_2844", "Type of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor."), This_condition_will_always_return_0: i2(2845, 1, "This_condition_will_always_return_0_2845", "This condition will always return '{0}'."), A_declaration_file_cannot_be_imported_without_import_type_Did_you_mean_to_import_an_implementation_file_0_instead: i2(2846, 1, "A_declaration_file_cannot_be_imported_without_import_type_Did_you_mean_to_import_an_implementation_f_2846", "A declaration file cannot be imported without 'import type'. Did you mean to import an implementation file '{0}' instead?"), Import_declaration_0_is_using_private_name_1: i2(4e3, 1, "Import_declaration_0_is_using_private_name_1_4000", "Import declaration '{0}' is using private name '{1}'."), Type_parameter_0_of_exported_class_has_or_is_using_private_name_1: i2(4002, 1, "Type_parameter_0_of_exported_class_has_or_is_using_private_name_1_4002", "Type parameter '{0}' of exported class has or is using private name '{1}'."), Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1: i2(4004, 1, "Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1_4004", "Type parameter '{0}' of exported interface has or is using private name '{1}'."), Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: i2(4006, 1, "Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1_4006", "Type parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'."), Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: i2(4008, 1, "Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1_4008", "Type parameter '{0}' of call signature from exported interface has or is using private name '{1}'."), Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: i2(4010, 1, "Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1_4010", "Type parameter '{0}' of public static method from exported class has or is using private name '{1}'."), Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: i2(4012, 1, "Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1_4012", "Type parameter '{0}' of public method from exported class has or is using private name '{1}'."), Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: i2(4014, 1, "Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1_4014", "Type parameter '{0}' of method from exported interface has or is using private name '{1}'."), Type_parameter_0_of_exported_function_has_or_is_using_private_name_1: i2(4016, 1, "Type_parameter_0_of_exported_function_has_or_is_using_private_name_1_4016", "Type parameter '{0}' of exported function has or is using private name '{1}'."), Implements_clause_of_exported_class_0_has_or_is_using_private_name_1: i2(4019, 1, "Implements_clause_of_exported_class_0_has_or_is_using_private_name_1_4019", "Implements clause of exported class '{0}' has or is using private name '{1}'."), extends_clause_of_exported_class_0_has_or_is_using_private_name_1: i2(4020, 1, "extends_clause_of_exported_class_0_has_or_is_using_private_name_1_4020", "'extends' clause of exported class '{0}' has or is using private name '{1}'."), extends_clause_of_exported_class_has_or_is_using_private_name_0: i2(4021, 1, "extends_clause_of_exported_class_has_or_is_using_private_name_0_4021", "'extends' clause of exported class has or is using private name '{0}'."), extends_clause_of_exported_interface_0_has_or_is_using_private_name_1: i2(4022, 1, "extends_clause_of_exported_interface_0_has_or_is_using_private_name_1_4022", "'extends' clause of exported interface '{0}' has or is using private name '{1}'."), Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4023, 1, "Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4023", "Exported variable '{0}' has or is using name '{1}' from external module {2} but cannot be named."), Exported_variable_0_has_or_is_using_name_1_from_private_module_2: i2(4024, 1, "Exported_variable_0_has_or_is_using_name_1_from_private_module_2_4024", "Exported variable '{0}' has or is using name '{1}' from private module '{2}'."), Exported_variable_0_has_or_is_using_private_name_1: i2(4025, 1, "Exported_variable_0_has_or_is_using_private_name_1_4025", "Exported variable '{0}' has or is using private name '{1}'."), Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4026, 1, "Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot__4026", "Public static property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."), Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: i2(4027, 1, "Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4027", "Public static property '{0}' of exported class has or is using name '{1}' from private module '{2}'."), Public_static_property_0_of_exported_class_has_or_is_using_private_name_1: i2(4028, 1, "Public_static_property_0_of_exported_class_has_or_is_using_private_name_1_4028", "Public static property '{0}' of exported class has or is using private name '{1}'."), Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4029, 1, "Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_name_4029", "Public property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."), Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: i2(4030, 1, "Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4030", "Public property '{0}' of exported class has or is using name '{1}' from private module '{2}'."), Public_property_0_of_exported_class_has_or_is_using_private_name_1: i2(4031, 1, "Public_property_0_of_exported_class_has_or_is_using_private_name_1_4031", "Public property '{0}' of exported class has or is using private name '{1}'."), Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2: i2(4032, 1, "Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2_4032", "Property '{0}' of exported interface has or is using name '{1}' from private module '{2}'."), Property_0_of_exported_interface_has_or_is_using_private_name_1: i2(4033, 1, "Property_0_of_exported_interface_has_or_is_using_private_name_1_4033", "Property '{0}' of exported interface has or is using private name '{1}'."), Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: i2(4034, 1, "Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_name_1_from_private_mod_4034", "Parameter type of public static setter '{0}' from exported class has or is using name '{1}' from private module '{2}'."), Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_private_name_1: i2(4035, 1, "Parameter_type_of_public_static_setter_0_from_exported_class_has_or_is_using_private_name_1_4035", "Parameter type of public static setter '{0}' from exported class has or is using private name '{1}'."), Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: i2(4036, 1, "Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2_4036", "Parameter type of public setter '{0}' from exported class has or is using name '{1}' from private module '{2}'."), Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_private_name_1: i2(4037, 1, "Parameter_type_of_public_setter_0_from_exported_class_has_or_is_using_private_name_1_4037", "Parameter type of public setter '{0}' from exported class has or is using private name '{1}'."), Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4038, 1, "Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_external_modul_4038", "Return type of public static getter '{0}' from exported class has or is using name '{1}' from external module {2} but cannot be named."), Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: i2(4039, 1, "Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_4039", "Return type of public static getter '{0}' from exported class has or is using name '{1}' from private module '{2}'."), Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_private_name_1: i2(4040, 1, "Return_type_of_public_static_getter_0_from_exported_class_has_or_is_using_private_name_1_4040", "Return type of public static getter '{0}' from exported class has or is using private name '{1}'."), Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4041, 1, "Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_4041", "Return type of public getter '{0}' from exported class has or is using name '{1}' from external module {2} but cannot be named."), Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2: i2(4042, 1, "Return_type_of_public_getter_0_from_exported_class_has_or_is_using_name_1_from_private_module_2_4042", "Return type of public getter '{0}' from exported class has or is using name '{1}' from private module '{2}'."), Return_type_of_public_getter_0_from_exported_class_has_or_is_using_private_name_1: i2(4043, 1, "Return_type_of_public_getter_0_from_exported_class_has_or_is_using_private_name_1_4043", "Return type of public getter '{0}' from exported class has or is using private name '{1}'."), Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: i2(4044, 1, "Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_mod_4044", "Return type of constructor signature from exported interface has or is using name '{0}' from private module '{1}'."), Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0: i2(4045, 1, "Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0_4045", "Return type of constructor signature from exported interface has or is using private name '{0}'."), Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: i2(4046, 1, "Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4046", "Return type of call signature from exported interface has or is using name '{0}' from private module '{1}'."), Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0: i2(4047, 1, "Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0_4047", "Return type of call signature from exported interface has or is using private name '{0}'."), Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: i2(4048, 1, "Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4048", "Return type of index signature from exported interface has or is using name '{0}' from private module '{1}'."), Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0: i2(4049, 1, "Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0_4049", "Return type of index signature from exported interface has or is using private name '{0}'."), Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: i2(4050, 1, "Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module__4050", "Return type of public static method from exported class has or is using name '{0}' from external module {1} but cannot be named."), Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: i2(4051, 1, "Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1_4051", "Return type of public static method from exported class has or is using name '{0}' from private module '{1}'."), Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0: i2(4052, 1, "Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0_4052", "Return type of public static method from exported class has or is using private name '{0}'."), Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: i2(4053, 1, "Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_c_4053", "Return type of public method from exported class has or is using name '{0}' from external module {1} but cannot be named."), Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: i2(4054, 1, "Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1_4054", "Return type of public method from exported class has or is using name '{0}' from private module '{1}'."), Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0: i2(4055, 1, "Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0_4055", "Return type of public method from exported class has or is using private name '{0}'."), Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1: i2(4056, 1, "Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4056", "Return type of method from exported interface has or is using name '{0}' from private module '{1}'."), Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0: i2(4057, 1, "Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0_4057", "Return type of method from exported interface has or is using private name '{0}'."), Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: i2(4058, 1, "Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named_4058", "Return type of exported function has or is using name '{0}' from external module {1} but cannot be named."), Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1: i2(4059, 1, "Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1_4059", "Return type of exported function has or is using name '{0}' from private module '{1}'."), Return_type_of_exported_function_has_or_is_using_private_name_0: i2(4060, 1, "Return_type_of_exported_function_has_or_is_using_private_name_0_4060", "Return type of exported function has or is using private name '{0}'."), Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4061, 1, "Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_can_4061", "Parameter '{0}' of constructor from exported class has or is using name '{1}' from external module {2} but cannot be named."), Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2: i2(4062, 1, "Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2_4062", "Parameter '{0}' of constructor from exported class has or is using name '{1}' from private module '{2}'."), Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1: i2(4063, 1, "Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1_4063", "Parameter '{0}' of constructor from exported class has or is using private name '{1}'."), Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: i2(4064, 1, "Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_mod_4064", "Parameter '{0}' of constructor signature from exported interface has or is using name '{1}' from private module '{2}'."), Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: i2(4065, 1, "Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1_4065", "Parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'."), Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: i2(4066, 1, "Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4066", "Parameter '{0}' of call signature from exported interface has or is using name '{1}' from private module '{2}'."), Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: i2(4067, 1, "Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1_4067", "Parameter '{0}' of call signature from exported interface has or is using private name '{1}'."), Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4068, 1, "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module__4068", "Parameter '{0}' of public static method from exported class has or is using name '{1}' from external module {2} but cannot be named."), Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: i2(4069, 1, "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2_4069", "Parameter '{0}' of public static method from exported class has or is using name '{1}' from private module '{2}'."), Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: i2(4070, 1, "Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1_4070", "Parameter '{0}' of public static method from exported class has or is using private name '{1}'."), Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4071, 1, "Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_c_4071", "Parameter '{0}' of public method from exported class has or is using name '{1}' from external module {2} but cannot be named."), Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: i2(4072, 1, "Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2_4072", "Parameter '{0}' of public method from exported class has or is using name '{1}' from private module '{2}'."), Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: i2(4073, 1, "Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1_4073", "Parameter '{0}' of public method from exported class has or is using private name '{1}'."), Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2: i2(4074, 1, "Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4074", "Parameter '{0}' of method from exported interface has or is using name '{1}' from private module '{2}'."), Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: i2(4075, 1, "Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1_4075", "Parameter '{0}' of method from exported interface has or is using private name '{1}'."), Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4076, 1, "Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4076", "Parameter '{0}' of exported function has or is using name '{1}' from external module {2} but cannot be named."), Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2: i2(4077, 1, "Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2_4077", "Parameter '{0}' of exported function has or is using name '{1}' from private module '{2}'."), Parameter_0_of_exported_function_has_or_is_using_private_name_1: i2(4078, 1, "Parameter_0_of_exported_function_has_or_is_using_private_name_1_4078", "Parameter '{0}' of exported function has or is using private name '{1}'."), Exported_type_alias_0_has_or_is_using_private_name_1: i2(4081, 1, "Exported_type_alias_0_has_or_is_using_private_name_1_4081", "Exported type alias '{0}' has or is using private name '{1}'."), Default_export_of_the_module_has_or_is_using_private_name_0: i2(4082, 1, "Default_export_of_the_module_has_or_is_using_private_name_0_4082", "Default export of the module has or is using private name '{0}'."), Type_parameter_0_of_exported_type_alias_has_or_is_using_private_name_1: i2(4083, 1, "Type_parameter_0_of_exported_type_alias_has_or_is_using_private_name_1_4083", "Type parameter '{0}' of exported type alias has or is using private name '{1}'."), Exported_type_alias_0_has_or_is_using_private_name_1_from_module_2: i2(4084, 1, "Exported_type_alias_0_has_or_is_using_private_name_1_from_module_2_4084", "Exported type alias '{0}' has or is using private name '{1}' from module {2}."), Extends_clause_for_inferred_type_0_has_or_is_using_private_name_1: i2(4085, 1, "Extends_clause_for_inferred_type_0_has_or_is_using_private_name_1_4085", "Extends clause for inferred type '{0}' has or is using private name '{1}'."), Conflicting_definitions_for_0_found_at_1_and_2_Consider_installing_a_specific_version_of_this_library_to_resolve_the_conflict: i2(4090, 1, "Conflicting_definitions_for_0_found_at_1_and_2_Consider_installing_a_specific_version_of_this_librar_4090", "Conflicting definitions for '{0}' found at '{1}' and '{2}'. Consider installing a specific version of this library to resolve the conflict."), Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: i2(4091, 1, "Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4091", "Parameter '{0}' of index signature from exported interface has or is using name '{1}' from private module '{2}'."), Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_private_name_1: i2(4092, 1, "Parameter_0_of_index_signature_from_exported_interface_has_or_is_using_private_name_1_4092", "Parameter '{0}' of index signature from exported interface has or is using private name '{1}'."), Property_0_of_exported_class_expression_may_not_be_private_or_protected: i2(4094, 1, "Property_0_of_exported_class_expression_may_not_be_private_or_protected_4094", "Property '{0}' of exported class expression may not be private or protected."), Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4095, 1, "Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_4095", "Public static method '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."), Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: i2(4096, 1, "Public_static_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4096", "Public static method '{0}' of exported class has or is using name '{1}' from private module '{2}'."), Public_static_method_0_of_exported_class_has_or_is_using_private_name_1: i2(4097, 1, "Public_static_method_0_of_exported_class_has_or_is_using_private_name_1_4097", "Public static method '{0}' of exported class has or is using private name '{1}'."), Public_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4098, 1, "Public_method_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4098", "Public method '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."), Public_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: i2(4099, 1, "Public_method_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4099", "Public method '{0}' of exported class has or is using name '{1}' from private module '{2}'."), Public_method_0_of_exported_class_has_or_is_using_private_name_1: i2(4100, 1, "Public_method_0_of_exported_class_has_or_is_using_private_name_1_4100", "Public method '{0}' of exported class has or is using private name '{1}'."), Method_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2: i2(4101, 1, "Method_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2_4101", "Method '{0}' of exported interface has or is using name '{1}' from private module '{2}'."), Method_0_of_exported_interface_has_or_is_using_private_name_1: i2(4102, 1, "Method_0_of_exported_interface_has_or_is_using_private_name_1_4102", "Method '{0}' of exported interface has or is using private name '{1}'."), Type_parameter_0_of_exported_mapped_object_type_is_using_private_name_1: i2(4103, 1, "Type_parameter_0_of_exported_mapped_object_type_is_using_private_name_1_4103", "Type parameter '{0}' of exported mapped object type is using private name '{1}'."), The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1: i2(4104, 1, "The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1_4104", "The type '{0}' is 'readonly' and cannot be assigned to the mutable type '{1}'."), Private_or_protected_member_0_cannot_be_accessed_on_a_type_parameter: i2(4105, 1, "Private_or_protected_member_0_cannot_be_accessed_on_a_type_parameter_4105", "Private or protected member '{0}' cannot be accessed on a type parameter."), Parameter_0_of_accessor_has_or_is_using_private_name_1: i2(4106, 1, "Parameter_0_of_accessor_has_or_is_using_private_name_1_4106", "Parameter '{0}' of accessor has or is using private name '{1}'."), Parameter_0_of_accessor_has_or_is_using_name_1_from_private_module_2: i2(4107, 1, "Parameter_0_of_accessor_has_or_is_using_name_1_from_private_module_2_4107", "Parameter '{0}' of accessor has or is using name '{1}' from private module '{2}'."), Parameter_0_of_accessor_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: i2(4108, 1, "Parameter_0_of_accessor_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4108", "Parameter '{0}' of accessor has or is using name '{1}' from external module '{2}' but cannot be named."), Type_arguments_for_0_circularly_reference_themselves: i2(4109, 1, "Type_arguments_for_0_circularly_reference_themselves_4109", "Type arguments for '{0}' circularly reference themselves."), Tuple_type_arguments_circularly_reference_themselves: i2(4110, 1, "Tuple_type_arguments_circularly_reference_themselves_4110", "Tuple type arguments circularly reference themselves."), Property_0_comes_from_an_index_signature_so_it_must_be_accessed_with_0: i2(4111, 1, "Property_0_comes_from_an_index_signature_so_it_must_be_accessed_with_0_4111", "Property '{0}' comes from an index signature, so it must be accessed with ['{0}']."), This_member_cannot_have_an_override_modifier_because_its_containing_class_0_does_not_extend_another_class: i2(4112, 1, "This_member_cannot_have_an_override_modifier_because_its_containing_class_0_does_not_extend_another__4112", "This member cannot have an 'override' modifier because its containing class '{0}' does not extend another class."), This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0: i2(4113, 1, "This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_4113", "This member cannot have an 'override' modifier because it is not declared in the base class '{0}'."), This_member_must_have_an_override_modifier_because_it_overrides_a_member_in_the_base_class_0: i2(4114, 1, "This_member_must_have_an_override_modifier_because_it_overrides_a_member_in_the_base_class_0_4114", "This member must have an 'override' modifier because it overrides a member in the base class '{0}'."), This_parameter_property_must_have_an_override_modifier_because_it_overrides_a_member_in_base_class_0: i2(4115, 1, "This_parameter_property_must_have_an_override_modifier_because_it_overrides_a_member_in_base_class_0_4115", "This parameter property must have an 'override' modifier because it overrides a member in base class '{0}'."), This_member_must_have_an_override_modifier_because_it_overrides_an_abstract_method_that_is_declared_in_the_base_class_0: i2(4116, 1, "This_member_must_have_an_override_modifier_because_it_overrides_an_abstract_method_that_is_declared__4116", "This member must have an 'override' modifier because it overrides an abstract method that is declared in the base class '{0}'."), This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1: i2(4117, 1, "This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_Did_you__4117", "This member cannot have an 'override' modifier because it is not declared in the base class '{0}'. Did you mean '{1}'?"), The_type_of_this_node_cannot_be_serialized_because_its_property_0_cannot_be_serialized: i2(4118, 1, "The_type_of_this_node_cannot_be_serialized_because_its_property_0_cannot_be_serialized_4118", "The type of this node cannot be serialized because its property '{0}' cannot be serialized."), This_member_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0: i2(4119, 1, "This_member_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_4119", "This member must have a JSDoc comment with an '@override' tag because it overrides a member in the base class '{0}'."), This_parameter_property_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0: i2(4120, 1, "This_parameter_property_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_4120", "This parameter property must have a JSDoc comment with an '@override' tag because it overrides a member in the base class '{0}'."), This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_its_containing_class_0_does_not_extend_another_class: i2(4121, 1, "This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_its_containing_class_0_does_not_4121", "This member cannot have a JSDoc comment with an '@override' tag because its containing class '{0}' does not extend another class."), This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0: i2(4122, 1, "This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base__4122", "This member cannot have a JSDoc comment with an '@override' tag because it is not declared in the base class '{0}'."), This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1: i2(4123, 1, "This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base__4123", "This member cannot have a JSDoc comment with an 'override' tag because it is not declared in the base class '{0}'. Did you mean '{1}'?"), Compiler_option_0_of_value_1_is_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_with_npm_install_D_typescript_next: i2(4124, 1, "Compiler_option_0_of_value_1_is_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_w_4124", "Compiler option '{0}' of value '{1}' is unstable. Use nightly TypeScript to silence this error. Try updating with 'npm install -D typescript@next'."), resolution_mode_assertions_are_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_with_npm_install_D_typescript_next: i2(4125, 1, "resolution_mode_assertions_are_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_wi_4125", "'resolution-mode' assertions are unstable. Use nightly TypeScript to silence this error. Try updating with 'npm install -D typescript@next'."), The_current_host_does_not_support_the_0_option: i2(5001, 1, "The_current_host_does_not_support_the_0_option_5001", "The current host does not support the '{0}' option."), Cannot_find_the_common_subdirectory_path_for_the_input_files: i2(5009, 1, "Cannot_find_the_common_subdirectory_path_for_the_input_files_5009", "Cannot find the common subdirectory path for the input files."), File_specification_cannot_end_in_a_recursive_directory_wildcard_Asterisk_Asterisk_Colon_0: i2(5010, 1, "File_specification_cannot_end_in_a_recursive_directory_wildcard_Asterisk_Asterisk_Colon_0_5010", "File specification cannot end in a recursive directory wildcard ('**'): '{0}'."), Cannot_read_file_0_Colon_1: i2(5012, 1, "Cannot_read_file_0_Colon_1_5012", "Cannot read file '{0}': {1}."), Failed_to_parse_file_0_Colon_1: i2(5014, 1, "Failed_to_parse_file_0_Colon_1_5014", "Failed to parse file '{0}': {1}."), Unknown_compiler_option_0: i2(5023, 1, "Unknown_compiler_option_0_5023", "Unknown compiler option '{0}'."), Compiler_option_0_requires_a_value_of_type_1: i2(5024, 1, "Compiler_option_0_requires_a_value_of_type_1_5024", "Compiler option '{0}' requires a value of type {1}."), Unknown_compiler_option_0_Did_you_mean_1: i2(5025, 1, "Unknown_compiler_option_0_Did_you_mean_1_5025", "Unknown compiler option '{0}'. Did you mean '{1}'?"), Could_not_write_file_0_Colon_1: i2(5033, 1, "Could_not_write_file_0_Colon_1_5033", "Could not write file '{0}': {1}."), Option_project_cannot_be_mixed_with_source_files_on_a_command_line: i2(5042, 1, "Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042", "Option 'project' cannot be mixed with source files on a command line."), Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES2015_or_higher: i2(5047, 1, "Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES_5047", "Option 'isolatedModules' can only be used when either option '--module' is provided or option 'target' is 'ES2015' or higher."), Option_0_cannot_be_specified_when_option_target_is_ES3: i2(5048, 1, "Option_0_cannot_be_specified_when_option_target_is_ES3_5048", "Option '{0}' cannot be specified when option 'target' is 'ES3'."), Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: i2(5051, 1, "Option_0_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided_5051", "Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided."), Option_0_cannot_be_specified_without_specifying_option_1: i2(5052, 1, "Option_0_cannot_be_specified_without_specifying_option_1_5052", "Option '{0}' cannot be specified without specifying option '{1}'."), Option_0_cannot_be_specified_with_option_1: i2(5053, 1, "Option_0_cannot_be_specified_with_option_1_5053", "Option '{0}' cannot be specified with option '{1}'."), A_tsconfig_json_file_is_already_defined_at_Colon_0: i2(5054, 1, "A_tsconfig_json_file_is_already_defined_at_Colon_0_5054", "A 'tsconfig.json' file is already defined at: '{0}'."), Cannot_write_file_0_because_it_would_overwrite_input_file: i2(5055, 1, "Cannot_write_file_0_because_it_would_overwrite_input_file_5055", "Cannot write file '{0}' because it would overwrite input file."), Cannot_write_file_0_because_it_would_be_overwritten_by_multiple_input_files: i2(5056, 1, "Cannot_write_file_0_because_it_would_be_overwritten_by_multiple_input_files_5056", "Cannot write file '{0}' because it would be overwritten by multiple input files."), Cannot_find_a_tsconfig_json_file_at_the_specified_directory_Colon_0: i2(5057, 1, "Cannot_find_a_tsconfig_json_file_at_the_specified_directory_Colon_0_5057", "Cannot find a tsconfig.json file at the specified directory: '{0}'."), The_specified_path_does_not_exist_Colon_0: i2(5058, 1, "The_specified_path_does_not_exist_Colon_0_5058", "The specified path does not exist: '{0}'."), Invalid_value_for_reactNamespace_0_is_not_a_valid_identifier: i2(5059, 1, "Invalid_value_for_reactNamespace_0_is_not_a_valid_identifier_5059", "Invalid value for '--reactNamespace'. '{0}' is not a valid identifier."), Pattern_0_can_have_at_most_one_Asterisk_character: i2(5061, 1, "Pattern_0_can_have_at_most_one_Asterisk_character_5061", "Pattern '{0}' can have at most one '*' character."), Substitution_0_in_pattern_1_can_have_at_most_one_Asterisk_character: i2(5062, 1, "Substitution_0_in_pattern_1_can_have_at_most_one_Asterisk_character_5062", "Substitution '{0}' in pattern '{1}' can have at most one '*' character."), Substitutions_for_pattern_0_should_be_an_array: i2(5063, 1, "Substitutions_for_pattern_0_should_be_an_array_5063", "Substitutions for pattern '{0}' should be an array."), Substitution_0_for_pattern_1_has_incorrect_type_expected_string_got_2: i2(5064, 1, "Substitution_0_for_pattern_1_has_incorrect_type_expected_string_got_2_5064", "Substitution '{0}' for pattern '{1}' has incorrect type, expected 'string', got '{2}'."), File_specification_cannot_contain_a_parent_directory_that_appears_after_a_recursive_directory_wildcard_Asterisk_Asterisk_Colon_0: i2(5065, 1, "File_specification_cannot_contain_a_parent_directory_that_appears_after_a_recursive_directory_wildca_5065", "File specification cannot contain a parent directory ('..') that appears after a recursive directory wildcard ('**'): '{0}'."), Substitutions_for_pattern_0_shouldn_t_be_an_empty_array: i2(5066, 1, "Substitutions_for_pattern_0_shouldn_t_be_an_empty_array_5066", "Substitutions for pattern '{0}' shouldn't be an empty array."), Invalid_value_for_jsxFactory_0_is_not_a_valid_identifier_or_qualified_name: i2(5067, 1, "Invalid_value_for_jsxFactory_0_is_not_a_valid_identifier_or_qualified_name_5067", "Invalid value for 'jsxFactory'. '{0}' is not a valid identifier or qualified-name."), Adding_a_tsconfig_json_file_will_help_organize_projects_that_contain_both_TypeScript_and_JavaScript_files_Learn_more_at_https_Colon_Slash_Slashaka_ms_Slashtsconfig: i2(5068, 1, "Adding_a_tsconfig_json_file_will_help_organize_projects_that_contain_both_TypeScript_and_JavaScript__5068", "Adding a tsconfig.json file will help organize projects that contain both TypeScript and JavaScript files. Learn more at https://aka.ms/tsconfig."), Option_0_cannot_be_specified_without_specifying_option_1_or_option_2: i2(5069, 1, "Option_0_cannot_be_specified_without_specifying_option_1_or_option_2_5069", "Option '{0}' cannot be specified without specifying option '{1}' or option '{2}'."), Option_resolveJsonModule_cannot_be_specified_when_moduleResolution_is_set_to_classic: i2(5070, 1, "Option_resolveJsonModule_cannot_be_specified_when_moduleResolution_is_set_to_classic_5070", "Option '--resolveJsonModule' cannot be specified when 'moduleResolution' is set to 'classic'."), Option_resolveJsonModule_can_only_be_specified_when_module_code_generation_is_commonjs_amd_es2015_or_esNext: i2(5071, 1, "Option_resolveJsonModule_can_only_be_specified_when_module_code_generation_is_commonjs_amd_es2015_or_5071", "Option '--resolveJsonModule' can only be specified when module code generation is 'commonjs', 'amd', 'es2015' or 'esNext'."), Unknown_build_option_0: i2(5072, 1, "Unknown_build_option_0_5072", "Unknown build option '{0}'."), Build_option_0_requires_a_value_of_type_1: i2(5073, 1, "Build_option_0_requires_a_value_of_type_1_5073", "Build option '{0}' requires a value of type {1}."), Option_incremental_can_only_be_specified_using_tsconfig_emitting_to_single_file_or_when_option_tsBuildInfoFile_is_specified: i2(5074, 1, "Option_incremental_can_only_be_specified_using_tsconfig_emitting_to_single_file_or_when_option_tsBui_5074", "Option '--incremental' can only be specified using tsconfig, emitting to single file or when option '--tsBuildInfoFile' is specified."), _0_is_assignable_to_the_constraint_of_type_1_but_1_could_be_instantiated_with_a_different_subtype_of_constraint_2: i2(5075, 1, "_0_is_assignable_to_the_constraint_of_type_1_but_1_could_be_instantiated_with_a_different_subtype_of_5075", "'{0}' is assignable to the constraint of type '{1}', but '{1}' could be instantiated with a different subtype of constraint '{2}'."), _0_and_1_operations_cannot_be_mixed_without_parentheses: i2(5076, 1, "_0_and_1_operations_cannot_be_mixed_without_parentheses_5076", "'{0}' and '{1}' operations cannot be mixed without parentheses."), Unknown_build_option_0_Did_you_mean_1: i2(5077, 1, "Unknown_build_option_0_Did_you_mean_1_5077", "Unknown build option '{0}'. Did you mean '{1}'?"), Unknown_watch_option_0: i2(5078, 1, "Unknown_watch_option_0_5078", "Unknown watch option '{0}'."), Unknown_watch_option_0_Did_you_mean_1: i2(5079, 1, "Unknown_watch_option_0_Did_you_mean_1_5079", "Unknown watch option '{0}'. Did you mean '{1}'?"), Watch_option_0_requires_a_value_of_type_1: i2(5080, 1, "Watch_option_0_requires_a_value_of_type_1_5080", "Watch option '{0}' requires a value of type {1}."), Cannot_find_a_tsconfig_json_file_at_the_current_directory_Colon_0: i2(5081, 1, "Cannot_find_a_tsconfig_json_file_at_the_current_directory_Colon_0_5081", "Cannot find a tsconfig.json file at the current directory: {0}."), _0_could_be_instantiated_with_an_arbitrary_type_which_could_be_unrelated_to_1: i2(5082, 1, "_0_could_be_instantiated_with_an_arbitrary_type_which_could_be_unrelated_to_1_5082", "'{0}' could be instantiated with an arbitrary type which could be unrelated to '{1}'."), Cannot_read_file_0: i2(5083, 1, "Cannot_read_file_0_5083", "Cannot read file '{0}'."), Tuple_members_must_all_have_names_or_all_not_have_names: i2(5084, 1, "Tuple_members_must_all_have_names_or_all_not_have_names_5084", "Tuple members must all have names or all not have names."), A_tuple_member_cannot_be_both_optional_and_rest: i2(5085, 1, "A_tuple_member_cannot_be_both_optional_and_rest_5085", "A tuple member cannot be both optional and rest."), A_labeled_tuple_element_is_declared_as_optional_with_a_question_mark_after_the_name_and_before_the_colon_rather_than_after_the_type: i2(5086, 1, "A_labeled_tuple_element_is_declared_as_optional_with_a_question_mark_after_the_name_and_before_the_c_5086", "A labeled tuple element is declared as optional with a question mark after the name and before the colon, rather than after the type."), A_labeled_tuple_element_is_declared_as_rest_with_a_before_the_name_rather_than_before_the_type: i2(5087, 1, "A_labeled_tuple_element_is_declared_as_rest_with_a_before_the_name_rather_than_before_the_type_5087", "A labeled tuple element is declared as rest with a '...' before the name, rather than before the type."), The_inferred_type_of_0_references_a_type_with_a_cyclic_structure_which_cannot_be_trivially_serialized_A_type_annotation_is_necessary: i2(5088, 1, "The_inferred_type_of_0_references_a_type_with_a_cyclic_structure_which_cannot_be_trivially_serialize_5088", "The inferred type of '{0}' references a type with a cyclic structure which cannot be trivially serialized. A type annotation is necessary."), Option_0_cannot_be_specified_when_option_jsx_is_1: i2(5089, 1, "Option_0_cannot_be_specified_when_option_jsx_is_1_5089", "Option '{0}' cannot be specified when option 'jsx' is '{1}'."), Non_relative_paths_are_not_allowed_when_baseUrl_is_not_set_Did_you_forget_a_leading_Slash: i2(5090, 1, "Non_relative_paths_are_not_allowed_when_baseUrl_is_not_set_Did_you_forget_a_leading_Slash_5090", "Non-relative paths are not allowed when 'baseUrl' is not set. Did you forget a leading './'?"), Option_preserveConstEnums_cannot_be_disabled_when_0_is_enabled: i2(5091, 1, "Option_preserveConstEnums_cannot_be_disabled_when_0_is_enabled_5091", "Option 'preserveConstEnums' cannot be disabled when '{0}' is enabled."), The_root_value_of_a_0_file_must_be_an_object: i2(5092, 1, "The_root_value_of_a_0_file_must_be_an_object_5092", "The root value of a '{0}' file must be an object."), Compiler_option_0_may_only_be_used_with_build: i2(5093, 1, "Compiler_option_0_may_only_be_used_with_build_5093", "Compiler option '--{0}' may only be used with '--build'."), Compiler_option_0_may_not_be_used_with_build: i2(5094, 1, "Compiler_option_0_may_not_be_used_with_build_5094", "Compiler option '--{0}' may not be used with '--build'."), Option_0_can_only_be_used_when_module_is_set_to_es2015_or_later: i2(5095, 1, "Option_0_can_only_be_used_when_module_is_set_to_es2015_or_later_5095", "Option '{0}' can only be used when 'module' is set to 'es2015' or later."), Option_allowImportingTsExtensions_can_only_be_used_when_either_noEmit_or_emitDeclarationOnly_is_set: i2(5096, 1, "Option_allowImportingTsExtensions_can_only_be_used_when_either_noEmit_or_emitDeclarationOnly_is_set_5096", "Option 'allowImportingTsExtensions' can only be used when either 'noEmit' or 'emitDeclarationOnly' is set."), An_import_path_can_only_end_with_a_0_extension_when_allowImportingTsExtensions_is_enabled: i2(5097, 1, "An_import_path_can_only_end_with_a_0_extension_when_allowImportingTsExtensions_is_enabled_5097", "An import path can only end with a '{0}' extension when 'allowImportingTsExtensions' is enabled."), Option_0_can_only_be_used_when_moduleResolution_is_set_to_node16_nodenext_or_bundler: i2(5098, 1, "Option_0_can_only_be_used_when_moduleResolution_is_set_to_node16_nodenext_or_bundler_5098", "Option '{0}' can only be used when 'moduleResolution' is set to 'node16', 'nodenext', or 'bundler'."), Option_0_is_deprecated_and_will_stop_functioning_in_TypeScript_1_Specify_compilerOption_ignoreDeprecations_Colon_2_to_silence_this_error: i2(5101, 1, "Option_0_is_deprecated_and_will_stop_functioning_in_TypeScript_1_Specify_compilerOption_ignoreDeprec_5101", `Option '{0}' is deprecated and will stop functioning in TypeScript {1}. Specify compilerOption '"ignoreDeprecations": "{2}"' to silence this error.`), Option_0_has_been_removed_Please_remove_it_from_your_configuration: i2(5102, 1, "Option_0_has_been_removed_Please_remove_it_from_your_configuration_5102", "Option '{0}' has been removed. Please remove it from your configuration."), Invalid_value_for_ignoreDeprecations: i2(5103, 1, "Invalid_value_for_ignoreDeprecations_5103", "Invalid value for '--ignoreDeprecations'."), Option_0_is_redundant_and_cannot_be_specified_with_option_1: i2(5104, 1, "Option_0_is_redundant_and_cannot_be_specified_with_option_1_5104", "Option '{0}' is redundant and cannot be specified with option '{1}'."), Option_verbatimModuleSyntax_cannot_be_used_when_module_is_set_to_UMD_AMD_or_System: i2(5105, 1, "Option_verbatimModuleSyntax_cannot_be_used_when_module_is_set_to_UMD_AMD_or_System_5105", "Option 'verbatimModuleSyntax' cannot be used when 'module' is set to 'UMD', 'AMD', or 'System'."), Use_0_instead: i2(5106, 3, "Use_0_instead_5106", "Use '{0}' instead."), Option_0_1_is_deprecated_and_will_stop_functioning_in_TypeScript_2_Specify_compilerOption_ignoreDeprecations_Colon_3_to_silence_this_error: i2(5107, 1, "Option_0_1_is_deprecated_and_will_stop_functioning_in_TypeScript_2_Specify_compilerOption_ignoreDepr_5107", `Option '{0}={1}' is deprecated and will stop functioning in TypeScript {2}. Specify compilerOption '"ignoreDeprecations": "{3}"' to silence this error.`), Option_0_1_has_been_removed_Please_remove_it_from_your_configuration: i2(5108, 1, "Option_0_1_has_been_removed_Please_remove_it_from_your_configuration_5108", "Option '{0}={1}' has been removed. Please remove it from your configuration."), Generates_a_sourcemap_for_each_corresponding_d_ts_file: i2(6e3, 3, "Generates_a_sourcemap_for_each_corresponding_d_ts_file_6000", "Generates a sourcemap for each corresponding '.d.ts' file."), Concatenate_and_emit_output_to_single_file: i2(6001, 3, "Concatenate_and_emit_output_to_single_file_6001", "Concatenate and emit output to single file."), Generates_corresponding_d_ts_file: i2(6002, 3, "Generates_corresponding_d_ts_file_6002", "Generates corresponding '.d.ts' file."), Specify_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations: i2(6004, 3, "Specify_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations_6004", "Specify the location where debugger should locate TypeScript files instead of source locations."), Watch_input_files: i2(6005, 3, "Watch_input_files_6005", "Watch input files."), Redirect_output_structure_to_the_directory: i2(6006, 3, "Redirect_output_structure_to_the_directory_6006", "Redirect output structure to the directory."), Do_not_erase_const_enum_declarations_in_generated_code: i2(6007, 3, "Do_not_erase_const_enum_declarations_in_generated_code_6007", "Do not erase const enum declarations in generated code."), Do_not_emit_outputs_if_any_errors_were_reported: i2(6008, 3, "Do_not_emit_outputs_if_any_errors_were_reported_6008", "Do not emit outputs if any errors were reported."), Do_not_emit_comments_to_output: i2(6009, 3, "Do_not_emit_comments_to_output_6009", "Do not emit comments to output."), Do_not_emit_outputs: i2(6010, 3, "Do_not_emit_outputs_6010", "Do not emit outputs."), Allow_default_imports_from_modules_with_no_default_export_This_does_not_affect_code_emit_just_typechecking: i2(6011, 3, "Allow_default_imports_from_modules_with_no_default_export_This_does_not_affect_code_emit_just_typech_6011", "Allow default imports from modules with no default export. This does not affect code emit, just typechecking."), Skip_type_checking_of_declaration_files: i2(6012, 3, "Skip_type_checking_of_declaration_files_6012", "Skip type checking of declaration files."), Do_not_resolve_the_real_path_of_symlinks: i2(6013, 3, "Do_not_resolve_the_real_path_of_symlinks_6013", "Do not resolve the real path of symlinks."), Only_emit_d_ts_declaration_files: i2(6014, 3, "Only_emit_d_ts_declaration_files_6014", "Only emit '.d.ts' declaration files."), Specify_ECMAScript_target_version: i2(6015, 3, "Specify_ECMAScript_target_version_6015", "Specify ECMAScript target version."), Specify_module_code_generation: i2(6016, 3, "Specify_module_code_generation_6016", "Specify module code generation."), Print_this_message: i2(6017, 3, "Print_this_message_6017", "Print this message."), Print_the_compiler_s_version: i2(6019, 3, "Print_the_compiler_s_version_6019", "Print the compiler's version."), Compile_the_project_given_the_path_to_its_configuration_file_or_to_a_folder_with_a_tsconfig_json: i2(6020, 3, "Compile_the_project_given_the_path_to_its_configuration_file_or_to_a_folder_with_a_tsconfig_json_6020", "Compile the project given the path to its configuration file, or to a folder with a 'tsconfig.json'."), Syntax_Colon_0: i2(6023, 3, "Syntax_Colon_0_6023", "Syntax: {0}"), options: i2(6024, 3, "options_6024", "options"), file: i2(6025, 3, "file_6025", "file"), Examples_Colon_0: i2(6026, 3, "Examples_Colon_0_6026", "Examples: {0}"), Options_Colon: i2(6027, 3, "Options_Colon_6027", "Options:"), Version_0: i2(6029, 3, "Version_0_6029", "Version {0}"), Insert_command_line_options_and_files_from_a_file: i2(6030, 3, "Insert_command_line_options_and_files_from_a_file_6030", "Insert command line options and files from a file."), Starting_compilation_in_watch_mode: i2(6031, 3, "Starting_compilation_in_watch_mode_6031", "Starting compilation in watch mode..."), File_change_detected_Starting_incremental_compilation: i2(6032, 3, "File_change_detected_Starting_incremental_compilation_6032", "File change detected. Starting incremental compilation..."), KIND: i2(6034, 3, "KIND_6034", "KIND"), FILE: i2(6035, 3, "FILE_6035", "FILE"), VERSION: i2(6036, 3, "VERSION_6036", "VERSION"), LOCATION: i2(6037, 3, "LOCATION_6037", "LOCATION"), DIRECTORY: i2(6038, 3, "DIRECTORY_6038", "DIRECTORY"), STRATEGY: i2(6039, 3, "STRATEGY_6039", "STRATEGY"), FILE_OR_DIRECTORY: i2(6040, 3, "FILE_OR_DIRECTORY_6040", "FILE OR DIRECTORY"), Errors_Files: i2(6041, 3, "Errors_Files_6041", "Errors  Files"), Generates_corresponding_map_file: i2(6043, 3, "Generates_corresponding_map_file_6043", "Generates corresponding '.map' file."), Compiler_option_0_expects_an_argument: i2(6044, 1, "Compiler_option_0_expects_an_argument_6044", "Compiler option '{0}' expects an argument."), Unterminated_quoted_string_in_response_file_0: i2(6045, 1, "Unterminated_quoted_string_in_response_file_0_6045", "Unterminated quoted string in response file '{0}'."), Argument_for_0_option_must_be_Colon_1: i2(6046, 1, "Argument_for_0_option_must_be_Colon_1_6046", "Argument for '{0}' option must be: {1}."), Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1: i2(6048, 1, "Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1_6048", "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'."), Unable_to_open_file_0: i2(6050, 1, "Unable_to_open_file_0_6050", "Unable to open file '{0}'."), Corrupted_locale_file_0: i2(6051, 1, "Corrupted_locale_file_0_6051", "Corrupted locale file {0}."), Raise_error_on_expressions_and_declarations_with_an_implied_any_type: i2(6052, 3, "Raise_error_on_expressions_and_declarations_with_an_implied_any_type_6052", "Raise error on expressions and declarations with an implied 'any' type."), File_0_not_found: i2(6053, 1, "File_0_not_found_6053", "File '{0}' not found."), File_0_has_an_unsupported_extension_The_only_supported_extensions_are_1: i2(6054, 1, "File_0_has_an_unsupported_extension_The_only_supported_extensions_are_1_6054", "File '{0}' has an unsupported extension. The only supported extensions are {1}."), Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures: i2(6055, 3, "Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures_6055", "Suppress noImplicitAny errors for indexing objects lacking index signatures."), Do_not_emit_declarations_for_code_that_has_an_internal_annotation: i2(6056, 3, "Do_not_emit_declarations_for_code_that_has_an_internal_annotation_6056", "Do not emit declarations for code that has an '@internal' annotation."), Specify_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir: i2(6058, 3, "Specify_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir_6058", "Specify the root directory of input files. Use to control the output directory structure with --outDir."), File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files: i2(6059, 1, "File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files_6059", "File '{0}' is not under 'rootDir' '{1}'. 'rootDir' is expected to contain all source files."), Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: i2(6060, 3, "Specify_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060", "Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)."), NEWLINE: i2(6061, 3, "NEWLINE_6061", "NEWLINE"), Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line: i2(6064, 1, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_null_on_command_line_6064", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'null' on command line."), Enables_experimental_support_for_ES7_decorators: i2(6065, 3, "Enables_experimental_support_for_ES7_decorators_6065", "Enables experimental support for ES7 decorators."), Enables_experimental_support_for_emitting_type_metadata_for_decorators: i2(6066, 3, "Enables_experimental_support_for_emitting_type_metadata_for_decorators_6066", "Enables experimental support for emitting type metadata for decorators."), Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file: i2(6070, 3, "Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file_6070", "Initializes a TypeScript project and creates a tsconfig.json file."), Successfully_created_a_tsconfig_json_file: i2(6071, 3, "Successfully_created_a_tsconfig_json_file_6071", "Successfully created a tsconfig.json file."), Suppress_excess_property_checks_for_object_literals: i2(6072, 3, "Suppress_excess_property_checks_for_object_literals_6072", "Suppress excess property checks for object literals."), Stylize_errors_and_messages_using_color_and_context_experimental: i2(6073, 3, "Stylize_errors_and_messages_using_color_and_context_experimental_6073", "Stylize errors and messages using color and context (experimental)."), Do_not_report_errors_on_unused_labels: i2(6074, 3, "Do_not_report_errors_on_unused_labels_6074", "Do not report errors on unused labels."), Report_error_when_not_all_code_paths_in_function_return_a_value: i2(6075, 3, "Report_error_when_not_all_code_paths_in_function_return_a_value_6075", "Report error when not all code paths in function return a value."), Report_errors_for_fallthrough_cases_in_switch_statement: i2(6076, 3, "Report_errors_for_fallthrough_cases_in_switch_statement_6076", "Report errors for fallthrough cases in switch statement."), Do_not_report_errors_on_unreachable_code: i2(6077, 3, "Do_not_report_errors_on_unreachable_code_6077", "Do not report errors on unreachable code."), Disallow_inconsistently_cased_references_to_the_same_file: i2(6078, 3, "Disallow_inconsistently_cased_references_to_the_same_file_6078", "Disallow inconsistently-cased references to the same file."), Specify_library_files_to_be_included_in_the_compilation: i2(6079, 3, "Specify_library_files_to_be_included_in_the_compilation_6079", "Specify library files to be included in the compilation."), Specify_JSX_code_generation: i2(6080, 3, "Specify_JSX_code_generation_6080", "Specify JSX code generation."), File_0_has_an_unsupported_extension_so_skipping_it: i2(6081, 3, "File_0_has_an_unsupported_extension_so_skipping_it_6081", "File '{0}' has an unsupported extension, so skipping it."), Only_amd_and_system_modules_are_supported_alongside_0: i2(6082, 1, "Only_amd_and_system_modules_are_supported_alongside_0_6082", "Only 'amd' and 'system' modules are supported alongside --{0}."), Base_directory_to_resolve_non_absolute_module_names: i2(6083, 3, "Base_directory_to_resolve_non_absolute_module_names_6083", "Base directory to resolve non-absolute module names."), Deprecated_Use_jsxFactory_instead_Specify_the_object_invoked_for_createElement_when_targeting_react_JSX_emit: i2(6084, 3, "Deprecated_Use_jsxFactory_instead_Specify_the_object_invoked_for_createElement_when_targeting_react__6084", "[Deprecated] Use '--jsxFactory' instead. Specify the object invoked for createElement when targeting 'react' JSX emit"), Enable_tracing_of_the_name_resolution_process: i2(6085, 3, "Enable_tracing_of_the_name_resolution_process_6085", "Enable tracing of the name resolution process."), Resolving_module_0_from_1: i2(6086, 3, "Resolving_module_0_from_1_6086", "======== Resolving module '{0}' from '{1}'. ========"), Explicitly_specified_module_resolution_kind_Colon_0: i2(6087, 3, "Explicitly_specified_module_resolution_kind_Colon_0_6087", "Explicitly specified module resolution kind: '{0}'."), Module_resolution_kind_is_not_specified_using_0: i2(6088, 3, "Module_resolution_kind_is_not_specified_using_0_6088", "Module resolution kind is not specified, using '{0}'."), Module_name_0_was_successfully_resolved_to_1: i2(6089, 3, "Module_name_0_was_successfully_resolved_to_1_6089", "======== Module name '{0}' was successfully resolved to '{1}'. ========"), Module_name_0_was_not_resolved: i2(6090, 3, "Module_name_0_was_not_resolved_6090", "======== Module name '{0}' was not resolved. ========"), paths_option_is_specified_looking_for_a_pattern_to_match_module_name_0: i2(6091, 3, "paths_option_is_specified_looking_for_a_pattern_to_match_module_name_0_6091", "'paths' option is specified, looking for a pattern to match module name '{0}'."), Module_name_0_matched_pattern_1: i2(6092, 3, "Module_name_0_matched_pattern_1_6092", "Module name '{0}', matched pattern '{1}'."), Trying_substitution_0_candidate_module_location_Colon_1: i2(6093, 3, "Trying_substitution_0_candidate_module_location_Colon_1_6093", "Trying substitution '{0}', candidate module location: '{1}'."), Resolving_module_name_0_relative_to_base_url_1_2: i2(6094, 3, "Resolving_module_name_0_relative_to_base_url_1_2_6094", "Resolving module name '{0}' relative to base url '{1}' - '{2}'."), Loading_module_as_file_Slash_folder_candidate_module_location_0_target_file_types_Colon_1: i2(6095, 3, "Loading_module_as_file_Slash_folder_candidate_module_location_0_target_file_types_Colon_1_6095", "Loading module as file / folder, candidate module location '{0}', target file types: {1}."), File_0_does_not_exist: i2(6096, 3, "File_0_does_not_exist_6096", "File '{0}' does not exist."), File_0_exists_use_it_as_a_name_resolution_result: i2(6097, 3, "File_0_exists_use_it_as_a_name_resolution_result_6097", "File '{0}' exists - use it as a name resolution result."), Loading_module_0_from_node_modules_folder_target_file_types_Colon_1: i2(6098, 3, "Loading_module_0_from_node_modules_folder_target_file_types_Colon_1_6098", "Loading module '{0}' from 'node_modules' folder, target file types: {1}."), Found_package_json_at_0: i2(6099, 3, "Found_package_json_at_0_6099", "Found 'package.json' at '{0}'."), package_json_does_not_have_a_0_field: i2(6100, 3, "package_json_does_not_have_a_0_field_6100", "'package.json' does not have a '{0}' field."), package_json_has_0_field_1_that_references_2: i2(6101, 3, "package_json_has_0_field_1_that_references_2_6101", "'package.json' has '{0}' field '{1}' that references '{2}'."), Allow_javascript_files_to_be_compiled: i2(6102, 3, "Allow_javascript_files_to_be_compiled_6102", "Allow javascript files to be compiled."), Checking_if_0_is_the_longest_matching_prefix_for_1_2: i2(6104, 3, "Checking_if_0_is_the_longest_matching_prefix_for_1_2_6104", "Checking if '{0}' is the longest matching prefix for '{1}' - '{2}'."), Expected_type_of_0_field_in_package_json_to_be_1_got_2: i2(6105, 3, "Expected_type_of_0_field_in_package_json_to_be_1_got_2_6105", "Expected type of '{0}' field in 'package.json' to be '{1}', got '{2}'."), baseUrl_option_is_set_to_0_using_this_value_to_resolve_non_relative_module_name_1: i2(6106, 3, "baseUrl_option_is_set_to_0_using_this_value_to_resolve_non_relative_module_name_1_6106", "'baseUrl' option is set to '{0}', using this value to resolve non-relative module name '{1}'."), rootDirs_option_is_set_using_it_to_resolve_relative_module_name_0: i2(6107, 3, "rootDirs_option_is_set_using_it_to_resolve_relative_module_name_0_6107", "'rootDirs' option is set, using it to resolve relative module name '{0}'."), Longest_matching_prefix_for_0_is_1: i2(6108, 3, "Longest_matching_prefix_for_0_is_1_6108", "Longest matching prefix for '{0}' is '{1}'."), Loading_0_from_the_root_dir_1_candidate_location_2: i2(6109, 3, "Loading_0_from_the_root_dir_1_candidate_location_2_6109", "Loading '{0}' from the root dir '{1}', candidate location '{2}'."), Trying_other_entries_in_rootDirs: i2(6110, 3, "Trying_other_entries_in_rootDirs_6110", "Trying other entries in 'rootDirs'."), Module_resolution_using_rootDirs_has_failed: i2(6111, 3, "Module_resolution_using_rootDirs_has_failed_6111", "Module resolution using 'rootDirs' has failed."), Do_not_emit_use_strict_directives_in_module_output: i2(6112, 3, "Do_not_emit_use_strict_directives_in_module_output_6112", "Do not emit 'use strict' directives in module output."), Enable_strict_null_checks: i2(6113, 3, "Enable_strict_null_checks_6113", "Enable strict null checks."), Unknown_option_excludes_Did_you_mean_exclude: i2(6114, 1, "Unknown_option_excludes_Did_you_mean_exclude_6114", "Unknown option 'excludes'. Did you mean 'exclude'?"), Raise_error_on_this_expressions_with_an_implied_any_type: i2(6115, 3, "Raise_error_on_this_expressions_with_an_implied_any_type_6115", "Raise error on 'this' expressions with an implied 'any' type."), Resolving_type_reference_directive_0_containing_file_1_root_directory_2: i2(6116, 3, "Resolving_type_reference_directive_0_containing_file_1_root_directory_2_6116", "======== Resolving type reference directive '{0}', containing file '{1}', root directory '{2}'. ========"), Type_reference_directive_0_was_successfully_resolved_to_1_primary_Colon_2: i2(6119, 3, "Type_reference_directive_0_was_successfully_resolved_to_1_primary_Colon_2_6119", "======== Type reference directive '{0}' was successfully resolved to '{1}', primary: {2}. ========"), Type_reference_directive_0_was_not_resolved: i2(6120, 3, "Type_reference_directive_0_was_not_resolved_6120", "======== Type reference directive '{0}' was not resolved. ========"), Resolving_with_primary_search_path_0: i2(6121, 3, "Resolving_with_primary_search_path_0_6121", "Resolving with primary search path '{0}'."), Root_directory_cannot_be_determined_skipping_primary_search_paths: i2(6122, 3, "Root_directory_cannot_be_determined_skipping_primary_search_paths_6122", "Root directory cannot be determined, skipping primary search paths."), Resolving_type_reference_directive_0_containing_file_1_root_directory_not_set: i2(6123, 3, "Resolving_type_reference_directive_0_containing_file_1_root_directory_not_set_6123", "======== Resolving type reference directive '{0}', containing file '{1}', root directory not set. ========"), Type_declaration_files_to_be_included_in_compilation: i2(6124, 3, "Type_declaration_files_to_be_included_in_compilation_6124", "Type declaration files to be included in compilation."), Looking_up_in_node_modules_folder_initial_location_0: i2(6125, 3, "Looking_up_in_node_modules_folder_initial_location_0_6125", "Looking up in 'node_modules' folder, initial location '{0}'."), Containing_file_is_not_specified_and_root_directory_cannot_be_determined_skipping_lookup_in_node_modules_folder: i2(6126, 3, "Containing_file_is_not_specified_and_root_directory_cannot_be_determined_skipping_lookup_in_node_mod_6126", "Containing file is not specified and root directory cannot be determined, skipping lookup in 'node_modules' folder."), Resolving_type_reference_directive_0_containing_file_not_set_root_directory_1: i2(6127, 3, "Resolving_type_reference_directive_0_containing_file_not_set_root_directory_1_6127", "======== Resolving type reference directive '{0}', containing file not set, root directory '{1}'. ========"), Resolving_type_reference_directive_0_containing_file_not_set_root_directory_not_set: i2(6128, 3, "Resolving_type_reference_directive_0_containing_file_not_set_root_directory_not_set_6128", "======== Resolving type reference directive '{0}', containing file not set, root directory not set. ========"), Resolving_real_path_for_0_result_1: i2(6130, 3, "Resolving_real_path_for_0_result_1_6130", "Resolving real path for '{0}', result '{1}'."), Cannot_compile_modules_using_option_0_unless_the_module_flag_is_amd_or_system: i2(6131, 1, "Cannot_compile_modules_using_option_0_unless_the_module_flag_is_amd_or_system_6131", "Cannot compile modules using option '{0}' unless the '--module' flag is 'amd' or 'system'."), File_name_0_has_a_1_extension_stripping_it: i2(6132, 3, "File_name_0_has_a_1_extension_stripping_it_6132", "File name '{0}' has a '{1}' extension - stripping it."), _0_is_declared_but_its_value_is_never_read: i2(6133, 1, "_0_is_declared_but_its_value_is_never_read_6133", "'{0}' is declared but its value is never read.", true), Report_errors_on_unused_locals: i2(6134, 3, "Report_errors_on_unused_locals_6134", "Report errors on unused locals."), Report_errors_on_unused_parameters: i2(6135, 3, "Report_errors_on_unused_parameters_6135", "Report errors on unused parameters."), The_maximum_dependency_depth_to_search_under_node_modules_and_load_JavaScript_files: i2(6136, 3, "The_maximum_dependency_depth_to_search_under_node_modules_and_load_JavaScript_files_6136", "The maximum dependency depth to search under node_modules and load JavaScript files."), Cannot_import_type_declaration_files_Consider_importing_0_instead_of_1: i2(6137, 1, "Cannot_import_type_declaration_files_Consider_importing_0_instead_of_1_6137", "Cannot import type declaration files. Consider importing '{0}' instead of '{1}'."), Property_0_is_declared_but_its_value_is_never_read: i2(6138, 1, "Property_0_is_declared_but_its_value_is_never_read_6138", "Property '{0}' is declared but its value is never read.", true), Import_emit_helpers_from_tslib: i2(6139, 3, "Import_emit_helpers_from_tslib_6139", "Import emit helpers from 'tslib'."), Auto_discovery_for_typings_is_enabled_in_project_0_Running_extra_resolution_pass_for_module_1_using_cache_location_2: i2(6140, 1, "Auto_discovery_for_typings_is_enabled_in_project_0_Running_extra_resolution_pass_for_module_1_using__6140", "Auto discovery for typings is enabled in project '{0}'. Running extra resolution pass for module '{1}' using cache location '{2}'."), Parse_in_strict_mode_and_emit_use_strict_for_each_source_file: i2(6141, 3, "Parse_in_strict_mode_and_emit_use_strict_for_each_source_file_6141", 'Parse in strict mode and emit "use strict" for each source file.'), Module_0_was_resolved_to_1_but_jsx_is_not_set: i2(6142, 1, "Module_0_was_resolved_to_1_but_jsx_is_not_set_6142", "Module '{0}' was resolved to '{1}', but '--jsx' is not set."), Module_0_was_resolved_as_locally_declared_ambient_module_in_file_1: i2(6144, 3, "Module_0_was_resolved_as_locally_declared_ambient_module_in_file_1_6144", "Module '{0}' was resolved as locally declared ambient module in file '{1}'."), Module_0_was_resolved_as_ambient_module_declared_in_1_since_this_file_was_not_modified: i2(6145, 3, "Module_0_was_resolved_as_ambient_module_declared_in_1_since_this_file_was_not_modified_6145", "Module '{0}' was resolved as ambient module declared in '{1}' since this file was not modified."), Specify_the_JSX_factory_function_to_use_when_targeting_react_JSX_emit_e_g_React_createElement_or_h: i2(6146, 3, "Specify_the_JSX_factory_function_to_use_when_targeting_react_JSX_emit_e_g_React_createElement_or_h_6146", "Specify the JSX factory function to use when targeting 'react' JSX emit, e.g. 'React.createElement' or 'h'."), Resolution_for_module_0_was_found_in_cache_from_location_1: i2(6147, 3, "Resolution_for_module_0_was_found_in_cache_from_location_1_6147", "Resolution for module '{0}' was found in cache from location '{1}'."), Directory_0_does_not_exist_skipping_all_lookups_in_it: i2(6148, 3, "Directory_0_does_not_exist_skipping_all_lookups_in_it_6148", "Directory '{0}' does not exist, skipping all lookups in it."), Show_diagnostic_information: i2(6149, 3, "Show_diagnostic_information_6149", "Show diagnostic information."), Show_verbose_diagnostic_information: i2(6150, 3, "Show_verbose_diagnostic_information_6150", "Show verbose diagnostic information."), Emit_a_single_file_with_source_maps_instead_of_having_a_separate_file: i2(6151, 3, "Emit_a_single_file_with_source_maps_instead_of_having_a_separate_file_6151", "Emit a single file with source maps instead of having a separate file."), Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap_to_be_set: i2(6152, 3, "Emit_the_source_alongside_the_sourcemaps_within_a_single_file_requires_inlineSourceMap_or_sourceMap__6152", "Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set."), Transpile_each_file_as_a_separate_module_similar_to_ts_transpileModule: i2(6153, 3, "Transpile_each_file_as_a_separate_module_similar_to_ts_transpileModule_6153", "Transpile each file as a separate module (similar to 'ts.transpileModule')."), Print_names_of_generated_files_part_of_the_compilation: i2(6154, 3, "Print_names_of_generated_files_part_of_the_compilation_6154", "Print names of generated files part of the compilation."), Print_names_of_files_part_of_the_compilation: i2(6155, 3, "Print_names_of_files_part_of_the_compilation_6155", "Print names of files part of the compilation."), The_locale_used_when_displaying_messages_to_the_user_e_g_en_us: i2(6156, 3, "The_locale_used_when_displaying_messages_to_the_user_e_g_en_us_6156", "The locale used when displaying messages to the user (e.g. 'en-us')"), Do_not_generate_custom_helper_functions_like_extends_in_compiled_output: i2(6157, 3, "Do_not_generate_custom_helper_functions_like_extends_in_compiled_output_6157", "Do not generate custom helper functions like '__extends' in compiled output."), Do_not_include_the_default_library_file_lib_d_ts: i2(6158, 3, "Do_not_include_the_default_library_file_lib_d_ts_6158", "Do not include the default library file (lib.d.ts)."), Do_not_add_triple_slash_references_or_imported_modules_to_the_list_of_compiled_files: i2(6159, 3, "Do_not_add_triple_slash_references_or_imported_modules_to_the_list_of_compiled_files_6159", "Do not add triple-slash references or imported modules to the list of compiled files."), Deprecated_Use_skipLibCheck_instead_Skip_type_checking_of_default_library_declaration_files: i2(6160, 3, "Deprecated_Use_skipLibCheck_instead_Skip_type_checking_of_default_library_declaration_files_6160", "[Deprecated] Use '--skipLibCheck' instead. Skip type checking of default library declaration files."), List_of_folders_to_include_type_definitions_from: i2(6161, 3, "List_of_folders_to_include_type_definitions_from_6161", "List of folders to include type definitions from."), Disable_size_limitations_on_JavaScript_projects: i2(6162, 3, "Disable_size_limitations_on_JavaScript_projects_6162", "Disable size limitations on JavaScript projects."), The_character_set_of_the_input_files: i2(6163, 3, "The_character_set_of_the_input_files_6163", "The character set of the input files."), Do_not_truncate_error_messages: i2(6165, 3, "Do_not_truncate_error_messages_6165", "Do not truncate error messages."), Output_directory_for_generated_declaration_files: i2(6166, 3, "Output_directory_for_generated_declaration_files_6166", "Output directory for generated declaration files."), A_series_of_entries_which_re_map_imports_to_lookup_locations_relative_to_the_baseUrl: i2(6167, 3, "A_series_of_entries_which_re_map_imports_to_lookup_locations_relative_to_the_baseUrl_6167", "A series of entries which re-map imports to lookup locations relative to the 'baseUrl'."), List_of_root_folders_whose_combined_content_represents_the_structure_of_the_project_at_runtime: i2(6168, 3, "List_of_root_folders_whose_combined_content_represents_the_structure_of_the_project_at_runtime_6168", "List of root folders whose combined content represents the structure of the project at runtime."), Show_all_compiler_options: i2(6169, 3, "Show_all_compiler_options_6169", "Show all compiler options."), Deprecated_Use_outFile_instead_Concatenate_and_emit_output_to_single_file: i2(6170, 3, "Deprecated_Use_outFile_instead_Concatenate_and_emit_output_to_single_file_6170", "[Deprecated] Use '--outFile' instead. Concatenate and emit output to single file"), Command_line_Options: i2(6171, 3, "Command_line_Options_6171", "Command-line Options"), Provide_full_support_for_iterables_in_for_of_spread_and_destructuring_when_targeting_ES5_or_ES3: i2(6179, 3, "Provide_full_support_for_iterables_in_for_of_spread_and_destructuring_when_targeting_ES5_or_ES3_6179", "Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'."), Enable_all_strict_type_checking_options: i2(6180, 3, "Enable_all_strict_type_checking_options_6180", "Enable all strict type-checking options."), Scoped_package_detected_looking_in_0: i2(6182, 3, "Scoped_package_detected_looking_in_0_6182", "Scoped package detected, looking in '{0}'"), Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2: i2(6183, 3, "Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2_6183", "Reusing resolution of module '{0}' from '{1}' of old program, it was successfully resolved to '{2}'."), Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2_with_Package_ID_3: i2(6184, 3, "Reusing_resolution_of_module_0_from_1_of_old_program_it_was_successfully_resolved_to_2_with_Package__6184", "Reusing resolution of module '{0}' from '{1}' of old program, it was successfully resolved to '{2}' with Package ID '{3}'."), Enable_strict_checking_of_function_types: i2(6186, 3, "Enable_strict_checking_of_function_types_6186", "Enable strict checking of function types."), Enable_strict_checking_of_property_initialization_in_classes: i2(6187, 3, "Enable_strict_checking_of_property_initialization_in_classes_6187", "Enable strict checking of property initialization in classes."), Numeric_separators_are_not_allowed_here: i2(6188, 1, "Numeric_separators_are_not_allowed_here_6188", "Numeric separators are not allowed here."), Multiple_consecutive_numeric_separators_are_not_permitted: i2(6189, 1, "Multiple_consecutive_numeric_separators_are_not_permitted_6189", "Multiple consecutive numeric separators are not permitted."), Whether_to_keep_outdated_console_output_in_watch_mode_instead_of_clearing_the_screen: i2(6191, 3, "Whether_to_keep_outdated_console_output_in_watch_mode_instead_of_clearing_the_screen_6191", "Whether to keep outdated console output in watch mode instead of clearing the screen."), All_imports_in_import_declaration_are_unused: i2(6192, 1, "All_imports_in_import_declaration_are_unused_6192", "All imports in import declaration are unused.", true), Found_1_error_Watching_for_file_changes: i2(6193, 3, "Found_1_error_Watching_for_file_changes_6193", "Found 1 error. Watching for file changes."), Found_0_errors_Watching_for_file_changes: i2(6194, 3, "Found_0_errors_Watching_for_file_changes_6194", "Found {0} errors. Watching for file changes."), Resolve_keyof_to_string_valued_property_names_only_no_numbers_or_symbols: i2(6195, 3, "Resolve_keyof_to_string_valued_property_names_only_no_numbers_or_symbols_6195", "Resolve 'keyof' to string valued property names only (no numbers or symbols)."), _0_is_declared_but_never_used: i2(6196, 1, "_0_is_declared_but_never_used_6196", "'{0}' is declared but never used.", true), Include_modules_imported_with_json_extension: i2(6197, 3, "Include_modules_imported_with_json_extension_6197", "Include modules imported with '.json' extension"), All_destructured_elements_are_unused: i2(6198, 1, "All_destructured_elements_are_unused_6198", "All destructured elements are unused.", true), All_variables_are_unused: i2(6199, 1, "All_variables_are_unused_6199", "All variables are unused.", true), Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0: i2(6200, 1, "Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0_6200", "Definitions of the following identifiers conflict with those in another file: {0}"), Conflicts_are_in_this_file: i2(6201, 3, "Conflicts_are_in_this_file_6201", "Conflicts are in this file."), Project_references_may_not_form_a_circular_graph_Cycle_detected_Colon_0: i2(6202, 1, "Project_references_may_not_form_a_circular_graph_Cycle_detected_Colon_0_6202", "Project references may not form a circular graph. Cycle detected: {0}"), _0_was_also_declared_here: i2(6203, 3, "_0_was_also_declared_here_6203", "'{0}' was also declared here."), and_here: i2(6204, 3, "and_here_6204", "and here."), All_type_parameters_are_unused: i2(6205, 1, "All_type_parameters_are_unused_6205", "All type parameters are unused."), package_json_has_a_typesVersions_field_with_version_specific_path_mappings: i2(6206, 3, "package_json_has_a_typesVersions_field_with_version_specific_path_mappings_6206", "'package.json' has a 'typesVersions' field with version-specific path mappings."), package_json_does_not_have_a_typesVersions_entry_that_matches_version_0: i2(6207, 3, "package_json_does_not_have_a_typesVersions_entry_that_matches_version_0_6207", "'package.json' does not have a 'typesVersions' entry that matches version '{0}'."), package_json_has_a_typesVersions_entry_0_that_matches_compiler_version_1_looking_for_a_pattern_to_match_module_name_2: i2(6208, 3, "package_json_has_a_typesVersions_entry_0_that_matches_compiler_version_1_looking_for_a_pattern_to_ma_6208", "'package.json' has a 'typesVersions' entry '{0}' that matches compiler version '{1}', looking for a pattern to match module name '{2}'."), package_json_has_a_typesVersions_entry_0_that_is_not_a_valid_semver_range: i2(6209, 3, "package_json_has_a_typesVersions_entry_0_that_is_not_a_valid_semver_range_6209", "'package.json' has a 'typesVersions' entry '{0}' that is not a valid semver range."), An_argument_for_0_was_not_provided: i2(6210, 3, "An_argument_for_0_was_not_provided_6210", "An argument for '{0}' was not provided."), An_argument_matching_this_binding_pattern_was_not_provided: i2(6211, 3, "An_argument_matching_this_binding_pattern_was_not_provided_6211", "An argument matching this binding pattern was not provided."), Did_you_mean_to_call_this_expression: i2(6212, 3, "Did_you_mean_to_call_this_expression_6212", "Did you mean to call this expression?"), Did_you_mean_to_use_new_with_this_expression: i2(6213, 3, "Did_you_mean_to_use_new_with_this_expression_6213", "Did you mean to use 'new' with this expression?"), Enable_strict_bind_call_and_apply_methods_on_functions: i2(6214, 3, "Enable_strict_bind_call_and_apply_methods_on_functions_6214", "Enable strict 'bind', 'call', and 'apply' methods on functions."), Using_compiler_options_of_project_reference_redirect_0: i2(6215, 3, "Using_compiler_options_of_project_reference_redirect_0_6215", "Using compiler options of project reference redirect '{0}'."), Found_1_error: i2(6216, 3, "Found_1_error_6216", "Found 1 error."), Found_0_errors: i2(6217, 3, "Found_0_errors_6217", "Found {0} errors."), Module_name_0_was_successfully_resolved_to_1_with_Package_ID_2: i2(6218, 3, "Module_name_0_was_successfully_resolved_to_1_with_Package_ID_2_6218", "======== Module name '{0}' was successfully resolved to '{1}' with Package ID '{2}'. ========"), Type_reference_directive_0_was_successfully_resolved_to_1_with_Package_ID_2_primary_Colon_3: i2(6219, 3, "Type_reference_directive_0_was_successfully_resolved_to_1_with_Package_ID_2_primary_Colon_3_6219", "======== Type reference directive '{0}' was successfully resolved to '{1}' with Package ID '{2}', primary: {3}. ========"), package_json_had_a_falsy_0_field: i2(6220, 3, "package_json_had_a_falsy_0_field_6220", "'package.json' had a falsy '{0}' field."), Disable_use_of_source_files_instead_of_declaration_files_from_referenced_projects: i2(6221, 3, "Disable_use_of_source_files_instead_of_declaration_files_from_referenced_projects_6221", "Disable use of source files instead of declaration files from referenced projects."), Emit_class_fields_with_Define_instead_of_Set: i2(6222, 3, "Emit_class_fields_with_Define_instead_of_Set_6222", "Emit class fields with Define instead of Set."), Generates_a_CPU_profile: i2(6223, 3, "Generates_a_CPU_profile_6223", "Generates a CPU profile."), Disable_solution_searching_for_this_project: i2(6224, 3, "Disable_solution_searching_for_this_project_6224", "Disable solution searching for this project."), Specify_strategy_for_watching_file_Colon_FixedPollingInterval_default_PriorityPollingInterval_DynamicPriorityPolling_FixedChunkSizePolling_UseFsEvents_UseFsEventsOnParentDirectory: i2(6225, 3, "Specify_strategy_for_watching_file_Colon_FixedPollingInterval_default_PriorityPollingInterval_Dynami_6225", "Specify strategy for watching file: 'FixedPollingInterval' (default), 'PriorityPollingInterval', 'DynamicPriorityPolling', 'FixedChunkSizePolling', 'UseFsEvents', 'UseFsEventsOnParentDirectory'."), Specify_strategy_for_watching_directory_on_platforms_that_don_t_support_recursive_watching_natively_Colon_UseFsEvents_default_FixedPollingInterval_DynamicPriorityPolling_FixedChunkSizePolling: i2(6226, 3, "Specify_strategy_for_watching_directory_on_platforms_that_don_t_support_recursive_watching_natively__6226", "Specify strategy for watching directory on platforms that don't support recursive watching natively: 'UseFsEvents' (default), 'FixedPollingInterval', 'DynamicPriorityPolling', 'FixedChunkSizePolling'."), Specify_strategy_for_creating_a_polling_watch_when_it_fails_to_create_using_file_system_events_Colon_FixedInterval_default_PriorityInterval_DynamicPriority_FixedChunkSize: i2(6227, 3, "Specify_strategy_for_creating_a_polling_watch_when_it_fails_to_create_using_file_system_events_Colon_6227", "Specify strategy for creating a polling watch when it fails to create using file system events: 'FixedInterval' (default), 'PriorityInterval', 'DynamicPriority', 'FixedChunkSize'."), Tag_0_expects_at_least_1_arguments_but_the_JSX_factory_2_provides_at_most_3: i2(6229, 1, "Tag_0_expects_at_least_1_arguments_but_the_JSX_factory_2_provides_at_most_3_6229", "Tag '{0}' expects at least '{1}' arguments, but the JSX factory '{2}' provides at most '{3}'."), Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line: i2(6230, 1, "Option_0_can_only_be_specified_in_tsconfig_json_file_or_set_to_false_or_null_on_command_line_6230", "Option '{0}' can only be specified in 'tsconfig.json' file or set to 'false' or 'null' on command line."), Could_not_resolve_the_path_0_with_the_extensions_Colon_1: i2(6231, 1, "Could_not_resolve_the_path_0_with_the_extensions_Colon_1_6231", "Could not resolve the path '{0}' with the extensions: {1}."), Declaration_augments_declaration_in_another_file_This_cannot_be_serialized: i2(6232, 1, "Declaration_augments_declaration_in_another_file_This_cannot_be_serialized_6232", "Declaration augments declaration in another file. This cannot be serialized."), This_is_the_declaration_being_augmented_Consider_moving_the_augmenting_declaration_into_the_same_file: i2(6233, 1, "This_is_the_declaration_being_augmented_Consider_moving_the_augmenting_declaration_into_the_same_fil_6233", "This is the declaration being augmented. Consider moving the augmenting declaration into the same file."), This_expression_is_not_callable_because_it_is_a_get_accessor_Did_you_mean_to_use_it_without: i2(6234, 1, "This_expression_is_not_callable_because_it_is_a_get_accessor_Did_you_mean_to_use_it_without_6234", "This expression is not callable because it is a 'get' accessor. Did you mean to use it without '()'?"), Disable_loading_referenced_projects: i2(6235, 3, "Disable_loading_referenced_projects_6235", "Disable loading referenced projects."), Arguments_for_the_rest_parameter_0_were_not_provided: i2(6236, 1, "Arguments_for_the_rest_parameter_0_were_not_provided_6236", "Arguments for the rest parameter '{0}' were not provided."), Generates_an_event_trace_and_a_list_of_types: i2(6237, 3, "Generates_an_event_trace_and_a_list_of_types_6237", "Generates an event trace and a list of types."), Specify_the_module_specifier_to_be_used_to_import_the_jsx_and_jsxs_factory_functions_from_eg_react: i2(6238, 1, "Specify_the_module_specifier_to_be_used_to_import_the_jsx_and_jsxs_factory_functions_from_eg_react_6238", "Specify the module specifier to be used to import the 'jsx' and 'jsxs' factory functions from. eg, react"), File_0_exists_according_to_earlier_cached_lookups: i2(6239, 3, "File_0_exists_according_to_earlier_cached_lookups_6239", "File '{0}' exists according to earlier cached lookups."), File_0_does_not_exist_according_to_earlier_cached_lookups: i2(6240, 3, "File_0_does_not_exist_according_to_earlier_cached_lookups_6240", "File '{0}' does not exist according to earlier cached lookups."), Resolution_for_type_reference_directive_0_was_found_in_cache_from_location_1: i2(6241, 3, "Resolution_for_type_reference_directive_0_was_found_in_cache_from_location_1_6241", "Resolution for type reference directive '{0}' was found in cache from location '{1}'."), Resolving_type_reference_directive_0_containing_file_1: i2(6242, 3, "Resolving_type_reference_directive_0_containing_file_1_6242", "======== Resolving type reference directive '{0}', containing file '{1}'. ========"), Interpret_optional_property_types_as_written_rather_than_adding_undefined: i2(6243, 3, "Interpret_optional_property_types_as_written_rather_than_adding_undefined_6243", "Interpret optional property types as written, rather than adding 'undefined'."), Modules: i2(6244, 3, "Modules_6244", "Modules"), File_Management: i2(6245, 3, "File_Management_6245", "File Management"), Emit: i2(6246, 3, "Emit_6246", "Emit"), JavaScript_Support: i2(6247, 3, "JavaScript_Support_6247", "JavaScript Support"), Type_Checking: i2(6248, 3, "Type_Checking_6248", "Type Checking"), Editor_Support: i2(6249, 3, "Editor_Support_6249", "Editor Support"), Watch_and_Build_Modes: i2(6250, 3, "Watch_and_Build_Modes_6250", "Watch and Build Modes"), Compiler_Diagnostics: i2(6251, 3, "Compiler_Diagnostics_6251", "Compiler Diagnostics"), Interop_Constraints: i2(6252, 3, "Interop_Constraints_6252", "Interop Constraints"), Backwards_Compatibility: i2(6253, 3, "Backwards_Compatibility_6253", "Backwards Compatibility"), Language_and_Environment: i2(6254, 3, "Language_and_Environment_6254", "Language and Environment"), Projects: i2(6255, 3, "Projects_6255", "Projects"), Output_Formatting: i2(6256, 3, "Output_Formatting_6256", "Output Formatting"), Completeness: i2(6257, 3, "Completeness_6257", "Completeness"), _0_should_be_set_inside_the_compilerOptions_object_of_the_config_json_file: i2(6258, 1, "_0_should_be_set_inside_the_compilerOptions_object_of_the_config_json_file_6258", "'{0}' should be set inside the 'compilerOptions' object of the config json file"), Found_1_error_in_1: i2(6259, 3, "Found_1_error_in_1_6259", "Found 1 error in {1}"), Found_0_errors_in_the_same_file_starting_at_Colon_1: i2(6260, 3, "Found_0_errors_in_the_same_file_starting_at_Colon_1_6260", "Found {0} errors in the same file, starting at: {1}"), Found_0_errors_in_1_files: i2(6261, 3, "Found_0_errors_in_1_files_6261", "Found {0} errors in {1} files."), File_name_0_has_a_1_extension_looking_up_2_instead: i2(6262, 3, "File_name_0_has_a_1_extension_looking_up_2_instead_6262", "File name '{0}' has a '{1}' extension - looking up '{2}' instead."), Module_0_was_resolved_to_1_but_allowArbitraryExtensions_is_not_set: i2(6263, 1, "Module_0_was_resolved_to_1_but_allowArbitraryExtensions_is_not_set_6263", "Module '{0}' was resolved to '{1}', but '--allowArbitraryExtensions' is not set."), Enable_importing_files_with_any_extension_provided_a_declaration_file_is_present: i2(6264, 3, "Enable_importing_files_with_any_extension_provided_a_declaration_file_is_present_6264", "Enable importing files with any extension, provided a declaration file is present."), Directory_0_has_no_containing_package_json_scope_Imports_will_not_resolve: i2(6270, 3, "Directory_0_has_no_containing_package_json_scope_Imports_will_not_resolve_6270", "Directory '{0}' has no containing package.json scope. Imports will not resolve."), Import_specifier_0_does_not_exist_in_package_json_scope_at_path_1: i2(6271, 3, "Import_specifier_0_does_not_exist_in_package_json_scope_at_path_1_6271", "Import specifier '{0}' does not exist in package.json scope at path '{1}'."), Invalid_import_specifier_0_has_no_possible_resolutions: i2(6272, 3, "Invalid_import_specifier_0_has_no_possible_resolutions_6272", "Invalid import specifier '{0}' has no possible resolutions."), package_json_scope_0_has_no_imports_defined: i2(6273, 3, "package_json_scope_0_has_no_imports_defined_6273", "package.json scope '{0}' has no imports defined."), package_json_scope_0_explicitly_maps_specifier_1_to_null: i2(6274, 3, "package_json_scope_0_explicitly_maps_specifier_1_to_null_6274", "package.json scope '{0}' explicitly maps specifier '{1}' to null."), package_json_scope_0_has_invalid_type_for_target_of_specifier_1: i2(6275, 3, "package_json_scope_0_has_invalid_type_for_target_of_specifier_1_6275", "package.json scope '{0}' has invalid type for target of specifier '{1}'"), Export_specifier_0_does_not_exist_in_package_json_scope_at_path_1: i2(6276, 3, "Export_specifier_0_does_not_exist_in_package_json_scope_at_path_1_6276", "Export specifier '{0}' does not exist in package.json scope at path '{1}'."), Resolution_of_non_relative_name_failed_trying_with_modern_Node_resolution_features_disabled_to_see_if_npm_library_needs_configuration_update: i2(6277, 3, "Resolution_of_non_relative_name_failed_trying_with_modern_Node_resolution_features_disabled_to_see_i_6277", "Resolution of non-relative name failed; trying with modern Node resolution features disabled to see if npm library needs configuration update."), There_are_types_at_0_but_this_result_could_not_be_resolved_when_respecting_package_json_exports_The_1_library_may_need_to_update_its_package_json_or_typings: i2(6278, 3, "There_are_types_at_0_but_this_result_could_not_be_resolved_when_respecting_package_json_exports_The__6278", `There are types at '{0}', but this result could not be resolved when respecting package.json "exports". The '{1}' library may need to update its package.json or typings.`), Enable_project_compilation: i2(6302, 3, "Enable_project_compilation_6302", "Enable project compilation"), Composite_projects_may_not_disable_declaration_emit: i2(6304, 1, "Composite_projects_may_not_disable_declaration_emit_6304", "Composite projects may not disable declaration emit."), Output_file_0_has_not_been_built_from_source_file_1: i2(6305, 1, "Output_file_0_has_not_been_built_from_source_file_1_6305", "Output file '{0}' has not been built from source file '{1}'."), Referenced_project_0_must_have_setting_composite_Colon_true: i2(6306, 1, "Referenced_project_0_must_have_setting_composite_Colon_true_6306", `Referenced project '{0}' must have setting "composite": true.`), File_0_is_not_listed_within_the_file_list_of_project_1_Projects_must_list_all_files_or_use_an_include_pattern: i2(6307, 1, "File_0_is_not_listed_within_the_file_list_of_project_1_Projects_must_list_all_files_or_use_an_includ_6307", "File '{0}' is not listed within the file list of project '{1}'. Projects must list all files or use an 'include' pattern."), Cannot_prepend_project_0_because_it_does_not_have_outFile_set: i2(6308, 1, "Cannot_prepend_project_0_because_it_does_not_have_outFile_set_6308", "Cannot prepend project '{0}' because it does not have 'outFile' set"), Output_file_0_from_project_1_does_not_exist: i2(6309, 1, "Output_file_0_from_project_1_does_not_exist_6309", "Output file '{0}' from project '{1}' does not exist"), Referenced_project_0_may_not_disable_emit: i2(6310, 1, "Referenced_project_0_may_not_disable_emit_6310", "Referenced project '{0}' may not disable emit."), Project_0_is_out_of_date_because_output_1_is_older_than_input_2: i2(6350, 3, "Project_0_is_out_of_date_because_output_1_is_older_than_input_2_6350", "Project '{0}' is out of date because output '{1}' is older than input '{2}'"), Project_0_is_up_to_date_because_newest_input_1_is_older_than_output_2: i2(6351, 3, "Project_0_is_up_to_date_because_newest_input_1_is_older_than_output_2_6351", "Project '{0}' is up to date because newest input '{1}' is older than output '{2}'"), Project_0_is_out_of_date_because_output_file_1_does_not_exist: i2(6352, 3, "Project_0_is_out_of_date_because_output_file_1_does_not_exist_6352", "Project '{0}' is out of date because output file '{1}' does not exist"), Project_0_is_out_of_date_because_its_dependency_1_is_out_of_date: i2(6353, 3, "Project_0_is_out_of_date_because_its_dependency_1_is_out_of_date_6353", "Project '{0}' is out of date because its dependency '{1}' is out of date"), Project_0_is_up_to_date_with_d_ts_files_from_its_dependencies: i2(6354, 3, "Project_0_is_up_to_date_with_d_ts_files_from_its_dependencies_6354", "Project '{0}' is up to date with .d.ts files from its dependencies"), Projects_in_this_build_Colon_0: i2(6355, 3, "Projects_in_this_build_Colon_0_6355", "Projects in this build: {0}"), A_non_dry_build_would_delete_the_following_files_Colon_0: i2(6356, 3, "A_non_dry_build_would_delete_the_following_files_Colon_0_6356", "A non-dry build would delete the following files: {0}"), A_non_dry_build_would_build_project_0: i2(6357, 3, "A_non_dry_build_would_build_project_0_6357", "A non-dry build would build project '{0}'"), Building_project_0: i2(6358, 3, "Building_project_0_6358", "Building project '{0}'..."), Updating_output_timestamps_of_project_0: i2(6359, 3, "Updating_output_timestamps_of_project_0_6359", "Updating output timestamps of project '{0}'..."), Project_0_is_up_to_date: i2(6361, 3, "Project_0_is_up_to_date_6361", "Project '{0}' is up to date"), Skipping_build_of_project_0_because_its_dependency_1_has_errors: i2(6362, 3, "Skipping_build_of_project_0_because_its_dependency_1_has_errors_6362", "Skipping build of project '{0}' because its dependency '{1}' has errors"), Project_0_can_t_be_built_because_its_dependency_1_has_errors: i2(6363, 3, "Project_0_can_t_be_built_because_its_dependency_1_has_errors_6363", "Project '{0}' can't be built because its dependency '{1}' has errors"), Build_one_or_more_projects_and_their_dependencies_if_out_of_date: i2(6364, 3, "Build_one_or_more_projects_and_their_dependencies_if_out_of_date_6364", "Build one or more projects and their dependencies, if out of date"), Delete_the_outputs_of_all_projects: i2(6365, 3, "Delete_the_outputs_of_all_projects_6365", "Delete the outputs of all projects."), Show_what_would_be_built_or_deleted_if_specified_with_clean: i2(6367, 3, "Show_what_would_be_built_or_deleted_if_specified_with_clean_6367", "Show what would be built (or deleted, if specified with '--clean')"), Option_build_must_be_the_first_command_line_argument: i2(6369, 1, "Option_build_must_be_the_first_command_line_argument_6369", "Option '--build' must be the first command line argument."), Options_0_and_1_cannot_be_combined: i2(6370, 1, "Options_0_and_1_cannot_be_combined_6370", "Options '{0}' and '{1}' cannot be combined."), Updating_unchanged_output_timestamps_of_project_0: i2(6371, 3, "Updating_unchanged_output_timestamps_of_project_0_6371", "Updating unchanged output timestamps of project '{0}'..."), Project_0_is_out_of_date_because_output_of_its_dependency_1_has_changed: i2(6372, 3, "Project_0_is_out_of_date_because_output_of_its_dependency_1_has_changed_6372", "Project '{0}' is out of date because output of its dependency '{1}' has changed"), Updating_output_of_project_0: i2(6373, 3, "Updating_output_of_project_0_6373", "Updating output of project '{0}'..."), A_non_dry_build_would_update_timestamps_for_output_of_project_0: i2(6374, 3, "A_non_dry_build_would_update_timestamps_for_output_of_project_0_6374", "A non-dry build would update timestamps for output of project '{0}'"), A_non_dry_build_would_update_output_of_project_0: i2(6375, 3, "A_non_dry_build_would_update_output_of_project_0_6375", "A non-dry build would update output of project '{0}'"), Cannot_update_output_of_project_0_because_there_was_error_reading_file_1: i2(6376, 3, "Cannot_update_output_of_project_0_because_there_was_error_reading_file_1_6376", "Cannot update output of project '{0}' because there was error reading file '{1}'"), Cannot_write_file_0_because_it_will_overwrite_tsbuildinfo_file_generated_by_referenced_project_1: i2(6377, 1, "Cannot_write_file_0_because_it_will_overwrite_tsbuildinfo_file_generated_by_referenced_project_1_6377", "Cannot write file '{0}' because it will overwrite '.tsbuildinfo' file generated by referenced project '{1}'"), Composite_projects_may_not_disable_incremental_compilation: i2(6379, 1, "Composite_projects_may_not_disable_incremental_compilation_6379", "Composite projects may not disable incremental compilation."), Specify_file_to_store_incremental_compilation_information: i2(6380, 3, "Specify_file_to_store_incremental_compilation_information_6380", "Specify file to store incremental compilation information"), Project_0_is_out_of_date_because_output_for_it_was_generated_with_version_1_that_differs_with_current_version_2: i2(6381, 3, "Project_0_is_out_of_date_because_output_for_it_was_generated_with_version_1_that_differs_with_curren_6381", "Project '{0}' is out of date because output for it was generated with version '{1}' that differs with current version '{2}'"), Skipping_build_of_project_0_because_its_dependency_1_was_not_built: i2(6382, 3, "Skipping_build_of_project_0_because_its_dependency_1_was_not_built_6382", "Skipping build of project '{0}' because its dependency '{1}' was not built"), Project_0_can_t_be_built_because_its_dependency_1_was_not_built: i2(6383, 3, "Project_0_can_t_be_built_because_its_dependency_1_was_not_built_6383", "Project '{0}' can't be built because its dependency '{1}' was not built"), Have_recompiles_in_incremental_and_watch_assume_that_changes_within_a_file_will_only_affect_files_directly_depending_on_it: i2(6384, 3, "Have_recompiles_in_incremental_and_watch_assume_that_changes_within_a_file_will_only_affect_files_di_6384", "Have recompiles in '--incremental' and '--watch' assume that changes within a file will only affect files directly depending on it."), _0_is_deprecated: i2(6385, 2, "_0_is_deprecated_6385", "'{0}' is deprecated.", void 0, void 0, true), Performance_timings_for_diagnostics_or_extendedDiagnostics_are_not_available_in_this_session_A_native_implementation_of_the_Web_Performance_API_could_not_be_found: i2(6386, 3, "Performance_timings_for_diagnostics_or_extendedDiagnostics_are_not_available_in_this_session_A_nativ_6386", "Performance timings for '--diagnostics' or '--extendedDiagnostics' are not available in this session. A native implementation of the Web Performance API could not be found."), The_signature_0_of_1_is_deprecated: i2(6387, 2, "The_signature_0_of_1_is_deprecated_6387", "The signature '{0}' of '{1}' is deprecated.", void 0, void 0, true), Project_0_is_being_forcibly_rebuilt: i2(6388, 3, "Project_0_is_being_forcibly_rebuilt_6388", "Project '{0}' is being forcibly rebuilt"), Reusing_resolution_of_module_0_from_1_of_old_program_it_was_not_resolved: i2(6389, 3, "Reusing_resolution_of_module_0_from_1_of_old_program_it_was_not_resolved_6389", "Reusing resolution of module '{0}' from '{1}' of old program, it was not resolved."), Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved_to_2: i2(6390, 3, "Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved__6390", "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was successfully resolved to '{2}'."), Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved_to_2_with_Package_ID_3: i2(6391, 3, "Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_successfully_resolved__6391", "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was successfully resolved to '{2}' with Package ID '{3}'."), Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_not_resolved: i2(6392, 3, "Reusing_resolution_of_type_reference_directive_0_from_1_of_old_program_it_was_not_resolved_6392", "Reusing resolution of type reference directive '{0}' from '{1}' of old program, it was not resolved."), Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3: i2(6393, 3, "Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_6393", "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}'."), Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3_with_Package_ID_4: i2(6394, 3, "Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_6394", "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}' with Package ID '{4}'."), Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_not_resolved: i2(6395, 3, "Reusing_resolution_of_module_0_from_1_found_in_cache_from_location_2_it_was_not_resolved_6395", "Reusing resolution of module '{0}' from '{1}' found in cache from location '{2}', it was not resolved."), Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3: i2(6396, 3, "Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_succes_6396", "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}'."), Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_successfully_resolved_to_3_with_Package_ID_4: i2(6397, 3, "Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_succes_6397", "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was successfully resolved to '{3}' with Package ID '{4}'."), Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_not_resolved: i2(6398, 3, "Reusing_resolution_of_type_reference_directive_0_from_1_found_in_cache_from_location_2_it_was_not_re_6398", "Reusing resolution of type reference directive '{0}' from '{1}' found in cache from location '{2}', it was not resolved."), Project_0_is_out_of_date_because_buildinfo_file_1_indicates_that_some_of_the_changes_were_not_emitted: i2(6399, 3, "Project_0_is_out_of_date_because_buildinfo_file_1_indicates_that_some_of_the_changes_were_not_emitte_6399", "Project '{0}' is out of date because buildinfo file '{1}' indicates that some of the changes were not emitted"), Project_0_is_up_to_date_but_needs_to_update_timestamps_of_output_files_that_are_older_than_input_files: i2(6400, 3, "Project_0_is_up_to_date_but_needs_to_update_timestamps_of_output_files_that_are_older_than_input_fil_6400", "Project '{0}' is up to date but needs to update timestamps of output files that are older than input files"), Project_0_is_out_of_date_because_there_was_error_reading_file_1: i2(6401, 3, "Project_0_is_out_of_date_because_there_was_error_reading_file_1_6401", "Project '{0}' is out of date because there was error reading file '{1}'"), Resolving_in_0_mode_with_conditions_1: i2(6402, 3, "Resolving_in_0_mode_with_conditions_1_6402", "Resolving in {0} mode with conditions {1}."), Matched_0_condition_1: i2(6403, 3, "Matched_0_condition_1_6403", "Matched '{0}' condition '{1}'."), Using_0_subpath_1_with_target_2: i2(6404, 3, "Using_0_subpath_1_with_target_2_6404", "Using '{0}' subpath '{1}' with target '{2}'."), Saw_non_matching_condition_0: i2(6405, 3, "Saw_non_matching_condition_0_6405", "Saw non-matching condition '{0}'."), Project_0_is_out_of_date_because_buildinfo_file_1_indicates_there_is_change_in_compilerOptions: i2(6406, 3, "Project_0_is_out_of_date_because_buildinfo_file_1_indicates_there_is_change_in_compilerOptions_6406", "Project '{0}' is out of date because buildinfo file '{1}' indicates there is change in compilerOptions"), Allow_imports_to_include_TypeScript_file_extensions_Requires_moduleResolution_bundler_and_either_noEmit_or_emitDeclarationOnly_to_be_set: i2(6407, 3, "Allow_imports_to_include_TypeScript_file_extensions_Requires_moduleResolution_bundler_and_either_noE_6407", "Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set."), Use_the_package_json_exports_field_when_resolving_package_imports: i2(6408, 3, "Use_the_package_json_exports_field_when_resolving_package_imports_6408", "Use the package.json 'exports' field when resolving package imports."), Use_the_package_json_imports_field_when_resolving_imports: i2(6409, 3, "Use_the_package_json_imports_field_when_resolving_imports_6409", "Use the package.json 'imports' field when resolving imports."), Conditions_to_set_in_addition_to_the_resolver_specific_defaults_when_resolving_imports: i2(6410, 3, "Conditions_to_set_in_addition_to_the_resolver_specific_defaults_when_resolving_imports_6410", "Conditions to set in addition to the resolver-specific defaults when resolving imports."), true_when_moduleResolution_is_node16_nodenext_or_bundler_otherwise_false: i2(6411, 3, "true_when_moduleResolution_is_node16_nodenext_or_bundler_otherwise_false_6411", "`true` when 'moduleResolution' is 'node16', 'nodenext', or 'bundler'; otherwise `false`."), Project_0_is_out_of_date_because_buildinfo_file_1_indicates_that_file_2_was_root_file_of_compilation_but_not_any_more: i2(6412, 3, "Project_0_is_out_of_date_because_buildinfo_file_1_indicates_that_file_2_was_root_file_of_compilation_6412", "Project '{0}' is out of date because buildinfo file '{1}' indicates that file '{2}' was root file of compilation but not any more."), Entering_conditional_exports: i2(6413, 3, "Entering_conditional_exports_6413", "Entering conditional exports."), Resolved_under_condition_0: i2(6414, 3, "Resolved_under_condition_0_6414", "Resolved under condition '{0}'."), Failed_to_resolve_under_condition_0: i2(6415, 3, "Failed_to_resolve_under_condition_0_6415", "Failed to resolve under condition '{0}'."), Exiting_conditional_exports: i2(6416, 3, "Exiting_conditional_exports_6416", "Exiting conditional exports."), The_expected_type_comes_from_property_0_which_is_declared_here_on_type_1: i2(6500, 3, "The_expected_type_comes_from_property_0_which_is_declared_here_on_type_1_6500", "The expected type comes from property '{0}' which is declared here on type '{1}'"), The_expected_type_comes_from_this_index_signature: i2(6501, 3, "The_expected_type_comes_from_this_index_signature_6501", "The expected type comes from this index signature."), The_expected_type_comes_from_the_return_type_of_this_signature: i2(6502, 3, "The_expected_type_comes_from_the_return_type_of_this_signature_6502", "The expected type comes from the return type of this signature."), Print_names_of_files_that_are_part_of_the_compilation_and_then_stop_processing: i2(6503, 3, "Print_names_of_files_that_are_part_of_the_compilation_and_then_stop_processing_6503", "Print names of files that are part of the compilation and then stop processing."), File_0_is_a_JavaScript_file_Did_you_mean_to_enable_the_allowJs_option: i2(6504, 1, "File_0_is_a_JavaScript_file_Did_you_mean_to_enable_the_allowJs_option_6504", "File '{0}' is a JavaScript file. Did you mean to enable the 'allowJs' option?"), Print_names_of_files_and_the_reason_they_are_part_of_the_compilation: i2(6505, 3, "Print_names_of_files_and_the_reason_they_are_part_of_the_compilation_6505", "Print names of files and the reason they are part of the compilation."), Consider_adding_a_declare_modifier_to_this_class: i2(6506, 3, "Consider_adding_a_declare_modifier_to_this_class_6506", "Consider adding a 'declare' modifier to this class."), Allow_JavaScript_files_to_be_a_part_of_your_program_Use_the_checkJS_option_to_get_errors_from_these_files: i2(6600, 3, "Allow_JavaScript_files_to_be_a_part_of_your_program_Use_the_checkJS_option_to_get_errors_from_these__6600", "Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files."), Allow_import_x_from_y_when_a_module_doesn_t_have_a_default_export: i2(6601, 3, "Allow_import_x_from_y_when_a_module_doesn_t_have_a_default_export_6601", "Allow 'import x from y' when a module doesn't have a default export."), Allow_accessing_UMD_globals_from_modules: i2(6602, 3, "Allow_accessing_UMD_globals_from_modules_6602", "Allow accessing UMD globals from modules."), Disable_error_reporting_for_unreachable_code: i2(6603, 3, "Disable_error_reporting_for_unreachable_code_6603", "Disable error reporting for unreachable code."), Disable_error_reporting_for_unused_labels: i2(6604, 3, "Disable_error_reporting_for_unused_labels_6604", "Disable error reporting for unused labels."), Ensure_use_strict_is_always_emitted: i2(6605, 3, "Ensure_use_strict_is_always_emitted_6605", "Ensure 'use strict' is always emitted."), Have_recompiles_in_projects_that_use_incremental_and_watch_mode_assume_that_changes_within_a_file_will_only_affect_files_directly_depending_on_it: i2(6606, 3, "Have_recompiles_in_projects_that_use_incremental_and_watch_mode_assume_that_changes_within_a_file_wi_6606", "Have recompiles in projects that use 'incremental' and 'watch' mode assume that changes within a file will only affect files directly depending on it."), Specify_the_base_directory_to_resolve_non_relative_module_names: i2(6607, 3, "Specify_the_base_directory_to_resolve_non_relative_module_names_6607", "Specify the base directory to resolve non-relative module names."), No_longer_supported_In_early_versions_manually_set_the_text_encoding_for_reading_files: i2(6608, 3, "No_longer_supported_In_early_versions_manually_set_the_text_encoding_for_reading_files_6608", "No longer supported. In early versions, manually set the text encoding for reading files."), Enable_error_reporting_in_type_checked_JavaScript_files: i2(6609, 3, "Enable_error_reporting_in_type_checked_JavaScript_files_6609", "Enable error reporting in type-checked JavaScript files."), Enable_constraints_that_allow_a_TypeScript_project_to_be_used_with_project_references: i2(6611, 3, "Enable_constraints_that_allow_a_TypeScript_project_to_be_used_with_project_references_6611", "Enable constraints that allow a TypeScript project to be used with project references."), Generate_d_ts_files_from_TypeScript_and_JavaScript_files_in_your_project: i2(6612, 3, "Generate_d_ts_files_from_TypeScript_and_JavaScript_files_in_your_project_6612", "Generate .d.ts files from TypeScript and JavaScript files in your project."), Specify_the_output_directory_for_generated_declaration_files: i2(6613, 3, "Specify_the_output_directory_for_generated_declaration_files_6613", "Specify the output directory for generated declaration files."), Create_sourcemaps_for_d_ts_files: i2(6614, 3, "Create_sourcemaps_for_d_ts_files_6614", "Create sourcemaps for d.ts files."), Output_compiler_performance_information_after_building: i2(6615, 3, "Output_compiler_performance_information_after_building_6615", "Output compiler performance information after building."), Disables_inference_for_type_acquisition_by_looking_at_filenames_in_a_project: i2(6616, 3, "Disables_inference_for_type_acquisition_by_looking_at_filenames_in_a_project_6616", "Disables inference for type acquisition by looking at filenames in a project."), Reduce_the_number_of_projects_loaded_automatically_by_TypeScript: i2(6617, 3, "Reduce_the_number_of_projects_loaded_automatically_by_TypeScript_6617", "Reduce the number of projects loaded automatically by TypeScript."), Remove_the_20mb_cap_on_total_source_code_size_for_JavaScript_files_in_the_TypeScript_language_server: i2(6618, 3, "Remove_the_20mb_cap_on_total_source_code_size_for_JavaScript_files_in_the_TypeScript_language_server_6618", "Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server."), Opt_a_project_out_of_multi_project_reference_checking_when_editing: i2(6619, 3, "Opt_a_project_out_of_multi_project_reference_checking_when_editing_6619", "Opt a project out of multi-project reference checking when editing."), Disable_preferring_source_files_instead_of_declaration_files_when_referencing_composite_projects: i2(6620, 3, "Disable_preferring_source_files_instead_of_declaration_files_when_referencing_composite_projects_6620", "Disable preferring source files instead of declaration files when referencing composite projects."), Emit_more_compliant_but_verbose_and_less_performant_JavaScript_for_iteration: i2(6621, 3, "Emit_more_compliant_but_verbose_and_less_performant_JavaScript_for_iteration_6621", "Emit more compliant, but verbose and less performant JavaScript for iteration."), Emit_a_UTF_8_Byte_Order_Mark_BOM_in_the_beginning_of_output_files: i2(6622, 3, "Emit_a_UTF_8_Byte_Order_Mark_BOM_in_the_beginning_of_output_files_6622", "Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files."), Only_output_d_ts_files_and_not_JavaScript_files: i2(6623, 3, "Only_output_d_ts_files_and_not_JavaScript_files_6623", "Only output d.ts files and not JavaScript files."), Emit_design_type_metadata_for_decorated_declarations_in_source_files: i2(6624, 3, "Emit_design_type_metadata_for_decorated_declarations_in_source_files_6624", "Emit design-type metadata for decorated declarations in source files."), Disable_the_type_acquisition_for_JavaScript_projects: i2(6625, 3, "Disable_the_type_acquisition_for_JavaScript_projects_6625", "Disable the type acquisition for JavaScript projects"), Emit_additional_JavaScript_to_ease_support_for_importing_CommonJS_modules_This_enables_allowSyntheticDefaultImports_for_type_compatibility: i2(6626, 3, "Emit_additional_JavaScript_to_ease_support_for_importing_CommonJS_modules_This_enables_allowSyntheti_6626", "Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility."), Filters_results_from_the_include_option: i2(6627, 3, "Filters_results_from_the_include_option_6627", "Filters results from the `include` option."), Remove_a_list_of_directories_from_the_watch_process: i2(6628, 3, "Remove_a_list_of_directories_from_the_watch_process_6628", "Remove a list of directories from the watch process."), Remove_a_list_of_files_from_the_watch_mode_s_processing: i2(6629, 3, "Remove_a_list_of_files_from_the_watch_mode_s_processing_6629", "Remove a list of files from the watch mode's processing."), Enable_experimental_support_for_legacy_experimental_decorators: i2(6630, 3, "Enable_experimental_support_for_legacy_experimental_decorators_6630", "Enable experimental support for legacy experimental decorators."), Print_files_read_during_the_compilation_including_why_it_was_included: i2(6631, 3, "Print_files_read_during_the_compilation_including_why_it_was_included_6631", "Print files read during the compilation including why it was included."), Output_more_detailed_compiler_performance_information_after_building: i2(6632, 3, "Output_more_detailed_compiler_performance_information_after_building_6632", "Output more detailed compiler performance information after building."), Specify_one_or_more_path_or_node_module_references_to_base_configuration_files_from_which_settings_are_inherited: i2(6633, 3, "Specify_one_or_more_path_or_node_module_references_to_base_configuration_files_from_which_settings_a_6633", "Specify one or more path or node module references to base configuration files from which settings are inherited."), Specify_what_approach_the_watcher_should_use_if_the_system_runs_out_of_native_file_watchers: i2(6634, 3, "Specify_what_approach_the_watcher_should_use_if_the_system_runs_out_of_native_file_watchers_6634", "Specify what approach the watcher should use if the system runs out of native file watchers."), Include_a_list_of_files_This_does_not_support_glob_patterns_as_opposed_to_include: i2(6635, 3, "Include_a_list_of_files_This_does_not_support_glob_patterns_as_opposed_to_include_6635", "Include a list of files. This does not support glob patterns, as opposed to `include`."), Build_all_projects_including_those_that_appear_to_be_up_to_date: i2(6636, 3, "Build_all_projects_including_those_that_appear_to_be_up_to_date_6636", "Build all projects, including those that appear to be up to date."), Ensure_that_casing_is_correct_in_imports: i2(6637, 3, "Ensure_that_casing_is_correct_in_imports_6637", "Ensure that casing is correct in imports."), Emit_a_v8_CPU_profile_of_the_compiler_run_for_debugging: i2(6638, 3, "Emit_a_v8_CPU_profile_of_the_compiler_run_for_debugging_6638", "Emit a v8 CPU profile of the compiler run for debugging."), Allow_importing_helper_functions_from_tslib_once_per_project_instead_of_including_them_per_file: i2(6639, 3, "Allow_importing_helper_functions_from_tslib_once_per_project_instead_of_including_them_per_file_6639", "Allow importing helper functions from tslib once per project, instead of including them per-file."), Specify_a_list_of_glob_patterns_that_match_files_to_be_included_in_compilation: i2(6641, 3, "Specify_a_list_of_glob_patterns_that_match_files_to_be_included_in_compilation_6641", "Specify a list of glob patterns that match files to be included in compilation."), Save_tsbuildinfo_files_to_allow_for_incremental_compilation_of_projects: i2(6642, 3, "Save_tsbuildinfo_files_to_allow_for_incremental_compilation_of_projects_6642", "Save .tsbuildinfo files to allow for incremental compilation of projects."), Include_sourcemap_files_inside_the_emitted_JavaScript: i2(6643, 3, "Include_sourcemap_files_inside_the_emitted_JavaScript_6643", "Include sourcemap files inside the emitted JavaScript."), Include_source_code_in_the_sourcemaps_inside_the_emitted_JavaScript: i2(6644, 3, "Include_source_code_in_the_sourcemaps_inside_the_emitted_JavaScript_6644", "Include source code in the sourcemaps inside the emitted JavaScript."), Ensure_that_each_file_can_be_safely_transpiled_without_relying_on_other_imports: i2(6645, 3, "Ensure_that_each_file_can_be_safely_transpiled_without_relying_on_other_imports_6645", "Ensure that each file can be safely transpiled without relying on other imports."), Specify_what_JSX_code_is_generated: i2(6646, 3, "Specify_what_JSX_code_is_generated_6646", "Specify what JSX code is generated."), Specify_the_JSX_factory_function_used_when_targeting_React_JSX_emit_e_g_React_createElement_or_h: i2(6647, 3, "Specify_the_JSX_factory_function_used_when_targeting_React_JSX_emit_e_g_React_createElement_or_h_6647", "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'."), Specify_the_JSX_Fragment_reference_used_for_fragments_when_targeting_React_JSX_emit_e_g_React_Fragment_or_Fragment: i2(6648, 3, "Specify_the_JSX_Fragment_reference_used_for_fragments_when_targeting_React_JSX_emit_e_g_React_Fragme_6648", "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'."), Specify_module_specifier_used_to_import_the_JSX_factory_functions_when_using_jsx_Colon_react_jsx_Asterisk: i2(6649, 3, "Specify_module_specifier_used_to_import_the_JSX_factory_functions_when_using_jsx_Colon_react_jsx_Ast_6649", "Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'."), Make_keyof_only_return_strings_instead_of_string_numbers_or_symbols_Legacy_option: i2(6650, 3, "Make_keyof_only_return_strings_instead_of_string_numbers_or_symbols_Legacy_option_6650", "Make keyof only return strings instead of string, numbers or symbols. Legacy option."), Specify_a_set_of_bundled_library_declaration_files_that_describe_the_target_runtime_environment: i2(6651, 3, "Specify_a_set_of_bundled_library_declaration_files_that_describe_the_target_runtime_environment_6651", "Specify a set of bundled library declaration files that describe the target runtime environment."), Print_the_names_of_emitted_files_after_a_compilation: i2(6652, 3, "Print_the_names_of_emitted_files_after_a_compilation_6652", "Print the names of emitted files after a compilation."), Print_all_of_the_files_read_during_the_compilation: i2(6653, 3, "Print_all_of_the_files_read_during_the_compilation_6653", "Print all of the files read during the compilation."), Set_the_language_of_the_messaging_from_TypeScript_This_does_not_affect_emit: i2(6654, 3, "Set_the_language_of_the_messaging_from_TypeScript_This_does_not_affect_emit_6654", "Set the language of the messaging from TypeScript. This does not affect emit."), Specify_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations: i2(6655, 3, "Specify_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations_6655", "Specify the location where debugger should locate map files instead of generated locations."), Specify_the_maximum_folder_depth_used_for_checking_JavaScript_files_from_node_modules_Only_applicable_with_allowJs: i2(6656, 3, "Specify_the_maximum_folder_depth_used_for_checking_JavaScript_files_from_node_modules_Only_applicabl_6656", "Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'."), Specify_what_module_code_is_generated: i2(6657, 3, "Specify_what_module_code_is_generated_6657", "Specify what module code is generated."), Specify_how_TypeScript_looks_up_a_file_from_a_given_module_specifier: i2(6658, 3, "Specify_how_TypeScript_looks_up_a_file_from_a_given_module_specifier_6658", "Specify how TypeScript looks up a file from a given module specifier."), Set_the_newline_character_for_emitting_files: i2(6659, 3, "Set_the_newline_character_for_emitting_files_6659", "Set the newline character for emitting files."), Disable_emitting_files_from_a_compilation: i2(6660, 3, "Disable_emitting_files_from_a_compilation_6660", "Disable emitting files from a compilation."), Disable_generating_custom_helper_functions_like_extends_in_compiled_output: i2(6661, 3, "Disable_generating_custom_helper_functions_like_extends_in_compiled_output_6661", "Disable generating custom helper functions like '__extends' in compiled output."), Disable_emitting_files_if_any_type_checking_errors_are_reported: i2(6662, 3, "Disable_emitting_files_if_any_type_checking_errors_are_reported_6662", "Disable emitting files if any type checking errors are reported."), Disable_truncating_types_in_error_messages: i2(6663, 3, "Disable_truncating_types_in_error_messages_6663", "Disable truncating types in error messages."), Enable_error_reporting_for_fallthrough_cases_in_switch_statements: i2(6664, 3, "Enable_error_reporting_for_fallthrough_cases_in_switch_statements_6664", "Enable error reporting for fallthrough cases in switch statements."), Enable_error_reporting_for_expressions_and_declarations_with_an_implied_any_type: i2(6665, 3, "Enable_error_reporting_for_expressions_and_declarations_with_an_implied_any_type_6665", "Enable error reporting for expressions and declarations with an implied 'any' type."), Ensure_overriding_members_in_derived_classes_are_marked_with_an_override_modifier: i2(6666, 3, "Ensure_overriding_members_in_derived_classes_are_marked_with_an_override_modifier_6666", "Ensure overriding members in derived classes are marked with an override modifier."), Enable_error_reporting_for_codepaths_that_do_not_explicitly_return_in_a_function: i2(6667, 3, "Enable_error_reporting_for_codepaths_that_do_not_explicitly_return_in_a_function_6667", "Enable error reporting for codepaths that do not explicitly return in a function."), Enable_error_reporting_when_this_is_given_the_type_any: i2(6668, 3, "Enable_error_reporting_when_this_is_given_the_type_any_6668", "Enable error reporting when 'this' is given the type 'any'."), Disable_adding_use_strict_directives_in_emitted_JavaScript_files: i2(6669, 3, "Disable_adding_use_strict_directives_in_emitted_JavaScript_files_6669", "Disable adding 'use strict' directives in emitted JavaScript files."), Disable_including_any_library_files_including_the_default_lib_d_ts: i2(6670, 3, "Disable_including_any_library_files_including_the_default_lib_d_ts_6670", "Disable including any library files, including the default lib.d.ts."), Enforces_using_indexed_accessors_for_keys_declared_using_an_indexed_type: i2(6671, 3, "Enforces_using_indexed_accessors_for_keys_declared_using_an_indexed_type_6671", "Enforces using indexed accessors for keys declared using an indexed type."), Disallow_import_s_require_s_or_reference_s_from_expanding_the_number_of_files_TypeScript_should_add_to_a_project: i2(6672, 3, "Disallow_import_s_require_s_or_reference_s_from_expanding_the_number_of_files_TypeScript_should_add__6672", "Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project."), Disable_strict_checking_of_generic_signatures_in_function_types: i2(6673, 3, "Disable_strict_checking_of_generic_signatures_in_function_types_6673", "Disable strict checking of generic signatures in function types."), Add_undefined_to_a_type_when_accessed_using_an_index: i2(6674, 3, "Add_undefined_to_a_type_when_accessed_using_an_index_6674", "Add 'undefined' to a type when accessed using an index."), Enable_error_reporting_when_local_variables_aren_t_read: i2(6675, 3, "Enable_error_reporting_when_local_variables_aren_t_read_6675", "Enable error reporting when local variables aren't read."), Raise_an_error_when_a_function_parameter_isn_t_read: i2(6676, 3, "Raise_an_error_when_a_function_parameter_isn_t_read_6676", "Raise an error when a function parameter isn't read."), Deprecated_setting_Use_outFile_instead: i2(6677, 3, "Deprecated_setting_Use_outFile_instead_6677", "Deprecated setting. Use 'outFile' instead."), Specify_an_output_folder_for_all_emitted_files: i2(6678, 3, "Specify_an_output_folder_for_all_emitted_files_6678", "Specify an output folder for all emitted files."), Specify_a_file_that_bundles_all_outputs_into_one_JavaScript_file_If_declaration_is_true_also_designates_a_file_that_bundles_all_d_ts_output: i2(6679, 3, "Specify_a_file_that_bundles_all_outputs_into_one_JavaScript_file_If_declaration_is_true_also_designa_6679", "Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output."), Specify_a_set_of_entries_that_re_map_imports_to_additional_lookup_locations: i2(6680, 3, "Specify_a_set_of_entries_that_re_map_imports_to_additional_lookup_locations_6680", "Specify a set of entries that re-map imports to additional lookup locations."), Specify_a_list_of_language_service_plugins_to_include: i2(6681, 3, "Specify_a_list_of_language_service_plugins_to_include_6681", "Specify a list of language service plugins to include."), Disable_erasing_const_enum_declarations_in_generated_code: i2(6682, 3, "Disable_erasing_const_enum_declarations_in_generated_code_6682", "Disable erasing 'const enum' declarations in generated code."), Disable_resolving_symlinks_to_their_realpath_This_correlates_to_the_same_flag_in_node: i2(6683, 3, "Disable_resolving_symlinks_to_their_realpath_This_correlates_to_the_same_flag_in_node_6683", "Disable resolving symlinks to their realpath. This correlates to the same flag in node."), Disable_wiping_the_console_in_watch_mode: i2(6684, 3, "Disable_wiping_the_console_in_watch_mode_6684", "Disable wiping the console in watch mode."), Enable_color_and_formatting_in_TypeScript_s_output_to_make_compiler_errors_easier_to_read: i2(6685, 3, "Enable_color_and_formatting_in_TypeScript_s_output_to_make_compiler_errors_easier_to_read_6685", "Enable color and formatting in TypeScript's output to make compiler errors easier to read."), Specify_the_object_invoked_for_createElement_This_only_applies_when_targeting_react_JSX_emit: i2(6686, 3, "Specify_the_object_invoked_for_createElement_This_only_applies_when_targeting_react_JSX_emit_6686", "Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit."), Specify_an_array_of_objects_that_specify_paths_for_projects_Used_in_project_references: i2(6687, 3, "Specify_an_array_of_objects_that_specify_paths_for_projects_Used_in_project_references_6687", "Specify an array of objects that specify paths for projects. Used in project references."), Disable_emitting_comments: i2(6688, 3, "Disable_emitting_comments_6688", "Disable emitting comments."), Enable_importing_json_files: i2(6689, 3, "Enable_importing_json_files_6689", "Enable importing .json files."), Specify_the_root_folder_within_your_source_files: i2(6690, 3, "Specify_the_root_folder_within_your_source_files_6690", "Specify the root folder within your source files."), Allow_multiple_folders_to_be_treated_as_one_when_resolving_modules: i2(6691, 3, "Allow_multiple_folders_to_be_treated_as_one_when_resolving_modules_6691", "Allow multiple folders to be treated as one when resolving modules."), Skip_type_checking_d_ts_files_that_are_included_with_TypeScript: i2(6692, 3, "Skip_type_checking_d_ts_files_that_are_included_with_TypeScript_6692", "Skip type checking .d.ts files that are included with TypeScript."), Skip_type_checking_all_d_ts_files: i2(6693, 3, "Skip_type_checking_all_d_ts_files_6693", "Skip type checking all .d.ts files."), Create_source_map_files_for_emitted_JavaScript_files: i2(6694, 3, "Create_source_map_files_for_emitted_JavaScript_files_6694", "Create source map files for emitted JavaScript files."), Specify_the_root_path_for_debuggers_to_find_the_reference_source_code: i2(6695, 3, "Specify_the_root_path_for_debuggers_to_find_the_reference_source_code_6695", "Specify the root path for debuggers to find the reference source code."), Check_that_the_arguments_for_bind_call_and_apply_methods_match_the_original_function: i2(6697, 3, "Check_that_the_arguments_for_bind_call_and_apply_methods_match_the_original_function_6697", "Check that the arguments for 'bind', 'call', and 'apply' methods match the original function."), When_assigning_functions_check_to_ensure_parameters_and_the_return_values_are_subtype_compatible: i2(6698, 3, "When_assigning_functions_check_to_ensure_parameters_and_the_return_values_are_subtype_compatible_6698", "When assigning functions, check to ensure parameters and the return values are subtype-compatible."), When_type_checking_take_into_account_null_and_undefined: i2(6699, 3, "When_type_checking_take_into_account_null_and_undefined_6699", "When type checking, take into account 'null' and 'undefined'."), Check_for_class_properties_that_are_declared_but_not_set_in_the_constructor: i2(6700, 3, "Check_for_class_properties_that_are_declared_but_not_set_in_the_constructor_6700", "Check for class properties that are declared but not set in the constructor."), Disable_emitting_declarations_that_have_internal_in_their_JSDoc_comments: i2(6701, 3, "Disable_emitting_declarations_that_have_internal_in_their_JSDoc_comments_6701", "Disable emitting declarations that have '@internal' in their JSDoc comments."), Disable_reporting_of_excess_property_errors_during_the_creation_of_object_literals: i2(6702, 3, "Disable_reporting_of_excess_property_errors_during_the_creation_of_object_literals_6702", "Disable reporting of excess property errors during the creation of object literals."), Suppress_noImplicitAny_errors_when_indexing_objects_that_lack_index_signatures: i2(6703, 3, "Suppress_noImplicitAny_errors_when_indexing_objects_that_lack_index_signatures_6703", "Suppress 'noImplicitAny' errors when indexing objects that lack index signatures."), Synchronously_call_callbacks_and_update_the_state_of_directory_watchers_on_platforms_that_don_t_support_recursive_watching_natively: i2(6704, 3, "Synchronously_call_callbacks_and_update_the_state_of_directory_watchers_on_platforms_that_don_t_supp_6704", "Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively."), Set_the_JavaScript_language_version_for_emitted_JavaScript_and_include_compatible_library_declarations: i2(6705, 3, "Set_the_JavaScript_language_version_for_emitted_JavaScript_and_include_compatible_library_declaratio_6705", "Set the JavaScript language version for emitted JavaScript and include compatible library declarations."), Log_paths_used_during_the_moduleResolution_process: i2(6706, 3, "Log_paths_used_during_the_moduleResolution_process_6706", "Log paths used during the 'moduleResolution' process."), Specify_the_path_to_tsbuildinfo_incremental_compilation_file: i2(6707, 3, "Specify_the_path_to_tsbuildinfo_incremental_compilation_file_6707", "Specify the path to .tsbuildinfo incremental compilation file."), Specify_options_for_automatic_acquisition_of_declaration_files: i2(6709, 3, "Specify_options_for_automatic_acquisition_of_declaration_files_6709", "Specify options for automatic acquisition of declaration files."), Specify_multiple_folders_that_act_like_Slashnode_modules_Slash_types: i2(6710, 3, "Specify_multiple_folders_that_act_like_Slashnode_modules_Slash_types_6710", "Specify multiple folders that act like './node_modules/@types'."), Specify_type_package_names_to_be_included_without_being_referenced_in_a_source_file: i2(6711, 3, "Specify_type_package_names_to_be_included_without_being_referenced_in_a_source_file_6711", "Specify type package names to be included without being referenced in a source file."), Emit_ECMAScript_standard_compliant_class_fields: i2(6712, 3, "Emit_ECMAScript_standard_compliant_class_fields_6712", "Emit ECMAScript-standard-compliant class fields."), Enable_verbose_logging: i2(6713, 3, "Enable_verbose_logging_6713", "Enable verbose logging."), Specify_how_directories_are_watched_on_systems_that_lack_recursive_file_watching_functionality: i2(6714, 3, "Specify_how_directories_are_watched_on_systems_that_lack_recursive_file_watching_functionality_6714", "Specify how directories are watched on systems that lack recursive file-watching functionality."), Specify_how_the_TypeScript_watch_mode_works: i2(6715, 3, "Specify_how_the_TypeScript_watch_mode_works_6715", "Specify how the TypeScript watch mode works."), Require_undeclared_properties_from_index_signatures_to_use_element_accesses: i2(6717, 3, "Require_undeclared_properties_from_index_signatures_to_use_element_accesses_6717", "Require undeclared properties from index signatures to use element accesses."), Specify_emit_Slashchecking_behavior_for_imports_that_are_only_used_for_types: i2(6718, 3, "Specify_emit_Slashchecking_behavior_for_imports_that_are_only_used_for_types_6718", "Specify emit/checking behavior for imports that are only used for types."), Default_catch_clause_variables_as_unknown_instead_of_any: i2(6803, 3, "Default_catch_clause_variables_as_unknown_instead_of_any_6803", "Default catch clause variables as 'unknown' instead of 'any'."), Do_not_transform_or_elide_any_imports_or_exports_not_marked_as_type_only_ensuring_they_are_written_in_the_output_file_s_format_based_on_the_module_setting: i2(6804, 3, "Do_not_transform_or_elide_any_imports_or_exports_not_marked_as_type_only_ensuring_they_are_written_i_6804", "Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting."), one_of_Colon: i2(6900, 3, "one_of_Colon_6900", "one of:"), one_or_more_Colon: i2(6901, 3, "one_or_more_Colon_6901", "one or more:"), type_Colon: i2(6902, 3, "type_Colon_6902", "type:"), default_Colon: i2(6903, 3, "default_Colon_6903", "default:"), module_system_or_esModuleInterop: i2(6904, 3, "module_system_or_esModuleInterop_6904", 'module === "system" or esModuleInterop'), false_unless_strict_is_set: i2(6905, 3, "false_unless_strict_is_set_6905", "`false`, unless `strict` is set"), false_unless_composite_is_set: i2(6906, 3, "false_unless_composite_is_set_6906", "`false`, unless `composite` is set"), node_modules_bower_components_jspm_packages_plus_the_value_of_outDir_if_one_is_specified: i2(6907, 3, "node_modules_bower_components_jspm_packages_plus_the_value_of_outDir_if_one_is_specified_6907", '`["node_modules", "bower_components", "jspm_packages"]`, plus the value of `outDir` if one is specified.'), if_files_is_specified_otherwise_Asterisk_Asterisk_Slash_Asterisk: i2(6908, 3, "if_files_is_specified_otherwise_Asterisk_Asterisk_Slash_Asterisk_6908", '`[]` if `files` is specified, otherwise `["**/*"]`'), true_if_composite_false_otherwise: i2(6909, 3, "true_if_composite_false_otherwise_6909", "`true` if `composite`, `false` otherwise"), module_AMD_or_UMD_or_System_or_ES6_then_Classic_Otherwise_Node: i2(69010, 3, "module_AMD_or_UMD_or_System_or_ES6_then_Classic_Otherwise_Node_69010", "module === `AMD` or `UMD` or `System` or `ES6`, then `Classic`, Otherwise `Node`"), Computed_from_the_list_of_input_files: i2(6911, 3, "Computed_from_the_list_of_input_files_6911", "Computed from the list of input files"), Platform_specific: i2(6912, 3, "Platform_specific_6912", "Platform specific"), You_can_learn_about_all_of_the_compiler_options_at_0: i2(6913, 3, "You_can_learn_about_all_of_the_compiler_options_at_0_6913", "You can learn about all of the compiler options at {0}"), Including_watch_w_will_start_watching_the_current_project_for_the_file_changes_Once_set_you_can_config_watch_mode_with_Colon: i2(6914, 3, "Including_watch_w_will_start_watching_the_current_project_for_the_file_changes_Once_set_you_can_conf_6914", "Including --watch, -w will start watching the current project for the file changes. Once set, you can config watch mode with:"), Using_build_b_will_make_tsc_behave_more_like_a_build_orchestrator_than_a_compiler_This_is_used_to_trigger_building_composite_projects_which_you_can_learn_more_about_at_0: i2(6915, 3, "Using_build_b_will_make_tsc_behave_more_like_a_build_orchestrator_than_a_compiler_This_is_used_to_tr_6915", "Using --build, -b will make tsc behave more like a build orchestrator than a compiler. This is used to trigger building composite projects which you can learn more about at {0}"), COMMON_COMMANDS: i2(6916, 3, "COMMON_COMMANDS_6916", "COMMON COMMANDS"), ALL_COMPILER_OPTIONS: i2(6917, 3, "ALL_COMPILER_OPTIONS_6917", "ALL COMPILER OPTIONS"), WATCH_OPTIONS: i2(6918, 3, "WATCH_OPTIONS_6918", "WATCH OPTIONS"), BUILD_OPTIONS: i2(6919, 3, "BUILD_OPTIONS_6919", "BUILD OPTIONS"), COMMON_COMPILER_OPTIONS: i2(6920, 3, "COMMON_COMPILER_OPTIONS_6920", "COMMON COMPILER OPTIONS"), COMMAND_LINE_FLAGS: i2(6921, 3, "COMMAND_LINE_FLAGS_6921", "COMMAND LINE FLAGS"), tsc_Colon_The_TypeScript_Compiler: i2(6922, 3, "tsc_Colon_The_TypeScript_Compiler_6922", "tsc: The TypeScript Compiler"), Compiles_the_current_project_tsconfig_json_in_the_working_directory: i2(6923, 3, "Compiles_the_current_project_tsconfig_json_in_the_working_directory_6923", "Compiles the current project (tsconfig.json in the working directory.)"), Ignoring_tsconfig_json_compiles_the_specified_files_with_default_compiler_options: i2(6924, 3, "Ignoring_tsconfig_json_compiles_the_specified_files_with_default_compiler_options_6924", "Ignoring tsconfig.json, compiles the specified files with default compiler options."), Build_a_composite_project_in_the_working_directory: i2(6925, 3, "Build_a_composite_project_in_the_working_directory_6925", "Build a composite project in the working directory."), Creates_a_tsconfig_json_with_the_recommended_settings_in_the_working_directory: i2(6926, 3, "Creates_a_tsconfig_json_with_the_recommended_settings_in_the_working_directory_6926", "Creates a tsconfig.json with the recommended settings in the working directory."), Compiles_the_TypeScript_project_located_at_the_specified_path: i2(6927, 3, "Compiles_the_TypeScript_project_located_at_the_specified_path_6927", "Compiles the TypeScript project located at the specified path."), An_expanded_version_of_this_information_showing_all_possible_compiler_options: i2(6928, 3, "An_expanded_version_of_this_information_showing_all_possible_compiler_options_6928", "An expanded version of this information, showing all possible compiler options"), Compiles_the_current_project_with_additional_settings: i2(6929, 3, "Compiles_the_current_project_with_additional_settings_6929", "Compiles the current project, with additional settings."), true_for_ES2022_and_above_including_ESNext: i2(6930, 3, "true_for_ES2022_and_above_including_ESNext_6930", "`true` for ES2022 and above, including ESNext."), List_of_file_name_suffixes_to_search_when_resolving_a_module: i2(6931, 1, "List_of_file_name_suffixes_to_search_when_resolving_a_module_6931", "List of file name suffixes to search when resolving a module."), Variable_0_implicitly_has_an_1_type: i2(7005, 1, "Variable_0_implicitly_has_an_1_type_7005", "Variable '{0}' implicitly has an '{1}' type."), Parameter_0_implicitly_has_an_1_type: i2(7006, 1, "Parameter_0_implicitly_has_an_1_type_7006", "Parameter '{0}' implicitly has an '{1}' type."), Member_0_implicitly_has_an_1_type: i2(7008, 1, "Member_0_implicitly_has_an_1_type_7008", "Member '{0}' implicitly has an '{1}' type."), new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type: i2(7009, 1, "new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type_7009", "'new' expression, whose target lacks a construct signature, implicitly has an 'any' type."), _0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type: i2(7010, 1, "_0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type_7010", "'{0}', which lacks return-type annotation, implicitly has an '{1}' return type."), Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type: i2(7011, 1, "Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type_7011", "Function expression, which lacks return-type annotation, implicitly has an '{0}' return type."), This_overload_implicitly_returns_the_type_0_because_it_lacks_a_return_type_annotation: i2(7012, 1, "This_overload_implicitly_returns_the_type_0_because_it_lacks_a_return_type_annotation_7012", "This overload implicitly returns the type '{0}' because it lacks a return type annotation."), Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: i2(7013, 1, "Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type_7013", "Construct signature, which lacks return-type annotation, implicitly has an 'any' return type."), Function_type_which_lacks_return_type_annotation_implicitly_has_an_0_return_type: i2(7014, 1, "Function_type_which_lacks_return_type_annotation_implicitly_has_an_0_return_type_7014", "Function type, which lacks return-type annotation, implicitly has an '{0}' return type."), Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number: i2(7015, 1, "Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number_7015", "Element implicitly has an 'any' type because index expression is not of type 'number'."), Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type: i2(7016, 1, "Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type_7016", "Could not find a declaration file for module '{0}'. '{1}' implicitly has an 'any' type."), Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature: i2(7017, 1, "Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_7017", "Element implicitly has an 'any' type because type '{0}' has no index signature."), Object_literal_s_property_0_implicitly_has_an_1_type: i2(7018, 1, "Object_literal_s_property_0_implicitly_has_an_1_type_7018", "Object literal's property '{0}' implicitly has an '{1}' type."), Rest_parameter_0_implicitly_has_an_any_type: i2(7019, 1, "Rest_parameter_0_implicitly_has_an_any_type_7019", "Rest parameter '{0}' implicitly has an 'any[]' type."), Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: i2(7020, 1, "Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type_7020", "Call signature, which lacks return-type annotation, implicitly has an 'any' return type."), _0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer: i2(7022, 1, "_0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or__7022", "'{0}' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer."), _0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: i2(7023, 1, "_0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_reference_7023", "'{0}' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions."), Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: i2(7024, 1, "Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_ref_7024", "Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions."), Generator_implicitly_has_yield_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type_annotation: i2(7025, 1, "Generator_implicitly_has_yield_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_retu_7025", "Generator implicitly has yield type '{0}' because it does not yield any values. Consider supplying a return type annotation."), JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists: i2(7026, 1, "JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists_7026", "JSX element implicitly has type 'any' because no interface 'JSX.{0}' exists."), Unreachable_code_detected: i2(7027, 1, "Unreachable_code_detected_7027", "Unreachable code detected.", true), Unused_label: i2(7028, 1, "Unused_label_7028", "Unused label.", true), Fallthrough_case_in_switch: i2(7029, 1, "Fallthrough_case_in_switch_7029", "Fallthrough case in switch."), Not_all_code_paths_return_a_value: i2(7030, 1, "Not_all_code_paths_return_a_value_7030", "Not all code paths return a value."), Binding_element_0_implicitly_has_an_1_type: i2(7031, 1, "Binding_element_0_implicitly_has_an_1_type_7031", "Binding element '{0}' implicitly has an '{1}' type."), Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_parameter_type_annotation: i2(7032, 1, "Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_parameter_type_annotation_7032", "Property '{0}' implicitly has type 'any', because its set accessor lacks a parameter type annotation."), Property_0_implicitly_has_type_any_because_its_get_accessor_lacks_a_return_type_annotation: i2(7033, 1, "Property_0_implicitly_has_type_any_because_its_get_accessor_lacks_a_return_type_annotation_7033", "Property '{0}' implicitly has type 'any', because its get accessor lacks a return type annotation."), Variable_0_implicitly_has_type_1_in_some_locations_where_its_type_cannot_be_determined: i2(7034, 1, "Variable_0_implicitly_has_type_1_in_some_locations_where_its_type_cannot_be_determined_7034", "Variable '{0}' implicitly has type '{1}' in some locations where its type cannot be determined."), Try_npm_i_save_dev_types_Slash_1_if_it_exists_or_add_a_new_declaration_d_ts_file_containing_declare_module_0: i2(7035, 1, "Try_npm_i_save_dev_types_Slash_1_if_it_exists_or_add_a_new_declaration_d_ts_file_containing_declare__7035", "Try `npm i --save-dev @types/{1}` if it exists or add a new declaration (.d.ts) file containing `declare module '{0}';`"), Dynamic_import_s_specifier_must_be_of_type_string_but_here_has_type_0: i2(7036, 1, "Dynamic_import_s_specifier_must_be_of_type_string_but_here_has_type_0_7036", "Dynamic import's specifier must be of type 'string', but here has type '{0}'."), Enables_emit_interoperability_between_CommonJS_and_ES_Modules_via_creation_of_namespace_objects_for_all_imports_Implies_allowSyntheticDefaultImports: i2(7037, 3, "Enables_emit_interoperability_between_CommonJS_and_ES_Modules_via_creation_of_namespace_objects_for__7037", "Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'."), Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cause_a_failure_at_runtime_Consider_using_a_default_import_or_import_require_here_instead: i2(7038, 3, "Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cau_7038", "Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead."), Mapped_object_type_implicitly_has_an_any_template_type: i2(7039, 1, "Mapped_object_type_implicitly_has_an_any_template_type_7039", "Mapped object type implicitly has an 'any' template type."), If_the_0_package_actually_exposes_this_module_consider_sending_a_pull_request_to_amend_https_Colon_Slash_Slashgithub_com_SlashDefinitelyTyped_SlashDefinitelyTyped_Slashtree_Slashmaster_Slashtypes_Slash_1: i2(7040, 1, "If_the_0_package_actually_exposes_this_module_consider_sending_a_pull_request_to_amend_https_Colon_S_7040", "If the '{0}' package actually exposes this module, consider sending a pull request to amend 'https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/{1}'"), The_containing_arrow_function_captures_the_global_value_of_this: i2(7041, 1, "The_containing_arrow_function_captures_the_global_value_of_this_7041", "The containing arrow function captures the global value of 'this'."), Module_0_was_resolved_to_1_but_resolveJsonModule_is_not_used: i2(7042, 1, "Module_0_was_resolved_to_1_but_resolveJsonModule_is_not_used_7042", "Module '{0}' was resolved to '{1}', but '--resolveJsonModule' is not used."), Variable_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage: i2(7043, 2, "Variable_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage_7043", "Variable '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage."), Parameter_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage: i2(7044, 2, "Parameter_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage_7044", "Parameter '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage."), Member_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage: i2(7045, 2, "Member_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage_7045", "Member '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage."), Variable_0_implicitly_has_type_1_in_some_locations_but_a_better_type_may_be_inferred_from_usage: i2(7046, 2, "Variable_0_implicitly_has_type_1_in_some_locations_but_a_better_type_may_be_inferred_from_usage_7046", "Variable '{0}' implicitly has type '{1}' in some locations, but a better type may be inferred from usage."), Rest_parameter_0_implicitly_has_an_any_type_but_a_better_type_may_be_inferred_from_usage: i2(7047, 2, "Rest_parameter_0_implicitly_has_an_any_type_but_a_better_type_may_be_inferred_from_usage_7047", "Rest parameter '{0}' implicitly has an 'any[]' type, but a better type may be inferred from usage."), Property_0_implicitly_has_type_any_but_a_better_type_for_its_get_accessor_may_be_inferred_from_usage: i2(7048, 2, "Property_0_implicitly_has_type_any_but_a_better_type_for_its_get_accessor_may_be_inferred_from_usage_7048", "Property '{0}' implicitly has type 'any', but a better type for its get accessor may be inferred from usage."), Property_0_implicitly_has_type_any_but_a_better_type_for_its_set_accessor_may_be_inferred_from_usage: i2(7049, 2, "Property_0_implicitly_has_type_any_but_a_better_type_for_its_set_accessor_may_be_inferred_from_usage_7049", "Property '{0}' implicitly has type 'any', but a better type for its set accessor may be inferred from usage."), _0_implicitly_has_an_1_return_type_but_a_better_type_may_be_inferred_from_usage: i2(7050, 2, "_0_implicitly_has_an_1_return_type_but_a_better_type_may_be_inferred_from_usage_7050", "'{0}' implicitly has an '{1}' return type, but a better type may be inferred from usage."), Parameter_has_a_name_but_no_type_Did_you_mean_0_Colon_1: i2(7051, 1, "Parameter_has_a_name_but_no_type_Did_you_mean_0_Colon_1_7051", "Parameter has a name but no type. Did you mean '{0}: {1}'?"), Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_Did_you_mean_to_call_1: i2(7052, 1, "Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_Did_you_mean_to_call_1_7052", "Element implicitly has an 'any' type because type '{0}' has no index signature. Did you mean to call '{1}'?"), Element_implicitly_has_an_any_type_because_expression_of_type_0_can_t_be_used_to_index_type_1: i2(7053, 1, "Element_implicitly_has_an_any_type_because_expression_of_type_0_can_t_be_used_to_index_type_1_7053", "Element implicitly has an 'any' type because expression of type '{0}' can't be used to index type '{1}'."), No_index_signature_with_a_parameter_of_type_0_was_found_on_type_1: i2(7054, 1, "No_index_signature_with_a_parameter_of_type_0_was_found_on_type_1_7054", "No index signature with a parameter of type '{0}' was found on type '{1}'."), _0_which_lacks_return_type_annotation_implicitly_has_an_1_yield_type: i2(7055, 1, "_0_which_lacks_return_type_annotation_implicitly_has_an_1_yield_type_7055", "'{0}', which lacks return-type annotation, implicitly has an '{1}' yield type."), The_inferred_type_of_this_node_exceeds_the_maximum_length_the_compiler_will_serialize_An_explicit_type_annotation_is_needed: i2(7056, 1, "The_inferred_type_of_this_node_exceeds_the_maximum_length_the_compiler_will_serialize_An_explicit_ty_7056", "The inferred type of this node exceeds the maximum length the compiler will serialize. An explicit type annotation is needed."), yield_expression_implicitly_results_in_an_any_type_because_its_containing_generator_lacks_a_return_type_annotation: i2(7057, 1, "yield_expression_implicitly_results_in_an_any_type_because_its_containing_generator_lacks_a_return_t_7057", "'yield' expression implicitly results in an 'any' type because its containing generator lacks a return-type annotation."), If_the_0_package_actually_exposes_this_module_try_adding_a_new_declaration_d_ts_file_containing_declare_module_1: i2(7058, 1, "If_the_0_package_actually_exposes_this_module_try_adding_a_new_declaration_d_ts_file_containing_decl_7058", "If the '{0}' package actually exposes this module, try adding a new declaration (.d.ts) file containing `declare module '{1}';`"), This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Use_an_as_expression_instead: i2(7059, 1, "This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Use_an_as_expression_instead_7059", "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead."), This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Add_a_trailing_comma_or_explicit_constraint: i2(7060, 1, "This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Add_a_trailing_comma_or_explicit_cons_7060", "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma or explicit constraint."), A_mapped_type_may_not_declare_properties_or_methods: i2(7061, 1, "A_mapped_type_may_not_declare_properties_or_methods_7061", "A mapped type may not declare properties or methods."), You_cannot_rename_this_element: i2(8e3, 1, "You_cannot_rename_this_element_8000", "You cannot rename this element."), You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library: i2(8001, 1, "You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library_8001", "You cannot rename elements that are defined in the standard TypeScript library."), import_can_only_be_used_in_TypeScript_files: i2(8002, 1, "import_can_only_be_used_in_TypeScript_files_8002", "'import ... =' can only be used in TypeScript files."), export_can_only_be_used_in_TypeScript_files: i2(8003, 1, "export_can_only_be_used_in_TypeScript_files_8003", "'export =' can only be used in TypeScript files."), Type_parameter_declarations_can_only_be_used_in_TypeScript_files: i2(8004, 1, "Type_parameter_declarations_can_only_be_used_in_TypeScript_files_8004", "Type parameter declarations can only be used in TypeScript files."), implements_clauses_can_only_be_used_in_TypeScript_files: i2(8005, 1, "implements_clauses_can_only_be_used_in_TypeScript_files_8005", "'implements' clauses can only be used in TypeScript files."), _0_declarations_can_only_be_used_in_TypeScript_files: i2(8006, 1, "_0_declarations_can_only_be_used_in_TypeScript_files_8006", "'{0}' declarations can only be used in TypeScript files."), Type_aliases_can_only_be_used_in_TypeScript_files: i2(8008, 1, "Type_aliases_can_only_be_used_in_TypeScript_files_8008", "Type aliases can only be used in TypeScript files."), The_0_modifier_can_only_be_used_in_TypeScript_files: i2(8009, 1, "The_0_modifier_can_only_be_used_in_TypeScript_files_8009", "The '{0}' modifier can only be used in TypeScript files."), Type_annotations_can_only_be_used_in_TypeScript_files: i2(8010, 1, "Type_annotations_can_only_be_used_in_TypeScript_files_8010", "Type annotations can only be used in TypeScript files."), Type_arguments_can_only_be_used_in_TypeScript_files: i2(8011, 1, "Type_arguments_can_only_be_used_in_TypeScript_files_8011", "Type arguments can only be used in TypeScript files."), Parameter_modifiers_can_only_be_used_in_TypeScript_files: i2(8012, 1, "Parameter_modifiers_can_only_be_used_in_TypeScript_files_8012", "Parameter modifiers can only be used in TypeScript files."), Non_null_assertions_can_only_be_used_in_TypeScript_files: i2(8013, 1, "Non_null_assertions_can_only_be_used_in_TypeScript_files_8013", "Non-null assertions can only be used in TypeScript files."), Type_assertion_expressions_can_only_be_used_in_TypeScript_files: i2(8016, 1, "Type_assertion_expressions_can_only_be_used_in_TypeScript_files_8016", "Type assertion expressions can only be used in TypeScript files."), Octal_literal_types_must_use_ES2015_syntax_Use_the_syntax_0: i2(8017, 1, "Octal_literal_types_must_use_ES2015_syntax_Use_the_syntax_0_8017", "Octal literal types must use ES2015 syntax. Use the syntax '{0}'."), Octal_literals_are_not_allowed_in_enums_members_initializer_Use_the_syntax_0: i2(8018, 1, "Octal_literals_are_not_allowed_in_enums_members_initializer_Use_the_syntax_0_8018", "Octal literals are not allowed in enums members initializer. Use the syntax '{0}'."), Report_errors_in_js_files: i2(8019, 3, "Report_errors_in_js_files_8019", "Report errors in .js files."), JSDoc_types_can_only_be_used_inside_documentation_comments: i2(8020, 1, "JSDoc_types_can_only_be_used_inside_documentation_comments_8020", "JSDoc types can only be used inside documentation comments."), JSDoc_typedef_tag_should_either_have_a_type_annotation_or_be_followed_by_property_or_member_tags: i2(8021, 1, "JSDoc_typedef_tag_should_either_have_a_type_annotation_or_be_followed_by_property_or_member_tags_8021", "JSDoc '@typedef' tag should either have a type annotation or be followed by '@property' or '@member' tags."), JSDoc_0_is_not_attached_to_a_class: i2(8022, 1, "JSDoc_0_is_not_attached_to_a_class_8022", "JSDoc '@{0}' is not attached to a class."), JSDoc_0_1_does_not_match_the_extends_2_clause: i2(8023, 1, "JSDoc_0_1_does_not_match_the_extends_2_clause_8023", "JSDoc '@{0} {1}' does not match the 'extends {2}' clause."), JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name: i2(8024, 1, "JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_8024", "JSDoc '@param' tag has name '{0}', but there is no parameter with that name."), Class_declarations_cannot_have_more_than_one_augments_or_extends_tag: i2(8025, 1, "Class_declarations_cannot_have_more_than_one_augments_or_extends_tag_8025", "Class declarations cannot have more than one '@augments' or '@extends' tag."), Expected_0_type_arguments_provide_these_with_an_extends_tag: i2(8026, 1, "Expected_0_type_arguments_provide_these_with_an_extends_tag_8026", "Expected {0} type arguments; provide these with an '@extends' tag."), Expected_0_1_type_arguments_provide_these_with_an_extends_tag: i2(8027, 1, "Expected_0_1_type_arguments_provide_these_with_an_extends_tag_8027", "Expected {0}-{1} type arguments; provide these with an '@extends' tag."), JSDoc_may_only_appear_in_the_last_parameter_of_a_signature: i2(8028, 1, "JSDoc_may_only_appear_in_the_last_parameter_of_a_signature_8028", "JSDoc '...' may only appear in the last parameter of a signature."), JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_It_would_match_arguments_if_it_had_an_array_type: i2(8029, 1, "JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_It_would_match_arguments_if_it_h_8029", "JSDoc '@param' tag has name '{0}', but there is no parameter with that name. It would match 'arguments' if it had an array type."), The_type_of_a_function_declaration_must_match_the_function_s_signature: i2(8030, 1, "The_type_of_a_function_declaration_must_match_the_function_s_signature_8030", "The type of a function declaration must match the function's signature."), You_cannot_rename_a_module_via_a_global_import: i2(8031, 1, "You_cannot_rename_a_module_via_a_global_import_8031", "You cannot rename a module via a global import."), Qualified_name_0_is_not_allowed_without_a_leading_param_object_1: i2(8032, 1, "Qualified_name_0_is_not_allowed_without_a_leading_param_object_1_8032", "Qualified name '{0}' is not allowed without a leading '@param {object} {1}'."), A_JSDoc_typedef_comment_may_not_contain_multiple_type_tags: i2(8033, 1, "A_JSDoc_typedef_comment_may_not_contain_multiple_type_tags_8033", "A JSDoc '@typedef' comment may not contain multiple '@type' tags."), The_tag_was_first_specified_here: i2(8034, 1, "The_tag_was_first_specified_here_8034", "The tag was first specified here."), You_cannot_rename_elements_that_are_defined_in_a_node_modules_folder: i2(8035, 1, "You_cannot_rename_elements_that_are_defined_in_a_node_modules_folder_8035", "You cannot rename elements that are defined in a 'node_modules' folder."), You_cannot_rename_elements_that_are_defined_in_another_node_modules_folder: i2(8036, 1, "You_cannot_rename_elements_that_are_defined_in_another_node_modules_folder_8036", "You cannot rename elements that are defined in another 'node_modules' folder."), Type_satisfaction_expressions_can_only_be_used_in_TypeScript_files: i2(8037, 1, "Type_satisfaction_expressions_can_only_be_used_in_TypeScript_files_8037", "Type satisfaction expressions can only be used in TypeScript files."), Decorators_may_not_appear_after_export_or_export_default_if_they_also_appear_before_export: i2(8038, 1, "Decorators_may_not_appear_after_export_or_export_default_if_they_also_appear_before_export_8038", "Decorators may not appear after 'export' or 'export default' if they also appear before 'export'."), Declaration_emit_for_this_file_requires_using_private_name_0_An_explicit_type_annotation_may_unblock_declaration_emit: i2(9005, 1, "Declaration_emit_for_this_file_requires_using_private_name_0_An_explicit_type_annotation_may_unblock_9005", "Declaration emit for this file requires using private name '{0}'. An explicit type annotation may unblock declaration emit."), Declaration_emit_for_this_file_requires_using_private_name_0_from_module_1_An_explicit_type_annotation_may_unblock_declaration_emit: i2(9006, 1, "Declaration_emit_for_this_file_requires_using_private_name_0_from_module_1_An_explicit_type_annotati_9006", "Declaration emit for this file requires using private name '{0}' from module '{1}'. An explicit type annotation may unblock declaration emit."), JSX_attributes_must_only_be_assigned_a_non_empty_expression: i2(17e3, 1, "JSX_attributes_must_only_be_assigned_a_non_empty_expression_17000", "JSX attributes must only be assigned a non-empty 'expression'."), JSX_elements_cannot_have_multiple_attributes_with_the_same_name: i2(17001, 1, "JSX_elements_cannot_have_multiple_attributes_with_the_same_name_17001", "JSX elements cannot have multiple attributes with the same name."), Expected_corresponding_JSX_closing_tag_for_0: i2(17002, 1, "Expected_corresponding_JSX_closing_tag_for_0_17002", "Expected corresponding JSX closing tag for '{0}'."), Cannot_use_JSX_unless_the_jsx_flag_is_provided: i2(17004, 1, "Cannot_use_JSX_unless_the_jsx_flag_is_provided_17004", "Cannot use JSX unless the '--jsx' flag is provided."), A_constructor_cannot_contain_a_super_call_when_its_class_extends_null: i2(17005, 1, "A_constructor_cannot_contain_a_super_call_when_its_class_extends_null_17005", "A constructor cannot contain a 'super' call when its class extends 'null'."), An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses: i2(17006, 1, "An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_ex_17006", "An unary expression with the '{0}' operator is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses."), A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses: i2(17007, 1, "A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Con_17007", "A type assertion expression is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses."), JSX_element_0_has_no_corresponding_closing_tag: i2(17008, 1, "JSX_element_0_has_no_corresponding_closing_tag_17008", "JSX element '{0}' has no corresponding closing tag."), super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class: i2(17009, 1, "super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class_17009", "'super' must be called before accessing 'this' in the constructor of a derived class."), Unknown_type_acquisition_option_0: i2(17010, 1, "Unknown_type_acquisition_option_0_17010", "Unknown type acquisition option '{0}'."), super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class: i2(17011, 1, "super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class_17011", "'super' must be called before accessing a property of 'super' in the constructor of a derived class."), _0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2: i2(17012, 1, "_0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2_17012", "'{0}' is not a valid meta-property for keyword '{1}'. Did you mean '{2}'?"), Meta_property_0_is_only_allowed_in_the_body_of_a_function_declaration_function_expression_or_constructor: i2(17013, 1, "Meta_property_0_is_only_allowed_in_the_body_of_a_function_declaration_function_expression_or_constru_17013", "Meta-property '{0}' is only allowed in the body of a function declaration, function expression, or constructor."), JSX_fragment_has_no_corresponding_closing_tag: i2(17014, 1, "JSX_fragment_has_no_corresponding_closing_tag_17014", "JSX fragment has no corresponding closing tag."), Expected_corresponding_closing_tag_for_JSX_fragment: i2(17015, 1, "Expected_corresponding_closing_tag_for_JSX_fragment_17015", "Expected corresponding closing tag for JSX fragment."), The_jsxFragmentFactory_compiler_option_must_be_provided_to_use_JSX_fragments_with_the_jsxFactory_compiler_option: i2(17016, 1, "The_jsxFragmentFactory_compiler_option_must_be_provided_to_use_JSX_fragments_with_the_jsxFactory_com_17016", "The 'jsxFragmentFactory' compiler option must be provided to use JSX fragments with the 'jsxFactory' compiler option."), An_jsxFrag_pragma_is_required_when_using_an_jsx_pragma_with_JSX_fragments: i2(17017, 1, "An_jsxFrag_pragma_is_required_when_using_an_jsx_pragma_with_JSX_fragments_17017", "An @jsxFrag pragma is required when using an @jsx pragma with JSX fragments."), Unknown_type_acquisition_option_0_Did_you_mean_1: i2(17018, 1, "Unknown_type_acquisition_option_0_Did_you_mean_1_17018", "Unknown type acquisition option '{0}'. Did you mean '{1}'?"), _0_at_the_end_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1: i2(17019, 1, "_0_at_the_end_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1_17019", "'{0}' at the end of a type is not valid TypeScript syntax. Did you mean to write '{1}'?"), _0_at_the_start_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1: i2(17020, 1, "_0_at_the_start_of_a_type_is_not_valid_TypeScript_syntax_Did_you_mean_to_write_1_17020", "'{0}' at the start of a type is not valid TypeScript syntax. Did you mean to write '{1}'?"), Circularity_detected_while_resolving_configuration_Colon_0: i2(18e3, 1, "Circularity_detected_while_resolving_configuration_Colon_0_18000", "Circularity detected while resolving configuration: {0}"), The_files_list_in_config_file_0_is_empty: i2(18002, 1, "The_files_list_in_config_file_0_is_empty_18002", "The 'files' list in config file '{0}' is empty."), No_inputs_were_found_in_config_file_0_Specified_include_paths_were_1_and_exclude_paths_were_2: i2(18003, 1, "No_inputs_were_found_in_config_file_0_Specified_include_paths_were_1_and_exclude_paths_were_2_18003", "No inputs were found in config file '{0}'. Specified 'include' paths were '{1}' and 'exclude' paths were '{2}'."), File_is_a_CommonJS_module_it_may_be_converted_to_an_ES_module: i2(80001, 2, "File_is_a_CommonJS_module_it_may_be_converted_to_an_ES_module_80001", "File is a CommonJS module; it may be converted to an ES module."), This_constructor_function_may_be_converted_to_a_class_declaration: i2(80002, 2, "This_constructor_function_may_be_converted_to_a_class_declaration_80002", "This constructor function may be converted to a class declaration."), Import_may_be_converted_to_a_default_import: i2(80003, 2, "Import_may_be_converted_to_a_default_import_80003", "Import may be converted to a default import."), JSDoc_types_may_be_moved_to_TypeScript_types: i2(80004, 2, "JSDoc_types_may_be_moved_to_TypeScript_types_80004", "JSDoc types may be moved to TypeScript types."), require_call_may_be_converted_to_an_import: i2(80005, 2, "require_call_may_be_converted_to_an_import_80005", "'require' call may be converted to an import."), This_may_be_converted_to_an_async_function: i2(80006, 2, "This_may_be_converted_to_an_async_function_80006", "This may be converted to an async function."), await_has_no_effect_on_the_type_of_this_expression: i2(80007, 2, "await_has_no_effect_on_the_type_of_this_expression_80007", "'await' has no effect on the type of this expression."), Numeric_literals_with_absolute_values_equal_to_2_53_or_greater_are_too_large_to_be_represented_accurately_as_integers: i2(80008, 2, "Numeric_literals_with_absolute_values_equal_to_2_53_or_greater_are_too_large_to_be_represented_accur_80008", "Numeric literals with absolute values equal to 2^53 or greater are too large to be represented accurately as integers."), Add_missing_super_call: i2(90001, 3, "Add_missing_super_call_90001", "Add missing 'super()' call"), Make_super_call_the_first_statement_in_the_constructor: i2(90002, 3, "Make_super_call_the_first_statement_in_the_constructor_90002", "Make 'super()' call the first statement in the constructor"), Change_extends_to_implements: i2(90003, 3, "Change_extends_to_implements_90003", "Change 'extends' to 'implements'"), Remove_unused_declaration_for_Colon_0: i2(90004, 3, "Remove_unused_declaration_for_Colon_0_90004", "Remove unused declaration for: '{0}'"), Remove_import_from_0: i2(90005, 3, "Remove_import_from_0_90005", "Remove import from '{0}'"), Implement_interface_0: i2(90006, 3, "Implement_interface_0_90006", "Implement interface '{0}'"), Implement_inherited_abstract_class: i2(90007, 3, "Implement_inherited_abstract_class_90007", "Implement inherited abstract class"), Add_0_to_unresolved_variable: i2(90008, 3, "Add_0_to_unresolved_variable_90008", "Add '{0}.' to unresolved variable"), Remove_variable_statement: i2(90010, 3, "Remove_variable_statement_90010", "Remove variable statement"), Remove_template_tag: i2(90011, 3, "Remove_template_tag_90011", "Remove template tag"), Remove_type_parameters: i2(90012, 3, "Remove_type_parameters_90012", "Remove type parameters"), Import_0_from_1: i2(90013, 3, "Import_0_from_1_90013", `Import '{0}' from "{1}"`), Change_0_to_1: i2(90014, 3, "Change_0_to_1_90014", "Change '{0}' to '{1}'"), Declare_property_0: i2(90016, 3, "Declare_property_0_90016", "Declare property '{0}'"), Add_index_signature_for_property_0: i2(90017, 3, "Add_index_signature_for_property_0_90017", "Add index signature for property '{0}'"), Disable_checking_for_this_file: i2(90018, 3, "Disable_checking_for_this_file_90018", "Disable checking for this file"), Ignore_this_error_message: i2(90019, 3, "Ignore_this_error_message_90019", "Ignore this error message"), Initialize_property_0_in_the_constructor: i2(90020, 3, "Initialize_property_0_in_the_constructor_90020", "Initialize property '{0}' in the constructor"), Initialize_static_property_0: i2(90021, 3, "Initialize_static_property_0_90021", "Initialize static property '{0}'"), Change_spelling_to_0: i2(90022, 3, "Change_spelling_to_0_90022", "Change spelling to '{0}'"), Declare_method_0: i2(90023, 3, "Declare_method_0_90023", "Declare method '{0}'"), Declare_static_method_0: i2(90024, 3, "Declare_static_method_0_90024", "Declare static method '{0}'"), Prefix_0_with_an_underscore: i2(90025, 3, "Prefix_0_with_an_underscore_90025", "Prefix '{0}' with an underscore"), Rewrite_as_the_indexed_access_type_0: i2(90026, 3, "Rewrite_as_the_indexed_access_type_0_90026", "Rewrite as the indexed access type '{0}'"), Declare_static_property_0: i2(90027, 3, "Declare_static_property_0_90027", "Declare static property '{0}'"), Call_decorator_expression: i2(90028, 3, "Call_decorator_expression_90028", "Call decorator expression"), Add_async_modifier_to_containing_function: i2(90029, 3, "Add_async_modifier_to_containing_function_90029", "Add async modifier to containing function"), Replace_infer_0_with_unknown: i2(90030, 3, "Replace_infer_0_with_unknown_90030", "Replace 'infer {0}' with 'unknown'"), Replace_all_unused_infer_with_unknown: i2(90031, 3, "Replace_all_unused_infer_with_unknown_90031", "Replace all unused 'infer' with 'unknown'"), Add_parameter_name: i2(90034, 3, "Add_parameter_name_90034", "Add parameter name"), Declare_private_property_0: i2(90035, 3, "Declare_private_property_0_90035", "Declare private property '{0}'"), Replace_0_with_Promise_1: i2(90036, 3, "Replace_0_with_Promise_1_90036", "Replace '{0}' with 'Promise<{1}>'"), Fix_all_incorrect_return_type_of_an_async_functions: i2(90037, 3, "Fix_all_incorrect_return_type_of_an_async_functions_90037", "Fix all incorrect return type of an async functions"), Declare_private_method_0: i2(90038, 3, "Declare_private_method_0_90038", "Declare private method '{0}'"), Remove_unused_destructuring_declaration: i2(90039, 3, "Remove_unused_destructuring_declaration_90039", "Remove unused destructuring declaration"), Remove_unused_declarations_for_Colon_0: i2(90041, 3, "Remove_unused_declarations_for_Colon_0_90041", "Remove unused declarations for: '{0}'"), Declare_a_private_field_named_0: i2(90053, 3, "Declare_a_private_field_named_0_90053", "Declare a private field named '{0}'."), Includes_imports_of_types_referenced_by_0: i2(90054, 3, "Includes_imports_of_types_referenced_by_0_90054", "Includes imports of types referenced by '{0}'"), Remove_type_from_import_declaration_from_0: i2(90055, 3, "Remove_type_from_import_declaration_from_0_90055", `Remove 'type' from import declaration from "{0}"`), Remove_type_from_import_of_0_from_1: i2(90056, 3, "Remove_type_from_import_of_0_from_1_90056", `Remove 'type' from import of '{0}' from "{1}"`), Add_import_from_0: i2(90057, 3, "Add_import_from_0_90057", 'Add import from "{0}"'), Update_import_from_0: i2(90058, 3, "Update_import_from_0_90058", 'Update import from "{0}"'), Export_0_from_module_1: i2(90059, 3, "Export_0_from_module_1_90059", "Export '{0}' from module '{1}'"), Export_all_referenced_locals: i2(90060, 3, "Export_all_referenced_locals_90060", "Export all referenced locals"), Convert_function_to_an_ES2015_class: i2(95001, 3, "Convert_function_to_an_ES2015_class_95001", "Convert function to an ES2015 class"), Convert_0_to_1_in_0: i2(95003, 3, "Convert_0_to_1_in_0_95003", "Convert '{0}' to '{1} in {0}'"), Extract_to_0_in_1: i2(95004, 3, "Extract_to_0_in_1_95004", "Extract to {0} in {1}"), Extract_function: i2(95005, 3, "Extract_function_95005", "Extract function"), Extract_constant: i2(95006, 3, "Extract_constant_95006", "Extract constant"), Extract_to_0_in_enclosing_scope: i2(95007, 3, "Extract_to_0_in_enclosing_scope_95007", "Extract to {0} in enclosing scope"), Extract_to_0_in_1_scope: i2(95008, 3, "Extract_to_0_in_1_scope_95008", "Extract to {0} in {1} scope"), Annotate_with_type_from_JSDoc: i2(95009, 3, "Annotate_with_type_from_JSDoc_95009", "Annotate with type from JSDoc"), Infer_type_of_0_from_usage: i2(95011, 3, "Infer_type_of_0_from_usage_95011", "Infer type of '{0}' from usage"), Infer_parameter_types_from_usage: i2(95012, 3, "Infer_parameter_types_from_usage_95012", "Infer parameter types from usage"), Convert_to_default_import: i2(95013, 3, "Convert_to_default_import_95013", "Convert to default import"), Install_0: i2(95014, 3, "Install_0_95014", "Install '{0}'"), Replace_import_with_0: i2(95015, 3, "Replace_import_with_0_95015", "Replace import with '{0}'."), Use_synthetic_default_member: i2(95016, 3, "Use_synthetic_default_member_95016", "Use synthetic 'default' member."), Convert_to_ES_module: i2(95017, 3, "Convert_to_ES_module_95017", "Convert to ES module"), Add_undefined_type_to_property_0: i2(95018, 3, "Add_undefined_type_to_property_0_95018", "Add 'undefined' type to property '{0}'"), Add_initializer_to_property_0: i2(95019, 3, "Add_initializer_to_property_0_95019", "Add initializer to property '{0}'"), Add_definite_assignment_assertion_to_property_0: i2(95020, 3, "Add_definite_assignment_assertion_to_property_0_95020", "Add definite assignment assertion to property '{0}'"), Convert_all_type_literals_to_mapped_type: i2(95021, 3, "Convert_all_type_literals_to_mapped_type_95021", "Convert all type literals to mapped type"), Add_all_missing_members: i2(95022, 3, "Add_all_missing_members_95022", "Add all missing members"), Infer_all_types_from_usage: i2(95023, 3, "Infer_all_types_from_usage_95023", "Infer all types from usage"), Delete_all_unused_declarations: i2(95024, 3, "Delete_all_unused_declarations_95024", "Delete all unused declarations"), Prefix_all_unused_declarations_with_where_possible: i2(95025, 3, "Prefix_all_unused_declarations_with_where_possible_95025", "Prefix all unused declarations with '_' where possible"), Fix_all_detected_spelling_errors: i2(95026, 3, "Fix_all_detected_spelling_errors_95026", "Fix all detected spelling errors"), Add_initializers_to_all_uninitialized_properties: i2(95027, 3, "Add_initializers_to_all_uninitialized_properties_95027", "Add initializers to all uninitialized properties"), Add_definite_assignment_assertions_to_all_uninitialized_properties: i2(95028, 3, "Add_definite_assignment_assertions_to_all_uninitialized_properties_95028", "Add definite assignment assertions to all uninitialized properties"), Add_undefined_type_to_all_uninitialized_properties: i2(95029, 3, "Add_undefined_type_to_all_uninitialized_properties_95029", "Add undefined type to all uninitialized properties"), Change_all_jsdoc_style_types_to_TypeScript: i2(95030, 3, "Change_all_jsdoc_style_types_to_TypeScript_95030", "Change all jsdoc-style types to TypeScript"), Change_all_jsdoc_style_types_to_TypeScript_and_add_undefined_to_nullable_types: i2(95031, 3, "Change_all_jsdoc_style_types_to_TypeScript_and_add_undefined_to_nullable_types_95031", "Change all jsdoc-style types to TypeScript (and add '| undefined' to nullable types)"), Implement_all_unimplemented_interfaces: i2(95032, 3, "Implement_all_unimplemented_interfaces_95032", "Implement all unimplemented interfaces"), Install_all_missing_types_packages: i2(95033, 3, "Install_all_missing_types_packages_95033", "Install all missing types packages"), Rewrite_all_as_indexed_access_types: i2(95034, 3, "Rewrite_all_as_indexed_access_types_95034", "Rewrite all as indexed access types"), Convert_all_to_default_imports: i2(95035, 3, "Convert_all_to_default_imports_95035", "Convert all to default imports"), Make_all_super_calls_the_first_statement_in_their_constructor: i2(95036, 3, "Make_all_super_calls_the_first_statement_in_their_constructor_95036", "Make all 'super()' calls the first statement in their constructor"), Add_qualifier_to_all_unresolved_variables_matching_a_member_name: i2(95037, 3, "Add_qualifier_to_all_unresolved_variables_matching_a_member_name_95037", "Add qualifier to all unresolved variables matching a member name"), Change_all_extended_interfaces_to_implements: i2(95038, 3, "Change_all_extended_interfaces_to_implements_95038", "Change all extended interfaces to 'implements'"), Add_all_missing_super_calls: i2(95039, 3, "Add_all_missing_super_calls_95039", "Add all missing super calls"), Implement_all_inherited_abstract_classes: i2(95040, 3, "Implement_all_inherited_abstract_classes_95040", "Implement all inherited abstract classes"), Add_all_missing_async_modifiers: i2(95041, 3, "Add_all_missing_async_modifiers_95041", "Add all missing 'async' modifiers"), Add_ts_ignore_to_all_error_messages: i2(95042, 3, "Add_ts_ignore_to_all_error_messages_95042", "Add '@ts-ignore' to all error messages"), Annotate_everything_with_types_from_JSDoc: i2(95043, 3, "Annotate_everything_with_types_from_JSDoc_95043", "Annotate everything with types from JSDoc"), Add_to_all_uncalled_decorators: i2(95044, 3, "Add_to_all_uncalled_decorators_95044", "Add '()' to all uncalled decorators"), Convert_all_constructor_functions_to_classes: i2(95045, 3, "Convert_all_constructor_functions_to_classes_95045", "Convert all constructor functions to classes"), Generate_get_and_set_accessors: i2(95046, 3, "Generate_get_and_set_accessors_95046", "Generate 'get' and 'set' accessors"), Convert_require_to_import: i2(95047, 3, "Convert_require_to_import_95047", "Convert 'require' to 'import'"), Convert_all_require_to_import: i2(95048, 3, "Convert_all_require_to_import_95048", "Convert all 'require' to 'import'"), Move_to_a_new_file: i2(95049, 3, "Move_to_a_new_file_95049", "Move to a new file"), Remove_unreachable_code: i2(95050, 3, "Remove_unreachable_code_95050", "Remove unreachable code"), Remove_all_unreachable_code: i2(95051, 3, "Remove_all_unreachable_code_95051", "Remove all unreachable code"), Add_missing_typeof: i2(95052, 3, "Add_missing_typeof_95052", "Add missing 'typeof'"), Remove_unused_label: i2(95053, 3, "Remove_unused_label_95053", "Remove unused label"), Remove_all_unused_labels: i2(95054, 3, "Remove_all_unused_labels_95054", "Remove all unused labels"), Convert_0_to_mapped_object_type: i2(95055, 3, "Convert_0_to_mapped_object_type_95055", "Convert '{0}' to mapped object type"), Convert_namespace_import_to_named_imports: i2(95056, 3, "Convert_namespace_import_to_named_imports_95056", "Convert namespace import to named imports"), Convert_named_imports_to_namespace_import: i2(95057, 3, "Convert_named_imports_to_namespace_import_95057", "Convert named imports to namespace import"), Add_or_remove_braces_in_an_arrow_function: i2(95058, 3, "Add_or_remove_braces_in_an_arrow_function_95058", "Add or remove braces in an arrow function"), Add_braces_to_arrow_function: i2(95059, 3, "Add_braces_to_arrow_function_95059", "Add braces to arrow function"), Remove_braces_from_arrow_function: i2(95060, 3, "Remove_braces_from_arrow_function_95060", "Remove braces from arrow function"), Convert_default_export_to_named_export: i2(95061, 3, "Convert_default_export_to_named_export_95061", "Convert default export to named export"), Convert_named_export_to_default_export: i2(95062, 3, "Convert_named_export_to_default_export_95062", "Convert named export to default export"), Add_missing_enum_member_0: i2(95063, 3, "Add_missing_enum_member_0_95063", "Add missing enum member '{0}'"), Add_all_missing_imports: i2(95064, 3, "Add_all_missing_imports_95064", "Add all missing imports"), Convert_to_async_function: i2(95065, 3, "Convert_to_async_function_95065", "Convert to async function"), Convert_all_to_async_functions: i2(95066, 3, "Convert_all_to_async_functions_95066", "Convert all to async functions"), Add_missing_call_parentheses: i2(95067, 3, "Add_missing_call_parentheses_95067", "Add missing call parentheses"), Add_all_missing_call_parentheses: i2(95068, 3, "Add_all_missing_call_parentheses_95068", "Add all missing call parentheses"), Add_unknown_conversion_for_non_overlapping_types: i2(95069, 3, "Add_unknown_conversion_for_non_overlapping_types_95069", "Add 'unknown' conversion for non-overlapping types"), Add_unknown_to_all_conversions_of_non_overlapping_types: i2(95070, 3, "Add_unknown_to_all_conversions_of_non_overlapping_types_95070", "Add 'unknown' to all conversions of non-overlapping types"), Add_missing_new_operator_to_call: i2(95071, 3, "Add_missing_new_operator_to_call_95071", "Add missing 'new' operator to call"), Add_missing_new_operator_to_all_calls: i2(95072, 3, "Add_missing_new_operator_to_all_calls_95072", "Add missing 'new' operator to all calls"), Add_names_to_all_parameters_without_names: i2(95073, 3, "Add_names_to_all_parameters_without_names_95073", "Add names to all parameters without names"), Enable_the_experimentalDecorators_option_in_your_configuration_file: i2(95074, 3, "Enable_the_experimentalDecorators_option_in_your_configuration_file_95074", "Enable the 'experimentalDecorators' option in your configuration file"), Convert_parameters_to_destructured_object: i2(95075, 3, "Convert_parameters_to_destructured_object_95075", "Convert parameters to destructured object"), Extract_type: i2(95077, 3, "Extract_type_95077", "Extract type"), Extract_to_type_alias: i2(95078, 3, "Extract_to_type_alias_95078", "Extract to type alias"), Extract_to_typedef: i2(95079, 3, "Extract_to_typedef_95079", "Extract to typedef"), Infer_this_type_of_0_from_usage: i2(95080, 3, "Infer_this_type_of_0_from_usage_95080", "Infer 'this' type of '{0}' from usage"), Add_const_to_unresolved_variable: i2(95081, 3, "Add_const_to_unresolved_variable_95081", "Add 'const' to unresolved variable"), Add_const_to_all_unresolved_variables: i2(95082, 3, "Add_const_to_all_unresolved_variables_95082", "Add 'const' to all unresolved variables"), Add_await: i2(95083, 3, "Add_await_95083", "Add 'await'"), Add_await_to_initializer_for_0: i2(95084, 3, "Add_await_to_initializer_for_0_95084", "Add 'await' to initializer for '{0}'"), Fix_all_expressions_possibly_missing_await: i2(95085, 3, "Fix_all_expressions_possibly_missing_await_95085", "Fix all expressions possibly missing 'await'"), Remove_unnecessary_await: i2(95086, 3, "Remove_unnecessary_await_95086", "Remove unnecessary 'await'"), Remove_all_unnecessary_uses_of_await: i2(95087, 3, "Remove_all_unnecessary_uses_of_await_95087", "Remove all unnecessary uses of 'await'"), Enable_the_jsx_flag_in_your_configuration_file: i2(95088, 3, "Enable_the_jsx_flag_in_your_configuration_file_95088", "Enable the '--jsx' flag in your configuration file"), Add_await_to_initializers: i2(95089, 3, "Add_await_to_initializers_95089", "Add 'await' to initializers"), Extract_to_interface: i2(95090, 3, "Extract_to_interface_95090", "Extract to interface"), Convert_to_a_bigint_numeric_literal: i2(95091, 3, "Convert_to_a_bigint_numeric_literal_95091", "Convert to a bigint numeric literal"), Convert_all_to_bigint_numeric_literals: i2(95092, 3, "Convert_all_to_bigint_numeric_literals_95092", "Convert all to bigint numeric literals"), Convert_const_to_let: i2(95093, 3, "Convert_const_to_let_95093", "Convert 'const' to 'let'"), Prefix_with_declare: i2(95094, 3, "Prefix_with_declare_95094", "Prefix with 'declare'"), Prefix_all_incorrect_property_declarations_with_declare: i2(95095, 3, "Prefix_all_incorrect_property_declarations_with_declare_95095", "Prefix all incorrect property declarations with 'declare'"), Convert_to_template_string: i2(95096, 3, "Convert_to_template_string_95096", "Convert to template string"), Add_export_to_make_this_file_into_a_module: i2(95097, 3, "Add_export_to_make_this_file_into_a_module_95097", "Add 'export {}' to make this file into a module"), Set_the_target_option_in_your_configuration_file_to_0: i2(95098, 3, "Set_the_target_option_in_your_configuration_file_to_0_95098", "Set the 'target' option in your configuration file to '{0}'"), Set_the_module_option_in_your_configuration_file_to_0: i2(95099, 3, "Set_the_module_option_in_your_configuration_file_to_0_95099", "Set the 'module' option in your configuration file to '{0}'"), Convert_invalid_character_to_its_html_entity_code: i2(95100, 3, "Convert_invalid_character_to_its_html_entity_code_95100", "Convert invalid character to its html entity code"), Convert_all_invalid_characters_to_HTML_entity_code: i2(95101, 3, "Convert_all_invalid_characters_to_HTML_entity_code_95101", "Convert all invalid characters to HTML entity code"), Convert_all_const_to_let: i2(95102, 3, "Convert_all_const_to_let_95102", "Convert all 'const' to 'let'"), Convert_function_expression_0_to_arrow_function: i2(95105, 3, "Convert_function_expression_0_to_arrow_function_95105", "Convert function expression '{0}' to arrow function"), Convert_function_declaration_0_to_arrow_function: i2(95106, 3, "Convert_function_declaration_0_to_arrow_function_95106", "Convert function declaration '{0}' to arrow function"), Fix_all_implicit_this_errors: i2(95107, 3, "Fix_all_implicit_this_errors_95107", "Fix all implicit-'this' errors"), Wrap_invalid_character_in_an_expression_container: i2(95108, 3, "Wrap_invalid_character_in_an_expression_container_95108", "Wrap invalid character in an expression container"), Wrap_all_invalid_characters_in_an_expression_container: i2(95109, 3, "Wrap_all_invalid_characters_in_an_expression_container_95109", "Wrap all invalid characters in an expression container"), Visit_https_Colon_Slash_Slashaka_ms_Slashtsconfig_to_read_more_about_this_file: i2(95110, 3, "Visit_https_Colon_Slash_Slashaka_ms_Slashtsconfig_to_read_more_about_this_file_95110", "Visit https://aka.ms/tsconfig to read more about this file"), Add_a_return_statement: i2(95111, 3, "Add_a_return_statement_95111", "Add a return statement"), Remove_braces_from_arrow_function_body: i2(95112, 3, "Remove_braces_from_arrow_function_body_95112", "Remove braces from arrow function body"), Wrap_the_following_body_with_parentheses_which_should_be_an_object_literal: i2(95113, 3, "Wrap_the_following_body_with_parentheses_which_should_be_an_object_literal_95113", "Wrap the following body with parentheses which should be an object literal"), Add_all_missing_return_statement: i2(95114, 3, "Add_all_missing_return_statement_95114", "Add all missing return statement"), Remove_braces_from_all_arrow_function_bodies_with_relevant_issues: i2(95115, 3, "Remove_braces_from_all_arrow_function_bodies_with_relevant_issues_95115", "Remove braces from all arrow function bodies with relevant issues"), Wrap_all_object_literal_with_parentheses: i2(95116, 3, "Wrap_all_object_literal_with_parentheses_95116", "Wrap all object literal with parentheses"), Move_labeled_tuple_element_modifiers_to_labels: i2(95117, 3, "Move_labeled_tuple_element_modifiers_to_labels_95117", "Move labeled tuple element modifiers to labels"), Convert_overload_list_to_single_signature: i2(95118, 3, "Convert_overload_list_to_single_signature_95118", "Convert overload list to single signature"), Generate_get_and_set_accessors_for_all_overriding_properties: i2(95119, 3, "Generate_get_and_set_accessors_for_all_overriding_properties_95119", "Generate 'get' and 'set' accessors for all overriding properties"), Wrap_in_JSX_fragment: i2(95120, 3, "Wrap_in_JSX_fragment_95120", "Wrap in JSX fragment"), Wrap_all_unparented_JSX_in_JSX_fragment: i2(95121, 3, "Wrap_all_unparented_JSX_in_JSX_fragment_95121", "Wrap all unparented JSX in JSX fragment"), Convert_arrow_function_or_function_expression: i2(95122, 3, "Convert_arrow_function_or_function_expression_95122", "Convert arrow function or function expression"), Convert_to_anonymous_function: i2(95123, 3, "Convert_to_anonymous_function_95123", "Convert to anonymous function"), Convert_to_named_function: i2(95124, 3, "Convert_to_named_function_95124", "Convert to named function"), Convert_to_arrow_function: i2(95125, 3, "Convert_to_arrow_function_95125", "Convert to arrow function"), Remove_parentheses: i2(95126, 3, "Remove_parentheses_95126", "Remove parentheses"), Could_not_find_a_containing_arrow_function: i2(95127, 3, "Could_not_find_a_containing_arrow_function_95127", "Could not find a containing arrow function"), Containing_function_is_not_an_arrow_function: i2(95128, 3, "Containing_function_is_not_an_arrow_function_95128", "Containing function is not an arrow function"), Could_not_find_export_statement: i2(95129, 3, "Could_not_find_export_statement_95129", "Could not find export statement"), This_file_already_has_a_default_export: i2(95130, 3, "This_file_already_has_a_default_export_95130", "This file already has a default export"), Could_not_find_import_clause: i2(95131, 3, "Could_not_find_import_clause_95131", "Could not find import clause"), Could_not_find_namespace_import_or_named_imports: i2(95132, 3, "Could_not_find_namespace_import_or_named_imports_95132", "Could not find namespace import or named imports"), Selection_is_not_a_valid_type_node: i2(95133, 3, "Selection_is_not_a_valid_type_node_95133", "Selection is not a valid type node"), No_type_could_be_extracted_from_this_type_node: i2(95134, 3, "No_type_could_be_extracted_from_this_type_node_95134", "No type could be extracted from this type node"), Could_not_find_property_for_which_to_generate_accessor: i2(95135, 3, "Could_not_find_property_for_which_to_generate_accessor_95135", "Could not find property for which to generate accessor"), Name_is_not_valid: i2(95136, 3, "Name_is_not_valid_95136", "Name is not valid"), Can_only_convert_property_with_modifier: i2(95137, 3, "Can_only_convert_property_with_modifier_95137", "Can only convert property with modifier"), Switch_each_misused_0_to_1: i2(95138, 3, "Switch_each_misused_0_to_1_95138", "Switch each misused '{0}' to '{1}'"), Convert_to_optional_chain_expression: i2(95139, 3, "Convert_to_optional_chain_expression_95139", "Convert to optional chain expression"), Could_not_find_convertible_access_expression: i2(95140, 3, "Could_not_find_convertible_access_expression_95140", "Could not find convertible access expression"), Could_not_find_matching_access_expressions: i2(95141, 3, "Could_not_find_matching_access_expressions_95141", "Could not find matching access expressions"), Can_only_convert_logical_AND_access_chains: i2(95142, 3, "Can_only_convert_logical_AND_access_chains_95142", "Can only convert logical AND access chains"), Add_void_to_Promise_resolved_without_a_value: i2(95143, 3, "Add_void_to_Promise_resolved_without_a_value_95143", "Add 'void' to Promise resolved without a value"), Add_void_to_all_Promises_resolved_without_a_value: i2(95144, 3, "Add_void_to_all_Promises_resolved_without_a_value_95144", "Add 'void' to all Promises resolved without a value"), Use_element_access_for_0: i2(95145, 3, "Use_element_access_for_0_95145", "Use element access for '{0}'"), Use_element_access_for_all_undeclared_properties: i2(95146, 3, "Use_element_access_for_all_undeclared_properties_95146", "Use element access for all undeclared properties."), Delete_all_unused_imports: i2(95147, 3, "Delete_all_unused_imports_95147", "Delete all unused imports"), Infer_function_return_type: i2(95148, 3, "Infer_function_return_type_95148", "Infer function return type"), Return_type_must_be_inferred_from_a_function: i2(95149, 3, "Return_type_must_be_inferred_from_a_function_95149", "Return type must be inferred from a function"), Could_not_determine_function_return_type: i2(95150, 3, "Could_not_determine_function_return_type_95150", "Could not determine function return type"), Could_not_convert_to_arrow_function: i2(95151, 3, "Could_not_convert_to_arrow_function_95151", "Could not convert to arrow function"), Could_not_convert_to_named_function: i2(95152, 3, "Could_not_convert_to_named_function_95152", "Could not convert to named function"), Could_not_convert_to_anonymous_function: i2(95153, 3, "Could_not_convert_to_anonymous_function_95153", "Could not convert to anonymous function"), Can_only_convert_string_concatenation: i2(95154, 3, "Can_only_convert_string_concatenation_95154", "Can only convert string concatenation"), Selection_is_not_a_valid_statement_or_statements: i2(95155, 3, "Selection_is_not_a_valid_statement_or_statements_95155", "Selection is not a valid statement or statements"), Add_missing_function_declaration_0: i2(95156, 3, "Add_missing_function_declaration_0_95156", "Add missing function declaration '{0}'"), Add_all_missing_function_declarations: i2(95157, 3, "Add_all_missing_function_declarations_95157", "Add all missing function declarations"), Method_not_implemented: i2(95158, 3, "Method_not_implemented_95158", "Method not implemented."), Function_not_implemented: i2(95159, 3, "Function_not_implemented_95159", "Function not implemented."), Add_override_modifier: i2(95160, 3, "Add_override_modifier_95160", "Add 'override' modifier"), Remove_override_modifier: i2(95161, 3, "Remove_override_modifier_95161", "Remove 'override' modifier"), Add_all_missing_override_modifiers: i2(95162, 3, "Add_all_missing_override_modifiers_95162", "Add all missing 'override' modifiers"), Remove_all_unnecessary_override_modifiers: i2(95163, 3, "Remove_all_unnecessary_override_modifiers_95163", "Remove all unnecessary 'override' modifiers"), Can_only_convert_named_export: i2(95164, 3, "Can_only_convert_named_export_95164", "Can only convert named export"), Add_missing_properties: i2(95165, 3, "Add_missing_properties_95165", "Add missing properties"), Add_all_missing_properties: i2(95166, 3, "Add_all_missing_properties_95166", "Add all missing properties"), Add_missing_attributes: i2(95167, 3, "Add_missing_attributes_95167", "Add missing attributes"), Add_all_missing_attributes: i2(95168, 3, "Add_all_missing_attributes_95168", "Add all missing attributes"), Add_undefined_to_optional_property_type: i2(95169, 3, "Add_undefined_to_optional_property_type_95169", "Add 'undefined' to optional property type"), Convert_named_imports_to_default_import: i2(95170, 3, "Convert_named_imports_to_default_import_95170", "Convert named imports to default import"), Delete_unused_param_tag_0: i2(95171, 3, "Delete_unused_param_tag_0_95171", "Delete unused '@param' tag '{0}'"), Delete_all_unused_param_tags: i2(95172, 3, "Delete_all_unused_param_tags_95172", "Delete all unused '@param' tags"), Rename_param_tag_name_0_to_1: i2(95173, 3, "Rename_param_tag_name_0_to_1_95173", "Rename '@param' tag name '{0}' to '{1}'"), Use_0: i2(95174, 3, "Use_0_95174", "Use `{0}`."), Use_Number_isNaN_in_all_conditions: i2(95175, 3, "Use_Number_isNaN_in_all_conditions_95175", "Use `Number.isNaN` in all conditions."), No_value_exists_in_scope_for_the_shorthand_property_0_Either_declare_one_or_provide_an_initializer: i2(18004, 1, "No_value_exists_in_scope_for_the_shorthand_property_0_Either_declare_one_or_provide_an_initializer_18004", "No value exists in scope for the shorthand property '{0}'. Either declare one or provide an initializer."), Classes_may_not_have_a_field_named_constructor: i2(18006, 1, "Classes_may_not_have_a_field_named_constructor_18006", "Classes may not have a field named 'constructor'."), JSX_expressions_may_not_use_the_comma_operator_Did_you_mean_to_write_an_array: i2(18007, 1, "JSX_expressions_may_not_use_the_comma_operator_Did_you_mean_to_write_an_array_18007", "JSX expressions may not use the comma operator. Did you mean to write an array?"), Private_identifiers_cannot_be_used_as_parameters: i2(18009, 1, "Private_identifiers_cannot_be_used_as_parameters_18009", "Private identifiers cannot be used as parameters."), An_accessibility_modifier_cannot_be_used_with_a_private_identifier: i2(18010, 1, "An_accessibility_modifier_cannot_be_used_with_a_private_identifier_18010", "An accessibility modifier cannot be used with a private identifier."), The_operand_of_a_delete_operator_cannot_be_a_private_identifier: i2(18011, 1, "The_operand_of_a_delete_operator_cannot_be_a_private_identifier_18011", "The operand of a 'delete' operator cannot be a private identifier."), constructor_is_a_reserved_word: i2(18012, 1, "constructor_is_a_reserved_word_18012", "'#constructor' is a reserved word."), Property_0_is_not_accessible_outside_class_1_because_it_has_a_private_identifier: i2(18013, 1, "Property_0_is_not_accessible_outside_class_1_because_it_has_a_private_identifier_18013", "Property '{0}' is not accessible outside class '{1}' because it has a private identifier."), The_property_0_cannot_be_accessed_on_type_1_within_this_class_because_it_is_shadowed_by_another_private_identifier_with_the_same_spelling: i2(18014, 1, "The_property_0_cannot_be_accessed_on_type_1_within_this_class_because_it_is_shadowed_by_another_priv_18014", "The property '{0}' cannot be accessed on type '{1}' within this class because it is shadowed by another private identifier with the same spelling."), Property_0_in_type_1_refers_to_a_different_member_that_cannot_be_accessed_from_within_type_2: i2(18015, 1, "Property_0_in_type_1_refers_to_a_different_member_that_cannot_be_accessed_from_within_type_2_18015", "Property '{0}' in type '{1}' refers to a different member that cannot be accessed from within type '{2}'."), Private_identifiers_are_not_allowed_outside_class_bodies: i2(18016, 1, "Private_identifiers_are_not_allowed_outside_class_bodies_18016", "Private identifiers are not allowed outside class bodies."), The_shadowing_declaration_of_0_is_defined_here: i2(18017, 1, "The_shadowing_declaration_of_0_is_defined_here_18017", "The shadowing declaration of '{0}' is defined here"), The_declaration_of_0_that_you_probably_intended_to_use_is_defined_here: i2(18018, 1, "The_declaration_of_0_that_you_probably_intended_to_use_is_defined_here_18018", "The declaration of '{0}' that you probably intended to use is defined here"), _0_modifier_cannot_be_used_with_a_private_identifier: i2(18019, 1, "_0_modifier_cannot_be_used_with_a_private_identifier_18019", "'{0}' modifier cannot be used with a private identifier."), An_enum_member_cannot_be_named_with_a_private_identifier: i2(18024, 1, "An_enum_member_cannot_be_named_with_a_private_identifier_18024", "An enum member cannot be named with a private identifier."), can_only_be_used_at_the_start_of_a_file: i2(18026, 1, "can_only_be_used_at_the_start_of_a_file_18026", "'#!' can only be used at the start of a file."), Compiler_reserves_name_0_when_emitting_private_identifier_downlevel: i2(18027, 1, "Compiler_reserves_name_0_when_emitting_private_identifier_downlevel_18027", "Compiler reserves name '{0}' when emitting private identifier downlevel."), Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher: i2(18028, 1, "Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher_18028", "Private identifiers are only available when targeting ECMAScript 2015 and higher."), Private_identifiers_are_not_allowed_in_variable_declarations: i2(18029, 1, "Private_identifiers_are_not_allowed_in_variable_declarations_18029", "Private identifiers are not allowed in variable declarations."), An_optional_chain_cannot_contain_private_identifiers: i2(18030, 1, "An_optional_chain_cannot_contain_private_identifiers_18030", "An optional chain cannot contain private identifiers."), The_intersection_0_was_reduced_to_never_because_property_1_has_conflicting_types_in_some_constituents: i2(18031, 1, "The_intersection_0_was_reduced_to_never_because_property_1_has_conflicting_types_in_some_constituent_18031", "The intersection '{0}' was reduced to 'never' because property '{1}' has conflicting types in some constituents."), The_intersection_0_was_reduced_to_never_because_property_1_exists_in_multiple_constituents_and_is_private_in_some: i2(18032, 1, "The_intersection_0_was_reduced_to_never_because_property_1_exists_in_multiple_constituents_and_is_pr_18032", "The intersection '{0}' was reduced to 'never' because property '{1}' exists in multiple constituents and is private in some."), Type_0_is_not_assignable_to_type_1_as_required_for_computed_enum_member_values: i2(18033, 1, "Type_0_is_not_assignable_to_type_1_as_required_for_computed_enum_member_values_18033", "Type '{0}' is not assignable to type '{1}' as required for computed enum member values."), Specify_the_JSX_fragment_factory_function_to_use_when_targeting_react_JSX_emit_with_jsxFactory_compiler_option_is_specified_e_g_Fragment: i2(18034, 3, "Specify_the_JSX_fragment_factory_function_to_use_when_targeting_react_JSX_emit_with_jsxFactory_compi_18034", "Specify the JSX fragment factory function to use when targeting 'react' JSX emit with 'jsxFactory' compiler option is specified, e.g. 'Fragment'."), Invalid_value_for_jsxFragmentFactory_0_is_not_a_valid_identifier_or_qualified_name: i2(18035, 1, "Invalid_value_for_jsxFragmentFactory_0_is_not_a_valid_identifier_or_qualified_name_18035", "Invalid value for 'jsxFragmentFactory'. '{0}' is not a valid identifier or qualified-name."), Class_decorators_can_t_be_used_with_static_private_identifier_Consider_removing_the_experimental_decorator: i2(18036, 1, "Class_decorators_can_t_be_used_with_static_private_identifier_Consider_removing_the_experimental_dec_18036", "Class decorators can't be used with static private identifier. Consider removing the experimental decorator."), Await_expression_cannot_be_used_inside_a_class_static_block: i2(18037, 1, "Await_expression_cannot_be_used_inside_a_class_static_block_18037", "Await expression cannot be used inside a class static block."), For_await_loops_cannot_be_used_inside_a_class_static_block: i2(18038, 1, "For_await_loops_cannot_be_used_inside_a_class_static_block_18038", "'For await' loops cannot be used inside a class static block."), Invalid_use_of_0_It_cannot_be_used_inside_a_class_static_block: i2(18039, 1, "Invalid_use_of_0_It_cannot_be_used_inside_a_class_static_block_18039", "Invalid use of '{0}'. It cannot be used inside a class static block."), A_return_statement_cannot_be_used_inside_a_class_static_block: i2(18041, 1, "A_return_statement_cannot_be_used_inside_a_class_static_block_18041", "A 'return' statement cannot be used inside a class static block."), _0_is_a_type_and_cannot_be_imported_in_JavaScript_files_Use_1_in_a_JSDoc_type_annotation: i2(18042, 1, "_0_is_a_type_and_cannot_be_imported_in_JavaScript_files_Use_1_in_a_JSDoc_type_annotation_18042", "'{0}' is a type and cannot be imported in JavaScript files. Use '{1}' in a JSDoc type annotation."), Types_cannot_appear_in_export_declarations_in_JavaScript_files: i2(18043, 1, "Types_cannot_appear_in_export_declarations_in_JavaScript_files_18043", "Types cannot appear in export declarations in JavaScript files."), _0_is_automatically_exported_here: i2(18044, 3, "_0_is_automatically_exported_here_18044", "'{0}' is automatically exported here."), Properties_with_the_accessor_modifier_are_only_available_when_targeting_ECMAScript_2015_and_higher: i2(18045, 1, "Properties_with_the_accessor_modifier_are_only_available_when_targeting_ECMAScript_2015_and_higher_18045", "Properties with the 'accessor' modifier are only available when targeting ECMAScript 2015 and higher."), _0_is_of_type_unknown: i2(18046, 1, "_0_is_of_type_unknown_18046", "'{0}' is of type 'unknown'."), _0_is_possibly_null: i2(18047, 1, "_0_is_possibly_null_18047", "'{0}' is possibly 'null'."), _0_is_possibly_undefined: i2(18048, 1, "_0_is_possibly_undefined_18048", "'{0}' is possibly 'undefined'."), _0_is_possibly_null_or_undefined: i2(18049, 1, "_0_is_possibly_null_or_undefined_18049", "'{0}' is possibly 'null' or 'undefined'."), The_value_0_cannot_be_used_here: i2(18050, 1, "The_value_0_cannot_be_used_here_18050", "The value '{0}' cannot be used here."), Compiler_option_0_cannot_be_given_an_empty_string: i2(18051, 1, "Compiler_option_0_cannot_be_given_an_empty_string_18051", "Compiler option '{0}' cannot be given an empty string.") };
        } });
        function fr(e) {
          return e >= 79;
        }
        function qT(e) {
          return e === 31 || fr(e);
        }
        function D_(e, t) {
          if (e < t[0])
            return false;
          let r = 0, s = t.length, f;
          for (; r + 1 < s; ) {
            if (f = r + (s - r) / 2, f -= f % 2, t[f] <= e && e <= t[f + 1])
              return true;
            e < t[f] ? s = f : r = f + 2;
          }
          return false;
        }
        function UT(e, t) {
          return t >= 2 ? D_(e, ZT) : t === 1 ? D_(e, YT) : D_(e, KT);
        }
        function _A(e, t) {
          return t >= 2 ? D_(e, eS) : t === 1 ? D_(e, QT) : D_(e, XT);
        }
        function cA(e) {
          let t = [];
          return e.forEach((r, s) => {
            t[r] = s;
          }), t;
        }
        function Br(e) {
          return nS[e];
        }
        function _l(e) {
          return Ty.get(e);
        }
        function Kp(e) {
          let t = [], r = 0, s = 0;
          for (; r < e.length; ) {
            let f = e.charCodeAt(r);
            switch (r++, f) {
              case 13:
                e.charCodeAt(r) === 10 && r++;
              case 10:
                t.push(s), s = r;
                break;
              default:
                f > 127 && un(f) && (t.push(s), s = r);
                break;
            }
          }
          return t.push(s), t;
        }
        function lA(e, t, r, s) {
          return e.getPositionOfLineAndCharacter ? e.getPositionOfLineAndCharacter(t, r, s) : dy(ss(e), t, r, e.text, s);
        }
        function dy(e, t, r, s, f) {
          (t < 0 || t >= e.length) && (f ? t = t < 0 ? 0 : t >= e.length ? e.length - 1 : t : Y.fail(`Bad line number. Line: ${t}, lineStarts.length: ${e.length} , line map is correct? ${s !== void 0 ? ke(e, Kp(s)) : "unknown"}`));
          let x = e[t] + r;
          return f ? x > e[t + 1] ? e[t + 1] : typeof s == "string" && x > s.length ? s.length : x : (t < e.length - 1 ? Y.assert(x < e[t + 1]) : s !== void 0 && Y.assert(x <= s.length), x);
        }
        function ss(e) {
          return e.lineMap || (e.lineMap = Kp(e.text));
        }
        function my(e, t) {
          let r = k_(e, t);
          return { line: r, character: t - e[r] };
        }
        function k_(e, t, r) {
          let s = Ya(e, t, rr, Vr, r);
          return s < 0 && (s = ~s - 1, Y.assert(s !== -1, "position cannot precede the beginning of the file")), s;
        }
        function I_(e, t, r) {
          if (t === r)
            return 0;
          let s = ss(e), f = Math.min(t, r), x = f === r, w = x ? t : r, A = k_(s, f), g = k_(s, w, A);
          return x ? A - g : g - A;
        }
        function Ls(e, t) {
          return my(ss(e), t);
        }
        function os(e) {
          return N_(e) || un(e);
        }
        function N_(e) {
          return e === 32 || e === 9 || e === 11 || e === 12 || e === 160 || e === 133 || e === 5760 || e >= 8192 && e <= 8203 || e === 8239 || e === 8287 || e === 12288 || e === 65279;
        }
        function un(e) {
          return e === 10 || e === 13 || e === 8232 || e === 8233;
        }
        function O_(e) {
          return e >= 48 && e <= 57;
        }
        function Xp(e) {
          return O_(e) || e >= 65 && e <= 70 || e >= 97 && e <= 102;
        }
        function uA(e) {
          return e <= 1114111;
        }
        function hy(e) {
          return e >= 48 && e <= 55;
        }
        function pA(e, t) {
          let r = e.charCodeAt(t);
          switch (r) {
            case 13:
            case 10:
            case 9:
            case 11:
            case 12:
            case 32:
            case 47:
            case 60:
            case 124:
            case 61:
            case 62:
              return true;
            case 35:
              return t === 0;
            default:
              return r > 127;
          }
        }
        function Ar(e, t, r, s, f) {
          if (hs(t))
            return t;
          let x = false;
          for (; ; ) {
            let w = e.charCodeAt(t);
            switch (w) {
              case 13:
                e.charCodeAt(t + 1) === 10 && t++;
              case 10:
                if (t++, r)
                  return t;
                x = !!f;
                continue;
              case 9:
              case 11:
              case 12:
              case 32:
                t++;
                continue;
              case 47:
                if (s)
                  break;
                if (e.charCodeAt(t + 1) === 47) {
                  for (t += 2; t < e.length && !un(e.charCodeAt(t)); )
                    t++;
                  x = false;
                  continue;
                }
                if (e.charCodeAt(t + 1) === 42) {
                  for (t += 2; t < e.length; ) {
                    if (e.charCodeAt(t) === 42 && e.charCodeAt(t + 1) === 47) {
                      t += 2;
                      break;
                    }
                    t++;
                  }
                  x = false;
                  continue;
                }
                break;
              case 60:
              case 124:
              case 61:
              case 62:
                if (Co(e, t)) {
                  t = M_(e, t), x = false;
                  continue;
                }
                break;
              case 35:
                if (t === 0 && gy(e, t)) {
                  t = yy(e, t), x = false;
                  continue;
                }
                break;
              case 42:
                if (x) {
                  t++, x = false;
                  continue;
                }
                break;
              default:
                if (w > 127 && os(w)) {
                  t++;
                  continue;
                }
                break;
            }
            return t;
          }
        }
        function Co(e, t) {
          if (Y.assert(t >= 0), t === 0 || un(e.charCodeAt(t - 1))) {
            let r = e.charCodeAt(t);
            if (t + ll < e.length) {
              for (let s = 0; s < ll; s++)
                if (e.charCodeAt(t + s) !== r)
                  return false;
              return r === 61 || e.charCodeAt(t + ll) === 32;
            }
          }
          return false;
        }
        function M_(e, t, r) {
          r && r(ve.Merge_conflict_marker_encountered, t, ll);
          let s = e.charCodeAt(t), f = e.length;
          if (s === 60 || s === 62)
            for (; t < f && !un(e.charCodeAt(t)); )
              t++;
          else
            for (Y.assert(s === 124 || s === 61); t < f; ) {
              let x = e.charCodeAt(t);
              if ((x === 61 || x === 62) && x !== s && Co(e, t))
                break;
              t++;
            }
          return t;
        }
        function gy(e, t) {
          return Y.assert(t === 0), Qp.test(e);
        }
        function yy(e, t) {
          let r = Qp.exec(e)[0];
          return t = t + r.length, t;
        }
        function Yp(e, t, r, s, f, x, w) {
          let A, g, B, N, X = false, F = s, $ = w;
          if (r === 0) {
            F = true;
            let ae = GT(t);
            ae && (r = ae.length);
          }
          e:
            for (; r >= 0 && r < t.length; ) {
              let ae = t.charCodeAt(r);
              switch (ae) {
                case 13:
                  t.charCodeAt(r + 1) === 10 && r++;
                case 10:
                  if (r++, s)
                    break e;
                  F = true, X && (N = true);
                  continue;
                case 9:
                case 11:
                case 12:
                case 32:
                  r++;
                  continue;
                case 47:
                  let Te = t.charCodeAt(r + 1), Se = false;
                  if (Te === 47 || Te === 42) {
                    let Ye = Te === 47 ? 2 : 3, Ne = r;
                    if (r += 2, Te === 47)
                      for (; r < t.length; ) {
                        if (un(t.charCodeAt(r))) {
                          Se = true;
                          break;
                        }
                        r++;
                      }
                    else
                      for (; r < t.length; ) {
                        if (t.charCodeAt(r) === 42 && t.charCodeAt(r + 1) === 47) {
                          r += 2;
                          break;
                        }
                        r++;
                      }
                    if (F) {
                      if (X && ($ = f(A, g, B, N, x, $), !e && $))
                        return $;
                      A = Ne, g = r, B = Ye, N = Se, X = true;
                    }
                    continue;
                  }
                  break e;
                default:
                  if (ae > 127 && os(ae)) {
                    X && un(ae) && (N = true), r++;
                    continue;
                  }
                  break e;
              }
            }
          return X && ($ = f(A, g, B, N, x, $)), $;
        }
        function fA(e, t, r, s) {
          return Yp(false, e, t, false, r, s);
        }
        function dA(e, t, r, s) {
          return Yp(false, e, t, true, r, s);
        }
        function zT(e, t, r, s, f) {
          return Yp(true, e, t, false, r, s, f);
        }
        function WT(e, t, r, s, f) {
          return Yp(true, e, t, true, r, s, f);
        }
        function VT(e, t, r, s, f) {
          let x = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : [];
          return x.push({ kind: r, pos: e, end: t, hasTrailingNewLine: s }), x;
        }
        function Ao(e, t) {
          return zT(e, t, VT, void 0, void 0);
        }
        function HT(e, t) {
          return WT(e, t, VT, void 0, void 0);
        }
        function GT(e) {
          let t = Qp.exec(e);
          if (t)
            return t[0];
        }
        function Wn(e, t) {
          return e >= 65 && e <= 90 || e >= 97 && e <= 122 || e === 36 || e === 95 || e > 127 && UT(e, t);
        }
        function Rs(e, t, r) {
          return e >= 65 && e <= 90 || e >= 97 && e <= 122 || e >= 48 && e <= 57 || e === 36 || e === 95 || (r === 1 ? e === 45 || e === 58 : false) || e > 127 && _A(e, t);
        }
        function vy(e, t, r) {
          let s = ii(e, 0);
          if (!Wn(s, t))
            return false;
          for (let f = yi(s); f < e.length; f += yi(s))
            if (!Rs(s = ii(e, f), t, r))
              return false;
          return true;
        }
        function Po(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, s = arguments.length > 3 ? arguments[3] : void 0, f = arguments.length > 4 ? arguments[4] : void 0, x = arguments.length > 5 ? arguments[5] : void 0, w = arguments.length > 6 ? arguments[6] : void 0;
          var A = s, g, B, N, X, F, $, ae, Te, Se = 0;
          ue(A, x, w);
          var Ye = { getStartPos: () => N, getTextPos: () => g, getToken: () => F, getTokenPos: () => X, getTokenText: () => A.substring(X, g), getTokenValue: () => $, hasUnicodeEscape: () => (ae & 1024) !== 0, hasExtendedUnicodeEscape: () => (ae & 8) !== 0, hasPrecedingLineBreak: () => (ae & 1) !== 0, hasPrecedingJSDocComment: () => (ae & 2) !== 0, isIdentifier: () => F === 79 || F > 116, isReservedWord: () => F >= 81 && F <= 116, isUnterminated: () => (ae & 4) !== 0, getCommentDirectives: () => Te, getNumericLiteralFlags: () => ae & 1008, getTokenFlags: () => ae, reScanGreaterToken: Sn, reScanAsteriskEqualsToken: In, reScanSlashToken: pr, reScanTemplateToken: Nn, reScanTemplateHeadOrNoSubstitutionTemplate: ar, scanJsxIdentifier: nr, scanJsxAttributeValue: br, reScanJsxAttributeValue: Kr, reScanJsxToken: oi, reScanLessThanToken: cr, reScanHashToken: $r, reScanQuestionToken: hr, reScanInvalidIdentifier: Gr, scanJsxToken: On, scanJsDocToken: wa, scan: Ur, getText: Ca, clearCommentDirectives: St, setText: ue, setScriptTarget: _t, setLanguageVariant: ft, setOnError: He, setTextPos: Kt, setInJSDocType: zt, tryScan: _i, lookAhead: Mn, scanRange: Ki };
          return Y.isDebugging && Object.defineProperty(Ye, "__debugShowCurrentPositionInText", { get: () => {
            let xe = Ye.getText();
            return xe.slice(0, Ye.getStartPos()) + "║" + xe.slice(Ye.getStartPos());
          } }), Ye;
          function Ne(xe) {
            let Le = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : g, Re = arguments.length > 2 ? arguments[2] : void 0;
            if (f) {
              let ot = g;
              g = Le, f(xe, Re || 0), g = ot;
            }
          }
          function oe() {
            let xe = g, Le = false, Re = false, ot = "";
            for (; ; ) {
              let Ct = A.charCodeAt(g);
              if (Ct === 95) {
                ae |= 512, Le ? (Le = false, Re = true, ot += A.substring(xe, g)) : Ne(Re ? ve.Multiple_consecutive_numeric_separators_are_not_permitted : ve.Numeric_separators_are_not_allowed_here, g, 1), g++, xe = g;
                continue;
              }
              if (O_(Ct)) {
                Le = true, Re = false, g++;
                continue;
              }
              break;
            }
            return A.charCodeAt(g - 1) === 95 && Ne(ve.Numeric_separators_are_not_allowed_here, g - 1, 1), ot + A.substring(xe, g);
          }
          function Ve() {
            let xe = g, Le = oe(), Re, ot;
            A.charCodeAt(g) === 46 && (g++, Re = oe());
            let Ct = g;
            if (A.charCodeAt(g) === 69 || A.charCodeAt(g) === 101) {
              g++, ae |= 16, (A.charCodeAt(g) === 43 || A.charCodeAt(g) === 45) && g++;
              let It = g, Mr = oe();
              Mr ? (ot = A.substring(Ct, It) + Mr, Ct = g) : Ne(ve.Digit_expected);
            }
            let Mt;
            if (ae & 512 ? (Mt = Le, Re && (Mt += "." + Re), ot && (Mt += ot)) : Mt = A.substring(xe, Ct), Re !== void 0 || ae & 16)
              return pt(xe, Re === void 0 && !!(ae & 16)), { type: 8, value: "" + +Mt };
            {
              $ = Mt;
              let It = dn();
              return pt(xe), { type: It, value: $ };
            }
          }
          function pt(xe, Le) {
            if (!Wn(ii(A, g), e))
              return;
            let Re = g, { length: ot } = an();
            ot === 1 && A[Re] === "n" ? Ne(Le ? ve.A_bigint_literal_cannot_use_exponential_notation : ve.A_bigint_literal_must_be_an_integer, xe, Re - xe + 1) : (Ne(ve.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal, Re, ot), g = Re);
          }
          function Gt() {
            let xe = g;
            for (; hy(A.charCodeAt(g)); )
              g++;
            return +A.substring(xe, g);
          }
          function Nt(xe, Le) {
            let Re = er(xe, false, Le);
            return Re ? parseInt(Re, 16) : -1;
          }
          function Xt(xe, Le) {
            return er(xe, true, Le);
          }
          function er(xe, Le, Re) {
            let ot = [], Ct = false, Mt = false;
            for (; ot.length < xe || Le; ) {
              let It = A.charCodeAt(g);
              if (Re && It === 95) {
                ae |= 512, Ct ? (Ct = false, Mt = true) : Ne(Mt ? ve.Multiple_consecutive_numeric_separators_are_not_permitted : ve.Numeric_separators_are_not_allowed_here, g, 1), g++;
                continue;
              }
              if (Ct = Re, It >= 65 && It <= 70)
                It += 97 - 65;
              else if (!(It >= 48 && It <= 57 || It >= 97 && It <= 102))
                break;
              ot.push(It), g++, Mt = false;
            }
            return ot.length < xe && (ot = []), A.charCodeAt(g - 1) === 95 && Ne(ve.Numeric_separators_are_not_allowed_here, g - 1, 1), String.fromCharCode(...ot);
          }
          function Tn() {
            let xe = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false, Le = A.charCodeAt(g);
            g++;
            let Re = "", ot = g;
            for (; ; ) {
              if (g >= B) {
                Re += A.substring(ot, g), ae |= 4, Ne(ve.Unterminated_string_literal);
                break;
              }
              let Ct = A.charCodeAt(g);
              if (Ct === Le) {
                Re += A.substring(ot, g), g++;
                break;
              }
              if (Ct === 92 && !xe) {
                Re += A.substring(ot, g), Re += Gi(), ot = g;
                continue;
              }
              if (un(Ct) && !xe) {
                Re += A.substring(ot, g), ae |= 4, Ne(ve.Unterminated_string_literal);
                break;
              }
              g++;
            }
            return Re;
          }
          function Hr(xe) {
            let Le = A.charCodeAt(g) === 96;
            g++;
            let Re = g, ot = "", Ct;
            for (; ; ) {
              if (g >= B) {
                ot += A.substring(Re, g), ae |= 4, Ne(ve.Unterminated_template_literal), Ct = Le ? 14 : 17;
                break;
              }
              let Mt = A.charCodeAt(g);
              if (Mt === 96) {
                ot += A.substring(Re, g), g++, Ct = Le ? 14 : 17;
                break;
              }
              if (Mt === 36 && g + 1 < B && A.charCodeAt(g + 1) === 123) {
                ot += A.substring(Re, g), g += 2, Ct = Le ? 15 : 16;
                break;
              }
              if (Mt === 92) {
                ot += A.substring(Re, g), ot += Gi(xe), Re = g;
                continue;
              }
              if (Mt === 13) {
                ot += A.substring(Re, g), g++, g < B && A.charCodeAt(g) === 10 && g++, ot += `
`, Re = g;
                continue;
              }
              g++;
            }
            return Y.assert(Ct !== void 0), $ = ot, Ct;
          }
          function Gi(xe) {
            let Le = g;
            if (g++, g >= B)
              return Ne(ve.Unexpected_end_of_text), "";
            let Re = A.charCodeAt(g);
            switch (g++, Re) {
              case 48:
                return xe && g < B && O_(A.charCodeAt(g)) ? (g++, ae |= 2048, A.substring(Le, g)) : "\0";
              case 98:
                return "\b";
              case 116:
                return "	";
              case 110:
                return `
`;
              case 118:
                return "\v";
              case 102:
                return "\f";
              case 114:
                return "\r";
              case 39:
                return "'";
              case 34:
                return '"';
              case 117:
                if (xe) {
                  for (let ot = g; ot < g + 4; ot++)
                    if (ot < B && !Xp(A.charCodeAt(ot)) && A.charCodeAt(ot) !== 123)
                      return g = ot, ae |= 2048, A.substring(Le, g);
                }
                if (g < B && A.charCodeAt(g) === 123) {
                  if (g++, xe && !Xp(A.charCodeAt(g)))
                    return ae |= 2048, A.substring(Le, g);
                  if (xe) {
                    let ot = g, Ct = Xt(1, false), Mt = Ct ? parseInt(Ct, 16) : -1;
                    if (!uA(Mt) || A.charCodeAt(g) !== 125)
                      return ae |= 2048, A.substring(Le, g);
                    g = ot;
                  }
                  return ae |= 8, fn();
                }
                return ae |= 1024, pn(4);
              case 120:
                if (xe)
                  if (Xp(A.charCodeAt(g))) {
                    if (!Xp(A.charCodeAt(g + 1)))
                      return g++, ae |= 2048, A.substring(Le, g);
                  } else
                    return ae |= 2048, A.substring(Le, g);
                return pn(2);
              case 13:
                g < B && A.charCodeAt(g) === 10 && g++;
              case 10:
              case 8232:
              case 8233:
                return "";
              default:
                return String.fromCharCode(Re);
            }
          }
          function pn(xe) {
            let Le = Nt(xe, false);
            return Le >= 0 ? String.fromCharCode(Le) : (Ne(ve.Hexadecimal_digit_expected), "");
          }
          function fn() {
            let xe = Xt(1, false), Le = xe ? parseInt(xe, 16) : -1, Re = false;
            return Le < 0 ? (Ne(ve.Hexadecimal_digit_expected), Re = true) : Le > 1114111 && (Ne(ve.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive), Re = true), g >= B ? (Ne(ve.Unexpected_end_of_text), Re = true) : A.charCodeAt(g) === 125 ? g++ : (Ne(ve.Unterminated_Unicode_escape_sequence), Re = true), Re ? "" : by(Le);
          }
          function Ut() {
            if (g + 5 < B && A.charCodeAt(g + 1) === 117) {
              let xe = g;
              g += 2;
              let Le = Nt(4, false);
              return g = xe, Le;
            }
            return -1;
          }
          function kn() {
            if (ii(A, g + 1) === 117 && ii(A, g + 2) === 123) {
              let xe = g;
              g += 3;
              let Le = Xt(1, false), Re = Le ? parseInt(Le, 16) : -1;
              return g = xe, Re;
            }
            return -1;
          }
          function an() {
            let xe = "", Le = g;
            for (; g < B; ) {
              let Re = ii(A, g);
              if (Rs(Re, e))
                g += yi(Re);
              else if (Re === 92) {
                if (Re = kn(), Re >= 0 && Rs(Re, e)) {
                  g += 3, ae |= 8, xe += fn(), Le = g;
                  continue;
                }
                if (Re = Ut(), !(Re >= 0 && Rs(Re, e)))
                  break;
                ae |= 1024, xe += A.substring(Le, g), xe += by(Re), g += 6, Le = g;
              } else
                break;
            }
            return xe += A.substring(Le, g), xe;
          }
          function mr() {
            let xe = $.length;
            if (xe >= 2 && xe <= 12) {
              let Le = $.charCodeAt(0);
              if (Le >= 97 && Le <= 122) {
                let Re = $T.get($);
                if (Re !== void 0)
                  return F = Re;
              }
            }
            return F = 79;
          }
          function $i(xe) {
            let Le = "", Re = false, ot = false;
            for (; ; ) {
              let Ct = A.charCodeAt(g);
              if (Ct === 95) {
                ae |= 512, Re ? (Re = false, ot = true) : Ne(ot ? ve.Multiple_consecutive_numeric_separators_are_not_permitted : ve.Numeric_separators_are_not_allowed_here, g, 1), g++;
                continue;
              }
              if (Re = true, !O_(Ct) || Ct - 48 >= xe)
                break;
              Le += A[g], g++, ot = false;
            }
            return A.charCodeAt(g - 1) === 95 && Ne(ve.Numeric_separators_are_not_allowed_here, g - 1, 1), Le;
          }
          function dn() {
            return A.charCodeAt(g) === 110 ? ($ += "n", ae & 384 && ($ = Hf($) + "n"), g++, 9) : ($ = "" + (ae & 128 ? parseInt($.slice(2), 2) : ae & 256 ? parseInt($.slice(2), 8) : +$), 8);
          }
          function Ur() {
            N = g, ae = 0;
            let xe = false;
            for (; ; ) {
              if (X = g, g >= B)
                return F = 1;
              let Le = ii(A, g);
              if (Le === 35 && g === 0 && gy(A, g)) {
                if (g = yy(A, g), t)
                  continue;
                return F = 6;
              }
              switch (Le) {
                case 10:
                case 13:
                  if (ae |= 1, t) {
                    g++;
                    continue;
                  } else
                    return Le === 13 && g + 1 < B && A.charCodeAt(g + 1) === 10 ? g += 2 : g++, F = 4;
                case 9:
                case 11:
                case 12:
                case 32:
                case 160:
                case 5760:
                case 8192:
                case 8193:
                case 8194:
                case 8195:
                case 8196:
                case 8197:
                case 8198:
                case 8199:
                case 8200:
                case 8201:
                case 8202:
                case 8203:
                case 8239:
                case 8287:
                case 12288:
                case 65279:
                  if (t) {
                    g++;
                    continue;
                  } else {
                    for (; g < B && N_(A.charCodeAt(g)); )
                      g++;
                    return F = 5;
                  }
                case 33:
                  return A.charCodeAt(g + 1) === 61 ? A.charCodeAt(g + 2) === 61 ? (g += 3, F = 37) : (g += 2, F = 35) : (g++, F = 53);
                case 34:
                case 39:
                  return $ = Tn(), F = 10;
                case 96:
                  return F = Hr(false);
                case 37:
                  return A.charCodeAt(g + 1) === 61 ? (g += 2, F = 69) : (g++, F = 44);
                case 38:
                  return A.charCodeAt(g + 1) === 38 ? A.charCodeAt(g + 2) === 61 ? (g += 3, F = 76) : (g += 2, F = 55) : A.charCodeAt(g + 1) === 61 ? (g += 2, F = 73) : (g++, F = 50);
                case 40:
                  return g++, F = 20;
                case 41:
                  return g++, F = 21;
                case 42:
                  if (A.charCodeAt(g + 1) === 61)
                    return g += 2, F = 66;
                  if (A.charCodeAt(g + 1) === 42)
                    return A.charCodeAt(g + 2) === 61 ? (g += 3, F = 67) : (g += 2, F = 42);
                  if (g++, Se && !xe && ae & 1) {
                    xe = true;
                    continue;
                  }
                  return F = 41;
                case 43:
                  return A.charCodeAt(g + 1) === 43 ? (g += 2, F = 45) : A.charCodeAt(g + 1) === 61 ? (g += 2, F = 64) : (g++, F = 39);
                case 44:
                  return g++, F = 27;
                case 45:
                  return A.charCodeAt(g + 1) === 45 ? (g += 2, F = 46) : A.charCodeAt(g + 1) === 61 ? (g += 2, F = 65) : (g++, F = 40);
                case 46:
                  return O_(A.charCodeAt(g + 1)) ? ($ = Ve().value, F = 8) : A.charCodeAt(g + 1) === 46 && A.charCodeAt(g + 2) === 46 ? (g += 3, F = 25) : (g++, F = 24);
                case 47:
                  if (A.charCodeAt(g + 1) === 47) {
                    for (g += 2; g < B && !un(A.charCodeAt(g)); )
                      g++;
                    if (Te = Zt(Te, A.slice(X, g), tS, X), t)
                      continue;
                    return F = 2;
                  }
                  if (A.charCodeAt(g + 1) === 42) {
                    g += 2, A.charCodeAt(g) === 42 && A.charCodeAt(g + 1) !== 47 && (ae |= 2);
                    let Mr = false, gr = X;
                    for (; g < B; ) {
                      let Ln = A.charCodeAt(g);
                      if (Ln === 42 && A.charCodeAt(g + 1) === 47) {
                        g += 2, Mr = true;
                        break;
                      }
                      g++, un(Ln) && (gr = g, ae |= 1);
                    }
                    if (Te = Zt(Te, A.slice(gr, g), rS, gr), Mr || Ne(ve.Asterisk_Slash_expected), t)
                      continue;
                    return Mr || (ae |= 4), F = 3;
                  }
                  return A.charCodeAt(g + 1) === 61 ? (g += 2, F = 68) : (g++, F = 43);
                case 48:
                  if (g + 2 < B && (A.charCodeAt(g + 1) === 88 || A.charCodeAt(g + 1) === 120))
                    return g += 2, $ = Xt(1, true), $ || (Ne(ve.Hexadecimal_digit_expected), $ = "0"), $ = "0x" + $, ae |= 64, F = dn();
                  if (g + 2 < B && (A.charCodeAt(g + 1) === 66 || A.charCodeAt(g + 1) === 98))
                    return g += 2, $ = $i(2), $ || (Ne(ve.Binary_digit_expected), $ = "0"), $ = "0b" + $, ae |= 128, F = dn();
                  if (g + 2 < B && (A.charCodeAt(g + 1) === 79 || A.charCodeAt(g + 1) === 111))
                    return g += 2, $ = $i(8), $ || (Ne(ve.Octal_digit_expected), $ = "0"), $ = "0o" + $, ae |= 256, F = dn();
                  if (g + 1 < B && hy(A.charCodeAt(g + 1)))
                    return $ = "" + Gt(), ae |= 32, F = 8;
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                  return { type: F, value: $ } = Ve(), F;
                case 58:
                  return g++, F = 58;
                case 59:
                  return g++, F = 26;
                case 60:
                  if (Co(A, g)) {
                    if (g = M_(A, g, Ne), t)
                      continue;
                    return F = 7;
                  }
                  return A.charCodeAt(g + 1) === 60 ? A.charCodeAt(g + 2) === 61 ? (g += 3, F = 70) : (g += 2, F = 47) : A.charCodeAt(g + 1) === 61 ? (g += 2, F = 32) : r === 1 && A.charCodeAt(g + 1) === 47 && A.charCodeAt(g + 2) !== 42 ? (g += 2, F = 30) : (g++, F = 29);
                case 61:
                  if (Co(A, g)) {
                    if (g = M_(A, g, Ne), t)
                      continue;
                    return F = 7;
                  }
                  return A.charCodeAt(g + 1) === 61 ? A.charCodeAt(g + 2) === 61 ? (g += 3, F = 36) : (g += 2, F = 34) : A.charCodeAt(g + 1) === 62 ? (g += 2, F = 38) : (g++, F = 63);
                case 62:
                  if (Co(A, g)) {
                    if (g = M_(A, g, Ne), t)
                      continue;
                    return F = 7;
                  }
                  return g++, F = 31;
                case 63:
                  return A.charCodeAt(g + 1) === 46 && !O_(A.charCodeAt(g + 2)) ? (g += 2, F = 28) : A.charCodeAt(g + 1) === 63 ? A.charCodeAt(g + 2) === 61 ? (g += 3, F = 77) : (g += 2, F = 60) : (g++, F = 57);
                case 91:
                  return g++, F = 22;
                case 93:
                  return g++, F = 23;
                case 94:
                  return A.charCodeAt(g + 1) === 61 ? (g += 2, F = 78) : (g++, F = 52);
                case 123:
                  return g++, F = 18;
                case 124:
                  if (Co(A, g)) {
                    if (g = M_(A, g, Ne), t)
                      continue;
                    return F = 7;
                  }
                  return A.charCodeAt(g + 1) === 124 ? A.charCodeAt(g + 2) === 61 ? (g += 3, F = 75) : (g += 2, F = 56) : A.charCodeAt(g + 1) === 61 ? (g += 2, F = 74) : (g++, F = 51);
                case 125:
                  return g++, F = 19;
                case 126:
                  return g++, F = 54;
                case 64:
                  return g++, F = 59;
                case 92:
                  let Re = kn();
                  if (Re >= 0 && Wn(Re, e))
                    return g += 3, ae |= 8, $ = fn() + an(), F = mr();
                  let ot = Ut();
                  return ot >= 0 && Wn(ot, e) ? (g += 6, ae |= 1024, $ = String.fromCharCode(ot) + an(), F = mr()) : (Ne(ve.Invalid_character), g++, F = 0);
                case 35:
                  if (g !== 0 && A[g + 1] === "!")
                    return Ne(ve.can_only_be_used_at_the_start_of_a_file), g++, F = 0;
                  let Ct = ii(A, g + 1);
                  if (Ct === 92) {
                    g++;
                    let Mr = kn();
                    if (Mr >= 0 && Wn(Mr, e))
                      return g += 3, ae |= 8, $ = "#" + fn() + an(), F = 80;
                    let gr = Ut();
                    if (gr >= 0 && Wn(gr, e))
                      return g += 6, ae |= 1024, $ = "#" + String.fromCharCode(gr) + an(), F = 80;
                    g--;
                  }
                  return Wn(Ct, e) ? (g++, _r(Ct, e)) : ($ = "#", Ne(ve.Invalid_character, g++, yi(Le))), F = 80;
                default:
                  let Mt = _r(Le, e);
                  if (Mt)
                    return F = Mt;
                  if (N_(Le)) {
                    g += yi(Le);
                    continue;
                  } else if (un(Le)) {
                    ae |= 1, g += yi(Le);
                    continue;
                  }
                  let It = yi(Le);
                  return Ne(ve.Invalid_character, g, It), g += It, F = 0;
              }
            }
          }
          function Gr() {
            Y.assert(F === 0, "'reScanInvalidIdentifier' should only be called when the current token is 'SyntaxKind.Unknown'."), g = X = N, ae = 0;
            let xe = ii(A, g), Le = _r(xe, 99);
            return Le ? F = Le : (g += yi(xe), F);
          }
          function _r(xe, Le) {
            let Re = xe;
            if (Wn(Re, Le)) {
              for (g += yi(Re); g < B && Rs(Re = ii(A, g), Le); )
                g += yi(Re);
              return $ = A.substring(X, g), Re === 92 && ($ += an()), mr();
            }
          }
          function Sn() {
            if (F === 31) {
              if (A.charCodeAt(g) === 62)
                return A.charCodeAt(g + 1) === 62 ? A.charCodeAt(g + 2) === 61 ? (g += 3, F = 72) : (g += 2, F = 49) : A.charCodeAt(g + 1) === 61 ? (g += 2, F = 71) : (g++, F = 48);
              if (A.charCodeAt(g) === 61)
                return g++, F = 33;
            }
            return F;
          }
          function In() {
            return Y.assert(F === 66, "'reScanAsteriskEqualsToken' should only be called on a '*='"), g = X + 1, F = 63;
          }
          function pr() {
            if (F === 43 || F === 68) {
              let xe = X + 1, Le = false, Re = false;
              for (; ; ) {
                if (xe >= B) {
                  ae |= 4, Ne(ve.Unterminated_regular_expression_literal);
                  break;
                }
                let ot = A.charCodeAt(xe);
                if (un(ot)) {
                  ae |= 4, Ne(ve.Unterminated_regular_expression_literal);
                  break;
                }
                if (Le)
                  Le = false;
                else if (ot === 47 && !Re) {
                  xe++;
                  break;
                } else
                  ot === 91 ? Re = true : ot === 92 ? Le = true : ot === 93 && (Re = false);
                xe++;
              }
              for (; xe < B && Rs(A.charCodeAt(xe), e); )
                xe++;
              g = xe, $ = A.substring(X, g), F = 13;
            }
            return F;
          }
          function Zt(xe, Le, Re, ot) {
            let Ct = Or(nl(Le), Re);
            return Ct === void 0 ? xe : tr(xe, { range: { pos: ot, end: g }, type: Ct });
          }
          function Or(xe, Le) {
            let Re = Le.exec(xe);
            if (Re)
              switch (Re[1]) {
                case "ts-expect-error":
                  return 0;
                case "ts-ignore":
                  return 1;
              }
          }
          function Nn(xe) {
            return Y.assert(F === 19, "'reScanTemplateToken' should only be called on a '}'"), g = X, F = Hr(xe);
          }
          function ar() {
            return g = X, F = Hr(true);
          }
          function oi() {
            let xe = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
            return g = X = N, F = On(xe);
          }
          function cr() {
            return F === 47 ? (g = X + 1, F = 29) : F;
          }
          function $r() {
            return F === 80 ? (g = X + 1, F = 62) : F;
          }
          function hr() {
            return Y.assert(F === 60, "'reScanQuestionToken' should only be called on a '??'"), g = X + 1, F = 57;
          }
          function On() {
            let xe = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
            if (N = X = g, g >= B)
              return F = 1;
            let Le = A.charCodeAt(g);
            if (Le === 60)
              return A.charCodeAt(g + 1) === 47 ? (g += 2, F = 30) : (g++, F = 29);
            if (Le === 123)
              return g++, F = 18;
            let Re = 0;
            for (; g < B && (Le = A.charCodeAt(g), Le !== 123); ) {
              if (Le === 60) {
                if (Co(A, g))
                  return g = M_(A, g, Ne), F = 7;
                break;
              }
              if (Le === 62 && Ne(ve.Unexpected_token_Did_you_mean_or_gt, g, 1), Le === 125 && Ne(ve.Unexpected_token_Did_you_mean_or_rbrace, g, 1), un(Le) && Re === 0)
                Re = -1;
              else {
                if (!xe && un(Le) && Re > 0)
                  break;
                os(Le) || (Re = g);
              }
              g++;
            }
            return $ = A.substring(N, g), Re === -1 ? 12 : 11;
          }
          function nr() {
            if (fr(F)) {
              let xe = false;
              for (; g < B; ) {
                let Le = A.charCodeAt(g);
                if (Le === 45) {
                  $ += "-", g++;
                  continue;
                } else if (Le === 58 && !xe) {
                  $ += ":", g++, xe = true, F = 79;
                  continue;
                }
                let Re = g;
                if ($ += an(), g === Re)
                  break;
              }
              return $.slice(-1) === ":" && ($ = $.slice(0, -1), g--), mr();
            }
            return F;
          }
          function br() {
            switch (N = g, A.charCodeAt(g)) {
              case 34:
              case 39:
                return $ = Tn(true), F = 10;
              default:
                return Ur();
            }
          }
          function Kr() {
            return g = X = N, br();
          }
          function wa() {
            if (N = X = g, ae = 0, g >= B)
              return F = 1;
            let xe = ii(A, g);
            switch (g += yi(xe), xe) {
              case 9:
              case 11:
              case 12:
              case 32:
                for (; g < B && N_(A.charCodeAt(g)); )
                  g++;
                return F = 5;
              case 64:
                return F = 59;
              case 13:
                A.charCodeAt(g) === 10 && g++;
              case 10:
                return ae |= 1, F = 4;
              case 42:
                return F = 41;
              case 123:
                return F = 18;
              case 125:
                return F = 19;
              case 91:
                return F = 22;
              case 93:
                return F = 23;
              case 60:
                return F = 29;
              case 62:
                return F = 31;
              case 61:
                return F = 63;
              case 44:
                return F = 27;
              case 46:
                return F = 24;
              case 96:
                return F = 61;
              case 35:
                return F = 62;
              case 92:
                g--;
                let Le = kn();
                if (Le >= 0 && Wn(Le, e))
                  return g += 3, ae |= 8, $ = fn() + an(), F = mr();
                let Re = Ut();
                return Re >= 0 && Wn(Re, e) ? (g += 6, ae |= 1024, $ = String.fromCharCode(Re) + an(), F = mr()) : (g++, F = 0);
            }
            if (Wn(xe, e)) {
              let Le = xe;
              for (; g < B && Rs(Le = ii(A, g), e) || A.charCodeAt(g) === 45; )
                g += yi(Le);
              return $ = A.substring(X, g), Le === 92 && ($ += an()), F = mr();
            } else
              return F = 0;
          }
          function $n(xe, Le) {
            let Re = g, ot = N, Ct = X, Mt = F, It = $, Mr = ae, gr = xe();
            return (!gr || Le) && (g = Re, N = ot, X = Ct, F = Mt, $ = It, ae = Mr), gr;
          }
          function Ki(xe, Le, Re) {
            let ot = B, Ct = g, Mt = N, It = X, Mr = F, gr = $, Ln = ae, ys = Te;
            ue(A, xe, Le);
            let ci = Re();
            return B = ot, g = Ct, N = Mt, X = It, F = Mr, $ = gr, ae = Ln, Te = ys, ci;
          }
          function Mn(xe) {
            return $n(xe, true);
          }
          function _i(xe) {
            return $n(xe, false);
          }
          function Ca() {
            return A;
          }
          function St() {
            Te = void 0;
          }
          function ue(xe, Le, Re) {
            A = xe || "", B = Re === void 0 ? A.length : Le + Re, Kt(Le || 0);
          }
          function He(xe) {
            f = xe;
          }
          function _t(xe) {
            e = xe;
          }
          function ft(xe) {
            r = xe;
          }
          function Kt(xe) {
            Y.assert(xe >= 0), g = xe, N = xe, X = xe, F = 0, $ = void 0, ae = 0;
          }
          function zt(xe) {
            Se += xe ? 1 : -1;
          }
        }
        function yi(e) {
          return e >= 65536 ? 2 : 1;
        }
        function mA(e) {
          if (Y.assert(0 <= e && e <= 1114111), e <= 65535)
            return String.fromCharCode(e);
          let t = Math.floor((e - 65536) / 1024) + 55296, r = (e - 65536) % 1024 + 56320;
          return String.fromCharCode(t, r);
        }
        function by(e) {
          return iS(e);
        }
        var cl, $T, Ty, KT, XT, YT, QT, ZT, eS, tS, rS, nS, ll, Qp, ii, iS, hA = D({ "src/compiler/scanner.ts"() {
          nn(), cl = { abstract: 126, accessor: 127, any: 131, as: 128, asserts: 129, assert: 130, bigint: 160, boolean: 134, break: 81, case: 82, catch: 83, class: 84, continue: 86, const: 85, constructor: 135, debugger: 87, declare: 136, default: 88, delete: 89, do: 90, else: 91, enum: 92, export: 93, extends: 94, false: 95, finally: 96, for: 97, from: 158, function: 98, get: 137, if: 99, implements: 117, import: 100, in: 101, infer: 138, instanceof: 102, interface: 118, intrinsic: 139, is: 140, keyof: 141, let: 119, module: 142, namespace: 143, never: 144, new: 103, null: 104, number: 148, object: 149, package: 120, private: 121, protected: 122, public: 123, override: 161, out: 145, readonly: 146, require: 147, global: 159, return: 105, satisfies: 150, set: 151, static: 124, string: 152, super: 106, switch: 107, symbol: 153, this: 108, throw: 109, true: 110, try: 111, type: 154, typeof: 112, undefined: 155, unique: 156, unknown: 157, var: 113, void: 114, while: 115, with: 116, yield: 125, async: 132, await: 133, of: 162 }, $T = new Map(Object.entries(cl)), Ty = new Map(Object.entries(Object.assign(Object.assign({}, cl), {}, { "{": 18, "}": 19, "(": 20, ")": 21, "[": 22, "]": 23, ".": 24, "...": 25, ";": 26, ",": 27, "<": 29, ">": 31, "<=": 32, ">=": 33, "==": 34, "!=": 35, "===": 36, "!==": 37, "=>": 38, "+": 39, "-": 40, "**": 42, "*": 41, "/": 43, "%": 44, "++": 45, "--": 46, "<<": 47, "</": 30, ">>": 48, ">>>": 49, "&": 50, "|": 51, "^": 52, "!": 53, "~": 54, "&&": 55, "||": 56, "?": 57, "??": 60, "?.": 28, ":": 58, "=": 63, "+=": 64, "-=": 65, "*=": 66, "**=": 67, "/=": 68, "%=": 69, "<<=": 70, ">>=": 71, ">>>=": 72, "&=": 73, "|=": 74, "^=": 78, "||=": 75, "&&=": 76, "??=": 77, "@": 59, "#": 62, "`": 61 }))), KT = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500], XT = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1155, 1158, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768, 1770, 1773, 1776, 1788, 1808, 1836, 1840, 1866, 1920, 1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388, 2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2562, 2562, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2649, 2652, 2654, 2654, 2662, 2676, 2689, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2784, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2876, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3805, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3946, 3953, 3972, 3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153, 4160, 4169, 4176, 4185, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6313, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12346, 12353, 12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075, 65076, 65101, 65103, 65136, 65138, 65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500], YT = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6e3, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43e3, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500], QT = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6e3, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43e3, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500], ZT = [65, 90, 97, 122, 170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 895, 895, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1327, 1329, 1366, 1369, 1369, 1376, 1416, 1488, 1514, 1519, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2144, 2154, 2208, 2228, 2230, 2237, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2432, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2556, 2556, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2809, 2809, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3133, 3133, 3160, 3162, 3168, 3169, 3200, 3200, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3412, 3414, 3423, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3718, 3722, 3724, 3747, 3749, 3749, 3751, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5880, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6e3, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6264, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6430, 6480, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7401, 7404, 7406, 7411, 7413, 7414, 7418, 7418, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12443, 12447, 12449, 12538, 12540, 12543, 12549, 12591, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40943, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42653, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42943, 42946, 42950, 42999, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43261, 43262, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43488, 43492, 43494, 43503, 43514, 43518, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43646, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43879, 43888, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 65856, 65908, 66176, 66204, 66208, 66256, 66304, 66335, 66349, 66378, 66384, 66421, 66432, 66461, 66464, 66499, 66504, 66511, 66513, 66517, 66560, 66717, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669, 67680, 67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897, 67968, 68023, 68030, 68031, 68096, 68096, 68112, 68115, 68117, 68119, 68121, 68149, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68324, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 68736, 68786, 68800, 68850, 68864, 68899, 69376, 69404, 69415, 69415, 69424, 69445, 69600, 69622, 69635, 69687, 69763, 69807, 69840, 69864, 69891, 69926, 69956, 69956, 69968, 70002, 70006, 70006, 70019, 70066, 70081, 70084, 70106, 70106, 70108, 70108, 70144, 70161, 70163, 70187, 70272, 70278, 70280, 70280, 70282, 70285, 70287, 70301, 70303, 70312, 70320, 70366, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70461, 70461, 70480, 70480, 70493, 70497, 70656, 70708, 70727, 70730, 70751, 70751, 70784, 70831, 70852, 70853, 70855, 70855, 71040, 71086, 71128, 71131, 71168, 71215, 71236, 71236, 71296, 71338, 71352, 71352, 71424, 71450, 71680, 71723, 71840, 71903, 71935, 71935, 72096, 72103, 72106, 72144, 72161, 72161, 72163, 72163, 72192, 72192, 72203, 72242, 72250, 72250, 72272, 72272, 72284, 72329, 72349, 72349, 72384, 72440, 72704, 72712, 72714, 72750, 72768, 72768, 72818, 72847, 72960, 72966, 72968, 72969, 72971, 73008, 73030, 73030, 73056, 73061, 73063, 73064, 73066, 73097, 73112, 73112, 73440, 73458, 73728, 74649, 74752, 74862, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92766, 92880, 92909, 92928, 92975, 92992, 92995, 93027, 93047, 93053, 93071, 93760, 93823, 93952, 94026, 94032, 94032, 94099, 94111, 94176, 94177, 94179, 94179, 94208, 100343, 100352, 101106, 110592, 110878, 110928, 110930, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 123136, 123180, 123191, 123197, 123214, 123214, 123584, 123627, 124928, 125124, 125184, 125251, 125259, 125259, 126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500, 126503, 126503, 126505, 126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530, 126530, 126535, 126535, 126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546, 126548, 126548, 126551, 126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559, 126559, 126561, 126562, 126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126590, 126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101], eS = [48, 57, 65, 90, 95, 95, 97, 122, 170, 170, 181, 181, 183, 183, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 895, 895, 902, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1327, 1329, 1366, 1369, 1369, 1376, 1416, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1519, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2045, 2045, 2048, 2093, 2112, 2139, 2144, 2154, 2208, 2228, 2230, 2237, 2259, 2273, 2275, 2403, 2406, 2415, 2417, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2556, 2556, 2558, 2558, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2809, 2815, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3072, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3162, 3168, 3171, 3174, 3183, 3200, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3328, 3331, 3333, 3340, 3342, 3344, 3346, 3396, 3398, 3400, 3402, 3406, 3412, 3415, 3423, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3558, 3567, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3718, 3722, 3724, 3747, 3749, 3749, 3751, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4969, 4977, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5880, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6e3, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6264, 6272, 6314, 6320, 6389, 6400, 6430, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6832, 6845, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7376, 7378, 7380, 7418, 7424, 7673, 7675, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12447, 12449, 12538, 12540, 12543, 12549, 12591, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40943, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42737, 42775, 42783, 42786, 42888, 42891, 42943, 42946, 42950, 42999, 43047, 43072, 43123, 43136, 43205, 43216, 43225, 43232, 43255, 43259, 43259, 43261, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43488, 43518, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43879, 43888, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65071, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 65856, 65908, 66045, 66045, 66176, 66204, 66208, 66256, 66272, 66272, 66304, 66335, 66349, 66378, 66384, 66426, 66432, 66461, 66464, 66499, 66504, 66511, 66513, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669, 67680, 67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897, 67968, 68023, 68030, 68031, 68096, 68099, 68101, 68102, 68108, 68115, 68117, 68119, 68121, 68149, 68152, 68154, 68159, 68159, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68326, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 68736, 68786, 68800, 68850, 68864, 68903, 68912, 68921, 69376, 69404, 69415, 69415, 69424, 69456, 69600, 69622, 69632, 69702, 69734, 69743, 69759, 69818, 69840, 69864, 69872, 69881, 69888, 69940, 69942, 69951, 69956, 69958, 69968, 70003, 70006, 70006, 70016, 70084, 70089, 70092, 70096, 70106, 70108, 70108, 70144, 70161, 70163, 70199, 70206, 70206, 70272, 70278, 70280, 70280, 70282, 70285, 70287, 70301, 70303, 70312, 70320, 70378, 70384, 70393, 70400, 70403, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70459, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70730, 70736, 70745, 70750, 70751, 70784, 70853, 70855, 70855, 70864, 70873, 71040, 71093, 71096, 71104, 71128, 71133, 71168, 71232, 71236, 71236, 71248, 71257, 71296, 71352, 71360, 71369, 71424, 71450, 71453, 71467, 71472, 71481, 71680, 71738, 71840, 71913, 71935, 71935, 72096, 72103, 72106, 72151, 72154, 72161, 72163, 72164, 72192, 72254, 72263, 72263, 72272, 72345, 72349, 72349, 72384, 72440, 72704, 72712, 72714, 72758, 72760, 72768, 72784, 72793, 72818, 72847, 72850, 72871, 72873, 72886, 72960, 72966, 72968, 72969, 72971, 73014, 73018, 73018, 73020, 73021, 73023, 73031, 73040, 73049, 73056, 73061, 73063, 73064, 73066, 73102, 73104, 73105, 73107, 73112, 73120, 73129, 73440, 73462, 73728, 74649, 74752, 74862, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92766, 92768, 92777, 92880, 92909, 92912, 92916, 92928, 92982, 92992, 92995, 93008, 93017, 93027, 93047, 93053, 93071, 93760, 93823, 93952, 94026, 94031, 94087, 94095, 94111, 94176, 94177, 94179, 94179, 94208, 100343, 100352, 101106, 110592, 110878, 110928, 110930, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113821, 113822, 119141, 119145, 119149, 119154, 119163, 119170, 119173, 119179, 119210, 119213, 119362, 119364, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 120782, 120831, 121344, 121398, 121403, 121452, 121461, 121461, 121476, 121476, 121499, 121503, 121505, 121519, 122880, 122886, 122888, 122904, 122907, 122913, 122915, 122916, 122918, 122922, 123136, 123180, 123184, 123197, 123200, 123209, 123214, 123214, 123584, 123641, 124928, 125124, 125136, 125142, 125184, 125259, 125264, 125273, 126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500, 126503, 126503, 126505, 126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530, 126530, 126535, 126535, 126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546, 126548, 126548, 126551, 126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559, 126559, 126561, 126562, 126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126590, 126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 917760, 917999], tS = /^\/\/\/?\s*@(ts-expect-error|ts-ignore)/, rS = /^(?:\/|\*)*\s*@(ts-expect-error|ts-ignore)/, nS = cA(Ty), ll = 7, Qp = /^#!.*/, ii = String.prototype.codePointAt ? (e, t) => e.codePointAt(t) : function(t, r) {
            let s = t.length;
            if (r < 0 || r >= s)
              return;
            let f = t.charCodeAt(r);
            if (f >= 55296 && f <= 56319 && s > r + 1) {
              let x = t.charCodeAt(r + 1);
              if (x >= 56320 && x <= 57343)
                return (f - 55296) * 1024 + x - 56320 + 65536;
            }
            return f;
          }, iS = String.fromCodePoint ? (e) => String.fromCodePoint(e) : mA;
        } });
        function gA(e) {
          return So(e) || A_(e);
        }
        function yA(e) {
          return uo(e, av);
        }
        function aS(e) {
          switch (Uf(e)) {
            case 99:
              return "lib.esnext.full.d.ts";
            case 9:
              return "lib.es2022.full.d.ts";
            case 8:
              return "lib.es2021.full.d.ts";
            case 7:
              return "lib.es2020.full.d.ts";
            case 6:
              return "lib.es2019.full.d.ts";
            case 5:
              return "lib.es2018.full.d.ts";
            case 4:
              return "lib.es2017.full.d.ts";
            case 3:
              return "lib.es2016.full.d.ts";
            case 2:
              return "lib.es6.d.ts";
            default:
              return "lib.d.ts";
          }
        }
        function Ir(e) {
          return e.start + e.length;
        }
        function sS(e) {
          return e.length === 0;
        }
        function vA(e, t) {
          return t >= e.start && t < Ir(e);
        }
        function bA(e, t) {
          return t >= e.pos && t <= e.end;
        }
        function TA(e, t) {
          return t.start >= e.start && Ir(t) <= Ir(e);
        }
        function SA(e, t) {
          return oS(e, t) !== void 0;
        }
        function oS(e, t) {
          let r = _S(e, t);
          return r && r.length === 0 ? void 0 : r;
        }
        function xA(e, t) {
          return Sy(e.start, e.length, t.start, t.length);
        }
        function EA(e, t, r) {
          return Sy(e.start, e.length, t, r);
        }
        function Sy(e, t, r, s) {
          let f = e + t, x = r + s;
          return r <= f && x >= e;
        }
        function wA(e, t) {
          return t <= Ir(e) && t >= e.start;
        }
        function _S(e, t) {
          let r = Math.max(e.start, t.start), s = Math.min(Ir(e), Ir(t));
          return r <= s ? ha(r, s) : void 0;
        }
        function L_(e, t) {
          if (e < 0)
            throw new Error("start < 0");
          if (t < 0)
            throw new Error("length < 0");
          return { start: e, length: t };
        }
        function ha(e, t) {
          return L_(e, t - e);
        }
        function R_(e) {
          return L_(e.span.start, e.newLength);
        }
        function cS(e) {
          return sS(e.span) && e.newLength === 0;
        }
        function Zp(e, t) {
          if (t < 0)
            throw new Error("newLength < 0");
          return { span: e, newLength: t };
        }
        function CA(e) {
          if (e.length === 0)
            return Vy;
          if (e.length === 1)
            return e[0];
          let t = e[0], r = t.span.start, s = Ir(t.span), f = r + t.newLength;
          for (let x = 1; x < e.length; x++) {
            let w = e[x], A = r, g = s, B = f, N = w.span.start, X = Ir(w.span), F = N + w.newLength;
            r = Math.min(A, N), s = Math.max(g, g + (X - B)), f = Math.max(F, F + (B - X));
          }
          return Zp(ha(r, s), f - r);
        }
        function AA(e) {
          if (e && e.kind === 165) {
            for (let t = e; t; t = t.parent)
              if (ga(t) || bi(t) || t.kind === 261)
                return t;
          }
        }
        function lS(e, t) {
          return Vs(e) && rn(e, 16476) && t.kind === 173;
        }
        function uS(e) {
          return df(e) ? me(e.elements, pS) : false;
        }
        function pS(e) {
          return cd(e) ? true : uS(e.name);
        }
        function fS(e) {
          let t = e.parent;
          for (; Xl(t.parent); )
            t = t.parent.parent;
          return t.parent;
        }
        function xy(e, t) {
          Xl(e) && (e = fS(e));
          let r = t(e);
          return e.kind === 257 && (e = e.parent), e && e.kind === 258 && (r |= t(e), e = e.parent), e && e.kind === 240 && (r |= t(e)), r;
        }
        function ef(e) {
          return xy(e, Rf);
        }
        function PA(e) {
          return xy(e, K4);
        }
        function tf(e) {
          return xy(e, (t) => t.flags);
        }
        function DA(e, t, r) {
          let s = e.toLowerCase(), f = /^([a-z]+)([_\-]([a-z]+))?$/.exec(s);
          if (!f) {
            r && r.push(Ol(ve.Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1, "en", "ja-jp"));
            return;
          }
          let x = f[1], w = f[3];
          pe(Hy, s) && !A(x, w, r) && A(x, void 0, r), xp(e);
          function A(g, B, N) {
            let X = Un(t.getExecutingFilePath()), F = ma(X), $ = tn(F, g);
            if (B && ($ = $ + "-" + B), $ = t.resolvePath(tn($, "diagnosticMessages.generated.json")), !t.fileExists($))
              return false;
            let ae = "";
            try {
              ae = t.readFile($);
            } catch {
              return N && N.push(Ol(ve.Unable_to_open_file_0, $)), false;
            }
            try {
              yx(JSON.parse(ae));
            } catch {
              return N && N.push(Ol(ve.Corrupted_locale_file_0, $)), false;
            }
            return true;
          }
        }
        function ul(e, t) {
          if (e)
            for (; e.original !== void 0; )
              e = e.original;
          return !e || !t || t(e) ? e : void 0;
        }
        function zi(e, t) {
          for (; e; ) {
            let r = t(e);
            if (r === "quit")
              return;
            if (r)
              return e;
            e = e.parent;
          }
        }
        function pl(e) {
          return (e.flags & 8) === 0;
        }
        function fl(e, t) {
          if (e === void 0 || pl(e))
            return e;
          for (e = e.original; e; ) {
            if (pl(e))
              return !t || t(e) ? e : void 0;
            e = e.original;
          }
        }
        function vi(e) {
          return e.length >= 2 && e.charCodeAt(0) === 95 && e.charCodeAt(1) === 95 ? "_" + e : e;
        }
        function dl(e) {
          let t = e;
          return t.length >= 3 && t.charCodeAt(0) === 95 && t.charCodeAt(1) === 95 && t.charCodeAt(2) === 95 ? t.substr(1) : t;
        }
        function qr(e) {
          return dl(e.escapedText);
        }
        function dS(e) {
          let t = _l(e.escapedText);
          return t ? ln(t, ba) : void 0;
        }
        function rf(e) {
          return e.valueDeclaration && zS(e.valueDeclaration) ? qr(e.valueDeclaration.name) : dl(e.escapedName);
        }
        function mS(e) {
          let t = e.parent.parent;
          if (t) {
            if (ko(t))
              return nf(t);
            switch (t.kind) {
              case 240:
                if (t.declarationList && t.declarationList.declarations[0])
                  return nf(t.declarationList.declarations[0]);
                break;
              case 241:
                let r = t.expression;
                switch (r.kind === 223 && r.operatorToken.kind === 63 && (r = r.left), r.kind) {
                  case 208:
                    return r.name;
                  case 209:
                    let s = r.argumentExpression;
                    if (yt(s))
                      return s;
                }
                break;
              case 214:
                return nf(t.expression);
              case 253: {
                if (ko(t.statement) || mf(t.statement))
                  return nf(t.statement);
                break;
              }
            }
          }
        }
        function nf(e) {
          let t = ml(e);
          return t && yt(t) ? t : void 0;
        }
        function hS(e, t) {
          return !!(af(e) && yt(e.name) && qr(e.name) === qr(t) || zo(e) && Ke(e.declarationList.declarations, (r) => hS(r, t)));
        }
        function gS(e) {
          return e.name || mS(e);
        }
        function af(e) {
          return !!e.name;
        }
        function Ey(e) {
          switch (e.kind) {
            case 79:
              return e;
            case 351:
            case 344: {
              let { name: r } = e;
              if (r.kind === 163)
                return r.right;
              break;
            }
            case 210:
            case 223: {
              let r = e;
              switch (ps(r)) {
                case 1:
                case 4:
                case 5:
                case 3:
                  return Cf(r.left);
                case 7:
                case 8:
                case 9:
                  return r.arguments[1];
                default:
                  return;
              }
            }
            case 349:
              return gS(e);
            case 343:
              return mS(e);
            case 274: {
              let { expression: r } = e;
              return yt(r) ? r : void 0;
            }
            case 209:
              let t = e;
              if (x0(t))
                return t.argumentExpression;
          }
          return e.name;
        }
        function ml(e) {
          if (e !== void 0)
            return Ey(e) || (ad(e) || sd(e) || _d(e) ? yS(e) : void 0);
        }
        function yS(e) {
          if (e.parent) {
            if (lc(e.parent) || Xl(e.parent))
              return e.parent.name;
            if (ur(e.parent) && e === e.parent.right) {
              if (yt(e.parent.left))
                return e.parent.left;
              if (Lo(e.parent.left))
                return Cf(e.parent.left);
            } else if (Vi(e.parent) && yt(e.parent.name))
              return e.parent.name;
          } else
            return;
        }
        function kA(e) {
          if (Il(e))
            return ee(e.modifiers, zl);
        }
        function sf(e) {
          if (rn(e, 126975))
            return ee(e.modifiers, Oy);
        }
        function vS(e, t) {
          if (e.name)
            if (yt(e.name)) {
              let r = e.name.escapedText;
              return j_(e.parent, t).filter((s) => pc(s) && yt(s.name) && s.name.escapedText === r);
            } else {
              let r = e.parent.parameters.indexOf(e);
              Y.assert(r > -1, "Parameters should always be in their parents' parameter list");
              let s = j_(e.parent, t).filter(pc);
              if (r < s.length)
                return [s[r]];
            }
          return Bt;
        }
        function of(e) {
          return vS(e, false);
        }
        function bS(e) {
          return vS(e, true);
        }
        function TS(e, t) {
          let r = e.name.escapedText;
          return j_(e.parent, t).filter((s) => Go(s) && s.typeParameters.some((f) => f.name.escapedText === r));
        }
        function SS(e) {
          return TS(e, false);
        }
        function xS(e) {
          return TS(e, true);
        }
        function IA(e) {
          return !!Nr(e, pc);
        }
        function ES(e) {
          return Nr(e, md);
        }
        function wS(e) {
          return MS(e, hE);
        }
        function NA(e) {
          return Nr(e, pE);
        }
        function OA(e) {
          return Nr(e, d2);
        }
        function CS(e) {
          return Nr(e, d2, true);
        }
        function MA(e) {
          return Nr(e, m2);
        }
        function AS(e) {
          return Nr(e, m2, true);
        }
        function LA(e) {
          return Nr(e, h22);
        }
        function PS(e) {
          return Nr(e, h22, true);
        }
        function RA(e) {
          return Nr(e, g2);
        }
        function DS(e) {
          return Nr(e, g2, true);
        }
        function kS(e) {
          return Nr(e, fE, true);
        }
        function jA(e) {
          return Nr(e, v2);
        }
        function IS(e) {
          return Nr(e, v2, true);
        }
        function JA(e) {
          return Nr(e, dE);
        }
        function FA(e) {
          return Nr(e, mE);
        }
        function NS(e) {
          return Nr(e, b2);
        }
        function BA(e) {
          return Nr(e, Go);
        }
        function wy(e) {
          return Nr(e, T2);
        }
        function _f(e) {
          let t = Nr(e, au);
          if (t && t.typeExpression && t.typeExpression.type)
            return t;
        }
        function cf(e) {
          let t = Nr(e, au);
          return !t && Vs(e) && (t = Ae(of(e), (r) => !!r.typeExpression)), t && t.typeExpression && t.typeExpression.type;
        }
        function OS(e) {
          let t = NS(e);
          if (t && t.typeExpression)
            return t.typeExpression.type;
          let r = _f(e);
          if (r && r.typeExpression) {
            let s = r.typeExpression.type;
            if (id(s)) {
              let f = Ae(s.members, Vv);
              return f && f.type;
            }
            if ($l(s) || dd(s))
              return s.type;
          }
        }
        function j_(e, t) {
          var r;
          if (!Af(e))
            return Bt;
          let f = (r = e.jsDoc) == null ? void 0 : r.jsDocCache;
          if (f === void 0 || t) {
            let x = r4(e, t);
            Y.assert(x.length < 2 || x[0] !== x[1]), f = ne(x, (w) => Ho(w) ? w.tags : w), t || (e.jsDoc != null || (e.jsDoc = []), e.jsDoc.jsDocCache = f);
          }
          return f;
        }
        function hl(e) {
          return j_(e, false);
        }
        function qA(e) {
          return j_(e, true);
        }
        function Nr(e, t, r) {
          return Ae(j_(e, r), t);
        }
        function MS(e, t) {
          return hl(e).filter(t);
        }
        function UA(e, t) {
          return hl(e).filter((r) => r.kind === t);
        }
        function zA(e) {
          return typeof e == "string" ? e : e == null ? void 0 : e.map((t) => t.kind === 324 ? t.text : WA(t)).join("");
        }
        function WA(e) {
          let t = e.kind === 327 ? "link" : e.kind === 328 ? "linkcode" : "linkplain", r = e.name ? ls(e.name) : "", s = e.name && e.text.startsWith("://") ? "" : " ";
          return `{@${t} ${r}${s}${e.text}}`;
        }
        function VA(e) {
          if (iu(e)) {
            if (y2(e.parent)) {
              let t = P0(e.parent);
              if (t && I(t.tags))
                return ne(t.tags, (r) => Go(r) ? r.typeParameters : void 0);
            }
            return Bt;
          }
          if (Cl(e))
            return Y.assert(e.parent.kind === 323), ne(e.parent.tags, (t) => Go(t) ? t.typeParameters : void 0);
          if (e.typeParameters || IE(e) && e.typeParameters)
            return e.typeParameters;
          if (Pr(e)) {
            let t = F4(e);
            if (t.length)
              return t;
            let r = cf(e);
            if (r && $l(r) && r.typeParameters)
              return r.typeParameters;
          }
          return Bt;
        }
        function HA(e) {
          return e.constraint ? e.constraint : Go(e.parent) && e === e.parent.typeParameters[0] ? e.parent.constraint : void 0;
        }
        function js(e) {
          return e.kind === 79 || e.kind === 80;
        }
        function GA(e) {
          return e.kind === 175 || e.kind === 174;
        }
        function LS(e) {
          return bn(e) && !!(e.flags & 32);
        }
        function RS(e) {
          return gs(e) && !!(e.flags & 32);
        }
        function Cy(e) {
          return sc(e) && !!(e.flags & 32);
        }
        function Ay(e) {
          let t = e.kind;
          return !!(e.flags & 32) && (t === 208 || t === 209 || t === 210 || t === 232);
        }
        function Py(e) {
          return Ay(e) && !Uo(e) && !!e.questionDotToken;
        }
        function $A(e) {
          return Py(e.parent) && e.parent.expression === e;
        }
        function KA(e) {
          return !Ay(e.parent) || Py(e.parent) || e !== e.parent.expression;
        }
        function XA(e) {
          return e.kind === 223 && e.operatorToken.kind === 60;
        }
        function jS(e) {
          return ac(e) && yt(e.typeName) && e.typeName.escapedText === "const" && !e.typeArguments;
        }
        function lf(e) {
          return $o(e, 8);
        }
        function JS(e) {
          return Uo(e) && !!(e.flags & 32);
        }
        function YA(e) {
          return e.kind === 249 || e.kind === 248;
        }
        function QA(e) {
          return e.kind === 277 || e.kind === 276;
        }
        function FS(e) {
          switch (e.kind) {
            case 305:
            case 306:
              return true;
            default:
              return false;
          }
        }
        function ZA(e) {
          return FS(e) || e.kind === 303 || e.kind === 307;
        }
        function Dy(e) {
          return e.kind === 351 || e.kind === 344;
        }
        function eP(e) {
          return gl(e.kind);
        }
        function gl(e) {
          return e >= 163;
        }
        function BS(e) {
          return e >= 0 && e <= 162;
        }
        function tP(e) {
          return BS(e.kind);
        }
        function _s(e) {
          return Jr(e, "pos") && Jr(e, "end");
        }
        function ky(e) {
          return 8 <= e && e <= 14;
        }
        function Iy(e) {
          return ky(e.kind);
        }
        function rP(e) {
          switch (e.kind) {
            case 207:
            case 206:
            case 13:
            case 215:
            case 228:
              return true;
          }
          return false;
        }
        function yl(e) {
          return 14 <= e && e <= 17;
        }
        function nP(e) {
          return yl(e.kind);
        }
        function iP(e) {
          let t = e.kind;
          return t === 16 || t === 17;
        }
        function aP(e) {
          return nE(e) || aE(e);
        }
        function qS(e) {
          switch (e.kind) {
            case 273:
              return e.isTypeOnly || e.parent.parent.isTypeOnly;
            case 271:
              return e.parent.isTypeOnly;
            case 270:
            case 268:
              return e.isTypeOnly;
          }
          return false;
        }
        function US(e) {
          switch (e.kind) {
            case 278:
              return e.isTypeOnly || e.parent.parent.isTypeOnly;
            case 275:
              return e.isTypeOnly && !!e.moduleSpecifier && !e.exportClause;
            case 277:
              return e.parent.isTypeOnly;
          }
          return false;
        }
        function sP(e) {
          return qS(e) || US(e);
        }
        function oP(e) {
          return Gn(e) || yt(e);
        }
        function _P(e) {
          return e.kind === 10 || yl(e.kind);
        }
        function cs(e) {
          var t;
          return yt(e) && ((t = e.emitNode) == null ? void 0 : t.autoGenerate) !== void 0;
        }
        function Ny(e) {
          var t;
          return vn(e) && ((t = e.emitNode) == null ? void 0 : t.autoGenerate) !== void 0;
        }
        function zS(e) {
          return (Bo(e) || Ly(e)) && vn(e.name);
        }
        function cP(e) {
          return bn(e) && vn(e.name);
        }
        function Wi(e) {
          switch (e) {
            case 126:
            case 127:
            case 132:
            case 85:
            case 136:
            case 88:
            case 93:
            case 101:
            case 123:
            case 121:
            case 122:
            case 146:
            case 124:
            case 145:
            case 161:
              return true;
          }
          return false;
        }
        function WS2(e) {
          return !!(Q0(e) & 16476);
        }
        function VS(e) {
          return WS2(e) || e === 124 || e === 161 || e === 127;
        }
        function Oy(e) {
          return Wi(e.kind);
        }
        function lP(e) {
          let t = e.kind;
          return t === 163 || t === 79;
        }
        function vl(e) {
          let t = e.kind;
          return t === 79 || t === 80 || t === 10 || t === 8 || t === 164;
        }
        function uP(e) {
          let t = e.kind;
          return t === 79 || t === 203 || t === 204;
        }
        function ga(e) {
          return !!e && My(e.kind);
        }
        function uf(e) {
          return !!e && (My(e.kind) || Hl(e));
        }
        function HS(e) {
          return e && GS(e.kind);
        }
        function pP(e) {
          return e.kind === 110 || e.kind === 95;
        }
        function GS(e) {
          switch (e) {
            case 259:
            case 171:
            case 173:
            case 174:
            case 175:
            case 215:
            case 216:
              return true;
            default:
              return false;
          }
        }
        function My(e) {
          switch (e) {
            case 170:
            case 176:
            case 326:
            case 177:
            case 178:
            case 181:
            case 320:
            case 182:
              return true;
            default:
              return GS(e);
          }
        }
        function fP(e) {
          return wi(e) || rE(e) || Ql(e) && ga(e.parent);
        }
        function Js(e) {
          let t = e.kind;
          return t === 173 || t === 169 || t === 171 || t === 174 || t === 175 || t === 178 || t === 172 || t === 237;
        }
        function bi(e) {
          return e && (e.kind === 260 || e.kind === 228);
        }
        function pf(e) {
          return e && (e.kind === 174 || e.kind === 175);
        }
        function $S(e) {
          return Bo(e) && H4(e);
        }
        function Ly(e) {
          switch (e.kind) {
            case 171:
            case 174:
            case 175:
              return true;
            default:
              return false;
          }
        }
        function dP(e) {
          switch (e.kind) {
            case 171:
            case 174:
            case 175:
            case 169:
              return true;
            default:
              return false;
          }
        }
        function ff(e) {
          return Oy(e) || zl(e);
        }
        function Ry(e) {
          let t = e.kind;
          return t === 177 || t === 176 || t === 168 || t === 170 || t === 178 || t === 174 || t === 175;
        }
        function mP(e) {
          return Ry(e) || Js(e);
        }
        function jy(e) {
          let t = e.kind;
          return t === 299 || t === 300 || t === 301 || t === 171 || t === 174 || t === 175;
        }
        function Jy(e) {
          return hx(e.kind);
        }
        function hP(e) {
          switch (e.kind) {
            case 181:
            case 182:
              return true;
          }
          return false;
        }
        function df(e) {
          if (e) {
            let t = e.kind;
            return t === 204 || t === 203;
          }
          return false;
        }
        function KS(e) {
          let t = e.kind;
          return t === 206 || t === 207;
        }
        function gP(e) {
          let t = e.kind;
          return t === 205 || t === 229;
        }
        function Fy(e) {
          switch (e.kind) {
            case 257:
            case 166:
            case 205:
              return true;
          }
          return false;
        }
        function yP(e) {
          return Vi(e) || Vs(e) || YS(e) || ZS(e);
        }
        function vP(e) {
          return XS(e) || QS(e);
        }
        function XS(e) {
          switch (e.kind) {
            case 203:
            case 207:
              return true;
          }
          return false;
        }
        function YS(e) {
          switch (e.kind) {
            case 205:
            case 299:
            case 300:
            case 301:
              return true;
          }
          return false;
        }
        function QS(e) {
          switch (e.kind) {
            case 204:
            case 206:
              return true;
          }
          return false;
        }
        function ZS(e) {
          switch (e.kind) {
            case 205:
            case 229:
            case 227:
            case 206:
            case 207:
            case 79:
            case 208:
            case 209:
              return true;
          }
          return ms(e, true);
        }
        function bP(e) {
          let t = e.kind;
          return t === 208 || t === 163 || t === 202;
        }
        function TP(e) {
          let t = e.kind;
          return t === 208 || t === 163;
        }
        function SP(e) {
          switch (e.kind) {
            case 283:
            case 282:
            case 210:
            case 211:
            case 212:
            case 167:
              return true;
            default:
              return false;
          }
        }
        function xP(e) {
          return e.kind === 210 || e.kind === 211;
        }
        function EP(e) {
          let t = e.kind;
          return t === 225 || t === 14;
        }
        function Do(e) {
          return e3(lf(e).kind);
        }
        function e3(e) {
          switch (e) {
            case 208:
            case 209:
            case 211:
            case 210:
            case 281:
            case 282:
            case 285:
            case 212:
            case 206:
            case 214:
            case 207:
            case 228:
            case 215:
            case 79:
            case 80:
            case 13:
            case 8:
            case 9:
            case 10:
            case 14:
            case 225:
            case 95:
            case 104:
            case 108:
            case 110:
            case 106:
            case 232:
            case 230:
            case 233:
            case 100:
            case 279:
              return true;
            default:
              return false;
          }
        }
        function t3(e) {
          return r3(lf(e).kind);
        }
        function r3(e) {
          switch (e) {
            case 221:
            case 222:
            case 217:
            case 218:
            case 219:
            case 220:
            case 213:
              return true;
            default:
              return e3(e);
          }
        }
        function wP(e) {
          switch (e.kind) {
            case 222:
              return true;
            case 221:
              return e.operator === 45 || e.operator === 46;
            default:
              return false;
          }
        }
        function CP(e) {
          switch (e.kind) {
            case 104:
            case 110:
            case 95:
            case 221:
              return true;
            default:
              return Iy(e);
          }
        }
        function mf(e) {
          return AP(lf(e).kind);
        }
        function AP(e) {
          switch (e) {
            case 224:
            case 226:
            case 216:
            case 223:
            case 227:
            case 231:
            case 229:
            case 357:
            case 356:
            case 235:
              return true;
            default:
              return r3(e);
          }
        }
        function PP(e) {
          let t = e.kind;
          return t === 213 || t === 231;
        }
        function DP(e) {
          return c2(e) || Z8(e);
        }
        function n3(e, t) {
          switch (e.kind) {
            case 245:
            case 246:
            case 247:
            case 243:
            case 244:
              return true;
            case 253:
              return t && n3(e.statement, t);
          }
          return false;
        }
        function i3(e) {
          return Vo(e) || cc(e);
        }
        function kP(e) {
          return Ke(e, i3);
        }
        function IP(e) {
          return !bf(e) && !Vo(e) && !rn(e, 1) && !yf(e);
        }
        function NP(e) {
          return bf(e) || Vo(e) || rn(e, 1);
        }
        function OP(e) {
          return e.kind === 246 || e.kind === 247;
        }
        function MP(e) {
          return Ql(e) || mf(e);
        }
        function LP(e) {
          return Ql(e);
        }
        function RP(e) {
          return r2(e) || mf(e);
        }
        function jP(e) {
          let t = e.kind;
          return t === 265 || t === 264 || t === 79;
        }
        function JP(e) {
          let t = e.kind;
          return t === 265 || t === 264;
        }
        function FP(e) {
          let t = e.kind;
          return t === 79 || t === 264;
        }
        function BP(e) {
          let t = e.kind;
          return t === 272 || t === 271;
        }
        function qP(e) {
          return e.kind === 264 || e.kind === 263;
        }
        function UP(e) {
          switch (e.kind) {
            case 216:
            case 223:
            case 205:
            case 210:
            case 176:
            case 260:
            case 228:
            case 172:
            case 173:
            case 182:
            case 177:
            case 209:
            case 263:
            case 302:
            case 274:
            case 275:
            case 278:
            case 259:
            case 215:
            case 181:
            case 174:
            case 79:
            case 270:
            case 268:
            case 273:
            case 178:
            case 261:
            case 341:
            case 343:
            case 320:
            case 344:
            case 351:
            case 326:
            case 349:
            case 325:
            case 288:
            case 289:
            case 290:
            case 197:
            case 171:
            case 170:
            case 264:
            case 199:
            case 277:
            case 267:
            case 271:
            case 211:
            case 14:
            case 8:
            case 207:
            case 166:
            case 208:
            case 299:
            case 169:
            case 168:
            case 175:
            case 300:
            case 308:
            case 301:
            case 10:
            case 262:
            case 184:
            case 165:
            case 257:
              return true;
            default:
              return false;
          }
        }
        function zP(e) {
          switch (e.kind) {
            case 216:
            case 238:
            case 176:
            case 266:
            case 295:
            case 172:
            case 191:
            case 173:
            case 182:
            case 177:
            case 245:
            case 246:
            case 247:
            case 259:
            case 215:
            case 181:
            case 174:
            case 178:
            case 341:
            case 343:
            case 320:
            case 326:
            case 349:
            case 197:
            case 171:
            case 170:
            case 264:
            case 175:
            case 308:
            case 262:
              return true;
            default:
              return false;
          }
        }
        function WP(e) {
          return e === 216 || e === 205 || e === 260 || e === 228 || e === 172 || e === 173 || e === 263 || e === 302 || e === 278 || e === 259 || e === 215 || e === 174 || e === 270 || e === 268 || e === 273 || e === 261 || e === 288 || e === 171 || e === 170 || e === 264 || e === 267 || e === 271 || e === 277 || e === 166 || e === 299 || e === 169 || e === 168 || e === 175 || e === 300 || e === 262 || e === 165 || e === 257 || e === 349 || e === 341 || e === 351;
        }
        function By(e) {
          return e === 259 || e === 279 || e === 260 || e === 261 || e === 262 || e === 263 || e === 264 || e === 269 || e === 268 || e === 275 || e === 274 || e === 267;
        }
        function qy(e) {
          return e === 249 || e === 248 || e === 256 || e === 243 || e === 241 || e === 239 || e === 246 || e === 247 || e === 245 || e === 242 || e === 253 || e === 250 || e === 252 || e === 254 || e === 255 || e === 240 || e === 244 || e === 251 || e === 355 || e === 359 || e === 358;
        }
        function ko(e) {
          return e.kind === 165 ? e.parent && e.parent.kind !== 348 || Pr(e) : WP(e.kind);
        }
        function VP(e) {
          return By(e.kind);
        }
        function HP(e) {
          return qy(e.kind);
        }
        function a3(e) {
          let t = e.kind;
          return qy(t) || By(t) || GP(e);
        }
        function GP(e) {
          return e.kind !== 238 || e.parent !== void 0 && (e.parent.kind === 255 || e.parent.kind === 295) ? false : !O3(e);
        }
        function s3(e) {
          let t = e.kind;
          return qy(t) || By(t) || t === 238;
        }
        function $P(e) {
          let t = e.kind;
          return t === 280 || t === 163 || t === 79;
        }
        function KP(e) {
          let t = e.kind;
          return t === 108 || t === 79 || t === 208;
        }
        function o3(e) {
          let t = e.kind;
          return t === 281 || t === 291 || t === 282 || t === 11 || t === 285;
        }
        function XP(e) {
          let t = e.kind;
          return t === 288 || t === 290;
        }
        function YP(e) {
          let t = e.kind;
          return t === 10 || t === 291;
        }
        function _3(e) {
          let t = e.kind;
          return t === 283 || t === 282;
        }
        function QP(e) {
          let t = e.kind;
          return t === 292 || t === 293;
        }
        function Uy(e) {
          return e.kind >= 312 && e.kind <= 353;
        }
        function c3(e) {
          return e.kind === 323 || e.kind === 322 || e.kind === 324 || Sl(e) || zy(e) || f2(e) || iu(e);
        }
        function zy(e) {
          return e.kind >= 330 && e.kind <= 353;
        }
        function bl(e) {
          return e.kind === 175;
        }
        function Tl(e) {
          return e.kind === 174;
        }
        function ya(e) {
          if (!Af(e))
            return false;
          let { jsDoc: t } = e;
          return !!t && t.length > 0;
        }
        function ZP(e) {
          return !!e.type;
        }
        function l3(e) {
          return !!e.initializer;
        }
        function eD(e) {
          switch (e.kind) {
            case 257:
            case 166:
            case 205:
            case 169:
            case 299:
            case 302:
              return true;
            default:
              return false;
          }
        }
        function Wy(e) {
          return e.kind === 288 || e.kind === 290 || jy(e);
        }
        function tD(e) {
          return e.kind === 180 || e.kind === 230;
        }
        function rD(e) {
          let t = Gy;
          for (let r of e) {
            if (!r.length)
              continue;
            let s = 0;
            for (; s < r.length && s < t && os(r.charCodeAt(s)); s++)
              ;
            if (s < t && (t = s), t === 0)
              return 0;
          }
          return t === Gy ? void 0 : t;
        }
        function Ti(e) {
          return e.kind === 10 || e.kind === 14;
        }
        function Sl(e) {
          return e.kind === 327 || e.kind === 328 || e.kind === 329;
        }
        function nD(e) {
          let t = Cn(e.parameters);
          return !!t && u3(t);
        }
        function u3(e) {
          let t = pc(e) ? e.typeExpression && e.typeExpression.type : e.type;
          return e.dotDotDotToken !== void 0 || !!t && t.kind === 321;
        }
        var Vy, Hy, Gy, iD = D({ "src/compiler/utilitiesPublic.ts"() {
          nn(), Vy = Zp(L_(0, 0), 0), Hy = ["cs", "de", "es", "fr", "it", "ja", "ko", "pl", "pt-br", "ru", "tr", "zh-cn", "zh-tw"], Gy = 1073741823;
        } });
        function aD(e, t) {
          let r = e.declarations;
          if (r) {
            for (let s of r)
              if (s.kind === t)
                return s;
          }
        }
        function sD(e, t) {
          return ee(e.declarations || Bt, (r) => r.kind === t);
        }
        function oD(e) {
          let t = /* @__PURE__ */ new Map();
          if (e)
            for (let r of e)
              t.set(r.escapedName, r);
          return t;
        }
        function $y(e) {
          return (e.flags & 33554432) !== 0;
        }
        function _D() {
          var e = "";
          let t = (r) => e += r;
          return { getText: () => e, write: t, rawWrite: t, writeKeyword: t, writeOperator: t, writePunctuation: t, writeSpace: t, writeStringLiteral: t, writeLiteral: t, writeParameter: t, writeProperty: t, writeSymbol: (r, s) => t(r), writeTrailingSemicolon: t, writeComment: t, getTextPos: () => e.length, getLine: () => 0, getColumn: () => 0, getIndent: () => 0, isAtStartOfLine: () => false, hasTrailingComment: () => false, hasTrailingWhitespace: () => !!e.length && os(e.charCodeAt(e.length - 1)), writeLine: () => e += " ", increaseIndent: yn, decreaseIndent: yn, clear: () => e = "" };
        }
        function cD(e, t) {
          return e.configFilePath !== t.configFilePath || p3(e, t);
        }
        function p3(e, t) {
          return J_(e, t, moduleResolutionOptionDeclarations);
        }
        function lD(e, t) {
          return J_(e, t, optionsAffectingProgramStructure);
        }
        function J_(e, t, r) {
          return e !== t && r.some((s) => !gv(uv(e, s), uv(t, s)));
        }
        function uD(e, t) {
          for (; ; ) {
            let r = t(e);
            if (r === "quit")
              return;
            if (r !== void 0)
              return r;
            if (wi(e))
              return;
            e = e.parent;
          }
        }
        function pD(e, t) {
          let r = e.entries();
          for (let [s, f] of r) {
            let x = t(f, s);
            if (x)
              return x;
          }
        }
        function fD(e, t) {
          let r = e.keys();
          for (let s of r) {
            let f = t(s);
            if (f)
              return f;
          }
        }
        function dD(e, t) {
          e.forEach((r, s) => {
            t.set(s, r);
          });
        }
        function mD(e) {
          let t = Z_.getText();
          try {
            return e(Z_), Z_.getText();
          } finally {
            Z_.clear(), Z_.writeKeyword(t);
          }
        }
        function hf(e) {
          return e.end - e.pos;
        }
        function hD(e, t, r) {
          var s, f;
          return (f = (s = e == null ? void 0 : e.resolvedModules) == null ? void 0 : s.get(t, r)) == null ? void 0 : f.resolvedModule;
        }
        function gD(e, t, r, s) {
          e.resolvedModules || (e.resolvedModules = createModeAwareCache()), e.resolvedModules.set(t, s, r);
        }
        function yD(e, t, r, s) {
          e.resolvedTypeReferenceDirectiveNames || (e.resolvedTypeReferenceDirectiveNames = createModeAwareCache()), e.resolvedTypeReferenceDirectiveNames.set(t, s, r);
        }
        function vD(e, t, r) {
          var s, f;
          return (f = (s = e == null ? void 0 : e.resolvedTypeReferenceDirectiveNames) == null ? void 0 : s.get(t, r)) == null ? void 0 : f.resolvedTypeReferenceDirective;
        }
        function bD(e, t) {
          return e.path === t.path && !e.prepend == !t.prepend && !e.circular == !t.circular;
        }
        function TD(e, t) {
          return e === t || e.resolvedModule === t.resolvedModule || !!e.resolvedModule && !!t.resolvedModule && e.resolvedModule.isExternalLibraryImport === t.resolvedModule.isExternalLibraryImport && e.resolvedModule.extension === t.resolvedModule.extension && e.resolvedModule.resolvedFileName === t.resolvedModule.resolvedFileName && e.resolvedModule.originalPath === t.resolvedModule.originalPath && SD(e.resolvedModule.packageId, t.resolvedModule.packageId);
        }
        function SD(e, t) {
          return e === t || !!e && !!t && e.name === t.name && e.subModuleName === t.subModuleName && e.version === t.version;
        }
        function f3(e) {
          let { name: t, subModuleName: r } = e;
          return r ? `${t}/${r}` : t;
        }
        function xD(e) {
          return `${f3(e)}@${e.version}`;
        }
        function ED(e, t) {
          return e === t || e.resolvedTypeReferenceDirective === t.resolvedTypeReferenceDirective || !!e.resolvedTypeReferenceDirective && !!t.resolvedTypeReferenceDirective && e.resolvedTypeReferenceDirective.resolvedFileName === t.resolvedTypeReferenceDirective.resolvedFileName && !!e.resolvedTypeReferenceDirective.primary == !!t.resolvedTypeReferenceDirective.primary && e.resolvedTypeReferenceDirective.originalPath === t.resolvedTypeReferenceDirective.originalPath;
        }
        function wD(e, t, r, s, f, x) {
          Y.assert(e.length === r.length);
          for (let w = 0; w < e.length; w++) {
            let A = r[w], g = e[w], B = x.getName(g), N = x.getMode(g, t), X = s && s.get(B, N);
            if (X ? !A || !f(X, A) : A)
              return true;
          }
          return false;
        }
        function Ky(e) {
          return CD(e), (e.flags & 524288) !== 0;
        }
        function CD(e) {
          e.flags & 1048576 || ((e.flags & 131072 || xr(e, Ky)) && (e.flags |= 524288), e.flags |= 1048576);
        }
        function Si(e) {
          for (; e && e.kind !== 308; )
            e = e.parent;
          return e;
        }
        function AD(e) {
          return Si(e.valueDeclaration || E3(e));
        }
        function PD(e, t) {
          return !!e && (e.scriptKind === 1 || e.scriptKind === 2) && !e.checkJsDirective && t === void 0;
        }
        function DD(e) {
          switch (e.kind) {
            case 238:
            case 266:
            case 245:
            case 246:
            case 247:
              return true;
          }
          return false;
        }
        function kD(e, t) {
          return Y.assert(e >= 0), ss(t)[e];
        }
        function ID(e) {
          let t = Si(e), r = Ls(t, e.pos);
          return `${t.fileName}(${r.line + 1},${r.character + 1})`;
        }
        function d3(e, t) {
          Y.assert(e >= 0);
          let r = ss(t), s = e, f = t.text;
          if (s + 1 === r.length)
            return f.length - 1;
          {
            let x = r[s], w = r[s + 1] - 1;
            for (Y.assert(un(f.charCodeAt(w))); x <= w && un(f.charCodeAt(w)); )
              w--;
            return w;
          }
        }
        function m3(e, t, r) {
          return !(r && r(t)) && !e.identifiers.has(t);
        }
        function va(e) {
          return e === void 0 ? true : e.pos === e.end && e.pos >= 0 && e.kind !== 1;
        }
        function xl(e) {
          return !va(e);
        }
        function ND(e, t) {
          return Fo(e) ? t === e.expression : Hl(e) ? t === e.modifiers : Wl(e) ? t === e.initializer : Bo(e) ? t === e.questionToken && $S(e) : lc(e) ? t === e.modifiers || t === e.questionToken || t === e.exclamationToken || F_(e.modifiers, t, ff) : nu(e) ? t === e.equalsToken || t === e.modifiers || t === e.questionToken || t === e.exclamationToken || F_(e.modifiers, t, ff) : Vl(e) ? t === e.exclamationToken : nc(e) ? t === e.typeParameters || t === e.type || F_(e.typeParameters, t, Fo) : Gl(e) ? t === e.typeParameters || F_(e.typeParameters, t, Fo) : ic(e) ? t === e.typeParameters || t === e.type || F_(e.typeParameters, t, Fo) : a2(e) ? t === e.modifiers || F_(e.modifiers, t, ff) : false;
        }
        function F_(e, t, r) {
          return !e || ir(t) || !r(t) ? false : pe(e, t);
        }
        function h3(e, t, r) {
          if (t === void 0 || t.length === 0)
            return e;
          let s = 0;
          for (; s < e.length && r(e[s]); ++s)
            ;
          return e.splice(s, 0, ...t), e;
        }
        function g3(e, t, r) {
          if (t === void 0)
            return e;
          let s = 0;
          for (; s < e.length && r(e[s]); ++s)
            ;
          return e.splice(s, 0, t), e;
        }
        function y3(e) {
          return us(e) || !!(xi(e) & 2097152);
        }
        function OD(e, t) {
          return h3(e, t, us);
        }
        function MD(e, t) {
          return h3(e, t, y3);
        }
        function LD(e, t) {
          return g3(e, t, us);
        }
        function RD(e, t) {
          return g3(e, t, y3);
        }
        function jD(e, t, r) {
          if (e.charCodeAt(t + 1) === 47 && t + 2 < r && e.charCodeAt(t + 2) === 47) {
            let s = e.substring(t, r);
            return !!(bv.test(s) || Tv.test(s) || i8.test(s) || a8.test(s));
          }
          return false;
        }
        function v3(e, t) {
          return e.charCodeAt(t + 1) === 42 && e.charCodeAt(t + 2) === 33;
        }
        function JD(e, t) {
          let r = new Map(t.map((w) => [`${Ls(e, w.range.end).line}`, w])), s = /* @__PURE__ */ new Map();
          return { getUnusedExpectations: f, markUsed: x };
          function f() {
            return Za(r.entries()).filter((w) => {
              let [A, g] = w;
              return g.type === 0 && !s.get(A);
            }).map((w) => {
              let [A, g] = w;
              return g;
            });
          }
          function x(w) {
            return r.has(`${w}`) ? (s.set(`${w}`, true), true) : false;
          }
        }
        function Io(e, t, r) {
          return va(e) ? e.pos : Uy(e) || e.kind === 11 ? Ar((t || Si(e)).text, e.pos, false, true) : r && ya(e) ? Io(e.jsDoc[0], t) : e.kind === 354 && e._children.length > 0 ? Io(e._children[0], t, r) : Ar((t || Si(e)).text, e.pos, false, false, q3(e));
        }
        function FD(e, t) {
          let r = !va(e) && fc(e) ? te(e.modifiers, zl) : void 0;
          return r ? Ar((t || Si(e)).text, r.end) : Io(e, t);
        }
        function No(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          return B_(e.text, t, r);
        }
        function BD(e) {
          return !!zi(e, lE);
        }
        function b3(e) {
          return !!(cc(e) && e.exportClause && ld(e.exportClause) && e.exportClause.name.escapedText === "default");
        }
        function B_(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          if (va(t))
            return "";
          let s = e.substring(r ? t.pos : Ar(e, t.pos), t.end);
          return BD(t) && (s = s.split(/\r\n|\n|\r/).map((f) => nl(f.replace(/^\s*\*/, ""))).join(`
`)), s;
        }
        function gf(e) {
          let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          return No(Si(e), e, t);
        }
        function qD(e) {
          return e.pos;
        }
        function UD(e, t) {
          return Ya(e, t, qD, Vr);
        }
        function xi(e) {
          let t = e.emitNode;
          return t && t.flags || 0;
        }
        function zD(e) {
          let t = e.emitNode;
          return t && t.internalFlags || 0;
        }
        function WD(e, t, r) {
          var s;
          if (t && VD(e, r))
            return No(t, e);
          switch (e.kind) {
            case 10: {
              let f = r & 2 ? A4 : r & 1 || xi(e) & 33554432 ? Nf : Of;
              return e.singleQuote ? "'" + f(e.text, 39) + "'" : '"' + f(e.text, 34) + '"';
            }
            case 14:
            case 15:
            case 16:
            case 17: {
              let f = r & 1 || xi(e) & 33554432 ? Nf : Of, x = (s = e.rawText) != null ? s : SN(f(e.text, 96));
              switch (e.kind) {
                case 14:
                  return "`" + x + "`";
                case 15:
                  return "`" + x + "${";
                case 16:
                  return "}" + x + "${";
                case 17:
                  return "}" + x + "`";
              }
              break;
            }
            case 8:
            case 9:
              return e.text;
            case 13:
              return r & 4 && e.isUnterminated ? e.text + (e.text.charCodeAt(e.text.length - 1) === 92 ? " /" : "/") : e.text;
          }
          return Y.fail(`Literal kind '${e.kind}' not accounted for.`);
        }
        function VD(e, t) {
          return fs(e) || !e.parent || t & 4 && e.isUnterminated ? false : zs(e) && e.numericLiteralFlags & 512 ? !!(t & 8) : !Uv(e);
        }
        function HD(e) {
          return Ji(e) ? '"' + Of(e) + '"' : "" + e;
        }
        function GD(e) {
          return sl(e).replace(/^(\d)/, "_$1").replace(/\W/g, "_");
        }
        function $D(e) {
          return (tf(e) & 3) !== 0 || T3(e);
        }
        function T3(e) {
          let t = If(e);
          return t.kind === 257 && t.parent.kind === 295;
        }
        function yf(e) {
          return Ea(e) && (e.name.kind === 10 || vf(e));
        }
        function KD(e) {
          return Ea(e) && e.name.kind === 10;
        }
        function XD(e) {
          return Ea(e) && Gn(e.name);
        }
        function S3(e) {
          return Ea(e) || yt(e);
        }
        function YD(e) {
          return QD(e.valueDeclaration);
        }
        function QD(e) {
          return !!e && e.kind === 264 && !e.body;
        }
        function ZD(e) {
          return e.kind === 308 || e.kind === 264 || uf(e);
        }
        function vf(e) {
          return !!(e.flags & 1024);
        }
        function Xy(e) {
          return yf(e) && x3(e);
        }
        function x3(e) {
          switch (e.parent.kind) {
            case 308:
              return Qo(e.parent);
            case 265:
              return yf(e.parent.parent) && wi(e.parent.parent.parent) && !Qo(e.parent.parent.parent);
          }
          return false;
        }
        function E3(e) {
          var t;
          return (t = e.declarations) == null ? void 0 : t.find((r) => !Xy(r) && !(Ea(r) && vf(r)));
        }
        function ek(e) {
          return e === 1 || e === 100 || e === 199;
        }
        function Yy(e, t) {
          return Qo(e) || zf(t) || ek(Ei(t)) && !!e.commonJsModuleIndicator;
        }
        function tk(e, t) {
          switch (e.scriptKind) {
            case 1:
            case 3:
            case 2:
            case 4:
              break;
            default:
              return false;
          }
          return e.isDeclarationFile ? false : lv(t, "alwaysStrict") || SE(e.statements) ? true : Qo(e) || zf(t) ? Ei(t) >= 5 ? true : !t.noImplicitUseStrict : false;
        }
        function rk(e) {
          return !!(e.flags & 16777216) || rn(e, 2);
        }
        function w3(e, t) {
          switch (e.kind) {
            case 308:
            case 266:
            case 295:
            case 264:
            case 245:
            case 246:
            case 247:
            case 173:
            case 171:
            case 174:
            case 175:
            case 259:
            case 215:
            case 216:
            case 169:
            case 172:
              return true;
            case 238:
              return !uf(t);
          }
          return false;
        }
        function nk(e) {
          switch (Y.type(e), e.kind) {
            case 341:
            case 349:
            case 326:
              return true;
            default:
              return C3(e);
          }
        }
        function C3(e) {
          switch (Y.type(e), e.kind) {
            case 176:
            case 177:
            case 170:
            case 178:
            case 181:
            case 182:
            case 320:
            case 260:
            case 228:
            case 261:
            case 262:
            case 348:
            case 259:
            case 171:
            case 173:
            case 174:
            case 175:
            case 215:
            case 216:
              return true;
            default:
              return false;
          }
        }
        function Qy(e) {
          switch (e.kind) {
            case 269:
            case 268:
              return true;
            default:
              return false;
          }
        }
        function ik(e) {
          return Qy(e) || Ef(e);
        }
        function ak(e) {
          switch (e.kind) {
            case 269:
            case 268:
            case 240:
            case 260:
            case 259:
            case 264:
            case 262:
            case 261:
            case 263:
              return true;
            default:
              return false;
          }
        }
        function sk(e) {
          return bf(e) || Ea(e) || Kl(e) || s0(e);
        }
        function bf(e) {
          return Qy(e) || cc(e);
        }
        function Zy(e) {
          return zi(e.parent, (t) => w3(t, t.parent));
        }
        function ok(e, t) {
          let r = Zy(e);
          for (; r; )
            t(r), r = Zy(r);
        }
        function A3(e) {
          return !e || hf(e) === 0 ? "(Missing)" : gf(e);
        }
        function _k(e) {
          return e.declaration ? A3(e.declaration.parameters[0].name) : void 0;
        }
        function ck(e) {
          return e.kind === 164 && !Ta(e.expression);
        }
        function e0(e) {
          var t;
          switch (e.kind) {
            case 79:
            case 80:
              return (t = e.emitNode) != null && t.autoGenerate ? void 0 : e.escapedText;
            case 10:
            case 8:
            case 14:
              return vi(e.text);
            case 164:
              return Ta(e.expression) ? vi(e.expression.text) : void 0;
            default:
              return Y.assertNever(e);
          }
        }
        function lk(e) {
          return Y.checkDefined(e0(e));
        }
        function ls(e) {
          switch (e.kind) {
            case 108:
              return "this";
            case 80:
            case 79:
              return hf(e) === 0 ? qr(e) : gf(e);
            case 163:
              return ls(e.left) + "." + ls(e.right);
            case 208:
              return yt(e.name) || vn(e.name) ? ls(e.expression) + "." + ls(e.name) : Y.assertNever(e.name);
            case 314:
              return ls(e.left) + ls(e.right);
            default:
              return Y.assertNever(e);
          }
        }
        function uk(e, t, r, s, f, x) {
          let w = Si(e);
          return P3(w, e, t, r, s, f, x);
        }
        function pk(e, t, r, s, f, x, w) {
          let A = Ar(e.text, t.pos);
          return iv(e, A, t.end - A, r, s, f, x, w);
        }
        function P3(e, t, r, s, f, x, w) {
          let A = i0(e, t);
          return iv(e, A.start, A.length, r, s, f, x, w);
        }
        function fk(e, t, r, s) {
          let f = i0(e, t);
          return r0(e, f.start, f.length, r, s);
        }
        function dk(e, t, r, s) {
          let f = Ar(e.text, t.pos);
          return r0(e, f, t.end - f, r, s);
        }
        function t0(e, t, r) {
          Y.assertGreaterThanOrEqual(t, 0), Y.assertGreaterThanOrEqual(r, 0), e && (Y.assertLessThanOrEqual(t, e.text.length), Y.assertLessThanOrEqual(t + r, e.text.length));
        }
        function r0(e, t, r, s, f) {
          return t0(e, t, r), { file: e, start: t, length: r, code: s.code, category: s.category, messageText: s.next ? s : s.messageText, relatedInformation: f };
        }
        function mk(e, t, r) {
          return { file: e, start: 0, length: 0, code: t.code, category: t.category, messageText: t.next ? t : t.messageText, relatedInformation: r };
        }
        function hk(e) {
          return typeof e.messageText == "string" ? { code: e.code, category: e.category, messageText: e.messageText, next: e.next } : e.messageText;
        }
        function gk(e, t, r) {
          return { file: e, start: t.pos, length: t.end - t.pos, code: r.code, category: r.category, messageText: r.message };
        }
        function n0(e, t) {
          let r = Po(e.languageVersion, true, e.languageVariant, e.text, void 0, t);
          r.scan();
          let s = r.getTokenPos();
          return ha(s, r.getTextPos());
        }
        function yk(e, t) {
          let r = Po(e.languageVersion, true, e.languageVariant, e.text, void 0, t);
          return r.scan(), r.getToken();
        }
        function vk(e, t) {
          let r = Ar(e.text, t.pos);
          if (t.body && t.body.kind === 238) {
            let { line: s } = Ls(e, t.body.pos), { line: f } = Ls(e, t.body.end);
            if (s < f)
              return L_(r, d3(s, e) - r + 1);
          }
          return ha(r, t.end);
        }
        function i0(e, t) {
          let r = t;
          switch (t.kind) {
            case 308:
              let x = Ar(e.text, 0, false);
              return x === e.text.length ? L_(0, 0) : n0(e, x);
            case 257:
            case 205:
            case 260:
            case 228:
            case 261:
            case 264:
            case 263:
            case 302:
            case 259:
            case 215:
            case 171:
            case 174:
            case 175:
            case 262:
            case 169:
            case 168:
            case 271:
              r = t.name;
              break;
            case 216:
              return vk(e, t);
            case 292:
            case 293:
              let w = Ar(e.text, t.pos), A = t.statements.length > 0 ? t.statements[0].pos : t.end;
              return ha(w, A);
          }
          if (r === void 0)
            return n0(e, t.pos);
          Y.assert(!Ho(r));
          let s = va(r), f = s || td(t) ? r.pos : Ar(e.text, r.pos);
          return s ? (Y.assert(f === r.pos, "This failure could trigger https://github.com/Microsoft/TypeScript/issues/20809"), Y.assert(f === r.end, "This failure could trigger https://github.com/Microsoft/TypeScript/issues/20809")) : (Y.assert(f >= r.pos, "This failure could trigger https://github.com/Microsoft/TypeScript/issues/20809"), Y.assert(f <= r.end, "This failure could trigger https://github.com/Microsoft/TypeScript/issues/20809")), ha(f, r.end);
        }
        function bk(e) {
          return (e.externalModuleIndicator || e.commonJsModuleIndicator) !== void 0;
        }
        function a0(e) {
          return e.scriptKind === 6;
        }
        function Tk(e) {
          return !!(ef(e) & 2048);
        }
        function Sk(e) {
          return !!(ef(e) & 64 && !lS(e, e.parent));
        }
        function D3(e) {
          return !!(tf(e) & 2);
        }
        function xk(e) {
          return !!(tf(e) & 1);
        }
        function Ek(e) {
          return e.kind === 210 && e.expression.kind === 106;
        }
        function s0(e) {
          return e.kind === 210 && e.expression.kind === 100;
        }
        function o0(e) {
          return t2(e) && e.keywordToken === 100 && e.name.escapedText === "meta";
        }
        function k3(e) {
          return Kl(e) && Yv(e.argument) && Gn(e.argument.literal);
        }
        function us(e) {
          return e.kind === 241 && e.expression.kind === 10;
        }
        function Tf(e) {
          return !!(xi(e) & 2097152);
        }
        function _0(e) {
          return Tf(e) && Wo(e);
        }
        function wk(e) {
          return yt(e.name) && !e.initializer;
        }
        function c0(e) {
          return Tf(e) && zo(e) && me(e.declarationList.declarations, wk);
        }
        function Ck(e, t) {
          return e.kind !== 11 ? Ao(t.text, e.pos) : void 0;
        }
        function I3(e, t) {
          let r = e.kind === 166 || e.kind === 165 || e.kind === 215 || e.kind === 216 || e.kind === 214 || e.kind === 257 || e.kind === 278 ? Ft(HT(t, e.pos), Ao(t, e.pos)) : Ao(t, e.pos);
          return ee(r, (s) => t.charCodeAt(s.pos + 1) === 42 && t.charCodeAt(s.pos + 2) === 42 && t.charCodeAt(s.pos + 3) !== 47);
        }
        function l0(e) {
          if (179 <= e.kind && e.kind <= 202)
            return true;
          switch (e.kind) {
            case 131:
            case 157:
            case 148:
            case 160:
            case 152:
            case 134:
            case 153:
            case 149:
            case 155:
            case 144:
              return true;
            case 114:
              return e.parent.kind !== 219;
            case 230:
              return ru(e.parent) && !Z0(e);
            case 165:
              return e.parent.kind === 197 || e.parent.kind === 192;
            case 79:
              (e.parent.kind === 163 && e.parent.right === e || e.parent.kind === 208 && e.parent.name === e) && (e = e.parent), Y.assert(e.kind === 79 || e.kind === 163 || e.kind === 208, "'node' was expected to be a qualified name, identifier or property access in 'isPartOfTypeNode'.");
            case 163:
            case 208:
            case 108: {
              let { parent: t } = e;
              if (t.kind === 183)
                return false;
              if (t.kind === 202)
                return !t.isTypeOf;
              if (179 <= t.kind && t.kind <= 202)
                return true;
              switch (t.kind) {
                case 230:
                  return ru(t.parent) && !Z0(t);
                case 165:
                  return e === t.constraint;
                case 348:
                  return e === t.constraint;
                case 169:
                case 168:
                case 166:
                case 257:
                  return e === t.type;
                case 259:
                case 215:
                case 216:
                case 173:
                case 171:
                case 170:
                case 174:
                case 175:
                  return e === t.type;
                case 176:
                case 177:
                case 178:
                  return e === t.type;
                case 213:
                  return e === t.type;
                case 210:
                case 211:
                  return pe(t.typeArguments, e);
                case 212:
                  return false;
              }
            }
          }
          return false;
        }
        function Ak(e, t) {
          for (; e; ) {
            if (e.kind === t)
              return true;
            e = e.parent;
          }
          return false;
        }
        function Pk(e, t) {
          return r(e);
          function r(s) {
            switch (s.kind) {
              case 250:
                return t(s);
              case 266:
              case 238:
              case 242:
              case 243:
              case 244:
              case 245:
              case 246:
              case 247:
              case 251:
              case 252:
              case 292:
              case 293:
              case 253:
              case 255:
              case 295:
                return xr(s, r);
            }
          }
        }
        function Dk(e, t) {
          return r(e);
          function r(s) {
            switch (s.kind) {
              case 226:
                t(s);
                let f = s.expression;
                f && r(f);
                return;
              case 263:
              case 261:
              case 264:
              case 262:
                return;
              default:
                if (ga(s)) {
                  if (s.name && s.name.kind === 164) {
                    r(s.name.expression);
                    return;
                  }
                } else
                  l0(s) || xr(s, r);
            }
          }
        }
        function kk(e) {
          return e && e.kind === 185 ? e.elementType : e && e.kind === 180 ? Xa(e.typeArguments) : void 0;
        }
        function Ik(e) {
          switch (e.kind) {
            case 261:
            case 260:
            case 228:
            case 184:
              return e.members;
            case 207:
              return e.properties;
          }
        }
        function u0(e) {
          if (e)
            switch (e.kind) {
              case 205:
              case 302:
              case 166:
              case 299:
              case 169:
              case 168:
              case 300:
              case 257:
                return true;
            }
          return false;
        }
        function Nk(e) {
          return u0(e) || pf(e);
        }
        function N3(e) {
          return e.parent.kind === 258 && e.parent.parent.kind === 240;
        }
        function Ok(e) {
          return Pr(e) ? Hs(e.parent) && ur(e.parent.parent) && ps(e.parent.parent) === 2 || p0(e.parent) : false;
        }
        function p0(e) {
          return Pr(e) ? ur(e) && ps(e) === 1 : false;
        }
        function Mk(e) {
          return (Vi(e) ? D3(e) && yt(e.name) && N3(e) : Bo(e) ? $0(e) && Lf(e) : Wl(e) && $0(e)) || p0(e);
        }
        function Lk(e) {
          switch (e.kind) {
            case 171:
            case 170:
            case 173:
            case 174:
            case 175:
            case 259:
            case 215:
              return true;
          }
          return false;
        }
        function Rk(e, t) {
          for (; ; ) {
            if (t && t(e), e.statement.kind !== 253)
              return e.statement;
            e = e.statement;
          }
        }
        function O3(e) {
          return e && e.kind === 238 && ga(e.parent);
        }
        function jk(e) {
          return e && e.kind === 171 && e.parent.kind === 207;
        }
        function Jk(e) {
          return (e.kind === 171 || e.kind === 174 || e.kind === 175) && (e.parent.kind === 207 || e.parent.kind === 228);
        }
        function Fk(e) {
          return e && e.kind === 1;
        }
        function Bk(e) {
          return e && e.kind === 0;
        }
        function f0(e, t, r) {
          return e.properties.filter((s) => {
            if (s.kind === 299) {
              let f = e0(s.name);
              return t === f || !!r && r === f;
            }
            return false;
          });
        }
        function qk(e, t, r) {
          return q(f0(e, t), (s) => Yl(s.initializer) ? Ae(s.initializer.elements, (f) => Gn(f) && f.text === r) : void 0);
        }
        function M3(e) {
          if (e && e.statements.length) {
            let t = e.statements[0].expression;
            return ln(t, Hs);
          }
        }
        function Uk(e, t, r) {
          return q(L3(e, t), (s) => Yl(s.initializer) ? Ae(s.initializer.elements, (f) => Gn(f) && f.text === r) : void 0);
        }
        function L3(e, t) {
          let r = M3(e);
          return r ? f0(r, t) : Bt;
        }
        function zk(e) {
          return zi(e.parent, ga);
        }
        function Wk(e) {
          return zi(e.parent, HS);
        }
        function Vk(e) {
          return zi(e.parent, bi);
        }
        function Hk(e) {
          return zi(e.parent, (t) => bi(t) || ga(t) ? "quit" : Hl(t));
        }
        function Gk(e) {
          return zi(e.parent, uf);
        }
        function d0(e, t, r) {
          for (Y.assert(e.kind !== 308); ; ) {
            if (e = e.parent, !e)
              return Y.fail();
            switch (e.kind) {
              case 164:
                if (r && bi(e.parent.parent))
                  return e;
                e = e.parent.parent;
                break;
              case 167:
                e.parent.kind === 166 && Js(e.parent.parent) ? e = e.parent.parent : Js(e.parent) && (e = e.parent);
                break;
              case 216:
                if (!t)
                  continue;
              case 259:
              case 215:
              case 264:
              case 172:
              case 169:
              case 168:
              case 171:
              case 170:
              case 173:
              case 174:
              case 175:
              case 176:
              case 177:
              case 178:
              case 263:
              case 308:
                return e;
            }
          }
        }
        function $k(e) {
          switch (e.kind) {
            case 216:
            case 259:
            case 215:
            case 169:
              return true;
            case 238:
              switch (e.parent.kind) {
                case 173:
                case 171:
                case 174:
                case 175:
                  return true;
                default:
                  return false;
              }
            default:
              return false;
          }
        }
        function Kk(e) {
          yt(e) && (_c(e.parent) || Wo(e.parent)) && e.parent.name === e && (e = e.parent);
          let t = d0(e, true, false);
          return wi(t);
        }
        function Xk(e) {
          let t = d0(e, false, false);
          if (t)
            switch (t.kind) {
              case 173:
              case 259:
              case 215:
                return t;
            }
        }
        function Yk(e, t) {
          for (; ; ) {
            if (e = e.parent, !e)
              return;
            switch (e.kind) {
              case 164:
                e = e.parent;
                break;
              case 259:
              case 215:
              case 216:
                if (!t)
                  continue;
              case 169:
              case 168:
              case 171:
              case 170:
              case 173:
              case 174:
              case 175:
              case 172:
                return e;
              case 167:
                e.parent.kind === 166 && Js(e.parent.parent) ? e = e.parent.parent : Js(e.parent) && (e = e.parent);
                break;
            }
          }
        }
        function Qk(e) {
          if (e.kind === 215 || e.kind === 216) {
            let t = e, r = e.parent;
            for (; r.kind === 214; )
              t = r, r = r.parent;
            if (r.kind === 210 && r.expression === t)
              return r;
          }
        }
        function Zk(e) {
          return e.kind === 106 || Sf(e);
        }
        function Sf(e) {
          let t = e.kind;
          return (t === 208 || t === 209) && e.expression.kind === 106;
        }
        function eI(e) {
          let t = e.kind;
          return (t === 208 || t === 209) && e.expression.kind === 108;
        }
        function tI(e) {
          var t;
          return !!e && Vi(e) && ((t = e.initializer) == null ? void 0 : t.kind) === 108;
        }
        function rI(e) {
          return !!e && (nu(e) || lc(e)) && ur(e.parent.parent) && e.parent.parent.operatorToken.kind === 63 && e.parent.parent.right.kind === 108;
        }
        function nI(e) {
          switch (e.kind) {
            case 180:
              return e.typeName;
            case 230:
              return Bs(e.expression) ? e.expression : void 0;
            case 79:
            case 163:
              return e;
          }
        }
        function iI(e) {
          switch (e.kind) {
            case 212:
              return e.tag;
            case 283:
            case 282:
              return e.tagName;
            default:
              return e.expression;
          }
        }
        function R3(e, t, r, s) {
          if (e && af(t) && vn(t.name))
            return false;
          switch (t.kind) {
            case 260:
              return true;
            case 228:
              return !e;
            case 169:
              return r !== void 0 && (e ? _c(r) : bi(r) && !W4(t) && !V4(t));
            case 174:
            case 175:
            case 171:
              return t.body !== void 0 && r !== void 0 && (e ? _c(r) : bi(r));
            case 166:
              return e ? r !== void 0 && r.body !== void 0 && (r.kind === 173 || r.kind === 171 || r.kind === 175) && j4(r) !== t && s !== void 0 && s.kind === 260 : false;
          }
          return false;
        }
        function q_(e, t, r, s) {
          return Il(t) && R3(e, t, r, s);
        }
        function m0(e, t, r, s) {
          return q_(e, t, r, s) || h0(e, t, r);
        }
        function h0(e, t, r) {
          switch (t.kind) {
            case 260:
              return Ke(t.members, (s) => m0(e, s, t, r));
            case 228:
              return !e && Ke(t.members, (s) => m0(e, s, t, r));
            case 171:
            case 175:
            case 173:
              return Ke(t.parameters, (s) => q_(e, s, t, r));
            default:
              return false;
          }
        }
        function aI(e, t) {
          if (q_(e, t))
            return true;
          let r = R4(t);
          return !!r && h0(e, r, t);
        }
        function sI(e, t, r) {
          let s;
          if (pf(t)) {
            let { firstAccessor: f, secondAccessor: x, setAccessor: w } = W0(r.members, t), A = Il(f) ? f : x && Il(x) ? x : void 0;
            if (!A || t !== A)
              return false;
            s = w == null ? void 0 : w.parameters;
          } else
            Vl(t) && (s = t.parameters);
          if (q_(e, t, r))
            return true;
          if (s) {
            for (let f of s)
              if (!kl(f) && q_(e, f, t, r))
                return true;
          }
          return false;
        }
        function j3(e) {
          if (e.textSourceNode) {
            switch (e.textSourceNode.kind) {
              case 10:
                return j3(e.textSourceNode);
              case 14:
                return e.text === "";
            }
            return false;
          }
          return e.text === "";
        }
        function xf(e) {
          let { parent: t } = e;
          return t.kind === 283 || t.kind === 282 || t.kind === 284 ? t.tagName === e : false;
        }
        function g0(e) {
          switch (e.kind) {
            case 106:
            case 104:
            case 110:
            case 95:
            case 13:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 231:
            case 213:
            case 235:
            case 232:
            case 214:
            case 215:
            case 228:
            case 216:
            case 219:
            case 217:
            case 218:
            case 221:
            case 222:
            case 223:
            case 224:
            case 227:
            case 225:
            case 229:
            case 281:
            case 282:
            case 285:
            case 226:
            case 220:
            case 233:
              return true;
            case 230:
              return !ru(e.parent) && !md(e.parent);
            case 163:
              for (; e.parent.kind === 163; )
                e = e.parent;
              return e.parent.kind === 183 || Sl(e.parent) || fd(e.parent) || uc(e.parent) || xf(e);
            case 314:
              for (; uc(e.parent); )
                e = e.parent;
              return e.parent.kind === 183 || Sl(e.parent) || fd(e.parent) || uc(e.parent) || xf(e);
            case 80:
              return ur(e.parent) && e.parent.left === e && e.parent.operatorToken.kind === 101;
            case 79:
              if (e.parent.kind === 183 || Sl(e.parent) || fd(e.parent) || uc(e.parent) || xf(e))
                return true;
            case 8:
            case 9:
            case 10:
            case 14:
            case 108:
              return J3(e);
            default:
              return false;
          }
        }
        function J3(e) {
          let { parent: t } = e;
          switch (t.kind) {
            case 257:
            case 166:
            case 169:
            case 168:
            case 302:
            case 299:
            case 205:
              return t.initializer === e;
            case 241:
            case 242:
            case 243:
            case 244:
            case 250:
            case 251:
            case 252:
            case 292:
            case 254:
              return t.expression === e;
            case 245:
              let r = t;
              return r.initializer === e && r.initializer.kind !== 258 || r.condition === e || r.incrementor === e;
            case 246:
            case 247:
              let s = t;
              return s.initializer === e && s.initializer.kind !== 258 || s.expression === e;
            case 213:
            case 231:
              return e === t.expression;
            case 236:
              return e === t.expression;
            case 164:
              return e === t.expression;
            case 167:
            case 291:
            case 290:
            case 301:
              return true;
            case 230:
              return t.expression === e && !l0(t);
            case 300:
              return t.objectAssignmentInitializer === e;
            case 235:
              return e === t.expression;
            default:
              return g0(t);
          }
        }
        function F3(e) {
          for (; e.kind === 163 || e.kind === 79; )
            e = e.parent;
          return e.kind === 183;
        }
        function oI(e) {
          return ld(e) && !!e.parent.moduleSpecifier;
        }
        function B3(e) {
          return e.kind === 268 && e.moduleReference.kind === 280;
        }
        function _I(e) {
          return Y.assert(B3(e)), e.moduleReference.expression;
        }
        function cI(e) {
          return Ef(e) && rv(e.initializer).arguments[0];
        }
        function lI(e) {
          return e.kind === 268 && e.moduleReference.kind !== 280;
        }
        function y0(e) {
          return Pr(e);
        }
        function uI(e) {
          return !Pr(e);
        }
        function Pr(e) {
          return !!e && !!(e.flags & 262144);
        }
        function pI(e) {
          return !!e && !!(e.flags & 67108864);
        }
        function fI(e) {
          return !a0(e);
        }
        function q3(e) {
          return !!e && !!(e.flags & 8388608);
        }
        function dI(e) {
          return ac(e) && yt(e.typeName) && e.typeName.escapedText === "Object" && e.typeArguments && e.typeArguments.length === 2 && (e.typeArguments[0].kind === 152 || e.typeArguments[0].kind === 148);
        }
        function El(e, t) {
          if (e.kind !== 210)
            return false;
          let { expression: r, arguments: s } = e;
          if (r.kind !== 79 || r.escapedText !== "require" || s.length !== 1)
            return false;
          let f = s[0];
          return !t || Ti(f);
        }
        function U3(e) {
          return z3(e, false);
        }
        function Ef(e) {
          return z3(e, true);
        }
        function mI(e) {
          return Xl(e) && Ef(e.parent.parent);
        }
        function z3(e, t) {
          return Vi(e) && !!e.initializer && El(t ? rv(e.initializer) : e.initializer, true);
        }
        function W3(e) {
          return zo(e) && e.declarationList.declarations.length > 0 && me(e.declarationList.declarations, (t) => U3(t));
        }
        function hI(e) {
          return e === 39 || e === 34;
        }
        function gI(e, t) {
          return No(t, e).charCodeAt(0) === 34;
        }
        function v0(e) {
          return ur(e) || Lo(e) || yt(e) || sc(e);
        }
        function V3(e) {
          return Pr(e) && e.initializer && ur(e.initializer) && (e.initializer.operatorToken.kind === 56 || e.initializer.operatorToken.kind === 60) && e.name && Bs(e.name) && z_(e.name, e.initializer.left) ? e.initializer.right : e.initializer;
        }
        function yI(e) {
          let t = V3(e);
          return t && U_(t, Nl(e.name));
        }
        function vI(e, t) {
          return c(e.properties, (r) => lc(r) && yt(r.name) && r.name.escapedText === "value" && r.initializer && U_(r.initializer, t));
        }
        function bI(e) {
          if (e && e.parent && ur(e.parent) && e.parent.operatorToken.kind === 63) {
            let t = Nl(e.parent.left);
            return U_(e.parent.right, t) || TI(e.parent.left, e.parent.right, t);
          }
          if (e && sc(e) && S0(e)) {
            let t = vI(e.arguments[2], e.arguments[1].text === "prototype");
            if (t)
              return t;
          }
        }
        function U_(e, t) {
          if (sc(e)) {
            let r = Pl(e.expression);
            return r.kind === 215 || r.kind === 216 ? e : void 0;
          }
          if (e.kind === 215 || e.kind === 228 || e.kind === 216 || Hs(e) && (e.properties.length === 0 || t))
            return e;
        }
        function TI(e, t, r) {
          let s = ur(t) && (t.operatorToken.kind === 56 || t.operatorToken.kind === 60) && U_(t.right, r);
          if (s && z_(e, t.left))
            return s;
        }
        function SI(e) {
          let t = Vi(e.parent) ? e.parent.name : ur(e.parent) && e.parent.operatorToken.kind === 63 ? e.parent.left : void 0;
          return t && U_(e.right, Nl(t)) && Bs(t) && z_(t, e.left);
        }
        function xI(e) {
          if (ur(e.parent)) {
            let t = (e.parent.operatorToken.kind === 56 || e.parent.operatorToken.kind === 60) && ur(e.parent.parent) ? e.parent.parent : e.parent;
            if (t.operatorToken.kind === 63 && yt(t.left))
              return t.left;
          } else if (Vi(e.parent))
            return e.parent.name;
        }
        function z_(e, t) {
          return L0(e) && L0(t) ? kf(e) === kf(t) : js(e) && wf(t) && (t.expression.kind === 108 || yt(t.expression) && (t.expression.escapedText === "window" || t.expression.escapedText === "self" || t.expression.escapedText === "global")) ? z_(e, $3(t)) : wf(e) && wf(t) ? Fs(e) === Fs(t) && z_(e.expression, t.expression) : false;
        }
        function b0(e) {
          for (; ms(e, true); )
            e = e.right;
          return e;
        }
        function H3(e) {
          return yt(e) && e.escapedText === "exports";
        }
        function G3(e) {
          return yt(e) && e.escapedText === "module";
        }
        function T0(e) {
          return (bn(e) || wl(e)) && G3(e.expression) && Fs(e) === "exports";
        }
        function ps(e) {
          let t = EI(e);
          return t === 5 || Pr(e) ? t : 0;
        }
        function S0(e) {
          return I(e.arguments) === 3 && bn(e.expression) && yt(e.expression.expression) && qr(e.expression.expression) === "Object" && qr(e.expression.name) === "defineProperty" && Ta(e.arguments[1]) && V_(e.arguments[0], true);
        }
        function wf(e) {
          return bn(e) || wl(e);
        }
        function wl(e) {
          return gs(e) && Ta(e.argumentExpression);
        }
        function W_(e, t) {
          return bn(e) && (!t && e.expression.kind === 108 || yt(e.name) && V_(e.expression, true)) || x0(e, t);
        }
        function x0(e, t) {
          return wl(e) && (!t && e.expression.kind === 108 || Bs(e.expression) || W_(e.expression, true));
        }
        function V_(e, t) {
          return Bs(e) || W_(e, t);
        }
        function $3(e) {
          return bn(e) ? e.name : e.argumentExpression;
        }
        function EI(e) {
          if (sc(e)) {
            if (!S0(e))
              return 0;
            let t = e.arguments[0];
            return H3(t) || T0(t) ? 8 : W_(t) && Fs(t) === "prototype" ? 9 : 7;
          }
          return e.operatorToken.kind !== 63 || !Lo(e.left) || wI(b0(e)) ? 0 : V_(e.left.expression, true) && Fs(e.left) === "prototype" && Hs(X3(e)) ? 6 : K3(e.left);
        }
        function wI(e) {
          return Qv(e) && zs(e.expression) && e.expression.text === "0";
        }
        function Cf(e) {
          if (bn(e))
            return e.name;
          let t = Pl(e.argumentExpression);
          return zs(t) || Ti(t) ? t : e;
        }
        function Fs(e) {
          let t = Cf(e);
          if (t) {
            if (yt(t))
              return t.escapedText;
            if (Ti(t) || zs(t))
              return vi(t.text);
          }
        }
        function K3(e) {
          if (e.expression.kind === 108)
            return 4;
          if (T0(e))
            return 2;
          if (V_(e.expression, true)) {
            if (Nl(e.expression))
              return 3;
            let t = e;
            for (; !yt(t.expression); )
              t = t.expression;
            let r = t.expression;
            if ((r.escapedText === "exports" || r.escapedText === "module" && Fs(t) === "exports") && W_(e))
              return 1;
            if (V_(e, true) || gs(e) && M0(e))
              return 5;
          }
          return 0;
        }
        function X3(e) {
          for (; ur(e.right); )
            e = e.right;
          return e.right;
        }
        function CI(e) {
          return ur(e) && ps(e) === 3;
        }
        function AI(e) {
          return Pr(e) && e.parent && e.parent.kind === 241 && (!gs(e) || wl(e)) && !!_f(e.parent);
        }
        function PI(e, t) {
          let { valueDeclaration: r } = e;
          (!r || !(t.flags & 16777216 && !Pr(t) && !(r.flags & 16777216)) && v0(r) && !v0(t) || r.kind !== t.kind && S3(r)) && (e.valueDeclaration = t);
        }
        function DI(e) {
          if (!e || !e.valueDeclaration)
            return false;
          let t = e.valueDeclaration;
          return t.kind === 259 || Vi(t) && t.initializer && ga(t.initializer);
        }
        function kI(e) {
          var t, r;
          switch (e.kind) {
            case 257:
            case 205:
              return (t = zi(e.initializer, (s) => El(s, true))) == null ? void 0 : t.arguments[0];
            case 269:
              return ln(e.moduleSpecifier, Ti);
            case 268:
              return ln((r = ln(e.moduleReference, ud)) == null ? void 0 : r.expression, Ti);
            case 270:
            case 277:
              return ln(e.parent.moduleSpecifier, Ti);
            case 271:
            case 278:
              return ln(e.parent.parent.moduleSpecifier, Ti);
            case 273:
              return ln(e.parent.parent.parent.moduleSpecifier, Ti);
            default:
              Y.assertNever(e);
          }
        }
        function II(e) {
          return Y3(e) || Y.failBadSyntaxKind(e.parent);
        }
        function Y3(e) {
          switch (e.parent.kind) {
            case 269:
            case 275:
              return e.parent;
            case 280:
              return e.parent.parent;
            case 210:
              return s0(e.parent) || El(e.parent, false) ? e.parent : void 0;
            case 198:
              return Y.assert(Gn(e)), ln(e.parent.parent, Kl);
            default:
              return;
          }
        }
        function E0(e) {
          switch (e.kind) {
            case 269:
            case 275:
              return e.moduleSpecifier;
            case 268:
              return e.moduleReference.kind === 280 ? e.moduleReference.expression : void 0;
            case 202:
              return k3(e) ? e.argument.literal : void 0;
            case 210:
              return e.arguments[0];
            case 264:
              return e.name.kind === 10 ? e.name : void 0;
            default:
              return Y.assertNever(e);
          }
        }
        function Q3(e) {
          switch (e.kind) {
            case 269:
              return e.importClause && ln(e.importClause.namedBindings, _2);
            case 268:
              return e;
            case 275:
              return e.exportClause && ln(e.exportClause, ld);
            default:
              return Y.assertNever(e);
          }
        }
        function Z3(e) {
          return e.kind === 269 && !!e.importClause && !!e.importClause.name;
        }
        function NI(e, t) {
          if (e.name) {
            let r = t(e);
            if (r)
              return r;
          }
          if (e.namedBindings) {
            let r = _2(e.namedBindings) ? t(e.namedBindings) : c(e.namedBindings.elements, t);
            if (r)
              return r;
          }
        }
        function OI(e) {
          if (e)
            switch (e.kind) {
              case 166:
              case 171:
              case 170:
              case 300:
              case 299:
              case 169:
              case 168:
                return e.questionToken !== void 0;
            }
          return false;
        }
        function MI(e) {
          let t = dd(e) ? pa(e.parameters) : void 0, r = ln(t && t.name, yt);
          return !!r && r.escapedText === "new";
        }
        function Cl(e) {
          return e.kind === 349 || e.kind === 341 || e.kind === 343;
        }
        function LI(e) {
          return Cl(e) || n2(e);
        }
        function RI(e) {
          return Zl(e) && ur(e.expression) && e.expression.operatorToken.kind === 63 ? b0(e.expression) : void 0;
        }
        function e4(e) {
          return Zl(e) && ur(e.expression) && ps(e.expression) !== 0 && ur(e.expression.right) && (e.expression.right.operatorToken.kind === 56 || e.expression.right.operatorToken.kind === 60) ? e.expression.right.right : void 0;
        }
        function w0(e) {
          switch (e.kind) {
            case 240:
              let t = Al(e);
              return t && t.initializer;
            case 169:
              return e.initializer;
            case 299:
              return e.initializer;
          }
        }
        function Al(e) {
          return zo(e) ? pa(e.declarationList.declarations) : void 0;
        }
        function t4(e) {
          return Ea(e) && e.body && e.body.kind === 264 ? e.body : void 0;
        }
        function jI(e) {
          if (e.kind >= 240 && e.kind <= 256)
            return true;
          switch (e.kind) {
            case 79:
            case 108:
            case 106:
            case 163:
            case 233:
            case 209:
            case 208:
            case 205:
            case 215:
            case 216:
            case 171:
            case 174:
            case 175:
              return true;
            default:
              return false;
          }
        }
        function Af(e) {
          switch (e.kind) {
            case 216:
            case 223:
            case 238:
            case 249:
            case 176:
            case 292:
            case 260:
            case 228:
            case 172:
            case 173:
            case 182:
            case 177:
            case 248:
            case 256:
            case 243:
            case 209:
            case 239:
            case 1:
            case 263:
            case 302:
            case 274:
            case 275:
            case 278:
            case 241:
            case 246:
            case 247:
            case 245:
            case 259:
            case 215:
            case 181:
            case 174:
            case 79:
            case 242:
            case 269:
            case 268:
            case 178:
            case 261:
            case 320:
            case 326:
            case 253:
            case 171:
            case 170:
            case 264:
            case 199:
            case 267:
            case 207:
            case 166:
            case 214:
            case 208:
            case 299:
            case 169:
            case 168:
            case 250:
            case 175:
            case 300:
            case 301:
            case 252:
            case 254:
            case 255:
            case 262:
            case 165:
            case 257:
            case 240:
            case 244:
            case 251:
              return true;
            default:
              return false;
          }
        }
        function r4(e, t) {
          let r;
          u0(e) && l3(e) && ya(e.initializer) && (r = jr(r, n4(e, Zn(e.initializer.jsDoc))));
          let s = e;
          for (; s && s.parent; ) {
            if (ya(s) && (r = jr(r, n4(e, Zn(s.jsDoc)))), s.kind === 166) {
              r = jr(r, (t ? bS : of)(s));
              break;
            }
            if (s.kind === 165) {
              r = jr(r, (t ? xS : SS)(s));
              break;
            }
            s = a4(s);
          }
          return r || Bt;
        }
        function n4(e, t) {
          if (Ho(t)) {
            let r = ee(t.tags, (s) => i4(e, s));
            return t.tags === r ? [t] : r;
          }
          return i4(e, t) ? [t] : void 0;
        }
        function i4(e, t) {
          return !(au(t) || T2(t)) || !t.parent || !Ho(t.parent) || !qo(t.parent.parent) || t.parent.parent === e;
        }
        function a4(e) {
          let t = e.parent;
          if (t.kind === 299 || t.kind === 274 || t.kind === 169 || t.kind === 241 && e.kind === 208 || t.kind === 250 || t4(t) || ur(e) && e.operatorToken.kind === 63)
            return t;
          if (t.parent && (Al(t.parent) === e || ur(t) && t.operatorToken.kind === 63))
            return t.parent;
          if (t.parent && t.parent.parent && (Al(t.parent.parent) || w0(t.parent.parent) === e || e4(t.parent.parent)))
            return t.parent.parent;
        }
        function JI(e) {
          if (e.symbol)
            return e.symbol;
          if (!yt(e.name))
            return;
          let t = e.name.escapedText, r = C0(e);
          if (!r)
            return;
          let s = Ae(r.parameters, (f) => f.name.kind === 79 && f.name.escapedText === t);
          return s && s.symbol;
        }
        function FI(e) {
          if (Ho(e.parent) && e.parent.tags) {
            let t = Ae(e.parent.tags, Cl);
            if (t)
              return t;
          }
          return C0(e);
        }
        function C0(e) {
          let t = A0(e);
          if (t)
            return Wl(t) && t.type && ga(t.type) ? t.type : ga(t) ? t : void 0;
        }
        function A0(e) {
          let t = s4(e);
          if (t)
            return e4(t) || RI(t) || w0(t) || Al(t) || t4(t) || t;
        }
        function s4(e) {
          let t = P0(e);
          if (!t)
            return;
          let r = t.parent;
          if (r && r.jsDoc && t === Cn(r.jsDoc))
            return r;
        }
        function P0(e) {
          return zi(e.parent, Ho);
        }
        function BI(e) {
          let t = e.name.escapedText, { typeParameters: r } = e.parent.parent.parent;
          return r && Ae(r, (s) => s.name.escapedText === t);
        }
        function qI(e) {
          return !!e.typeArguments;
        }
        function o4(e) {
          let t = e.parent;
          for (; ; ) {
            switch (t.kind) {
              case 223:
                let r = t.operatorToken.kind;
                return G_(r) && t.left === e ? r === 63 || jf(r) ? 1 : 2 : 0;
              case 221:
              case 222:
                let s = t.operator;
                return s === 45 || s === 46 ? 2 : 0;
              case 246:
              case 247:
                return t.initializer === e ? 1 : 0;
              case 214:
              case 206:
              case 227:
              case 232:
                e = t;
                break;
              case 301:
                e = t.parent;
                break;
              case 300:
                if (t.name !== e)
                  return 0;
                e = t.parent;
                break;
              case 299:
                if (t.name === e)
                  return 0;
                e = t.parent;
                break;
              default:
                return 0;
            }
            t = e.parent;
          }
        }
        function UI(e) {
          return o4(e) !== 0;
        }
        function zI(e) {
          switch (e.kind) {
            case 238:
            case 240:
            case 251:
            case 242:
            case 252:
            case 266:
            case 292:
            case 293:
            case 253:
            case 245:
            case 246:
            case 247:
            case 243:
            case 244:
            case 255:
            case 295:
              return true;
          }
          return false;
        }
        function WI(e) {
          return ad(e) || sd(e) || Ly(e) || Wo(e) || nc(e);
        }
        function _4(e, t) {
          for (; e && e.kind === t; )
            e = e.parent;
          return e;
        }
        function VI(e) {
          return _4(e, 193);
        }
        function D0(e) {
          return _4(e, 214);
        }
        function HI(e) {
          let t;
          for (; e && e.kind === 193; )
            t = e, e = e.parent;
          return [t, e];
        }
        function GI(e) {
          for (; Kv(e); )
            e = e.type;
          return e;
        }
        function Pl(e, t) {
          return $o(e, t ? 17 : 1);
        }
        function $I(e) {
          return e.kind !== 208 && e.kind !== 209 ? false : (e = D0(e.parent), e && e.kind === 217);
        }
        function KI(e, t) {
          for (; e; ) {
            if (e === t)
              return true;
            e = e.parent;
          }
          return false;
        }
        function c4(e) {
          return !wi(e) && !df(e) && ko(e.parent) && e.parent.name === e;
        }
        function XI(e) {
          let t = e.parent;
          switch (e.kind) {
            case 10:
            case 14:
            case 8:
              if (Ws(t))
                return t.parent;
            case 79:
              if (ko(t))
                return t.name === e ? t : void 0;
              if (rc(t)) {
                let r = t.parent;
                return pc(r) && r.name === t ? r : void 0;
              } else {
                let r = t.parent;
                return ur(r) && ps(r) !== 0 && (r.left.symbol || r.symbol) && ml(r) === e ? r : void 0;
              }
            case 80:
              return ko(t) && t.name === e ? t : void 0;
            default:
              return;
          }
        }
        function l4(e) {
          return Ta(e) && e.parent.kind === 164 && ko(e.parent.parent);
        }
        function YI(e) {
          let t = e.parent;
          switch (t.kind) {
            case 169:
            case 168:
            case 171:
            case 170:
            case 174:
            case 175:
            case 302:
            case 299:
            case 208:
              return t.name === e;
            case 163:
              return t.right === e;
            case 205:
            case 273:
              return t.propertyName === e;
            case 278:
            case 288:
            case 282:
            case 283:
            case 284:
              return true;
          }
          return false;
        }
        function QI(e) {
          return e.kind === 268 || e.kind === 267 || e.kind === 270 && e.name || e.kind === 271 || e.kind === 277 || e.kind === 273 || e.kind === 278 || e.kind === 274 && I0(e) ? true : Pr(e) && (ur(e) && ps(e) === 2 && I0(e) || bn(e) && ur(e.parent) && e.parent.left === e && e.parent.operatorToken.kind === 63 && k0(e.parent.right));
        }
        function u4(e) {
          switch (e.parent.kind) {
            case 270:
            case 273:
            case 271:
            case 278:
            case 274:
            case 268:
            case 277:
              return e.parent;
            case 163:
              do
                e = e.parent;
              while (e.parent.kind === 163);
              return u4(e);
          }
        }
        function k0(e) {
          return Bs(e) || _d(e);
        }
        function I0(e) {
          let t = p4(e);
          return k0(t);
        }
        function p4(e) {
          return Vo(e) ? e.expression : e.right;
        }
        function ZI(e) {
          return e.kind === 300 ? e.name : e.kind === 299 ? e.initializer : e.parent.right;
        }
        function f4(e) {
          let t = d4(e);
          if (t && Pr(e)) {
            let r = ES(e);
            if (r)
              return r.class;
          }
          return t;
        }
        function d4(e) {
          let t = Pf(e.heritageClauses, 94);
          return t && t.types.length > 0 ? t.types[0] : void 0;
        }
        function m4(e) {
          if (Pr(e))
            return wS(e).map((t) => t.class);
          {
            let t = Pf(e.heritageClauses, 117);
            return t == null ? void 0 : t.types;
          }
        }
        function h4(e) {
          return eu(e) ? g4(e) || Bt : bi(e) && Ft(Cp(f4(e)), m4(e)) || Bt;
        }
        function g4(e) {
          let t = Pf(e.heritageClauses, 94);
          return t ? t.types : void 0;
        }
        function Pf(e, t) {
          if (e) {
            for (let r of e)
              if (r.token === t)
                return r;
          }
        }
        function eN(e, t) {
          for (; e; ) {
            if (e.kind === t)
              return e;
            e = e.parent;
          }
        }
        function ba(e) {
          return 81 <= e && e <= 162;
        }
        function N0(e) {
          return 126 <= e && e <= 162;
        }
        function y4(e) {
          return ba(e) && !N0(e);
        }
        function tN(e) {
          return 117 <= e && e <= 125;
        }
        function rN(e) {
          let t = _l(e);
          return t !== void 0 && y4(t);
        }
        function nN(e) {
          let t = _l(e);
          return t !== void 0 && ba(t);
        }
        function iN(e) {
          let t = dS(e);
          return !!t && !N0(t);
        }
        function aN(e) {
          return 2 <= e && e <= 7;
        }
        function sN(e) {
          if (!e)
            return 4;
          let t = 0;
          switch (e.kind) {
            case 259:
            case 215:
            case 171:
              e.asteriskToken && (t |= 1);
            case 216:
              rn(e, 512) && (t |= 2);
              break;
          }
          return e.body || (t |= 4), t;
        }
        function oN(e) {
          switch (e.kind) {
            case 259:
            case 215:
            case 216:
            case 171:
              return e.body !== void 0 && e.asteriskToken === void 0 && rn(e, 512);
          }
          return false;
        }
        function Ta(e) {
          return Ti(e) || zs(e);
        }
        function O0(e) {
          return od(e) && (e.operator === 39 || e.operator === 40) && zs(e.operand);
        }
        function v4(e) {
          let t = ml(e);
          return !!t && M0(t);
        }
        function M0(e) {
          if (!(e.kind === 164 || e.kind === 209))
            return false;
          let t = gs(e) ? Pl(e.argumentExpression) : e.expression;
          return !Ta(t) && !O0(t);
        }
        function Df(e) {
          switch (e.kind) {
            case 79:
            case 80:
              return e.escapedText;
            case 10:
            case 8:
              return vi(e.text);
            case 164:
              let t = e.expression;
              return Ta(t) ? vi(t.text) : O0(t) ? t.operator === 40 ? Br(t.operator) + t.operand.text : t.operand.text : void 0;
            default:
              return Y.assertNever(e);
          }
        }
        function L0(e) {
          switch (e.kind) {
            case 79:
            case 10:
            case 14:
            case 8:
              return true;
            default:
              return false;
          }
        }
        function kf(e) {
          return js(e) ? qr(e) : e.text;
        }
        function b4(e) {
          return js(e) ? e.escapedText : vi(e.text);
        }
        function _N(e) {
          return `__@${getSymbolId(e)}@${e.escapedName}`;
        }
        function cN(e, t) {
          return `__#${getSymbolId(e)}@${t}`;
        }
        function lN(e) {
          return Pn(e.escapedName, "__@");
        }
        function uN(e) {
          return Pn(e.escapedName, "__#");
        }
        function pN(e) {
          return e.kind === 79 && e.escapedText === "Symbol";
        }
        function T4(e) {
          return yt(e) ? qr(e) === "__proto__" : Gn(e) && e.text === "__proto__";
        }
        function H_(e, t) {
          switch (e = $o(e), e.kind) {
            case 228:
            case 215:
              if (e.name)
                return false;
              break;
            case 216:
              break;
            default:
              return false;
          }
          return typeof t == "function" ? t(e) : true;
        }
        function S4(e) {
          switch (e.kind) {
            case 299:
              return !T4(e.name);
            case 300:
              return !!e.objectAssignmentInitializer;
            case 257:
              return yt(e.name) && !!e.initializer;
            case 166:
              return yt(e.name) && !!e.initializer && !e.dotDotDotToken;
            case 205:
              return yt(e.name) && !!e.initializer && !e.dotDotDotToken;
            case 169:
              return !!e.initializer;
            case 223:
              switch (e.operatorToken.kind) {
                case 63:
                case 76:
                case 75:
                case 77:
                  return yt(e.left);
              }
              break;
            case 274:
              return true;
          }
          return false;
        }
        function fN(e, t) {
          if (!S4(e))
            return false;
          switch (e.kind) {
            case 299:
              return H_(e.initializer, t);
            case 300:
              return H_(e.objectAssignmentInitializer, t);
            case 257:
            case 166:
            case 205:
            case 169:
              return H_(e.initializer, t);
            case 223:
              return H_(e.right, t);
            case 274:
              return H_(e.expression, t);
          }
        }
        function dN(e) {
          return e.escapedText === "push" || e.escapedText === "unshift";
        }
        function mN(e) {
          return If(e).kind === 166;
        }
        function If(e) {
          for (; e.kind === 205; )
            e = e.parent.parent;
          return e;
        }
        function hN(e) {
          let t = e.kind;
          return t === 173 || t === 215 || t === 259 || t === 216 || t === 171 || t === 174 || t === 175 || t === 264 || t === 308;
        }
        function fs(e) {
          return hs(e.pos) || hs(e.end);
        }
        function gN(e) {
          return fl(e, wi) || e;
        }
        function yN(e) {
          let t = R0(e), r = e.kind === 211 && e.arguments !== void 0;
          return x4(e.kind, t, r);
        }
        function x4(e, t, r) {
          switch (e) {
            case 211:
              return r ? 0 : 1;
            case 221:
            case 218:
            case 219:
            case 217:
            case 220:
            case 224:
            case 226:
              return 1;
            case 223:
              switch (t) {
                case 42:
                case 63:
                case 64:
                case 65:
                case 67:
                case 66:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 78:
                case 74:
                case 75:
                case 76:
                case 77:
                  return 1;
              }
          }
          return 0;
        }
        function vN(e) {
          let t = R0(e), r = e.kind === 211 && e.arguments !== void 0;
          return E4(e.kind, t, r);
        }
        function R0(e) {
          return e.kind === 223 ? e.operatorToken.kind : e.kind === 221 || e.kind === 222 ? e.operator : e.kind;
        }
        function E4(e, t, r) {
          switch (e) {
            case 357:
              return 0;
            case 227:
              return 1;
            case 226:
              return 2;
            case 224:
              return 4;
            case 223:
              switch (t) {
                case 27:
                  return 0;
                case 63:
                case 64:
                case 65:
                case 67:
                case 66:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 78:
                case 74:
                case 75:
                case 76:
                case 77:
                  return 3;
                default:
                  return Dl(t);
              }
            case 213:
            case 232:
            case 221:
            case 218:
            case 219:
            case 217:
            case 220:
              return 16;
            case 222:
              return 17;
            case 210:
              return 18;
            case 211:
              return r ? 19 : 18;
            case 212:
            case 208:
            case 209:
            case 233:
              return 19;
            case 231:
            case 235:
              return 11;
            case 108:
            case 106:
            case 79:
            case 80:
            case 104:
            case 110:
            case 95:
            case 8:
            case 9:
            case 10:
            case 206:
            case 207:
            case 215:
            case 216:
            case 228:
            case 13:
            case 14:
            case 225:
            case 214:
            case 229:
            case 281:
            case 282:
            case 285:
              return 20;
            default:
              return -1;
          }
        }
        function Dl(e) {
          switch (e) {
            case 60:
              return 4;
            case 56:
              return 5;
            case 55:
              return 6;
            case 51:
              return 7;
            case 52:
              return 8;
            case 50:
              return 9;
            case 34:
            case 35:
            case 36:
            case 37:
              return 10;
            case 29:
            case 31:
            case 32:
            case 33:
            case 102:
            case 101:
            case 128:
            case 150:
              return 11;
            case 47:
            case 48:
            case 49:
              return 12;
            case 39:
            case 40:
              return 13;
            case 41:
            case 43:
            case 44:
              return 14;
            case 42:
              return 15;
          }
          return -1;
        }
        function bN(e) {
          return ee(e, (t) => {
            switch (t.kind) {
              case 291:
                return !!t.expression;
              case 11:
                return !t.containsOnlyTriviaWhiteSpaces;
              default:
                return true;
            }
          });
        }
        function TN() {
          let e = [], t = [], r = /* @__PURE__ */ new Map(), s = false;
          return { add: x, lookup: f, getGlobalDiagnostics: w, getDiagnostics: A };
          function f(g) {
            let B;
            if (g.file ? B = r.get(g.file.fileName) : B = e, !B)
              return;
            let N = Ya(B, g, rr, qf);
            if (N >= 0)
              return B[N];
          }
          function x(g) {
            let B;
            g.file ? (B = r.get(g.file.fileName), B || (B = [], r.set(g.file.fileName, B), Qn(t, g.file.fileName, ri))) : (s && (s = false, e = e.slice()), B = e), Qn(B, g, qf);
          }
          function w() {
            return s = true, e;
          }
          function A(g) {
            if (g)
              return r.get(g) || [];
            let B = ge(t, (N) => r.get(N));
            return e.length && B.unshift(...e), B;
          }
        }
        function SN(e) {
          return e.replace(s8, "\\${");
        }
        function w4(e) {
          return e && !!(k8(e) ? e.templateFlags : e.head.templateFlags || Ke(e.templateSpans, (t) => !!t.literal.templateFlags));
        }
        function C4(e) {
          return "\\u" + ("0000" + e.toString(16).toUpperCase()).slice(-4);
        }
        function xN(e, t, r) {
          if (e.charCodeAt(0) === 0) {
            let s = r.charCodeAt(t + e.length);
            return s >= 48 && s <= 57 ? "\\x00" : "\\0";
          }
          return l8.get(e) || C4(e.charCodeAt(0));
        }
        function Nf(e, t) {
          let r = t === 96 ? c8 : t === 39 ? _8 : o8;
          return e.replace(r, xN);
        }
        function Of(e, t) {
          return e = Nf(e, t), Cv.test(e) ? e.replace(Cv, (r) => C4(r.charCodeAt(0))) : e;
        }
        function EN(e) {
          return "&#x" + e.toString(16).toUpperCase() + ";";
        }
        function wN(e) {
          return e.charCodeAt(0) === 0 ? "&#0;" : f8.get(e) || EN(e.charCodeAt(0));
        }
        function A4(e, t) {
          let r = t === 39 ? p8 : u8;
          return e.replace(r, wN);
        }
        function CN(e) {
          let t = e.length;
          return t >= 2 && e.charCodeAt(0) === e.charCodeAt(t - 1) && AN(e.charCodeAt(0)) ? e.substring(1, t - 1) : e;
        }
        function AN(e) {
          return e === 39 || e === 34 || e === 96;
        }
        function P4(e) {
          let t = e.charCodeAt(0);
          return t >= 97 && t <= 122 || Fi(e, "-") || Fi(e, ":");
        }
        function j0(e) {
          let t = jo[1];
          for (let r = jo.length; r <= e; r++)
            jo.push(jo[r - 1] + t);
          return jo[e];
        }
        function Oo() {
          return jo[1].length;
        }
        function PN() {
          return Fi(C, "-dev") || Fi(C, "-insiders");
        }
        function DN(e) {
          var t, r, s, f, x, w = false;
          function A(Se) {
            let Ye = Kp(Se);
            Ye.length > 1 ? (f = f + Ye.length - 1, x = t.length - Se.length + Zn(Ye), s = x - t.length === 0) : s = false;
          }
          function g(Se) {
            Se && Se.length && (s && (Se = j0(r) + Se, s = false), t += Se, A(Se));
          }
          function B(Se) {
            Se && (w = false), g(Se);
          }
          function N(Se) {
            Se && (w = true), g(Se);
          }
          function X() {
            t = "", r = 0, s = true, f = 0, x = 0, w = false;
          }
          function F(Se) {
            Se !== void 0 && (t += Se, A(Se), w = false);
          }
          function $(Se) {
            Se && Se.length && B(Se);
          }
          function ae(Se) {
            (!s || Se) && (t += e, f++, x = t.length, s = true, w = false);
          }
          function Te() {
            return s ? t.length : t.length + e.length;
          }
          return X(), { write: B, rawWrite: F, writeLiteral: $, writeLine: ae, increaseIndent: () => {
            r++;
          }, decreaseIndent: () => {
            r--;
          }, getIndent: () => r, getTextPos: () => t.length, getLine: () => f, getColumn: () => s ? r * Oo() : t.length - x, getText: () => t, isAtStartOfLine: () => s, hasTrailingComment: () => w, hasTrailingWhitespace: () => !!t.length && os(t.charCodeAt(t.length - 1)), clear: X, writeKeyword: B, writeOperator: B, writeParameter: B, writeProperty: B, writePunctuation: B, writeSpace: B, writeStringLiteral: B, writeSymbol: (Se, Ye) => B(Se), writeTrailingSemicolon: B, writeComment: N, getTextPosWithWriteLine: Te };
        }
        function kN(e) {
          let t = false;
          function r() {
            t && (e.writeTrailingSemicolon(";"), t = false);
          }
          return Object.assign(Object.assign({}, e), {}, { writeTrailingSemicolon() {
            t = true;
          }, writeLiteral(s) {
            r(), e.writeLiteral(s);
          }, writeStringLiteral(s) {
            r(), e.writeStringLiteral(s);
          }, writeSymbol(s, f) {
            r(), e.writeSymbol(s, f);
          }, writePunctuation(s) {
            r(), e.writePunctuation(s);
          }, writeKeyword(s) {
            r(), e.writeKeyword(s);
          }, writeOperator(s) {
            r(), e.writeOperator(s);
          }, writeParameter(s) {
            r(), e.writeParameter(s);
          }, writeSpace(s) {
            r(), e.writeSpace(s);
          }, writeProperty(s) {
            r(), e.writeProperty(s);
          }, writeComment(s) {
            r(), e.writeComment(s);
          }, writeLine() {
            r(), e.writeLine();
          }, increaseIndent() {
            r(), e.increaseIndent();
          }, decreaseIndent() {
            r(), e.decreaseIndent();
          } });
        }
        function J0(e) {
          return e.useCaseSensitiveFileNames ? e.useCaseSensitiveFileNames() : false;
        }
        function D4(e) {
          return wp(J0(e));
        }
        function k4(e, t, r) {
          return t.moduleName || F0(e, t.fileName, r && r.fileName);
        }
        function I4(e, t) {
          return e.getCanonicalFileName(as(t, e.getCurrentDirectory()));
        }
        function IN(e, t, r) {
          let s = t.getExternalModuleFileFromDeclaration(r);
          if (!s || s.isDeclarationFile)
            return;
          let f = E0(r);
          if (!(f && Ti(f) && !So(f.text) && I4(e, s.path).indexOf(I4(e, wo(e.getCommonSourceDirectory()))) === -1))
            return k4(e, s);
        }
        function F0(e, t, r) {
          let s = (g) => e.getCanonicalFileName(g), f = Ui(r ? ma(r) : e.getCommonSourceDirectory(), e.getCurrentDirectory(), s), x = as(t, e.getCurrentDirectory()), w = uy(f, x, f, s, false), A = Ll(w);
          return r ? _y(A) : A;
        }
        function NN(e, t, r) {
          let s = t.getCompilerOptions(), f;
          return s.outDir ? f = Ll(M4(e, t, s.outDir)) : f = Ll(e), f + r;
        }
        function ON(e, t) {
          return N4(e, t.getCompilerOptions(), t.getCurrentDirectory(), t.getCommonSourceDirectory(), (r) => t.getCanonicalFileName(r));
        }
        function N4(e, t, r, s, f) {
          let x = t.declarationDir || t.outDir, w = x ? U0(e, x, r, s, f) : e, A = O4(w);
          return Ll(w) + A;
        }
        function O4(e) {
          return da(e, [".mjs", ".mts"]) ? ".d.mts" : da(e, [".cjs", ".cts"]) ? ".d.cts" : da(e, [".json"]) ? ".d.json.ts" : ".d.ts";
        }
        function MN(e) {
          return da(e, [".d.mts", ".mjs", ".mts"]) ? [".mts", ".mjs"] : da(e, [".d.cts", ".cjs", ".cts"]) ? [".cts", ".cjs"] : da(e, [".d.json.ts"]) ? [".json"] : [".tsx", ".ts", ".jsx", ".js"];
        }
        function B0(e) {
          return e.outFile || e.out;
        }
        function LN(e, t) {
          var r, s;
          if (e.paths)
            return (s = e.baseUrl) != null ? s : Y.checkDefined(e.pathsBasePath || ((r = t.getCurrentDirectory) == null ? void 0 : r.call(t)), "Encountered 'paths' without a 'baseUrl', config file, or host 'getCurrentDirectory'.");
        }
        function RN(e, t, r) {
          let s = e.getCompilerOptions();
          if (B0(s)) {
            let f = Ei(s), x = s.emitDeclarationOnly || f === 2 || f === 4;
            return ee(e.getSourceFiles(), (w) => (x || !Qo(w)) && q0(w, e, r));
          } else {
            let f = t === void 0 ? e.getSourceFiles() : [t];
            return ee(f, (x) => q0(x, e, r));
          }
        }
        function q0(e, t, r) {
          return !(t.getCompilerOptions().noEmitForJsFiles && y0(e)) && !e.isDeclarationFile && !t.isSourceFileFromExternalLibrary(e) && (r || !(a0(e) && t.getResolvedProjectReferenceToRedirect(e.fileName)) && !t.isSourceOfProjectReferenceRedirect(e.fileName));
        }
        function M4(e, t, r) {
          return U0(e, r, t.getCurrentDirectory(), t.getCommonSourceDirectory(), (s) => t.getCanonicalFileName(s));
        }
        function U0(e, t, r, s, f) {
          let x = as(e, r);
          return x = f(x).indexOf(f(s)) === 0 ? x.substring(s.length) : x, tn(t, x);
        }
        function jN(e, t, r, s, f, x, w) {
          e.writeFile(r, s, f, (A) => {
            t.add(Ol(ve.Could_not_write_file_0_Colon_1, r, A));
          }, x, w);
        }
        function L4(e, t, r) {
          if (e.length > Bi(e) && !r(e)) {
            let s = ma(e);
            L4(s, t, r), t(e);
          }
        }
        function JN(e, t, r, s, f, x) {
          try {
            s(e, t, r);
          } catch {
            L4(ma(Un(e)), f, x), s(e, t, r);
          }
        }
        function FN(e, t) {
          let r = ss(e);
          return k_(r, t);
        }
        function ds(e, t) {
          return k_(e, t);
        }
        function R4(e) {
          return Ae(e.members, (t) => nc(t) && xl(t.body));
        }
        function z0(e) {
          if (e && e.parameters.length > 0) {
            let t = e.parameters.length === 2 && kl(e.parameters[0]);
            return e.parameters[t ? 1 : 0];
          }
        }
        function BN(e) {
          let t = z0(e);
          return t && t.type;
        }
        function j4(e) {
          if (e.parameters.length && !iu(e)) {
            let t = e.parameters[0];
            if (kl(t))
              return t;
          }
        }
        function kl(e) {
          return Mf(e.name);
        }
        function Mf(e) {
          return !!e && e.kind === 79 && J4(e);
        }
        function qN(e) {
          if (!Mf(e))
            return false;
          for (; rc(e.parent) && e.parent.left === e; )
            e = e.parent;
          return e.parent.kind === 183;
        }
        function J4(e) {
          return e.escapedText === "this";
        }
        function W0(e, t) {
          let r, s, f, x;
          return v4(t) ? (r = t, t.kind === 174 ? f = t : t.kind === 175 ? x = t : Y.fail("Accessor has wrong kind")) : c(e, (w) => {
            if (pf(w) && G0(w) === G0(t)) {
              let A = Df(w.name), g = Df(t.name);
              A === g && (r ? s || (s = w) : r = w, w.kind === 174 && !f && (f = w), w.kind === 175 && !x && (x = w));
            }
          }), { firstAccessor: r, secondAccessor: s, getAccessor: f, setAccessor: x };
        }
        function V0(e) {
          if (!Pr(e) && Wo(e))
            return;
          let t = e.type;
          return t || !Pr(e) ? t : Dy(e) ? e.typeExpression && e.typeExpression.type : cf(e);
        }
        function UN(e) {
          return e.type;
        }
        function zN(e) {
          return iu(e) ? e.type && e.type.typeExpression && e.type.typeExpression.type : e.type || (Pr(e) ? OS(e) : void 0);
        }
        function F4(e) {
          return ne(hl(e), (t) => WN(t) ? t.typeParameters : void 0);
        }
        function WN(e) {
          return Go(e) && !(e.parent.kind === 323 && (e.parent.tags.some(Cl) || e.parent.tags.some(y2)));
        }
        function VN(e) {
          let t = z0(e);
          return t && V0(t);
        }
        function B4(e, t, r, s) {
          q4(e, t, r.pos, s);
        }
        function q4(e, t, r, s) {
          s && s.length && r !== s[0].pos && ds(e, r) !== ds(e, s[0].pos) && t.writeLine();
        }
        function HN(e, t, r, s) {
          r !== s && ds(e, r) !== ds(e, s) && t.writeLine();
        }
        function U4(e, t, r, s, f, x, w, A) {
          if (s && s.length > 0) {
            f && r.writeSpace(" ");
            let g = false;
            for (let B of s)
              g && (r.writeSpace(" "), g = false), A(e, t, r, B.pos, B.end, w), B.hasTrailingNewLine ? r.writeLine() : g = true;
            g && x && r.writeSpace(" ");
          }
        }
        function GN(e, t, r, s, f, x, w) {
          let A, g;
          if (w ? f.pos === 0 && (A = ee(Ao(e, f.pos), B)) : A = Ao(e, f.pos), A) {
            let N = [], X;
            for (let F of A) {
              if (X) {
                let $ = ds(t, X.end);
                if (ds(t, F.pos) >= $ + 2)
                  break;
              }
              N.push(F), X = F;
            }
            if (N.length) {
              let F = ds(t, Zn(N).end);
              ds(t, Ar(e, f.pos)) >= F + 2 && (B4(t, r, f, A), U4(e, t, r, N, false, true, x, s), g = { nodePos: f.pos, detachedCommentEndPos: Zn(N).end });
            }
          }
          return g;
          function B(N) {
            return v3(e, N.pos);
          }
        }
        function $N(e, t, r, s, f, x) {
          if (e.charCodeAt(s + 1) === 42) {
            let w = my(t, s), A = t.length, g;
            for (let B = s, N = w.line; B < f; N++) {
              let X = N + 1 === A ? e.length + 1 : t[N + 1];
              if (B !== s) {
                g === void 0 && (g = z4(e, t[w.line], s));
                let $ = r.getIndent() * Oo() - g + z4(e, B, X);
                if ($ > 0) {
                  let ae = $ % Oo(), Te = j0(($ - ae) / Oo());
                  for (r.rawWrite(Te); ae; )
                    r.rawWrite(" "), ae--;
                } else
                  r.rawWrite("");
              }
              KN(e, f, r, x, B, X), B = X;
            }
          } else
            r.writeComment(e.substring(s, f));
        }
        function KN(e, t, r, s, f, x) {
          let w = Math.min(t, x - 1), A = Pp(e.substring(f, w));
          A ? (r.writeComment(A), w !== t && r.writeLine()) : r.rawWrite(s);
        }
        function z4(e, t, r) {
          let s = 0;
          for (; t < r && N_(e.charCodeAt(t)); t++)
            e.charCodeAt(t) === 9 ? s += Oo() - s % Oo() : s++;
          return s;
        }
        function XN(e) {
          return Rf(e) !== 0;
        }
        function YN(e) {
          return X0(e) !== 0;
        }
        function H0(e, t) {
          return !!G4(e, t);
        }
        function rn(e, t) {
          return !!$4(e, t);
        }
        function G0(e) {
          return Js(e) && Lf(e) || Hl(e);
        }
        function Lf(e) {
          return rn(e, 32);
        }
        function QN(e) {
          return H0(e, 16384);
        }
        function W4(e) {
          return rn(e, 256);
        }
        function V4(e) {
          return rn(e, 2);
        }
        function H4(e) {
          return rn(e, 128);
        }
        function $0(e) {
          return H0(e, 64);
        }
        function Il(e) {
          return rn(e, 131072);
        }
        function G4(e, t) {
          return Rf(e) & t;
        }
        function $4(e, t) {
          return X0(e) & t;
        }
        function K0(e, t, r) {
          return e.kind >= 0 && e.kind <= 162 ? 0 : (e.modifierFlagsCache & 536870912 || (e.modifierFlagsCache = Y0(e) | 536870912), t && !(e.modifierFlagsCache & 4096) && (r || Pr(e)) && e.parent && (e.modifierFlagsCache |= X4(e) | 4096), e.modifierFlagsCache & -536875009);
        }
        function Rf(e) {
          return K0(e, true);
        }
        function K4(e) {
          return K0(e, true, true);
        }
        function X0(e) {
          return K0(e, false);
        }
        function X4(e) {
          let t = 0;
          return e.parent && !Vs(e) && (Pr(e) && (CS(e) && (t |= 4), AS(e) && (t |= 8), PS(e) && (t |= 16), DS(e) && (t |= 64), kS(e) && (t |= 16384)), IS(e) && (t |= 8192)), t;
        }
        function Y4(e) {
          return Y0(e) | X4(e);
        }
        function Y0(e) {
          let t = fc(e) ? Vn(e.modifiers) : 0;
          return (e.flags & 4 || e.kind === 79 && e.flags & 2048) && (t |= 1), t;
        }
        function Vn(e) {
          let t = 0;
          if (e)
            for (let r of e)
              t |= Q0(r.kind);
          return t;
        }
        function Q0(e) {
          switch (e) {
            case 124:
              return 32;
            case 123:
              return 4;
            case 122:
              return 16;
            case 121:
              return 8;
            case 126:
              return 256;
            case 127:
              return 128;
            case 93:
              return 1;
            case 136:
              return 2;
            case 85:
              return 2048;
            case 88:
              return 1024;
            case 132:
              return 512;
            case 146:
              return 64;
            case 161:
              return 16384;
            case 101:
              return 32768;
            case 145:
              return 65536;
            case 167:
              return 131072;
          }
          return 0;
        }
        function Q4(e) {
          return e === 56 || e === 55;
        }
        function ZN(e) {
          return Q4(e) || e === 53;
        }
        function jf(e) {
          return e === 75 || e === 76 || e === 77;
        }
        function eO(e) {
          return ur(e) && jf(e.operatorToken.kind);
        }
        function Z4(e) {
          return Q4(e) || e === 60;
        }
        function tO(e) {
          return ur(e) && Z4(e.operatorToken.kind);
        }
        function G_(e) {
          return e >= 63 && e <= 78;
        }
        function ex(e) {
          let t = tx(e);
          return t && !t.isImplements ? t.class : void 0;
        }
        function tx(e) {
          if (e2(e)) {
            if (ru(e.parent) && bi(e.parent.parent))
              return { class: e.parent.parent, isImplements: e.parent.token === 117 };
            if (md(e.parent)) {
              let t = A0(e.parent);
              if (t && bi(t))
                return { class: t, isImplements: false };
            }
          }
        }
        function ms(e, t) {
          return ur(e) && (t ? e.operatorToken.kind === 63 : G_(e.operatorToken.kind)) && Do(e.left);
        }
        function rO(e) {
          return ms(e.parent) && e.parent.left === e;
        }
        function nO(e) {
          if (ms(e, true)) {
            let t = e.left.kind;
            return t === 207 || t === 206;
          }
          return false;
        }
        function Z0(e) {
          return ex(e) !== void 0;
        }
        function Bs(e) {
          return e.kind === 79 || rx(e);
        }
        function iO(e) {
          switch (e.kind) {
            case 79:
              return e;
            case 163:
              do
                e = e.left;
              while (e.kind !== 79);
              return e;
            case 208:
              do
                e = e.expression;
              while (e.kind !== 79);
              return e;
          }
        }
        function ev(e) {
          return e.kind === 79 || e.kind === 108 || e.kind === 106 || e.kind === 233 || e.kind === 208 && ev(e.expression) || e.kind === 214 && ev(e.expression);
        }
        function rx(e) {
          return bn(e) && yt(e.name) && Bs(e.expression);
        }
        function tv(e) {
          if (bn(e)) {
            let t = tv(e.expression);
            if (t !== void 0)
              return t + "." + ls(e.name);
          } else if (gs(e)) {
            let t = tv(e.expression);
            if (t !== void 0 && vl(e.argumentExpression))
              return t + "." + Df(e.argumentExpression);
          } else if (yt(e))
            return dl(e.escapedText);
        }
        function Nl(e) {
          return W_(e) && Fs(e) === "prototype";
        }
        function aO(e) {
          return e.parent.kind === 163 && e.parent.right === e || e.parent.kind === 208 && e.parent.name === e;
        }
        function nx(e) {
          return bn(e.parent) && e.parent.name === e || gs(e.parent) && e.parent.argumentExpression === e;
        }
        function sO(e) {
          return rc(e.parent) && e.parent.right === e || bn(e.parent) && e.parent.name === e || uc(e.parent) && e.parent.right === e;
        }
        function oO(e) {
          return e.kind === 207 && e.properties.length === 0;
        }
        function _O(e) {
          return e.kind === 206 && e.elements.length === 0;
        }
        function cO(e) {
          if (!(!lO(e) || !e.declarations)) {
            for (let t of e.declarations)
              if (t.localSymbol)
                return t.localSymbol;
          }
        }
        function lO(e) {
          return e && I(e.declarations) > 0 && rn(e.declarations[0], 1024);
        }
        function uO(e) {
          return Ae(y8, (t) => ns(e, t));
        }
        function pO(e) {
          let t = [], r = e.length;
          for (let s = 0; s < r; s++) {
            let f = e.charCodeAt(s);
            f < 128 ? t.push(f) : f < 2048 ? (t.push(f >> 6 | 192), t.push(f & 63 | 128)) : f < 65536 ? (t.push(f >> 12 | 224), t.push(f >> 6 & 63 | 128), t.push(f & 63 | 128)) : f < 131072 ? (t.push(f >> 18 | 240), t.push(f >> 12 & 63 | 128), t.push(f >> 6 & 63 | 128), t.push(f & 63 | 128)) : Y.assert(false, "Unexpected code point");
          }
          return t;
        }
        function ix(e) {
          let t = "", r = pO(e), s = 0, f = r.length, x, w, A, g;
          for (; s < f; )
            x = r[s] >> 2, w = (r[s] & 3) << 4 | r[s + 1] >> 4, A = (r[s + 1] & 15) << 2 | r[s + 2] >> 6, g = r[s + 2] & 63, s + 1 >= f ? A = g = 64 : s + 2 >= f && (g = 64), t += xa.charAt(x) + xa.charAt(w) + xa.charAt(A) + xa.charAt(g), s += 3;
          return t;
        }
        function fO(e) {
          let t = "", r = 0, s = e.length;
          for (; r < s; ) {
            let f = e[r];
            if (f < 128)
              t += String.fromCharCode(f), r++;
            else if ((f & 192) === 192) {
              let x = f & 63;
              r++;
              let w = e[r];
              for (; (w & 192) === 128; )
                x = x << 6 | w & 63, r++, w = e[r];
              t += String.fromCharCode(x);
            } else
              t += String.fromCharCode(f), r++;
          }
          return t;
        }
        function dO(e, t) {
          return e && e.base64encode ? e.base64encode(t) : ix(t);
        }
        function mO(e, t) {
          if (e && e.base64decode)
            return e.base64decode(t);
          let r = t.length, s = [], f = 0;
          for (; f < r && t.charCodeAt(f) !== xa.charCodeAt(64); ) {
            let x = xa.indexOf(t[f]), w = xa.indexOf(t[f + 1]), A = xa.indexOf(t[f + 2]), g = xa.indexOf(t[f + 3]), B = (x & 63) << 2 | w >> 4 & 3, N = (w & 15) << 4 | A >> 2 & 15, X = (A & 3) << 6 | g & 63;
            N === 0 && A !== 0 ? s.push(B) : X === 0 && g !== 0 ? s.push(B, N) : s.push(B, N, X), f += 4;
          }
          return fO(s);
        }
        function ax(e, t) {
          let r = Ji(t) ? t : t.readFile(e);
          if (!r)
            return;
          let s = parseConfigFileTextToJson(e, r);
          return s.error ? void 0 : s.config;
        }
        function hO(e, t) {
          return ax(e, t) || {};
        }
        function sx(e, t) {
          return !t.directoryExists || t.directoryExists(e);
        }
        function ox(e) {
          switch (e.newLine) {
            case 0:
              return d8;
            case 1:
            case void 0:
              return m8;
          }
        }
        function Jf(e) {
          let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e;
          return Y.assert(t >= e || t === -1), { pos: e, end: t };
        }
        function gO(e, t) {
          return Jf(e.pos, t);
        }
        function Ff(e, t) {
          return Jf(t, e.end);
        }
        function _x(e) {
          let t = fc(e) ? te(e.modifiers, zl) : void 0;
          return t && !hs(t.end) ? Ff(e, t.end) : e;
        }
        function yO(e) {
          if (Bo(e) || Vl(e))
            return Ff(e, e.name.pos);
          let t = fc(e) ? Cn(e.modifiers) : void 0;
          return t && !hs(t.end) ? Ff(e, t.end) : _x(e);
        }
        function vO(e) {
          return e.pos === e.end;
        }
        function bO(e, t) {
          return Jf(e, e + Br(t).length);
        }
        function TO(e, t) {
          return cx(e, e, t);
        }
        function SO(e, t, r) {
          return $_(K_(e, r, false), K_(t, r, false), r);
        }
        function xO(e, t, r) {
          return $_(e.end, t.end, r);
        }
        function cx(e, t, r) {
          return $_(K_(e, r, false), t.end, r);
        }
        function EO(e, t, r) {
          return $_(e.end, K_(t, r, false), r);
        }
        function wO(e, t, r, s) {
          let f = K_(t, r, s);
          return I_(r, e.end, f);
        }
        function CO(e, t, r) {
          return I_(r, e.end, t.end);
        }
        function AO(e, t) {
          return !$_(e.pos, e.end, t);
        }
        function $_(e, t, r) {
          return I_(r, e, t) === 0;
        }
        function K_(e, t, r) {
          return hs(e.pos) ? -1 : Ar(t.text, e.pos, false, r);
        }
        function PO(e, t, r, s) {
          let f = Ar(r.text, e, false, s), x = kO(f, t, r);
          return I_(r, x != null ? x : t, f);
        }
        function DO(e, t, r, s) {
          let f = Ar(r.text, e, false, s);
          return I_(r, e, Math.min(t, f));
        }
        function kO(e) {
          let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, r = arguments.length > 2 ? arguments[2] : void 0;
          for (; e-- > t; )
            if (!os(r.text.charCodeAt(e)))
              return e;
        }
        function IO(e) {
          let t = fl(e);
          if (t)
            switch (t.parent.kind) {
              case 263:
              case 264:
                return t === t.parent.name;
            }
          return false;
        }
        function NO2(e) {
          return ee(e.declarations, lx);
        }
        function lx(e) {
          return Vi(e) && e.initializer !== void 0;
        }
        function OO(e) {
          return e.watch && Jr(e, "watch");
        }
        function MO(e) {
          e.close();
        }
        function ux(e) {
          return e.flags & 33554432 ? e.links.checkFlags : 0;
        }
        function LO(e) {
          let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          if (e.valueDeclaration) {
            let r = t && e.declarations && Ae(e.declarations, ic) || e.flags & 32768 && Ae(e.declarations, Gl) || e.valueDeclaration, s = ef(r);
            return e.parent && e.parent.flags & 32 ? s : s & -29;
          }
          if (ux(e) & 6) {
            let r = e.links.checkFlags, s = r & 1024 ? 8 : r & 256 ? 4 : 16, f = r & 2048 ? 32 : 0;
            return s | f;
          }
          return e.flags & 4194304 ? 36 : 0;
        }
        function RO(e, t) {
          return e.flags & 2097152 ? t.getAliasedSymbol(e) : e;
        }
        function jO(e) {
          return e.exportSymbol ? e.exportSymbol.flags | e.flags : e.flags;
        }
        function JO(e) {
          return Mo(e) === 1;
        }
        function FO(e) {
          return Mo(e) !== 0;
        }
        function Mo(e) {
          let { parent: t } = e;
          if (!t)
            return 0;
          switch (t.kind) {
            case 214:
              return Mo(t);
            case 222:
            case 221:
              let { operator: s } = t;
              return s === 45 || s === 46 ? r() : 0;
            case 223:
              let { left: f, operatorToken: x } = t;
              return f === e && G_(x.kind) ? x.kind === 63 ? 1 : r() : 0;
            case 208:
              return t.name !== e ? 0 : Mo(t);
            case 299: {
              let w = Mo(t.parent);
              return e === t.name ? BO(w) : w;
            }
            case 300:
              return e === t.objectAssignmentInitializer ? 0 : Mo(t.parent);
            case 206:
              return Mo(t);
            default:
              return 0;
          }
          function r() {
            return t.parent && D0(t.parent).kind === 241 ? 1 : 2;
          }
        }
        function BO(e) {
          switch (e) {
            case 0:
              return 1;
            case 1:
              return 0;
            case 2:
              return 2;
            default:
              return Y.assertNever(e);
          }
        }
        function px(e, t) {
          if (!e || !t || Object.keys(e).length !== Object.keys(t).length)
            return false;
          for (let r in e)
            if (typeof e[r] == "object") {
              if (!px(e[r], t[r]))
                return false;
            } else if (typeof e[r] != "function" && e[r] !== t[r])
              return false;
          return true;
        }
        function qO(e, t) {
          e.forEach(t), e.clear();
        }
        function fx(e, t, r) {
          let { onDeleteValue: s, onExistingValue: f } = r;
          e.forEach((x, w) => {
            let A = t.get(w);
            A === void 0 ? (e.delete(w), s(x, w)) : f && f(x, A, w);
          });
        }
        function UO(e, t, r) {
          fx(e, t, r);
          let { createNewValue: s } = r;
          t.forEach((f, x) => {
            e.has(x) || e.set(x, s(x, f));
          });
        }
        function zO(e) {
          if (e.flags & 32) {
            let t = dx(e);
            return !!t && rn(t, 256);
          }
          return false;
        }
        function dx(e) {
          var t;
          return (t = e.declarations) == null ? void 0 : t.find(bi);
        }
        function Bf(e) {
          return e.flags & 3899393 ? e.objectFlags : 0;
        }
        function WO(e, t) {
          return !!FT(e, (r) => t(r) ? true : void 0);
        }
        function VO(e) {
          return !!e && !!e.declarations && !!e.declarations[0] && a2(e.declarations[0]);
        }
        function HO(e) {
          let { moduleSpecifier: t } = e;
          return Gn(t) ? t.text : gf(t);
        }
        function mx(e) {
          let t;
          return xr(e, (r) => {
            xl(r) && (t = r);
          }, (r) => {
            for (let s = r.length - 1; s >= 0; s--)
              if (xl(r[s])) {
                t = r[s];
                break;
              }
          }), t;
        }
        function GO(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
          return e.has(t) ? false : (e.set(t, r), true);
        }
        function $O(e) {
          return bi(e) || eu(e) || id(e);
        }
        function hx(e) {
          return e >= 179 && e <= 202 || e === 131 || e === 157 || e === 148 || e === 160 || e === 149 || e === 134 || e === 152 || e === 153 || e === 114 || e === 155 || e === 144 || e === 139 || e === 230 || e === 315 || e === 316 || e === 317 || e === 318 || e === 319 || e === 320 || e === 321;
        }
        function Lo(e) {
          return e.kind === 208 || e.kind === 209;
        }
        function KO(e) {
          return e.kind === 208 ? e.name : (Y.assert(e.kind === 209), e.argumentExpression);
        }
        function XO(e) {
          switch (e.kind) {
            case "text":
            case "internal":
              return true;
            default:
              return false;
          }
        }
        function YO(e) {
          return e.kind === 272 || e.kind === 276;
        }
        function rv(e) {
          for (; Lo(e); )
            e = e.expression;
          return e;
        }
        function QO(e, t) {
          if (Lo(e.parent) && nx(e))
            return r(e.parent);
          function r(s) {
            if (s.kind === 208) {
              let f = t(s.name);
              if (f !== void 0)
                return f;
            } else if (s.kind === 209)
              if (yt(s.argumentExpression) || Ti(s.argumentExpression)) {
                let f = t(s.argumentExpression);
                if (f !== void 0)
                  return f;
              } else
                return;
            if (Lo(s.expression))
              return r(s.expression);
            if (yt(s.expression))
              return t(s.expression);
          }
        }
        function ZO(e, t) {
          for (; ; ) {
            switch (e.kind) {
              case 222:
                e = e.operand;
                continue;
              case 223:
                e = e.left;
                continue;
              case 224:
                e = e.condition;
                continue;
              case 212:
                e = e.tag;
                continue;
              case 210:
                if (t)
                  return e;
              case 231:
              case 209:
              case 208:
              case 232:
              case 356:
              case 235:
                e = e.expression;
                continue;
            }
            return e;
          }
        }
        function eM(e, t) {
          this.flags = e, this.escapedName = t, this.declarations = void 0, this.valueDeclaration = void 0, this.id = 0, this.mergeId = 0, this.parent = void 0, this.members = void 0, this.exports = void 0, this.exportSymbol = void 0, this.constEnumOnlyModule = void 0, this.isReferenced = void 0, this.isAssigned = void 0, this.links = void 0;
        }
        function tM(e, t) {
          this.flags = t, (Y.isDebugging || rs) && (this.checker = e);
        }
        function rM(e, t) {
          this.flags = t, Y.isDebugging && (this.checker = e);
        }
        function nv(e, t, r) {
          this.pos = t, this.end = r, this.kind = e, this.id = 0, this.flags = 0, this.modifierFlagsCache = 0, this.transformFlags = 0, this.parent = void 0, this.original = void 0, this.emitNode = void 0;
        }
        function nM(e, t, r) {
          this.pos = t, this.end = r, this.kind = e, this.id = 0, this.flags = 0, this.transformFlags = 0, this.parent = void 0, this.emitNode = void 0;
        }
        function iM(e, t, r) {
          this.pos = t, this.end = r, this.kind = e, this.id = 0, this.flags = 0, this.transformFlags = 0, this.parent = void 0, this.original = void 0, this.emitNode = void 0;
        }
        function aM(e, t, r) {
          this.fileName = e, this.text = t, this.skipTrivia = r || ((s) => s);
        }
        function sM(e) {
          Av.push(e), e(lr);
        }
        function gx(e) {
          Object.assign(lr, e), c(Av, (t) => t(lr));
        }
        function X_(e, t) {
          let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
          return e.replace(/{(\d+)}/g, (s, f) => "" + Y.checkDefined(t[+f + r]));
        }
        function yx(e) {
          jl = e;
        }
        function vx(e) {
          !jl && e && (jl = e());
        }
        function Y_(e) {
          return jl && jl[e.key] || e.message;
        }
        function Ro(e, t, r, s) {
          t0(void 0, t, r);
          let f = Y_(s);
          return arguments.length > 4 && (f = X_(f, arguments, 4)), { file: void 0, start: t, length: r, messageText: f, category: s.category, code: s.code, reportsUnnecessary: s.reportsUnnecessary, fileName: e };
        }
        function oM(e) {
          return e.file === void 0 && e.start !== void 0 && e.length !== void 0 && typeof e.fileName == "string";
        }
        function bx(e, t) {
          let r = t.fileName || "", s = t.text.length;
          Y.assertEqual(e.fileName, r), Y.assertLessThanOrEqual(e.start, s), Y.assertLessThanOrEqual(e.start + e.length, s);
          let f = { file: t, start: e.start, length: e.length, messageText: e.messageText, category: e.category, code: e.code, reportsUnnecessary: e.reportsUnnecessary };
          if (e.relatedInformation) {
            f.relatedInformation = [];
            for (let x of e.relatedInformation)
              oM(x) && x.fileName === r ? (Y.assertLessThanOrEqual(x.start, s), Y.assertLessThanOrEqual(x.start + x.length, s), f.relatedInformation.push(bx(x, t))) : f.relatedInformation.push(x);
          }
          return f;
        }
        function qs(e, t) {
          let r = [];
          for (let s of e)
            r.push(bx(s, t));
          return r;
        }
        function iv(e, t, r, s) {
          t0(e, t, r);
          let f = Y_(s);
          return arguments.length > 4 && (f = X_(f, arguments, 4)), { file: e, start: t, length: r, messageText: f, category: s.category, code: s.code, reportsUnnecessary: s.reportsUnnecessary, reportsDeprecated: s.reportsDeprecated };
        }
        function _M(e, t) {
          let r = Y_(t);
          return arguments.length > 2 && (r = X_(r, arguments, 2)), r;
        }
        function Ol(e) {
          let t = Y_(e);
          return arguments.length > 1 && (t = X_(t, arguments, 1)), { file: void 0, start: void 0, length: void 0, messageText: t, category: e.category, code: e.code, reportsUnnecessary: e.reportsUnnecessary, reportsDeprecated: e.reportsDeprecated };
        }
        function cM(e, t) {
          return { file: void 0, start: void 0, length: void 0, code: e.code, category: e.category, messageText: e.next ? e : e.messageText, relatedInformation: t };
        }
        function lM(e, t) {
          let r = Y_(t);
          return arguments.length > 2 && (r = X_(r, arguments, 2)), { messageText: r, category: t.category, code: t.code, next: e === void 0 || Array.isArray(e) ? e : [e] };
        }
        function uM(e, t) {
          let r = e;
          for (; r.next; )
            r = r.next[0];
          r.next = [t];
        }
        function Tx(e) {
          return e.file ? e.file.path : void 0;
        }
        function av(e, t) {
          return qf(e, t) || pM(e, t) || 0;
        }
        function qf(e, t) {
          return ri(Tx(e), Tx(t)) || Vr(e.start, t.start) || Vr(e.length, t.length) || Vr(e.code, t.code) || Sx(e.messageText, t.messageText) || 0;
        }
        function pM(e, t) {
          return !e.relatedInformation && !t.relatedInformation ? 0 : e.relatedInformation && t.relatedInformation ? Vr(e.relatedInformation.length, t.relatedInformation.length) || c(e.relatedInformation, (r, s) => {
            let f = t.relatedInformation[s];
            return av(r, f);
          }) || 0 : e.relatedInformation ? -1 : 1;
        }
        function Sx(e, t) {
          if (typeof e == "string" && typeof t == "string")
            return ri(e, t);
          if (typeof e == "string")
            return -1;
          if (typeof t == "string")
            return 1;
          let r = ri(e.messageText, t.messageText);
          if (r)
            return r;
          if (!e.next && !t.next)
            return 0;
          if (!e.next)
            return -1;
          if (!t.next)
            return 1;
          let s = Math.min(e.next.length, t.next.length);
          for (let f = 0; f < s; f++)
            if (r = Sx(e.next[f], t.next[f]), r)
              return r;
          return e.next.length < t.next.length ? -1 : e.next.length > t.next.length ? 1 : 0;
        }
        function sv(e) {
          return e === 4 || e === 2 || e === 1 || e === 6 ? 1 : 0;
        }
        function xx(e) {
          if (e.transformFlags & 2)
            return _3(e) || pd(e) ? e : xr(e, xx);
        }
        function fM(e) {
          return e.isDeclarationFile ? void 0 : xx(e);
        }
        function dM(e) {
          return (e.impliedNodeFormat === 99 || da(e.fileName, [".cjs", ".cts", ".mjs", ".mts"])) && !e.isDeclarationFile ? true : void 0;
        }
        function Ex(e) {
          switch (wx(e)) {
            case 3:
              return (f) => {
                f.externalModuleIndicator = ou(f) || !f.isDeclarationFile || void 0;
              };
            case 1:
              return (f) => {
                f.externalModuleIndicator = ou(f);
              };
            case 2:
              let t = [ou];
              (e.jsx === 4 || e.jsx === 5) && t.push(fM), t.push(dM);
              let r = W1(...t);
              return (f) => void (f.externalModuleIndicator = r(f));
          }
        }
        function Uf(e) {
          var t;
          return (t = e.target) != null ? t : e.module === 100 && 9 || e.module === 199 && 99 || 1;
        }
        function Ei(e) {
          return typeof e.module == "number" ? e.module : Uf(e) >= 2 ? 5 : 1;
        }
        function mM(e) {
          return e >= 5 && e <= 99;
        }
        function Ml(e) {
          let t = e.moduleResolution;
          if (t === void 0)
            switch (Ei(e)) {
              case 1:
                t = 2;
                break;
              case 100:
                t = 3;
                break;
              case 199:
                t = 99;
                break;
              default:
                t = 1;
                break;
            }
          return t;
        }
        function wx(e) {
          return e.moduleDetection || (Ei(e) === 100 || Ei(e) === 199 ? 3 : 2);
        }
        function hM(e) {
          switch (Ei(e)) {
            case 1:
            case 2:
            case 5:
            case 6:
            case 7:
            case 99:
            case 100:
            case 199:
              return true;
            default:
              return false;
          }
        }
        function zf(e) {
          return !!(e.isolatedModules || e.verbatimModuleSyntax);
        }
        function gM(e) {
          return e.verbatimModuleSyntax || e.isolatedModules && e.preserveValueImports;
        }
        function yM(e) {
          return e.allowUnreachableCode === false;
        }
        function vM(e) {
          return e.allowUnusedLabels === false;
        }
        function bM(e) {
          return !!(cv(e) && e.declarationMap);
        }
        function ov(e) {
          if (e.esModuleInterop !== void 0)
            return e.esModuleInterop;
          switch (Ei(e)) {
            case 100:
            case 199:
              return true;
          }
        }
        function TM(e) {
          return e.allowSyntheticDefaultImports !== void 0 ? e.allowSyntheticDefaultImports : ov(e) || Ei(e) === 4 || Ml(e) === 100;
        }
        function _v(e) {
          return e >= 3 && e <= 99 || e === 100;
        }
        function SM(e) {
          let t = Ml(e);
          if (!_v(t))
            return false;
          if (e.resolvePackageJsonExports !== void 0)
            return e.resolvePackageJsonExports;
          switch (t) {
            case 3:
            case 99:
            case 100:
              return true;
          }
          return false;
        }
        function xM(e) {
          let t = Ml(e);
          if (!_v(t))
            return false;
          if (e.resolvePackageJsonExports !== void 0)
            return e.resolvePackageJsonExports;
          switch (t) {
            case 3:
            case 99:
            case 100:
              return true;
          }
          return false;
        }
        function Cx(e) {
          return e.resolveJsonModule !== void 0 ? e.resolveJsonModule : Ml(e) === 100;
        }
        function cv(e) {
          return !!(e.declaration || e.composite);
        }
        function EM(e) {
          return !!(e.preserveConstEnums || zf(e));
        }
        function wM(e) {
          return !!(e.incremental || e.composite);
        }
        function lv(e, t) {
          return e[t] === void 0 ? !!e.strict : !!e[t];
        }
        function Ax(e) {
          return e.allowJs === void 0 ? !!e.checkJs : e.allowJs;
        }
        function CM(e) {
          return e.useDefineForClassFields === void 0 ? Uf(e) >= 9 : e.useDefineForClassFields;
        }
        function AM(e, t) {
          return J_(t, e, semanticDiagnosticsOptionDeclarations);
        }
        function PM(e, t) {
          return J_(t, e, affectsEmitOptionDeclarations);
        }
        function DM(e, t) {
          return J_(t, e, affectsDeclarationPathOptionDeclarations);
        }
        function uv(e, t) {
          return t.strictFlag ? lv(e, t.name) : e[t.name];
        }
        function kM(e) {
          let t = e.jsx;
          return t === 2 || t === 4 || t === 5;
        }
        function IM(e, t) {
          let r = t == null ? void 0 : t.pragmas.get("jsximportsource"), s = ir(r) ? r[r.length - 1] : r;
          return e.jsx === 4 || e.jsx === 5 || e.jsxImportSource || s ? (s == null ? void 0 : s.arguments.factory) || e.jsxImportSource || "react" : void 0;
        }
        function NM(e, t) {
          return e ? `${e}/${t.jsx === 5 ? "jsx-dev-runtime" : "jsx-runtime"}` : void 0;
        }
        function OM(e) {
          let t = false;
          for (let r = 0; r < e.length; r++)
            if (e.charCodeAt(r) === 42)
              if (!t)
                t = true;
              else
                return false;
          return true;
        }
        function MM(e, t) {
          let r, s, f, x = false;
          return { getSymlinkedFiles: () => f, getSymlinkedDirectories: () => r, getSymlinkedDirectoriesByRealpath: () => s, setSymlinkedFile: (A, g) => (f || (f = /* @__PURE__ */ new Map())).set(A, g), setSymlinkedDirectory: (A, g) => {
            let B = Ui(A, e, t);
            Hx(B) || (B = wo(B), g !== false && !(r != null && r.has(B)) && (s || (s = Be())).add(wo(g.realPath), A), (r || (r = /* @__PURE__ */ new Map())).set(B, g));
          }, setSymlinksFromResolutions(A, g) {
            var B, N;
            Y.assert(!x), x = true;
            for (let X of A)
              (B = X.resolvedModules) == null || B.forEach((F) => w(this, F.resolvedModule)), (N = X.resolvedTypeReferenceDirectiveNames) == null || N.forEach((F) => w(this, F.resolvedTypeReferenceDirective));
            g.forEach((X) => w(this, X.resolvedTypeReferenceDirective));
          }, hasProcessedResolutions: () => x };
          function w(A, g) {
            if (!g || !g.originalPath || !g.resolvedFileName)
              return;
            let { resolvedFileName: B, originalPath: N } = g;
            A.setSymlinkedFile(Ui(N, e, t), B);
            let [X, F] = LM(B, N, e, t) || Bt;
            X && F && A.setSymlinkedDirectory(F, { real: X, realPath: Ui(X, e, t) });
          }
        }
        function LM(e, t, r, s) {
          let f = qi(as(e, r)), x = qi(as(t, r)), w = false;
          for (; f.length >= 2 && x.length >= 2 && !Px(f[f.length - 2], s) && !Px(x[x.length - 2], s) && s(f[f.length - 1]) === s(x[x.length - 1]); )
            f.pop(), x.pop(), w = true;
          return w ? [xo(f), xo(x)] : void 0;
        }
        function Px(e, t) {
          return e !== void 0 && (t(e) === "node_modules" || Pn(e, "@"));
        }
        function RM(e) {
          return ay(e.charCodeAt(0)) ? e.slice(1) : void 0;
        }
        function jM(e, t, r) {
          let s = ST(e, t, r);
          return s === void 0 ? void 0 : RM(s);
        }
        function JM(e) {
          return e.replace(Xf, FM);
        }
        function FM(e) {
          return "\\" + e;
        }
        function Wf(e, t, r) {
          let s = pv(e, t, r);
          return !s || !s.length ? void 0 : `^(${s.map((w) => `(${w})`).join("|")})${r === "exclude" ? "($|/)" : "$"}`;
        }
        function pv(e, t, r) {
          if (!(e === void 0 || e.length === 0))
            return ne(e, (s) => s && kx(s, t, r, Nv[r]));
        }
        function Dx(e) {
          return !/[.*?]/.test(e);
        }
        function BM(e, t, r) {
          let s = e && kx(e, t, r, Nv[r]);
          return s && `^(${s})${r === "exclude" ? "($|/)" : "$"}`;
        }
        function kx(e, t, r, s) {
          let { singleAsteriskRegexFragment: f, doubleAsteriskRegexFragment: x, replaceWildcardCharacter: w } = s, A = "", g = false, B = $p(e, t), N = Zn(B);
          if (r !== "exclude" && N === "**")
            return;
          B[0] = P_(B[0]), Dx(N) && B.push("**", "*");
          let X = 0;
          for (let F of B) {
            if (F === "**")
              A += x;
            else if (r === "directories" && (A += "(", X++), g && (A += zn), r !== "exclude") {
              let $ = "";
              F.charCodeAt(0) === 42 ? ($ += "([^./]" + f + ")?", F = F.substr(1)) : F.charCodeAt(0) === 63 && ($ += "[^./]", F = F.substr(1)), $ += F.replace(Xf, w), $ !== F && (A += Yf), A += $;
            } else
              A += F.replace(Xf, w);
            g = true;
          }
          for (; X > 0; )
            A += ")?", X--;
          return A;
        }
        function fv(e, t) {
          return e === "*" ? t : e === "?" ? "[^/]" : "\\" + e;
        }
        function Ix(e, t, r, s, f) {
          e = Un(e), f = Un(f);
          let x = tn(f, e);
          return { includeFilePatterns: Ze(pv(r, x, "files"), (w) => `^${w}$`), includeFilePattern: Wf(r, x, "files"), includeDirectoryPattern: Wf(r, x, "directories"), excludePattern: Wf(t, x, "exclude"), basePaths: UM(e, r, s) };
        }
        function Vf(e, t) {
          return new RegExp(e, t ? "" : "i");
        }
        function qM(e, t, r, s, f, x, w, A, g) {
          e = Un(e), x = Un(x);
          let B = Ix(e, r, s, f, x), N = B.includeFilePatterns && B.includeFilePatterns.map((Ye) => Vf(Ye, f)), X = B.includeDirectoryPattern && Vf(B.includeDirectoryPattern, f), F = B.excludePattern && Vf(B.excludePattern, f), $ = N ? N.map(() => []) : [[]], ae = /* @__PURE__ */ new Map(), Te = wp(f);
          for (let Ye of B.basePaths)
            Se(Ye, tn(x, Ye), w);
          return ct($);
          function Se(Ye, Ne, oe) {
            let Ve = Te(g(Ne));
            if (ae.has(Ve))
              return;
            ae.set(Ve, true);
            let { files: pt, directories: Gt } = A(Ye);
            for (let Nt of Is(pt, ri)) {
              let Xt = tn(Ye, Nt), er = tn(Ne, Nt);
              if (!(t && !da(Xt, t)) && !(F && F.test(er)))
                if (!N)
                  $[0].push(Xt);
                else {
                  let Tn = he(N, (Hr) => Hr.test(er));
                  Tn !== -1 && $[Tn].push(Xt);
                }
            }
            if (!(oe !== void 0 && (oe--, oe === 0)))
              for (let Nt of Is(Gt, ri)) {
                let Xt = tn(Ye, Nt), er = tn(Ne, Nt);
                (!X || X.test(er)) && (!F || !F.test(er)) && Se(Xt, er, oe);
              }
          }
        }
        function UM(e, t, r) {
          let s = [e];
          if (t) {
            let f = [];
            for (let x of t) {
              let w = A_(x) ? x : Un(tn(e, x));
              f.push(zM(w));
            }
            f.sort(rl(!r));
            for (let x of f)
              me(s, (w) => !jT(w, x, e, !r)) && s.push(x);
          }
          return s;
        }
        function zM(e) {
          let t = Je(e, h8);
          return t < 0 ? OT(e) ? P_(ma(e)) : e : e.substring(0, e.lastIndexOf(zn, t));
        }
        function Nx(e, t) {
          return t || Ox(e) || 3;
        }
        function Ox(e) {
          switch (e.substr(e.lastIndexOf(".")).toLowerCase()) {
            case ".js":
            case ".cjs":
            case ".mjs":
              return 1;
            case ".jsx":
              return 2;
            case ".ts":
            case ".cts":
            case ".mts":
              return 3;
            case ".tsx":
              return 4;
            case ".json":
              return 6;
            default:
              return 0;
          }
        }
        function Mx(e, t) {
          let r = e && Ax(e);
          if (!t || t.length === 0)
            return r ? Jl : Jo;
          let s = r ? Jl : Jo, f = ct(s);
          return [...s, ...qt(t, (w) => w.scriptKind === 7 || r && WM(w.scriptKind) && f.indexOf(w.extension) === -1 ? [w.extension] : void 0)];
        }
        function Lx(e, t) {
          return !e || !Cx(e) ? t : t === Jl ? v8 : t === Jo ? g8 : [...t, [".json"]];
        }
        function WM(e) {
          return e === 1 || e === 2;
        }
        function dv(e) {
          return Ke(Lv, (t) => ns(e, t));
        }
        function mv(e) {
          return Ke(Ov, (t) => ns(e, t));
        }
        function Rx(e) {
          let { imports: t } = e, r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : W1(dv, mv);
          return q(t, (s) => {
            let { text: f } = s;
            return So(f) ? r(f) : void 0;
          }) || false;
        }
        function VM(e, t, r, s) {
          if (e === "js" || t === 99)
            return shouldAllowImportingTsExtension(r) && f() !== 2 ? 3 : 2;
          if (e === "minimal")
            return 0;
          if (e === "index")
            return 1;
          if (!shouldAllowImportingTsExtension(r))
            return Rx(s) ? 2 : 0;
          return f();
          function f() {
            let x = false, w = s.imports.length ? s.imports.map((A) => A.text) : y0(s) ? HM(s).map((A) => A.arguments[0].text) : Bt;
            for (let A of w)
              if (So(A)) {
                if (mv(A))
                  return 3;
                dv(A) && (x = true);
              }
            return x ? 2 : 0;
          }
        }
        function HM(e) {
          let t = 0, r;
          for (let s of e.statements) {
            if (t > 3)
              break;
            W3(s) ? r = Ft(r, s.declarationList.declarations.map((f) => f.initializer)) : Zl(s) && El(s.expression, true) ? r = tr(r, s.expression) : t++;
          }
          return r || Bt;
        }
        function GM(e, t, r) {
          if (!e)
            return false;
          let s = Mx(t, r);
          for (let f of ct(Lx(t, s)))
            if (ns(e, f))
              return true;
          return false;
        }
        function jx(e) {
          let t = e.match(/\//g);
          return t ? t.length : 0;
        }
        function $M(e, t) {
          return Vr(jx(e), jx(t));
        }
        function Ll(e) {
          for (let t of Qf) {
            let r = Jx(e, t);
            if (r !== void 0)
              return r;
          }
          return e;
        }
        function Jx(e, t) {
          return ns(e, t) ? Fx(e, t) : void 0;
        }
        function Fx(e, t) {
          return e.substring(0, e.length - t.length);
        }
        function KM(e, t) {
          return RT(e, t, Qf, false);
        }
        function Bx(e) {
          let t = e.indexOf("*");
          return t === -1 ? e : e.indexOf("*", t + 1) !== -1 ? void 0 : { prefix: e.substr(0, t), suffix: e.substr(t + 1) };
        }
        function XM(e) {
          return qt(ho(e), (t) => Bx(t));
        }
        function hs(e) {
          return !(e >= 0);
        }
        function qx(e) {
          return e === ".ts" || e === ".tsx" || e === ".d.ts" || e === ".cts" || e === ".mts" || e === ".d.mts" || e === ".d.cts" || Pn(e, ".d.") && es(e, ".ts");
        }
        function YM(e) {
          return qx(e) || e === ".json";
        }
        function QM(e) {
          let t = hv(e);
          return t !== void 0 ? t : Y.fail(`File ${e} has unknown extension.`);
        }
        function ZM(e) {
          return hv(e) !== void 0;
        }
        function hv(e) {
          return Ae(Qf, (t) => ns(e, t));
        }
        function eL(e, t) {
          return e.checkJsDirective ? e.checkJsDirective.enabled : t.checkJs;
        }
        function tL(e, t) {
          let r = [];
          for (let s of e) {
            if (s === t)
              return t;
            Ji(s) || r.push(s);
          }
          return TT(r, (s) => s, t);
        }
        function rL(e, t) {
          let r = e.indexOf(t);
          return Y.assert(r !== -1), e.slice(r);
        }
        function Rl(e) {
          for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), s = 1; s < t; s++)
            r[s - 1] = arguments[s];
          return r.length && (e.relatedInformation || (e.relatedInformation = []), Y.assert(e.relatedInformation !== Bt, "Diagnostic had empty array singleton for related info, but is still being constructed!"), e.relatedInformation.push(...r)), e;
        }
        function nL(e, t) {
          Y.assert(e.length !== 0);
          let r = t(e[0]), s = r;
          for (let f = 1; f < e.length; f++) {
            let x = t(e[f]);
            x < r ? r = x : x > s && (s = x);
          }
          return { min: r, max: s };
        }
        function iL(e) {
          return { pos: Io(e), end: e.end };
        }
        function aL(e, t) {
          let r = t.pos - 1, s = Math.min(e.text.length, Ar(e.text, t.end) + 1);
          return { pos: r, end: s };
        }
        function sL(e, t, r) {
          return t.skipLibCheck && e.isDeclarationFile || t.skipDefaultLibCheck && e.hasNoDefaultLib || r.isSourceOfProjectReferenceRedirect(e.fileName);
        }
        function gv(e, t) {
          return e === t || typeof e == "object" && e !== null && typeof t == "object" && t !== null && S_(e, t, gv);
        }
        function Hf(e) {
          let t;
          switch (e.charCodeAt(1)) {
            case 98:
            case 66:
              t = 1;
              break;
            case 111:
            case 79:
              t = 3;
              break;
            case 120:
            case 88:
              t = 4;
              break;
            default:
              let B = e.length - 1, N = 0;
              for (; e.charCodeAt(N) === 48; )
                N++;
              return e.slice(N, B) || "0";
          }
          let r = 2, s = e.length - 1, f = (s - r) * t, x = new Uint16Array((f >>> 4) + (f & 15 ? 1 : 0));
          for (let B = s - 1, N = 0; B >= r; B--, N += t) {
            let X = N >>> 4, F = e.charCodeAt(B), ae = (F <= 57 ? F - 48 : 10 + F - (F <= 70 ? 65 : 97)) << (N & 15);
            x[X] |= ae;
            let Te = ae >>> 16;
            Te && (x[X + 1] |= Te);
          }
          let w = "", A = x.length - 1, g = true;
          for (; g; ) {
            let B = 0;
            g = false;
            for (let N = A; N >= 0; N--) {
              let X = B << 16 | x[N], F = X / 10 | 0;
              x[N] = F, B = X - F * 10, F && !g && (A = N, g = true);
            }
            w = B + w;
          }
          return w;
        }
        function yv(e) {
          let { negative: t, base10Value: r } = e;
          return (t && r !== "0" ? "-" : "") + r;
        }
        function oL(e) {
          if (zx(e, false))
            return Ux(e);
        }
        function Ux(e) {
          let t = e.startsWith("-"), r = Hf(`${t ? e.slice(1) : e}n`);
          return { negative: t, base10Value: r };
        }
        function zx(e, t) {
          if (e === "")
            return false;
          let r = Po(99, false), s = true;
          r.setOnError(() => s = false), r.setText(e + "n");
          let f = r.scan(), x = f === 40;
          x && (f = r.scan());
          let w = r.getTokenFlags();
          return s && f === 9 && r.getTextPos() === e.length + 1 && !(w & 512) && (!t || e === yv({ negative: x, base10Value: Hf(r.getTokenValue()) }));
        }
        function _L(e) {
          return !!(e.flags & 16777216) || F3(e) || uL(e) || lL(e) || !(g0(e) || cL(e));
        }
        function cL(e) {
          return yt(e) && nu(e.parent) && e.parent.name === e;
        }
        function lL(e) {
          for (; e.kind === 79 || e.kind === 208; )
            e = e.parent;
          if (e.kind !== 164)
            return false;
          if (rn(e.parent, 256))
            return true;
          let t = e.parent.parent.kind;
          return t === 261 || t === 184;
        }
        function uL(e) {
          if (e.kind !== 79)
            return false;
          let t = zi(e.parent, (r) => {
            switch (r.kind) {
              case 294:
                return true;
              case 208:
              case 230:
                return false;
              default:
                return "quit";
            }
          });
          return (t == null ? void 0 : t.token) === 117 || (t == null ? void 0 : t.parent.kind) === 261;
        }
        function pL(e) {
          return ac(e) && yt(e.typeName);
        }
        function fL(e) {
          let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fa;
          if (e.length < 2)
            return true;
          let r = e[0];
          for (let s = 1, f = e.length; s < f; s++) {
            let x = e[s];
            if (!t(r, x))
              return false;
          }
          return true;
        }
        function Gf(e, t) {
          return e.pos = t, e;
        }
        function Wx(e, t) {
          return e.end = t, e;
        }
        function Us(e, t, r) {
          return Wx(Gf(e, t), r);
        }
        function $f(e, t, r) {
          return Us(e, t, t + r);
        }
        function dL(e, t) {
          return e && (e.flags = t), e;
        }
        function Sa(e, t) {
          return e && t && (e.parent = t), e;
        }
        function Q_(e, t) {
          if (e)
            for (let r of e)
              Sa(r, t);
          return e;
        }
        function Vx(e, t) {
          if (!e)
            return e;
          return D2(e, Uy(e) ? r : f), e;
          function r(x, w) {
            if (t && x.parent === w)
              return "skip";
            Sa(x, w);
          }
          function s(x) {
            if (ya(x))
              for (let w of x.jsDoc)
                r(w, x), D2(w, r);
          }
          function f(x, w) {
            return r(x, w) || s(x);
          }
        }
        function mL(e) {
          return !cd(e);
        }
        function hL(e) {
          return Yl(e) && me(e.elements, mL);
        }
        function gL(e) {
          for (Y.assertIsDefined(e.parent); ; ) {
            let t = e.parent;
            if (qo(t)) {
              e = t;
              continue;
            }
            if (Zl(t) || Qv(t) || eE(t) && (t.initializer === e || t.incrementor === e))
              return true;
            if (oc(t)) {
              if (e !== Zn(t.elements))
                return true;
              e = t;
              continue;
            }
            if (ur(t) && t.operatorToken.kind === 27) {
              if (e === t.left)
                return true;
              e = t;
              continue;
            }
            return false;
          }
        }
        function Hx(e) {
          return Ke(ignoredPaths, (t) => Fi(e, t));
        }
        function yL(e) {
          if (!e.parent)
            return;
          switch (e.kind) {
            case 165:
              let { parent: r } = e;
              return r.kind === 192 ? void 0 : r.typeParameters;
            case 166:
              return e.parent.parameters;
            case 201:
              return e.parent.templateSpans;
            case 236:
              return e.parent.templateSpans;
            case 167: {
              let { parent: s } = e;
              return ME(s) ? s.modifiers : void 0;
            }
            case 294:
              return e.parent.heritageClauses;
          }
          let { parent: t } = e;
          if (zy(e))
            return f2(e.parent) ? void 0 : e.parent.tags;
          switch (t.kind) {
            case 184:
            case 261:
              return Ry(e) ? t.members : void 0;
            case 189:
            case 190:
              return t.types;
            case 186:
            case 206:
            case 357:
            case 272:
            case 276:
              return t.elements;
            case 207:
            case 289:
              return t.properties;
            case 210:
            case 211:
              return Jy(e) ? t.typeArguments : t.expression === e ? void 0 : t.arguments;
            case 281:
            case 285:
              return o3(e) ? t.children : void 0;
            case 283:
            case 282:
              return Jy(e) ? t.typeArguments : void 0;
            case 238:
            case 292:
            case 293:
            case 265:
              return t.statements;
            case 266:
              return t.clauses;
            case 260:
            case 228:
              return Js(e) ? t.members : void 0;
            case 263:
              return cE(e) ? t.members : void 0;
            case 308:
              return t.statements;
          }
        }
        function vL(e) {
          if (!e.typeParameters) {
            if (Ke(e.parameters, (t) => !V0(t)))
              return true;
            if (e.kind !== 216) {
              let t = pa(e.parameters);
              if (!(t && kl(t)))
                return true;
            }
          }
          return false;
        }
        function bL(e) {
          return e === "Infinity" || e === "-Infinity" || e === "NaN";
        }
        function Gx(e) {
          return e.kind === 257 && e.parent.kind === 295;
        }
        function TL(e) {
          let t = e.valueDeclaration && If(e.valueDeclaration);
          return !!t && (Vs(t) || Gx(t));
        }
        function SL(e) {
          return e.kind === 215 || e.kind === 216;
        }
        function xL(e) {
          return e.replace(/\$/gm, () => "\\$");
        }
        function $x(e) {
          return (+e).toString() === e;
        }
        function EL(e, t, r, s) {
          return vy(e, t) ? si.createIdentifier(e) : !s && $x(e) && +e >= 0 ? si.createNumericLiteral(+e) : si.createStringLiteral(e, !!r);
        }
        function Kx(e) {
          return !!(e.flags & 262144 && e.isThisType);
        }
        function wL(e) {
          let t = 0, r = 0, s = 0, f = 0, x;
          ((B) => {
            B[B.BeforeNodeModules = 0] = "BeforeNodeModules", B[B.NodeModules = 1] = "NodeModules", B[B.Scope = 2] = "Scope", B[B.PackageContent = 3] = "PackageContent";
          })(x || (x = {}));
          let w = 0, A = 0, g = 0;
          for (; A >= 0; )
            switch (w = A, A = e.indexOf("/", w + 1), g) {
              case 0:
                e.indexOf(nodeModulesPathPart, w) === w && (t = w, r = A, g = 1);
                break;
              case 1:
              case 2:
                g === 1 && e.charAt(w + 1) === "@" ? g = 2 : (s = A, g = 3);
                break;
              case 3:
                e.indexOf(nodeModulesPathPart, w) === w ? g = 1 : g = 3;
                break;
            }
          return f = w, g > 1 ? { topLevelNodeModulesIndex: t, topLevelPackageNameIndex: r, packageRootIndex: s, fileNameIndex: f } : void 0;
        }
        function CL(e) {
          var t;
          return e.kind === 344 ? (t = e.typeExpression) == null ? void 0 : t.type : e.type;
        }
        function Xx(e) {
          switch (e.kind) {
            case 165:
            case 260:
            case 261:
            case 262:
            case 263:
            case 349:
            case 341:
            case 343:
              return true;
            case 270:
              return e.isTypeOnly;
            case 273:
            case 278:
              return e.parent.parent.isTypeOnly;
            default:
              return false;
          }
        }
        function AL(e) {
          return i22(e) || zo(e) || Wo(e) || _c(e) || eu(e) || Xx(e) || Ea(e) && !Xy(e) && !vf(e);
        }
        function Yx(e) {
          if (!Dy(e))
            return false;
          let { isBracketed: t, typeExpression: r } = e;
          return t || !!r && r.type.kind === 319;
        }
        function PL(e, t) {
          if (e.length === 0)
            return false;
          let r = e.charCodeAt(0);
          return r === 35 ? e.length > 1 && Wn(e.charCodeAt(1), t) : Wn(r, t);
        }
        function Qx(e) {
          var t;
          return ((t = getSnippetElement(e)) == null ? void 0 : t.kind) === 0;
        }
        function Zx(e) {
          return Pr(e) && (e.type && e.type.kind === 319 || of(e).some((t) => {
            let { isBracketed: r, typeExpression: s } = t;
            return r || !!s && s.type.kind === 319;
          }));
        }
        function DL(e) {
          switch (e.kind) {
            case 169:
            case 168:
              return !!e.questionToken;
            case 166:
              return !!e.questionToken || Zx(e);
            case 351:
            case 344:
              return Yx(e);
            default:
              return false;
          }
        }
        function kL(e) {
          let t = e.kind;
          return (t === 208 || t === 209) && Uo(e.expression);
        }
        function IL(e) {
          return Pr(e) && qo(e) && ya(e) && !!wy(e);
        }
        function NL(e) {
          return Y.checkDefined(e8(e));
        }
        function e8(e) {
          let t = wy(e);
          return t && t.typeExpression && t.typeExpression.type;
        }
        var t8, Kf, r8, n8, Z_, vv, bv, i8, Tv, a8, Sv, xv, Ev, wv, s8, o8, _8, c8, l8, Cv, u8, p8, f8, jo, xa, d8, m8, lr, Av, jl, Xf, h8, Pv, Yf, Dv, kv, Iv, Nv, Jo, Ov, g8, y8, Mv, Lv, Jl, v8, Rv, b8, jv, Qf, T8, OL = D({ "src/compiler/utilities.ts"() {
          nn(), t8 = [], Kf = "tslib", r8 = 160, n8 = 1e6, Z_ = _D(), vv = ((e) => (e[e.None = 0] = "None", e[e.NeverAsciiEscape = 1] = "NeverAsciiEscape", e[e.JsxAttributeEscape = 2] = "JsxAttributeEscape", e[e.TerminateUnterminatedLiterals = 4] = "TerminateUnterminatedLiterals", e[e.AllowNumericSeparator = 8] = "AllowNumericSeparator", e))(vv || {}), bv = /^(\/\/\/\s*<reference\s+path\s*=\s*)(('[^']*')|("[^"]*")).*?\/>/, i8 = /^(\/\/\/\s*<reference\s+types\s*=\s*)(('[^']*')|("[^"]*")).*?\/>/, Tv = /^(\/\/\/\s*<amd-dependency\s+path\s*=\s*)(('[^']*')|("[^"]*")).*?\/>/, a8 = /^(\/\/\/\s*<reference\s+no-default-lib\s*=\s*)(('[^']*')|("[^"]*"))\s*\/>/, Sv = ((e) => (e[e.None = 0] = "None", e[e.Definite = 1] = "Definite", e[e.Compound = 2] = "Compound", e))(Sv || {}), xv = ((e) => (e[e.Normal = 0] = "Normal", e[e.Generator = 1] = "Generator", e[e.Async = 2] = "Async", e[e.Invalid = 4] = "Invalid", e[e.AsyncGenerator = 3] = "AsyncGenerator", e))(xv || {}), Ev = ((e) => (e[e.Left = 0] = "Left", e[e.Right = 1] = "Right", e))(Ev || {}), wv = ((e) => (e[e.Comma = 0] = "Comma", e[e.Spread = 1] = "Spread", e[e.Yield = 2] = "Yield", e[e.Assignment = 3] = "Assignment", e[e.Conditional = 4] = "Conditional", e[e.Coalesce = 4] = "Coalesce", e[e.LogicalOR = 5] = "LogicalOR", e[e.LogicalAND = 6] = "LogicalAND", e[e.BitwiseOR = 7] = "BitwiseOR", e[e.BitwiseXOR = 8] = "BitwiseXOR", e[e.BitwiseAND = 9] = "BitwiseAND", e[e.Equality = 10] = "Equality", e[e.Relational = 11] = "Relational", e[e.Shift = 12] = "Shift", e[e.Additive = 13] = "Additive", e[e.Multiplicative = 14] = "Multiplicative", e[e.Exponentiation = 15] = "Exponentiation", e[e.Unary = 16] = "Unary", e[e.Update = 17] = "Update", e[e.LeftHandSide = 18] = "LeftHandSide", e[e.Member = 19] = "Member", e[e.Primary = 20] = "Primary", e[e.Highest = 20] = "Highest", e[e.Lowest = 0] = "Lowest", e[e.Invalid = -1] = "Invalid", e))(wv || {}), s8 = /\$\{/g, o8 = /[\\\"\u0000-\u001f\t\v\f\b\r\n\u2028\u2029\u0085]/g, _8 = /[\\\'\u0000-\u001f\t\v\f\b\r\n\u2028\u2029\u0085]/g, c8 = /\r\n|[\\\`\u0000-\u001f\t\v\f\b\r\u2028\u2029\u0085]/g, l8 = new Map(Object.entries({ "	": "\\t", "\v": "\\v", "\f": "\\f", "\b": "\\b", "\r": "\\r", "\n": "\\n", "\\": "\\\\", '"': '\\"', "'": "\\'", "`": "\\`", "\u2028": "\\u2028", "\u2029": "\\u2029", "": "\\u0085", "\r\n": "\\r\\n" })), Cv = /[^\u0000-\u007F]/g, u8 = /[\"\u0000-\u001f\u2028\u2029\u0085]/g, p8 = /[\'\u0000-\u001f\u2028\u2029\u0085]/g, f8 = new Map(Object.entries({ '"': "&quot;", "'": "&apos;" })), jo = ["", "    "], xa = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", d8 = `\r
`, m8 = `
`, lr = { getNodeConstructor: () => nv, getTokenConstructor: () => nM, getIdentifierConstructor: () => iM, getPrivateIdentifierConstructor: () => nv, getSourceFileConstructor: () => nv, getSymbolConstructor: () => eM, getTypeConstructor: () => tM, getSignatureConstructor: () => rM, getSourceMapSourceConstructor: () => aM }, Av = [], Xf = /[^\w\s\/]/g, h8 = [42, 63], Pv = ["node_modules", "bower_components", "jspm_packages"], Yf = `(?!(${Pv.join("|")})(/|$))`, Dv = { singleAsteriskRegexFragment: "([^./]|(\\.(?!min\\.js$))?)*", doubleAsteriskRegexFragment: `(/${Yf}[^/.][^/]*)*?`, replaceWildcardCharacter: (e) => fv(e, Dv.singleAsteriskRegexFragment) }, kv = { singleAsteriskRegexFragment: "[^/]*", doubleAsteriskRegexFragment: `(/${Yf}[^/.][^/]*)*?`, replaceWildcardCharacter: (e) => fv(e, kv.singleAsteriskRegexFragment) }, Iv = { singleAsteriskRegexFragment: "[^/]*", doubleAsteriskRegexFragment: "(/.+?)?", replaceWildcardCharacter: (e) => fv(e, Iv.singleAsteriskRegexFragment) }, Nv = { files: Dv, directories: kv, exclude: Iv }, Jo = [[".ts", ".tsx", ".d.ts"], [".cts", ".d.cts"], [".mts", ".d.mts"]], Ov = ct(Jo), g8 = [...Jo, [".json"]], y8 = [".d.ts", ".d.cts", ".d.mts", ".cts", ".mts", ".ts", ".tsx", ".cts", ".mts"], Mv = [[".js", ".jsx"], [".mjs"], [".cjs"]], Lv = ct(Mv), Jl = [[".ts", ".tsx", ".d.ts", ".js", ".jsx"], [".cts", ".d.cts", ".cjs"], [".mts", ".d.mts", ".mjs"]], v8 = [...Jl, [".json"]], Rv = [".d.ts", ".d.cts", ".d.mts"], b8 = [".ts", ".cts", ".mts", ".tsx"], jv = ((e) => (e[e.Minimal = 0] = "Minimal", e[e.Index = 1] = "Index", e[e.JsExtension = 2] = "JsExtension", e[e.TsExtension = 3] = "TsExtension", e))(jv || {}), Qf = [".d.ts", ".d.mts", ".d.cts", ".mjs", ".mts", ".cjs", ".cts", ".ts", ".js", ".tsx", ".jsx", ".json"], T8 = { files: Bt, directories: Bt };
        } });
        function S8() {
          let e, t, r, s, f;
          return { createBaseSourceFileNode: x, createBaseIdentifierNode: w, createBasePrivateIdentifierNode: A, createBaseTokenNode: g, createBaseNode: B };
          function x(N) {
            return new (f || (f = lr.getSourceFileConstructor()))(N, -1, -1);
          }
          function w(N) {
            return new (r || (r = lr.getIdentifierConstructor()))(N, -1, -1);
          }
          function A(N) {
            return new (s || (s = lr.getPrivateIdentifierConstructor()))(N, -1, -1);
          }
          function g(N) {
            return new (t || (t = lr.getTokenConstructor()))(N, -1, -1);
          }
          function B(N) {
            return new (e || (e = lr.getNodeConstructor()))(N, -1, -1);
          }
        }
        var ML = D({ "src/compiler/factory/baseNodeFactory.ts"() {
          nn();
        } }), Jv, LL = D({ "src/compiler/factory/parenthesizerRules.ts"() {
          nn(), Jv = { getParenthesizeLeftSideOfBinaryForOperator: (e) => rr, getParenthesizeRightSideOfBinaryForOperator: (e) => rr, parenthesizeLeftSideOfBinary: (e, t) => t, parenthesizeRightSideOfBinary: (e, t, r) => r, parenthesizeExpressionOfComputedPropertyName: rr, parenthesizeConditionOfConditionalExpression: rr, parenthesizeBranchOfConditionalExpression: rr, parenthesizeExpressionOfExportDefault: rr, parenthesizeExpressionOfNew: (e) => ti(e, Do), parenthesizeLeftSideOfAccess: (e) => ti(e, Do), parenthesizeOperandOfPostfixUnary: (e) => ti(e, Do), parenthesizeOperandOfPrefixUnary: (e) => ti(e, t3), parenthesizeExpressionsOfCommaDelimitedList: (e) => ti(e, _s), parenthesizeExpressionForDisallowedComma: rr, parenthesizeExpressionOfExpressionStatement: rr, parenthesizeConciseBodyOfArrowFunction: rr, parenthesizeCheckTypeOfConditionalType: rr, parenthesizeExtendsTypeOfConditionalType: rr, parenthesizeConstituentTypesOfUnionType: (e) => ti(e, _s), parenthesizeConstituentTypeOfUnionType: rr, parenthesizeConstituentTypesOfIntersectionType: (e) => ti(e, _s), parenthesizeConstituentTypeOfIntersectionType: rr, parenthesizeOperandOfTypeOperator: rr, parenthesizeOperandOfReadonlyTypeOperator: rr, parenthesizeNonArrayTypeOfPostfixType: rr, parenthesizeElementTypesOfTupleType: (e) => ti(e, _s), parenthesizeElementTypeOfTupleType: rr, parenthesizeTypeOfOptionalType: rr, parenthesizeTypeArguments: (e) => e && ti(e, _s), parenthesizeLeadingTypeArgument: rr };
        } }), x8 = () => new Proxy({}, { get: () => () => {
        } });
        function jL(e) {
          Bv.push(e);
        }
        function Zf(e, t) {
          let r = e & 8 ? JL : FL, s = tl(() => e & 1 ? Jv : createParenthesizerRules(Ye)), f = tl(() => e & 2 ? nullNodeConverters : x8()), x = An((n) => (o, l) => xu(o, n, l)), w = An((n) => (o) => Tu(n, o)), A = An((n) => (o) => Su(o, n)), g = An((n) => () => db(n)), B = An((n) => (o) => Ac(n, o)), N = An((n) => (o, l) => mb(n, o, l)), X = An((n) => (o, l) => Km(n, o, l)), F = An((n) => (o, l) => Xm(n, o, l)), $ = An((n) => (o, l) => ph(n, o, l)), ae = An((n) => (o, l, p7) => Cb(n, o, l, p7)), Te = An((n) => (o, l, p7) => fh(n, o, l, p7)), Se = An((n) => (o, l, p7, k) => Ab(n, o, l, p7, k)), Ye = { get parenthesizer() {
            return s();
          }, get converters() {
            return f();
          }, baseFactory: t, flags: e, createNodeArray: Ne, createNumericLiteral: Gt, createBigIntLiteral: Nt, createStringLiteral: er, createStringLiteralFromNode: Tn, createRegularExpressionLiteral: Hr, createLiteralLikeNode: Gi, createIdentifier: Ut, createTempVariable: kn, createLoopVariable: an, createUniqueName: mr, getGeneratedNameForNode: $i, createPrivateIdentifier: Ur, createUniquePrivateName: _r, getGeneratedPrivateNameForNode: Sn, createToken: pr, createSuper: Zt, createThis: Or, createNull: Nn, createTrue: ar, createFalse: oi, createModifier: cr, createModifiersFromModifierFlags: $r, createQualifiedName: hr, updateQualifiedName: On, createComputedPropertyName: nr, updateComputedPropertyName: br, createTypeParameterDeclaration: Kr, updateTypeParameterDeclaration: wa, createParameterDeclaration: $n, updateParameterDeclaration: Ki, createDecorator: Mn, updateDecorator: _i, createPropertySignature: Ca, updatePropertySignature: St, createPropertyDeclaration: He, updatePropertyDeclaration: _t, createMethodSignature: ft, updateMethodSignature: Kt, createMethodDeclaration: zt, updateMethodDeclaration: xe, createConstructorDeclaration: Mt, updateConstructorDeclaration: It, createGetAccessorDeclaration: gr, updateGetAccessorDeclaration: Ln, createSetAccessorDeclaration: ci, updateSetAccessorDeclaration: Xi, createCallSignature: vs, updateCallSignature: $s, createConstructSignature: li, updateConstructSignature: Yi, createIndexSignature: Qi, updateIndexSignature: bs, createClassStaticBlockDeclaration: Re, updateClassStaticBlockDeclaration: ot, createTemplateLiteralTypeSpan: Ai, updateTemplateLiteralTypeSpan: xn, createKeywordTypeNode: Dt, createTypePredicateNode: Pi, updateTypePredicateNode: Z, createTypeReferenceNode: ie, updateTypeReferenceNode: U, createFunctionTypeNode: L, updateFunctionTypeNode: fe, createConstructorTypeNode: it, updateConstructorTypeNode: Ge, createTypeQueryNode: Yt, updateTypeQueryNode: $t, createTypeLiteralNode: Wt, updateTypeLiteralNode: Xr, createArrayTypeNode: Dr, updateArrayTypeNode: Lr, createTupleTypeNode: yr, updateTupleTypeNode: Rn, createNamedTupleMember: wt, updateNamedTupleMember: Tr, createOptionalTypeNode: Tt, updateOptionalTypeNode: kt, createRestTypeNode: de, updateRestTypeNode: jn, createUnionTypeNode: e_, updateUnionTypeNode: mc, createIntersectionTypeNode: Da, updateIntersectionTypeNode: Ts, createConditionalTypeNode: Ot, updateConditionalTypeNode: dr, createInferTypeNode: Dd, updateInferTypeNode: ea, createImportTypeNode: Id, updateImportTypeNode: ka, createParenthesizedType: t_, updateParenthesizedType: En, createThisTypeNode: Er, createTypeOperatorNode: Q, updateTypeOperatorNode: Jn, createIndexedAccessTypeNode: Ia, updateIndexedAccessTypeNode: Ss, createMappedTypeNode: hc, updateMappedTypeNode: wr, createLiteralTypeNode: zr, updateLiteralTypeNode: xs, createTemplateLiteralType: kd, updateTemplateLiteralType: sn, createObjectBindingPattern: Nd, updateObjectBindingPattern: R2, createArrayBindingPattern: Es, updateArrayBindingPattern: j2, createBindingElement: gc, updateBindingElement: Ks, createArrayLiteralExpression: uu, updateArrayLiteralExpression: Od, createObjectLiteralExpression: r_, updateObjectLiteralExpression: J2, createPropertyAccessExpression: e & 4 ? (n, o) => setEmitFlags(ta(n, o), 262144) : ta, updatePropertyAccessExpression: Ld, createPropertyAccessChain: e & 4 ? (n, o, l) => setEmitFlags(Xs(n, o, l), 262144) : Xs, updatePropertyAccessChain: Rd, createElementAccessExpression: pu, updateElementAccessExpression: F2, createElementAccessChain: fu, updateElementAccessChain: jd, createCallExpression: Na, updateCallExpression: B2, createCallChain: du, updateCallChain: Kn, createNewExpression: vc, updateNewExpression: mu, createTaggedTemplateExpression: hu, updateTaggedTemplateExpression: q2, createTypeAssertion: Fd, updateTypeAssertion: Bd, createParenthesizedExpression: gu, updateParenthesizedExpression: qd, createFunctionExpression: yu, updateFunctionExpression: Ud, createArrowFunction: vu, updateArrowFunction: zd, createDeleteExpression: bu, updateDeleteExpression: U2, createTypeOfExpression: mn, updateTypeOfExpression: z2, createVoidExpression: ui, updateVoidExpression: W2, createAwaitExpression: Oa, updateAwaitExpression: Ys, createPrefixUnaryExpression: Tu, updatePrefixUnaryExpression: bc, createPostfixUnaryExpression: Su, updatePostfixUnaryExpression: Wd, createBinaryExpression: xu, updateBinaryExpression: V2, createConditionalExpression: Eu, updateConditionalExpression: H2, createTemplateExpression: Di, updateTemplateExpression: Hd, createTemplateHead: Sc, createTemplateMiddle: Cu, createTemplateTail: G2, createNoSubstitutionTemplateLiteral: $d, createTemplateLiteralLikeNode: Qs, createYieldExpression: Kd, updateYieldExpression: $2, createSpreadElement: Xd, updateSpreadElement: K2, createClassExpression: Yd, updateClassExpression: xc, createOmittedExpression: X2, createExpressionWithTypeArguments: Qd, updateExpressionWithTypeArguments: Xn, createAsExpression: Ec, updateAsExpression: Zd, createNonNullExpression: em, updateNonNullExpression: Au, createSatisfiesExpression: tm, updateSatisfiesExpression: Pu, createNonNullChain: pi, updateNonNullChain: rm, createMetaProperty: wc, updateMetaProperty: ra, createTemplateSpan: i_, updateTemplateSpan: nm, createSemicolonClassElement: im, createBlock: Zs, updateBlock: am, createVariableStatement: sm, updateVariableStatement: om, createEmptyStatement: Du, createExpressionStatement: a_, updateExpressionStatement: Y2, createIfStatement: ku, updateIfStatement: Q2, createDoStatement: Iu, updateDoStatement: Z2, createWhileStatement: _m, updateWhileStatement: eb, createForStatement: Nu, updateForStatement: cm, createForInStatement: lm, updateForInStatement: tb, createForOfStatement: um, updateForOfStatement: rb, createContinueStatement: pm, updateContinueStatement: fm, createBreakStatement: Ou, updateBreakStatement: dm, createReturnStatement: mm, updateReturnStatement: nb, createWithStatement: Mu, updateWithStatement: hm, createSwitchStatement: Lu, updateSwitchStatement: eo, createLabeledStatement: gm, updateLabeledStatement: ym, createThrowStatement: vm, updateThrowStatement: ib, createTryStatement: bm, updateTryStatement: ab, createDebuggerStatement: Tm, createVariableDeclaration: Cc, updateVariableDeclaration: Sm, createVariableDeclarationList: Ru, updateVariableDeclarationList: sb, createFunctionDeclaration: xm, updateFunctionDeclaration: ju, createClassDeclaration: Em, updateClassDeclaration: Ju, createInterfaceDeclaration: wm, updateInterfaceDeclaration: Cm, createTypeAliasDeclaration: sr, updateTypeAliasDeclaration: Ma, createEnumDeclaration: Fu, updateEnumDeclaration: La, createModuleDeclaration: Am, updateModuleDeclaration: Sr, createModuleBlock: Ra, updateModuleBlock: Yr, createCaseBlock: Pm, updateCaseBlock: _b, createNamespaceExportDeclaration: Dm, updateNamespaceExportDeclaration: km, createImportEqualsDeclaration: Im, updateImportEqualsDeclaration: Nm, createImportDeclaration: Om, updateImportDeclaration: Mm, createImportClause: Lm, updateImportClause: Rm, createAssertClause: Bu, updateAssertClause: lb, createAssertEntry: s_, updateAssertEntry: jm, createImportTypeAssertionContainer: qu, updateImportTypeAssertionContainer: Jm, createNamespaceImport: Fm, updateNamespaceImport: Uu, createNamespaceExport: Bm, updateNamespaceExport: qm, createNamedImports: Um, updateNamedImports: ub, createImportSpecifier: zm, updateImportSpecifier: pb, createExportAssignment: zu, updateExportAssignment: Wu, createExportDeclaration: na, updateExportDeclaration: Wm, createNamedExports: to, updateNamedExports: Hm, createExportSpecifier: Vu, updateExportSpecifier: o_, createMissingDeclaration: fb, createExternalModuleReference: Gm, updateExternalModuleReference: $m, get createJSDocAllType() {
            return g(315);
          }, get createJSDocUnknownType() {
            return g(316);
          }, get createJSDocNonNullableType() {
            return X(318);
          }, get updateJSDocNonNullableType() {
            return F(318);
          }, get createJSDocNullableType() {
            return X(317);
          }, get updateJSDocNullableType() {
            return F(317);
          }, get createJSDocOptionalType() {
            return B(319);
          }, get updateJSDocOptionalType() {
            return N(319);
          }, get createJSDocVariadicType() {
            return B(321);
          }, get updateJSDocVariadicType() {
            return N(321);
          }, get createJSDocNamepathType() {
            return B(322);
          }, get updateJSDocNamepathType() {
            return N(322);
          }, createJSDocFunctionType: Ym, updateJSDocFunctionType: hb, createJSDocTypeLiteral: Qm, updateJSDocTypeLiteral: gb, createJSDocTypeExpression: Zm, updateJSDocTypeExpression: yb, createJSDocSignature: eh, updateJSDocSignature: Hu, createJSDocTemplateTag: __, updateJSDocTemplateTag: Gu, createJSDocTypedefTag: $u, updateJSDocTypedefTag: th, createJSDocParameterTag: Pc, updateJSDocParameterTag: vb, createJSDocPropertyTag: Ku, updateJSDocPropertyTag: bb, createJSDocCallbackTag: rh, updateJSDocCallbackTag: nh, createJSDocOverloadTag: ih, updateJSDocOverloadTag: ah, createJSDocAugmentsTag: sh, updateJSDocAugmentsTag: Xu, createJSDocImplementsTag: Yu, updateJSDocImplementsTag: wb, createJSDocSeeTag: ro, updateJSDocSeeTag: Tb, createJSDocNameReference: ws, updateJSDocNameReference: Dc, createJSDocMemberName: oh, updateJSDocMemberName: Sb, createJSDocLink: _h, updateJSDocLink: xb, createJSDocLinkCode: ch, updateJSDocLinkCode: lh, createJSDocLinkPlain: uh, updateJSDocLinkPlain: Eb, get createJSDocTypeTag() {
            return Te(347);
          }, get updateJSDocTypeTag() {
            return Se(347);
          }, get createJSDocReturnTag() {
            return Te(345);
          }, get updateJSDocReturnTag() {
            return Se(345);
          }, get createJSDocThisTag() {
            return Te(346);
          }, get updateJSDocThisTag() {
            return Se(346);
          }, get createJSDocAuthorTag() {
            return $(333);
          }, get updateJSDocAuthorTag() {
            return ae(333);
          }, get createJSDocClassTag() {
            return $(335);
          }, get updateJSDocClassTag() {
            return ae(335);
          }, get createJSDocPublicTag() {
            return $(336);
          }, get updateJSDocPublicTag() {
            return ae(336);
          }, get createJSDocPrivateTag() {
            return $(337);
          }, get updateJSDocPrivateTag() {
            return ae(337);
          }, get createJSDocProtectedTag() {
            return $(338);
          }, get updateJSDocProtectedTag() {
            return ae(338);
          }, get createJSDocReadonlyTag() {
            return $(339);
          }, get updateJSDocReadonlyTag() {
            return ae(339);
          }, get createJSDocOverrideTag() {
            return $(340);
          }, get updateJSDocOverrideTag() {
            return ae(340);
          }, get createJSDocDeprecatedTag() {
            return $(334);
          }, get updateJSDocDeprecatedTag() {
            return ae(334);
          }, get createJSDocThrowsTag() {
            return Te(352);
          }, get updateJSDocThrowsTag() {
            return Se(352);
          }, get createJSDocSatisfiesTag() {
            return Te(353);
          }, get updateJSDocSatisfiesTag() {
            return Se(353);
          }, createJSDocEnumTag: mh, updateJSDocEnumTag: Db, createJSDocUnknownTag: dh, updateJSDocUnknownTag: Pb, createJSDocText: hh, updateJSDocText: Qu, createJSDocComment: gh, updateJSDocComment: yh, createJsxElement: Zu, updateJsxElement: kb, createJsxSelfClosingElement: c_, updateJsxSelfClosingElement: vh, createJsxOpeningElement: bh, updateJsxOpeningElement: Ib, createJsxClosingElement: on2, updateJsxClosingElement: Th, createJsxFragment: ep, createJsxText: l_, updateJsxText: Ob, createJsxOpeningFragment: kc, createJsxJsxClosingFragment: Mb, updateJsxFragment: Nb, createJsxAttribute: Sh, updateJsxAttribute: Lb, createJsxAttributes: xh, updateJsxAttributes: tp, createJsxSpreadAttribute: no, updateJsxSpreadAttribute: Rb, createJsxExpression: Ic, updateJsxExpression: Eh, createCaseClause: wh, updateCaseClause: rp, createDefaultClause: np, updateDefaultClause: jb, createHeritageClause: Ch, updateHeritageClause: Ah, createCatchClause: ip, updateCatchClause: Ph, createPropertyAssignment: Fa, updatePropertyAssignment: Jb, createShorthandPropertyAssignment: Dh, updateShorthandPropertyAssignment: Bb, createSpreadAssignment: ap, updateSpreadAssignment: ki, createEnumMember: sp, updateEnumMember: qb, createSourceFile: Ub, updateSourceFile: Mh, createRedirectedSourceFile: Ih, createBundle: Lh, updateBundle: Wb, createUnparsedSource: Nc, createUnparsedPrologue: Vb, createUnparsedPrepend: Hb, createUnparsedTextLike: Gb, createUnparsedSyntheticReference: $b, createInputFiles: Kb, createSyntheticExpression: Rh, createSyntaxList: jh, createNotEmittedStatement: Jh, createPartiallyEmittedExpression: Fh, updatePartiallyEmittedExpression: Bh, createCommaListExpression: Mc, updateCommaListExpression: Xb, createEndOfDeclarationMarker: Yb, createMergeDeclarationMarker: Qb, createSyntheticReferenceExpression: Uh, updateSyntheticReferenceExpression: _p, cloneNode: cp, get createComma() {
            return x(27);
          }, get createAssignment() {
            return x(63);
          }, get createLogicalOr() {
            return x(56);
          }, get createLogicalAnd() {
            return x(55);
          }, get createBitwiseOr() {
            return x(51);
          }, get createBitwiseXor() {
            return x(52);
          }, get createBitwiseAnd() {
            return x(50);
          }, get createStrictEquality() {
            return x(36);
          }, get createStrictInequality() {
            return x(37);
          }, get createEquality() {
            return x(34);
          }, get createInequality() {
            return x(35);
          }, get createLessThan() {
            return x(29);
          }, get createLessThanEquals() {
            return x(32);
          }, get createGreaterThan() {
            return x(31);
          }, get createGreaterThanEquals() {
            return x(33);
          }, get createLeftShift() {
            return x(47);
          }, get createRightShift() {
            return x(48);
          }, get createUnsignedRightShift() {
            return x(49);
          }, get createAdd() {
            return x(39);
          }, get createSubtract() {
            return x(40);
          }, get createMultiply() {
            return x(41);
          }, get createDivide() {
            return x(43);
          }, get createModulo() {
            return x(44);
          }, get createExponent() {
            return x(42);
          }, get createPrefixPlus() {
            return w(39);
          }, get createPrefixMinus() {
            return w(40);
          }, get createPrefixIncrement() {
            return w(45);
          }, get createPrefixDecrement() {
            return w(46);
          }, get createBitwiseNot() {
            return w(54);
          }, get createLogicalNot() {
            return w(53);
          }, get createPostfixIncrement() {
            return A(45);
          }, get createPostfixDecrement() {
            return A(46);
          }, createImmediatelyInvokedFunctionExpression: n6, createImmediatelyInvokedArrowFunction: Lc, createVoidZero: Rc, createExportDefault: zh, createExternalModuleExport: i6, createTypeCheck: a6, createMethodCall: Ba, createGlobalMethodCall: io, createFunctionBindCall: s6, createFunctionCallCall: o6, createFunctionApplyCall: _6, createArraySliceCall: Wh, createArrayConcatCall: Vh, createObjectDefinePropertyCall: u, createObjectGetOwnPropertyDescriptorCall: b, createReflectGetCall: O, createReflectSetCall: j, createPropertyDescriptor: re2, createCallBinding: Jt, createAssignmentTargetWrapper: Lt, inlineExpressions: At, getInternalName: Fn, getLocalName: di, getExportName: Ii, getDeclarationName: _n, getNamespaceMemberName: qa, getExternalModuleOrNamespaceExportName: Hh, restoreOuterExpressions: We, restoreEnclosingLabel: $e, createUseStrictPrologue: wn, copyPrologue: lp, copyStandardPrologue: Ua, copyCustomPrologue: up, ensureUseStrict: Qr, liftToBlock: jc, mergeLexicalEnvironment: $h, updateModifiers: Kh };
          return c(Bv, (n) => n(Ye)), Ye;
          function Ne(n, o) {
            if (n === void 0 || n === Bt)
              n = [];
            else if (_s(n)) {
              if (o === void 0 || n.hasTrailingComma === o)
                return n.transformFlags === void 0 && E8(n), Y.attachNodeArrayDebugInfo(n), n;
              let k = n.slice();
              return k.pos = n.pos, k.end = n.end, k.hasTrailingComma = o, k.transformFlags = n.transformFlags, Y.attachNodeArrayDebugInfo(k), k;
            }
            let l = n.length, p7 = l >= 1 && l <= 4 ? n.slice() : n;
            return p7.pos = -1, p7.end = -1, p7.hasTrailingComma = !!o, p7.transformFlags = 0, E8(p7), Y.attachNodeArrayDebugInfo(p7), p7;
          }
          function oe(n) {
            return t.createBaseNode(n);
          }
          function Ve(n) {
            let o = oe(n);
            return o.symbol = void 0, o.localSymbol = void 0, o;
          }
          function pt(n, o) {
            return n !== o && (n.typeArguments = o.typeArguments), r(n, o);
          }
          function Gt(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, l = Ve(8);
            return l.text = typeof n == "number" ? n + "" : n, l.numericLiteralFlags = o, o & 384 && (l.transformFlags |= 1024), l;
          }
          function Nt(n) {
            let o = In(9);
            return o.text = typeof n == "string" ? n : yv(n) + "n", o.transformFlags |= 4, o;
          }
          function Xt(n, o) {
            let l = Ve(10);
            return l.text = n, l.singleQuote = o, l;
          }
          function er(n, o, l) {
            let p7 = Xt(n, o);
            return p7.hasExtendedUnicodeEscape = l, l && (p7.transformFlags |= 1024), p7;
          }
          function Tn(n) {
            let o = Xt(kf(n), void 0);
            return o.textSourceNode = n, o;
          }
          function Hr(n) {
            let o = In(13);
            return o.text = n, o;
          }
          function Gi(n, o) {
            switch (n) {
              case 8:
                return Gt(o, 0);
              case 9:
                return Nt(o);
              case 10:
                return er(o, void 0);
              case 11:
                return l_(o, false);
              case 12:
                return l_(o, true);
              case 13:
                return Hr(o);
              case 14:
                return Qs(n, o, void 0, 0);
            }
          }
          function pn(n) {
            let o = t.createBaseIdentifierNode(79);
            return o.escapedText = n, o.jsDoc = void 0, o.flowNode = void 0, o.symbol = void 0, o;
          }
          function fn(n, o, l, p7) {
            let k = pn(vi(n));
            return setIdentifierAutoGenerate(k, { flags: o, id: Bl, prefix: l, suffix: p7 }), Bl++, k;
          }
          function Ut(n, o, l) {
            o === void 0 && n && (o = _l(n)), o === 79 && (o = void 0);
            let p7 = pn(vi(n));
            return l && (p7.flags |= 128), p7.escapedText === "await" && (p7.transformFlags |= 67108864), p7.flags & 128 && (p7.transformFlags |= 1024), p7;
          }
          function kn(n, o, l, p7) {
            let k = 1;
            o && (k |= 8);
            let V = fn("", k, l, p7);
            return n && n(V), V;
          }
          function an(n) {
            let o = 2;
            return n && (o |= 8), fn("", o, void 0, void 0);
          }
          function mr(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, l = arguments.length > 2 ? arguments[2] : void 0, p7 = arguments.length > 3 ? arguments[3] : void 0;
            return Y.assert(!(o & 7), "Argument out of range: flags"), Y.assert((o & 48) !== 32, "GeneratedIdentifierFlags.FileLevel cannot be set without also setting GeneratedIdentifierFlags.Optimistic"), fn(n, 3 | o, l, p7);
          }
          function $i(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, l = arguments.length > 2 ? arguments[2] : void 0, p7 = arguments.length > 3 ? arguments[3] : void 0;
            Y.assert(!(o & 7), "Argument out of range: flags");
            let k = n ? js(n) ? bd(false, l, n, p7, qr) : `generated@${getNodeId(n)}` : "";
            (l || p7) && (o |= 16);
            let V = fn(k, 4 | o, l, p7);
            return V.original = n, V;
          }
          function dn(n) {
            let o = t.createBasePrivateIdentifierNode(80);
            return o.escapedText = n, o.transformFlags |= 16777216, o;
          }
          function Ur(n) {
            return Pn(n, "#") || Y.fail("First character of private identifier must be #: " + n), dn(vi(n));
          }
          function Gr(n, o, l, p7) {
            let k = dn(vi(n));
            return setIdentifierAutoGenerate(k, { flags: o, id: Bl, prefix: l, suffix: p7 }), Bl++, k;
          }
          function _r(n, o, l) {
            n && !Pn(n, "#") && Y.fail("First character of private identifier must be #: " + n);
            let p7 = 8 | (n ? 3 : 1);
            return Gr(n != null ? n : "", p7, o, l);
          }
          function Sn(n, o, l) {
            let p7 = js(n) ? bd(true, o, n, l, qr) : `#generated@${getNodeId(n)}`, V = Gr(p7, 4 | (o || l ? 16 : 0), o, l);
            return V.original = n, V;
          }
          function In(n) {
            return t.createBaseTokenNode(n);
          }
          function pr(n) {
            Y.assert(n >= 0 && n <= 162, "Invalid token"), Y.assert(n <= 14 || n >= 17, "Invalid token. Use 'createTemplateLiteralLikeNode' to create template literals."), Y.assert(n <= 8 || n >= 14, "Invalid token. Use 'createLiteralLikeNode' to create literals."), Y.assert(n !== 79, "Invalid token. Use 'createIdentifier' to create identifiers");
            let o = In(n), l = 0;
            switch (n) {
              case 132:
                l = 384;
                break;
              case 123:
              case 121:
              case 122:
              case 146:
              case 126:
              case 136:
              case 85:
              case 131:
              case 148:
              case 160:
              case 144:
              case 149:
              case 101:
              case 145:
              case 161:
              case 152:
              case 134:
              case 153:
              case 114:
              case 157:
              case 155:
                l = 1;
                break;
              case 106:
                l = 134218752, o.flowNode = void 0;
                break;
              case 124:
                l = 1024;
                break;
              case 127:
                l = 16777216;
                break;
              case 108:
                l = 16384, o.flowNode = void 0;
                break;
            }
            return l && (o.transformFlags |= l), o;
          }
          function Zt() {
            return pr(106);
          }
          function Or() {
            return pr(108);
          }
          function Nn() {
            return pr(104);
          }
          function ar() {
            return pr(110);
          }
          function oi() {
            return pr(95);
          }
          function cr(n) {
            return pr(n);
          }
          function $r(n) {
            let o = [];
            return n & 1 && o.push(cr(93)), n & 2 && o.push(cr(136)), n & 1024 && o.push(cr(88)), n & 2048 && o.push(cr(85)), n & 4 && o.push(cr(123)), n & 8 && o.push(cr(121)), n & 16 && o.push(cr(122)), n & 256 && o.push(cr(126)), n & 32 && o.push(cr(124)), n & 16384 && o.push(cr(161)), n & 64 && o.push(cr(146)), n & 128 && o.push(cr(127)), n & 512 && o.push(cr(132)), n & 32768 && o.push(cr(101)), n & 65536 && o.push(cr(145)), o.length ? o : void 0;
          }
          function hr(n, o) {
            let l = oe(163);
            return l.left = n, l.right = Qt(o), l.transformFlags |= ye(l.left) | ec(l.right), l.flowNode = void 0, l;
          }
          function On(n, o, l) {
            return n.left !== o || n.right !== l ? r(hr(o, l), n) : n;
          }
          function nr(n) {
            let o = oe(164);
            return o.expression = s().parenthesizeExpressionOfComputedPropertyName(n), o.transformFlags |= ye(o.expression) | 1024 | 131072, o;
          }
          function br(n, o) {
            return n.expression !== o ? r(nr(o), n) : n;
          }
          function Kr(n, o, l, p7) {
            let k = Ve(165);
            return k.modifiers = xt(n), k.name = Qt(o), k.constraint = l, k.default = p7, k.transformFlags = 1, k.expression = void 0, k.jsDoc = void 0, k;
          }
          function wa(n, o, l, p7, k) {
            return n.modifiers !== o || n.name !== l || n.constraint !== p7 || n.default !== k ? r(Kr(o, l, p7, k), n) : n;
          }
          function $n(n, o, l, p7, k, V) {
            var we, et;
            let ht = Ve(166);
            return ht.modifiers = xt(n), ht.dotDotDotToken = o, ht.name = Qt(l), ht.questionToken = p7, ht.type = k, ht.initializer = Wa(V), Mf(ht.name) ? ht.transformFlags = 1 : ht.transformFlags = gt(ht.modifiers) | ye(ht.dotDotDotToken) | ai(ht.name) | ye(ht.questionToken) | ye(ht.initializer) | (((we = ht.questionToken) != null ? we : ht.type) ? 1 : 0) | (((et = ht.dotDotDotToken) != null ? et : ht.initializer) ? 1024 : 0) | (Vn(ht.modifiers) & 16476 ? 8192 : 0), ht.jsDoc = void 0, ht;
          }
          function Ki(n, o, l, p7, k, V, we) {
            return n.modifiers !== o || n.dotDotDotToken !== l || n.name !== p7 || n.questionToken !== k || n.type !== V || n.initializer !== we ? r($n(o, l, p7, k, V, we), n) : n;
          }
          function Mn(n) {
            let o = oe(167);
            return o.expression = s().parenthesizeLeftSideOfAccess(n, false), o.transformFlags |= ye(o.expression) | 1 | 8192 | 33554432, o;
          }
          function _i(n, o) {
            return n.expression !== o ? r(Mn(o), n) : n;
          }
          function Ca(n, o, l, p7) {
            let k = Ve(168);
            return k.modifiers = xt(n), k.name = Qt(o), k.type = p7, k.questionToken = l, k.transformFlags = 1, k.initializer = void 0, k.jsDoc = void 0, k;
          }
          function St(n, o, l, p7, k) {
            return n.modifiers !== o || n.name !== l || n.questionToken !== p7 || n.type !== k ? ue(Ca(o, l, p7, k), n) : n;
          }
          function ue(n, o) {
            return n !== o && (n.initializer = o.initializer), r(n, o);
          }
          function He(n, o, l, p7, k) {
            let V = Ve(169);
            V.modifiers = xt(n), V.name = Qt(o), V.questionToken = l && ql(l) ? l : void 0, V.exclamationToken = l && rd(l) ? l : void 0, V.type = p7, V.initializer = Wa(k);
            let we = V.flags & 16777216 || Vn(V.modifiers) & 2;
            return V.transformFlags = gt(V.modifiers) | ai(V.name) | ye(V.initializer) | (we || V.questionToken || V.exclamationToken || V.type ? 1 : 0) | (Ws(V.name) || Vn(V.modifiers) & 32 && V.initializer ? 8192 : 0) | 16777216, V.jsDoc = void 0, V;
          }
          function _t(n, o, l, p7, k, V) {
            return n.modifiers !== o || n.name !== l || n.questionToken !== (p7 !== void 0 && ql(p7) ? p7 : void 0) || n.exclamationToken !== (p7 !== void 0 && rd(p7) ? p7 : void 0) || n.type !== k || n.initializer !== V ? r(He(o, l, p7, k, V), n) : n;
          }
          function ft(n, o, l, p7, k, V) {
            let we = Ve(170);
            return we.modifiers = xt(n), we.name = Qt(o), we.questionToken = l, we.typeParameters = xt(p7), we.parameters = xt(k), we.type = V, we.transformFlags = 1, we.jsDoc = void 0, we.locals = void 0, we.nextContainer = void 0, we.typeArguments = void 0, we;
          }
          function Kt(n, o, l, p7, k, V, we) {
            return n.modifiers !== o || n.name !== l || n.questionToken !== p7 || n.typeParameters !== k || n.parameters !== V || n.type !== we ? pt(ft(o, l, p7, k, V, we), n) : n;
          }
          function zt(n, o, l, p7, k, V, we, et) {
            let ht = Ve(171);
            if (ht.modifiers = xt(n), ht.asteriskToken = o, ht.name = Qt(l), ht.questionToken = p7, ht.exclamationToken = void 0, ht.typeParameters = xt(k), ht.parameters = Ne(V), ht.type = we, ht.body = et, !ht.body)
              ht.transformFlags = 1;
            else {
              let hn = Vn(ht.modifiers) & 512, Ni = !!ht.asteriskToken, ia = hn && Ni;
              ht.transformFlags = gt(ht.modifiers) | ye(ht.asteriskToken) | ai(ht.name) | ye(ht.questionToken) | gt(ht.typeParameters) | gt(ht.parameters) | ye(ht.type) | ye(ht.body) & -67108865 | (ia ? 128 : hn ? 256 : Ni ? 2048 : 0) | (ht.questionToken || ht.typeParameters || ht.type ? 1 : 0) | 1024;
            }
            return ht.typeArguments = void 0, ht.jsDoc = void 0, ht.locals = void 0, ht.nextContainer = void 0, ht.flowNode = void 0, ht.endFlowNode = void 0, ht.returnFlowNode = void 0, ht;
          }
          function xe(n, o, l, p7, k, V, we, et, ht) {
            return n.modifiers !== o || n.asteriskToken !== l || n.name !== p7 || n.questionToken !== k || n.typeParameters !== V || n.parameters !== we || n.type !== et || n.body !== ht ? Le(zt(o, l, p7, k, V, we, et, ht), n) : n;
          }
          function Le(n, o) {
            return n !== o && (n.exclamationToken = o.exclamationToken), r(n, o);
          }
          function Re(n) {
            let o = Ve(172);
            return o.body = n, o.transformFlags = ye(n) | 16777216, o.modifiers = void 0, o.jsDoc = void 0, o.locals = void 0, o.nextContainer = void 0, o.endFlowNode = void 0, o.returnFlowNode = void 0, o;
          }
          function ot(n, o) {
            return n.body !== o ? Ct(Re(o), n) : n;
          }
          function Ct(n, o) {
            return n !== o && (n.modifiers = o.modifiers), r(n, o);
          }
          function Mt(n, o, l) {
            let p7 = Ve(173);
            return p7.modifiers = xt(n), p7.parameters = Ne(o), p7.body = l, p7.transformFlags = gt(p7.modifiers) | gt(p7.parameters) | ye(p7.body) & -67108865 | 1024, p7.typeParameters = void 0, p7.type = void 0, p7.typeArguments = void 0, p7.jsDoc = void 0, p7.locals = void 0, p7.nextContainer = void 0, p7.endFlowNode = void 0, p7.returnFlowNode = void 0, p7;
          }
          function It(n, o, l, p7) {
            return n.modifiers !== o || n.parameters !== l || n.body !== p7 ? Mr(Mt(o, l, p7), n) : n;
          }
          function Mr(n, o) {
            return n !== o && (n.typeParameters = o.typeParameters, n.type = o.type), pt(n, o);
          }
          function gr(n, o, l, p7, k) {
            let V = Ve(174);
            return V.modifiers = xt(n), V.name = Qt(o), V.parameters = Ne(l), V.type = p7, V.body = k, V.body ? V.transformFlags = gt(V.modifiers) | ai(V.name) | gt(V.parameters) | ye(V.type) | ye(V.body) & -67108865 | (V.type ? 1 : 0) : V.transformFlags = 1, V.typeArguments = void 0, V.typeParameters = void 0, V.jsDoc = void 0, V.locals = void 0, V.nextContainer = void 0, V.flowNode = void 0, V.endFlowNode = void 0, V.returnFlowNode = void 0, V;
          }
          function Ln(n, o, l, p7, k, V) {
            return n.modifiers !== o || n.name !== l || n.parameters !== p7 || n.type !== k || n.body !== V ? ys(gr(o, l, p7, k, V), n) : n;
          }
          function ys(n, o) {
            return n !== o && (n.typeParameters = o.typeParameters), pt(n, o);
          }
          function ci(n, o, l, p7) {
            let k = Ve(175);
            return k.modifiers = xt(n), k.name = Qt(o), k.parameters = Ne(l), k.body = p7, k.body ? k.transformFlags = gt(k.modifiers) | ai(k.name) | gt(k.parameters) | ye(k.body) & -67108865 | (k.type ? 1 : 0) : k.transformFlags = 1, k.typeArguments = void 0, k.typeParameters = void 0, k.type = void 0, k.jsDoc = void 0, k.locals = void 0, k.nextContainer = void 0, k.flowNode = void 0, k.endFlowNode = void 0, k.returnFlowNode = void 0, k;
          }
          function Xi(n, o, l, p7, k) {
            return n.modifiers !== o || n.name !== l || n.parameters !== p7 || n.body !== k ? Aa(ci(o, l, p7, k), n) : n;
          }
          function Aa(n, o) {
            return n !== o && (n.typeParameters = o.typeParameters, n.type = o.type), pt(n, o);
          }
          function vs(n, o, l) {
            let p7 = Ve(176);
            return p7.typeParameters = xt(n), p7.parameters = xt(o), p7.type = l, p7.transformFlags = 1, p7.jsDoc = void 0, p7.locals = void 0, p7.nextContainer = void 0, p7.typeArguments = void 0, p7;
          }
          function $s(n, o, l, p7) {
            return n.typeParameters !== o || n.parameters !== l || n.type !== p7 ? pt(vs(o, l, p7), n) : n;
          }
          function li(n, o, l) {
            let p7 = Ve(177);
            return p7.typeParameters = xt(n), p7.parameters = xt(o), p7.type = l, p7.transformFlags = 1, p7.jsDoc = void 0, p7.locals = void 0, p7.nextContainer = void 0, p7.typeArguments = void 0, p7;
          }
          function Yi(n, o, l, p7) {
            return n.typeParameters !== o || n.parameters !== l || n.type !== p7 ? pt(li(o, l, p7), n) : n;
          }
          function Qi(n, o, l) {
            let p7 = Ve(178);
            return p7.modifiers = xt(n), p7.parameters = xt(o), p7.type = l, p7.transformFlags = 1, p7.jsDoc = void 0, p7.locals = void 0, p7.nextContainer = void 0, p7.typeArguments = void 0, p7;
          }
          function bs(n, o, l, p7) {
            return n.parameters !== l || n.type !== p7 || n.modifiers !== o ? pt(Qi(o, l, p7), n) : n;
          }
          function Ai(n, o) {
            let l = oe(201);
            return l.type = n, l.literal = o, l.transformFlags = 1, l;
          }
          function xn(n, o, l) {
            return n.type !== o || n.literal !== l ? r(Ai(o, l), n) : n;
          }
          function Dt(n) {
            return pr(n);
          }
          function Pi(n, o, l) {
            let p7 = oe(179);
            return p7.assertsModifier = n, p7.parameterName = Qt(o), p7.type = l, p7.transformFlags = 1, p7;
          }
          function Z(n, o, l, p7) {
            return n.assertsModifier !== o || n.parameterName !== l || n.type !== p7 ? r(Pi(o, l, p7), n) : n;
          }
          function ie(n, o) {
            let l = oe(180);
            return l.typeName = Qt(n), l.typeArguments = o && s().parenthesizeTypeArguments(Ne(o)), l.transformFlags = 1, l;
          }
          function U(n, o, l) {
            return n.typeName !== o || n.typeArguments !== l ? r(ie(o, l), n) : n;
          }
          function L(n, o, l) {
            let p7 = Ve(181);
            return p7.typeParameters = xt(n), p7.parameters = xt(o), p7.type = l, p7.transformFlags = 1, p7.modifiers = void 0, p7.jsDoc = void 0, p7.locals = void 0, p7.nextContainer = void 0, p7.typeArguments = void 0, p7;
          }
          function fe(n, o, l, p7) {
            return n.typeParameters !== o || n.parameters !== l || n.type !== p7 ? T(L(o, l, p7), n) : n;
          }
          function T(n, o) {
            return n !== o && (n.modifiers = o.modifiers), pt(n, o);
          }
          function it() {
            return arguments.length === 4 ? mt(...arguments) : arguments.length === 3 ? _e(...arguments) : Y.fail("Incorrect number of arguments specified.");
          }
          function mt(n, o, l, p7) {
            let k = Ve(182);
            return k.modifiers = xt(n), k.typeParameters = xt(o), k.parameters = xt(l), k.type = p7, k.transformFlags = 1, k.jsDoc = void 0, k.locals = void 0, k.nextContainer = void 0, k.typeArguments = void 0, k;
          }
          function _e(n, o, l) {
            return mt(void 0, n, o, l);
          }
          function Ge() {
            return arguments.length === 5 ? bt(...arguments) : arguments.length === 4 ? jt(...arguments) : Y.fail("Incorrect number of arguments specified.");
          }
          function bt(n, o, l, p7, k) {
            return n.modifiers !== o || n.typeParameters !== l || n.parameters !== p7 || n.type !== k ? pt(it(o, l, p7, k), n) : n;
          }
          function jt(n, o, l, p7) {
            return bt(n, n.modifiers, o, l, p7);
          }
          function Yt(n, o) {
            let l = oe(183);
            return l.exprName = n, l.typeArguments = o && s().parenthesizeTypeArguments(o), l.transformFlags = 1, l;
          }
          function $t(n, o, l) {
            return n.exprName !== o || n.typeArguments !== l ? r(Yt(o, l), n) : n;
          }
          function Wt(n) {
            let o = Ve(184);
            return o.members = Ne(n), o.transformFlags = 1, o;
          }
          function Xr(n, o) {
            return n.members !== o ? r(Wt(o), n) : n;
          }
          function Dr(n) {
            let o = oe(185);
            return o.elementType = s().parenthesizeNonArrayTypeOfPostfixType(n), o.transformFlags = 1, o;
          }
          function Lr(n, o) {
            return n.elementType !== o ? r(Dr(o), n) : n;
          }
          function yr(n) {
            let o = oe(186);
            return o.elements = Ne(s().parenthesizeElementTypesOfTupleType(n)), o.transformFlags = 1, o;
          }
          function Rn(n, o) {
            return n.elements !== o ? r(yr(o), n) : n;
          }
          function wt(n, o, l, p7) {
            let k = Ve(199);
            return k.dotDotDotToken = n, k.name = o, k.questionToken = l, k.type = p7, k.transformFlags = 1, k.jsDoc = void 0, k;
          }
          function Tr(n, o, l, p7, k) {
            return n.dotDotDotToken !== o || n.name !== l || n.questionToken !== p7 || n.type !== k ? r(wt(o, l, p7, k), n) : n;
          }
          function Tt(n) {
            let o = oe(187);
            return o.type = s().parenthesizeTypeOfOptionalType(n), o.transformFlags = 1, o;
          }
          function kt(n, o) {
            return n.type !== o ? r(Tt(o), n) : n;
          }
          function de(n) {
            let o = oe(188);
            return o.type = n, o.transformFlags = 1, o;
          }
          function jn(n, o) {
            return n.type !== o ? r(de(o), n) : n;
          }
          function Zi(n, o, l) {
            let p7 = oe(n);
            return p7.types = Ye.createNodeArray(l(o)), p7.transformFlags = 1, p7;
          }
          function Pa(n, o, l) {
            return n.types !== o ? r(Zi(n.kind, o, l), n) : n;
          }
          function e_(n) {
            return Zi(189, n, s().parenthesizeConstituentTypesOfUnionType);
          }
          function mc(n, o) {
            return Pa(n, o, s().parenthesizeConstituentTypesOfUnionType);
          }
          function Da(n) {
            return Zi(190, n, s().parenthesizeConstituentTypesOfIntersectionType);
          }
          function Ts(n, o) {
            return Pa(n, o, s().parenthesizeConstituentTypesOfIntersectionType);
          }
          function Ot(n, o, l, p7) {
            let k = oe(191);
            return k.checkType = s().parenthesizeCheckTypeOfConditionalType(n), k.extendsType = s().parenthesizeExtendsTypeOfConditionalType(o), k.trueType = l, k.falseType = p7, k.transformFlags = 1, k.locals = void 0, k.nextContainer = void 0, k;
          }
          function dr(n, o, l, p7, k) {
            return n.checkType !== o || n.extendsType !== l || n.trueType !== p7 || n.falseType !== k ? r(Ot(o, l, p7, k), n) : n;
          }
          function Dd(n) {
            let o = oe(192);
            return o.typeParameter = n, o.transformFlags = 1, o;
          }
          function ea(n, o) {
            return n.typeParameter !== o ? r(Dd(o), n) : n;
          }
          function kd(n, o) {
            let l = oe(200);
            return l.head = n, l.templateSpans = Ne(o), l.transformFlags = 1, l;
          }
          function sn(n, o, l) {
            return n.head !== o || n.templateSpans !== l ? r(kd(o, l), n) : n;
          }
          function Id(n, o, l, p7) {
            let k = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false, V = oe(202);
            return V.argument = n, V.assertions = o, V.qualifier = l, V.typeArguments = p7 && s().parenthesizeTypeArguments(p7), V.isTypeOf = k, V.transformFlags = 1, V;
          }
          function ka(n, o, l, p7, k) {
            let V = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : n.isTypeOf;
            return n.argument !== o || n.assertions !== l || n.qualifier !== p7 || n.typeArguments !== k || n.isTypeOf !== V ? r(Id(o, l, p7, k, V), n) : n;
          }
          function t_(n) {
            let o = oe(193);
            return o.type = n, o.transformFlags = 1, o;
          }
          function En(n, o) {
            return n.type !== o ? r(t_(o), n) : n;
          }
          function Er() {
            let n = oe(194);
            return n.transformFlags = 1, n;
          }
          function Q(n, o) {
            let l = oe(195);
            return l.operator = n, l.type = n === 146 ? s().parenthesizeOperandOfReadonlyTypeOperator(o) : s().parenthesizeOperandOfTypeOperator(o), l.transformFlags = 1, l;
          }
          function Jn(n, o) {
            return n.type !== o ? r(Q(n.operator, o), n) : n;
          }
          function Ia(n, o) {
            let l = oe(196);
            return l.objectType = s().parenthesizeNonArrayTypeOfPostfixType(n), l.indexType = o, l.transformFlags = 1, l;
          }
          function Ss(n, o, l) {
            return n.objectType !== o || n.indexType !== l ? r(Ia(o, l), n) : n;
          }
          function hc(n, o, l, p7, k, V) {
            let we = Ve(197);
            return we.readonlyToken = n, we.typeParameter = o, we.nameType = l, we.questionToken = p7, we.type = k, we.members = V && Ne(V), we.transformFlags = 1, we.locals = void 0, we.nextContainer = void 0, we;
          }
          function wr(n, o, l, p7, k, V, we) {
            return n.readonlyToken !== o || n.typeParameter !== l || n.nameType !== p7 || n.questionToken !== k || n.type !== V || n.members !== we ? r(hc(o, l, p7, k, V, we), n) : n;
          }
          function zr(n) {
            let o = oe(198);
            return o.literal = n, o.transformFlags = 1, o;
          }
          function xs(n, o) {
            return n.literal !== o ? r(zr(o), n) : n;
          }
          function Nd(n) {
            let o = oe(203);
            return o.elements = Ne(n), o.transformFlags |= gt(o.elements) | 1024 | 524288, o.transformFlags & 32768 && (o.transformFlags |= 65664), o;
          }
          function R2(n, o) {
            return n.elements !== o ? r(Nd(o), n) : n;
          }
          function Es(n) {
            let o = oe(204);
            return o.elements = Ne(n), o.transformFlags |= gt(o.elements) | 1024 | 524288, o;
          }
          function j2(n, o) {
            return n.elements !== o ? r(Es(o), n) : n;
          }
          function gc(n, o, l, p7) {
            let k = Ve(205);
            return k.dotDotDotToken = n, k.propertyName = Qt(o), k.name = Qt(l), k.initializer = Wa(p7), k.transformFlags |= ye(k.dotDotDotToken) | ai(k.propertyName) | ai(k.name) | ye(k.initializer) | (k.dotDotDotToken ? 32768 : 0) | 1024, k.flowNode = void 0, k;
          }
          function Ks(n, o, l, p7, k) {
            return n.propertyName !== l || n.dotDotDotToken !== o || n.name !== p7 || n.initializer !== k ? r(gc(o, l, p7, k), n) : n;
          }
          function uu(n, o) {
            let l = oe(206), p7 = n && Cn(n), k = Ne(n, p7 && cd(p7) ? true : void 0);
            return l.elements = s().parenthesizeExpressionsOfCommaDelimitedList(k), l.multiLine = o, l.transformFlags |= gt(l.elements), l;
          }
          function Od(n, o) {
            return n.elements !== o ? r(uu(o, n.multiLine), n) : n;
          }
          function r_(n, o) {
            let l = Ve(207);
            return l.properties = Ne(n), l.multiLine = o, l.transformFlags |= gt(l.properties), l.jsDoc = void 0, l;
          }
          function J2(n, o) {
            return n.properties !== o ? r(r_(o, n.multiLine), n) : n;
          }
          function Md(n, o, l) {
            let p7 = Ve(208);
            return p7.expression = n, p7.questionDotToken = o, p7.name = l, p7.transformFlags = ye(p7.expression) | ye(p7.questionDotToken) | (yt(p7.name) ? ec(p7.name) : ye(p7.name) | 536870912), p7.jsDoc = void 0, p7.flowNode = void 0, p7;
          }
          function ta(n, o) {
            let l = Md(s().parenthesizeLeftSideOfAccess(n, false), void 0, Qt(o));
            return nd(n) && (l.transformFlags |= 384), l;
          }
          function Ld(n, o, l) {
            return LS(n) ? Rd(n, o, n.questionDotToken, ti(l, yt)) : n.expression !== o || n.name !== l ? r(ta(o, l), n) : n;
          }
          function Xs(n, o, l) {
            let p7 = Md(s().parenthesizeLeftSideOfAccess(n, true), o, Qt(l));
            return p7.flags |= 32, p7.transformFlags |= 32, p7;
          }
          function Rd(n, o, l, p7) {
            return Y.assert(!!(n.flags & 32), "Cannot update a PropertyAccessExpression using updatePropertyAccessChain. Use updatePropertyAccess instead."), n.expression !== o || n.questionDotToken !== l || n.name !== p7 ? r(Xs(o, l, p7), n) : n;
          }
          function yc(n, o, l) {
            let p7 = Ve(209);
            return p7.expression = n, p7.questionDotToken = o, p7.argumentExpression = l, p7.transformFlags |= ye(p7.expression) | ye(p7.questionDotToken) | ye(p7.argumentExpression), p7.jsDoc = void 0, p7.flowNode = void 0, p7;
          }
          function pu(n, o) {
            let l = yc(s().parenthesizeLeftSideOfAccess(n, false), void 0, za(o));
            return nd(n) && (l.transformFlags |= 384), l;
          }
          function F2(n, o, l) {
            return RS(n) ? jd(n, o, n.questionDotToken, l) : n.expression !== o || n.argumentExpression !== l ? r(pu(o, l), n) : n;
          }
          function fu(n, o, l) {
            let p7 = yc(s().parenthesizeLeftSideOfAccess(n, true), o, za(l));
            return p7.flags |= 32, p7.transformFlags |= 32, p7;
          }
          function jd(n, o, l, p7) {
            return Y.assert(!!(n.flags & 32), "Cannot update a ElementAccessExpression using updateElementAccessChain. Use updateElementAccess instead."), n.expression !== o || n.questionDotToken !== l || n.argumentExpression !== p7 ? r(fu(o, l, p7), n) : n;
          }
          function Jd(n, o, l, p7) {
            let k = Ve(210);
            return k.expression = n, k.questionDotToken = o, k.typeArguments = l, k.arguments = p7, k.transformFlags |= ye(k.expression) | ye(k.questionDotToken) | gt(k.typeArguments) | gt(k.arguments), k.typeArguments && (k.transformFlags |= 1), Sf(k.expression) && (k.transformFlags |= 16384), k;
          }
          function Na(n, o, l) {
            let p7 = Jd(s().parenthesizeLeftSideOfAccess(n, false), void 0, xt(o), s().parenthesizeExpressionsOfCommaDelimitedList(Ne(l)));
            return M8(p7.expression) && (p7.transformFlags |= 8388608), p7;
          }
          function B2(n, o, l, p7) {
            return Cy(n) ? Kn(n, o, n.questionDotToken, l, p7) : n.expression !== o || n.typeArguments !== l || n.arguments !== p7 ? r(Na(o, l, p7), n) : n;
          }
          function du(n, o, l, p7) {
            let k = Jd(s().parenthesizeLeftSideOfAccess(n, true), o, xt(l), s().parenthesizeExpressionsOfCommaDelimitedList(Ne(p7)));
            return k.flags |= 32, k.transformFlags |= 32, k;
          }
          function Kn(n, o, l, p7, k) {
            return Y.assert(!!(n.flags & 32), "Cannot update a CallExpression using updateCallChain. Use updateCall instead."), n.expression !== o || n.questionDotToken !== l || n.typeArguments !== p7 || n.arguments !== k ? r(du(o, l, p7, k), n) : n;
          }
          function vc(n, o, l) {
            let p7 = Ve(211);
            return p7.expression = s().parenthesizeExpressionOfNew(n), p7.typeArguments = xt(o), p7.arguments = l ? s().parenthesizeExpressionsOfCommaDelimitedList(l) : void 0, p7.transformFlags |= ye(p7.expression) | gt(p7.typeArguments) | gt(p7.arguments) | 32, p7.typeArguments && (p7.transformFlags |= 1), p7;
          }
          function mu(n, o, l, p7) {
            return n.expression !== o || n.typeArguments !== l || n.arguments !== p7 ? r(vc(o, l, p7), n) : n;
          }
          function hu(n, o, l) {
            let p7 = oe(212);
            return p7.tag = s().parenthesizeLeftSideOfAccess(n, false), p7.typeArguments = xt(o), p7.template = l, p7.transformFlags |= ye(p7.tag) | gt(p7.typeArguments) | ye(p7.template) | 1024, p7.typeArguments && (p7.transformFlags |= 1), w4(p7.template) && (p7.transformFlags |= 128), p7;
          }
          function q2(n, o, l, p7) {
            return n.tag !== o || n.typeArguments !== l || n.template !== p7 ? r(hu(o, l, p7), n) : n;
          }
          function Fd(n, o) {
            let l = oe(213);
            return l.expression = s().parenthesizeOperandOfPrefixUnary(o), l.type = n, l.transformFlags |= ye(l.expression) | ye(l.type) | 1, l;
          }
          function Bd(n, o, l) {
            return n.type !== o || n.expression !== l ? r(Fd(o, l), n) : n;
          }
          function gu(n) {
            let o = oe(214);
            return o.expression = n, o.transformFlags = ye(o.expression), o.jsDoc = void 0, o;
          }
          function qd(n, o) {
            return n.expression !== o ? r(gu(o), n) : n;
          }
          function yu(n, o, l, p7, k, V, we) {
            let et = Ve(215);
            et.modifiers = xt(n), et.asteriskToken = o, et.name = Qt(l), et.typeParameters = xt(p7), et.parameters = Ne(k), et.type = V, et.body = we;
            let ht = Vn(et.modifiers) & 512, hn = !!et.asteriskToken, Ni = ht && hn;
            return et.transformFlags = gt(et.modifiers) | ye(et.asteriskToken) | ai(et.name) | gt(et.typeParameters) | gt(et.parameters) | ye(et.type) | ye(et.body) & -67108865 | (Ni ? 128 : ht ? 256 : hn ? 2048 : 0) | (et.typeParameters || et.type ? 1 : 0) | 4194304, et.typeArguments = void 0, et.jsDoc = void 0, et.locals = void 0, et.nextContainer = void 0, et.flowNode = void 0, et.endFlowNode = void 0, et.returnFlowNode = void 0, et;
          }
          function Ud(n, o, l, p7, k, V, we, et) {
            return n.name !== p7 || n.modifiers !== o || n.asteriskToken !== l || n.typeParameters !== k || n.parameters !== V || n.type !== we || n.body !== et ? pt(yu(o, l, p7, k, V, we, et), n) : n;
          }
          function vu(n, o, l, p7, k, V) {
            let we = Ve(216);
            we.modifiers = xt(n), we.typeParameters = xt(o), we.parameters = Ne(l), we.type = p7, we.equalsGreaterThanToken = k != null ? k : pr(38), we.body = s().parenthesizeConciseBodyOfArrowFunction(V);
            let et = Vn(we.modifiers) & 512;
            return we.transformFlags = gt(we.modifiers) | gt(we.typeParameters) | gt(we.parameters) | ye(we.type) | ye(we.equalsGreaterThanToken) | ye(we.body) & -67108865 | (we.typeParameters || we.type ? 1 : 0) | (et ? 16640 : 0) | 1024, we.typeArguments = void 0, we.jsDoc = void 0, we.locals = void 0, we.nextContainer = void 0, we.flowNode = void 0, we.endFlowNode = void 0, we.returnFlowNode = void 0, we;
          }
          function zd(n, o, l, p7, k, V, we) {
            return n.modifiers !== o || n.typeParameters !== l || n.parameters !== p7 || n.type !== k || n.equalsGreaterThanToken !== V || n.body !== we ? pt(vu(o, l, p7, k, V, we), n) : n;
          }
          function bu(n) {
            let o = oe(217);
            return o.expression = s().parenthesizeOperandOfPrefixUnary(n), o.transformFlags |= ye(o.expression), o;
          }
          function U2(n, o) {
            return n.expression !== o ? r(bu(o), n) : n;
          }
          function mn(n) {
            let o = oe(218);
            return o.expression = s().parenthesizeOperandOfPrefixUnary(n), o.transformFlags |= ye(o.expression), o;
          }
          function z2(n, o) {
            return n.expression !== o ? r(mn(o), n) : n;
          }
          function ui(n) {
            let o = oe(219);
            return o.expression = s().parenthesizeOperandOfPrefixUnary(n), o.transformFlags |= ye(o.expression), o;
          }
          function W2(n, o) {
            return n.expression !== o ? r(ui(o), n) : n;
          }
          function Oa(n) {
            let o = oe(220);
            return o.expression = s().parenthesizeOperandOfPrefixUnary(n), o.transformFlags |= ye(o.expression) | 256 | 128 | 2097152, o;
          }
          function Ys(n, o) {
            return n.expression !== o ? r(Oa(o), n) : n;
          }
          function Tu(n, o) {
            let l = oe(221);
            return l.operator = n, l.operand = s().parenthesizeOperandOfPrefixUnary(o), l.transformFlags |= ye(l.operand), (n === 45 || n === 46) && yt(l.operand) && !cs(l.operand) && !E2(l.operand) && (l.transformFlags |= 268435456), l;
          }
          function bc(n, o) {
            return n.operand !== o ? r(Tu(n.operator, o), n) : n;
          }
          function Su(n, o) {
            let l = oe(222);
            return l.operator = o, l.operand = s().parenthesizeOperandOfPostfixUnary(n), l.transformFlags |= ye(l.operand), yt(l.operand) && !cs(l.operand) && !E2(l.operand) && (l.transformFlags |= 268435456), l;
          }
          function Wd(n, o) {
            return n.operand !== o ? r(Su(o, n.operator), n) : n;
          }
          function xu(n, o, l) {
            let p7 = Ve(223), k = c6(o), V = k.kind;
            return p7.left = s().parenthesizeLeftSideOfBinary(V, n), p7.operatorToken = k, p7.right = s().parenthesizeRightSideOfBinary(V, p7.left, l), p7.transformFlags |= ye(p7.left) | ye(p7.operatorToken) | ye(p7.right), V === 60 ? p7.transformFlags |= 32 : V === 63 ? Hs(p7.left) ? p7.transformFlags |= 5248 | Vd(p7.left) : Yl(p7.left) && (p7.transformFlags |= 5120 | Vd(p7.left)) : V === 42 || V === 67 ? p7.transformFlags |= 512 : jf(V) && (p7.transformFlags |= 16), V === 101 && vn(p7.left) && (p7.transformFlags |= 536870912), p7.jsDoc = void 0, p7;
          }
          function Vd(n) {
            return A2(n) ? 65536 : 0;
          }
          function V2(n, o, l, p7) {
            return n.left !== o || n.operatorToken !== l || n.right !== p7 ? r(xu(o, l, p7), n) : n;
          }
          function Eu(n, o, l, p7, k) {
            let V = oe(224);
            return V.condition = s().parenthesizeConditionOfConditionalExpression(n), V.questionToken = o != null ? o : pr(57), V.whenTrue = s().parenthesizeBranchOfConditionalExpression(l), V.colonToken = p7 != null ? p7 : pr(58), V.whenFalse = s().parenthesizeBranchOfConditionalExpression(k), V.transformFlags |= ye(V.condition) | ye(V.questionToken) | ye(V.whenTrue) | ye(V.colonToken) | ye(V.whenFalse), V;
          }
          function H2(n, o, l, p7, k, V) {
            return n.condition !== o || n.questionToken !== l || n.whenTrue !== p7 || n.colonToken !== k || n.whenFalse !== V ? r(Eu(o, l, p7, k, V), n) : n;
          }
          function Di(n, o) {
            let l = oe(225);
            return l.head = n, l.templateSpans = Ne(o), l.transformFlags |= ye(l.head) | gt(l.templateSpans) | 1024, l;
          }
          function Hd(n, o, l) {
            return n.head !== o || n.templateSpans !== l ? r(Di(o, l), n) : n;
          }
          function Tc(n, o, l) {
            let p7 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
            Y.assert(!(p7 & -2049), "Unsupported template flags.");
            let k;
            if (l !== void 0 && l !== o && (k = BL(n, l), typeof k == "object"))
              return Y.fail("Invalid raw text");
            if (o === void 0) {
              if (k === void 0)
                return Y.fail("Arguments 'text' and 'rawText' may not both be undefined.");
              o = k;
            } else
              k !== void 0 && Y.assert(o === k, "Expected argument 'text' to be the normalized (i.e. 'cooked') version of argument 'rawText'.");
            return o;
          }
          function Gd(n) {
            let o = 1024;
            return n && (o |= 128), o;
          }
          function n_(n, o, l, p7) {
            let k = In(n);
            return k.text = o, k.rawText = l, k.templateFlags = p7 & 2048, k.transformFlags = Gd(k.templateFlags), k;
          }
          function wu(n, o, l, p7) {
            let k = Ve(n);
            return k.text = o, k.rawText = l, k.templateFlags = p7 & 2048, k.transformFlags = Gd(k.templateFlags), k;
          }
          function Qs(n, o, l, p7) {
            return n === 14 ? wu(n, o, l, p7) : n_(n, o, l, p7);
          }
          function Sc(n, o, l) {
            return n = Tc(15, n, o, l), Qs(15, n, o, l);
          }
          function Cu(n, o, l) {
            return n = Tc(15, n, o, l), Qs(16, n, o, l);
          }
          function G2(n, o, l) {
            return n = Tc(15, n, o, l), Qs(17, n, o, l);
          }
          function $d(n, o, l) {
            return n = Tc(15, n, o, l), wu(14, n, o, l);
          }
          function Kd(n, o) {
            Y.assert(!n || !!o, "A `YieldExpression` with an asteriskToken must have an expression.");
            let l = oe(226);
            return l.expression = o && s().parenthesizeExpressionForDisallowedComma(o), l.asteriskToken = n, l.transformFlags |= ye(l.expression) | ye(l.asteriskToken) | 1024 | 128 | 1048576, l;
          }
          function $2(n, o, l) {
            return n.expression !== l || n.asteriskToken !== o ? r(Kd(o, l), n) : n;
          }
          function Xd(n) {
            let o = oe(227);
            return o.expression = s().parenthesizeExpressionForDisallowedComma(n), o.transformFlags |= ye(o.expression) | 1024 | 32768, o;
          }
          function K2(n, o) {
            return n.expression !== o ? r(Xd(o), n) : n;
          }
          function Yd(n, o, l, p7, k) {
            let V = Ve(228);
            return V.modifiers = xt(n), V.name = Qt(o), V.typeParameters = xt(l), V.heritageClauses = xt(p7), V.members = Ne(k), V.transformFlags |= gt(V.modifiers) | ai(V.name) | gt(V.typeParameters) | gt(V.heritageClauses) | gt(V.members) | (V.typeParameters ? 1 : 0) | 1024, V.jsDoc = void 0, V;
          }
          function xc(n, o, l, p7, k, V) {
            return n.modifiers !== o || n.name !== l || n.typeParameters !== p7 || n.heritageClauses !== k || n.members !== V ? r(Yd(o, l, p7, k, V), n) : n;
          }
          function X2() {
            return oe(229);
          }
          function Qd(n, o) {
            let l = oe(230);
            return l.expression = s().parenthesizeLeftSideOfAccess(n, false), l.typeArguments = o && s().parenthesizeTypeArguments(o), l.transformFlags |= ye(l.expression) | gt(l.typeArguments) | 1024, l;
          }
          function Xn(n, o, l) {
            return n.expression !== o || n.typeArguments !== l ? r(Qd(o, l), n) : n;
          }
          function Ec(n, o) {
            let l = oe(231);
            return l.expression = n, l.type = o, l.transformFlags |= ye(l.expression) | ye(l.type) | 1, l;
          }
          function Zd(n, o, l) {
            return n.expression !== o || n.type !== l ? r(Ec(o, l), n) : n;
          }
          function em(n) {
            let o = oe(232);
            return o.expression = s().parenthesizeLeftSideOfAccess(n, false), o.transformFlags |= ye(o.expression) | 1, o;
          }
          function Au(n, o) {
            return JS(n) ? rm(n, o) : n.expression !== o ? r(em(o), n) : n;
          }
          function tm(n, o) {
            let l = oe(235);
            return l.expression = n, l.type = o, l.transformFlags |= ye(l.expression) | ye(l.type) | 1, l;
          }
          function Pu(n, o, l) {
            return n.expression !== o || n.type !== l ? r(tm(o, l), n) : n;
          }
          function pi(n) {
            let o = oe(232);
            return o.flags |= 32, o.expression = s().parenthesizeLeftSideOfAccess(n, true), o.transformFlags |= ye(o.expression) | 1, o;
          }
          function rm(n, o) {
            return Y.assert(!!(n.flags & 32), "Cannot update a NonNullExpression using updateNonNullChain. Use updateNonNullExpression instead."), n.expression !== o ? r(pi(o), n) : n;
          }
          function wc(n, o) {
            let l = oe(233);
            switch (l.keywordToken = n, l.name = o, l.transformFlags |= ye(l.name), n) {
              case 103:
                l.transformFlags |= 1024;
                break;
              case 100:
                l.transformFlags |= 4;
                break;
              default:
                return Y.assertNever(n);
            }
            return l.flowNode = void 0, l;
          }
          function ra(n, o) {
            return n.name !== o ? r(wc(n.keywordToken, o), n) : n;
          }
          function i_(n, o) {
            let l = oe(236);
            return l.expression = n, l.literal = o, l.transformFlags |= ye(l.expression) | ye(l.literal) | 1024, l;
          }
          function nm(n, o, l) {
            return n.expression !== o || n.literal !== l ? r(i_(o, l), n) : n;
          }
          function im() {
            let n = oe(237);
            return n.transformFlags |= 1024, n;
          }
          function Zs(n, o) {
            let l = oe(238);
            return l.statements = Ne(n), l.multiLine = o, l.transformFlags |= gt(l.statements), l.jsDoc = void 0, l.locals = void 0, l.nextContainer = void 0, l;
          }
          function am(n, o) {
            return n.statements !== o ? r(Zs(o, n.multiLine), n) : n;
          }
          function sm(n, o) {
            let l = oe(240);
            return l.modifiers = xt(n), l.declarationList = ir(o) ? Ru(o) : o, l.transformFlags |= gt(l.modifiers) | ye(l.declarationList), Vn(l.modifiers) & 2 && (l.transformFlags = 1), l.jsDoc = void 0, l.flowNode = void 0, l;
          }
          function om(n, o, l) {
            return n.modifiers !== o || n.declarationList !== l ? r(sm(o, l), n) : n;
          }
          function Du() {
            let n = oe(239);
            return n.jsDoc = void 0, n;
          }
          function a_(n) {
            let o = oe(241);
            return o.expression = s().parenthesizeExpressionOfExpressionStatement(n), o.transformFlags |= ye(o.expression), o.jsDoc = void 0, o.flowNode = void 0, o;
          }
          function Y2(n, o) {
            return n.expression !== o ? r(a_(o), n) : n;
          }
          function ku(n, o, l) {
            let p7 = oe(242);
            return p7.expression = n, p7.thenStatement = Yn(o), p7.elseStatement = Yn(l), p7.transformFlags |= ye(p7.expression) | ye(p7.thenStatement) | ye(p7.elseStatement), p7.jsDoc = void 0, p7.flowNode = void 0, p7;
          }
          function Q2(n, o, l, p7) {
            return n.expression !== o || n.thenStatement !== l || n.elseStatement !== p7 ? r(ku(o, l, p7), n) : n;
          }
          function Iu(n, o) {
            let l = oe(243);
            return l.statement = Yn(n), l.expression = o, l.transformFlags |= ye(l.statement) | ye(l.expression), l.jsDoc = void 0, l.flowNode = void 0, l;
          }
          function Z2(n, o, l) {
            return n.statement !== o || n.expression !== l ? r(Iu(o, l), n) : n;
          }
          function _m(n, o) {
            let l = oe(244);
            return l.expression = n, l.statement = Yn(o), l.transformFlags |= ye(l.expression) | ye(l.statement), l.jsDoc = void 0, l.flowNode = void 0, l;
          }
          function eb(n, o, l) {
            return n.expression !== o || n.statement !== l ? r(_m(o, l), n) : n;
          }
          function Nu(n, o, l, p7) {
            let k = oe(245);
            return k.initializer = n, k.condition = o, k.incrementor = l, k.statement = Yn(p7), k.transformFlags |= ye(k.initializer) | ye(k.condition) | ye(k.incrementor) | ye(k.statement), k.jsDoc = void 0, k.locals = void 0, k.nextContainer = void 0, k.flowNode = void 0, k;
          }
          function cm(n, o, l, p7, k) {
            return n.initializer !== o || n.condition !== l || n.incrementor !== p7 || n.statement !== k ? r(Nu(o, l, p7, k), n) : n;
          }
          function lm(n, o, l) {
            let p7 = oe(246);
            return p7.initializer = n, p7.expression = o, p7.statement = Yn(l), p7.transformFlags |= ye(p7.initializer) | ye(p7.expression) | ye(p7.statement), p7.jsDoc = void 0, p7.locals = void 0, p7.nextContainer = void 0, p7.flowNode = void 0, p7;
          }
          function tb(n, o, l, p7) {
            return n.initializer !== o || n.expression !== l || n.statement !== p7 ? r(lm(o, l, p7), n) : n;
          }
          function um(n, o, l, p7) {
            let k = oe(247);
            return k.awaitModifier = n, k.initializer = o, k.expression = s().parenthesizeExpressionForDisallowedComma(l), k.statement = Yn(p7), k.transformFlags |= ye(k.awaitModifier) | ye(k.initializer) | ye(k.expression) | ye(k.statement) | 1024, n && (k.transformFlags |= 128), k.jsDoc = void 0, k.locals = void 0, k.nextContainer = void 0, k.flowNode = void 0, k;
          }
          function rb(n, o, l, p7, k) {
            return n.awaitModifier !== o || n.initializer !== l || n.expression !== p7 || n.statement !== k ? r(um(o, l, p7, k), n) : n;
          }
          function pm(n) {
            let o = oe(248);
            return o.label = Qt(n), o.transformFlags |= ye(o.label) | 4194304, o.jsDoc = void 0, o.flowNode = void 0, o;
          }
          function fm(n, o) {
            return n.label !== o ? r(pm(o), n) : n;
          }
          function Ou(n) {
            let o = oe(249);
            return o.label = Qt(n), o.transformFlags |= ye(o.label) | 4194304, o.jsDoc = void 0, o.flowNode = void 0, o;
          }
          function dm(n, o) {
            return n.label !== o ? r(Ou(o), n) : n;
          }
          function mm(n) {
            let o = oe(250);
            return o.expression = n, o.transformFlags |= ye(o.expression) | 128 | 4194304, o.jsDoc = void 0, o.flowNode = void 0, o;
          }
          function nb(n, o) {
            return n.expression !== o ? r(mm(o), n) : n;
          }
          function Mu(n, o) {
            let l = oe(251);
            return l.expression = n, l.statement = Yn(o), l.transformFlags |= ye(l.expression) | ye(l.statement), l.jsDoc = void 0, l.flowNode = void 0, l;
          }
          function hm(n, o, l) {
            return n.expression !== o || n.statement !== l ? r(Mu(o, l), n) : n;
          }
          function Lu(n, o) {
            let l = oe(252);
            return l.expression = s().parenthesizeExpressionForDisallowedComma(n), l.caseBlock = o, l.transformFlags |= ye(l.expression) | ye(l.caseBlock), l.jsDoc = void 0, l.flowNode = void 0, l.possiblyExhaustive = false, l;
          }
          function eo(n, o, l) {
            return n.expression !== o || n.caseBlock !== l ? r(Lu(o, l), n) : n;
          }
          function gm(n, o) {
            let l = oe(253);
            return l.label = Qt(n), l.statement = Yn(o), l.transformFlags |= ye(l.label) | ye(l.statement), l.jsDoc = void 0, l.flowNode = void 0, l;
          }
          function ym(n, o, l) {
            return n.label !== o || n.statement !== l ? r(gm(o, l), n) : n;
          }
          function vm(n) {
            let o = oe(254);
            return o.expression = n, o.transformFlags |= ye(o.expression), o.jsDoc = void 0, o.flowNode = void 0, o;
          }
          function ib(n, o) {
            return n.expression !== o ? r(vm(o), n) : n;
          }
          function bm(n, o, l) {
            let p7 = oe(255);
            return p7.tryBlock = n, p7.catchClause = o, p7.finallyBlock = l, p7.transformFlags |= ye(p7.tryBlock) | ye(p7.catchClause) | ye(p7.finallyBlock), p7.jsDoc = void 0, p7.flowNode = void 0, p7;
          }
          function ab(n, o, l, p7) {
            return n.tryBlock !== o || n.catchClause !== l || n.finallyBlock !== p7 ? r(bm(o, l, p7), n) : n;
          }
          function Tm() {
            let n = oe(256);
            return n.jsDoc = void 0, n.flowNode = void 0, n;
          }
          function Cc(n, o, l, p7) {
            var k;
            let V = Ve(257);
            return V.name = Qt(n), V.exclamationToken = o, V.type = l, V.initializer = Wa(p7), V.transformFlags |= ai(V.name) | ye(V.initializer) | (((k = V.exclamationToken) != null ? k : V.type) ? 1 : 0), V.jsDoc = void 0, V;
          }
          function Sm(n, o, l, p7, k) {
            return n.name !== o || n.type !== p7 || n.exclamationToken !== l || n.initializer !== k ? r(Cc(o, l, p7, k), n) : n;
          }
          function Ru(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, l = oe(258);
            return l.flags |= o & 3, l.declarations = Ne(n), l.transformFlags |= gt(l.declarations) | 4194304, o & 3 && (l.transformFlags |= 263168), l;
          }
          function sb(n, o) {
            return n.declarations !== o ? r(Ru(o, n.flags), n) : n;
          }
          function xm(n, o, l, p7, k, V, we) {
            let et = Ve(259);
            if (et.modifiers = xt(n), et.asteriskToken = o, et.name = Qt(l), et.typeParameters = xt(p7), et.parameters = Ne(k), et.type = V, et.body = we, !et.body || Vn(et.modifiers) & 2)
              et.transformFlags = 1;
            else {
              let ht = Vn(et.modifiers) & 512, hn = !!et.asteriskToken, Ni = ht && hn;
              et.transformFlags = gt(et.modifiers) | ye(et.asteriskToken) | ai(et.name) | gt(et.typeParameters) | gt(et.parameters) | ye(et.type) | ye(et.body) & -67108865 | (Ni ? 128 : ht ? 256 : hn ? 2048 : 0) | (et.typeParameters || et.type ? 1 : 0) | 4194304;
            }
            return et.typeArguments = void 0, et.jsDoc = void 0, et.locals = void 0, et.nextContainer = void 0, et.endFlowNode = void 0, et.returnFlowNode = void 0, et;
          }
          function ju(n, o, l, p7, k, V, we, et) {
            return n.modifiers !== o || n.asteriskToken !== l || n.name !== p7 || n.typeParameters !== k || n.parameters !== V || n.type !== we || n.body !== et ? ob(xm(o, l, p7, k, V, we, et), n) : n;
          }
          function ob(n, o) {
            return n !== o && n.modifiers === o.modifiers && (n.modifiers = o.modifiers), pt(n, o);
          }
          function Em(n, o, l, p7, k) {
            let V = Ve(260);
            return V.modifiers = xt(n), V.name = Qt(o), V.typeParameters = xt(l), V.heritageClauses = xt(p7), V.members = Ne(k), Vn(V.modifiers) & 2 ? V.transformFlags = 1 : (V.transformFlags |= gt(V.modifiers) | ai(V.name) | gt(V.typeParameters) | gt(V.heritageClauses) | gt(V.members) | (V.typeParameters ? 1 : 0) | 1024, V.transformFlags & 8192 && (V.transformFlags |= 1)), V.jsDoc = void 0, V;
          }
          function Ju(n, o, l, p7, k, V) {
            return n.modifiers !== o || n.name !== l || n.typeParameters !== p7 || n.heritageClauses !== k || n.members !== V ? r(Em(o, l, p7, k, V), n) : n;
          }
          function wm(n, o, l, p7, k) {
            let V = Ve(261);
            return V.modifiers = xt(n), V.name = Qt(o), V.typeParameters = xt(l), V.heritageClauses = xt(p7), V.members = Ne(k), V.transformFlags = 1, V.jsDoc = void 0, V;
          }
          function Cm(n, o, l, p7, k, V) {
            return n.modifiers !== o || n.name !== l || n.typeParameters !== p7 || n.heritageClauses !== k || n.members !== V ? r(wm(o, l, p7, k, V), n) : n;
          }
          function sr(n, o, l, p7) {
            let k = Ve(262);
            return k.modifiers = xt(n), k.name = Qt(o), k.typeParameters = xt(l), k.type = p7, k.transformFlags = 1, k.jsDoc = void 0, k.locals = void 0, k.nextContainer = void 0, k;
          }
          function Ma(n, o, l, p7, k) {
            return n.modifiers !== o || n.name !== l || n.typeParameters !== p7 || n.type !== k ? r(sr(o, l, p7, k), n) : n;
          }
          function Fu(n, o, l) {
            let p7 = Ve(263);
            return p7.modifiers = xt(n), p7.name = Qt(o), p7.members = Ne(l), p7.transformFlags |= gt(p7.modifiers) | ye(p7.name) | gt(p7.members) | 1, p7.transformFlags &= -67108865, p7.jsDoc = void 0, p7;
          }
          function La(n, o, l, p7) {
            return n.modifiers !== o || n.name !== l || n.members !== p7 ? r(Fu(o, l, p7), n) : n;
          }
          function Am(n, o, l) {
            let p7 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, k = Ve(264);
            return k.modifiers = xt(n), k.flags |= p7 & 1044, k.name = o, k.body = l, Vn(k.modifiers) & 2 ? k.transformFlags = 1 : k.transformFlags |= gt(k.modifiers) | ye(k.name) | ye(k.body) | 1, k.transformFlags &= -67108865, k.jsDoc = void 0, k.locals = void 0, k.nextContainer = void 0, k;
          }
          function Sr(n, o, l, p7) {
            return n.modifiers !== o || n.name !== l || n.body !== p7 ? r(Am(o, l, p7, n.flags), n) : n;
          }
          function Ra(n) {
            let o = oe(265);
            return o.statements = Ne(n), o.transformFlags |= gt(o.statements), o.jsDoc = void 0, o;
          }
          function Yr(n, o) {
            return n.statements !== o ? r(Ra(o), n) : n;
          }
          function Pm(n) {
            let o = oe(266);
            return o.clauses = Ne(n), o.transformFlags |= gt(o.clauses), o.locals = void 0, o.nextContainer = void 0, o;
          }
          function _b(n, o) {
            return n.clauses !== o ? r(Pm(o), n) : n;
          }
          function Dm(n) {
            let o = Ve(267);
            return o.name = Qt(n), o.transformFlags |= ec(o.name) | 1, o.modifiers = void 0, o.jsDoc = void 0, o;
          }
          function km(n, o) {
            return n.name !== o ? cb(Dm(o), n) : n;
          }
          function cb(n, o) {
            return n !== o && (n.modifiers = o.modifiers), r(n, o);
          }
          function Im(n, o, l, p7) {
            let k = Ve(268);
            return k.modifiers = xt(n), k.name = Qt(l), k.isTypeOnly = o, k.moduleReference = p7, k.transformFlags |= gt(k.modifiers) | ec(k.name) | ye(k.moduleReference), ud(k.moduleReference) || (k.transformFlags |= 1), k.transformFlags &= -67108865, k.jsDoc = void 0, k;
          }
          function Nm(n, o, l, p7, k) {
            return n.modifiers !== o || n.isTypeOnly !== l || n.name !== p7 || n.moduleReference !== k ? r(Im(o, l, p7, k), n) : n;
          }
          function Om(n, o, l, p7) {
            let k = oe(269);
            return k.modifiers = xt(n), k.importClause = o, k.moduleSpecifier = l, k.assertClause = p7, k.transformFlags |= ye(k.importClause) | ye(k.moduleSpecifier), k.transformFlags &= -67108865, k.jsDoc = void 0, k;
          }
          function Mm(n, o, l, p7, k) {
            return n.modifiers !== o || n.importClause !== l || n.moduleSpecifier !== p7 || n.assertClause !== k ? r(Om(o, l, p7, k), n) : n;
          }
          function Lm(n, o, l) {
            let p7 = Ve(270);
            return p7.isTypeOnly = n, p7.name = o, p7.namedBindings = l, p7.transformFlags |= ye(p7.name) | ye(p7.namedBindings), n && (p7.transformFlags |= 1), p7.transformFlags &= -67108865, p7;
          }
          function Rm(n, o, l, p7) {
            return n.isTypeOnly !== o || n.name !== l || n.namedBindings !== p7 ? r(Lm(o, l, p7), n) : n;
          }
          function Bu(n, o) {
            let l = oe(296);
            return l.elements = Ne(n), l.multiLine = o, l.transformFlags |= 4, l;
          }
          function lb(n, o, l) {
            return n.elements !== o || n.multiLine !== l ? r(Bu(o, l), n) : n;
          }
          function s_(n, o) {
            let l = oe(297);
            return l.name = n, l.value = o, l.transformFlags |= 4, l;
          }
          function jm(n, o, l) {
            return n.name !== o || n.value !== l ? r(s_(o, l), n) : n;
          }
          function qu(n, o) {
            let l = oe(298);
            return l.assertClause = n, l.multiLine = o, l;
          }
          function Jm(n, o, l) {
            return n.assertClause !== o || n.multiLine !== l ? r(qu(o, l), n) : n;
          }
          function Fm(n) {
            let o = Ve(271);
            return o.name = n, o.transformFlags |= ye(o.name), o.transformFlags &= -67108865, o;
          }
          function Uu(n, o) {
            return n.name !== o ? r(Fm(o), n) : n;
          }
          function Bm(n) {
            let o = Ve(277);
            return o.name = n, o.transformFlags |= ye(o.name) | 4, o.transformFlags &= -67108865, o;
          }
          function qm(n, o) {
            return n.name !== o ? r(Bm(o), n) : n;
          }
          function Um(n) {
            let o = oe(272);
            return o.elements = Ne(n), o.transformFlags |= gt(o.elements), o.transformFlags &= -67108865, o;
          }
          function ub(n, o) {
            return n.elements !== o ? r(Um(o), n) : n;
          }
          function zm(n, o, l) {
            let p7 = Ve(273);
            return p7.isTypeOnly = n, p7.propertyName = o, p7.name = l, p7.transformFlags |= ye(p7.propertyName) | ye(p7.name), p7.transformFlags &= -67108865, p7;
          }
          function pb(n, o, l, p7) {
            return n.isTypeOnly !== o || n.propertyName !== l || n.name !== p7 ? r(zm(o, l, p7), n) : n;
          }
          function zu(n, o, l) {
            let p7 = Ve(274);
            return p7.modifiers = xt(n), p7.isExportEquals = o, p7.expression = o ? s().parenthesizeRightSideOfBinary(63, void 0, l) : s().parenthesizeExpressionOfExportDefault(l), p7.transformFlags |= gt(p7.modifiers) | ye(p7.expression), p7.transformFlags &= -67108865, p7.jsDoc = void 0, p7;
          }
          function Wu(n, o, l) {
            return n.modifiers !== o || n.expression !== l ? r(zu(o, n.isExportEquals, l), n) : n;
          }
          function na(n, o, l, p7, k) {
            let V = Ve(275);
            return V.modifiers = xt(n), V.isTypeOnly = o, V.exportClause = l, V.moduleSpecifier = p7, V.assertClause = k, V.transformFlags |= gt(V.modifiers) | ye(V.exportClause) | ye(V.moduleSpecifier), V.transformFlags &= -67108865, V.jsDoc = void 0, V;
          }
          function Wm(n, o, l, p7, k, V) {
            return n.modifiers !== o || n.isTypeOnly !== l || n.exportClause !== p7 || n.moduleSpecifier !== k || n.assertClause !== V ? Vm(na(o, l, p7, k, V), n) : n;
          }
          function Vm(n, o) {
            return n !== o && n.modifiers === o.modifiers && (n.modifiers = o.modifiers), r(n, o);
          }
          function to(n) {
            let o = oe(276);
            return o.elements = Ne(n), o.transformFlags |= gt(o.elements), o.transformFlags &= -67108865, o;
          }
          function Hm(n, o) {
            return n.elements !== o ? r(to(o), n) : n;
          }
          function Vu(n, o, l) {
            let p7 = oe(278);
            return p7.isTypeOnly = n, p7.propertyName = Qt(o), p7.name = Qt(l), p7.transformFlags |= ye(p7.propertyName) | ye(p7.name), p7.transformFlags &= -67108865, p7.jsDoc = void 0, p7;
          }
          function o_(n, o, l, p7) {
            return n.isTypeOnly !== o || n.propertyName !== l || n.name !== p7 ? r(Vu(o, l, p7), n) : n;
          }
          function fb() {
            let n = Ve(279);
            return n.jsDoc = void 0, n;
          }
          function Gm(n) {
            let o = oe(280);
            return o.expression = n, o.transformFlags |= ye(o.expression), o.transformFlags &= -67108865, o;
          }
          function $m(n, o) {
            return n.expression !== o ? r(Gm(o), n) : n;
          }
          function db(n) {
            return oe(n);
          }
          function Km(n, o) {
            let l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, p7 = Ac(n, l ? o && s().parenthesizeNonArrayTypeOfPostfixType(o) : o);
            return p7.postfix = l, p7;
          }
          function Ac(n, o) {
            let l = oe(n);
            return l.type = o, l;
          }
          function Xm(n, o, l) {
            return o.type !== l ? r(Km(n, l, o.postfix), o) : o;
          }
          function mb(n, o, l) {
            return o.type !== l ? r(Ac(n, l), o) : o;
          }
          function Ym(n, o) {
            let l = Ve(320);
            return l.parameters = xt(n), l.type = o, l.transformFlags = gt(l.parameters) | (l.type ? 1 : 0), l.jsDoc = void 0, l.locals = void 0, l.nextContainer = void 0, l.typeArguments = void 0, l;
          }
          function hb(n, o, l) {
            return n.parameters !== o || n.type !== l ? r(Ym(o, l), n) : n;
          }
          function Qm(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, l = Ve(325);
            return l.jsDocPropertyTags = xt(n), l.isArrayType = o, l;
          }
          function gb(n, o, l) {
            return n.jsDocPropertyTags !== o || n.isArrayType !== l ? r(Qm(o, l), n) : n;
          }
          function Zm(n) {
            let o = oe(312);
            return o.type = n, o;
          }
          function yb(n, o) {
            return n.type !== o ? r(Zm(o), n) : n;
          }
          function eh(n, o, l) {
            let p7 = Ve(326);
            return p7.typeParameters = xt(n), p7.parameters = Ne(o), p7.type = l, p7.jsDoc = void 0, p7.locals = void 0, p7.nextContainer = void 0, p7;
          }
          function Hu(n, o, l, p7) {
            return n.typeParameters !== o || n.parameters !== l || n.type !== p7 ? r(eh(o, l, p7), n) : n;
          }
          function fi(n) {
            let o = ed(n.kind);
            return n.tagName.escapedText === vi(o) ? n.tagName : Ut(o);
          }
          function ja(n, o, l) {
            let p7 = oe(n);
            return p7.tagName = o, p7.comment = l, p7;
          }
          function Ja(n, o, l) {
            let p7 = Ve(n);
            return p7.tagName = o, p7.comment = l, p7;
          }
          function __(n, o, l, p7) {
            let k = ja(348, n != null ? n : Ut("template"), p7);
            return k.constraint = o, k.typeParameters = Ne(l), k;
          }
          function Gu(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fi(n), l = arguments.length > 2 ? arguments[2] : void 0, p7 = arguments.length > 3 ? arguments[3] : void 0, k = arguments.length > 4 ? arguments[4] : void 0;
            return n.tagName !== o || n.constraint !== l || n.typeParameters !== p7 || n.comment !== k ? r(__(o, l, p7, k), n) : n;
          }
          function $u(n, o, l, p7) {
            let k = Ja(349, n != null ? n : Ut("typedef"), p7);
            return k.typeExpression = o, k.fullName = l, k.name = w2(l), k.locals = void 0, k.nextContainer = void 0, k;
          }
          function th(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fi(n), l = arguments.length > 2 ? arguments[2] : void 0, p7 = arguments.length > 3 ? arguments[3] : void 0, k = arguments.length > 4 ? arguments[4] : void 0;
            return n.tagName !== o || n.typeExpression !== l || n.fullName !== p7 || n.comment !== k ? r($u(o, l, p7, k), n) : n;
          }
          function Pc(n, o, l, p7, k, V) {
            let we = Ja(344, n != null ? n : Ut("param"), V);
            return we.typeExpression = p7, we.name = o, we.isNameFirst = !!k, we.isBracketed = l, we;
          }
          function vb(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fi(n), l = arguments.length > 2 ? arguments[2] : void 0, p7 = arguments.length > 3 ? arguments[3] : void 0, k = arguments.length > 4 ? arguments[4] : void 0, V = arguments.length > 5 ? arguments[5] : void 0, we = arguments.length > 6 ? arguments[6] : void 0;
            return n.tagName !== o || n.name !== l || n.isBracketed !== p7 || n.typeExpression !== k || n.isNameFirst !== V || n.comment !== we ? r(Pc(o, l, p7, k, V, we), n) : n;
          }
          function Ku(n, o, l, p7, k, V) {
            let we = Ja(351, n != null ? n : Ut("prop"), V);
            return we.typeExpression = p7, we.name = o, we.isNameFirst = !!k, we.isBracketed = l, we;
          }
          function bb(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fi(n), l = arguments.length > 2 ? arguments[2] : void 0, p7 = arguments.length > 3 ? arguments[3] : void 0, k = arguments.length > 4 ? arguments[4] : void 0, V = arguments.length > 5 ? arguments[5] : void 0, we = arguments.length > 6 ? arguments[6] : void 0;
            return n.tagName !== o || n.name !== l || n.isBracketed !== p7 || n.typeExpression !== k || n.isNameFirst !== V || n.comment !== we ? r(Ku(o, l, p7, k, V, we), n) : n;
          }
          function rh(n, o, l, p7) {
            let k = Ja(341, n != null ? n : Ut("callback"), p7);
            return k.typeExpression = o, k.fullName = l, k.name = w2(l), k.locals = void 0, k.nextContainer = void 0, k;
          }
          function nh(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fi(n), l = arguments.length > 2 ? arguments[2] : void 0, p7 = arguments.length > 3 ? arguments[3] : void 0, k = arguments.length > 4 ? arguments[4] : void 0;
            return n.tagName !== o || n.typeExpression !== l || n.fullName !== p7 || n.comment !== k ? r(rh(o, l, p7, k), n) : n;
          }
          function ih(n, o, l) {
            let p7 = ja(342, n != null ? n : Ut("overload"), l);
            return p7.typeExpression = o, p7;
          }
          function ah(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fi(n), l = arguments.length > 2 ? arguments[2] : void 0, p7 = arguments.length > 3 ? arguments[3] : void 0;
            return n.tagName !== o || n.typeExpression !== l || n.comment !== p7 ? r(ih(o, l, p7), n) : n;
          }
          function sh(n, o, l) {
            let p7 = ja(331, n != null ? n : Ut("augments"), l);
            return p7.class = o, p7;
          }
          function Xu(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fi(n), l = arguments.length > 2 ? arguments[2] : void 0, p7 = arguments.length > 3 ? arguments[3] : void 0;
            return n.tagName !== o || n.class !== l || n.comment !== p7 ? r(sh(o, l, p7), n) : n;
          }
          function Yu(n, o, l) {
            let p7 = ja(332, n != null ? n : Ut("implements"), l);
            return p7.class = o, p7;
          }
          function ro(n, o, l) {
            let p7 = ja(350, n != null ? n : Ut("see"), l);
            return p7.name = o, p7;
          }
          function Tb(n, o, l, p7) {
            return n.tagName !== o || n.name !== l || n.comment !== p7 ? r(ro(o, l, p7), n) : n;
          }
          function ws(n) {
            let o = oe(313);
            return o.name = n, o;
          }
          function Dc(n, o) {
            return n.name !== o ? r(ws(o), n) : n;
          }
          function oh(n, o) {
            let l = oe(314);
            return l.left = n, l.right = o, l.transformFlags |= ye(l.left) | ye(l.right), l;
          }
          function Sb(n, o, l) {
            return n.left !== o || n.right !== l ? r(oh(o, l), n) : n;
          }
          function _h(n, o) {
            let l = oe(327);
            return l.name = n, l.text = o, l;
          }
          function xb(n, o, l) {
            return n.name !== o ? r(_h(o, l), n) : n;
          }
          function ch(n, o) {
            let l = oe(328);
            return l.name = n, l.text = o, l;
          }
          function lh(n, o, l) {
            return n.name !== o ? r(ch(o, l), n) : n;
          }
          function uh(n, o) {
            let l = oe(329);
            return l.name = n, l.text = o, l;
          }
          function Eb(n, o, l) {
            return n.name !== o ? r(uh(o, l), n) : n;
          }
          function wb(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fi(n), l = arguments.length > 2 ? arguments[2] : void 0, p7 = arguments.length > 3 ? arguments[3] : void 0;
            return n.tagName !== o || n.class !== l || n.comment !== p7 ? r(Yu(o, l, p7), n) : n;
          }
          function ph(n, o, l) {
            return ja(n, o != null ? o : Ut(ed(n)), l);
          }
          function Cb(n, o) {
            let l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : fi(o), p7 = arguments.length > 3 ? arguments[3] : void 0;
            return o.tagName !== l || o.comment !== p7 ? r(ph(n, l, p7), o) : o;
          }
          function fh(n, o, l, p7) {
            let k = ja(n, o != null ? o : Ut(ed(n)), p7);
            return k.typeExpression = l, k;
          }
          function Ab(n, o) {
            let l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : fi(o), p7 = arguments.length > 3 ? arguments[3] : void 0, k = arguments.length > 4 ? arguments[4] : void 0;
            return o.tagName !== l || o.typeExpression !== p7 || o.comment !== k ? r(fh(n, l, p7, k), o) : o;
          }
          function dh(n, o) {
            return ja(330, n, o);
          }
          function Pb(n, o, l) {
            return n.tagName !== o || n.comment !== l ? r(dh(o, l), n) : n;
          }
          function mh(n, o, l) {
            let p7 = Ja(343, n != null ? n : Ut(ed(343)), l);
            return p7.typeExpression = o, p7.locals = void 0, p7.nextContainer = void 0, p7;
          }
          function Db(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fi(n), l = arguments.length > 2 ? arguments[2] : void 0, p7 = arguments.length > 3 ? arguments[3] : void 0;
            return n.tagName !== o || n.typeExpression !== l || n.comment !== p7 ? r(mh(o, l, p7), n) : n;
          }
          function hh(n) {
            let o = oe(324);
            return o.text = n, o;
          }
          function Qu(n, o) {
            return n.text !== o ? r(hh(o), n) : n;
          }
          function gh(n, o) {
            let l = oe(323);
            return l.comment = n, l.tags = xt(o), l;
          }
          function yh(n, o, l) {
            return n.comment !== o || n.tags !== l ? r(gh(o, l), n) : n;
          }
          function Zu(n, o, l) {
            let p7 = oe(281);
            return p7.openingElement = n, p7.children = Ne(o), p7.closingElement = l, p7.transformFlags |= ye(p7.openingElement) | gt(p7.children) | ye(p7.closingElement) | 2, p7;
          }
          function kb(n, o, l, p7) {
            return n.openingElement !== o || n.children !== l || n.closingElement !== p7 ? r(Zu(o, l, p7), n) : n;
          }
          function c_(n, o, l) {
            let p7 = oe(282);
            return p7.tagName = n, p7.typeArguments = xt(o), p7.attributes = l, p7.transformFlags |= ye(p7.tagName) | gt(p7.typeArguments) | ye(p7.attributes) | 2, p7.typeArguments && (p7.transformFlags |= 1), p7;
          }
          function vh(n, o, l, p7) {
            return n.tagName !== o || n.typeArguments !== l || n.attributes !== p7 ? r(c_(o, l, p7), n) : n;
          }
          function bh(n, o, l) {
            let p7 = oe(283);
            return p7.tagName = n, p7.typeArguments = xt(o), p7.attributes = l, p7.transformFlags |= ye(p7.tagName) | gt(p7.typeArguments) | ye(p7.attributes) | 2, o && (p7.transformFlags |= 1), p7;
          }
          function Ib(n, o, l, p7) {
            return n.tagName !== o || n.typeArguments !== l || n.attributes !== p7 ? r(bh(o, l, p7), n) : n;
          }
          function on2(n) {
            let o = oe(284);
            return o.tagName = n, o.transformFlags |= ye(o.tagName) | 2, o;
          }
          function Th(n, o) {
            return n.tagName !== o ? r(on2(o), n) : n;
          }
          function ep(n, o, l) {
            let p7 = oe(285);
            return p7.openingFragment = n, p7.children = Ne(o), p7.closingFragment = l, p7.transformFlags |= ye(p7.openingFragment) | gt(p7.children) | ye(p7.closingFragment) | 2, p7;
          }
          function Nb(n, o, l, p7) {
            return n.openingFragment !== o || n.children !== l || n.closingFragment !== p7 ? r(ep(o, l, p7), n) : n;
          }
          function l_(n, o) {
            let l = oe(11);
            return l.text = n, l.containsOnlyTriviaWhiteSpaces = !!o, l.transformFlags |= 2, l;
          }
          function Ob(n, o, l) {
            return n.text !== o || n.containsOnlyTriviaWhiteSpaces !== l ? r(l_(o, l), n) : n;
          }
          function kc() {
            let n = oe(286);
            return n.transformFlags |= 2, n;
          }
          function Mb() {
            let n = oe(287);
            return n.transformFlags |= 2, n;
          }
          function Sh(n, o) {
            let l = Ve(288);
            return l.name = n, l.initializer = o, l.transformFlags |= ye(l.name) | ye(l.initializer) | 2, l;
          }
          function Lb(n, o, l) {
            return n.name !== o || n.initializer !== l ? r(Sh(o, l), n) : n;
          }
          function xh(n) {
            let o = Ve(289);
            return o.properties = Ne(n), o.transformFlags |= gt(o.properties) | 2, o;
          }
          function tp(n, o) {
            return n.properties !== o ? r(xh(o), n) : n;
          }
          function no(n) {
            let o = oe(290);
            return o.expression = n, o.transformFlags |= ye(o.expression) | 2, o;
          }
          function Rb(n, o) {
            return n.expression !== o ? r(no(o), n) : n;
          }
          function Ic(n, o) {
            let l = oe(291);
            return l.dotDotDotToken = n, l.expression = o, l.transformFlags |= ye(l.dotDotDotToken) | ye(l.expression) | 2, l;
          }
          function Eh(n, o) {
            return n.expression !== o ? r(Ic(n.dotDotDotToken, o), n) : n;
          }
          function wh(n, o) {
            let l = oe(292);
            return l.expression = s().parenthesizeExpressionForDisallowedComma(n), l.statements = Ne(o), l.transformFlags |= ye(l.expression) | gt(l.statements), l.jsDoc = void 0, l;
          }
          function rp(n, o, l) {
            return n.expression !== o || n.statements !== l ? r(wh(o, l), n) : n;
          }
          function np(n) {
            let o = oe(293);
            return o.statements = Ne(n), o.transformFlags = gt(o.statements), o;
          }
          function jb(n, o) {
            return n.statements !== o ? r(np(o), n) : n;
          }
          function Ch(n, o) {
            let l = oe(294);
            switch (l.token = n, l.types = Ne(o), l.transformFlags |= gt(l.types), n) {
              case 94:
                l.transformFlags |= 1024;
                break;
              case 117:
                l.transformFlags |= 1;
                break;
              default:
                return Y.assertNever(n);
            }
            return l;
          }
          function Ah(n, o) {
            return n.types !== o ? r(Ch(n.token, o), n) : n;
          }
          function ip(n, o) {
            let l = oe(295);
            return l.variableDeclaration = Xh(n), l.block = o, l.transformFlags |= ye(l.variableDeclaration) | ye(l.block) | (n ? 0 : 64), l.locals = void 0, l.nextContainer = void 0, l;
          }
          function Ph(n, o, l) {
            return n.variableDeclaration !== o || n.block !== l ? r(ip(o, l), n) : n;
          }
          function Fa(n, o) {
            let l = Ve(299);
            return l.name = Qt(n), l.initializer = s().parenthesizeExpressionForDisallowedComma(o), l.transformFlags |= ai(l.name) | ye(l.initializer), l.modifiers = void 0, l.questionToken = void 0, l.exclamationToken = void 0, l.jsDoc = void 0, l;
          }
          function Jb(n, o, l) {
            return n.name !== o || n.initializer !== l ? Fb(Fa(o, l), n) : n;
          }
          function Fb(n, o) {
            return n !== o && (n.modifiers = o.modifiers, n.questionToken = o.questionToken, n.exclamationToken = o.exclamationToken), r(n, o);
          }
          function Dh(n, o) {
            let l = Ve(300);
            return l.name = Qt(n), l.objectAssignmentInitializer = o && s().parenthesizeExpressionForDisallowedComma(o), l.transformFlags |= ec(l.name) | ye(l.objectAssignmentInitializer) | 1024, l.equalsToken = void 0, l.modifiers = void 0, l.questionToken = void 0, l.exclamationToken = void 0, l.jsDoc = void 0, l;
          }
          function Bb(n, o, l) {
            return n.name !== o || n.objectAssignmentInitializer !== l ? kh(Dh(o, l), n) : n;
          }
          function kh(n, o) {
            return n !== o && (n.modifiers = o.modifiers, n.questionToken = o.questionToken, n.exclamationToken = o.exclamationToken, n.equalsToken = o.equalsToken), r(n, o);
          }
          function ap(n) {
            let o = Ve(301);
            return o.expression = s().parenthesizeExpressionForDisallowedComma(n), o.transformFlags |= ye(o.expression) | 128 | 65536, o.jsDoc = void 0, o;
          }
          function ki(n, o) {
            return n.expression !== o ? r(ap(o), n) : n;
          }
          function sp(n, o) {
            let l = Ve(302);
            return l.name = Qt(n), l.initializer = o && s().parenthesizeExpressionForDisallowedComma(o), l.transformFlags |= ye(l.name) | ye(l.initializer) | 1, l.jsDoc = void 0, l;
          }
          function qb(n, o, l) {
            return n.name !== o || n.initializer !== l ? r(sp(o, l), n) : n;
          }
          function Ub(n, o, l) {
            let p7 = t.createBaseSourceFileNode(308);
            return p7.statements = Ne(n), p7.endOfFileToken = o, p7.flags |= l, p7.text = "", p7.fileName = "", p7.path = "", p7.resolvedPath = "", p7.originalFileName = "", p7.languageVersion = 0, p7.languageVariant = 0, p7.scriptKind = 0, p7.isDeclarationFile = false, p7.hasNoDefaultLib = false, p7.transformFlags |= gt(p7.statements) | ye(p7.endOfFileToken), p7.locals = void 0, p7.nextContainer = void 0, p7.endFlowNode = void 0, p7.nodeCount = 0, p7.identifierCount = 0, p7.symbolCount = 0, p7.parseDiagnostics = void 0, p7.bindDiagnostics = void 0, p7.bindSuggestionDiagnostics = void 0, p7.lineMap = void 0, p7.externalModuleIndicator = void 0, p7.setExternalModuleIndicator = void 0, p7.pragmas = void 0, p7.checkJsDirective = void 0, p7.referencedFiles = void 0, p7.typeReferenceDirectives = void 0, p7.libReferenceDirectives = void 0, p7.amdDependencies = void 0, p7.commentDirectives = void 0, p7.identifiers = void 0, p7.packageJsonLocations = void 0, p7.packageJsonScope = void 0, p7.imports = void 0, p7.moduleAugmentations = void 0, p7.ambientModuleNames = void 0, p7.resolvedModules = void 0, p7.classifiableNames = void 0, p7.impliedNodeFormat = void 0, p7;
          }
          function Ih(n) {
            let o = Object.create(n.redirectTarget);
            return Object.defineProperties(o, { id: { get() {
              return this.redirectInfo.redirectTarget.id;
            }, set(l) {
              this.redirectInfo.redirectTarget.id = l;
            } }, symbol: { get() {
              return this.redirectInfo.redirectTarget.symbol;
            }, set(l) {
              this.redirectInfo.redirectTarget.symbol = l;
            } } }), o.redirectInfo = n, o;
          }
          function Nh(n) {
            let o = Ih(n.redirectInfo);
            return o.flags |= n.flags & -9, o.fileName = n.fileName, o.path = n.path, o.resolvedPath = n.resolvedPath, o.originalFileName = n.originalFileName, o.packageJsonLocations = n.packageJsonLocations, o.packageJsonScope = n.packageJsonScope, o.emitNode = void 0, o;
          }
          function op(n) {
            let o = t.createBaseSourceFileNode(308);
            o.flags |= n.flags & -9;
            for (let l in n)
              if (!(Jr(o, l) || !Jr(n, l))) {
                if (l === "emitNode") {
                  o.emitNode = void 0;
                  continue;
                }
                o[l] = n[l];
              }
            return o;
          }
          function Oh(n) {
            let o = n.redirectInfo ? Nh(n) : op(n);
            return Dn(o, n), o;
          }
          function zb(n, o, l, p7, k, V, we) {
            let et = Oh(n);
            return et.statements = Ne(o), et.isDeclarationFile = l, et.referencedFiles = p7, et.typeReferenceDirectives = k, et.hasNoDefaultLib = V, et.libReferenceDirectives = we, et.transformFlags = gt(et.statements) | ye(et.endOfFileToken), et;
          }
          function Mh(n, o) {
            let l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : n.isDeclarationFile, p7 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : n.referencedFiles, k = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : n.typeReferenceDirectives, V = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : n.hasNoDefaultLib, we = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : n.libReferenceDirectives;
            return n.statements !== o || n.isDeclarationFile !== l || n.referencedFiles !== p7 || n.typeReferenceDirectives !== k || n.hasNoDefaultLib !== V || n.libReferenceDirectives !== we ? r(zb(n, o, l, p7, k, V, we), n) : n;
          }
          function Lh(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Bt, l = oe(309);
            return l.prepends = o, l.sourceFiles = n, l.syntheticFileReferences = void 0, l.syntheticTypeReferences = void 0, l.syntheticLibReferences = void 0, l.hasNoDefaultLib = void 0, l;
          }
          function Wb(n, o) {
            let l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Bt;
            return n.sourceFiles !== o || n.prepends !== l ? r(Lh(o, l), n) : n;
          }
          function Nc(n, o, l) {
            let p7 = oe(310);
            return p7.prologues = n, p7.syntheticReferences = o, p7.texts = l, p7.fileName = "", p7.text = "", p7.referencedFiles = Bt, p7.libReferenceDirectives = Bt, p7.getLineAndCharacterOfPosition = (k) => Ls(p7, k), p7;
          }
          function Oc(n, o) {
            let l = oe(n);
            return l.data = o, l;
          }
          function Vb(n) {
            return Oc(303, n);
          }
          function Hb(n, o) {
            let l = Oc(304, n);
            return l.texts = o, l;
          }
          function Gb(n, o) {
            return Oc(o ? 306 : 305, n);
          }
          function $b(n) {
            let o = oe(307);
            return o.data = n.data, o.section = n, o;
          }
          function Kb() {
            let n = oe(311);
            return n.javascriptText = "", n.declarationText = "", n;
          }
          function Rh(n) {
            let o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, l = arguments.length > 2 ? arguments[2] : void 0, p7 = oe(234);
            return p7.type = n, p7.isSpread = o, p7.tupleNameSource = l, p7;
          }
          function jh(n) {
            let o = oe(354);
            return o._children = n, o;
          }
          function Jh(n) {
            let o = oe(355);
            return o.original = n, Rt(o, n), o;
          }
          function Fh(n, o) {
            let l = oe(356);
            return l.expression = n, l.original = o, l.transformFlags |= ye(l.expression) | 1, Rt(l, o), l;
          }
          function Bh(n, o) {
            return n.expression !== o ? r(Fh(o, n.original), n) : n;
          }
          function qh(n) {
            if (fs(n) && !pl(n) && !n.original && !n.emitNode && !n.id) {
              if (oc(n))
                return n.elements;
              if (ur(n) && I8(n.operatorToken))
                return [n.left, n.right];
            }
            return n;
          }
          function Mc(n) {
            let o = oe(357);
            return o.elements = Ne(at(n, qh)), o.transformFlags |= gt(o.elements), o;
          }
          function Xb(n, o) {
            return n.elements !== o ? r(Mc(o), n) : n;
          }
          function Yb(n) {
            let o = oe(359);
            return o.emitNode = {}, o.original = n, o;
          }
          function Qb(n) {
            let o = oe(358);
            return o.emitNode = {}, o.original = n, o;
          }
          function Uh(n, o) {
            let l = oe(360);
            return l.expression = n, l.thisArg = o, l.transformFlags |= ye(l.expression) | ye(l.thisArg), l;
          }
          function _p(n, o, l) {
            return n.expression !== o || n.thisArg !== l ? r(Uh(o, l), n) : n;
          }
          function Zb(n) {
            let o = pn(n.escapedText);
            return o.flags |= n.flags & -9, o.transformFlags = n.transformFlags, Dn(o, n), setIdentifierAutoGenerate(o, Object.assign({}, n.emitNode.autoGenerate)), o;
          }
          function e6(n) {
            let o = pn(n.escapedText);
            o.flags |= n.flags & -9, o.jsDoc = n.jsDoc, o.flowNode = n.flowNode, o.symbol = n.symbol, o.transformFlags = n.transformFlags, Dn(o, n);
            let l = getIdentifierTypeArguments(n);
            return l && setIdentifierTypeArguments(o, l), o;
          }
          function t6(n) {
            let o = dn(n.escapedText);
            return o.flags |= n.flags & -9, o.transformFlags = n.transformFlags, Dn(o, n), setIdentifierAutoGenerate(o, Object.assign({}, n.emitNode.autoGenerate)), o;
          }
          function r6(n) {
            let o = dn(n.escapedText);
            return o.flags |= n.flags & -9, o.transformFlags = n.transformFlags, Dn(o, n), o;
          }
          function cp(n) {
            if (n === void 0)
              return n;
            if (wi(n))
              return Oh(n);
            if (cs(n))
              return Zb(n);
            if (yt(n))
              return e6(n);
            if (Ny(n))
              return t6(n);
            if (vn(n))
              return r6(n);
            let o = gl(n.kind) ? t.createBaseNode(n.kind) : t.createBaseTokenNode(n.kind);
            o.flags |= n.flags & -9, o.transformFlags = n.transformFlags, Dn(o, n);
            for (let l in n)
              Jr(o, l) || !Jr(n, l) || (o[l] = n[l]);
            return o;
          }
          function n6(n, o, l) {
            return Na(yu(void 0, void 0, void 0, void 0, o ? [o] : [], void 0, Zs(n, true)), void 0, l ? [l] : []);
          }
          function Lc(n, o, l) {
            return Na(vu(void 0, void 0, o ? [o] : [], void 0, void 0, Zs(n, true)), void 0, l ? [l] : []);
          }
          function Rc() {
            return ui(Gt("0"));
          }
          function zh(n) {
            return zu(void 0, false, n);
          }
          function i6(n) {
            return na(void 0, false, to([Vu(false, void 0, n)]));
          }
          function a6(n, o) {
            return o === "undefined" ? Ye.createStrictEquality(n, Rc()) : Ye.createStrictEquality(mn(n), er(o));
          }
          function Ba(n, o, l) {
            return Cy(n) ? du(Xs(n, void 0, o), void 0, void 0, l) : Na(ta(n, o), void 0, l);
          }
          function s6(n, o, l) {
            return Ba(n, "bind", [o, ...l]);
          }
          function o6(n, o, l) {
            return Ba(n, "call", [o, ...l]);
          }
          function _6(n, o, l) {
            return Ba(n, "apply", [o, l]);
          }
          function io(n, o, l) {
            return Ba(Ut(n), o, l);
          }
          function Wh(n, o) {
            return Ba(n, "slice", o === void 0 ? [] : [za(o)]);
          }
          function Vh(n, o) {
            return Ba(n, "concat", o);
          }
          function u(n, o, l) {
            return io("Object", "defineProperty", [n, za(o), l]);
          }
          function b(n, o) {
            return io("Object", "getOwnPropertyDescriptor", [n, za(o)]);
          }
          function O(n, o, l) {
            return io("Reflect", "get", l ? [n, o, l] : [n, o]);
          }
          function j(n, o, l, p7) {
            return io("Reflect", "set", p7 ? [n, o, l, p7] : [n, o, l]);
          }
          function z(n, o, l) {
            return l ? (n.push(Fa(o, l)), true) : false;
          }
          function re2(n, o) {
            let l = [];
            z(l, "enumerable", za(n.enumerable)), z(l, "configurable", za(n.configurable));
            let p7 = z(l, "writable", za(n.writable));
            p7 = z(l, "value", n.value) || p7;
            let k = z(l, "get", n.get);
            return k = z(l, "set", n.set) || k, Y.assert(!(p7 && k), "A PropertyDescriptor may not be both an accessor descriptor and a data descriptor."), r_(l, !o);
          }
          function Ee(n, o) {
            switch (n.kind) {
              case 214:
                return qd(n, o);
              case 213:
                return Bd(n, n.type, o);
              case 231:
                return Zd(n, o, n.type);
              case 235:
                return Pu(n, o, n.type);
              case 232:
                return Au(n, o);
              case 356:
                return Bh(n, o);
            }
          }
          function qe(n) {
            return qo(n) && fs(n) && fs(getSourceMapRange(n)) && fs(getCommentRange(n)) && !Ke(getSyntheticLeadingComments(n)) && !Ke(getSyntheticTrailingComments(n));
          }
          function We(n, o) {
            let l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 15;
            return n && yd(n, l) && !qe(n) ? Ee(n, We(n.expression, o)) : o;
          }
          function $e(n, o, l) {
            if (!o)
              return n;
            let p7 = ym(o, o.label, tE(o.statement) ? $e(n, o.statement) : n);
            return l && l(o), p7;
          }
          function lt(n, o) {
            let l = Pl(n);
            switch (l.kind) {
              case 79:
                return o;
              case 108:
              case 8:
              case 9:
              case 10:
                return false;
              case 206:
                return l.elements.length !== 0;
              case 207:
                return l.properties.length > 0;
              default:
                return true;
            }
          }
          function Jt(n, o, l) {
            let p7 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, k = $o(n, 15), V, we;
            return Sf(k) ? (V = Or(), we = k) : nd(k) ? (V = Or(), we = l !== void 0 && l < 2 ? Rt(Ut("_super"), k) : k) : xi(k) & 8192 ? (V = Rc(), we = s().parenthesizeLeftSideOfAccess(k, false)) : bn(k) ? lt(k.expression, p7) ? (V = kn(o), we = ta(Rt(Ye.createAssignment(V, k.expression), k.expression), k.name), Rt(we, k)) : (V = k.expression, we = k) : gs(k) ? lt(k.expression, p7) ? (V = kn(o), we = pu(Rt(Ye.createAssignment(V, k.expression), k.expression), k.argumentExpression), Rt(we, k)) : (V = k.expression, we = k) : (V = Rc(), we = s().parenthesizeLeftSideOfAccess(n, false)), { target: we, thisArg: V };
          }
          function Lt(n, o) {
            return ta(gu(r_([ci(void 0, "value", [$n(void 0, void 0, n, void 0, void 0, void 0)], Zs([a_(o)]))])), "value");
          }
          function At(n) {
            return n.length > 10 ? Mc(n) : Qa(n, Ye.createComma);
          }
          function kr(n, o, l) {
            let p7 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, k = ml(n);
            if (k && yt(k) && !cs(k)) {
              let V = Sa(Rt(cp(k), k), k.parent);
              return p7 |= xi(k), l || (p7 |= 96), o || (p7 |= 3072), p7 && setEmitFlags(V, p7), V;
            }
            return $i(n);
          }
          function Fn(n, o, l) {
            return kr(n, o, l, 98304);
          }
          function di(n, o, l) {
            return kr(n, o, l, 32768);
          }
          function Ii(n, o, l) {
            return kr(n, o, l, 16384);
          }
          function _n(n, o, l) {
            return kr(n, o, l);
          }
          function qa(n, o, l, p7) {
            let k = ta(n, fs(o) ? o : cp(o));
            Rt(k, o);
            let V = 0;
            return p7 || (V |= 96), l || (V |= 3072), V && setEmitFlags(k, V), k;
          }
          function Hh(n, o, l, p7) {
            return n && rn(o, 1) ? qa(n, kr(o), l, p7) : Ii(o, l, p7);
          }
          function lp(n, o, l, p7) {
            let k = Ua(n, o, 0, l);
            return up(n, o, k, p7);
          }
          function Gh(n) {
            return Gn(n.expression) && n.expression.text === "use strict";
          }
          function wn() {
            return vd(a_(er("use strict")));
          }
          function Ua(n, o) {
            let l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, p7 = arguments.length > 3 ? arguments[3] : void 0;
            Y.assert(o.length === 0, "Prologue directives should be at the first statement in the target statements array");
            let k = false, V = n.length;
            for (; l < V; ) {
              let we = n[l];
              if (us(we))
                Gh(we) && (k = true), o.push(we);
              else
                break;
              l++;
            }
            return p7 && !k && o.push(wn()), l;
          }
          function up(n, o, l, p7) {
            let k = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : vp, V = n.length;
            for (; l !== void 0 && l < V; ) {
              let we = n[l];
              if (xi(we) & 2097152 && k(we))
                tr(o, p7 ? visitNode(we, p7, a3) : we);
              else
                break;
              l++;
            }
            return l;
          }
          function Qr(n) {
            return TE(n) ? n : Rt(Ne([wn(), ...n]), n);
          }
          function jc(n) {
            return Y.assert(me(n, s3), "Cannot lift nodes to a Block."), Xa(n) || Zs(n);
          }
          function Cs(n, o, l) {
            let p7 = l;
            for (; p7 < n.length && o(n[p7]); )
              p7++;
            return p7;
          }
          function $h(n, o) {
            if (!Ke(o))
              return n;
            let l = Cs(n, us, 0), p7 = Cs(n, _0, l), k = Cs(n, c0, p7), V = Cs(o, us, 0), we = Cs(o, _0, V), et = Cs(o, c0, we), ht = Cs(o, Tf, et);
            Y.assert(ht === o.length, "Expected declarations to be valid standard or custom prologues");
            let hn = _s(n) ? n.slice() : n;
            if (ht > et && hn.splice(k, 0, ...o.slice(et, ht)), et > we && hn.splice(p7, 0, ...o.slice(we, et)), we > V && hn.splice(l, 0, ...o.slice(V, we)), V > 0)
              if (l === 0)
                hn.splice(0, 0, ...o.slice(0, V));
              else {
                let Ni = /* @__PURE__ */ new Map();
                for (let ia = 0; ia < l; ia++) {
                  let Oi = n[ia];
                  Ni.set(Oi.expression.text, true);
                }
                for (let ia = V - 1; ia >= 0; ia--) {
                  let Oi = o[ia];
                  Ni.has(Oi.expression.text) || hn.unshift(Oi);
                }
              }
            return _s(n) ? Rt(Ne(hn, n.hasTrailingComma), n) : n;
          }
          function Kh(n, o) {
            var l;
            let p7;
            return typeof o == "number" ? p7 = $r(o) : p7 = o, Fo(n) ? wa(n, p7, n.name, n.constraint, n.default) : Vs(n) ? Ki(n, p7, n.dotDotDotToken, n.name, n.questionToken, n.type, n.initializer) : Gv(n) ? bt(n, p7, n.typeParameters, n.parameters, n.type) : Wl(n) ? St(n, p7, n.name, n.questionToken, n.type) : Bo(n) ? _t(n, p7, n.name, (l = n.questionToken) != null ? l : n.exclamationToken, n.type, n.initializer) : L8(n) ? Kt(n, p7, n.name, n.questionToken, n.typeParameters, n.parameters, n.type) : Vl(n) ? xe(n, p7, n.asteriskToken, n.name, n.questionToken, n.typeParameters, n.parameters, n.type, n.body) : nc(n) ? It(n, p7, n.parameters, n.body) : Gl(n) ? Ln(n, p7, n.name, n.parameters, n.type, n.body) : ic(n) ? Xi(n, p7, n.name, n.parameters, n.body) : Hv(n) ? bs(n, p7, n.parameters, n.type) : ad(n) ? Ud(n, p7, n.asteriskToken, n.name, n.typeParameters, n.parameters, n.type, n.body) : sd(n) ? zd(n, p7, n.typeParameters, n.parameters, n.type, n.equalsGreaterThanToken, n.body) : _d(n) ? xc(n, p7, n.name, n.typeParameters, n.heritageClauses, n.members) : zo(n) ? om(n, p7, n.declarationList) : Wo(n) ? ju(n, p7, n.asteriskToken, n.name, n.typeParameters, n.parameters, n.type, n.body) : _c(n) ? Ju(n, p7, n.name, n.typeParameters, n.heritageClauses, n.members) : eu(n) ? Cm(n, p7, n.name, n.typeParameters, n.heritageClauses, n.members) : n2(n) ? Ma(n, p7, n.name, n.typeParameters, n.type) : i22(n) ? La(n, p7, n.name, n.members) : Ea(n) ? Sr(n, p7, n.name, n.body) : s2(n) ? Nm(n, p7, n.isTypeOnly, n.name, n.moduleReference) : o2(n) ? Mm(n, p7, n.importClause, n.moduleSpecifier, n.assertClause) : Vo(n) ? Wu(n, p7, n.expression) : cc(n) ? Wm(n, p7, n.isTypeOnly, n.exportClause, n.moduleSpecifier, n.assertClause) : Y.assertNever(n);
          }
          function xt(n) {
            return n ? Ne(n) : void 0;
          }
          function Qt(n) {
            return typeof n == "string" ? Ut(n) : n;
          }
          function za(n) {
            return typeof n == "string" ? er(n) : typeof n == "number" ? Gt(n) : typeof n == "boolean" ? n ? ar() : oi() : n;
          }
          function Wa(n) {
            return n && s().parenthesizeExpressionForDisallowedComma(n);
          }
          function c6(n) {
            return typeof n == "number" ? pr(n) : n;
          }
          function Yn(n) {
            return n && c2(n) ? Rt(Dn(Du(), n), n) : n;
          }
          function Xh(n) {
            return typeof n == "string" || n && !Vi(n) ? Cc(n, void 0, void 0, void 0) : n;
          }
        }
        function JL(e, t) {
          return e !== t && Rt(e, t), e;
        }
        function FL(e, t) {
          return e !== t && (Dn(e, t), Rt(e, t)), e;
        }
        function ed(e) {
          switch (e) {
            case 347:
              return "type";
            case 345:
              return "returns";
            case 346:
              return "this";
            case 343:
              return "enum";
            case 333:
              return "author";
            case 335:
              return "class";
            case 336:
              return "public";
            case 337:
              return "private";
            case 338:
              return "protected";
            case 339:
              return "readonly";
            case 340:
              return "override";
            case 348:
              return "template";
            case 349:
              return "typedef";
            case 344:
              return "param";
            case 351:
              return "prop";
            case 341:
              return "callback";
            case 342:
              return "overload";
            case 331:
              return "augments";
            case 332:
              return "implements";
            default:
              return Y.fail(`Unsupported kind: ${Y.formatSyntaxKind(e)}`);
          }
        }
        function BL(e, t) {
          switch (Hn || (Hn = Po(99, false, 0)), e) {
            case 14:
              Hn.setText("`" + t + "`");
              break;
            case 15:
              Hn.setText("`" + t + "${");
              break;
            case 16:
              Hn.setText("}" + t + "${");
              break;
            case 17:
              Hn.setText("}" + t + "`");
              break;
          }
          let r = Hn.scan();
          if (r === 19 && (r = Hn.reScanTemplateToken(false)), Hn.isUnterminated())
            return Hn.setText(void 0), qv;
          let s;
          switch (r) {
            case 14:
            case 15:
            case 16:
            case 17:
              s = Hn.getTokenValue();
              break;
          }
          return s === void 0 || Hn.scan() !== 1 ? (Hn.setText(void 0), qv) : (Hn.setText(void 0), s);
        }
        function ai(e) {
          return e && yt(e) ? ec(e) : ye(e);
        }
        function ec(e) {
          return ye(e) & -67108865;
        }
        function qL(e, t) {
          return t | e.transformFlags & 134234112;
        }
        function ye(e) {
          if (!e)
            return 0;
          let t = e.transformFlags & ~w8(e.kind);
          return af(e) && vl(e.name) ? qL(e.name, t) : t;
        }
        function gt(e) {
          return e ? e.transformFlags : 0;
        }
        function E8(e) {
          let t = 0;
          for (let r of e)
            t |= ye(r);
          e.transformFlags = t;
        }
        function w8(e) {
          if (e >= 179 && e <= 202)
            return -2;
          switch (e) {
            case 210:
            case 211:
            case 206:
              return -2147450880;
            case 264:
              return -1941676032;
            case 166:
              return -2147483648;
            case 216:
              return -2072174592;
            case 215:
            case 259:
              return -1937940480;
            case 258:
              return -2146893824;
            case 260:
            case 228:
              return -2147344384;
            case 173:
              return -1937948672;
            case 169:
              return -2013249536;
            case 171:
            case 174:
            case 175:
              return -2005057536;
            case 131:
            case 148:
            case 160:
            case 144:
            case 152:
            case 149:
            case 134:
            case 153:
            case 114:
            case 165:
            case 168:
            case 170:
            case 176:
            case 177:
            case 178:
            case 261:
            case 262:
              return -2;
            case 207:
              return -2147278848;
            case 295:
              return -2147418112;
            case 203:
            case 204:
              return -2147450880;
            case 213:
            case 235:
            case 231:
            case 356:
            case 214:
            case 106:
              return -2147483648;
            case 208:
            case 209:
              return -2147483648;
            default:
              return -2147483648;
          }
        }
        function Fl(e) {
          return e.flags |= 8, e;
        }
        function UL(e, t, r) {
          let s, f, x, w, A, g, B, N, X, F;
          Ji(e) ? (x = "", w = e, A = e.length, g = t, B = r) : (Y.assert(t === "js" || t === "dts"), x = (t === "js" ? e.javascriptPath : e.declarationPath) || "", g = t === "js" ? e.javascriptMapPath : e.declarationMapPath, N = () => t === "js" ? e.javascriptText : e.declarationText, X = () => t === "js" ? e.javascriptMapText : e.declarationMapText, A = () => N().length, e.buildInfo && e.buildInfo.bundle && (Y.assert(r === void 0 || typeof r == "boolean"), s = r, f = t === "js" ? e.buildInfo.bundle.js : e.buildInfo.bundle.dts, F = e.oldFileOfCurrentEmit));
          let $ = F ? WL(Y.checkDefined(f)) : zL(f, s, A);
          return $.fileName = x, $.sourceMapPath = g, $.oldFileOfCurrentEmit = F, N && X ? (Object.defineProperty($, "text", { get: N }), Object.defineProperty($, "sourceMapText", { get: X })) : (Y.assert(!F), $.text = w != null ? w : "", $.sourceMapText = B), $;
        }
        function zL(e, t, r) {
          let s, f, x, w, A, g, B, N;
          for (let F of e ? e.sections : Bt)
            switch (F.kind) {
              case "prologue":
                s = tr(s, Rt(si.createUnparsedPrologue(F.data), F));
                break;
              case "emitHelpers":
                f = tr(f, getAllUnscopedEmitHelpers().get(F.data));
                break;
              case "no-default-lib":
                N = true;
                break;
              case "reference":
                x = tr(x, { pos: -1, end: -1, fileName: F.data });
                break;
              case "type":
                w = tr(w, { pos: -1, end: -1, fileName: F.data });
                break;
              case "type-import":
                w = tr(w, { pos: -1, end: -1, fileName: F.data, resolutionMode: 99 });
                break;
              case "type-require":
                w = tr(w, { pos: -1, end: -1, fileName: F.data, resolutionMode: 1 });
                break;
              case "lib":
                A = tr(A, { pos: -1, end: -1, fileName: F.data });
                break;
              case "prepend":
                let $;
                for (let ae of F.texts)
                  (!t || ae.kind !== "internal") && ($ = tr($, Rt(si.createUnparsedTextLike(ae.data, ae.kind === "internal"), ae)));
                g = jr(g, $), B = tr(B, si.createUnparsedPrepend(F.data, $ != null ? $ : Bt));
                break;
              case "internal":
                if (t) {
                  B || (B = []);
                  break;
                }
              case "text":
                B = tr(B, Rt(si.createUnparsedTextLike(F.data, F.kind === "internal"), F));
                break;
              default:
                Y.assertNever(F);
            }
          if (!B) {
            let F = si.createUnparsedTextLike(void 0, false);
            $f(F, 0, typeof r == "function" ? r() : r), B = [F];
          }
          let X = dc.createUnparsedSource(s != null ? s : Bt, void 0, B);
          return Q_(s, X), Q_(B, X), Q_(g, X), X.hasNoDefaultLib = N, X.helpers = f, X.referencedFiles = x || Bt, X.typeReferenceDirectives = w, X.libReferenceDirectives = A || Bt, X;
        }
        function WL(e) {
          let t, r;
          for (let f of e.sections)
            switch (f.kind) {
              case "internal":
              case "text":
                t = tr(t, Rt(si.createUnparsedTextLike(f.data, f.kind === "internal"), f));
                break;
              case "no-default-lib":
              case "reference":
              case "type":
              case "type-import":
              case "type-require":
              case "lib":
                r = tr(r, Rt(si.createUnparsedSyntheticReference(f), f));
                break;
              case "prologue":
              case "emitHelpers":
              case "prepend":
                break;
              default:
                Y.assertNever(f);
            }
          let s = si.createUnparsedSource(Bt, r, t != null ? t : Bt);
          return Q_(r, s), Q_(t, s), s.helpers = Ze(e.sources && e.sources.helpers, (f) => getAllUnscopedEmitHelpers().get(f)), s;
        }
        function VL(e, t, r, s, f, x) {
          return Ji(e) ? A8(void 0, e, r, s, void 0, t, f, x) : C8(e, t, r, s, f, x);
        }
        function C8(e, t, r, s, f, x, w, A) {
          let g = dc.createInputFiles();
          g.javascriptPath = t, g.javascriptMapPath = r, g.declarationPath = s, g.declarationMapPath = f, g.buildInfoPath = x;
          let B = /* @__PURE__ */ new Map(), N = (ae) => {
            if (ae === void 0)
              return;
            let Te = B.get(ae);
            return Te === void 0 && (Te = e(ae), B.set(ae, Te !== void 0 ? Te : false)), Te !== false ? Te : void 0;
          }, X = (ae) => {
            let Te = N(ae);
            return Te !== void 0 ? Te : `/* Input file ${ae} was missing */\r
`;
          }, F;
          return Object.defineProperties(g, { javascriptText: { get: () => X(t) }, javascriptMapText: { get: () => N(r) }, declarationText: { get: () => X(Y.checkDefined(s)) }, declarationMapText: { get: () => N(f) }, buildInfo: { get: () => {
            var ae, Te;
            if (F === void 0 && x)
              if (w != null && w.getBuildInfo)
                F = (ae = w.getBuildInfo(x, A.configFilePath)) != null ? ae : false;
              else {
                let Se = N(x);
                F = Se !== void 0 && (Te = getBuildInfo(x, Se)) != null ? Te : false;
              }
            return F || void 0;
          } } }), g;
        }
        function A8(e, t, r, s, f, x, w, A, g, B, N) {
          let X = dc.createInputFiles();
          return X.javascriptPath = e, X.javascriptText = t, X.javascriptMapPath = r, X.javascriptMapText = s, X.declarationPath = f, X.declarationText = x, X.declarationMapPath = w, X.declarationMapText = A, X.buildInfoPath = g, X.buildInfo = B, X.oldFileOfCurrentEmit = N, X;
        }
        function HL(e, t, r) {
          return new (D8 || (D8 = lr.getSourceMapSourceConstructor()))(e, t, r);
        }
        function Dn(e, t) {
          if (e.original = t, t) {
            let r = t.emitNode;
            r && (e.emitNode = GL(r, e.emitNode));
          }
          return e;
        }
        function GL(e, t) {
          let { flags: r, internalFlags: s, leadingComments: f, trailingComments: x, commentRange: w, sourceMapRange: A, tokenSourceMapRanges: g, constantValue: B, helpers: N, startsOnNewLine: X, snippetElement: F } = e;
          if (t || (t = {}), f && (t.leadingComments = jr(f.slice(), t.leadingComments)), x && (t.trailingComments = jr(x.slice(), t.trailingComments)), r && (t.flags = r), s && (t.internalFlags = s & -9), w && (t.commentRange = w), A && (t.sourceMapRange = A), g && (t.tokenSourceMapRanges = $L(g, t.tokenSourceMapRanges)), B !== void 0 && (t.constantValue = B), N)
            for (let $ of N)
              t.helpers = g_(t.helpers, $);
          return X !== void 0 && (t.startsOnNewLine = X), F !== void 0 && (t.snippetElement = F), t;
        }
        function $L(e, t) {
          t || (t = []);
          for (let r in e)
            t[r] = e[r];
          return t;
        }
        var Bl, Fv, Bv, Hn, qv, tc, P8, si, D8, KL = D({ "src/compiler/factory/nodeFactory.ts"() {
          nn(), Bl = 0, Fv = ((e) => (e[e.None = 0] = "None", e[e.NoParenthesizerRules = 1] = "NoParenthesizerRules", e[e.NoNodeConverters = 2] = "NoNodeConverters", e[e.NoIndentationOnFreshPropertyAccess = 4] = "NoIndentationOnFreshPropertyAccess", e[e.NoOriginalNode = 8] = "NoOriginalNode", e))(Fv || {}), Bv = [], qv = {}, tc = S8(), P8 = { createBaseSourceFileNode: (e) => Fl(tc.createBaseSourceFileNode(e)), createBaseIdentifierNode: (e) => Fl(tc.createBaseIdentifierNode(e)), createBasePrivateIdentifierNode: (e) => Fl(tc.createBasePrivateIdentifierNode(e)), createBaseTokenNode: (e) => Fl(tc.createBaseTokenNode(e)), createBaseNode: (e) => Fl(tc.createBaseNode(e)) }, si = Zf(4, P8);
        } });
        function zs(e) {
          return e.kind === 8;
        }
        function Uv(e) {
          return e.kind === 9;
        }
        function Gn(e) {
          return e.kind === 10;
        }
        function td(e) {
          return e.kind === 11;
        }
        function QL(e) {
          return e.kind === 13;
        }
        function k8(e) {
          return e.kind === 14;
        }
        function ZL(e) {
          return e.kind === 15;
        }
        function eR(e) {
          return e.kind === 16;
        }
        function tR(e) {
          return e.kind === 17;
        }
        function rR(e) {
          return e.kind === 25;
        }
        function I8(e) {
          return e.kind === 27;
        }
        function zv(e) {
          return e.kind === 39;
        }
        function Wv(e) {
          return e.kind === 40;
        }
        function nR(e) {
          return e.kind === 41;
        }
        function rd(e) {
          return e.kind === 53;
        }
        function ql(e) {
          return e.kind === 57;
        }
        function iR(e) {
          return e.kind === 58;
        }
        function aR(e) {
          return e.kind === 28;
        }
        function sR(e) {
          return e.kind === 38;
        }
        function yt(e) {
          return e.kind === 79;
        }
        function vn(e) {
          return e.kind === 80;
        }
        function N8(e) {
          return e.kind === 93;
        }
        function oR(e) {
          return e.kind === 88;
        }
        function Ul(e) {
          return e.kind === 132;
        }
        function _R(e) {
          return e.kind === 129;
        }
        function cR(e) {
          return e.kind === 133;
        }
        function O8(e) {
          return e.kind === 146;
        }
        function lR(e) {
          return e.kind === 124;
        }
        function uR(e) {
          return e.kind === 126;
        }
        function pR(e) {
          return e.kind === 161;
        }
        function fR(e) {
          return e.kind === 127;
        }
        function nd(e) {
          return e.kind === 106;
        }
        function M8(e) {
          return e.kind === 100;
        }
        function dR(e) {
          return e.kind === 82;
        }
        function rc(e) {
          return e.kind === 163;
        }
        function Ws(e) {
          return e.kind === 164;
        }
        function Fo(e) {
          return e.kind === 165;
        }
        function Vs(e) {
          return e.kind === 166;
        }
        function zl(e) {
          return e.kind === 167;
        }
        function Wl(e) {
          return e.kind === 168;
        }
        function Bo(e) {
          return e.kind === 169;
        }
        function L8(e) {
          return e.kind === 170;
        }
        function Vl(e) {
          return e.kind === 171;
        }
        function Hl(e) {
          return e.kind === 172;
        }
        function nc(e) {
          return e.kind === 173;
        }
        function Gl(e) {
          return e.kind === 174;
        }
        function ic(e) {
          return e.kind === 175;
        }
        function Vv(e) {
          return e.kind === 176;
        }
        function R8(e) {
          return e.kind === 177;
        }
        function Hv(e) {
          return e.kind === 178;
        }
        function j8(e) {
          return e.kind === 179;
        }
        function ac(e) {
          return e.kind === 180;
        }
        function $l(e) {
          return e.kind === 181;
        }
        function Gv(e) {
          return e.kind === 182;
        }
        function J8(e) {
          return e.kind === 183;
        }
        function id(e) {
          return e.kind === 184;
        }
        function F8(e) {
          return e.kind === 185;
        }
        function B8(e) {
          return e.kind === 186;
        }
        function $v(e) {
          return e.kind === 199;
        }
        function q8(e) {
          return e.kind === 187;
        }
        function U8(e) {
          return e.kind === 188;
        }
        function z8(e) {
          return e.kind === 189;
        }
        function W8(e) {
          return e.kind === 190;
        }
        function V8(e) {
          return e.kind === 191;
        }
        function H8(e) {
          return e.kind === 192;
        }
        function Kv(e) {
          return e.kind === 193;
        }
        function Xv(e) {
          return e.kind === 194;
        }
        function G8(e) {
          return e.kind === 195;
        }
        function $8(e) {
          return e.kind === 196;
        }
        function K8(e) {
          return e.kind === 197;
        }
        function Yv(e) {
          return e.kind === 198;
        }
        function Kl(e) {
          return e.kind === 202;
        }
        function mR(e) {
          return e.kind === 201;
        }
        function hR(e) {
          return e.kind === 200;
        }
        function gR(e) {
          return e.kind === 203;
        }
        function yR(e) {
          return e.kind === 204;
        }
        function Xl(e) {
          return e.kind === 205;
        }
        function Yl(e) {
          return e.kind === 206;
        }
        function Hs(e) {
          return e.kind === 207;
        }
        function bn(e) {
          return e.kind === 208;
        }
        function gs(e) {
          return e.kind === 209;
        }
        function sc(e) {
          return e.kind === 210;
        }
        function X8(e) {
          return e.kind === 211;
        }
        function Y8(e) {
          return e.kind === 212;
        }
        function vR(e) {
          return e.kind === 213;
        }
        function qo(e) {
          return e.kind === 214;
        }
        function ad(e) {
          return e.kind === 215;
        }
        function sd(e) {
          return e.kind === 216;
        }
        function bR(e) {
          return e.kind === 217;
        }
        function TR(e) {
          return e.kind === 218;
        }
        function Qv(e) {
          return e.kind === 219;
        }
        function SR(e) {
          return e.kind === 220;
        }
        function od(e) {
          return e.kind === 221;
        }
        function Q8(e) {
          return e.kind === 222;
        }
        function ur(e) {
          return e.kind === 223;
        }
        function xR(e) {
          return e.kind === 224;
        }
        function ER(e) {
          return e.kind === 225;
        }
        function wR(e) {
          return e.kind === 226;
        }
        function Zv(e) {
          return e.kind === 227;
        }
        function _d(e) {
          return e.kind === 228;
        }
        function cd(e) {
          return e.kind === 229;
        }
        function e2(e) {
          return e.kind === 230;
        }
        function CR(e) {
          return e.kind === 231;
        }
        function AR(e) {
          return e.kind === 235;
        }
        function Uo(e) {
          return e.kind === 232;
        }
        function t2(e) {
          return e.kind === 233;
        }
        function PR(e) {
          return e.kind === 234;
        }
        function Z8(e) {
          return e.kind === 356;
        }
        function oc(e) {
          return e.kind === 357;
        }
        function DR(e) {
          return e.kind === 236;
        }
        function kR(e) {
          return e.kind === 237;
        }
        function Ql(e) {
          return e.kind === 238;
        }
        function zo(e) {
          return e.kind === 240;
        }
        function IR(e) {
          return e.kind === 239;
        }
        function Zl(e) {
          return e.kind === 241;
        }
        function NR(e) {
          return e.kind === 242;
        }
        function OR(e) {
          return e.kind === 243;
        }
        function MR(e) {
          return e.kind === 244;
        }
        function eE(e) {
          return e.kind === 245;
        }
        function LR(e) {
          return e.kind === 246;
        }
        function RR(e) {
          return e.kind === 247;
        }
        function jR(e) {
          return e.kind === 248;
        }
        function JR(e) {
          return e.kind === 249;
        }
        function FR(e) {
          return e.kind === 250;
        }
        function BR(e) {
          return e.kind === 251;
        }
        function qR(e) {
          return e.kind === 252;
        }
        function tE(e) {
          return e.kind === 253;
        }
        function UR(e) {
          return e.kind === 254;
        }
        function zR(e) {
          return e.kind === 255;
        }
        function WR(e) {
          return e.kind === 256;
        }
        function Vi(e) {
          return e.kind === 257;
        }
        function r2(e) {
          return e.kind === 258;
        }
        function Wo(e) {
          return e.kind === 259;
        }
        function _c(e) {
          return e.kind === 260;
        }
        function eu(e) {
          return e.kind === 261;
        }
        function n2(e) {
          return e.kind === 262;
        }
        function i22(e) {
          return e.kind === 263;
        }
        function Ea(e) {
          return e.kind === 264;
        }
        function rE(e) {
          return e.kind === 265;
        }
        function VR(e) {
          return e.kind === 266;
        }
        function a2(e) {
          return e.kind === 267;
        }
        function s2(e) {
          return e.kind === 268;
        }
        function o2(e) {
          return e.kind === 269;
        }
        function HR(e) {
          return e.kind === 270;
        }
        function GR(e) {
          return e.kind === 298;
        }
        function $R(e) {
          return e.kind === 296;
        }
        function KR(e) {
          return e.kind === 297;
        }
        function _2(e) {
          return e.kind === 271;
        }
        function ld(e) {
          return e.kind === 277;
        }
        function XR(e) {
          return e.kind === 272;
        }
        function nE(e) {
          return e.kind === 273;
        }
        function Vo(e) {
          return e.kind === 274;
        }
        function cc(e) {
          return e.kind === 275;
        }
        function iE(e) {
          return e.kind === 276;
        }
        function aE(e) {
          return e.kind === 278;
        }
        function YR(e) {
          return e.kind === 279;
        }
        function c2(e) {
          return e.kind === 355;
        }
        function QR(e) {
          return e.kind === 360;
        }
        function ZR(e) {
          return e.kind === 358;
        }
        function ej(e) {
          return e.kind === 359;
        }
        function ud(e) {
          return e.kind === 280;
        }
        function l2(e) {
          return e.kind === 281;
        }
        function tj(e) {
          return e.kind === 282;
        }
        function tu(e) {
          return e.kind === 283;
        }
        function sE(e) {
          return e.kind === 284;
        }
        function pd(e) {
          return e.kind === 285;
        }
        function u2(e) {
          return e.kind === 286;
        }
        function rj(e) {
          return e.kind === 287;
        }
        function nj(e) {
          return e.kind === 288;
        }
        function p2(e) {
          return e.kind === 289;
        }
        function ij(e) {
          return e.kind === 290;
        }
        function aj(e) {
          return e.kind === 291;
        }
        function sj(e) {
          return e.kind === 292;
        }
        function oE(e) {
          return e.kind === 293;
        }
        function ru(e) {
          return e.kind === 294;
        }
        function oj(e) {
          return e.kind === 295;
        }
        function lc(e) {
          return e.kind === 299;
        }
        function nu(e) {
          return e.kind === 300;
        }
        function _E(e) {
          return e.kind === 301;
        }
        function cE(e) {
          return e.kind === 302;
        }
        function _j(e) {
          return e.kind === 304;
        }
        function wi(e) {
          return e.kind === 308;
        }
        function cj(e) {
          return e.kind === 309;
        }
        function lj(e) {
          return e.kind === 310;
        }
        function lE(e) {
          return e.kind === 312;
        }
        function fd(e) {
          return e.kind === 313;
        }
        function uc(e) {
          return e.kind === 314;
        }
        function uj(e) {
          return e.kind === 327;
        }
        function pj(e) {
          return e.kind === 328;
        }
        function fj(e) {
          return e.kind === 329;
        }
        function dj(e) {
          return e.kind === 315;
        }
        function mj(e) {
          return e.kind === 316;
        }
        function uE(e) {
          return e.kind === 317;
        }
        function hj(e) {
          return e.kind === 318;
        }
        function gj(e) {
          return e.kind === 319;
        }
        function dd(e) {
          return e.kind === 320;
        }
        function yj(e) {
          return e.kind === 321;
        }
        function vj(e) {
          return e.kind === 322;
        }
        function Ho(e) {
          return e.kind === 323;
        }
        function f2(e) {
          return e.kind === 325;
        }
        function iu(e) {
          return e.kind === 326;
        }
        function md(e) {
          return e.kind === 331;
        }
        function bj(e) {
          return e.kind === 333;
        }
        function pE(e) {
          return e.kind === 335;
        }
        function Tj(e) {
          return e.kind === 341;
        }
        function d2(e) {
          return e.kind === 336;
        }
        function m2(e) {
          return e.kind === 337;
        }
        function h22(e) {
          return e.kind === 338;
        }
        function g2(e) {
          return e.kind === 339;
        }
        function fE(e) {
          return e.kind === 340;
        }
        function y2(e) {
          return e.kind === 342;
        }
        function v2(e) {
          return e.kind === 334;
        }
        function Sj(e) {
          return e.kind === 350;
        }
        function dE(e) {
          return e.kind === 343;
        }
        function pc(e) {
          return e.kind === 344;
        }
        function b2(e) {
          return e.kind === 345;
        }
        function mE(e) {
          return e.kind === 346;
        }
        function au(e) {
          return e.kind === 347;
        }
        function Go(e) {
          return e.kind === 348;
        }
        function xj(e) {
          return e.kind === 349;
        }
        function Ej(e) {
          return e.kind === 330;
        }
        function wj(e) {
          return e.kind === 351;
        }
        function hE(e) {
          return e.kind === 332;
        }
        function T2(e) {
          return e.kind === 353;
        }
        function Cj(e) {
          return e.kind === 352;
        }
        function Aj(e) {
          return e.kind === 354;
        }
        var Pj = D({ "src/compiler/factory/nodeTests.ts"() {
          nn();
        } });
        function Dj(e) {
          return e.createExportDeclaration(void 0, false, e.createNamedExports([]), void 0);
        }
        function hd(e, t, r, s) {
          if (Ws(r))
            return Rt(e.createElementAccessExpression(t, r.expression), s);
          {
            let f = Rt(js(r) ? e.createPropertyAccessExpression(t, r) : e.createElementAccessExpression(t, r), r);
            return addEmitFlags(f, 128), f;
          }
        }
        function S2(e, t) {
          let r = dc.createIdentifier(e || "React");
          return Sa(r, fl(t)), r;
        }
        function x2(e, t, r) {
          if (rc(t)) {
            let s = x2(e, t.left, r), f = e.createIdentifier(qr(t.right));
            return f.escapedText = t.right.escapedText, e.createPropertyAccessExpression(s, f);
          } else
            return S2(qr(t), r);
        }
        function gE(e, t, r, s) {
          return t ? x2(e, t, s) : e.createPropertyAccessExpression(S2(r, s), "createElement");
        }
        function kj(e, t, r, s) {
          return t ? x2(e, t, s) : e.createPropertyAccessExpression(S2(r, s), "Fragment");
        }
        function Ij(e, t, r, s, f, x) {
          let w = [r];
          if (s && w.push(s), f && f.length > 0)
            if (s || w.push(e.createNull()), f.length > 1)
              for (let A of f)
                vd(A), w.push(A);
            else
              w.push(f[0]);
          return Rt(e.createCallExpression(t, void 0, w), x);
        }
        function Nj(e, t, r, s, f, x, w) {
          let g = [kj(e, r, s, x), e.createNull()];
          if (f && f.length > 0)
            if (f.length > 1)
              for (let B of f)
                vd(B), g.push(B);
            else
              g.push(f[0]);
          return Rt(e.createCallExpression(gE(e, t, s, x), void 0, g), w);
        }
        function Oj(e, t, r) {
          if (r2(t)) {
            let s = fo(t.declarations), f = e.updateVariableDeclaration(s, s.name, void 0, void 0, r);
            return Rt(e.createVariableStatement(void 0, e.updateVariableDeclarationList(t, [f])), t);
          } else {
            let s = Rt(e.createAssignment(t, r), t);
            return Rt(e.createExpressionStatement(s), t);
          }
        }
        function Mj(e, t, r) {
          return Ql(t) ? e.updateBlock(t, Rt(e.createNodeArray([r, ...t.statements]), t.statements)) : e.createBlock(e.createNodeArray([t, r]), true);
        }
        function yE(e, t) {
          if (rc(t)) {
            let r = yE(e, t.left), s = Sa(Rt(e.cloneNode(t.right), t.right), t.right.parent);
            return Rt(e.createPropertyAccessExpression(r, s), t);
          } else
            return Sa(Rt(e.cloneNode(t), t), t.parent);
        }
        function vE(e, t) {
          return yt(t) ? e.createStringLiteralFromNode(t) : Ws(t) ? Sa(Rt(e.cloneNode(t.expression), t.expression), t.expression.parent) : Sa(Rt(e.cloneNode(t), t), t.parent);
        }
        function Lj(e, t, r, s, f) {
          let { firstAccessor: x, getAccessor: w, setAccessor: A } = W0(t, r);
          if (r === x)
            return Rt(e.createObjectDefinePropertyCall(s, vE(e, r.name), e.createPropertyDescriptor({ enumerable: e.createFalse(), configurable: true, get: w && Rt(Dn(e.createFunctionExpression(sf(w), void 0, void 0, void 0, w.parameters, void 0, w.body), w), w), set: A && Rt(Dn(e.createFunctionExpression(sf(A), void 0, void 0, void 0, A.parameters, void 0, A.body), A), A) }, !f)), x);
        }
        function Rj(e, t, r) {
          return Dn(Rt(e.createAssignment(hd(e, r, t.name, t.name), t.initializer), t), t);
        }
        function jj(e, t, r) {
          return Dn(Rt(e.createAssignment(hd(e, r, t.name, t.name), e.cloneNode(t.name)), t), t);
        }
        function Jj(e, t, r) {
          return Dn(Rt(e.createAssignment(hd(e, r, t.name, t.name), Dn(Rt(e.createFunctionExpression(sf(t), t.asteriskToken, void 0, void 0, t.parameters, void 0, t.body), t), t)), t), t);
        }
        function Fj(e, t, r, s) {
          switch (r.name && vn(r.name) && Y.failBadSyntaxKind(r.name, "Private identifiers are not allowed in object literals."), r.kind) {
            case 174:
            case 175:
              return Lj(e, t.properties, r, s, !!t.multiLine);
            case 299:
              return Rj(e, r, s);
            case 300:
              return jj(e, r, s);
            case 171:
              return Jj(e, r, s);
          }
        }
        function Bj(e, t, r, s, f) {
          let x = t.operator;
          Y.assert(x === 45 || x === 46, "Expected 'node' to be a pre- or post-increment or pre- or post-decrement expression");
          let w = e.createTempVariable(s);
          r = e.createAssignment(w, r), Rt(r, t.operand);
          let A = od(t) ? e.createPrefixUnaryExpression(x, w) : e.createPostfixUnaryExpression(w, x);
          return Rt(A, t), f && (A = e.createAssignment(f, A), Rt(A, t)), r = e.createComma(r, A), Rt(r, t), Q8(t) && (r = e.createComma(r, w), Rt(r, t)), r;
        }
        function qj(e) {
          return (xi(e) & 65536) !== 0;
        }
        function E2(e) {
          return (xi(e) & 32768) !== 0;
        }
        function Uj(e) {
          return (xi(e) & 16384) !== 0;
        }
        function bE(e) {
          return Gn(e.expression) && e.expression.text === "use strict";
        }
        function TE(e) {
          for (let t of e)
            if (us(t)) {
              if (bE(t))
                return t;
            } else
              break;
        }
        function SE(e) {
          let t = pa(e);
          return t !== void 0 && us(t) && bE(t);
        }
        function gd(e) {
          return e.kind === 223 && e.operatorToken.kind === 27;
        }
        function zj(e) {
          return gd(e) || oc(e);
        }
        function xE(e) {
          return qo(e) && Pr(e) && !!_f(e);
        }
        function Wj(e) {
          let t = cf(e);
          return Y.assertIsDefined(t), t;
        }
        function yd(e) {
          let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 15;
          switch (e.kind) {
            case 214:
              return t & 16 && xE(e) ? false : (t & 1) !== 0;
            case 213:
            case 231:
            case 230:
            case 235:
              return (t & 2) !== 0;
            case 232:
              return (t & 4) !== 0;
            case 356:
              return (t & 8) !== 0;
          }
          return false;
        }
        function $o(e) {
          let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 15;
          for (; yd(e, t); )
            e = e.expression;
          return e;
        }
        function Vj(e) {
          let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 15, r = e.parent;
          for (; yd(r, t); )
            r = r.parent, Y.assert(r);
          return r;
        }
        function Hj(e) {
          return $o(e, 6);
        }
        function vd(e) {
          return setStartsOnNewLine(e, true);
        }
        function EE(e) {
          let t = ul(e, wi), r = t && t.emitNode;
          return r && r.externalHelpersModuleName;
        }
        function Gj(e) {
          let t = ul(e, wi), r = t && t.emitNode;
          return !!r && (!!r.externalHelpersModuleName || !!r.externalHelpers);
        }
        function $j(e, t, r, s, f, x, w) {
          if (s.importHelpers && Yy(r, s)) {
            let A, g = Ei(s);
            if (g >= 5 && g <= 99 || r.impliedNodeFormat === 99) {
              let B = getEmitHelpers(r);
              if (B) {
                let N = [];
                for (let X of B)
                  if (!X.scoped) {
                    let F = X.importName;
                    F && qn(N, F);
                  }
                if (Ke(N)) {
                  N.sort(ri), A = e.createNamedImports(Ze(N, ($) => m3(r, $) ? e.createImportSpecifier(false, void 0, e.createIdentifier($)) : e.createImportSpecifier(false, e.createIdentifier($), t.getUnscopedHelperName($))));
                  let X = ul(r, wi), F = getOrCreateEmitNode(X);
                  F.externalHelpers = true;
                }
              }
            } else {
              let B = wE(e, r, s, f, x || w);
              B && (A = e.createNamespaceImport(B));
            }
            if (A) {
              let B = e.createImportDeclaration(void 0, e.createImportClause(false, void 0, A), e.createStringLiteral(Kf), void 0);
              return addInternalEmitFlags(B, 2), B;
            }
          }
        }
        function wE(e, t, r, s, f) {
          if (r.importHelpers && Yy(t, r)) {
            let x = EE(t);
            if (x)
              return x;
            let w = Ei(r), A = (s || ov(r) && f) && w !== 4 && (w < 5 || t.impliedNodeFormat === 1);
            if (!A) {
              let g = getEmitHelpers(t);
              if (g) {
                for (let B of g)
                  if (!B.scoped) {
                    A = true;
                    break;
                  }
              }
            }
            if (A) {
              let g = ul(t, wi), B = getOrCreateEmitNode(g);
              return B.externalHelpersModuleName || (B.externalHelpersModuleName = e.createUniqueName(Kf));
            }
          }
        }
        function Kj(e, t, r) {
          let s = Q3(t);
          if (s && !Z3(t) && !b3(t)) {
            let f = s.name;
            return cs(f) ? f : e.createIdentifier(No(r, f) || qr(f));
          }
          if (t.kind === 269 && t.importClause || t.kind === 275 && t.moduleSpecifier)
            return e.getGeneratedNameForNode(t);
        }
        function Xj(e, t, r, s, f, x) {
          let w = E0(t);
          if (w && Gn(w))
            return Qj(t, s, e, f, x) || Yj(e, w, r) || e.cloneNode(w);
        }
        function Yj(e, t, r) {
          let s = r.renamedDependencies && r.renamedDependencies.get(t.text);
          return s ? e.createStringLiteral(s) : void 0;
        }
        function CE(e, t, r, s) {
          if (t) {
            if (t.moduleName)
              return e.createStringLiteral(t.moduleName);
            if (!t.isDeclarationFile && B0(s))
              return e.createStringLiteral(F0(r, t.fileName));
          }
        }
        function Qj(e, t, r, s, f) {
          return CE(r, s.getExternalModuleFileFromDeclaration(e), t, f);
        }
        function AE(e) {
          if (Fy(e))
            return e.initializer;
          if (lc(e)) {
            let t = e.initializer;
            return ms(t, true) ? t.right : void 0;
          }
          if (nu(e))
            return e.objectAssignmentInitializer;
          if (ms(e, true))
            return e.right;
          if (Zv(e))
            return AE(e.expression);
        }
        function Ko(e) {
          if (Fy(e))
            return e.name;
          if (jy(e)) {
            switch (e.kind) {
              case 299:
                return Ko(e.initializer);
              case 300:
                return e.name;
              case 301:
                return Ko(e.expression);
            }
            return;
          }
          return ms(e, true) ? Ko(e.left) : Zv(e) ? Ko(e.expression) : e;
        }
        function Zj(e) {
          switch (e.kind) {
            case 166:
            case 205:
              return e.dotDotDotToken;
            case 227:
            case 301:
              return e;
          }
        }
        function eJ(e) {
          let t = PE(e);
          return Y.assert(!!t || _E(e), "Invalid property name for binding element."), t;
        }
        function PE(e) {
          switch (e.kind) {
            case 205:
              if (e.propertyName) {
                let r = e.propertyName;
                return vn(r) ? Y.failBadSyntaxKind(r) : Ws(r) && DE(r.expression) ? r.expression : r;
              }
              break;
            case 299:
              if (e.name) {
                let r = e.name;
                return vn(r) ? Y.failBadSyntaxKind(r) : Ws(r) && DE(r.expression) ? r.expression : r;
              }
              break;
            case 301:
              return e.name && vn(e.name) ? Y.failBadSyntaxKind(e.name) : e.name;
          }
          let t = Ko(e);
          if (t && vl(t))
            return t;
        }
        function DE(e) {
          let t = e.kind;
          return t === 10 || t === 8;
        }
        function kE(e) {
          switch (e.kind) {
            case 203:
            case 204:
            case 206:
              return e.elements;
            case 207:
              return e.properties;
          }
        }
        function w2(e) {
          if (e) {
            let t = e;
            for (; ; ) {
              if (yt(t) || !t.body)
                return yt(t) ? t : t.name;
              t = t.body;
            }
          }
        }
        function tJ(e) {
          let t = e.kind;
          return t === 173 || t === 175;
        }
        function IE(e) {
          let t = e.kind;
          return t === 173 || t === 174 || t === 175;
        }
        function rJ(e) {
          let t = e.kind;
          return t === 299 || t === 300 || t === 259 || t === 173 || t === 178 || t === 172 || t === 279 || t === 240 || t === 261 || t === 262 || t === 263 || t === 264 || t === 268 || t === 269 || t === 267 || t === 275 || t === 274;
        }
        function nJ(e) {
          let t = e.kind;
          return t === 172 || t === 299 || t === 300 || t === 279 || t === 267;
        }
        function iJ(e) {
          return ql(e) || rd(e);
        }
        function aJ(e) {
          return yt(e) || Xv(e);
        }
        function sJ(e) {
          return O8(e) || zv(e) || Wv(e);
        }
        function oJ(e) {
          return ql(e) || zv(e) || Wv(e);
        }
        function _J(e) {
          return yt(e) || Gn(e);
        }
        function cJ(e) {
          let t = e.kind;
          return t === 104 || t === 110 || t === 95 || Iy(e) || od(e);
        }
        function lJ(e) {
          return e === 42;
        }
        function uJ(e) {
          return e === 41 || e === 43 || e === 44;
        }
        function pJ(e) {
          return lJ(e) || uJ(e);
        }
        function fJ(e) {
          return e === 39 || e === 40;
        }
        function dJ(e) {
          return fJ(e) || pJ(e);
        }
        function mJ(e) {
          return e === 47 || e === 48 || e === 49;
        }
        function hJ(e) {
          return mJ(e) || dJ(e);
        }
        function gJ(e) {
          return e === 29 || e === 32 || e === 31 || e === 33 || e === 102 || e === 101;
        }
        function yJ(e) {
          return gJ(e) || hJ(e);
        }
        function vJ(e) {
          return e === 34 || e === 36 || e === 35 || e === 37;
        }
        function bJ(e) {
          return vJ(e) || yJ(e);
        }
        function TJ(e) {
          return e === 50 || e === 51 || e === 52;
        }
        function SJ(e) {
          return TJ(e) || bJ(e);
        }
        function xJ(e) {
          return e === 55 || e === 56;
        }
        function EJ(e) {
          return xJ(e) || SJ(e);
        }
        function wJ(e) {
          return e === 60 || EJ(e) || G_(e);
        }
        function CJ(e) {
          return wJ(e) || e === 27;
        }
        function AJ(e) {
          return CJ(e.kind);
        }
        function PJ(e, t, r, s, f, x) {
          let w = new OE(e, t, r, s, f, x);
          return A;
          function A(g, B) {
            let N = { value: void 0 }, X = [Td.enter], F = [g], $ = [void 0], ae = 0;
            for (; X[ae] !== Td.done; )
              ae = X[ae](w, ae, X, F, $, N, B);
            return Y.assertEqual(ae, 0), N.value;
          }
        }
        function NE(e) {
          return e === 93 || e === 88;
        }
        function DJ(e) {
          let t = e.kind;
          return NE(t);
        }
        function kJ(e) {
          let t = e.kind;
          return Wi(t) && !NE(t);
        }
        function IJ(e, t) {
          if (t !== void 0)
            return t.length === 0 ? t : Rt(e.createNodeArray([], t.hasTrailingComma), t);
        }
        function NJ(e) {
          var t;
          let r = e.emitNode.autoGenerate;
          if (r.flags & 4) {
            let s = r.id, f = e, x = f.original;
            for (; x; ) {
              f = x;
              let w = (t = f.emitNode) == null ? void 0 : t.autoGenerate;
              if (js(f) && (w === void 0 || w.flags & 4 && w.id !== s))
                break;
              x = f.original;
            }
            return f;
          }
          return e;
        }
        function C2(e, t) {
          return typeof e == "object" ? bd(false, e.prefix, e.node, e.suffix, t) : typeof e == "string" ? e.length > 0 && e.charCodeAt(0) === 35 ? e.slice(1) : e : "";
        }
        function OJ(e, t) {
          return typeof e == "string" ? e : MJ(e, Y.checkDefined(t));
        }
        function MJ(e, t) {
          return Ny(e) ? t(e).slice(1) : cs(e) ? t(e) : vn(e) ? e.escapedText.slice(1) : qr(e);
        }
        function bd(e, t, r, s, f) {
          return t = C2(t, f), s = C2(s, f), r = OJ(r, f), `${e ? "#" : ""}${t}${r}${s}`;
        }
        function LJ(e, t, r, s) {
          return e.updatePropertyDeclaration(t, r, e.getGeneratedPrivateNameForNode(t.name, void 0, "_accessor_storage"), void 0, void 0, s);
        }
        function RJ(e, t, r, s) {
          return e.createGetAccessorDeclaration(r, s, [], void 0, e.createBlock([e.createReturnStatement(e.createPropertyAccessExpression(e.createThis(), e.getGeneratedPrivateNameForNode(t.name, void 0, "_accessor_storage")))]));
        }
        function jJ(e, t, r, s) {
          return e.createSetAccessorDeclaration(r, s, [e.createParameterDeclaration(void 0, void 0, "value")], e.createBlock([e.createExpressionStatement(e.createAssignment(e.createPropertyAccessExpression(e.createThis(), e.getGeneratedPrivateNameForNode(t.name, void 0, "_accessor_storage")), e.createIdentifier("value")))]));
        }
        function JJ(e) {
          let t = e.expression;
          for (; ; ) {
            if (t = $o(t), oc(t)) {
              t = Zn(t.elements);
              continue;
            }
            if (gd(t)) {
              t = t.right;
              continue;
            }
            if (ms(t, true) && cs(t.left))
              return t;
            break;
          }
        }
        function FJ(e) {
          return qo(e) && fs(e) && !e.emitNode;
        }
        function su(e, t) {
          if (FJ(e))
            su(e.expression, t);
          else if (gd(e))
            su(e.left, t), su(e.right, t);
          else if (oc(e))
            for (let r of e.elements)
              su(r, t);
          else
            t.push(e);
        }
        function BJ(e) {
          let t = [];
          return su(e, t), t;
        }
        function A2(e) {
          if (e.transformFlags & 65536)
            return true;
          if (e.transformFlags & 128)
            for (let t of kE(e)) {
              let r = Ko(t);
              if (r && KS(r) && (r.transformFlags & 65536 || r.transformFlags & 128 && A2(r)))
                return true;
            }
          return false;
        }
        var Td, OE, qJ = D({ "src/compiler/factory/utilities.ts"() {
          nn(), ((e) => {
            function t(N, X, F, $, ae, Te, Se) {
              let Ye = X > 0 ? ae[X - 1] : void 0;
              return Y.assertEqual(F[X], t), ae[X] = N.onEnter($[X], Ye, Se), F[X] = A(N, t), X;
            }
            e.enter = t;
            function r(N, X, F, $, ae, Te, Se) {
              Y.assertEqual(F[X], r), Y.assertIsDefined(N.onLeft), F[X] = A(N, r);
              let Ye = N.onLeft($[X].left, ae[X], $[X]);
              return Ye ? (B(X, $, Ye), g(X, F, $, ae, Ye)) : X;
            }
            e.left = r;
            function s(N, X, F, $, ae, Te, Se) {
              return Y.assertEqual(F[X], s), Y.assertIsDefined(N.onOperator), F[X] = A(N, s), N.onOperator($[X].operatorToken, ae[X], $[X]), X;
            }
            e.operator = s;
            function f(N, X, F, $, ae, Te, Se) {
              Y.assertEqual(F[X], f), Y.assertIsDefined(N.onRight), F[X] = A(N, f);
              let Ye = N.onRight($[X].right, ae[X], $[X]);
              return Ye ? (B(X, $, Ye), g(X, F, $, ae, Ye)) : X;
            }
            e.right = f;
            function x(N, X, F, $, ae, Te, Se) {
              Y.assertEqual(F[X], x), F[X] = A(N, x);
              let Ye = N.onExit($[X], ae[X]);
              if (X > 0) {
                if (X--, N.foldState) {
                  let Ne = F[X] === x ? "right" : "left";
                  ae[X] = N.foldState(ae[X], Ye, Ne);
                }
              } else
                Te.value = Ye;
              return X;
            }
            e.exit = x;
            function w(N, X, F, $, ae, Te, Se) {
              return Y.assertEqual(F[X], w), X;
            }
            e.done = w;
            function A(N, X) {
              switch (X) {
                case t:
                  if (N.onLeft)
                    return r;
                case r:
                  if (N.onOperator)
                    return s;
                case s:
                  if (N.onRight)
                    return f;
                case f:
                  return x;
                case x:
                  return w;
                case w:
                  return w;
                default:
                  Y.fail("Invalid state");
              }
            }
            e.nextState = A;
            function g(N, X, F, $, ae) {
              return N++, X[N] = t, F[N] = ae, $[N] = void 0, N;
            }
            function B(N, X, F) {
              if (Y.shouldAssert(2))
                for (; N >= 0; )
                  Y.assert(X[N] !== F, "Circular traversal detected."), N--;
            }
          })(Td || (Td = {})), OE = class {
            constructor(e, t, r, s, f, x) {
              this.onEnter = e, this.onLeft = t, this.onOperator = r, this.onRight = s, this.onExit = f, this.foldState = x;
            }
          };
        } });
        function Rt(e, t) {
          return t ? Us(e, t.pos, t.end) : e;
        }
        function fc(e) {
          let t = e.kind;
          return t === 165 || t === 166 || t === 168 || t === 169 || t === 170 || t === 171 || t === 173 || t === 174 || t === 175 || t === 178 || t === 182 || t === 215 || t === 216 || t === 228 || t === 240 || t === 259 || t === 260 || t === 261 || t === 262 || t === 263 || t === 264 || t === 268 || t === 269 || t === 274 || t === 275;
        }
        function ME(e) {
          let t = e.kind;
          return t === 166 || t === 169 || t === 171 || t === 174 || t === 175 || t === 228 || t === 260;
        }
        var UJ = D({ "src/compiler/factory/utilitiesPublic.ts"() {
          nn();
        } });
        function G(e, t) {
          return t && e(t);
        }
        function ze(e, t, r) {
          if (r) {
            if (t)
              return t(r);
            for (let s of r) {
              let f = e(s);
              if (f)
                return f;
            }
          }
        }
        function LE(e, t) {
          return e.charCodeAt(t + 1) === 42 && e.charCodeAt(t + 2) === 42 && e.charCodeAt(t + 3) !== 47;
        }
        function ou(e) {
          return c(e.statements, zJ) || WJ(e);
        }
        function zJ(e) {
          return fc(e) && VJ(e, 93) || s2(e) && ud(e.moduleReference) || o2(e) || Vo(e) || cc(e) ? e : void 0;
        }
        function WJ(e) {
          return e.flags & 4194304 ? RE(e) : void 0;
        }
        function RE(e) {
          return HJ(e) ? e : xr(e, RE);
        }
        function VJ(e, t) {
          return Ke(e.modifiers, (r) => r.kind === t);
        }
        function HJ(e) {
          return t2(e) && e.keywordToken === 100 && e.name.escapedText === "meta";
        }
        function jE(e, t, r) {
          return ze(t, r, e.typeParameters) || ze(t, r, e.parameters) || G(t, e.type);
        }
        function JE(e, t, r) {
          return ze(t, r, e.types);
        }
        function FE(e, t, r) {
          return G(t, e.type);
        }
        function BE(e, t, r) {
          return ze(t, r, e.elements);
        }
        function qE(e, t, r) {
          return G(t, e.expression) || G(t, e.questionDotToken) || ze(t, r, e.typeArguments) || ze(t, r, e.arguments);
        }
        function UE(e, t, r) {
          return ze(t, r, e.statements);
        }
        function zE(e, t, r) {
          return G(t, e.label);
        }
        function WE(e, t, r) {
          return ze(t, r, e.modifiers) || G(t, e.name) || ze(t, r, e.typeParameters) || ze(t, r, e.heritageClauses) || ze(t, r, e.members);
        }
        function VE(e, t, r) {
          return ze(t, r, e.elements);
        }
        function HE(e, t, r) {
          return G(t, e.propertyName) || G(t, e.name);
        }
        function GE(e, t, r) {
          return G(t, e.tagName) || ze(t, r, e.typeArguments) || G(t, e.attributes);
        }
        function Xo(e, t, r) {
          return G(t, e.type);
        }
        function $E(e, t, r) {
          return G(t, e.tagName) || (e.isNameFirst ? G(t, e.name) || G(t, e.typeExpression) : G(t, e.typeExpression) || G(t, e.name)) || (typeof e.comment == "string" ? void 0 : ze(t, r, e.comment));
        }
        function Yo(e, t, r) {
          return G(t, e.tagName) || G(t, e.typeExpression) || (typeof e.comment == "string" ? void 0 : ze(t, r, e.comment));
        }
        function P2(e, t, r) {
          return G(t, e.name);
        }
        function Gs(e, t, r) {
          return G(t, e.tagName) || (typeof e.comment == "string" ? void 0 : ze(t, r, e.comment));
        }
        function GJ(e, t, r) {
          return G(t, e.expression);
        }
        function xr(e, t, r) {
          if (e === void 0 || e.kind <= 162)
            return;
          let s = o7[e.kind];
          return s === void 0 ? void 0 : s(e, t, r);
        }
        function D2(e, t, r) {
          let s = KE(e), f = [];
          for (; f.length < s.length; )
            f.push(e);
          for (; s.length !== 0; ) {
            let x = s.pop(), w = f.pop();
            if (ir(x)) {
              if (r) {
                let A = r(x, w);
                if (A) {
                  if (A === "skip")
                    continue;
                  return A;
                }
              }
              for (let A = x.length - 1; A >= 0; --A)
                s.push(x[A]), f.push(w);
            } else {
              let A = t(x, w);
              if (A) {
                if (A === "skip")
                  continue;
                return A;
              }
              if (x.kind >= 163)
                for (let g of KE(x))
                  s.push(g), f.push(x);
            }
          }
        }
        function KE(e) {
          let t = [];
          return xr(e, r, r), t;
          function r(s) {
            t.unshift(s);
          }
        }
        function XE(e) {
          e.externalModuleIndicator = ou(e);
        }
        function YE(e, t, r) {
          let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, f = arguments.length > 4 ? arguments[4] : void 0;
          var x, w;
          (x = rs) == null || x.push(rs.Phase.Parse, "createSourceFile", { path: e }, true);
          let A;
          Dp.logStartParseSourceFile(e);
          let { languageVersion: g, setExternalModuleIndicator: B, impliedNodeFormat: N } = typeof r == "object" ? r : { languageVersion: r };
          if (g === 100)
            A = Ci.parseSourceFile(e, t, g, void 0, s, 6, yn);
          else {
            let X = N === void 0 ? B : (F) => (F.impliedNodeFormat = N, (B || XE)(F));
            A = Ci.parseSourceFile(e, t, g, void 0, s, f, X);
          }
          return Dp.logStopParseSourceFile(), (w = rs) == null || w.pop(), A;
        }
        function $J(e, t) {
          return Ci.parseIsolatedEntityName(e, t);
        }
        function KJ(e, t) {
          return Ci.parseJsonText(e, t);
        }
        function Qo(e) {
          return e.externalModuleIndicator !== void 0;
        }
        function k2(e, t, r) {
          let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, f = Sd.updateSourceFile(e, t, r, s);
          return f.flags |= e.flags & 6291456, f;
        }
        function XJ(e, t, r) {
          let s = Ci.JSDocParser.parseIsolatedJSDocComment(e, t, r);
          return s && s.jsDoc && Ci.fixupParentReferences(s.jsDoc), s;
        }
        function YJ(e, t, r) {
          return Ci.JSDocParser.parseJSDocTypeExpressionForTests(e, t, r);
        }
        function QE(e) {
          return da(e, Rv) || ns(e, ".ts") && Fi(sl(e), ".d.");
        }
        function QJ(e, t, r, s) {
          if (e) {
            if (e === "import")
              return 99;
            if (e === "require")
              return 1;
            s(t, r - t, ve.resolution_mode_should_be_either_require_or_import);
          }
        }
        function ZE(e, t) {
          let r = [];
          for (let s of Ao(t, 0) || Bt) {
            let f = t.substring(s.pos, s.end);
            eF(r, s, f);
          }
          e.pragmas = /* @__PURE__ */ new Map();
          for (let s of r) {
            if (e.pragmas.has(s.name)) {
              let f = e.pragmas.get(s.name);
              f instanceof Array ? f.push(s.args) : e.pragmas.set(s.name, [f, s.args]);
              continue;
            }
            e.pragmas.set(s.name, s.args);
          }
        }
        function e7(e, t) {
          e.checkJsDirective = void 0, e.referencedFiles = [], e.typeReferenceDirectives = [], e.libReferenceDirectives = [], e.amdDependencies = [], e.hasNoDefaultLib = false, e.pragmas.forEach((r, s) => {
            switch (s) {
              case "reference": {
                let f = e.referencedFiles, x = e.typeReferenceDirectives, w = e.libReferenceDirectives;
                c(en(r), (A) => {
                  let { types: g, lib: B, path: N, ["resolution-mode"]: X } = A.arguments;
                  if (A.arguments["no-default-lib"])
                    e.hasNoDefaultLib = true;
                  else if (g) {
                    let F = QJ(X, g.pos, g.end, t);
                    x.push(Object.assign({ pos: g.pos, end: g.end, fileName: g.value }, F ? { resolutionMode: F } : {}));
                  } else
                    B ? w.push({ pos: B.pos, end: B.end, fileName: B.value }) : N ? f.push({ pos: N.pos, end: N.end, fileName: N.value }) : t(A.range.pos, A.range.end - A.range.pos, ve.Invalid_reference_directive_syntax);
                });
                break;
              }
              case "amd-dependency": {
                e.amdDependencies = Ze(en(r), (f) => ({ name: f.arguments.name, path: f.arguments.path }));
                break;
              }
              case "amd-module": {
                if (r instanceof Array)
                  for (let f of r)
                    e.moduleName && t(f.range.pos, f.range.end - f.range.pos, ve.An_AMD_module_cannot_have_multiple_name_assignments), e.moduleName = f.arguments.name;
                else
                  e.moduleName = r.arguments.name;
                break;
              }
              case "ts-nocheck":
              case "ts-check": {
                c(en(r), (f) => {
                  (!e.checkJsDirective || f.range.pos > e.checkJsDirective.pos) && (e.checkJsDirective = { enabled: s === "ts-check", end: f.range.end, pos: f.range.pos });
                });
                break;
              }
              case "jsx":
              case "jsxfrag":
              case "jsximportsource":
              case "jsxruntime":
                return;
              default:
                Y.fail("Unhandled pragma kind");
            }
          });
        }
        function ZJ(e) {
          if (xd.has(e))
            return xd.get(e);
          let t = new RegExp(`(\\s${e}\\s*=\\s*)(?:(?:'([^']*)')|(?:"([^"]*)"))`, "im");
          return xd.set(e, t), t;
        }
        function eF(e, t, r) {
          let s = t.kind === 2 && _7.exec(r);
          if (s) {
            let x = s[1].toLowerCase(), w = Vp[x];
            if (!w || !(w.kind & 1))
              return;
            if (w.args) {
              let A = {};
              for (let g of w.args) {
                let N = ZJ(g.name).exec(r);
                if (!N && !g.optional)
                  return;
                if (N) {
                  let X = N[2] || N[3];
                  if (g.captureSpan) {
                    let F = t.pos + N.index + N[1].length + 1;
                    A[g.name] = { value: X, pos: F, end: F + X.length };
                  } else
                    A[g.name] = X;
                }
              }
              e.push({ name: x, args: { arguments: A, range: t } });
            } else
              e.push({ name: x, args: { arguments: {}, range: t } });
            return;
          }
          let f = t.kind === 2 && c7.exec(r);
          if (f)
            return t7(e, t, 2, f);
          if (t.kind === 3) {
            let x = /@(\S+)(\s+.*)?$/gim, w;
            for (; w = x.exec(r); )
              t7(e, t, 4, w);
          }
        }
        function t7(e, t, r, s) {
          if (!s)
            return;
          let f = s[1].toLowerCase(), x = Vp[f];
          if (!x || !(x.kind & r))
            return;
          let w = s[2], A = tF(x, w);
          A !== "fail" && e.push({ name: f, args: { arguments: A, range: t } });
        }
        function tF(e, t) {
          if (!t)
            return {};
          if (!e.args)
            return {};
          let r = Pp(t).split(/\s+/), s = {};
          for (let f = 0; f < e.args.length; f++) {
            let x = e.args[f];
            if (!r[f] && !x.optional)
              return "fail";
            if (x.captureSpan)
              return Y.fail("Capture spans not yet implemented for non-xml pragmas");
            s[x.name] = r[f];
          }
          return s;
        }
        function Hi(e, t) {
          return e.kind !== t.kind ? false : e.kind === 79 ? e.escapedText === t.escapedText : e.kind === 108 ? true : e.name.escapedText === t.name.escapedText && Hi(e.expression, t.expression);
        }
        var r7, n7, i7, a7, s7, I2, dc, o7, Ci, Sd, xd, _7, c7, rF = D({ "src/compiler/parser.ts"() {
          nn(), nn(), I2 = { createBaseSourceFileNode: (e) => new (s7 || (s7 = lr.getSourceFileConstructor()))(e, -1, -1), createBaseIdentifierNode: (e) => new (i7 || (i7 = lr.getIdentifierConstructor()))(e, -1, -1), createBasePrivateIdentifierNode: (e) => new (a7 || (a7 = lr.getPrivateIdentifierConstructor()))(e, -1, -1), createBaseTokenNode: (e) => new (n7 || (n7 = lr.getTokenConstructor()))(e, -1, -1), createBaseNode: (e) => new (r7 || (r7 = lr.getNodeConstructor()))(e, -1, -1) }, dc = Zf(1, I2), o7 = { [163]: function(t, r, s) {
            return G(r, t.left) || G(r, t.right);
          }, [165]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || G(r, t.constraint) || G(r, t.default) || G(r, t.expression);
          }, [300]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || G(r, t.questionToken) || G(r, t.exclamationToken) || G(r, t.equalsToken) || G(r, t.objectAssignmentInitializer);
          }, [301]: function(t, r, s) {
            return G(r, t.expression);
          }, [166]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.dotDotDotToken) || G(r, t.name) || G(r, t.questionToken) || G(r, t.type) || G(r, t.initializer);
          }, [169]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || G(r, t.questionToken) || G(r, t.exclamationToken) || G(r, t.type) || G(r, t.initializer);
          }, [168]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || G(r, t.questionToken) || G(r, t.type) || G(r, t.initializer);
          }, [299]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || G(r, t.questionToken) || G(r, t.exclamationToken) || G(r, t.initializer);
          }, [257]: function(t, r, s) {
            return G(r, t.name) || G(r, t.exclamationToken) || G(r, t.type) || G(r, t.initializer);
          }, [205]: function(t, r, s) {
            return G(r, t.dotDotDotToken) || G(r, t.propertyName) || G(r, t.name) || G(r, t.initializer);
          }, [178]: function(t, r, s) {
            return ze(r, s, t.modifiers) || ze(r, s, t.typeParameters) || ze(r, s, t.parameters) || G(r, t.type);
          }, [182]: function(t, r, s) {
            return ze(r, s, t.modifiers) || ze(r, s, t.typeParameters) || ze(r, s, t.parameters) || G(r, t.type);
          }, [181]: function(t, r, s) {
            return ze(r, s, t.modifiers) || ze(r, s, t.typeParameters) || ze(r, s, t.parameters) || G(r, t.type);
          }, [176]: jE, [177]: jE, [171]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.asteriskToken) || G(r, t.name) || G(r, t.questionToken) || G(r, t.exclamationToken) || ze(r, s, t.typeParameters) || ze(r, s, t.parameters) || G(r, t.type) || G(r, t.body);
          }, [170]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || G(r, t.questionToken) || ze(r, s, t.typeParameters) || ze(r, s, t.parameters) || G(r, t.type);
          }, [173]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || ze(r, s, t.typeParameters) || ze(r, s, t.parameters) || G(r, t.type) || G(r, t.body);
          }, [174]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || ze(r, s, t.typeParameters) || ze(r, s, t.parameters) || G(r, t.type) || G(r, t.body);
          }, [175]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || ze(r, s, t.typeParameters) || ze(r, s, t.parameters) || G(r, t.type) || G(r, t.body);
          }, [259]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.asteriskToken) || G(r, t.name) || ze(r, s, t.typeParameters) || ze(r, s, t.parameters) || G(r, t.type) || G(r, t.body);
          }, [215]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.asteriskToken) || G(r, t.name) || ze(r, s, t.typeParameters) || ze(r, s, t.parameters) || G(r, t.type) || G(r, t.body);
          }, [216]: function(t, r, s) {
            return ze(r, s, t.modifiers) || ze(r, s, t.typeParameters) || ze(r, s, t.parameters) || G(r, t.type) || G(r, t.equalsGreaterThanToken) || G(r, t.body);
          }, [172]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.body);
          }, [180]: function(t, r, s) {
            return G(r, t.typeName) || ze(r, s, t.typeArguments);
          }, [179]: function(t, r, s) {
            return G(r, t.assertsModifier) || G(r, t.parameterName) || G(r, t.type);
          }, [183]: function(t, r, s) {
            return G(r, t.exprName) || ze(r, s, t.typeArguments);
          }, [184]: function(t, r, s) {
            return ze(r, s, t.members);
          }, [185]: function(t, r, s) {
            return G(r, t.elementType);
          }, [186]: function(t, r, s) {
            return ze(r, s, t.elements);
          }, [189]: JE, [190]: JE, [191]: function(t, r, s) {
            return G(r, t.checkType) || G(r, t.extendsType) || G(r, t.trueType) || G(r, t.falseType);
          }, [192]: function(t, r, s) {
            return G(r, t.typeParameter);
          }, [202]: function(t, r, s) {
            return G(r, t.argument) || G(r, t.assertions) || G(r, t.qualifier) || ze(r, s, t.typeArguments);
          }, [298]: function(t, r, s) {
            return G(r, t.assertClause);
          }, [193]: FE, [195]: FE, [196]: function(t, r, s) {
            return G(r, t.objectType) || G(r, t.indexType);
          }, [197]: function(t, r, s) {
            return G(r, t.readonlyToken) || G(r, t.typeParameter) || G(r, t.nameType) || G(r, t.questionToken) || G(r, t.type) || ze(r, s, t.members);
          }, [198]: function(t, r, s) {
            return G(r, t.literal);
          }, [199]: function(t, r, s) {
            return G(r, t.dotDotDotToken) || G(r, t.name) || G(r, t.questionToken) || G(r, t.type);
          }, [203]: BE, [204]: BE, [206]: function(t, r, s) {
            return ze(r, s, t.elements);
          }, [207]: function(t, r, s) {
            return ze(r, s, t.properties);
          }, [208]: function(t, r, s) {
            return G(r, t.expression) || G(r, t.questionDotToken) || G(r, t.name);
          }, [209]: function(t, r, s) {
            return G(r, t.expression) || G(r, t.questionDotToken) || G(r, t.argumentExpression);
          }, [210]: qE, [211]: qE, [212]: function(t, r, s) {
            return G(r, t.tag) || G(r, t.questionDotToken) || ze(r, s, t.typeArguments) || G(r, t.template);
          }, [213]: function(t, r, s) {
            return G(r, t.type) || G(r, t.expression);
          }, [214]: function(t, r, s) {
            return G(r, t.expression);
          }, [217]: function(t, r, s) {
            return G(r, t.expression);
          }, [218]: function(t, r, s) {
            return G(r, t.expression);
          }, [219]: function(t, r, s) {
            return G(r, t.expression);
          }, [221]: function(t, r, s) {
            return G(r, t.operand);
          }, [226]: function(t, r, s) {
            return G(r, t.asteriskToken) || G(r, t.expression);
          }, [220]: function(t, r, s) {
            return G(r, t.expression);
          }, [222]: function(t, r, s) {
            return G(r, t.operand);
          }, [223]: function(t, r, s) {
            return G(r, t.left) || G(r, t.operatorToken) || G(r, t.right);
          }, [231]: function(t, r, s) {
            return G(r, t.expression) || G(r, t.type);
          }, [232]: function(t, r, s) {
            return G(r, t.expression);
          }, [235]: function(t, r, s) {
            return G(r, t.expression) || G(r, t.type);
          }, [233]: function(t, r, s) {
            return G(r, t.name);
          }, [224]: function(t, r, s) {
            return G(r, t.condition) || G(r, t.questionToken) || G(r, t.whenTrue) || G(r, t.colonToken) || G(r, t.whenFalse);
          }, [227]: function(t, r, s) {
            return G(r, t.expression);
          }, [238]: UE, [265]: UE, [308]: function(t, r, s) {
            return ze(r, s, t.statements) || G(r, t.endOfFileToken);
          }, [240]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.declarationList);
          }, [258]: function(t, r, s) {
            return ze(r, s, t.declarations);
          }, [241]: function(t, r, s) {
            return G(r, t.expression);
          }, [242]: function(t, r, s) {
            return G(r, t.expression) || G(r, t.thenStatement) || G(r, t.elseStatement);
          }, [243]: function(t, r, s) {
            return G(r, t.statement) || G(r, t.expression);
          }, [244]: function(t, r, s) {
            return G(r, t.expression) || G(r, t.statement);
          }, [245]: function(t, r, s) {
            return G(r, t.initializer) || G(r, t.condition) || G(r, t.incrementor) || G(r, t.statement);
          }, [246]: function(t, r, s) {
            return G(r, t.initializer) || G(r, t.expression) || G(r, t.statement);
          }, [247]: function(t, r, s) {
            return G(r, t.awaitModifier) || G(r, t.initializer) || G(r, t.expression) || G(r, t.statement);
          }, [248]: zE, [249]: zE, [250]: function(t, r, s) {
            return G(r, t.expression);
          }, [251]: function(t, r, s) {
            return G(r, t.expression) || G(r, t.statement);
          }, [252]: function(t, r, s) {
            return G(r, t.expression) || G(r, t.caseBlock);
          }, [266]: function(t, r, s) {
            return ze(r, s, t.clauses);
          }, [292]: function(t, r, s) {
            return G(r, t.expression) || ze(r, s, t.statements);
          }, [293]: function(t, r, s) {
            return ze(r, s, t.statements);
          }, [253]: function(t, r, s) {
            return G(r, t.label) || G(r, t.statement);
          }, [254]: function(t, r, s) {
            return G(r, t.expression);
          }, [255]: function(t, r, s) {
            return G(r, t.tryBlock) || G(r, t.catchClause) || G(r, t.finallyBlock);
          }, [295]: function(t, r, s) {
            return G(r, t.variableDeclaration) || G(r, t.block);
          }, [167]: function(t, r, s) {
            return G(r, t.expression);
          }, [260]: WE, [228]: WE, [261]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || ze(r, s, t.typeParameters) || ze(r, s, t.heritageClauses) || ze(r, s, t.members);
          }, [262]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || ze(r, s, t.typeParameters) || G(r, t.type);
          }, [263]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || ze(r, s, t.members);
          }, [302]: function(t, r, s) {
            return G(r, t.name) || G(r, t.initializer);
          }, [264]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || G(r, t.body);
          }, [268]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name) || G(r, t.moduleReference);
          }, [269]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.importClause) || G(r, t.moduleSpecifier) || G(r, t.assertClause);
          }, [270]: function(t, r, s) {
            return G(r, t.name) || G(r, t.namedBindings);
          }, [296]: function(t, r, s) {
            return ze(r, s, t.elements);
          }, [297]: function(t, r, s) {
            return G(r, t.name) || G(r, t.value);
          }, [267]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.name);
          }, [271]: function(t, r, s) {
            return G(r, t.name);
          }, [277]: function(t, r, s) {
            return G(r, t.name);
          }, [272]: VE, [276]: VE, [275]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.exportClause) || G(r, t.moduleSpecifier) || G(r, t.assertClause);
          }, [273]: HE, [278]: HE, [274]: function(t, r, s) {
            return ze(r, s, t.modifiers) || G(r, t.expression);
          }, [225]: function(t, r, s) {
            return G(r, t.head) || ze(r, s, t.templateSpans);
          }, [236]: function(t, r, s) {
            return G(r, t.expression) || G(r, t.literal);
          }, [200]: function(t, r, s) {
            return G(r, t.head) || ze(r, s, t.templateSpans);
          }, [201]: function(t, r, s) {
            return G(r, t.type) || G(r, t.literal);
          }, [164]: function(t, r, s) {
            return G(r, t.expression);
          }, [294]: function(t, r, s) {
            return ze(r, s, t.types);
          }, [230]: function(t, r, s) {
            return G(r, t.expression) || ze(r, s, t.typeArguments);
          }, [280]: function(t, r, s) {
            return G(r, t.expression);
          }, [279]: function(t, r, s) {
            return ze(r, s, t.modifiers);
          }, [357]: function(t, r, s) {
            return ze(r, s, t.elements);
          }, [281]: function(t, r, s) {
            return G(r, t.openingElement) || ze(r, s, t.children) || G(r, t.closingElement);
          }, [285]: function(t, r, s) {
            return G(r, t.openingFragment) || ze(r, s, t.children) || G(r, t.closingFragment);
          }, [282]: GE, [283]: GE, [289]: function(t, r, s) {
            return ze(r, s, t.properties);
          }, [288]: function(t, r, s) {
            return G(r, t.name) || G(r, t.initializer);
          }, [290]: function(t, r, s) {
            return G(r, t.expression);
          }, [291]: function(t, r, s) {
            return G(r, t.dotDotDotToken) || G(r, t.expression);
          }, [284]: function(t, r, s) {
            return G(r, t.tagName);
          }, [187]: Xo, [188]: Xo, [312]: Xo, [318]: Xo, [317]: Xo, [319]: Xo, [321]: Xo, [320]: function(t, r, s) {
            return ze(r, s, t.parameters) || G(r, t.type);
          }, [323]: function(t, r, s) {
            return (typeof t.comment == "string" ? void 0 : ze(r, s, t.comment)) || ze(r, s, t.tags);
          }, [350]: function(t, r, s) {
            return G(r, t.tagName) || G(r, t.name) || (typeof t.comment == "string" ? void 0 : ze(r, s, t.comment));
          }, [313]: function(t, r, s) {
            return G(r, t.name);
          }, [314]: function(t, r, s) {
            return G(r, t.left) || G(r, t.right);
          }, [344]: $E, [351]: $E, [333]: function(t, r, s) {
            return G(r, t.tagName) || (typeof t.comment == "string" ? void 0 : ze(r, s, t.comment));
          }, [332]: function(t, r, s) {
            return G(r, t.tagName) || G(r, t.class) || (typeof t.comment == "string" ? void 0 : ze(r, s, t.comment));
          }, [331]: function(t, r, s) {
            return G(r, t.tagName) || G(r, t.class) || (typeof t.comment == "string" ? void 0 : ze(r, s, t.comment));
          }, [348]: function(t, r, s) {
            return G(r, t.tagName) || G(r, t.constraint) || ze(r, s, t.typeParameters) || (typeof t.comment == "string" ? void 0 : ze(r, s, t.comment));
          }, [349]: function(t, r, s) {
            return G(r, t.tagName) || (t.typeExpression && t.typeExpression.kind === 312 ? G(r, t.typeExpression) || G(r, t.fullName) || (typeof t.comment == "string" ? void 0 : ze(r, s, t.comment)) : G(r, t.fullName) || G(r, t.typeExpression) || (typeof t.comment == "string" ? void 0 : ze(r, s, t.comment)));
          }, [341]: function(t, r, s) {
            return G(r, t.tagName) || G(r, t.fullName) || G(r, t.typeExpression) || (typeof t.comment == "string" ? void 0 : ze(r, s, t.comment));
          }, [345]: Yo, [347]: Yo, [346]: Yo, [343]: Yo, [353]: Yo, [352]: Yo, [342]: Yo, [326]: function(t, r, s) {
            return c(t.typeParameters, r) || c(t.parameters, r) || G(r, t.type);
          }, [327]: P2, [328]: P2, [329]: P2, [325]: function(t, r, s) {
            return c(t.jsDocPropertyTags, r);
          }, [330]: Gs, [335]: Gs, [336]: Gs, [337]: Gs, [338]: Gs, [339]: Gs, [334]: Gs, [340]: Gs, [356]: GJ }, ((e) => {
            var t = Po(99, true), r = 20480, s, f, x, w, A;
            function g(u) {
              return oi++, u;
            }
            var B = { createBaseSourceFileNode: (u) => g(new A(u, 0, 0)), createBaseIdentifierNode: (u) => g(new x(u, 0, 0)), createBasePrivateIdentifierNode: (u) => g(new w(u, 0, 0)), createBaseTokenNode: (u) => g(new f(u, 0, 0)), createBaseNode: (u) => g(new s(u, 0, 0)) }, N = Zf(11, B), { createNodeArray: X, createNumericLiteral: F, createStringLiteral: $, createLiteralLikeNode: ae, createIdentifier: Te, createPrivateIdentifier: Se, createToken: Ye, createArrayLiteralExpression: Ne, createObjectLiteralExpression: oe, createPropertyAccessExpression: Ve, createPropertyAccessChain: pt, createElementAccessExpression: Gt, createElementAccessChain: Nt, createCallExpression: Xt, createCallChain: er, createNewExpression: Tn, createParenthesizedExpression: Hr, createBlock: Gi, createVariableStatement: pn, createExpressionStatement: fn, createIfStatement: Ut, createWhileStatement: kn, createForStatement: an, createForOfStatement: mr, createVariableDeclaration: $i, createVariableDeclarationList: dn } = N, Ur, Gr, _r, Sn, In, pr, Zt, Or, Nn, ar, oi, cr, $r, hr, On, nr, br = true, Kr = false;
            function wa(u, b, O, j) {
              let z = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false, re2 = arguments.length > 5 ? arguments[5] : void 0, Ee = arguments.length > 6 ? arguments[6] : void 0;
              var qe;
              if (re2 = Nx(u, re2), re2 === 6) {
                let $e = Ki(u, b, O, j, z);
                return convertToObjectWorker($e, (qe = $e.statements[0]) == null ? void 0 : qe.expression, $e.parseDiagnostics, false, void 0, void 0), $e.referencedFiles = Bt, $e.typeReferenceDirectives = Bt, $e.libReferenceDirectives = Bt, $e.amdDependencies = Bt, $e.hasNoDefaultLib = false, $e.pragmas = V1, $e;
              }
              Mn(u, b, O, j, re2);
              let We = Ca(O, z, re2, Ee || XE);
              return _i(), We;
            }
            e.parseSourceFile = wa;
            function $n(u, b) {
              Mn("", u, b, void 0, 1), _e();
              let O = Ys(true), j = T() === 1 && !Zt.length;
              return _i(), j ? O : void 0;
            }
            e.parseIsolatedEntityName = $n;
            function Ki(u, b) {
              let O = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2, j = arguments.length > 3 ? arguments[3] : void 0, z = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
              Mn(u, b, O, j, 6), Gr = nr, _e();
              let re2 = L(), Ee, qe;
              if (T() === 1)
                Ee = Er([], re2, re2), qe = sn();
              else {
                let lt;
                for (; T() !== 1; ) {
                  let At;
                  switch (T()) {
                    case 22:
                      At = ah();
                      break;
                    case 110:
                    case 95:
                    case 104:
                      At = sn();
                      break;
                    case 40:
                      wt(() => _e() === 8 && _e() !== 58) ? At = qm() : At = Xu();
                      break;
                    case 8:
                    case 10:
                      if (wt(() => _e() !== 58)) {
                        At = Di();
                        break;
                      }
                    default:
                      At = Xu();
                      break;
                  }
                  lt && ir(lt) ? lt.push(At) : lt ? lt = [lt, At] : (lt = At, T() !== 1 && Dt(ve.Unexpected_token));
                }
                let Jt = ir(lt) ? Q(Ne(lt), re2) : Y.checkDefined(lt), Lt = fn(Jt);
                Q(Lt, re2), Ee = Er([Lt], re2), qe = ea(1, ve.Unexpected_token);
              }
              let We = Kt(u, 2, 6, false, Ee, qe, Gr, yn);
              z && ft(We), We.nodeCount = oi, We.identifierCount = $r, We.identifiers = cr, We.parseDiagnostics = qs(Zt, We), Or && (We.jsDocDiagnostics = qs(Or, We));
              let $e = We;
              return _i(), $e;
            }
            e.parseJsonText = Ki;
            function Mn(u, b, O, j, z) {
              switch (s = lr.getNodeConstructor(), f = lr.getTokenConstructor(), x = lr.getIdentifierConstructor(), w = lr.getPrivateIdentifierConstructor(), A = lr.getSourceFileConstructor(), Ur = Un(u), _r = b, Sn = O, Nn = j, In = z, pr = sv(z), Zt = [], hr = 0, cr = /* @__PURE__ */ new Map(), $r = 0, oi = 0, Gr = 0, br = true, In) {
                case 1:
                case 2:
                  nr = 262144;
                  break;
                case 6:
                  nr = 67371008;
                  break;
                default:
                  nr = 0;
                  break;
              }
              Kr = false, t.setText(_r), t.setOnError(U), t.setScriptTarget(Sn), t.setLanguageVariant(pr);
            }
            function _i() {
              t.clearCommentDirectives(), t.setText(""), t.setOnError(void 0), _r = void 0, Sn = void 0, Nn = void 0, In = void 0, pr = void 0, Gr = 0, Zt = void 0, Or = void 0, hr = 0, cr = void 0, On = void 0, br = true;
            }
            function Ca(u, b, O, j) {
              let z = QE(Ur);
              z && (nr |= 16777216), Gr = nr, _e();
              let re2 = Kn(0, on2);
              Y.assert(T() === 1);
              let Ee = He(sn()), qe = Kt(Ur, u, O, z, re2, Ee, Gr, j);
              return ZE(qe, _r), e7(qe, We), qe.commentDirectives = t.getCommentDirectives(), qe.nodeCount = oi, qe.identifierCount = $r, qe.identifiers = cr, qe.parseDiagnostics = qs(Zt, qe), Or && (qe.jsDocDiagnostics = qs(Or, qe)), b && ft(qe), qe;
              function We($e, lt, Jt) {
                Zt.push(Ro(Ur, $e, lt, Jt));
              }
            }
            function St(u, b) {
              return b ? He(u) : u;
            }
            let ue = false;
            function He(u) {
              Y.assert(!u.jsDoc);
              let b = qt(I3(u, _r), (O) => Vh.parseJSDocComment(u, O.pos, O.end - O.pos));
              return b.length && (u.jsDoc = b), ue && (ue = false, u.flags |= 268435456), u;
            }
            function _t(u) {
              let b = Nn, O = Sd.createSyntaxCursor(u);
              Nn = { currentNode: lt };
              let j = [], z = Zt;
              Zt = [];
              let re2 = 0, Ee = We(u.statements, 0);
              for (; Ee !== -1; ) {
                let Jt = u.statements[re2], Lt = u.statements[Ee];
                jr(j, u.statements, re2, Ee), re2 = $e(u.statements, Ee);
                let At = he(z, (Fn) => Fn.start >= Jt.pos), kr = At >= 0 ? he(z, (Fn) => Fn.start >= Lt.pos, At) : -1;
                At >= 0 && jr(Zt, z, At, kr >= 0 ? kr : void 0), Rn(() => {
                  let Fn = nr;
                  for (nr |= 32768, t.setTextPos(Lt.pos), _e(); T() !== 1; ) {
                    let di = t.getStartPos(), Ii = vc(0, on2);
                    if (j.push(Ii), di === t.getStartPos() && _e(), re2 >= 0) {
                      let _n = u.statements[re2];
                      if (Ii.end === _n.pos)
                        break;
                      Ii.end > _n.pos && (re2 = $e(u.statements, re2 + 1));
                    }
                  }
                  nr = Fn;
                }, 2), Ee = re2 >= 0 ? We(u.statements, re2) : -1;
              }
              if (re2 >= 0) {
                let Jt = u.statements[re2];
                jr(j, u.statements, re2);
                let Lt = he(z, (At) => At.start >= Jt.pos);
                Lt >= 0 && jr(Zt, z, Lt);
              }
              return Nn = b, N.updateSourceFile(u, Rt(X(j), u.statements));
              function qe(Jt) {
                return !(Jt.flags & 32768) && !!(Jt.transformFlags & 67108864);
              }
              function We(Jt, Lt) {
                for (let At = Lt; At < Jt.length; At++)
                  if (qe(Jt[At]))
                    return At;
                return -1;
              }
              function $e(Jt, Lt) {
                for (let At = Lt; At < Jt.length; At++)
                  if (!qe(Jt[At]))
                    return At;
                return -1;
              }
              function lt(Jt) {
                let Lt = O.currentNode(Jt);
                return br && Lt && qe(Lt) && (Lt.intersectsChange = true), Lt;
              }
            }
            function ft(u) {
              Vx(u, true);
            }
            e.fixupParentReferences = ft;
            function Kt(u, b, O, j, z, re2, Ee, qe) {
              let We = N.createSourceFile(z, re2, Ee);
              return $f(We, 0, _r.length), $e(We), !j && Qo(We) && We.transformFlags & 67108864 && (We = _t(We), $e(We)), We;
              function $e(lt) {
                lt.text = _r, lt.bindDiagnostics = [], lt.bindSuggestionDiagnostics = void 0, lt.languageVersion = b, lt.fileName = u, lt.languageVariant = sv(O), lt.isDeclarationFile = j, lt.scriptKind = O, qe(lt), lt.setExternalModuleIndicator = qe;
              }
            }
            function zt(u, b) {
              u ? nr |= b : nr &= ~b;
            }
            function xe(u) {
              zt(u, 4096);
            }
            function Le(u) {
              zt(u, 8192);
            }
            function Re(u) {
              zt(u, 16384);
            }
            function ot(u) {
              zt(u, 32768);
            }
            function Ct(u, b) {
              let O = u & nr;
              if (O) {
                zt(false, O);
                let j = b();
                return zt(true, O), j;
              }
              return b();
            }
            function Mt(u, b) {
              let O = u & ~nr;
              if (O) {
                zt(true, O);
                let j = b();
                return zt(false, O), j;
              }
              return b();
            }
            function It(u) {
              return Ct(4096, u);
            }
            function Mr(u) {
              return Mt(4096, u);
            }
            function gr(u) {
              return Ct(65536, u);
            }
            function Ln(u) {
              return Mt(65536, u);
            }
            function ys(u) {
              return Mt(8192, u);
            }
            function ci(u) {
              return Mt(16384, u);
            }
            function Xi(u) {
              return Mt(32768, u);
            }
            function Aa(u) {
              return Ct(32768, u);
            }
            function vs(u) {
              return Mt(40960, u);
            }
            function $s(u) {
              return Ct(40960, u);
            }
            function li(u) {
              return (nr & u) !== 0;
            }
            function Yi() {
              return li(8192);
            }
            function Qi() {
              return li(4096);
            }
            function bs() {
              return li(65536);
            }
            function Ai() {
              return li(16384);
            }
            function xn() {
              return li(32768);
            }
            function Dt(u, b) {
              return Z(t.getTokenPos(), t.getTextPos(), u, b);
            }
            function Pi(u, b, O, j) {
              let z = Cn(Zt), re2;
              return (!z || u !== z.start) && (re2 = Ro(Ur, u, b, O, j), Zt.push(re2)), Kr = true, re2;
            }
            function Z(u, b, O, j) {
              return Pi(u, b - u, O, j);
            }
            function ie(u, b, O) {
              Z(u.pos, u.end, b, O);
            }
            function U(u, b) {
              Pi(t.getTextPos(), b, u);
            }
            function L() {
              return t.getStartPos();
            }
            function fe() {
              return t.hasPrecedingJSDocComment();
            }
            function T() {
              return ar;
            }
            function it() {
              return ar = t.scan();
            }
            function mt(u) {
              return _e(), u();
            }
            function _e() {
              return ba(ar) && (t.hasUnicodeEscape() || t.hasExtendedUnicodeEscape()) && Z(t.getTokenPos(), t.getTextPos(), ve.Keywords_cannot_contain_escape_characters), it();
            }
            function Ge() {
              return ar = t.scanJsDocToken();
            }
            function bt() {
              return ar = t.reScanGreaterToken();
            }
            function jt() {
              return ar = t.reScanSlashToken();
            }
            function Yt(u) {
              return ar = t.reScanTemplateToken(u);
            }
            function $t() {
              return ar = t.reScanTemplateHeadOrNoSubstitutionTemplate();
            }
            function Wt() {
              return ar = t.reScanLessThanToken();
            }
            function Xr() {
              return ar = t.reScanHashToken();
            }
            function Dr() {
              return ar = t.scanJsxIdentifier();
            }
            function Lr() {
              return ar = t.scanJsxToken();
            }
            function yr() {
              return ar = t.scanJsxAttributeValue();
            }
            function Rn(u, b) {
              let O = ar, j = Zt.length, z = Kr, re2 = nr, Ee = b !== 0 ? t.lookAhead(u) : t.tryScan(u);
              return Y.assert(re2 === nr), (!Ee || b !== 0) && (ar = O, b !== 2 && (Zt.length = j), Kr = z), Ee;
            }
            function wt(u) {
              return Rn(u, 1);
            }
            function Tr(u) {
              return Rn(u, 0);
            }
            function Tt() {
              return T() === 79 ? true : T() > 116;
            }
            function kt() {
              return T() === 79 ? true : T() === 125 && Yi() || T() === 133 && xn() ? false : T() > 116;
            }
            function de(u, b) {
              let O = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
              return T() === u ? (O && _e(), true) : (b ? Dt(b) : Dt(ve._0_expected, Br(u)), false);
            }
            let jn = Object.keys(cl).filter((u) => u.length > 2);
            function Zi(u) {
              var b;
              if (Y8(u)) {
                Z(Ar(_r, u.template.pos), u.template.end, ve.Module_declaration_names_may_only_use_or_quoted_strings);
                return;
              }
              let O = yt(u) ? qr(u) : void 0;
              if (!O || !vy(O, Sn)) {
                Dt(ve._0_expected, Br(26));
                return;
              }
              let j = Ar(_r, u.pos);
              switch (O) {
                case "const":
                case "let":
                case "var":
                  Z(j, u.end, ve.Variable_declaration_not_allowed_at_this_location);
                  return;
                case "declare":
                  return;
                case "interface":
                  Pa(ve.Interface_name_cannot_be_0, ve.Interface_must_be_given_a_name, 18);
                  return;
                case "is":
                  Z(j, t.getTextPos(), ve.A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods);
                  return;
                case "module":
                case "namespace":
                  Pa(ve.Namespace_name_cannot_be_0, ve.Namespace_must_be_given_a_name, 18);
                  return;
                case "type":
                  Pa(ve.Type_alias_name_cannot_be_0, ve.Type_alias_must_be_given_a_name, 63);
                  return;
              }
              let z = (b = Ep(O, jn, (re2) => re2)) != null ? b : e_(O);
              if (z) {
                Z(j, u.end, ve.Unknown_keyword_or_identifier_Did_you_mean_0, z);
                return;
              }
              T() !== 0 && Z(j, u.end, ve.Unexpected_keyword_or_identifier);
            }
            function Pa(u, b, O) {
              T() === O ? Dt(b) : Dt(u, t.getTokenValue());
            }
            function e_(u) {
              for (let b of jn)
                if (u.length > b.length + 2 && Pn(u, b))
                  return `${b} ${u.slice(b.length)}`;
            }
            function mc(u, b, O) {
              if (T() === 59 && !t.hasPrecedingLineBreak()) {
                Dt(ve.Decorators_must_precede_the_name_and_all_keywords_of_property_declarations);
                return;
              }
              if (T() === 20) {
                Dt(ve.Cannot_start_a_function_call_in_a_type_annotation), _e();
                return;
              }
              if (b && !ka()) {
                O ? Dt(ve._0_expected, Br(26)) : Dt(ve.Expected_for_property_initializer);
                return;
              }
              if (!t_()) {
                if (O) {
                  Dt(ve._0_expected, Br(26));
                  return;
                }
                Zi(u);
              }
            }
            function Da(u) {
              return T() === u ? (Ge(), true) : (Dt(ve._0_expected, Br(u)), false);
            }
            function Ts(u, b, O, j) {
              if (T() === b) {
                _e();
                return;
              }
              let z = Dt(ve._0_expected, Br(b));
              O && z && Rl(z, Ro(Ur, j, 1, ve.The_parser_expected_to_find_a_1_to_match_the_0_token_here, Br(u), Br(b)));
            }
            function Ot(u) {
              return T() === u ? (_e(), true) : false;
            }
            function dr(u) {
              if (T() === u)
                return sn();
            }
            function Dd(u) {
              if (T() === u)
                return Id();
            }
            function ea(u, b, O) {
              return dr(u) || Jn(u, false, b || ve._0_expected, O || Br(u));
            }
            function kd(u) {
              return Dd(u) || Jn(u, false, ve._0_expected, Br(u));
            }
            function sn() {
              let u = L(), b = T();
              return _e(), Q(Ye(b), u);
            }
            function Id() {
              let u = L(), b = T();
              return Ge(), Q(Ye(b), u);
            }
            function ka() {
              return T() === 26 ? true : T() === 19 || T() === 1 || t.hasPrecedingLineBreak();
            }
            function t_() {
              return ka() ? (T() === 26 && _e(), true) : false;
            }
            function En() {
              return t_() || de(26);
            }
            function Er(u, b, O, j) {
              let z = X(u, j);
              return Us(z, b, O != null ? O : t.getStartPos()), z;
            }
            function Q(u, b, O) {
              return Us(u, b, O != null ? O : t.getStartPos()), nr && (u.flags |= nr), Kr && (Kr = false, u.flags |= 131072), u;
            }
            function Jn(u, b, O, j) {
              b ? Pi(t.getStartPos(), 0, O, j) : O && Dt(O, j);
              let z = L(), re2 = u === 79 ? Te("", void 0) : yl(u) ? N.createTemplateLiteralLikeNode(u, "", "", void 0) : u === 8 ? F("", void 0) : u === 10 ? $("", void 0) : u === 279 ? N.createMissingDeclaration() : Ye(u);
              return Q(re2, z);
            }
            function Ia(u) {
              let b = cr.get(u);
              return b === void 0 && cr.set(u, b = u), b;
            }
            function Ss(u, b, O) {
              if (u) {
                $r++;
                let qe = L(), We = T(), $e = Ia(t.getTokenValue()), lt = t.hasExtendedUnicodeEscape();
                return it(), Q(Te($e, We, lt), qe);
              }
              if (T() === 80)
                return Dt(O || ve.Private_identifiers_are_not_allowed_outside_class_bodies), Ss(true);
              if (T() === 0 && t.tryScan(() => t.reScanInvalidIdentifier() === 79))
                return Ss(true);
              $r++;
              let j = T() === 1, z = t.isReservedWord(), re2 = t.getTokenText(), Ee = z ? ve.Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here : ve.Identifier_expected;
              return Jn(79, j, b || Ee, re2);
            }
            function hc(u) {
              return Ss(Tt(), void 0, u);
            }
            function wr(u, b) {
              return Ss(kt(), u, b);
            }
            function zr(u) {
              return Ss(fr(T()), u);
            }
            function xs() {
              return fr(T()) || T() === 10 || T() === 8;
            }
            function Nd() {
              return fr(T()) || T() === 10;
            }
            function R2(u) {
              if (T() === 10 || T() === 8) {
                let b = Di();
                return b.text = Ia(b.text), b;
              }
              return u && T() === 22 ? j2() : T() === 80 ? gc() : zr();
            }
            function Es() {
              return R2(true);
            }
            function j2() {
              let u = L();
              de(22);
              let b = It(Sr);
              return de(23), Q(N.createComputedPropertyName(b), u);
            }
            function gc() {
              let u = L(), b = Se(Ia(t.getTokenValue()));
              return _e(), Q(b, u);
            }
            function Ks(u) {
              return T() === u && Tr(Od);
            }
            function uu() {
              return _e(), t.hasPrecedingLineBreak() ? false : ta();
            }
            function Od() {
              switch (T()) {
                case 85:
                  return _e() === 92;
                case 93:
                  return _e(), T() === 88 ? wt(Ld) : T() === 154 ? wt(J2) : r_();
                case 88:
                  return Ld();
                case 124:
                case 137:
                case 151:
                  return _e(), ta();
                default:
                  return uu();
              }
            }
            function r_() {
              return T() === 59 || T() !== 41 && T() !== 128 && T() !== 18 && ta();
            }
            function J2() {
              return _e(), r_();
            }
            function Md() {
              return Wi(T()) && Tr(Od);
            }
            function ta() {
              return T() === 22 || T() === 18 || T() === 41 || T() === 25 || xs();
            }
            function Ld() {
              return _e(), T() === 84 || T() === 98 || T() === 118 || T() === 59 || T() === 126 && wt(gh) || T() === 132 && wt(yh);
            }
            function Xs(u, b) {
              if (mu(u))
                return true;
              switch (u) {
                case 0:
                case 1:
                case 3:
                  return !(T() === 26 && b) && vh();
                case 2:
                  return T() === 82 || T() === 88;
                case 4:
                  return wt(om);
                case 5:
                  return wt(Jb) || T() === 26 && !b;
                case 6:
                  return T() === 22 || xs();
                case 12:
                  switch (T()) {
                    case 22:
                    case 41:
                    case 25:
                    case 24:
                      return true;
                    default:
                      return xs();
                  }
                case 18:
                  return xs();
                case 9:
                  return T() === 22 || T() === 25 || xs();
                case 24:
                  return Nd();
                case 7:
                  return T() === 18 ? wt(Rd) : b ? kt() && !fu() : Fu() && !fu();
                case 8:
                  return tp();
                case 10:
                  return T() === 27 || T() === 25 || tp();
                case 19:
                  return T() === 101 || T() === 85 || kt();
                case 15:
                  switch (T()) {
                    case 27:
                    case 24:
                      return true;
                  }
                case 11:
                  return T() === 25 || La();
                case 16:
                  return Ec(false);
                case 17:
                  return Ec(true);
                case 20:
                case 21:
                  return T() === 27 || eo();
                case 22:
                  return Oc();
                case 23:
                  return fr(T());
                case 13:
                  return fr(T()) || T() === 18;
                case 14:
                  return true;
              }
              return Y.fail("Non-exhaustive case in 'isListElement'.");
            }
            function Rd() {
              if (Y.assert(T() === 18), _e() === 19) {
                let u = _e();
                return u === 27 || u === 18 || u === 94 || u === 117;
              }
              return true;
            }
            function yc() {
              return _e(), kt();
            }
            function pu() {
              return _e(), fr(T());
            }
            function F2() {
              return _e(), qT(T());
            }
            function fu() {
              return T() === 117 || T() === 94 ? wt(jd) : false;
            }
            function jd() {
              return _e(), La();
            }
            function Jd() {
              return _e(), eo();
            }
            function Na(u) {
              if (T() === 1)
                return true;
              switch (u) {
                case 1:
                case 2:
                case 4:
                case 5:
                case 6:
                case 12:
                case 9:
                case 23:
                case 24:
                  return T() === 19;
                case 3:
                  return T() === 19 || T() === 82 || T() === 88;
                case 7:
                  return T() === 18 || T() === 94 || T() === 117;
                case 8:
                  return B2();
                case 19:
                  return T() === 31 || T() === 20 || T() === 18 || T() === 94 || T() === 117;
                case 11:
                  return T() === 21 || T() === 26;
                case 15:
                case 21:
                case 10:
                  return T() === 23;
                case 17:
                case 16:
                case 18:
                  return T() === 21 || T() === 23;
                case 20:
                  return T() !== 27;
                case 22:
                  return T() === 18 || T() === 19;
                case 13:
                  return T() === 31 || T() === 43;
                case 14:
                  return T() === 29 && wt(Xb);
                default:
                  return false;
              }
            }
            function B2() {
              return !!(ka() || jm(T()) || T() === 38);
            }
            function du() {
              for (let u = 0; u < 25; u++)
                if (hr & 1 << u && (Xs(u, true) || Na(u)))
                  return true;
              return false;
            }
            function Kn(u, b) {
              let O = hr;
              hr |= 1 << u;
              let j = [], z = L();
              for (; !Na(u); ) {
                if (Xs(u, false)) {
                  j.push(vc(u, b));
                  continue;
                }
                if (bu(u))
                  break;
              }
              return hr = O, Er(j, z);
            }
            function vc(u, b) {
              let O = mu(u);
              return O ? hu(O) : b();
            }
            function mu(u, b) {
              var O;
              if (!Nn || !q2(u) || Kr)
                return;
              let j = Nn.currentNode(b != null ? b : t.getStartPos());
              if (!(va(j) || j.intersectsChange || Ky(j) || (j.flags & 50720768) !== nr) && Fd(j, u))
                return Af(j) && ((O = j.jsDoc) != null && O.jsDocCache) && (j.jsDoc.jsDocCache = void 0), j;
            }
            function hu(u) {
              return t.setTextPos(u.end), _e(), u;
            }
            function q2(u) {
              switch (u) {
                case 5:
                case 2:
                case 0:
                case 1:
                case 3:
                case 6:
                case 4:
                case 8:
                case 17:
                case 16:
                  return true;
              }
              return false;
            }
            function Fd(u, b) {
              switch (b) {
                case 5:
                  return Bd(u);
                case 2:
                  return gu(u);
                case 0:
                case 1:
                case 3:
                  return qd(u);
                case 6:
                  return yu(u);
                case 4:
                  return Ud(u);
                case 8:
                  return vu(u);
                case 17:
                case 16:
                  return zd(u);
              }
              return false;
            }
            function Bd(u) {
              if (u)
                switch (u.kind) {
                  case 173:
                  case 178:
                  case 174:
                  case 175:
                  case 169:
                  case 237:
                    return true;
                  case 171:
                    let b = u;
                    return !(b.name.kind === 79 && b.name.escapedText === "constructor");
                }
              return false;
            }
            function gu(u) {
              if (u)
                switch (u.kind) {
                  case 292:
                  case 293:
                    return true;
                }
              return false;
            }
            function qd(u) {
              if (u)
                switch (u.kind) {
                  case 259:
                  case 240:
                  case 238:
                  case 242:
                  case 241:
                  case 254:
                  case 250:
                  case 252:
                  case 249:
                  case 248:
                  case 246:
                  case 247:
                  case 245:
                  case 244:
                  case 251:
                  case 239:
                  case 255:
                  case 253:
                  case 243:
                  case 256:
                  case 269:
                  case 268:
                  case 275:
                  case 274:
                  case 264:
                  case 260:
                  case 261:
                  case 263:
                  case 262:
                    return true;
                }
              return false;
            }
            function yu(u) {
              return u.kind === 302;
            }
            function Ud(u) {
              if (u)
                switch (u.kind) {
                  case 177:
                  case 170:
                  case 178:
                  case 168:
                  case 176:
                    return true;
                }
              return false;
            }
            function vu(u) {
              return u.kind !== 257 ? false : u.initializer === void 0;
            }
            function zd(u) {
              return u.kind !== 166 ? false : u.initializer === void 0;
            }
            function bu(u) {
              return U2(u), du() ? true : (_e(), false);
            }
            function U2(u) {
              switch (u) {
                case 0:
                  return T() === 88 ? Dt(ve._0_expected, Br(93)) : Dt(ve.Declaration_or_statement_expected);
                case 1:
                  return Dt(ve.Declaration_or_statement_expected);
                case 2:
                  return Dt(ve.case_or_default_expected);
                case 3:
                  return Dt(ve.Statement_expected);
                case 18:
                case 4:
                  return Dt(ve.Property_or_signature_expected);
                case 5:
                  return Dt(ve.Unexpected_token_A_constructor_method_accessor_or_property_was_expected);
                case 6:
                  return Dt(ve.Enum_member_expected);
                case 7:
                  return Dt(ve.Expression_expected);
                case 8:
                  return ba(T()) ? Dt(ve._0_is_not_allowed_as_a_variable_declaration_name, Br(T())) : Dt(ve.Variable_declaration_expected);
                case 9:
                  return Dt(ve.Property_destructuring_pattern_expected);
                case 10:
                  return Dt(ve.Array_element_destructuring_pattern_expected);
                case 11:
                  return Dt(ve.Argument_expression_expected);
                case 12:
                  return Dt(ve.Property_assignment_expected);
                case 15:
                  return Dt(ve.Expression_or_comma_expected);
                case 17:
                  return Dt(ve.Parameter_declaration_expected);
                case 16:
                  return ba(T()) ? Dt(ve._0_is_not_allowed_as_a_parameter_name, Br(T())) : Dt(ve.Parameter_declaration_expected);
                case 19:
                  return Dt(ve.Type_parameter_declaration_expected);
                case 20:
                  return Dt(ve.Type_argument_expected);
                case 21:
                  return Dt(ve.Type_expected);
                case 22:
                  return Dt(ve.Unexpected_token_expected);
                case 23:
                  return Dt(ve.Identifier_expected);
                case 13:
                  return Dt(ve.Identifier_expected);
                case 14:
                  return Dt(ve.Identifier_expected);
                case 24:
                  return Dt(ve.Identifier_or_string_literal_expected);
                case 25:
                  return Y.fail("ParsingContext.Count used as a context");
                default:
                  Y.assertNever(u);
              }
            }
            function mn(u, b, O) {
              let j = hr;
              hr |= 1 << u;
              let z = [], re2 = L(), Ee = -1;
              for (; ; ) {
                if (Xs(u, false)) {
                  let qe = t.getStartPos(), We = vc(u, b);
                  if (!We) {
                    hr = j;
                    return;
                  }
                  if (z.push(We), Ee = t.getTokenPos(), Ot(27))
                    continue;
                  if (Ee = -1, Na(u))
                    break;
                  de(27, z2(u)), O && T() === 26 && !t.hasPrecedingLineBreak() && _e(), qe === t.getStartPos() && _e();
                  continue;
                }
                if (Na(u) || bu(u))
                  break;
              }
              return hr = j, Er(z, re2, void 0, Ee >= 0);
            }
            function z2(u) {
              return u === 6 ? ve.An_enum_member_name_must_be_followed_by_a_or : void 0;
            }
            function ui() {
              let u = Er([], L());
              return u.isMissingList = true, u;
            }
            function W2(u) {
              return !!u.isMissingList;
            }
            function Oa(u, b, O, j) {
              if (de(O)) {
                let z = mn(u, b);
                return de(j), z;
              }
              return ui();
            }
            function Ys(u, b) {
              let O = L(), j = u ? zr(b) : wr(b);
              for (; Ot(24) && T() !== 29; )
                j = Q(N.createQualifiedName(j, bc(u, false)), O);
              return j;
            }
            function Tu(u, b) {
              return Q(N.createQualifiedName(u, b), u.pos);
            }
            function bc(u, b) {
              if (t.hasPrecedingLineBreak() && fr(T()) && wt(Qu))
                return Jn(79, true, ve.Identifier_expected);
              if (T() === 80) {
                let O = gc();
                return b ? O : Jn(79, true, ve.Identifier_expected);
              }
              return u ? zr() : wr();
            }
            function Su(u) {
              let b = L(), O = [], j;
              do
                j = H2(u), O.push(j);
              while (j.literal.kind === 16);
              return Er(O, b);
            }
            function Wd(u) {
              let b = L();
              return Q(N.createTemplateExpression(Hd(u), Su(u)), b);
            }
            function xu() {
              let u = L();
              return Q(N.createTemplateLiteralType(Hd(false), Vd()), u);
            }
            function Vd() {
              let u = L(), b = [], O;
              do
                O = V2(), b.push(O);
              while (O.literal.kind === 16);
              return Er(b, u);
            }
            function V2() {
              let u = L();
              return Q(N.createTemplateLiteralTypeSpan(sr(), Eu(false)), u);
            }
            function Eu(u) {
              return T() === 19 ? (Yt(u), Tc()) : ea(17, ve._0_expected, Br(19));
            }
            function H2(u) {
              let b = L();
              return Q(N.createTemplateSpan(It(Sr), Eu(u)), b);
            }
            function Di() {
              return n_(T());
            }
            function Hd(u) {
              u && $t();
              let b = n_(T());
              return Y.assert(b.kind === 15, "Template head has wrong token kind"), b;
            }
            function Tc() {
              let u = n_(T());
              return Y.assert(u.kind === 16 || u.kind === 17, "Template fragment has wrong token kind"), u;
            }
            function Gd(u) {
              let b = u === 14 || u === 17, O = t.getTokenText();
              return O.substring(1, O.length - (t.isUnterminated() ? 0 : b ? 1 : 2));
            }
            function n_(u) {
              let b = L(), O = yl(u) ? N.createTemplateLiteralLikeNode(u, t.getTokenValue(), Gd(u), t.getTokenFlags() & 2048) : u === 8 ? F(t.getTokenValue(), t.getNumericLiteralFlags()) : u === 10 ? $(t.getTokenValue(), void 0, t.hasExtendedUnicodeEscape()) : ky(u) ? ae(u, t.getTokenValue()) : Y.fail();
              return t.hasExtendedUnicodeEscape() && (O.hasExtendedUnicodeEscape = true), t.isUnterminated() && (O.isUnterminated = true), _e(), Q(O, b);
            }
            function wu() {
              return Ys(true, ve.Type_expected);
            }
            function Qs() {
              if (!t.hasPrecedingLineBreak() && Wt() === 29)
                return Oa(20, sr, 29, 31);
            }
            function Sc() {
              let u = L();
              return Q(N.createTypeReferenceNode(wu(), Qs()), u);
            }
            function Cu(u) {
              switch (u.kind) {
                case 180:
                  return va(u.typeName);
                case 181:
                case 182: {
                  let { parameters: b, type: O } = u;
                  return W2(b) || Cu(O);
                }
                case 193:
                  return Cu(u.type);
                default:
                  return false;
              }
            }
            function G2(u) {
              return _e(), Q(N.createTypePredicateNode(void 0, u, sr()), u.pos);
            }
            function $d() {
              let u = L();
              return _e(), Q(N.createThisTypeNode(), u);
            }
            function Kd() {
              let u = L();
              return _e(), Q(N.createJSDocAllType(), u);
            }
            function $2() {
              let u = L();
              return _e(), Q(N.createJSDocNonNullableType(Lu(), false), u);
            }
            function Xd() {
              let u = L();
              return _e(), T() === 27 || T() === 19 || T() === 21 || T() === 31 || T() === 63 || T() === 51 ? Q(N.createJSDocUnknownType(), u) : Q(N.createJSDocNullableType(sr(), false), u);
            }
            function K2() {
              let u = L(), b = fe();
              if (wt(qh)) {
                _e();
                let O = ra(36), j = pi(58, false);
                return St(Q(N.createJSDocFunctionType(O, j), u), b);
              }
              return Q(N.createTypeReferenceNode(zr(), void 0), u);
            }
            function Yd() {
              let u = L(), b;
              return (T() === 108 || T() === 103) && (b = zr(), de(58)), Q(N.createParameterDeclaration(void 0, void 0, b, void 0, xc(), void 0), u);
            }
            function xc() {
              t.setInJSDocType(true);
              let u = L();
              if (Ot(142)) {
                let j = N.createJSDocNamepathType(void 0);
                e:
                  for (; ; )
                    switch (T()) {
                      case 19:
                      case 1:
                      case 27:
                      case 5:
                        break e;
                      default:
                        Ge();
                    }
                return t.setInJSDocType(false), Q(j, u);
              }
              let b = Ot(25), O = Ju();
              return t.setInJSDocType(false), b && (O = Q(N.createJSDocVariadicType(O), u)), T() === 63 ? (_e(), Q(N.createJSDocOptionalType(O), u)) : O;
            }
            function X2() {
              let u = L();
              de(112);
              let b = Ys(true), O = t.hasPrecedingLineBreak() ? void 0 : Nc();
              return Q(N.createTypeQueryNode(b, O), u);
            }
            function Qd() {
              let u = L(), b = ki(false, true), O = wr(), j, z;
              Ot(94) && (eo() || !La() ? j = sr() : z = Wu());
              let re2 = Ot(63) ? sr() : void 0, Ee = N.createTypeParameterDeclaration(b, O, j, re2);
              return Ee.expression = z, Q(Ee, u);
            }
            function Xn() {
              if (T() === 29)
                return Oa(19, Qd, 29, 31);
            }
            function Ec(u) {
              return T() === 25 || tp() || Wi(T()) || T() === 59 || eo(!u);
            }
            function Zd(u) {
              let b = no(ve.Private_identifiers_cannot_be_used_as_parameters);
              return hf(b) === 0 && !Ke(u) && Wi(T()) && _e(), b;
            }
            function em() {
              return Tt() || T() === 22 || T() === 18;
            }
            function Au(u) {
              return Pu(u);
            }
            function tm(u) {
              return Pu(u, false);
            }
            function Pu(u) {
              let b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true, O = L(), j = fe(), z = u ? Xi(() => ki(true)) : Aa(() => ki(true));
              if (T() === 108) {
                let We = N.createParameterDeclaration(z, void 0, Ss(true), void 0, Ma(), void 0), $e = pa(z);
                return $e && ie($e, ve.Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters), St(Q(We, O), j);
              }
              let re2 = br;
              br = false;
              let Ee = dr(25);
              if (!b && !em())
                return;
              let qe = St(Q(N.createParameterDeclaration(z, Ee, Zd(z), dr(57), Ma(), Ra()), O), j);
              return br = re2, qe;
            }
            function pi(u, b) {
              if (rm(u, b))
                return gr(Ju);
            }
            function rm(u, b) {
              return u === 38 ? (de(u), true) : Ot(58) ? true : b && T() === 38 ? (Dt(ve._0_expected, Br(58)), _e(), true) : false;
            }
            function wc(u, b) {
              let O = Yi(), j = xn();
              Le(!!(u & 1)), ot(!!(u & 2));
              let z = u & 32 ? mn(17, Yd) : mn(16, () => b ? Au(j) : tm(j));
              return Le(O), ot(j), z;
            }
            function ra(u) {
              if (!de(20))
                return ui();
              let b = wc(u, true);
              return de(21), b;
            }
            function i_() {
              Ot(27) || En();
            }
            function nm(u) {
              let b = L(), O = fe();
              u === 177 && de(103);
              let j = Xn(), z = ra(4), re2 = pi(58, true);
              i_();
              let Ee = u === 176 ? N.createCallSignature(j, z, re2) : N.createConstructSignature(j, z, re2);
              return St(Q(Ee, b), O);
            }
            function im() {
              return T() === 22 && wt(Zs);
            }
            function Zs() {
              if (_e(), T() === 25 || T() === 23)
                return true;
              if (Wi(T())) {
                if (_e(), kt())
                  return true;
              } else if (kt())
                _e();
              else
                return false;
              return T() === 58 || T() === 27 ? true : T() !== 57 ? false : (_e(), T() === 58 || T() === 27 || T() === 23);
            }
            function am(u, b, O) {
              let j = Oa(16, () => Au(false), 22, 23), z = Ma();
              i_();
              let re2 = N.createIndexSignature(O, j, z);
              return St(Q(re2, u), b);
            }
            function sm(u, b, O) {
              let j = Es(), z = dr(57), re2;
              if (T() === 20 || T() === 29) {
                let Ee = Xn(), qe = ra(4), We = pi(58, true);
                re2 = N.createMethodSignature(O, j, z, Ee, qe, We);
              } else {
                let Ee = Ma();
                re2 = N.createPropertySignature(O, j, z, Ee), T() === 63 && (re2.initializer = Ra());
              }
              return i_(), St(Q(re2, u), b);
            }
            function om() {
              if (T() === 20 || T() === 29 || T() === 137 || T() === 151)
                return true;
              let u = false;
              for (; Wi(T()); )
                u = true, _e();
              return T() === 22 ? true : (xs() && (u = true, _e()), u ? T() === 20 || T() === 29 || T() === 57 || T() === 58 || T() === 27 || ka() : false);
            }
            function Du() {
              if (T() === 20 || T() === 29)
                return nm(176);
              if (T() === 103 && wt(a_))
                return nm(177);
              let u = L(), b = fe(), O = ki(false);
              return Ks(137) ? Fa(u, b, O, 174, 4) : Ks(151) ? Fa(u, b, O, 175, 4) : im() ? am(u, b, O) : sm(u, b, O);
            }
            function a_() {
              return _e(), T() === 20 || T() === 29;
            }
            function Y2() {
              return _e() === 24;
            }
            function ku() {
              switch (_e()) {
                case 20:
                case 29:
                case 24:
                  return true;
              }
              return false;
            }
            function Q2() {
              let u = L();
              return Q(N.createTypeLiteralNode(Iu()), u);
            }
            function Iu() {
              let u;
              return de(18) ? (u = Kn(4, Du), de(19)) : u = ui(), u;
            }
            function Z2() {
              return _e(), T() === 39 || T() === 40 ? _e() === 146 : (T() === 146 && _e(), T() === 22 && yc() && _e() === 101);
            }
            function _m() {
              let u = L(), b = zr();
              de(101);
              let O = sr();
              return Q(N.createTypeParameterDeclaration(void 0, b, O, void 0), u);
            }
            function eb() {
              let u = L();
              de(18);
              let b;
              (T() === 146 || T() === 39 || T() === 40) && (b = sn(), b.kind !== 146 && de(146)), de(22);
              let O = _m(), j = Ot(128) ? sr() : void 0;
              de(23);
              let z;
              (T() === 57 || T() === 39 || T() === 40) && (z = sn(), z.kind !== 57 && de(57));
              let re2 = Ma();
              En();
              let Ee = Kn(4, Du);
              return de(19), Q(N.createMappedTypeNode(b, O, j, z, re2, Ee), u);
            }
            function Nu() {
              let u = L();
              if (Ot(25))
                return Q(N.createRestTypeNode(sr()), u);
              let b = sr();
              if (uE(b) && b.pos === b.type.pos) {
                let O = N.createOptionalTypeNode(b.type);
                return Rt(O, b), O.flags = b.flags, O;
              }
              return b;
            }
            function cm() {
              return _e() === 58 || T() === 57 && _e() === 58;
            }
            function lm() {
              return T() === 25 ? fr(_e()) && cm() : fr(T()) && cm();
            }
            function tb() {
              if (wt(lm)) {
                let u = L(), b = fe(), O = dr(25), j = zr(), z = dr(57);
                de(58);
                let re2 = Nu(), Ee = N.createNamedTupleMember(O, j, z, re2);
                return St(Q(Ee, u), b);
              }
              return Nu();
            }
            function um() {
              let u = L();
              return Q(N.createTupleTypeNode(Oa(21, tb, 22, 23)), u);
            }
            function rb() {
              let u = L();
              de(20);
              let b = sr();
              return de(21), Q(N.createParenthesizedType(b), u);
            }
            function pm() {
              let u;
              if (T() === 126) {
                let b = L();
                _e();
                let O = Q(Ye(126), b);
                u = Er([O], b);
              }
              return u;
            }
            function fm() {
              let u = L(), b = fe(), O = pm(), j = Ot(103);
              Y.assert(!O || j, "Per isStartOfFunctionOrConstructorType, a function type cannot have modifiers.");
              let z = Xn(), re2 = ra(4), Ee = pi(38, false), qe = j ? N.createConstructorTypeNode(O, z, re2, Ee) : N.createFunctionTypeNode(z, re2, Ee);
              return St(Q(qe, u), b);
            }
            function Ou() {
              let u = sn();
              return T() === 24 ? void 0 : u;
            }
            function dm(u) {
              let b = L();
              u && _e();
              let O = T() === 110 || T() === 95 || T() === 104 ? sn() : n_(T());
              return u && (O = Q(N.createPrefixUnaryExpression(40, O), b)), Q(N.createLiteralTypeNode(O), b);
            }
            function mm() {
              return _e(), T() === 100;
            }
            function nb() {
              let u = L(), b = t.getTokenPos();
              de(18);
              let O = t.hasPrecedingLineBreak();
              de(130), de(58);
              let j = _p(true);
              if (!de(19)) {
                let z = Cn(Zt);
                z && z.code === ve._0_expected.code && Rl(z, Ro(Ur, b, 1, ve.The_parser_expected_to_find_a_1_to_match_the_0_token_here, "{", "}"));
              }
              return Q(N.createImportTypeAssertionContainer(j, O), u);
            }
            function Mu() {
              Gr |= 2097152;
              let u = L(), b = Ot(112);
              de(100), de(20);
              let O = sr(), j;
              Ot(27) && (j = nb()), de(21);
              let z = Ot(24) ? wu() : void 0, re2 = Qs();
              return Q(N.createImportTypeNode(O, j, z, re2, b), u);
            }
            function hm() {
              return _e(), T() === 8 || T() === 9;
            }
            function Lu() {
              switch (T()) {
                case 131:
                case 157:
                case 152:
                case 148:
                case 160:
                case 153:
                case 134:
                case 155:
                case 144:
                case 149:
                  return Tr(Ou) || Sc();
                case 66:
                  t.reScanAsteriskEqualsToken();
                case 41:
                  return Kd();
                case 60:
                  t.reScanQuestionToken();
                case 57:
                  return Xd();
                case 98:
                  return K2();
                case 53:
                  return $2();
                case 14:
                case 10:
                case 8:
                case 9:
                case 110:
                case 95:
                case 104:
                  return dm();
                case 40:
                  return wt(hm) ? dm(true) : Sc();
                case 114:
                  return sn();
                case 108: {
                  let u = $d();
                  return T() === 140 && !t.hasPrecedingLineBreak() ? G2(u) : u;
                }
                case 112:
                  return wt(mm) ? Mu() : X2();
                case 18:
                  return wt(Z2) ? eb() : Q2();
                case 22:
                  return um();
                case 20:
                  return rb();
                case 100:
                  return Mu();
                case 129:
                  return wt(Qu) ? Cm() : Sc();
                case 15:
                  return xu();
                default:
                  return Sc();
              }
            }
            function eo(u) {
              switch (T()) {
                case 131:
                case 157:
                case 152:
                case 148:
                case 160:
                case 134:
                case 146:
                case 153:
                case 156:
                case 114:
                case 155:
                case 104:
                case 108:
                case 112:
                case 144:
                case 18:
                case 22:
                case 29:
                case 51:
                case 50:
                case 103:
                case 10:
                case 8:
                case 9:
                case 110:
                case 95:
                case 149:
                case 41:
                case 57:
                case 53:
                case 25:
                case 138:
                case 100:
                case 129:
                case 14:
                case 15:
                  return true;
                case 98:
                  return !u;
                case 40:
                  return !u && wt(hm);
                case 20:
                  return !u && wt(gm);
                default:
                  return kt();
              }
            }
            function gm() {
              return _e(), T() === 21 || Ec(false) || eo();
            }
            function ym() {
              let u = L(), b = Lu();
              for (; !t.hasPrecedingLineBreak(); )
                switch (T()) {
                  case 53:
                    _e(), b = Q(N.createJSDocNonNullableType(b, true), u);
                    break;
                  case 57:
                    if (wt(Jd))
                      return b;
                    _e(), b = Q(N.createJSDocNullableType(b, true), u);
                    break;
                  case 22:
                    if (de(22), eo()) {
                      let O = sr();
                      de(23), b = Q(N.createIndexedAccessTypeNode(b, O), u);
                    } else
                      de(23), b = Q(N.createArrayTypeNode(b), u);
                    break;
                  default:
                    return b;
                }
              return b;
            }
            function vm(u) {
              let b = L();
              return de(u), Q(N.createTypeOperatorNode(u, Tm()), b);
            }
            function ib() {
              if (Ot(94)) {
                let u = Ln(sr);
                if (bs() || T() !== 57)
                  return u;
              }
            }
            function bm() {
              let u = L(), b = wr(), O = Tr(ib), j = N.createTypeParameterDeclaration(void 0, b, O);
              return Q(j, u);
            }
            function ab() {
              let u = L();
              return de(138), Q(N.createInferTypeNode(bm()), u);
            }
            function Tm() {
              let u = T();
              switch (u) {
                case 141:
                case 156:
                case 146:
                  return vm(u);
                case 138:
                  return ab();
              }
              return gr(ym);
            }
            function Cc(u) {
              if (ju()) {
                let b = fm(), O;
                return $l(b) ? O = u ? ve.Function_type_notation_must_be_parenthesized_when_used_in_a_union_type : ve.Function_type_notation_must_be_parenthesized_when_used_in_an_intersection_type : O = u ? ve.Constructor_type_notation_must_be_parenthesized_when_used_in_a_union_type : ve.Constructor_type_notation_must_be_parenthesized_when_used_in_an_intersection_type, ie(b, O), b;
              }
            }
            function Sm(u, b, O) {
              let j = L(), z = u === 51, re2 = Ot(u), Ee = re2 && Cc(z) || b();
              if (T() === u || re2) {
                let qe = [Ee];
                for (; Ot(u); )
                  qe.push(Cc(z) || b());
                Ee = Q(O(Er(qe, j)), j);
              }
              return Ee;
            }
            function Ru() {
              return Sm(50, Tm, N.createIntersectionTypeNode);
            }
            function sb() {
              return Sm(51, Ru, N.createUnionTypeNode);
            }
            function xm() {
              return _e(), T() === 103;
            }
            function ju() {
              return T() === 29 || T() === 20 && wt(Em) ? true : T() === 103 || T() === 126 && wt(xm);
            }
            function ob() {
              if (Wi(T()) && ki(false), kt() || T() === 108)
                return _e(), true;
              if (T() === 22 || T() === 18) {
                let u = Zt.length;
                return no(), u === Zt.length;
              }
              return false;
            }
            function Em() {
              return _e(), !!(T() === 21 || T() === 25 || ob() && (T() === 58 || T() === 27 || T() === 57 || T() === 63 || T() === 21 && (_e(), T() === 38)));
            }
            function Ju() {
              let u = L(), b = kt() && Tr(wm), O = sr();
              return b ? Q(N.createTypePredicateNode(void 0, b, O), u) : O;
            }
            function wm() {
              let u = wr();
              if (T() === 140 && !t.hasPrecedingLineBreak())
                return _e(), u;
            }
            function Cm() {
              let u = L(), b = ea(129), O = T() === 108 ? $d() : wr(), j = Ot(140) ? sr() : void 0;
              return Q(N.createTypePredicateNode(b, O, j), u);
            }
            function sr() {
              if (nr & 40960)
                return Ct(40960, sr);
              if (ju())
                return fm();
              let u = L(), b = sb();
              if (!bs() && !t.hasPrecedingLineBreak() && Ot(94)) {
                let O = Ln(sr);
                de(57);
                let j = gr(sr);
                de(58);
                let z = gr(sr);
                return Q(N.createConditionalTypeNode(b, O, j, z), u);
              }
              return b;
            }
            function Ma() {
              return Ot(58) ? sr() : void 0;
            }
            function Fu() {
              switch (T()) {
                case 108:
                case 106:
                case 104:
                case 110:
                case 95:
                case 8:
                case 9:
                case 10:
                case 14:
                case 15:
                case 20:
                case 22:
                case 18:
                case 98:
                case 84:
                case 103:
                case 43:
                case 68:
                case 79:
                  return true;
                case 100:
                  return wt(ku);
                default:
                  return kt();
              }
            }
            function La() {
              if (Fu())
                return true;
              switch (T()) {
                case 39:
                case 40:
                case 54:
                case 53:
                case 89:
                case 112:
                case 114:
                case 45:
                case 46:
                case 29:
                case 133:
                case 125:
                case 80:
                case 59:
                  return true;
                default:
                  return Jm() ? true : kt();
              }
            }
            function Am() {
              return T() !== 18 && T() !== 98 && T() !== 84 && T() !== 59 && La();
            }
            function Sr() {
              let u = Ai();
              u && Re(false);
              let b = L(), O = Yr(true), j;
              for (; j = dr(27); )
                O = Uu(O, j, Yr(true), b);
              return u && Re(true), O;
            }
            function Ra() {
              return Ot(63) ? Yr(true) : void 0;
            }
            function Yr(u) {
              if (Pm())
                return Dm();
              let b = cb(u) || Mm(u);
              if (b)
                return b;
              let O = L(), j = s_(0);
              return j.kind === 79 && T() === 38 ? km(O, j, u, void 0) : Do(j) && G_(bt()) ? Uu(j, sn(), Yr(u), O) : lb(j, O, u);
            }
            function Pm() {
              return T() === 125 ? Yi() ? true : wt(Zu) : false;
            }
            function _b() {
              return _e(), !t.hasPrecedingLineBreak() && kt();
            }
            function Dm() {
              let u = L();
              return _e(), !t.hasPrecedingLineBreak() && (T() === 41 || La()) ? Q(N.createYieldExpression(dr(41), Yr(true)), u) : Q(N.createYieldExpression(void 0, void 0), u);
            }
            function km(u, b, O, j) {
              Y.assert(T() === 38, "parseSimpleArrowFunctionExpression should only have been called if we had a =>");
              let z = N.createParameterDeclaration(void 0, void 0, b, void 0, void 0, void 0);
              Q(z, b.pos);
              let re2 = Er([z], z.pos, z.end), Ee = ea(38), qe = Bu(!!j, O), We = N.createArrowFunction(j, void 0, re2, void 0, Ee, qe);
              return He(Q(We, u));
            }
            function cb(u) {
              let b = Im();
              if (b !== 0)
                return b === 1 ? Rm(true, true) : Tr(() => Om(u));
            }
            function Im() {
              return T() === 20 || T() === 29 || T() === 132 ? wt(Nm) : T() === 38 ? 1 : 0;
            }
            function Nm() {
              if (T() === 132 && (_e(), t.hasPrecedingLineBreak() || T() !== 20 && T() !== 29))
                return 0;
              let u = T(), b = _e();
              if (u === 20) {
                if (b === 21)
                  switch (_e()) {
                    case 38:
                    case 58:
                    case 18:
                      return 1;
                    default:
                      return 0;
                  }
                if (b === 22 || b === 18)
                  return 2;
                if (b === 25)
                  return 1;
                if (Wi(b) && b !== 132 && wt(yc))
                  return _e() === 128 ? 0 : 1;
                if (!kt() && b !== 108)
                  return 0;
                switch (_e()) {
                  case 58:
                    return 1;
                  case 57:
                    return _e(), T() === 58 || T() === 27 || T() === 63 || T() === 21 ? 1 : 0;
                  case 27:
                  case 63:
                  case 21:
                    return 2;
                }
                return 0;
              } else
                return Y.assert(u === 29), !kt() && T() !== 85 ? 0 : pr === 1 ? wt(() => {
                  Ot(85);
                  let j = _e();
                  if (j === 94)
                    switch (_e()) {
                      case 63:
                      case 31:
                      case 43:
                        return false;
                      default:
                        return true;
                    }
                  else if (j === 27 || j === 63)
                    return true;
                  return false;
                }) ? 1 : 0 : 2;
            }
            function Om(u) {
              let b = t.getTokenPos();
              if (On != null && On.has(b))
                return;
              let O = Rm(false, u);
              return O || (On || (On = /* @__PURE__ */ new Set())).add(b), O;
            }
            function Mm(u) {
              if (T() === 132 && wt(Lm) === 1) {
                let b = L(), O = sp(), j = s_(0);
                return km(b, j, u, O);
              }
            }
            function Lm() {
              if (T() === 132) {
                if (_e(), t.hasPrecedingLineBreak() || T() === 38)
                  return 0;
                let u = s_(0);
                if (!t.hasPrecedingLineBreak() && u.kind === 79 && T() === 38)
                  return 1;
              }
              return 0;
            }
            function Rm(u, b) {
              let O = L(), j = fe(), z = sp(), re2 = Ke(z, Ul) ? 2 : 0, Ee = Xn(), qe;
              if (de(20)) {
                if (u)
                  qe = wc(re2, u);
                else {
                  let di = wc(re2, u);
                  if (!di)
                    return;
                  qe = di;
                }
                if (!de(21) && !u)
                  return;
              } else {
                if (!u)
                  return;
                qe = ui();
              }
              let We = T() === 58, $e = pi(58, false);
              if ($e && !u && Cu($e))
                return;
              let lt = $e;
              for (; (lt == null ? void 0 : lt.kind) === 193; )
                lt = lt.type;
              let Jt = lt && dd(lt);
              if (!u && T() !== 38 && (Jt || T() !== 18))
                return;
              let Lt = T(), At = ea(38), kr = Lt === 38 || Lt === 18 ? Bu(Ke(z, Ul), b) : wr();
              if (!b && We && T() !== 58)
                return;
              let Fn = N.createArrowFunction(z, Ee, qe, $e, At, kr);
              return St(Q(Fn, O), j);
            }
            function Bu(u, b) {
              if (T() === 18)
                return Dc(u ? 2 : 0);
              if (T() !== 26 && T() !== 98 && T() !== 84 && vh() && !Am())
                return Dc(16 | (u ? 2 : 0));
              let O = br;
              br = false;
              let j = u ? Xi(() => Yr(b)) : Aa(() => Yr(b));
              return br = O, j;
            }
            function lb(u, b, O) {
              let j = dr(57);
              if (!j)
                return u;
              let z;
              return Q(N.createConditionalExpression(u, j, Ct(r, () => Yr(false)), z = ea(58), xl(z) ? Yr(O) : Jn(79, false, ve._0_expected, Br(58))), b);
            }
            function s_(u) {
              let b = L(), O = Wu();
              return qu(u, O, b);
            }
            function jm(u) {
              return u === 101 || u === 162;
            }
            function qu(u, b, O) {
              for (; ; ) {
                bt();
                let j = Dl(T());
                if (!(T() === 42 ? j >= u : j > u) || T() === 101 && Qi())
                  break;
                if (T() === 128 || T() === 150) {
                  if (t.hasPrecedingLineBreak())
                    break;
                  {
                    let re2 = T();
                    _e(), b = re2 === 150 ? Fm(b, sr()) : Bm(b, sr());
                  }
                } else
                  b = Uu(b, sn(), s_(j), O);
              }
              return b;
            }
            function Jm() {
              return Qi() && T() === 101 ? false : Dl(T()) > 0;
            }
            function Fm(u, b) {
              return Q(N.createSatisfiesExpression(u, b), u.pos);
            }
            function Uu(u, b, O, j) {
              return Q(N.createBinaryExpression(u, b, O), j);
            }
            function Bm(u, b) {
              return Q(N.createAsExpression(u, b), u.pos);
            }
            function qm() {
              let u = L();
              return Q(N.createPrefixUnaryExpression(T(), mt(na)), u);
            }
            function Um() {
              let u = L();
              return Q(N.createDeleteExpression(mt(na)), u);
            }
            function ub() {
              let u = L();
              return Q(N.createTypeOfExpression(mt(na)), u);
            }
            function zm() {
              let u = L();
              return Q(N.createVoidExpression(mt(na)), u);
            }
            function pb() {
              return T() === 133 ? xn() ? true : wt(Zu) : false;
            }
            function zu() {
              let u = L();
              return Q(N.createAwaitExpression(mt(na)), u);
            }
            function Wu() {
              if (Wm()) {
                let O = L(), j = Vm();
                return T() === 42 ? qu(Dl(T()), j, O) : j;
              }
              let u = T(), b = na();
              if (T() === 42) {
                let O = Ar(_r, b.pos), { end: j } = b;
                b.kind === 213 ? Z(O, j, ve.A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses) : Z(O, j, ve.An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses, Br(u));
              }
              return b;
            }
            function na() {
              switch (T()) {
                case 39:
                case 40:
                case 54:
                case 53:
                  return qm();
                case 89:
                  return Um();
                case 112:
                  return ub();
                case 114:
                  return zm();
                case 29:
                  return pr === 1 ? o_(true) : Zm();
                case 133:
                  if (pb())
                    return zu();
                default:
                  return Vm();
              }
            }
            function Wm() {
              switch (T()) {
                case 39:
                case 40:
                case 54:
                case 53:
                case 89:
                case 112:
                case 114:
                case 133:
                  return false;
                case 29:
                  if (pr !== 1)
                    return false;
                default:
                  return true;
              }
            }
            function Vm() {
              if (T() === 45 || T() === 46) {
                let b = L();
                return Q(N.createPrefixUnaryExpression(T(), mt(to)), b);
              } else if (pr === 1 && T() === 29 && wt(F2))
                return o_(true);
              let u = to();
              if (Y.assert(Do(u)), (T() === 45 || T() === 46) && !t.hasPrecedingLineBreak()) {
                let b = T();
                return _e(), Q(N.createPostfixUnaryExpression(u, b), u.pos);
              }
              return u;
            }
            function to() {
              let u = L(), b;
              return T() === 100 ? wt(a_) ? (Gr |= 2097152, b = sn()) : wt(Y2) ? (_e(), _e(), b = Q(N.createMetaProperty(100, zr()), u), Gr |= 4194304) : b = Hm() : b = T() === 106 ? Vu() : Hm(), $u(u, b);
            }
            function Hm() {
              let u = L(), b = Ku();
              return Ja(u, b, true);
            }
            function Vu() {
              let u = L(), b = sn();
              if (T() === 29) {
                let O = L(), j = Tr(Pc);
                j !== void 0 && (Z(O, L(), ve.super_may_not_use_type_arguments), __() || (b = N.createExpressionWithTypeArguments(b, j)));
              }
              return T() === 20 || T() === 24 || T() === 22 ? b : (ea(24, ve.super_must_be_followed_by_an_argument_list_or_member_access), Q(Ve(b, bc(true, true)), u));
            }
            function o_(u, b, O) {
              let j = L(), z = Km(u), re2;
              if (z.kind === 283) {
                let Ee = $m(z), qe, We = Ee[Ee.length - 1];
                if ((We == null ? void 0 : We.kind) === 281 && !Hi(We.openingElement.tagName, We.closingElement.tagName) && Hi(z.tagName, We.closingElement.tagName)) {
                  let $e = We.children.end, lt = Q(N.createJsxElement(We.openingElement, We.children, Q(N.createJsxClosingElement(Q(Te(""), $e, $e)), $e, $e)), We.openingElement.pos, $e);
                  Ee = Er([...Ee.slice(0, Ee.length - 1), lt], Ee.pos, $e), qe = We.closingElement;
                } else
                  qe = Qm(z, u), Hi(z.tagName, qe.tagName) || (O && tu(O) && Hi(qe.tagName, O.tagName) ? ie(z.tagName, ve.JSX_element_0_has_no_corresponding_closing_tag, B_(_r, z.tagName)) : ie(qe.tagName, ve.Expected_corresponding_JSX_closing_tag_for_0, B_(_r, z.tagName)));
                re2 = Q(N.createJsxElement(z, Ee, qe), j);
              } else
                z.kind === 286 ? re2 = Q(N.createJsxFragment(z, $m(z), gb(u)), j) : (Y.assert(z.kind === 282), re2 = z);
              if (u && T() === 29) {
                let Ee = typeof b > "u" ? re2.pos : b, qe = Tr(() => o_(true, Ee));
                if (qe) {
                  let We = Jn(27, false);
                  return $f(We, qe.pos, 0), Z(Ar(_r, Ee), qe.end, ve.JSX_expressions_must_have_one_parent_element), Q(N.createBinaryExpression(re2, We, qe), j);
                }
              }
              return re2;
            }
            function fb() {
              let u = L(), b = N.createJsxText(t.getTokenValue(), ar === 12);
              return ar = t.scanJsxToken(), Q(b, u);
            }
            function Gm(u, b) {
              switch (b) {
                case 1:
                  if (u2(u))
                    ie(u, ve.JSX_fragment_has_no_corresponding_closing_tag);
                  else {
                    let O = u.tagName, j = Ar(_r, O.pos);
                    Z(j, O.end, ve.JSX_element_0_has_no_corresponding_closing_tag, B_(_r, u.tagName));
                  }
                  return;
                case 30:
                case 7:
                  return;
                case 11:
                case 12:
                  return fb();
                case 18:
                  return Xm(false);
                case 29:
                  return o_(false, void 0, u);
                default:
                  return Y.assertNever(b);
              }
            }
            function $m(u) {
              let b = [], O = L(), j = hr;
              for (hr |= 1 << 14; ; ) {
                let z = Gm(u, ar = t.reScanJsxToken());
                if (!z || (b.push(z), tu(u) && (z == null ? void 0 : z.kind) === 281 && !Hi(z.openingElement.tagName, z.closingElement.tagName) && Hi(u.tagName, z.closingElement.tagName)))
                  break;
              }
              return hr = j, Er(b, O);
            }
            function db() {
              let u = L();
              return Q(N.createJsxAttributes(Kn(13, mb)), u);
            }
            function Km(u) {
              let b = L();
              if (de(29), T() === 31)
                return Lr(), Q(N.createJsxOpeningFragment(), b);
              let O = Ac(), j = nr & 262144 ? void 0 : Nc(), z = db(), re2;
              return T() === 31 ? (Lr(), re2 = N.createJsxOpeningElement(O, j, z)) : (de(43), de(31, void 0, false) && (u ? _e() : Lr()), re2 = N.createJsxSelfClosingElement(O, j, z)), Q(re2, b);
            }
            function Ac() {
              let u = L();
              Dr();
              let b = T() === 108 ? sn() : zr();
              for (; Ot(24); )
                b = Q(Ve(b, bc(true, false)), u);
              return b;
            }
            function Xm(u) {
              let b = L();
              if (!de(18))
                return;
              let O, j;
              return T() !== 19 && (O = dr(25), j = Sr()), u ? de(19) : de(19, void 0, false) && Lr(), Q(N.createJsxExpression(O, j), b);
            }
            function mb() {
              if (T() === 18)
                return hb();
              Dr();
              let u = L();
              return Q(N.createJsxAttribute(zr(), Ym()), u);
            }
            function Ym() {
              if (T() === 63) {
                if (yr() === 10)
                  return Di();
                if (T() === 18)
                  return Xm(true);
                if (T() === 29)
                  return o_(true);
                Dt(ve.or_JSX_element_expected);
              }
            }
            function hb() {
              let u = L();
              de(18), de(25);
              let b = Sr();
              return de(19), Q(N.createJsxSpreadAttribute(b), u);
            }
            function Qm(u, b) {
              let O = L();
              de(30);
              let j = Ac();
              return de(31, void 0, false) && (b || !Hi(u.tagName, j) ? _e() : Lr()), Q(N.createJsxClosingElement(j), O);
            }
            function gb(u) {
              let b = L();
              return de(30), de(31, ve.Expected_corresponding_closing_tag_for_JSX_fragment, false) && (u ? _e() : Lr()), Q(N.createJsxJsxClosingFragment(), b);
            }
            function Zm() {
              Y.assert(pr !== 1, "Type assertions should never be parsed in JSX; they should be parsed as comparisons or JSX elements/fragments.");
              let u = L();
              de(29);
              let b = sr();
              de(31);
              let O = na();
              return Q(N.createTypeAssertion(b, O), u);
            }
            function yb() {
              return _e(), fr(T()) || T() === 22 || __();
            }
            function eh() {
              return T() === 28 && wt(yb);
            }
            function Hu(u) {
              if (u.flags & 32)
                return true;
              if (Uo(u)) {
                let b = u.expression;
                for (; Uo(b) && !(b.flags & 32); )
                  b = b.expression;
                if (b.flags & 32) {
                  for (; Uo(u); )
                    u.flags |= 32, u = u.expression;
                  return true;
                }
              }
              return false;
            }
            function fi(u, b, O) {
              let j = bc(true, true), z = O || Hu(b), re2 = z ? pt(b, O, j) : Ve(b, j);
              if (z && vn(re2.name) && ie(re2.name, ve.An_optional_chain_cannot_contain_private_identifiers), e2(b) && b.typeArguments) {
                let Ee = b.typeArguments.pos - 1, qe = Ar(_r, b.typeArguments.end) + 1;
                Z(Ee, qe, ve.An_instantiation_expression_cannot_be_followed_by_a_property_access);
              }
              return Q(re2, u);
            }
            function ja(u, b, O) {
              let j;
              if (T() === 23)
                j = Jn(79, true, ve.An_element_access_expression_should_take_an_argument);
              else {
                let re2 = It(Sr);
                Ta(re2) && (re2.text = Ia(re2.text)), j = re2;
              }
              de(23);
              let z = O || Hu(b) ? Nt(b, O, j) : Gt(b, j);
              return Q(z, u);
            }
            function Ja(u, b, O) {
              for (; ; ) {
                let j, z = false;
                if (O && eh() ? (j = ea(28), z = fr(T())) : z = Ot(24), z) {
                  b = fi(u, b, j);
                  continue;
                }
                if ((j || !Ai()) && Ot(22)) {
                  b = ja(u, b, j);
                  continue;
                }
                if (__()) {
                  b = !j && b.kind === 230 ? Gu(u, b.expression, j, b.typeArguments) : Gu(u, b, j, void 0);
                  continue;
                }
                if (!j) {
                  if (T() === 53 && !t.hasPrecedingLineBreak()) {
                    _e(), b = Q(N.createNonNullExpression(b), u);
                    continue;
                  }
                  let re2 = Tr(Pc);
                  if (re2) {
                    b = Q(N.createExpressionWithTypeArguments(b, re2), u);
                    continue;
                  }
                }
                return b;
              }
            }
            function __() {
              return T() === 14 || T() === 15;
            }
            function Gu(u, b, O, j) {
              let z = N.createTaggedTemplateExpression(b, j, T() === 14 ? ($t(), Di()) : Wd(true));
              return (O || b.flags & 32) && (z.flags |= 32), z.questionDotToken = O, Q(z, u);
            }
            function $u(u, b) {
              for (; ; ) {
                b = Ja(u, b, true);
                let O, j = dr(28);
                if (j && (O = Tr(Pc), __())) {
                  b = Gu(u, b, j, O);
                  continue;
                }
                if (O || T() === 20) {
                  !j && b.kind === 230 && (O = b.typeArguments, b = b.expression);
                  let z = th(), re2 = j || Hu(b) ? er(b, j, O, z) : Xt(b, O, z);
                  b = Q(re2, u);
                  continue;
                }
                if (j) {
                  let z = Jn(79, false, ve.Identifier_expected);
                  b = Q(pt(b, j, z), u);
                }
                break;
              }
              return b;
            }
            function th() {
              de(20);
              let u = mn(11, ih);
              return de(21), u;
            }
            function Pc() {
              if (nr & 262144 || Wt() !== 29)
                return;
              _e();
              let u = mn(20, sr);
              if (bt() === 31)
                return _e(), u && vb() ? u : void 0;
            }
            function vb() {
              switch (T()) {
                case 20:
                case 14:
                case 15:
                  return true;
                case 29:
                case 31:
                case 39:
                case 40:
                  return false;
              }
              return t.hasPrecedingLineBreak() || Jm() || !La();
            }
            function Ku() {
              switch (T()) {
                case 8:
                case 9:
                case 10:
                case 14:
                  return Di();
                case 108:
                case 106:
                case 104:
                case 110:
                case 95:
                  return sn();
                case 20:
                  return bb();
                case 22:
                  return ah();
                case 18:
                  return Xu();
                case 132:
                  if (!wt(yh))
                    break;
                  return Yu();
                case 59:
                  return Ub();
                case 84:
                  return Ih();
                case 98:
                  return Yu();
                case 103:
                  return Tb();
                case 43:
                case 68:
                  if (jt() === 13)
                    return Di();
                  break;
                case 15:
                  return Wd(false);
                case 80:
                  return gc();
              }
              return wr(ve.Expression_expected);
            }
            function bb() {
              let u = L(), b = fe();
              de(20);
              let O = It(Sr);
              return de(21), St(Q(Hr(O), u), b);
            }
            function rh() {
              let u = L();
              de(25);
              let b = Yr(true);
              return Q(N.createSpreadElement(b), u);
            }
            function nh() {
              return T() === 25 ? rh() : T() === 27 ? Q(N.createOmittedExpression(), L()) : Yr(true);
            }
            function ih() {
              return Ct(r, nh);
            }
            function ah() {
              let u = L(), b = t.getTokenPos(), O = de(22), j = t.hasPrecedingLineBreak(), z = mn(15, nh);
              return Ts(22, 23, O, b), Q(Ne(z, j), u);
            }
            function sh() {
              let u = L(), b = fe();
              if (dr(25)) {
                let lt = Yr(true);
                return St(Q(N.createSpreadAssignment(lt), u), b);
              }
              let O = ki(true);
              if (Ks(137))
                return Fa(u, b, O, 174, 0);
              if (Ks(151))
                return Fa(u, b, O, 175, 0);
              let j = dr(41), z = kt(), re2 = Es(), Ee = dr(57), qe = dr(53);
              if (j || T() === 20 || T() === 29)
                return Ah(u, b, O, j, re2, Ee, qe);
              let We;
              if (z && T() !== 58) {
                let lt = dr(63), Jt = lt ? It(() => Yr(true)) : void 0;
                We = N.createShorthandPropertyAssignment(re2, Jt), We.equalsToken = lt;
              } else {
                de(58);
                let lt = It(() => Yr(true));
                We = N.createPropertyAssignment(re2, lt);
              }
              return We.modifiers = O, We.questionToken = Ee, We.exclamationToken = qe, St(Q(We, u), b);
            }
            function Xu() {
              let u = L(), b = t.getTokenPos(), O = de(18), j = t.hasPrecedingLineBreak(), z = mn(12, sh, true);
              return Ts(18, 19, O, b), Q(oe(z, j), u);
            }
            function Yu() {
              let u = Ai();
              Re(false);
              let b = L(), O = fe(), j = ki(false);
              de(98);
              let z = dr(41), re2 = z ? 1 : 0, Ee = Ke(j, Ul) ? 2 : 0, qe = re2 && Ee ? vs(ro) : re2 ? ys(ro) : Ee ? Xi(ro) : ro(), We = Xn(), $e = ra(re2 | Ee), lt = pi(58, false), Jt = Dc(re2 | Ee);
              Re(u);
              let Lt = N.createFunctionExpression(j, z, qe, We, $e, lt, Jt);
              return St(Q(Lt, b), O);
            }
            function ro() {
              return Tt() ? hc() : void 0;
            }
            function Tb() {
              let u = L();
              if (de(103), Ot(24)) {
                let re2 = zr();
                return Q(N.createMetaProperty(103, re2), u);
              }
              let b = L(), O = Ja(b, Ku(), false), j;
              O.kind === 230 && (j = O.typeArguments, O = O.expression), T() === 28 && Dt(ve.Invalid_optional_chain_from_new_expression_Did_you_mean_to_call_0, B_(_r, O));
              let z = T() === 20 ? th() : void 0;
              return Q(Tn(O, j, z), u);
            }
            function ws(u, b) {
              let O = L(), j = fe(), z = t.getTokenPos(), re2 = de(18, b);
              if (re2 || u) {
                let Ee = t.hasPrecedingLineBreak(), qe = Kn(1, on2);
                Ts(18, 19, re2, z);
                let We = St(Q(Gi(qe, Ee), O), j);
                return T() === 63 && (Dt(ve.Declaration_or_statement_expected_This_follows_a_block_of_statements_so_if_you_intended_to_write_a_destructuring_assignment_you_might_need_to_wrap_the_whole_assignment_in_parentheses), _e()), We;
              } else {
                let Ee = ui();
                return St(Q(Gi(Ee, void 0), O), j);
              }
            }
            function Dc(u, b) {
              let O = Yi();
              Le(!!(u & 1));
              let j = xn();
              ot(!!(u & 2));
              let z = br;
              br = false;
              let re2 = Ai();
              re2 && Re(false);
              let Ee = ws(!!(u & 16), b);
              return re2 && Re(true), br = z, Le(O), ot(j), Ee;
            }
            function oh() {
              let u = L(), b = fe();
              return de(26), St(Q(N.createEmptyStatement(), u), b);
            }
            function Sb() {
              let u = L(), b = fe();
              de(99);
              let O = t.getTokenPos(), j = de(20), z = It(Sr);
              Ts(20, 21, j, O);
              let re2 = on2(), Ee = Ot(91) ? on2() : void 0;
              return St(Q(Ut(z, re2, Ee), u), b);
            }
            function _h() {
              let u = L(), b = fe();
              de(90);
              let O = on2();
              de(115);
              let j = t.getTokenPos(), z = de(20), re2 = It(Sr);
              return Ts(20, 21, z, j), Ot(26), St(Q(N.createDoStatement(O, re2), u), b);
            }
            function xb() {
              let u = L(), b = fe();
              de(115);
              let O = t.getTokenPos(), j = de(20), z = It(Sr);
              Ts(20, 21, j, O);
              let re2 = on2();
              return St(Q(kn(z, re2), u), b);
            }
            function ch() {
              let u = L(), b = fe();
              de(97);
              let O = dr(133);
              de(20);
              let j;
              T() !== 26 && (T() === 113 || T() === 119 || T() === 85 ? j = Eh(true) : j = Mr(Sr));
              let z;
              if (O ? de(162) : Ot(162)) {
                let re2 = It(() => Yr(true));
                de(21), z = mr(O, j, re2, on2());
              } else if (Ot(101)) {
                let re2 = It(Sr);
                de(21), z = N.createForInStatement(j, re2, on2());
              } else {
                de(26);
                let re2 = T() !== 26 && T() !== 21 ? It(Sr) : void 0;
                de(26);
                let Ee = T() !== 21 ? It(Sr) : void 0;
                de(21), z = an(j, re2, Ee, on2());
              }
              return St(Q(z, u), b);
            }
            function lh(u) {
              let b = L(), O = fe();
              de(u === 249 ? 81 : 86);
              let j = ka() ? void 0 : wr();
              En();
              let z = u === 249 ? N.createBreakStatement(j) : N.createContinueStatement(j);
              return St(Q(z, b), O);
            }
            function uh() {
              let u = L(), b = fe();
              de(105);
              let O = ka() ? void 0 : It(Sr);
              return En(), St(Q(N.createReturnStatement(O), u), b);
            }
            function Eb() {
              let u = L(), b = fe();
              de(116);
              let O = t.getTokenPos(), j = de(20), z = It(Sr);
              Ts(20, 21, j, O);
              let re2 = Mt(33554432, on2);
              return St(Q(N.createWithStatement(z, re2), u), b);
            }
            function wb() {
              let u = L(), b = fe();
              de(82);
              let O = It(Sr);
              de(58);
              let j = Kn(3, on2);
              return St(Q(N.createCaseClause(O, j), u), b);
            }
            function ph() {
              let u = L();
              de(88), de(58);
              let b = Kn(3, on2);
              return Q(N.createDefaultClause(b), u);
            }
            function Cb() {
              return T() === 82 ? wb() : ph();
            }
            function fh() {
              let u = L();
              de(18);
              let b = Kn(2, Cb);
              return de(19), Q(N.createCaseBlock(b), u);
            }
            function Ab() {
              let u = L(), b = fe();
              de(107), de(20);
              let O = It(Sr);
              de(21);
              let j = fh();
              return St(Q(N.createSwitchStatement(O, j), u), b);
            }
            function dh() {
              let u = L(), b = fe();
              de(109);
              let O = t.hasPrecedingLineBreak() ? void 0 : It(Sr);
              return O === void 0 && ($r++, O = Q(Te(""), L())), t_() || Zi(O), St(Q(N.createThrowStatement(O), u), b);
            }
            function Pb() {
              let u = L(), b = fe();
              de(111);
              let O = ws(false), j = T() === 83 ? mh() : void 0, z;
              return (!j || T() === 96) && (de(96, ve.catch_or_finally_expected), z = ws(false)), St(Q(N.createTryStatement(O, j, z), u), b);
            }
            function mh() {
              let u = L();
              de(83);
              let b;
              Ot(20) ? (b = Ic(), de(21)) : b = void 0;
              let O = ws(false);
              return Q(N.createCatchClause(b, O), u);
            }
            function Db() {
              let u = L(), b = fe();
              return de(87), En(), St(Q(N.createDebuggerStatement(), u), b);
            }
            function hh() {
              let u = L(), b = fe(), O, j = T() === 20, z = It(Sr);
              return yt(z) && Ot(58) ? O = N.createLabeledStatement(z, on2()) : (t_() || Zi(z), O = fn(z), j && (b = false)), St(Q(O, u), b);
            }
            function Qu() {
              return _e(), fr(T()) && !t.hasPrecedingLineBreak();
            }
            function gh() {
              return _e(), T() === 84 && !t.hasPrecedingLineBreak();
            }
            function yh() {
              return _e(), T() === 98 && !t.hasPrecedingLineBreak();
            }
            function Zu() {
              return _e(), (fr(T()) || T() === 8 || T() === 9 || T() === 10) && !t.hasPrecedingLineBreak();
            }
            function kb() {
              for (; ; )
                switch (T()) {
                  case 113:
                  case 119:
                  case 85:
                  case 98:
                  case 84:
                  case 92:
                    return true;
                  case 118:
                  case 154:
                    return _b();
                  case 142:
                  case 143:
                    return Ob();
                  case 126:
                  case 127:
                  case 132:
                  case 136:
                  case 121:
                  case 122:
                  case 123:
                  case 146:
                    if (_e(), t.hasPrecedingLineBreak())
                      return false;
                    continue;
                  case 159:
                    return _e(), T() === 18 || T() === 79 || T() === 93;
                  case 100:
                    return _e(), T() === 10 || T() === 41 || T() === 18 || fr(T());
                  case 93:
                    let u = _e();
                    if (u === 154 && (u = wt(_e)), u === 63 || u === 41 || u === 18 || u === 88 || u === 128 || u === 59)
                      return true;
                    continue;
                  case 124:
                    _e();
                    continue;
                  default:
                    return false;
                }
            }
            function c_() {
              return wt(kb);
            }
            function vh() {
              switch (T()) {
                case 59:
                case 26:
                case 18:
                case 113:
                case 119:
                case 98:
                case 84:
                case 92:
                case 99:
                case 90:
                case 115:
                case 97:
                case 86:
                case 81:
                case 105:
                case 116:
                case 107:
                case 109:
                case 111:
                case 87:
                case 83:
                case 96:
                  return true;
                case 100:
                  return c_() || wt(ku);
                case 85:
                case 93:
                  return c_();
                case 132:
                case 136:
                case 118:
                case 142:
                case 143:
                case 154:
                case 159:
                  return true;
                case 127:
                case 123:
                case 121:
                case 122:
                case 124:
                case 146:
                  return c_() || !wt(Qu);
                default:
                  return La();
              }
            }
            function bh() {
              return _e(), Tt() || T() === 18 || T() === 22;
            }
            function Ib() {
              return wt(bh);
            }
            function on2() {
              switch (T()) {
                case 26:
                  return oh();
                case 18:
                  return ws(false);
                case 113:
                  return rp(L(), fe(), void 0);
                case 119:
                  if (Ib())
                    return rp(L(), fe(), void 0);
                  break;
                case 98:
                  return np(L(), fe(), void 0);
                case 84:
                  return Nh(L(), fe(), void 0);
                case 99:
                  return Sb();
                case 90:
                  return _h();
                case 115:
                  return xb();
                case 97:
                  return ch();
                case 86:
                  return lh(248);
                case 81:
                  return lh(249);
                case 105:
                  return uh();
                case 116:
                  return Eb();
                case 107:
                  return Ab();
                case 109:
                  return dh();
                case 111:
                case 83:
                case 96:
                  return Pb();
                case 87:
                  return Db();
                case 59:
                  return ep();
                case 132:
                case 118:
                case 154:
                case 142:
                case 143:
                case 136:
                case 85:
                case 92:
                case 93:
                case 100:
                case 121:
                case 122:
                case 123:
                case 126:
                case 127:
                case 124:
                case 146:
                case 159:
                  if (c_())
                    return ep();
                  break;
              }
              return hh();
            }
            function Th(u) {
              return u.kind === 136;
            }
            function ep() {
              let u = L(), b = fe(), O = ki(true);
              if (Ke(O, Th)) {
                let z = Nb(u);
                if (z)
                  return z;
                for (let re2 of O)
                  re2.flags |= 16777216;
                return Mt(16777216, () => l_(u, b, O));
              } else
                return l_(u, b, O);
            }
            function Nb(u) {
              return Mt(16777216, () => {
                let b = mu(hr, u);
                if (b)
                  return hu(b);
              });
            }
            function l_(u, b, O) {
              switch (T()) {
                case 113:
                case 119:
                case 85:
                  return rp(u, b, O);
                case 98:
                  return np(u, b, O);
                case 84:
                  return Nh(u, b, O);
                case 118:
                  return Hb(u, b, O);
                case 154:
                  return Gb(u, b, O);
                case 92:
                  return Kb(u, b, O);
                case 159:
                case 142:
                case 143:
                  return Fh(u, b, O);
                case 100:
                  return Qb(u, b, O);
                case 93:
                  switch (_e(), T()) {
                    case 88:
                    case 63:
                      return _6(u, b, O);
                    case 128:
                      return Yb(u, b, O);
                    default:
                      return o6(u, b, O);
                  }
                default:
                  if (O) {
                    let j = Jn(279, true, ve.Declaration_expected);
                    return Gf(j, u), j.modifiers = O, j;
                  }
                  return;
              }
            }
            function Ob() {
              return _e(), !t.hasPrecedingLineBreak() && (kt() || T() === 10);
            }
            function kc(u, b) {
              if (T() !== 18) {
                if (u & 4) {
                  i_();
                  return;
                }
                if (ka()) {
                  En();
                  return;
                }
              }
              return Dc(u, b);
            }
            function Mb() {
              let u = L();
              if (T() === 27)
                return Q(N.createOmittedExpression(), u);
              let b = dr(25), O = no(), j = Ra();
              return Q(N.createBindingElement(b, void 0, O, j), u);
            }
            function Sh() {
              let u = L(), b = dr(25), O = Tt(), j = Es(), z;
              O && T() !== 58 ? (z = j, j = void 0) : (de(58), z = no());
              let re2 = Ra();
              return Q(N.createBindingElement(b, j, z, re2), u);
            }
            function Lb() {
              let u = L();
              de(18);
              let b = mn(9, Sh);
              return de(19), Q(N.createObjectBindingPattern(b), u);
            }
            function xh() {
              let u = L();
              de(22);
              let b = mn(10, Mb);
              return de(23), Q(N.createArrayBindingPattern(b), u);
            }
            function tp() {
              return T() === 18 || T() === 22 || T() === 80 || Tt();
            }
            function no(u) {
              return T() === 22 ? xh() : T() === 18 ? Lb() : hc(u);
            }
            function Rb() {
              return Ic(true);
            }
            function Ic(u) {
              let b = L(), O = fe(), j = no(ve.Private_identifiers_are_not_allowed_in_variable_declarations), z;
              u && j.kind === 79 && T() === 53 && !t.hasPrecedingLineBreak() && (z = sn());
              let re2 = Ma(), Ee = jm(T()) ? void 0 : Ra(), qe = $i(j, z, re2, Ee);
              return St(Q(qe, b), O);
            }
            function Eh(u) {
              let b = L(), O = 0;
              switch (T()) {
                case 113:
                  break;
                case 119:
                  O |= 1;
                  break;
                case 85:
                  O |= 2;
                  break;
                default:
                  Y.fail();
              }
              _e();
              let j;
              if (T() === 162 && wt(wh))
                j = ui();
              else {
                let z = Qi();
                xe(u), j = mn(8, u ? Ic : Rb), xe(z);
              }
              return Q(dn(j, O), b);
            }
            function wh() {
              return yc() && _e() === 21;
            }
            function rp(u, b, O) {
              let j = Eh(false);
              En();
              let z = pn(O, j);
              return St(Q(z, u), b);
            }
            function np(u, b, O) {
              let j = xn(), z = Vn(O);
              de(98);
              let re2 = dr(41), Ee = z & 1024 ? ro() : hc(), qe = re2 ? 1 : 0, We = z & 512 ? 2 : 0, $e = Xn();
              z & 1 && ot(true);
              let lt = ra(qe | We), Jt = pi(58, false), Lt = kc(qe | We, ve.or_expected);
              ot(j);
              let At = N.createFunctionDeclaration(O, re2, Ee, $e, lt, Jt, Lt);
              return St(Q(At, u), b);
            }
            function jb() {
              if (T() === 135)
                return de(135);
              if (T() === 10 && wt(_e) === 20)
                return Tr(() => {
                  let u = Di();
                  return u.text === "constructor" ? u : void 0;
                });
            }
            function Ch(u, b, O) {
              return Tr(() => {
                if (jb()) {
                  let j = Xn(), z = ra(0), re2 = pi(58, false), Ee = kc(0, ve.or_expected), qe = N.createConstructorDeclaration(O, z, Ee);
                  return qe.typeParameters = j, qe.type = re2, St(Q(qe, u), b);
                }
              });
            }
            function Ah(u, b, O, j, z, re2, Ee, qe) {
              let We = j ? 1 : 0, $e = Ke(O, Ul) ? 2 : 0, lt = Xn(), Jt = ra(We | $e), Lt = pi(58, false), At = kc(We | $e, qe), kr = N.createMethodDeclaration(O, j, z, re2, lt, Jt, Lt, At);
              return kr.exclamationToken = Ee, St(Q(kr, u), b);
            }
            function ip(u, b, O, j, z) {
              let re2 = !z && !t.hasPrecedingLineBreak() ? dr(53) : void 0, Ee = Ma(), qe = Ct(45056, Ra);
              mc(j, Ee, qe);
              let We = N.createPropertyDeclaration(O, j, z || re2, Ee, qe);
              return St(Q(We, u), b);
            }
            function Ph(u, b, O) {
              let j = dr(41), z = Es(), re2 = dr(57);
              return j || T() === 20 || T() === 29 ? Ah(u, b, O, j, z, re2, void 0, ve.or_expected) : ip(u, b, O, z, re2);
            }
            function Fa(u, b, O, j, z) {
              let re2 = Es(), Ee = Xn(), qe = ra(0), We = pi(58, false), $e = kc(z), lt = j === 174 ? N.createGetAccessorDeclaration(O, re2, qe, We, $e) : N.createSetAccessorDeclaration(O, re2, qe, $e);
              return lt.typeParameters = Ee, ic(lt) && (lt.type = We), St(Q(lt, u), b);
            }
            function Jb() {
              let u;
              if (T() === 59)
                return true;
              for (; Wi(T()); ) {
                if (u = T(), VS(u))
                  return true;
                _e();
              }
              if (T() === 41 || (xs() && (u = T(), _e()), T() === 22))
                return true;
              if (u !== void 0) {
                if (!ba(u) || u === 151 || u === 137)
                  return true;
                switch (T()) {
                  case 20:
                  case 29:
                  case 53:
                  case 58:
                  case 63:
                  case 57:
                    return true;
                  default:
                    return ka();
                }
              }
              return false;
            }
            function Fb(u, b, O) {
              ea(124);
              let j = Dh(), z = St(Q(N.createClassStaticBlockDeclaration(j), u), b);
              return z.modifiers = O, z;
            }
            function Dh() {
              let u = Yi(), b = xn();
              Le(false), ot(true);
              let O = ws(false);
              return Le(u), ot(b), O;
            }
            function Bb() {
              if (xn() && T() === 133) {
                let u = L(), b = wr(ve.Expression_expected);
                _e();
                let O = Ja(u, b, true);
                return $u(u, O);
              }
              return to();
            }
            function kh() {
              let u = L();
              if (!Ot(59))
                return;
              let b = ci(Bb);
              return Q(N.createDecorator(b), u);
            }
            function ap(u, b, O) {
              let j = L(), z = T();
              if (T() === 85 && b) {
                if (!Tr(uu))
                  return;
              } else {
                if (O && T() === 124 && wt(Mc))
                  return;
                if (u && T() === 124)
                  return;
                if (!Md())
                  return;
              }
              return Q(Ye(z), j);
            }
            function ki(u, b, O) {
              let j = L(), z, re2, Ee, qe = false, We = false, $e = false;
              if (u && T() === 59)
                for (; re2 = kh(); )
                  z = tr(z, re2);
              for (; Ee = ap(qe, b, O); )
                Ee.kind === 124 && (qe = true), z = tr(z, Ee), We = true;
              if (We && u && T() === 59)
                for (; re2 = kh(); )
                  z = tr(z, re2), $e = true;
              if ($e)
                for (; Ee = ap(qe, b, O); )
                  Ee.kind === 124 && (qe = true), z = tr(z, Ee);
              return z && Er(z, j);
            }
            function sp() {
              let u;
              if (T() === 132) {
                let b = L();
                _e();
                let O = Q(Ye(132), b);
                u = Er([O], b);
              }
              return u;
            }
            function qb() {
              let u = L();
              if (T() === 26)
                return _e(), Q(N.createSemicolonClassElement(), u);
              let b = fe(), O = ki(true, true, true);
              if (T() === 124 && wt(Mc))
                return Fb(u, b, O);
              if (Ks(137))
                return Fa(u, b, O, 174, 0);
              if (Ks(151))
                return Fa(u, b, O, 175, 0);
              if (T() === 135 || T() === 10) {
                let j = Ch(u, b, O);
                if (j)
                  return j;
              }
              if (im())
                return am(u, b, O);
              if (fr(T()) || T() === 10 || T() === 8 || T() === 41 || T() === 22)
                if (Ke(O, Th)) {
                  for (let z of O)
                    z.flags |= 16777216;
                  return Mt(16777216, () => Ph(u, b, O));
                } else
                  return Ph(u, b, O);
              if (O) {
                let j = Jn(79, true, ve.Declaration_expected);
                return ip(u, b, O, j, void 0);
              }
              return Y.fail("Should not have attempted to parse class member declaration.");
            }
            function Ub() {
              let u = L(), b = fe(), O = ki(true);
              if (T() === 84)
                return op(u, b, O, 228);
              let j = Jn(279, true, ve.Expression_expected);
              return Gf(j, u), j.modifiers = O, j;
            }
            function Ih() {
              return op(L(), fe(), void 0, 228);
            }
            function Nh(u, b, O) {
              return op(u, b, O, 260);
            }
            function op(u, b, O, j) {
              let z = xn();
              de(84);
              let re2 = Oh(), Ee = Xn();
              Ke(O, N8) && ot(true);
              let qe = Mh(), We;
              de(18) ? (We = Vb(), de(19)) : We = ui(), ot(z);
              let $e = j === 260 ? N.createClassDeclaration(O, re2, Ee, qe, We) : N.createClassExpression(O, re2, Ee, qe, We);
              return St(Q($e, u), b);
            }
            function Oh() {
              return Tt() && !zb() ? Ss(Tt()) : void 0;
            }
            function zb() {
              return T() === 117 && wt(pu);
            }
            function Mh() {
              if (Oc())
                return Kn(22, Lh);
            }
            function Lh() {
              let u = L(), b = T();
              Y.assert(b === 94 || b === 117), _e();
              let O = mn(7, Wb);
              return Q(N.createHeritageClause(b, O), u);
            }
            function Wb() {
              let u = L(), b = to();
              if (b.kind === 230)
                return b;
              let O = Nc();
              return Q(N.createExpressionWithTypeArguments(b, O), u);
            }
            function Nc() {
              return T() === 29 ? Oa(20, sr, 29, 31) : void 0;
            }
            function Oc() {
              return T() === 94 || T() === 117;
            }
            function Vb() {
              return Kn(5, qb);
            }
            function Hb(u, b, O) {
              de(118);
              let j = wr(), z = Xn(), re2 = Mh(), Ee = Iu(), qe = N.createInterfaceDeclaration(O, j, z, re2, Ee);
              return St(Q(qe, u), b);
            }
            function Gb(u, b, O) {
              de(154);
              let j = wr(), z = Xn();
              de(63);
              let re2 = T() === 139 && Tr(Ou) || sr();
              En();
              let Ee = N.createTypeAliasDeclaration(O, j, z, re2);
              return St(Q(Ee, u), b);
            }
            function $b() {
              let u = L(), b = fe(), O = Es(), j = It(Ra);
              return St(Q(N.createEnumMember(O, j), u), b);
            }
            function Kb(u, b, O) {
              de(92);
              let j = wr(), z;
              de(18) ? (z = $s(() => mn(6, $b)), de(19)) : z = ui();
              let re2 = N.createEnumDeclaration(O, j, z);
              return St(Q(re2, u), b);
            }
            function Rh() {
              let u = L(), b;
              return de(18) ? (b = Kn(1, on2), de(19)) : b = ui(), Q(N.createModuleBlock(b), u);
            }
            function jh(u, b, O, j) {
              let z = j & 16, re2 = wr(), Ee = Ot(24) ? jh(L(), false, void 0, 4 | z) : Rh(), qe = N.createModuleDeclaration(O, re2, Ee, j);
              return St(Q(qe, u), b);
            }
            function Jh(u, b, O) {
              let j = 0, z;
              T() === 159 ? (z = wr(), j |= 1024) : (z = Di(), z.text = Ia(z.text));
              let re2;
              T() === 18 ? re2 = Rh() : En();
              let Ee = N.createModuleDeclaration(O, z, re2, j);
              return St(Q(Ee, u), b);
            }
            function Fh(u, b, O) {
              let j = 0;
              if (T() === 159)
                return Jh(u, b, O);
              if (Ot(143))
                j |= 16;
              else if (de(142), T() === 10)
                return Jh(u, b, O);
              return jh(u, b, O, j);
            }
            function Bh() {
              return T() === 147 && wt(qh);
            }
            function qh() {
              return _e() === 20;
            }
            function Mc() {
              return _e() === 18;
            }
            function Xb() {
              return _e() === 43;
            }
            function Yb(u, b, O) {
              de(128), de(143);
              let j = wr();
              En();
              let z = N.createNamespaceExportDeclaration(j);
              return z.modifiers = O, St(Q(z, u), b);
            }
            function Qb(u, b, O) {
              de(100);
              let j = t.getStartPos(), z;
              kt() && (z = wr());
              let re2 = false;
              if (T() !== 158 && (z == null ? void 0 : z.escapedText) === "type" && (kt() || Zb()) && (re2 = true, z = kt() ? wr() : void 0), z && !e6())
                return t6(u, b, O, z, re2);
              let Ee;
              (z || T() === 41 || T() === 18) && (Ee = r6(z, j, re2), de(158));
              let qe = Lc(), We;
              T() === 130 && !t.hasPrecedingLineBreak() && (We = _p()), En();
              let $e = N.createImportDeclaration(O, Ee, qe, We);
              return St(Q($e, u), b);
            }
            function Uh() {
              let u = L(), b = fr(T()) ? zr() : n_(10);
              de(58);
              let O = Yr(true);
              return Q(N.createAssertEntry(b, O), u);
            }
            function _p(u) {
              let b = L();
              u || de(130);
              let O = t.getTokenPos();
              if (de(18)) {
                let j = t.hasPrecedingLineBreak(), z = mn(24, Uh, true);
                if (!de(19)) {
                  let re2 = Cn(Zt);
                  re2 && re2.code === ve._0_expected.code && Rl(re2, Ro(Ur, O, 1, ve.The_parser_expected_to_find_a_1_to_match_the_0_token_here, "{", "}"));
                }
                return Q(N.createAssertClause(z, j), b);
              } else {
                let j = Er([], L(), void 0, false);
                return Q(N.createAssertClause(j, false), b);
              }
            }
            function Zb() {
              return T() === 41 || T() === 18;
            }
            function e6() {
              return T() === 27 || T() === 158;
            }
            function t6(u, b, O, j, z) {
              de(63);
              let re2 = cp();
              En();
              let Ee = N.createImportEqualsDeclaration(O, z, j, re2);
              return St(Q(Ee, u), b);
            }
            function r6(u, b, O) {
              let j;
              return (!u || Ot(27)) && (j = T() === 41 ? Rc() : zh(272)), Q(N.createImportClause(O, u, j), b);
            }
            function cp() {
              return Bh() ? n6() : Ys(false);
            }
            function n6() {
              let u = L();
              de(147), de(20);
              let b = Lc();
              return de(21), Q(N.createExternalModuleReference(b), u);
            }
            function Lc() {
              if (T() === 10) {
                let u = Di();
                return u.text = Ia(u.text), u;
              } else
                return Sr();
            }
            function Rc() {
              let u = L();
              de(41), de(128);
              let b = wr();
              return Q(N.createNamespaceImport(b), u);
            }
            function zh(u) {
              let b = L(), O = u === 272 ? N.createNamedImports(Oa(23, a6, 18, 19)) : N.createNamedExports(Oa(23, i6, 18, 19));
              return Q(O, b);
            }
            function i6() {
              let u = fe();
              return St(Ba(278), u);
            }
            function a6() {
              return Ba(273);
            }
            function Ba(u) {
              let b = L(), O = ba(T()) && !kt(), j = t.getTokenPos(), z = t.getTextPos(), re2 = false, Ee, qe = true, We = zr();
              if (We.escapedText === "type")
                if (T() === 128) {
                  let Jt = zr();
                  if (T() === 128) {
                    let Lt = zr();
                    fr(T()) ? (re2 = true, Ee = Jt, We = lt(), qe = false) : (Ee = We, We = Lt, qe = false);
                  } else
                    fr(T()) ? (Ee = We, qe = false, We = lt()) : (re2 = true, We = Jt);
                } else
                  fr(T()) && (re2 = true, We = lt());
              qe && T() === 128 && (Ee = We, de(128), We = lt()), u === 273 && O && Z(j, z, ve.Identifier_expected);
              let $e = u === 273 ? N.createImportSpecifier(re2, Ee, We) : N.createExportSpecifier(re2, Ee, We);
              return Q($e, b);
              function lt() {
                return O = ba(T()) && !kt(), j = t.getTokenPos(), z = t.getTextPos(), zr();
              }
            }
            function s6(u) {
              return Q(N.createNamespaceExport(zr()), u);
            }
            function o6(u, b, O) {
              let j = xn();
              ot(true);
              let z, re2, Ee, qe = Ot(154), We = L();
              Ot(41) ? (Ot(128) && (z = s6(We)), de(158), re2 = Lc()) : (z = zh(276), (T() === 158 || T() === 10 && !t.hasPrecedingLineBreak()) && (de(158), re2 = Lc())), re2 && T() === 130 && !t.hasPrecedingLineBreak() && (Ee = _p()), En(), ot(j);
              let $e = N.createExportDeclaration(O, qe, z, re2, Ee);
              return St(Q($e, u), b);
            }
            function _6(u, b, O) {
              let j = xn();
              ot(true);
              let z;
              Ot(63) ? z = true : de(88);
              let re2 = Yr(true);
              En(), ot(j);
              let Ee = N.createExportAssignment(O, z, re2);
              return St(Q(Ee, u), b);
            }
            let io;
            ((u) => {
              u[u.SourceElements = 0] = "SourceElements", u[u.BlockStatements = 1] = "BlockStatements", u[u.SwitchClauses = 2] = "SwitchClauses", u[u.SwitchClauseStatements = 3] = "SwitchClauseStatements", u[u.TypeMembers = 4] = "TypeMembers", u[u.ClassMembers = 5] = "ClassMembers", u[u.EnumMembers = 6] = "EnumMembers", u[u.HeritageClauseElement = 7] = "HeritageClauseElement", u[u.VariableDeclarations = 8] = "VariableDeclarations", u[u.ObjectBindingElements = 9] = "ObjectBindingElements", u[u.ArrayBindingElements = 10] = "ArrayBindingElements", u[u.ArgumentExpressions = 11] = "ArgumentExpressions", u[u.ObjectLiteralMembers = 12] = "ObjectLiteralMembers", u[u.JsxAttributes = 13] = "JsxAttributes", u[u.JsxChildren = 14] = "JsxChildren", u[u.ArrayLiteralMembers = 15] = "ArrayLiteralMembers", u[u.Parameters = 16] = "Parameters", u[u.JSDocParameters = 17] = "JSDocParameters", u[u.RestProperties = 18] = "RestProperties", u[u.TypeParameters = 19] = "TypeParameters", u[u.TypeArguments = 20] = "TypeArguments", u[u.TupleElementTypes = 21] = "TupleElementTypes", u[u.HeritageClauses = 22] = "HeritageClauses", u[u.ImportOrExportSpecifiers = 23] = "ImportOrExportSpecifiers", u[u.AssertEntries = 24] = "AssertEntries", u[u.Count = 25] = "Count";
            })(io || (io = {}));
            let Wh;
            ((u) => {
              u[u.False = 0] = "False", u[u.True = 1] = "True", u[u.Unknown = 2] = "Unknown";
            })(Wh || (Wh = {}));
            let Vh;
            ((u) => {
              function b($e, lt, Jt) {
                Mn("file.js", $e, 99, void 0, 1), t.setText($e, lt, Jt), ar = t.scan();
                let Lt = O(), At = Kt("file.js", 99, 1, false, [], Ye(1), 0, yn), kr = qs(Zt, At);
                return Or && (At.jsDocDiagnostics = qs(Or, At)), _i(), Lt ? { jsDocTypeExpression: Lt, diagnostics: kr } : void 0;
              }
              u.parseJSDocTypeExpressionForTests = b;
              function O($e) {
                let lt = L(), Jt = ($e ? Ot : de)(18), Lt = Mt(8388608, xc);
                (!$e || Jt) && Da(19);
                let At = N.createJSDocTypeExpression(Lt);
                return ft(At), Q(At, lt);
              }
              u.parseJSDocTypeExpression = O;
              function j() {
                let $e = L(), lt = Ot(18), Jt = L(), Lt = Ys(false);
                for (; T() === 80; )
                  Xr(), Ge(), Lt = Q(N.createJSDocMemberName(Lt, wr()), Jt);
                lt && Da(19);
                let At = N.createJSDocNameReference(Lt);
                return ft(At), Q(At, $e);
              }
              u.parseJSDocNameReference = j;
              function z($e, lt, Jt) {
                Mn("", $e, 99, void 0, 1);
                let Lt = Mt(8388608, () => We(lt, Jt)), kr = qs(Zt, { languageVariant: 0, text: $e });
                return _i(), Lt ? { jsDoc: Lt, diagnostics: kr } : void 0;
              }
              u.parseIsolatedJSDocComment = z;
              function re2($e, lt, Jt) {
                let Lt = ar, At = Zt.length, kr = Kr, Fn = Mt(8388608, () => We(lt, Jt));
                return Sa(Fn, $e), nr & 262144 && (Or || (Or = []), Or.push(...Zt)), ar = Lt, Zt.length = At, Kr = kr, Fn;
              }
              u.parseJSDocComment = re2;
              let Ee;
              (($e) => {
                $e[$e.BeginningOfLine = 0] = "BeginningOfLine", $e[$e.SawAsterisk = 1] = "SawAsterisk", $e[$e.SavingComments = 2] = "SavingComments", $e[$e.SavingBackticks = 3] = "SavingBackticks";
              })(Ee || (Ee = {}));
              let qe;
              (($e) => {
                $e[$e.Property = 1] = "Property", $e[$e.Parameter = 2] = "Parameter", $e[$e.CallbackParameter = 4] = "CallbackParameter";
              })(qe || (qe = {}));
              function We() {
                let $e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, lt = arguments.length > 1 ? arguments[1] : void 0, Jt = _r, Lt = lt === void 0 ? Jt.length : $e + lt;
                if (lt = Lt - $e, Y.assert($e >= 0), Y.assert($e <= Lt), Y.assert(Lt <= Jt.length), !LE(Jt, $e))
                  return;
                let At, kr, Fn, di, Ii, _n = [], qa = [];
                return t.scanRange($e + 3, lt - 5, () => {
                  let se = 1, Me, Ce = $e - (Jt.lastIndexOf(`
`, $e) + 1) + 4;
                  function Ue(vt) {
                    Me || (Me = Ce), _n.push(vt), Ce += vt.length;
                  }
                  for (Ge(); u_(5); )
                    ;
                  u_(4) && (se = 0, Ce = 0);
                  e:
                    for (; ; ) {
                      switch (T()) {
                        case 59:
                          se === 0 || se === 1 ? (lp(_n), Ii || (Ii = L()), za(up(Ce)), se = 0, Me = void 0) : Ue(t.getTokenText());
                          break;
                        case 4:
                          _n.push(t.getTokenText()), se = 0, Ce = 0;
                          break;
                        case 41:
                          let vt = t.getTokenText();
                          se === 1 || se === 2 ? (se = 2, Ue(vt)) : (se = 1, Ce += vt.length);
                          break;
                        case 5:
                          let Vt = t.getTokenText();
                          se === 2 ? _n.push(Vt) : Me !== void 0 && Ce + Vt.length > Me && _n.push(Vt.slice(Me - Ce)), Ce += Vt.length;
                          break;
                        case 1:
                          break e;
                        case 18:
                          se = 2;
                          let Rr = t.getStartPos(), gn = t.getTextPos() - 1, mi = $h(gn);
                          if (mi) {
                            di || Hh(_n), qa.push(Q(N.createJSDocText(_n.join("")), di != null ? di : $e, Rr)), qa.push(mi), _n = [], di = t.getTextPos();
                            break;
                          }
                        default:
                          se = 2, Ue(t.getTokenText());
                          break;
                      }
                      Ge();
                    }
                  lp(_n), qa.length && _n.length && qa.push(Q(N.createJSDocText(_n.join("")), di != null ? di : $e, Ii)), qa.length && At && Y.assertIsDefined(Ii, "having parsed tags implies that the end of the comment span should be set");
                  let Qe = At && Er(At, kr, Fn);
                  return Q(N.createJSDocComment(qa.length ? Er(qa, $e, Ii) : _n.length ? _n.join("") : void 0, Qe), $e, Lt);
                });
                function Hh(se) {
                  for (; se.length && (se[0] === `
` || se[0] === "\r"); )
                    se.shift();
                }
                function lp(se) {
                  for (; se.length && se[se.length - 1].trim() === ""; )
                    se.pop();
                }
                function Gh() {
                  for (; ; ) {
                    if (Ge(), T() === 1)
                      return true;
                    if (!(T() === 5 || T() === 4))
                      return false;
                  }
                }
                function wn() {
                  if (!((T() === 5 || T() === 4) && wt(Gh)))
                    for (; T() === 5 || T() === 4; )
                      Ge();
                }
                function Ua() {
                  if ((T() === 5 || T() === 4) && wt(Gh))
                    return "";
                  let se = t.hasPrecedingLineBreak(), Me = false, Ce = "";
                  for (; se && T() === 41 || T() === 5 || T() === 4; )
                    Ce += t.getTokenText(), T() === 4 ? (se = true, Me = true, Ce = "") : T() === 41 && (se = false), Ge();
                  return Me ? Ce : "";
                }
                function up(se) {
                  Y.assert(T() === 59);
                  let Me = t.getTokenPos();
                  Ge();
                  let Ce = ao(void 0), Ue = Ua(), Qe;
                  switch (Ce.escapedText) {
                    case "author":
                      Qe = V(Me, Ce, se, Ue);
                      break;
                    case "implements":
                      Qe = et(Me, Ce, se, Ue);
                      break;
                    case "augments":
                    case "extends":
                      Qe = ht(Me, Ce, se, Ue);
                      break;
                    case "class":
                    case "constructor":
                      Qe = Oi(Me, N.createJSDocClassTag, Ce, se, Ue);
                      break;
                    case "public":
                      Qe = Oi(Me, N.createJSDocPublicTag, Ce, se, Ue);
                      break;
                    case "private":
                      Qe = Oi(Me, N.createJSDocPrivateTag, Ce, se, Ue);
                      break;
                    case "protected":
                      Qe = Oi(Me, N.createJSDocProtectedTag, Ce, se, Ue);
                      break;
                    case "readonly":
                      Qe = Oi(Me, N.createJSDocReadonlyTag, Ce, se, Ue);
                      break;
                    case "override":
                      Qe = Oi(Me, N.createJSDocOverrideTag, Ce, se, Ue);
                      break;
                    case "deprecated":
                      ue = true, Qe = Oi(Me, N.createJSDocDeprecatedTag, Ce, se, Ue);
                      break;
                    case "this":
                      Qe = qB(Me, Ce, se, Ue);
                      break;
                    case "enum":
                      Qe = UB(Me, Ce, se, Ue);
                      break;
                    case "arg":
                    case "argument":
                    case "param":
                      return Xh(Me, Ce, 2, se);
                    case "return":
                    case "returns":
                      Qe = o(Me, Ce, se, Ue);
                      break;
                    case "template":
                      Qe = QB(Me, Ce, se, Ue);
                      break;
                    case "type":
                      Qe = l(Me, Ce, se, Ue);
                      break;
                    case "typedef":
                      Qe = zB(Me, Ce, se, Ue);
                      break;
                    case "callback":
                      Qe = VB(Me, Ce, se, Ue);
                      break;
                    case "overload":
                      Qe = HB(Me, Ce, se, Ue);
                      break;
                    case "satisfies":
                      Qe = hn(Me, Ce, se, Ue);
                      break;
                    case "see":
                      Qe = p7(Me, Ce, se, Ue);
                      break;
                    case "exception":
                    case "throws":
                      Qe = k(Me, Ce, se, Ue);
                      break;
                    default:
                      Qe = Qt(Me, Ce, se, Ue);
                      break;
                  }
                  return Qe;
                }
                function Qr(se, Me, Ce, Ue) {
                  return Ue || (Ce += Me - se), jc(Ce, Ue.slice(Ce));
                }
                function jc(se, Me) {
                  let Ce = L(), Ue = [], Qe = [], vt, Vt = 0, Rr = true, gn;
                  function mi(hi) {
                    gn || (gn = se), Ue.push(hi), se += hi.length;
                  }
                  Me !== void 0 && (Me !== "" && mi(Me), Vt = 1);
                  let Va = T();
                  e:
                    for (; ; ) {
                      switch (Va) {
                        case 4:
                          Vt = 0, Ue.push(t.getTokenText()), se = 0;
                          break;
                        case 59:
                          if (Vt === 3 || Vt === 2 && (!Rr || wt(Cs))) {
                            Ue.push(t.getTokenText());
                            break;
                          }
                          t.setTextPos(t.getTextPos() - 1);
                        case 1:
                          break e;
                        case 5:
                          if (Vt === 2 || Vt === 3)
                            mi(t.getTokenText());
                          else {
                            let so = t.getTokenText();
                            gn !== void 0 && se + so.length > gn && Ue.push(so.slice(gn - se)), se += so.length;
                          }
                          break;
                        case 18:
                          Vt = 2;
                          let hi = t.getStartPos(), pp = t.getTextPos() - 1, fp = $h(pp);
                          fp ? (Qe.push(Q(N.createJSDocText(Ue.join("")), vt != null ? vt : Ce, hi)), Qe.push(fp), Ue = [], vt = t.getTextPos()) : mi(t.getTokenText());
                          break;
                        case 61:
                          Vt === 3 ? Vt = 2 : Vt = 3, mi(t.getTokenText());
                          break;
                        case 41:
                          if (Vt === 0) {
                            Vt = 1, se += 1;
                            break;
                          }
                        default:
                          Vt !== 3 && (Vt = 2), mi(t.getTokenText());
                          break;
                      }
                      Rr = T() === 5, Va = Ge();
                    }
                  if (Hh(Ue), lp(Ue), Qe.length)
                    return Ue.length && Qe.push(Q(N.createJSDocText(Ue.join("")), vt != null ? vt : Ce)), Er(Qe, Ce, t.getTextPos());
                  if (Ue.length)
                    return Ue.join("");
                }
                function Cs() {
                  let se = Ge();
                  return se === 5 || se === 4;
                }
                function $h(se) {
                  let Me = Tr(Kh);
                  if (!Me)
                    return;
                  Ge(), wn();
                  let Ce = L(), Ue = fr(T()) ? Ys(true) : void 0;
                  if (Ue)
                    for (; T() === 80; )
                      Xr(), Ge(), Ue = Q(N.createJSDocMemberName(Ue, wr()), Ce);
                  let Qe = [];
                  for (; T() !== 19 && T() !== 4 && T() !== 1; )
                    Qe.push(t.getTokenText()), Ge();
                  let vt = Me === "link" ? N.createJSDocLink : Me === "linkcode" ? N.createJSDocLinkCode : N.createJSDocLinkPlain;
                  return Q(vt(Ue, Qe.join("")), se, t.getTextPos());
                }
                function Kh() {
                  if (Ua(), T() === 18 && Ge() === 59 && fr(Ge())) {
                    let se = t.getTokenValue();
                    if (xt(se))
                      return se;
                  }
                }
                function xt(se) {
                  return se === "link" || se === "linkcode" || se === "linkplain";
                }
                function Qt(se, Me, Ce, Ue) {
                  return Q(N.createJSDocUnknownTag(Me, Qr(se, L(), Ce, Ue)), se);
                }
                function za(se) {
                  se && (At ? At.push(se) : (At = [se], kr = se.pos), Fn = se.end);
                }
                function Wa() {
                  return Ua(), T() === 18 ? O() : void 0;
                }
                function c6() {
                  let se = u_(22);
                  se && wn();
                  let Me = u_(61), Ce = ZB();
                  return Me && kd(61), se && (wn(), dr(63) && Sr(), de(23)), { name: Ce, isBracketed: se };
                }
                function Yn(se) {
                  switch (se.kind) {
                    case 149:
                      return true;
                    case 185:
                      return Yn(se.elementType);
                    default:
                      return ac(se) && yt(se.typeName) && se.typeName.escapedText === "Object" && !se.typeArguments;
                  }
                }
                function Xh(se, Me, Ce, Ue) {
                  let Qe = Wa(), vt = !Qe;
                  Ua();
                  let { name: Vt, isBracketed: Rr } = c6(), gn = Ua();
                  vt && !wt(Kh) && (Qe = Wa());
                  let mi = Qr(se, L(), Ue, gn), Va = Ce !== 4 && n(Qe, Vt, Ce, Ue);
                  Va && (Qe = Va, vt = true);
                  let hi = Ce === 1 ? N.createJSDocPropertyTag(Me, Vt, Rr, Qe, vt, mi) : N.createJSDocParameterTag(Me, Vt, Rr, Qe, vt, mi);
                  return Q(hi, se);
                }
                function n(se, Me, Ce, Ue) {
                  if (se && Yn(se.type)) {
                    let Qe = L(), vt, Vt;
                    for (; vt = Tr(() => u6(Ce, Ue, Me)); )
                      (vt.kind === 344 || vt.kind === 351) && (Vt = tr(Vt, vt));
                    if (Vt) {
                      let Rr = Q(N.createJSDocTypeLiteral(Vt, se.type.kind === 185), Qe);
                      return Q(N.createJSDocTypeExpression(Rr), Qe);
                    }
                  }
                }
                function o(se, Me, Ce, Ue) {
                  Ke(At, b2) && Z(Me.pos, t.getTokenPos(), ve._0_tag_already_specified, Me.escapedText);
                  let Qe = Wa();
                  return Q(N.createJSDocReturnTag(Me, Qe, Qr(se, L(), Ce, Ue)), se);
                }
                function l(se, Me, Ce, Ue) {
                  Ke(At, au) && Z(Me.pos, t.getTokenPos(), ve._0_tag_already_specified, Me.escapedText);
                  let Qe = O(true), vt = Ce !== void 0 && Ue !== void 0 ? Qr(se, L(), Ce, Ue) : void 0;
                  return Q(N.createJSDocTypeTag(Me, Qe, vt), se);
                }
                function p7(se, Me, Ce, Ue) {
                  let vt = T() === 22 || wt(() => Ge() === 59 && fr(Ge()) && xt(t.getTokenValue())) ? void 0 : j(), Vt = Ce !== void 0 && Ue !== void 0 ? Qr(se, L(), Ce, Ue) : void 0;
                  return Q(N.createJSDocSeeTag(Me, vt, Vt), se);
                }
                function k(se, Me, Ce, Ue) {
                  let Qe = Wa(), vt = Qr(se, L(), Ce, Ue);
                  return Q(N.createJSDocThrowsTag(Me, Qe, vt), se);
                }
                function V(se, Me, Ce, Ue) {
                  let Qe = L(), vt = we(), Vt = t.getStartPos(), Rr = Qr(se, Vt, Ce, Ue);
                  Rr || (Vt = t.getStartPos());
                  let gn = typeof Rr != "string" ? Er(Ft([Q(vt, Qe, Vt)], Rr), Qe) : vt.text + Rr;
                  return Q(N.createJSDocAuthorTag(Me, gn), se);
                }
                function we() {
                  let se = [], Me = false, Ce = t.getToken();
                  for (; Ce !== 1 && Ce !== 4; ) {
                    if (Ce === 29)
                      Me = true;
                    else {
                      if (Ce === 59 && !Me)
                        break;
                      if (Ce === 31 && Me) {
                        se.push(t.getTokenText()), t.setTextPos(t.getTokenPos() + 1);
                        break;
                      }
                    }
                    se.push(t.getTokenText()), Ce = Ge();
                  }
                  return N.createJSDocText(se.join(""));
                }
                function et(se, Me, Ce, Ue) {
                  let Qe = Ni();
                  return Q(N.createJSDocImplementsTag(Me, Qe, Qr(se, L(), Ce, Ue)), se);
                }
                function ht(se, Me, Ce, Ue) {
                  let Qe = Ni();
                  return Q(N.createJSDocAugmentsTag(Me, Qe, Qr(se, L(), Ce, Ue)), se);
                }
                function hn(se, Me, Ce, Ue) {
                  let Qe = O(false), vt = Ce !== void 0 && Ue !== void 0 ? Qr(se, L(), Ce, Ue) : void 0;
                  return Q(N.createJSDocSatisfiesTag(Me, Qe, vt), se);
                }
                function Ni() {
                  let se = Ot(18), Me = L(), Ce = ia(), Ue = Nc(), Qe = N.createExpressionWithTypeArguments(Ce, Ue), vt = Q(Qe, Me);
                  return se && de(19), vt;
                }
                function ia() {
                  let se = L(), Me = ao();
                  for (; Ot(24); ) {
                    let Ce = ao();
                    Me = Q(Ve(Me, Ce), se);
                  }
                  return Me;
                }
                function Oi(se, Me, Ce, Ue, Qe) {
                  return Q(Me(Ce, Qr(se, L(), Ue, Qe)), se);
                }
                function qB(se, Me, Ce, Ue) {
                  let Qe = O(true);
                  return wn(), Q(N.createJSDocThisTag(Me, Qe, Qr(se, L(), Ce, Ue)), se);
                }
                function UB(se, Me, Ce, Ue) {
                  let Qe = O(true);
                  return wn(), Q(N.createJSDocEnumTag(Me, Qe, Qr(se, L(), Ce, Ue)), se);
                }
                function zB(se, Me, Ce, Ue) {
                  var Qe;
                  let vt = Wa();
                  Ua();
                  let Vt = l6();
                  wn();
                  let Rr = jc(Ce), gn;
                  if (!vt || Yn(vt.type)) {
                    let Va, hi, pp, fp = false;
                    for (; Va = Tr(() => $B(Ce)); )
                      if (fp = true, Va.kind === 347)
                        if (hi) {
                          let so = Dt(ve.A_JSDoc_typedef_comment_may_not_contain_multiple_type_tags);
                          so && Rl(so, Ro(Ur, 0, 0, ve.The_tag_was_first_specified_here));
                          break;
                        } else
                          hi = Va;
                      else
                        pp = tr(pp, Va);
                    if (fp) {
                      let so = vt && vt.type.kind === 185, eq = N.createJSDocTypeLiteral(pp, so);
                      vt = hi && hi.typeExpression && !Yn(hi.typeExpression.type) ? hi.typeExpression : Q(eq, se), gn = vt.end;
                    }
                  }
                  gn = gn || Rr !== void 0 ? L() : ((Qe = Vt != null ? Vt : vt) != null ? Qe : Me).end, Rr || (Rr = Qr(se, gn, Ce, Ue));
                  let mi = N.createJSDocTypedefTag(Me, vt, Vt, Rr);
                  return Q(mi, se, gn);
                }
                function l6(se) {
                  let Me = t.getTokenPos();
                  if (!fr(T()))
                    return;
                  let Ce = ao();
                  if (Ot(24)) {
                    let Ue = l6(true), Qe = N.createModuleDeclaration(void 0, Ce, Ue, se ? 4 : void 0);
                    return Q(Qe, Me);
                  }
                  return se && (Ce.flags |= 2048), Ce;
                }
                function WB(se) {
                  let Me = L(), Ce, Ue;
                  for (; Ce = Tr(() => u6(4, se)); )
                    Ue = tr(Ue, Ce);
                  return Er(Ue || [], Me);
                }
                function j7(se, Me) {
                  let Ce = WB(Me), Ue = Tr(() => {
                    if (u_(59)) {
                      let Qe = up(Me);
                      if (Qe && Qe.kind === 345)
                        return Qe;
                    }
                  });
                  return Q(N.createJSDocSignature(void 0, Ce, Ue), se);
                }
                function VB(se, Me, Ce, Ue) {
                  let Qe = l6();
                  wn();
                  let vt = jc(Ce), Vt = j7(se, Ce);
                  vt || (vt = Qr(se, L(), Ce, Ue));
                  let Rr = vt !== void 0 ? L() : Vt.end;
                  return Q(N.createJSDocCallbackTag(Me, Vt, Qe, vt), se, Rr);
                }
                function HB(se, Me, Ce, Ue) {
                  wn();
                  let Qe = jc(Ce), vt = j7(se, Ce);
                  Qe || (Qe = Qr(se, L(), Ce, Ue));
                  let Vt = Qe !== void 0 ? L() : vt.end;
                  return Q(N.createJSDocOverloadTag(Me, vt, Qe), se, Vt);
                }
                function GB(se, Me) {
                  for (; !yt(se) || !yt(Me); )
                    if (!yt(se) && !yt(Me) && se.right.escapedText === Me.right.escapedText)
                      se = se.left, Me = Me.left;
                    else
                      return false;
                  return se.escapedText === Me.escapedText;
                }
                function $B(se) {
                  return u6(1, se);
                }
                function u6(se, Me, Ce) {
                  let Ue = true, Qe = false;
                  for (; ; )
                    switch (Ge()) {
                      case 59:
                        if (Ue) {
                          let vt = KB(se, Me);
                          return vt && (vt.kind === 344 || vt.kind === 351) && se !== 4 && Ce && (yt(vt.name) || !GB(Ce, vt.name.left)) ? false : vt;
                        }
                        Qe = false;
                        break;
                      case 4:
                        Ue = true, Qe = false;
                        break;
                      case 41:
                        Qe && (Ue = false), Qe = true;
                        break;
                      case 79:
                        Ue = false;
                        break;
                      case 1:
                        return false;
                    }
                }
                function KB(se, Me) {
                  Y.assert(T() === 59);
                  let Ce = t.getStartPos();
                  Ge();
                  let Ue = ao();
                  wn();
                  let Qe;
                  switch (Ue.escapedText) {
                    case "type":
                      return se === 1 && l(Ce, Ue);
                    case "prop":
                    case "property":
                      Qe = 1;
                      break;
                    case "arg":
                    case "argument":
                    case "param":
                      Qe = 6;
                      break;
                    default:
                      return false;
                  }
                  return se & Qe ? Xh(Ce, Ue, se, Me) : false;
                }
                function XB() {
                  let se = L(), Me = u_(22);
                  Me && wn();
                  let Ce = ao(ve.Unexpected_token_A_type_parameter_name_was_expected_without_curly_braces), Ue;
                  if (Me && (wn(), de(63), Ue = Mt(8388608, xc), de(23)), !va(Ce))
                    return Q(N.createTypeParameterDeclaration(void 0, Ce, void 0, Ue), se);
                }
                function YB() {
                  let se = L(), Me = [];
                  do {
                    wn();
                    let Ce = XB();
                    Ce !== void 0 && Me.push(Ce), Ua();
                  } while (u_(27));
                  return Er(Me, se);
                }
                function QB(se, Me, Ce, Ue) {
                  let Qe = T() === 18 ? O() : void 0, vt = YB();
                  return Q(N.createJSDocTemplateTag(Me, Qe, vt, Qr(se, L(), Ce, Ue)), se);
                }
                function u_(se) {
                  return T() === se ? (Ge(), true) : false;
                }
                function ZB() {
                  let se = ao();
                  for (Ot(22) && de(23); Ot(24); ) {
                    let Me = ao();
                    Ot(22) && de(23), se = Tu(se, Me);
                  }
                  return se;
                }
                function ao(se) {
                  if (!fr(T()))
                    return Jn(79, !se, se || ve.Identifier_expected);
                  $r++;
                  let Me = t.getTokenPos(), Ce = t.getTextPos(), Ue = T(), Qe = Ia(t.getTokenValue()), vt = Q(Te(Qe, Ue), Me, Ce);
                  return Ge(), vt;
                }
              }
            })(Vh = e.JSDocParser || (e.JSDocParser = {}));
          })(Ci || (Ci = {})), ((e) => {
            function t($, ae, Te, Se) {
              if (Se = Se || Y.shouldAssert(2), N($, ae, Te, Se), cS(Te))
                return $;
              if ($.statements.length === 0)
                return Ci.parseSourceFile($.fileName, ae, $.languageVersion, void 0, true, $.scriptKind, $.setExternalModuleIndicator);
              let Ye = $;
              Y.assert(!Ye.hasBeenIncrementallyParsed), Ye.hasBeenIncrementallyParsed = true, Ci.fixupParentReferences(Ye);
              let Ne = $.text, oe = X($), Ve = g($, Te);
              N($, ae, Ve, Se), Y.assert(Ve.span.start <= Te.span.start), Y.assert(Ir(Ve.span) === Ir(Te.span)), Y.assert(Ir(R_(Ve)) === Ir(R_(Te)));
              let pt = R_(Ve).length - Ve.span.length;
              A(Ye, Ve.span.start, Ir(Ve.span), Ir(R_(Ve)), pt, Ne, ae, Se);
              let Gt = Ci.parseSourceFile($.fileName, ae, $.languageVersion, oe, true, $.scriptKind, $.setExternalModuleIndicator);
              return Gt.commentDirectives = r($.commentDirectives, Gt.commentDirectives, Ve.span.start, Ir(Ve.span), pt, Ne, ae, Se), Gt.impliedNodeFormat = $.impliedNodeFormat, Gt;
            }
            e.updateSourceFile = t;
            function r($, ae, Te, Se, Ye, Ne, oe, Ve) {
              if (!$)
                return ae;
              let pt, Gt = false;
              for (let Xt of $) {
                let { range: er, type: Tn } = Xt;
                if (er.end < Te)
                  pt = tr(pt, Xt);
                else if (er.pos > Se) {
                  Nt();
                  let Hr = { range: { pos: er.pos + Ye, end: er.end + Ye }, type: Tn };
                  pt = tr(pt, Hr), Ve && Y.assert(Ne.substring(er.pos, er.end) === oe.substring(Hr.range.pos, Hr.range.end));
                }
              }
              return Nt(), pt;
              function Nt() {
                Gt || (Gt = true, pt ? ae && pt.push(...ae) : pt = ae);
              }
            }
            function s($, ae, Te, Se, Ye, Ne) {
              ae ? Ve($) : oe($);
              return;
              function oe(pt) {
                let Gt = "";
                if (Ne && f(pt) && (Gt = Se.substring(pt.pos, pt.end)), pt._children && (pt._children = void 0), Us(pt, pt.pos + Te, pt.end + Te), Ne && f(pt) && Y.assert(Gt === Ye.substring(pt.pos, pt.end)), xr(pt, oe, Ve), ya(pt))
                  for (let Nt of pt.jsDoc)
                    oe(Nt);
                w(pt, Ne);
              }
              function Ve(pt) {
                pt._children = void 0, Us(pt, pt.pos + Te, pt.end + Te);
                for (let Gt of pt)
                  oe(Gt);
              }
            }
            function f($) {
              switch ($.kind) {
                case 10:
                case 8:
                case 79:
                  return true;
              }
              return false;
            }
            function x($, ae, Te, Se, Ye) {
              Y.assert($.end >= ae, "Adjusting an element that was entirely before the change range"), Y.assert($.pos <= Te, "Adjusting an element that was entirely after the change range"), Y.assert($.pos <= $.end);
              let Ne = Math.min($.pos, Se), oe = $.end >= Te ? $.end + Ye : Math.min($.end, Se);
              Y.assert(Ne <= oe), $.parent && (Y.assertGreaterThanOrEqual(Ne, $.parent.pos), Y.assertLessThanOrEqual(oe, $.parent.end)), Us($, Ne, oe);
            }
            function w($, ae) {
              if (ae) {
                let Te = $.pos, Se = (Ye) => {
                  Y.assert(Ye.pos >= Te), Te = Ye.end;
                };
                if (ya($))
                  for (let Ye of $.jsDoc)
                    Se(Ye);
                xr($, Se), Y.assert(Te <= $.end);
              }
            }
            function A($, ae, Te, Se, Ye, Ne, oe, Ve) {
              pt($);
              return;
              function pt(Nt) {
                if (Y.assert(Nt.pos <= Nt.end), Nt.pos > Te) {
                  s(Nt, false, Ye, Ne, oe, Ve);
                  return;
                }
                let Xt = Nt.end;
                if (Xt >= ae) {
                  if (Nt.intersectsChange = true, Nt._children = void 0, x(Nt, ae, Te, Se, Ye), xr(Nt, pt, Gt), ya(Nt))
                    for (let er of Nt.jsDoc)
                      pt(er);
                  w(Nt, Ve);
                  return;
                }
                Y.assert(Xt < ae);
              }
              function Gt(Nt) {
                if (Y.assert(Nt.pos <= Nt.end), Nt.pos > Te) {
                  s(Nt, true, Ye, Ne, oe, Ve);
                  return;
                }
                let Xt = Nt.end;
                if (Xt >= ae) {
                  Nt.intersectsChange = true, Nt._children = void 0, x(Nt, ae, Te, Se, Ye);
                  for (let er of Nt)
                    pt(er);
                  return;
                }
                Y.assert(Xt < ae);
              }
            }
            function g($, ae) {
              let Se = ae.span.start;
              for (let oe = 0; Se > 0 && oe <= 1; oe++) {
                let Ve = B($, Se);
                Y.assert(Ve.pos <= Se);
                let pt = Ve.pos;
                Se = Math.max(0, pt - 1);
              }
              let Ye = ha(Se, Ir(ae.span)), Ne = ae.newLength + (ae.span.start - Se);
              return Zp(Ye, Ne);
            }
            function B($, ae) {
              let Te = $, Se;
              if (xr($, Ne), Se) {
                let oe = Ye(Se);
                oe.pos > Te.pos && (Te = oe);
              }
              return Te;
              function Ye(oe) {
                for (; ; ) {
                  let Ve = mx(oe);
                  if (Ve)
                    oe = Ve;
                  else
                    return oe;
                }
              }
              function Ne(oe) {
                if (!va(oe))
                  if (oe.pos <= ae) {
                    if (oe.pos >= Te.pos && (Te = oe), ae < oe.end)
                      return xr(oe, Ne), true;
                    Y.assert(oe.end <= ae), Se = oe;
                  } else
                    return Y.assert(oe.pos > ae), true;
              }
            }
            function N($, ae, Te, Se) {
              let Ye = $.text;
              if (Te && (Y.assert(Ye.length - Te.span.length + Te.newLength === ae.length), Se || Y.shouldAssert(3))) {
                let Ne = Ye.substr(0, Te.span.start), oe = ae.substr(0, Te.span.start);
                Y.assert(Ne === oe);
                let Ve = Ye.substring(Ir(Te.span), Ye.length), pt = ae.substring(Ir(R_(Te)), ae.length);
                Y.assert(Ve === pt);
              }
            }
            function X($) {
              let ae = $.statements, Te = 0;
              Y.assert(Te < ae.length);
              let Se = ae[Te], Ye = -1;
              return { currentNode(oe) {
                return oe !== Ye && (Se && Se.end === oe && Te < ae.length - 1 && (Te++, Se = ae[Te]), (!Se || Se.pos !== oe) && Ne(oe)), Ye = oe, Y.assert(!Se || Se.pos === oe), Se;
              } };
              function Ne(oe) {
                ae = void 0, Te = -1, Se = void 0, xr($, Ve, pt);
                return;
                function Ve(Gt) {
                  return oe >= Gt.pos && oe < Gt.end ? (xr(Gt, Ve, pt), true) : false;
                }
                function pt(Gt) {
                  if (oe >= Gt.pos && oe < Gt.end)
                    for (let Nt = 0; Nt < Gt.length; Nt++) {
                      let Xt = Gt[Nt];
                      if (Xt) {
                        if (Xt.pos === oe)
                          return ae = Gt, Te = Nt, Se = Xt, true;
                        if (Xt.pos < oe && oe < Xt.end)
                          return xr(Xt, Ve, pt), true;
                      }
                    }
                  return false;
                }
              }
            }
            e.createSyntaxCursor = X;
            let F;
            (($) => {
              $[$.Value = -1] = "Value";
            })(F || (F = {}));
          })(Sd || (Sd = {})), xd = /* @__PURE__ */ new Map(), _7 = /^\/\/\/\s*<(\S+)\s.*?\/>/im, c7 = /^\/\/\/?\s*@(\S+)\s*(.*)\s*$/im;
        } }), nn = D({ "src/compiler/_namespaces/ts.ts"() {
          E(), L5(), PT(), NT(), sA(), oA(), hA(), iD(), OL(), ML(), LL(), KL(), Pj(), qJ(), UJ(), rF();
        } }), u7 = () => {
        }, Zo, u7 = () => {
          PT(), Zo = Po(99, true);
        };
        function d7(e, t, r, s) {
          let f = gl(e) ? new wd(e, t, r) : e === 79 ? new Ad(79, t, r) : e === 80 ? new Pd(80, t, r) : new O2(e, t, r);
          return f.parent = s, f.flags = s.flags & 50720768, f;
        }
        function sB(e, t) {
          if (!gl(e.kind))
            return Bt;
          let r = [];
          if (c3(e))
            return e.forEachChild((w) => {
              r.push(w);
            }), r;
          Zo.setText((t || e.getSourceFile()).text);
          let s = e.pos, f = (w) => {
            _u(r, s, w.pos, e), r.push(w), s = w.end;
          }, x = (w) => {
            _u(r, s, w.pos, e), r.push(oB(w, e)), s = w.end;
          };
          return c(e.jsDoc, f), s = e.pos, e.forEachChild(f, x), _u(r, s, e.end, e), Zo.setText(void 0), r;
        }
        function _u(e, t, r, s) {
          for (Zo.setTextPos(t); t < r; ) {
            let f = Zo.scan(), x = Zo.getTextPos();
            if (x <= r) {
              if (f === 79) {
                if (Qx(s))
                  continue;
                Y.fail(`Did not expect ${Y.formatSyntaxKind(s.kind)} to have an Identifier in its trivia`);
              }
              e.push(d7(f, t, x, s));
            }
            if (t = x, f === 1)
              break;
          }
        }
        function oB(e, t) {
          let r = d7(354, e.pos, e.end, t);
          r._children = [];
          let s = e.pos;
          for (let f of e)
            _u(r._children, s, f.pos, t), r._children.push(f), s = f.end;
          return _u(r._children, s, e.end, t), r;
        }
        function m7(e) {
          return hl(e).some((t) => t.tagName.text === "inheritDoc" || t.tagName.text === "inheritdoc");
        }
        function Ed(e, t) {
          if (!e)
            return Bt;
          let r = ts_JsDoc_exports.getJsDocTagsFromDeclarations(e, t);
          if (t && (r.length === 0 || e.some(m7))) {
            let s = /* @__PURE__ */ new Set();
            for (let f of e) {
              let x = h7(t, f, (w) => {
                var A;
                if (!s.has(w))
                  return s.add(w), f.kind === 174 || f.kind === 175 ? w.getContextualJsDocTags(f, t) : ((A = w.declarations) == null ? void 0 : A.length) === 1 ? w.getJsDocTags() : void 0;
              });
              x && (r = [...x, ...r]);
            }
          }
          return r;
        }
        function cu(e, t) {
          if (!e)
            return Bt;
          let r = ts_JsDoc_exports.getJsDocCommentsFromDeclarations(e, t);
          if (t && (r.length === 0 || e.some(m7))) {
            let s = /* @__PURE__ */ new Set();
            for (let f of e) {
              let x = h7(t, f, (w) => {
                if (!s.has(w))
                  return s.add(w), f.kind === 174 || f.kind === 175 ? w.getContextualDocumentationComment(f, t) : w.getDocumentationComment(t);
              });
              x && (r = r.length === 0 ? x.slice() : x.concat(lineBreakPart(), r));
            }
          }
          return r;
        }
        function h7(e, t, r) {
          var s;
          let f = ((s = t.parent) == null ? void 0 : s.kind) === 173 ? t.parent.parent : t.parent;
          if (!f)
            return;
          let x = Lf(t);
          return q(h4(f), (w) => {
            let A = e.getTypeAtLocation(w), g = x && A.symbol ? e.getTypeOfSymbol(A.symbol) : A, B = e.getPropertyOfType(g, t.symbol.name);
            return B ? r(B) : void 0;
          });
        }
        function _B() {
          return { getNodeConstructor: () => wd, getTokenConstructor: () => O2, getIdentifierConstructor: () => Ad, getPrivateIdentifierConstructor: () => Pd, getSourceFileConstructor: () => P7, getSymbolConstructor: () => w7, getTypeConstructor: () => C7, getSignatureConstructor: () => A7, getSourceMapSourceConstructor: () => D7 };
        }
        function lu(e) {
          let t = true;
          for (let s in e)
            if (Jr(e, s) && !g7(s)) {
              t = false;
              break;
            }
          if (t)
            return e;
          let r = {};
          for (let s in e)
            if (Jr(e, s)) {
              let f = g7(s) ? s : s.charAt(0).toLowerCase() + s.substr(1);
              r[f] = e[s];
            }
          return r;
        }
        function g7(e) {
          return !e.length || e.charAt(0) === e.charAt(0).toLowerCase();
        }
        function cB(e) {
          return e ? Ze(e, (t) => t.text).join("") : "";
        }
        function y7() {
          return { target: 1, jsx: 1 };
        }
        function v7() {
          return ts_codefix_exports.getSupportedErrorCodes();
        }
        function b7(e, t, r) {
          e.version = r, e.scriptSnapshot = t;
        }
        function N2(e, t, r, s, f, x) {
          let w = YE(e, getSnapshotText(t), r, f, x);
          return b7(w, t, s), w;
        }
        function T7(e, t, r, s, f) {
          if (s && r !== e.version) {
            let w, A = s.span.start !== 0 ? e.text.substr(0, s.span.start) : "", g = Ir(s.span) !== e.text.length ? e.text.substr(Ir(s.span)) : "";
            if (s.newLength === 0)
              w = A && g ? A + g : A || g;
            else {
              let N = t.getText(s.span.start, s.span.start + s.newLength);
              w = A && g ? A + N + g : A ? A + N : N + g;
            }
            let B = k2(e, w, s, f);
            return b7(B, t, r), B.nameTable = void 0, e !== B && e.scriptSnapshot && (e.scriptSnapshot.dispose && e.scriptSnapshot.dispose(), e.scriptSnapshot = void 0), B;
          }
          let x = { languageVersion: e.languageVersion, impliedNodeFormat: e.impliedNodeFormat, setExternalModuleIndicator: e.setExternalModuleIndicator };
          return N2(e.fileName, t, x, r, true, e.scriptKind);
        }
        function lB(e) {
          let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : createDocumentRegistry(e.useCaseSensitiveFileNames && e.useCaseSensitiveFileNames(), e.getCurrentDirectory()), r = arguments.length > 2 ? arguments[2] : void 0;
          var s;
          let f;
          r === void 0 ? f = 0 : typeof r == "boolean" ? f = r ? 2 : 0 : f = r;
          let x = new k7(e), w, A, g = 0, B = e.getCancellationToken ? new N7(e.getCancellationToken()) : I7, N = e.getCurrentDirectory();
          vx((s = e.getLocalizedDiagnosticMessages) == null ? void 0 : s.bind(e));
          function X(Z) {
            e.log && e.log(Z);
          }
          let F = J0(e), $ = wp(F), ae = getSourceMapper({ useCaseSensitiveFileNames: () => F, getCurrentDirectory: () => N, getProgram: Ye, fileExists: le(e, e.fileExists), readFile: le(e, e.readFile), getDocumentPositionMapper: le(e, e.getDocumentPositionMapper), getSourceFileLike: le(e, e.getSourceFileLike), log: X });
          function Te(Z) {
            let ie = w.getSourceFile(Z);
            if (!ie) {
              let U = new Error(`Could not find source file: '${Z}'.`);
              throw U.ProgramFiles = w.getSourceFiles().map((L) => L.fileName), U;
            }
            return ie;
          }
          function Se() {
            var Z, ie, U;
            if (Y.assert(f !== 2), e.getProjectVersion) {
              let Tt = e.getProjectVersion();
              if (Tt) {
                if (A === Tt && !((Z = e.hasChangedAutomaticTypeDirectiveNames) != null && Z.call(e)))
                  return;
                A = Tt;
              }
            }
            let L = e.getTypeRootsVersion ? e.getTypeRootsVersion() : 0;
            g !== L && (X("TypeRoots version has changed; provide new program"), w = void 0, g = L);
            let fe = e.getScriptFileNames().slice(), T = e.getCompilationSettings() || y7(), it = e.hasInvalidatedResolutions || w_, mt = le(e, e.hasChangedAutomaticTypeDirectiveNames), _e = (ie = e.getProjectReferences) == null ? void 0 : ie.call(e), Ge, bt = { getSourceFile: wt, getSourceFileByPath: Tr, getCancellationToken: () => B, getCanonicalFileName: $, useCaseSensitiveFileNames: () => F, getNewLine: () => ox(T), getDefaultLibFileName: (Tt) => e.getDefaultLibFileName(Tt), writeFile: yn, getCurrentDirectory: () => N, fileExists: (Tt) => e.fileExists(Tt), readFile: (Tt) => e.readFile && e.readFile(Tt), getSymlinkCache: le(e, e.getSymlinkCache), realpath: le(e, e.realpath), directoryExists: (Tt) => sx(Tt, e), getDirectories: (Tt) => e.getDirectories ? e.getDirectories(Tt) : [], readDirectory: (Tt, kt, de, jn, Zi) => (Y.checkDefined(e.readDirectory, "'LanguageServiceHost.readDirectory' must be implemented to correctly process 'projectReferences'"), e.readDirectory(Tt, kt, de, jn, Zi)), onReleaseOldSourceFile: Rn, onReleaseParsedCommandLine: yr, hasInvalidatedResolutions: it, hasChangedAutomaticTypeDirectiveNames: mt, trace: le(e, e.trace), resolveModuleNames: le(e, e.resolveModuleNames), getModuleResolutionCache: le(e, e.getModuleResolutionCache), createHash: le(e, e.createHash), resolveTypeReferenceDirectives: le(e, e.resolveTypeReferenceDirectives), resolveModuleNameLiterals: le(e, e.resolveModuleNameLiterals), resolveTypeReferenceDirectiveReferences: le(e, e.resolveTypeReferenceDirectiveReferences), useSourceOfProjectReferenceRedirect: le(e, e.useSourceOfProjectReferenceRedirect), getParsedCommandLine: Dr }, jt = bt.getSourceFile, { getSourceFileWithCache: Yt } = changeCompilerHostLikeToUseCache(bt, (Tt) => Ui(Tt, N, $), function() {
              for (var Tt = arguments.length, kt = new Array(Tt), de = 0; de < Tt; de++)
                kt[de] = arguments[de];
              return jt.call(bt, ...kt);
            });
            bt.getSourceFile = Yt, (U = e.setCompilerHost) == null || U.call(e, bt);
            let $t = { useCaseSensitiveFileNames: F, fileExists: (Tt) => bt.fileExists(Tt), readFile: (Tt) => bt.readFile(Tt), readDirectory: function() {
              return bt.readDirectory(...arguments);
            }, trace: bt.trace, getCurrentDirectory: bt.getCurrentDirectory, onUnRecoverableConfigFileDiagnostic: yn }, Wt = t.getKeyForCompilationSettings(T);
            if (isProgramUptoDate(w, fe, T, (Tt, kt) => e.getScriptVersion(kt), (Tt) => bt.fileExists(Tt), it, mt, Dr, _e))
              return;
            let Xr = { rootNames: fe, options: T, host: bt, oldProgram: w, projectReferences: _e };
            w = createProgram(Xr), bt = void 0, Ge = void 0, ae.clearCache(), w.getTypeChecker();
            return;
            function Dr(Tt) {
              let kt = Ui(Tt, N, $), de = Ge == null ? void 0 : Ge.get(kt);
              if (de !== void 0)
                return de || void 0;
              let jn = e.getParsedCommandLine ? e.getParsedCommandLine(Tt) : Lr(Tt);
              return (Ge || (Ge = /* @__PURE__ */ new Map())).set(kt, jn || false), jn;
            }
            function Lr(Tt) {
              let kt = wt(Tt, 100);
              if (kt)
                return kt.path = Ui(Tt, N, $), kt.resolvedPath = kt.path, kt.originalFileName = kt.fileName, parseJsonSourceFileConfigFileContent(kt, $t, as(ma(Tt), N), void 0, as(Tt, N));
            }
            function yr(Tt, kt, de) {
              var jn;
              e.getParsedCommandLine ? (jn = e.onReleaseParsedCommandLine) == null || jn.call(e, Tt, kt, de) : kt && Rn(kt.sourceFile, de);
            }
            function Rn(Tt, kt) {
              let de = t.getKeyForCompilationSettings(kt);
              t.releaseDocumentWithKey(Tt.resolvedPath, de, Tt.scriptKind, Tt.impliedNodeFormat);
            }
            function wt(Tt, kt, de, jn) {
              return Tr(Tt, Ui(Tt, N, $), kt, de, jn);
            }
            function Tr(Tt, kt, de, jn, Zi) {
              Y.assert(bt, "getOrCreateSourceFileByPath called after typical CompilerHost lifetime, check the callstack something with a reference to an old host.");
              let Pa = e.getScriptSnapshot(Tt);
              if (!Pa)
                return;
              let e_ = getScriptKind(Tt, e), mc = e.getScriptVersion(Tt);
              if (!Zi) {
                let Da = w && w.getSourceFileByPath(kt);
                if (Da) {
                  if (e_ === Da.scriptKind)
                    return t.updateDocumentWithKey(Tt, kt, e, Wt, Pa, mc, e_, de);
                  t.releaseDocumentWithKey(Da.resolvedPath, t.getKeyForCompilationSettings(w.getCompilerOptions()), Da.scriptKind, Da.impliedNodeFormat);
                }
              }
              return t.acquireDocumentWithKey(Tt, kt, e, Wt, Pa, mc, e_, de);
            }
          }
          function Ye() {
            if (f === 2) {
              Y.assert(w === void 0);
              return;
            }
            return Se(), w;
          }
          function Ne() {
            var Z;
            return (Z = e.getPackageJsonAutoImportProvider) == null ? void 0 : Z.call(e);
          }
          function oe(Z, ie) {
            let U = w.getTypeChecker(), L = fe();
            if (!L)
              return false;
            for (let it of Z)
              for (let mt of it.references) {
                let _e = T(mt);
                if (Y.assertIsDefined(_e), ie.has(mt) || ts_FindAllReferences_exports.isDeclarationOfSymbol(_e, L)) {
                  ie.add(mt), mt.isDefinition = true;
                  let Ge = getMappedDocumentSpan(mt, ae, le(e, e.fileExists));
                  Ge && ie.add(Ge);
                } else
                  mt.isDefinition = false;
              }
            return true;
            function fe() {
              for (let it of Z)
                for (let mt of it.references) {
                  if (ie.has(mt)) {
                    let Ge = T(mt);
                    return Y.assertIsDefined(Ge), U.getSymbolAtLocation(Ge);
                  }
                  let _e = getMappedDocumentSpan(mt, ae, le(e, e.fileExists));
                  if (_e && ie.has(_e)) {
                    let Ge = T(_e);
                    if (Ge)
                      return U.getSymbolAtLocation(Ge);
                  }
                }
            }
            function T(it) {
              let mt = w.getSourceFile(it.fileName);
              if (!mt)
                return;
              let _e = getTouchingPropertyName(mt, it.textSpan.start);
              return ts_FindAllReferences_exports.Core.getAdjustedNode(_e, { use: ts_FindAllReferences_exports.FindReferencesUse.References });
            }
          }
          function Ve() {
            w = void 0;
          }
          function pt() {
            if (w) {
              let Z = t.getKeyForCompilationSettings(w.getCompilerOptions());
              c(w.getSourceFiles(), (ie) => t.releaseDocumentWithKey(ie.resolvedPath, Z, ie.scriptKind, ie.impliedNodeFormat)), w = void 0;
            }
            e = void 0;
          }
          function Gt(Z) {
            return Se(), w.getSyntacticDiagnostics(Te(Z), B).slice();
          }
          function Nt(Z) {
            Se();
            let ie = Te(Z), U = w.getSemanticDiagnostics(ie, B);
            if (!cv(w.getCompilerOptions()))
              return U.slice();
            let L = w.getDeclarationDiagnostics(ie, B);
            return [...U, ...L];
          }
          function Xt(Z) {
            return Se(), computeSuggestionDiagnostics(Te(Z), w, B);
          }
          function er() {
            return Se(), [...w.getOptionsDiagnostics(B), ...w.getGlobalDiagnostics(B)];
          }
          function Tn(Z, ie) {
            let U = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyOptions, L = arguments.length > 3 ? arguments[3] : void 0, fe = Object.assign(Object.assign({}, U), {}, { includeCompletionsForModuleExports: U.includeCompletionsForModuleExports || U.includeExternalModuleExports, includeCompletionsWithInsertText: U.includeCompletionsWithInsertText || U.includeInsertTextCompletions });
            return Se(), ts_Completions_exports.getCompletionsAtPosition(e, w, X, Te(Z), ie, fe, U.triggerCharacter, U.triggerKind, B, L && ts_formatting_exports.getFormatContext(L, e), U.includeSymbol);
          }
          function Hr(Z, ie, U, L, fe) {
            let T = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : emptyOptions, it = arguments.length > 6 ? arguments[6] : void 0;
            return Se(), ts_Completions_exports.getCompletionEntryDetails(w, X, Te(Z), ie, { name: U, source: fe, data: it }, e, L && ts_formatting_exports.getFormatContext(L, e), T, B);
          }
          function Gi(Z, ie, U, L) {
            let fe = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : emptyOptions;
            return Se(), ts_Completions_exports.getCompletionEntrySymbol(w, X, Te(Z), ie, { name: U, source: L }, e, fe);
          }
          function pn(Z, ie) {
            Se();
            let U = Te(Z), L = getTouchingPropertyName(U, ie);
            if (L === U)
              return;
            let fe = w.getTypeChecker(), T = fn(L), it = mB(T, fe);
            if (!it || fe.isUnknownSymbol(it)) {
              let jt = Ut(U, T, ie) ? fe.getTypeAtLocation(T) : void 0;
              return jt && { kind: "", kindModifiers: "", textSpan: createTextSpanFromNode(T, U), displayParts: fe.runWithCancellationToken(B, (Yt) => typeToDisplayParts(Yt, jt, getContainerNode(T))), documentation: jt.symbol ? jt.symbol.getDocumentationComment(fe) : void 0, tags: jt.symbol ? jt.symbol.getJsDocTags(fe) : void 0 };
            }
            let { symbolKind: mt, displayParts: _e, documentation: Ge, tags: bt } = fe.runWithCancellationToken(B, (jt) => ts_SymbolDisplay_exports.getSymbolDisplayPartsDocumentationAndSymbolKind(jt, it, U, getContainerNode(T), T));
            return { kind: mt, kindModifiers: ts_SymbolDisplay_exports.getSymbolModifiers(fe, it), textSpan: createTextSpanFromNode(T, U), displayParts: _e, documentation: Ge, tags: bt };
          }
          function fn(Z) {
            return X8(Z.parent) && Z.pos === Z.parent.pos ? Z.parent.expression : $v(Z.parent) && Z.pos === Z.parent.pos || o0(Z.parent) && Z.parent.name === Z ? Z.parent : Z;
          }
          function Ut(Z, ie, U) {
            switch (ie.kind) {
              case 79:
                return !isLabelName(ie) && !isTagName(ie) && !jS(ie.parent);
              case 208:
              case 163:
                return !isInComment(Z, U);
              case 108:
              case 194:
              case 106:
              case 199:
                return true;
              case 233:
                return o0(ie);
              default:
                return false;
            }
          }
          function kn(Z, ie, U, L) {
            return Se(), ts_GoToDefinition_exports.getDefinitionAtPosition(w, Te(Z), ie, U, L);
          }
          function an(Z, ie) {
            return Se(), ts_GoToDefinition_exports.getDefinitionAndBoundSpan(w, Te(Z), ie);
          }
          function mr(Z, ie) {
            return Se(), ts_GoToDefinition_exports.getTypeDefinitionAtPosition(w.getTypeChecker(), Te(Z), ie);
          }
          function $i(Z, ie) {
            return Se(), ts_FindAllReferences_exports.getImplementationsAtPosition(w, B, w.getSourceFiles(), Te(Z), ie);
          }
          function dn(Z, ie) {
            return ne(Ur(Z, ie, [Z]), (U) => U.highlightSpans.map((L) => Object.assign(Object.assign({ fileName: U.fileName, textSpan: L.textSpan, isWriteAccess: L.kind === "writtenReference" }, L.isInString && { isInString: true }), L.contextSpan && { contextSpan: L.contextSpan })));
          }
          function Ur(Z, ie, U) {
            let L = Un(Z);
            Y.assert(U.some((it) => Un(it) === L)), Se();
            let fe = qt(U, (it) => w.getSourceFile(it)), T = Te(Z);
            return DocumentHighlights.getDocumentHighlights(w, B, T, ie, fe);
          }
          function Gr(Z, ie, U, L, fe) {
            Se();
            let T = Te(Z), it = getAdjustedRenameLocation(getTouchingPropertyName(T, ie));
            if (ts_Rename_exports.nodeIsEligibleForRename(it))
              if (yt(it) && (tu(it.parent) || sE(it.parent)) && P4(it.escapedText)) {
                let { openingElement: mt, closingElement: _e } = it.parent.parent;
                return [mt, _e].map((Ge) => {
                  let bt = createTextSpanFromNode(Ge.tagName, T);
                  return Object.assign({ fileName: T.fileName, textSpan: bt }, ts_FindAllReferences_exports.toContextSpan(bt, T, Ge.parent));
                });
              } else
                return Sn(it, ie, { findInStrings: U, findInComments: L, providePrefixAndSuffixTextForRename: fe, use: ts_FindAllReferences_exports.FindReferencesUse.Rename }, (mt, _e, Ge) => ts_FindAllReferences_exports.toRenameLocation(mt, _e, Ge, fe || false));
          }
          function _r(Z, ie) {
            return Se(), Sn(getTouchingPropertyName(Te(Z), ie), ie, { use: ts_FindAllReferences_exports.FindReferencesUse.References }, ts_FindAllReferences_exports.toReferenceEntry);
          }
          function Sn(Z, ie, U, L) {
            Se();
            let fe = U && U.use === ts_FindAllReferences_exports.FindReferencesUse.Rename ? w.getSourceFiles().filter((T) => !w.isSourceFileDefaultLibrary(T)) : w.getSourceFiles();
            return ts_FindAllReferences_exports.findReferenceOrRenameEntries(w, B, fe, Z, ie, U, L);
          }
          function In(Z, ie) {
            return Se(), ts_FindAllReferences_exports.findReferencedSymbols(w, B, w.getSourceFiles(), Te(Z), ie);
          }
          function pr(Z) {
            return Se(), ts_FindAllReferences_exports.Core.getReferencesForFileName(Z, w, w.getSourceFiles()).map(ts_FindAllReferences_exports.toReferenceEntry);
          }
          function Zt(Z, ie, U) {
            let L = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
            Se();
            let fe = U ? [Te(U)] : w.getSourceFiles();
            return getNavigateToItems(fe, w.getTypeChecker(), B, Z, ie, L);
          }
          function Or(Z, ie, U) {
            Se();
            let L = Te(Z), fe = e.getCustomTransformers && e.getCustomTransformers();
            return getFileEmitOutput(w, L, !!ie, B, fe, U);
          }
          function Nn(Z, ie) {
            let { triggerReason: U } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyOptions;
            Se();
            let L = Te(Z);
            return ts_SignatureHelp_exports.getSignatureHelpItems(w, L, ie, U, B);
          }
          function ar(Z) {
            return x.getCurrentSourceFile(Z);
          }
          function oi(Z, ie, U) {
            let L = x.getCurrentSourceFile(Z), fe = getTouchingPropertyName(L, ie);
            if (fe === L)
              return;
            switch (fe.kind) {
              case 208:
              case 163:
              case 10:
              case 95:
              case 110:
              case 104:
              case 106:
              case 108:
              case 194:
              case 79:
                break;
              default:
                return;
            }
            let T = fe;
            for (; ; )
              if (isRightSideOfPropertyAccess(T) || isRightSideOfQualifiedName(T))
                T = T.parent;
              else if (isNameOfModuleDeclaration(T))
                if (T.parent.parent.kind === 264 && T.parent.parent.body === T.parent)
                  T = T.parent.parent.name;
                else
                  break;
              else
                break;
            return ha(T.getStart(), fe.getEnd());
          }
          function cr(Z, ie) {
            let U = x.getCurrentSourceFile(Z);
            return ts_BreakpointResolver_exports.spanInSourceFileAtLocation(U, ie);
          }
          function $r(Z) {
            return getNavigationBarItems(x.getCurrentSourceFile(Z), B);
          }
          function hr(Z) {
            return getNavigationTree(x.getCurrentSourceFile(Z), B);
          }
          function On(Z, ie, U) {
            return Se(), (U || "original") === "2020" ? ts_classifier_exports.v2020.getSemanticClassifications(w, B, Te(Z), ie) : getSemanticClassifications(w.getTypeChecker(), B, Te(Z), w.getClassifiableNames(), ie);
          }
          function nr(Z, ie, U) {
            return Se(), (U || "original") === "original" ? getEncodedSemanticClassifications(w.getTypeChecker(), B, Te(Z), w.getClassifiableNames(), ie) : ts_classifier_exports.v2020.getEncodedSemanticClassifications(w, B, Te(Z), ie);
          }
          function br(Z, ie) {
            return getSyntacticClassifications(B, x.getCurrentSourceFile(Z), ie);
          }
          function Kr(Z, ie) {
            return getEncodedSyntacticClassifications(B, x.getCurrentSourceFile(Z), ie);
          }
          function wa(Z) {
            let ie = x.getCurrentSourceFile(Z);
            return ts_OutliningElementsCollector_exports.collectElements(ie, B);
          }
          let $n = new Map(Object.entries({ [18]: 19, [20]: 21, [22]: 23, [31]: 29 }));
          $n.forEach((Z, ie) => $n.set(Z.toString(), Number(ie)));
          function Ki(Z, ie) {
            let U = x.getCurrentSourceFile(Z), L = getTouchingToken(U, ie), fe = L.getStart(U) === ie ? $n.get(L.kind.toString()) : void 0, T = fe && findChildOfKind(L.parent, fe, U);
            return T ? [createTextSpanFromNode(L, U), createTextSpanFromNode(T, U)].sort((it, mt) => it.start - mt.start) : Bt;
          }
          function Mn(Z, ie, U) {
            let L = ts(), fe = lu(U), T = x.getCurrentSourceFile(Z);
            X("getIndentationAtPosition: getCurrentSourceFile: " + (ts() - L)), L = ts();
            let it = ts_formatting_exports.SmartIndenter.getIndentation(ie, T, fe);
            return X("getIndentationAtPosition: computeIndentation  : " + (ts() - L)), it;
          }
          function _i(Z, ie, U, L) {
            let fe = x.getCurrentSourceFile(Z);
            return ts_formatting_exports.formatSelection(ie, U, fe, ts_formatting_exports.getFormatContext(lu(L), e));
          }
          function Ca(Z, ie) {
            return ts_formatting_exports.formatDocument(x.getCurrentSourceFile(Z), ts_formatting_exports.getFormatContext(lu(ie), e));
          }
          function St(Z, ie, U, L) {
            let fe = x.getCurrentSourceFile(Z), T = ts_formatting_exports.getFormatContext(lu(L), e);
            if (!isInComment(fe, ie))
              switch (U) {
                case "{":
                  return ts_formatting_exports.formatOnOpeningCurly(ie, fe, T);
                case "}":
                  return ts_formatting_exports.formatOnClosingCurly(ie, fe, T);
                case ";":
                  return ts_formatting_exports.formatOnSemicolon(ie, fe, T);
                case `
`:
                  return ts_formatting_exports.formatOnEnter(ie, fe, T);
              }
            return [];
          }
          function ue(Z, ie, U, L, fe) {
            let T = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : emptyOptions;
            Se();
            let it = Te(Z), mt = ha(ie, U), _e = ts_formatting_exports.getFormatContext(fe, e);
            return ne(ji(L, fa, Vr), (Ge) => (B.throwIfCancellationRequested(), ts_codefix_exports.getFixes({ errorCode: Ge, sourceFile: it, span: mt, program: w, host: e, cancellationToken: B, formatContext: _e, preferences: T })));
          }
          function He(Z, ie, U) {
            let L = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : emptyOptions;
            Se(), Y.assert(Z.type === "file");
            let fe = Te(Z.fileName), T = ts_formatting_exports.getFormatContext(U, e);
            return ts_codefix_exports.getAllFixes({ fixId: ie, sourceFile: fe, program: w, host: e, cancellationToken: B, formatContext: T, preferences: L });
          }
          function _t(Z, ie) {
            let U = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyOptions;
            var L;
            Se(), Y.assert(Z.type === "file");
            let fe = Te(Z.fileName), T = ts_formatting_exports.getFormatContext(ie, e), it = (L = Z.mode) != null ? L : Z.skipDestructiveCodeActions ? "SortAndCombine" : "All";
            return ts_OrganizeImports_exports.organizeImports(fe, T, e, w, U, it);
          }
          function ft(Z, ie, U) {
            let L = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : emptyOptions;
            return getEditsForFileRename(Ye(), Z, ie, e, ts_formatting_exports.getFormatContext(U, e), L, ae);
          }
          function Kt(Z, ie) {
            let U = typeof Z == "string" ? ie : Z;
            return ir(U) ? Promise.all(U.map((L) => zt(L))) : zt(U);
          }
          function zt(Z) {
            let ie = (U) => Ui(U, N, $);
            return Y.assertEqual(Z.type, "install package"), e.installPackage ? e.installPackage({ fileName: ie(Z.file), packageName: Z.packageName }) : Promise.reject("Host does not implement `installPackage`");
          }
          function xe(Z, ie, U, L) {
            let fe = L ? ts_formatting_exports.getFormatContext(L, e).options : void 0;
            return ts_JsDoc_exports.getDocCommentTemplateAtPosition(getNewLineOrDefaultFromHost(e, fe), x.getCurrentSourceFile(Z), ie, U);
          }
          function Le(Z, ie, U) {
            if (U === 60)
              return false;
            let L = x.getCurrentSourceFile(Z);
            if (isInString(L, ie))
              return false;
            if (isInsideJsxElementOrAttribute(L, ie))
              return U === 123;
            if (isInTemplateString(L, ie))
              return false;
            switch (U) {
              case 39:
              case 34:
              case 96:
                return !isInComment(L, ie);
            }
            return true;
          }
          function Re(Z, ie) {
            let U = x.getCurrentSourceFile(Z), L = findPrecedingToken(ie, U);
            if (!L)
              return;
            let fe = L.kind === 31 && tu(L.parent) ? L.parent.parent : td(L) && l2(L.parent) ? L.parent : void 0;
            if (fe && gr(fe))
              return { newText: `</${fe.openingElement.tagName.getText(U)}>` };
            let T = L.kind === 31 && u2(L.parent) ? L.parent.parent : td(L) && pd(L.parent) ? L.parent : void 0;
            if (T && Ln(T))
              return { newText: "</>" };
          }
          function ot(Z, ie) {
            return { lineStarts: Z.getLineStarts(), firstLine: Z.getLineAndCharacterOfPosition(ie.pos).line, lastLine: Z.getLineAndCharacterOfPosition(ie.end).line };
          }
          function Ct(Z, ie, U) {
            let L = x.getCurrentSourceFile(Z), fe = [], { lineStarts: T, firstLine: it, lastLine: mt } = ot(L, ie), _e = U || false, Ge = Number.MAX_VALUE, bt = /* @__PURE__ */ new Map(), jt = new RegExp(/\S/), Yt = isInsideJsxElement(L, T[it]), $t = Yt ? "{/*" : "//";
            for (let Wt = it; Wt <= mt; Wt++) {
              let Xr = L.text.substring(T[Wt], L.getLineEndOfPosition(T[Wt])), Dr = jt.exec(Xr);
              Dr && (Ge = Math.min(Ge, Dr.index), bt.set(Wt.toString(), Dr.index), Xr.substr(Dr.index, $t.length) !== $t && (_e = U === void 0 || U));
            }
            for (let Wt = it; Wt <= mt; Wt++) {
              if (it !== mt && T[Wt] === ie.end)
                continue;
              let Xr = bt.get(Wt.toString());
              Xr !== void 0 && (Yt ? fe.push.apply(fe, Mt(Z, { pos: T[Wt] + Ge, end: L.getLineEndOfPosition(T[Wt]) }, _e, Yt)) : _e ? fe.push({ newText: $t, span: { length: 0, start: T[Wt] + Ge } }) : L.text.substr(T[Wt] + Xr, $t.length) === $t && fe.push({ newText: "", span: { length: $t.length, start: T[Wt] + Xr } }));
            }
            return fe;
          }
          function Mt(Z, ie, U, L) {
            var fe;
            let T = x.getCurrentSourceFile(Z), it = [], { text: mt } = T, _e = false, Ge = U || false, bt = [], { pos: jt } = ie, Yt = L !== void 0 ? L : isInsideJsxElement(T, jt), $t = Yt ? "{/*" : "/*", Wt = Yt ? "*/}" : "*/", Xr = Yt ? "\\{\\/\\*" : "\\/\\*", Dr = Yt ? "\\*\\/\\}" : "\\*\\/";
            for (; jt <= ie.end; ) {
              let Lr = mt.substr(jt, $t.length) === $t ? $t.length : 0, yr = isInComment(T, jt + Lr);
              if (yr)
                Yt && (yr.pos--, yr.end++), bt.push(yr.pos), yr.kind === 3 && bt.push(yr.end), _e = true, jt = yr.end + 1;
              else {
                let Rn = mt.substring(jt, ie.end).search(`(${Xr})|(${Dr})`);
                Ge = U !== void 0 ? U : Ge || !isTextWhiteSpaceLike(mt, jt, Rn === -1 ? ie.end : jt + Rn), jt = Rn === -1 ? ie.end + 1 : jt + Rn + Wt.length;
              }
            }
            if (Ge || !_e) {
              ((fe = isInComment(T, ie.pos)) == null ? void 0 : fe.kind) !== 2 && Qn(bt, ie.pos, Vr), Qn(bt, ie.end, Vr);
              let Lr = bt[0];
              mt.substr(Lr, $t.length) !== $t && it.push({ newText: $t, span: { length: 0, start: Lr } });
              for (let yr = 1; yr < bt.length - 1; yr++)
                mt.substr(bt[yr] - Wt.length, Wt.length) !== Wt && it.push({ newText: Wt, span: { length: 0, start: bt[yr] } }), mt.substr(bt[yr], $t.length) !== $t && it.push({ newText: $t, span: { length: 0, start: bt[yr] } });
              it.length % 2 !== 0 && it.push({ newText: Wt, span: { length: 0, start: bt[bt.length - 1] } });
            } else
              for (let Lr of bt) {
                let yr = Lr - Wt.length > 0 ? Lr - Wt.length : 0, Rn = mt.substr(yr, Wt.length) === Wt ? Wt.length : 0;
                it.push({ newText: "", span: { length: $t.length, start: Lr - Rn } });
              }
            return it;
          }
          function It(Z, ie) {
            let U = x.getCurrentSourceFile(Z), { firstLine: L, lastLine: fe } = ot(U, ie);
            return L === fe && ie.pos !== ie.end ? Mt(Z, ie, true) : Ct(Z, ie, true);
          }
          function Mr(Z, ie) {
            let U = x.getCurrentSourceFile(Z), L = [], { pos: fe } = ie, { end: T } = ie;
            fe === T && (T += isInsideJsxElement(U, fe) ? 2 : 1);
            for (let it = fe; it <= T; it++) {
              let mt = isInComment(U, it);
              if (mt) {
                switch (mt.kind) {
                  case 2:
                    L.push.apply(L, Ct(Z, { end: mt.end, pos: mt.pos + 1 }, false));
                    break;
                  case 3:
                    L.push.apply(L, Mt(Z, { end: mt.end, pos: mt.pos + 1 }, false));
                }
                it = mt.end + 1;
              }
            }
            return L;
          }
          function gr(Z) {
            let { openingElement: ie, closingElement: U, parent: L } = Z;
            return !Hi(ie.tagName, U.tagName) || l2(L) && Hi(ie.tagName, L.openingElement.tagName) && gr(L);
          }
          function Ln(Z) {
            let { closingFragment: ie, parent: U } = Z;
            return !!(ie.flags & 131072) || pd(U) && Ln(U);
          }
          function ys(Z, ie, U) {
            let L = x.getCurrentSourceFile(Z), fe = ts_formatting_exports.getRangeOfEnclosingComment(L, ie);
            return fe && (!U || fe.kind === 3) ? createTextSpanFromRange(fe) : void 0;
          }
          function ci(Z, ie) {
            Se();
            let U = Te(Z);
            B.throwIfCancellationRequested();
            let L = U.text, fe = [];
            if (ie.length > 0 && !_e(U.fileName)) {
              let Ge = it(), bt;
              for (; bt = Ge.exec(L); ) {
                B.throwIfCancellationRequested();
                let jt = 3;
                Y.assert(bt.length === ie.length + jt);
                let Yt = bt[1], $t = bt.index + Yt.length;
                if (!isInComment(U, $t))
                  continue;
                let Wt;
                for (let Dr = 0; Dr < ie.length; Dr++)
                  bt[Dr + jt] && (Wt = ie[Dr]);
                if (Wt === void 0)
                  return Y.fail();
                if (mt(L.charCodeAt($t + Wt.text.length)))
                  continue;
                let Xr = bt[2];
                fe.push({ descriptor: Wt, message: Xr, position: $t });
              }
            }
            return fe;
            function T(Ge) {
              return Ge.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
            }
            function it() {
              let Ge = /(?:\/\/+\s*)/.source, bt = /(?:\/\*+\s*)/.source, Yt = "(" + /(?:^(?:\s|\*)*)/.source + "|" + Ge + "|" + bt + ")", $t = "(?:" + Ze(ie, (yr) => "(" + T(yr.text) + ")").join("|") + ")", Wt = /(?:$|\*\/)/.source, Xr = /(?:.*?)/.source, Dr = "(" + $t + Xr + ")", Lr = Yt + Dr + Wt;
              return new RegExp(Lr, "gim");
            }
            function mt(Ge) {
              return Ge >= 97 && Ge <= 122 || Ge >= 65 && Ge <= 90 || Ge >= 48 && Ge <= 57;
            }
            function _e(Ge) {
              return Fi(Ge, "/node_modules/");
            }
          }
          function Xi(Z, ie, U) {
            return Se(), ts_Rename_exports.getRenameInfo(w, Te(Z), ie, U || {});
          }
          function Aa(Z, ie, U, L, fe, T) {
            let [it, mt] = typeof ie == "number" ? [ie, void 0] : [ie.pos, ie.end];
            return { file: Z, startPosition: it, endPosition: mt, program: Ye(), host: e, formatContext: ts_formatting_exports.getFormatContext(L, e), cancellationToken: B, preferences: U, triggerReason: fe, kind: T };
          }
          function vs(Z, ie, U) {
            return { file: Z, program: Ye(), host: e, span: ie, preferences: U, cancellationToken: B };
          }
          function $s(Z, ie) {
            return ts_SmartSelectionRange_exports.getSmartSelectionRange(ie, x.getCurrentSourceFile(Z));
          }
          function li(Z, ie) {
            let U = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyOptions, L = arguments.length > 3 ? arguments[3] : void 0, fe = arguments.length > 4 ? arguments[4] : void 0;
            Se();
            let T = Te(Z);
            return ts_refactor_exports.getApplicableRefactors(Aa(T, ie, U, emptyOptions, L, fe));
          }
          function Yi(Z, ie, U, L, fe) {
            let T = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : emptyOptions;
            Se();
            let it = Te(Z);
            return ts_refactor_exports.getEditsForRefactor(Aa(it, U, T, ie), L, fe);
          }
          function Qi(Z, ie) {
            return ie === 0 ? { line: 0, character: 0 } : ae.toLineColumnOffset(Z, ie);
          }
          function bs(Z, ie) {
            Se();
            let U = ts_CallHierarchy_exports.resolveCallHierarchyDeclaration(w, getTouchingPropertyName(Te(Z), ie));
            return U && mapOneOrMany(U, (L) => ts_CallHierarchy_exports.createCallHierarchyItem(w, L));
          }
          function Ai(Z, ie) {
            Se();
            let U = Te(Z), L = firstOrOnly(ts_CallHierarchy_exports.resolveCallHierarchyDeclaration(w, ie === 0 ? U : getTouchingPropertyName(U, ie)));
            return L ? ts_CallHierarchy_exports.getIncomingCalls(w, L, B) : [];
          }
          function xn(Z, ie) {
            Se();
            let U = Te(Z), L = firstOrOnly(ts_CallHierarchy_exports.resolveCallHierarchyDeclaration(w, ie === 0 ? U : getTouchingPropertyName(U, ie)));
            return L ? ts_CallHierarchy_exports.getOutgoingCalls(w, L) : [];
          }
          function Dt(Z, ie) {
            let U = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : emptyOptions;
            Se();
            let L = Te(Z);
            return ts_InlayHints_exports.provideInlayHints(vs(L, ie, U));
          }
          let Pi = { dispose: pt, cleanupSemanticCache: Ve, getSyntacticDiagnostics: Gt, getSemanticDiagnostics: Nt, getSuggestionDiagnostics: Xt, getCompilerOptionsDiagnostics: er, getSyntacticClassifications: br, getSemanticClassifications: On, getEncodedSyntacticClassifications: Kr, getEncodedSemanticClassifications: nr, getCompletionsAtPosition: Tn, getCompletionEntryDetails: Hr, getCompletionEntrySymbol: Gi, getSignatureHelpItems: Nn, getQuickInfoAtPosition: pn, getDefinitionAtPosition: kn, getDefinitionAndBoundSpan: an, getImplementationAtPosition: $i, getTypeDefinitionAtPosition: mr, getReferencesAtPosition: _r, findReferences: In, getFileReferences: pr, getOccurrencesAtPosition: dn, getDocumentHighlights: Ur, getNameOrDottedNameSpan: oi, getBreakpointStatementAtPosition: cr, getNavigateToItems: Zt, getRenameInfo: Xi, getSmartSelectionRange: $s, findRenameLocations: Gr, getNavigationBarItems: $r, getNavigationTree: hr, getOutliningSpans: wa, getTodoComments: ci, getBraceMatchingAtPosition: Ki, getIndentationAtPosition: Mn, getFormattingEditsForRange: _i, getFormattingEditsForDocument: Ca, getFormattingEditsAfterKeystroke: St, getDocCommentTemplateAtPosition: xe, isValidBraceCompletionAtPosition: Le, getJsxClosingTagAtPosition: Re, getSpanOfEnclosingComment: ys, getCodeFixesAtPosition: ue, getCombinedCodeFix: He, applyCodeActionCommand: Kt, organizeImports: _t, getEditsForFileRename: ft, getEmitOutput: Or, getNonBoundSourceFile: ar, getProgram: Ye, getCurrentProgram: () => w, getAutoImportProvider: Ne, updateIsDefinitionOfReferencedSymbols: oe, getApplicableRefactors: li, getEditsForRefactor: Yi, toLineColumnOffset: Qi, getSourceMapper: () => ae, clearSourceMapperCache: () => ae.clearCache(), prepareCallHierarchy: bs, provideCallHierarchyIncomingCalls: Ai, provideCallHierarchyOutgoingCalls: xn, toggleLineComment: Ct, toggleMultilineComment: Mt, commentSelection: It, uncommentSelection: Mr, provideInlayHints: Dt, getSupportedCodeFixes: v7 };
          switch (f) {
            case 0:
              break;
            case 1:
              M2.forEach((Z) => Pi[Z] = () => {
                throw new Error(`LanguageService Operation: ${Z} not allowed in LanguageServiceMode.PartialSemantic`);
              });
              break;
            case 2:
              M7.forEach((Z) => Pi[Z] = () => {
                throw new Error(`LanguageService Operation: ${Z} not allowed in LanguageServiceMode.Syntactic`);
              });
              break;
            default:
              Y.assertNever(f);
          }
          return Pi;
        }
        function uB(e) {
          return e.nameTable || pB(e), e.nameTable;
        }
        function pB(e) {
          let t = e.nameTable = /* @__PURE__ */ new Map();
          e.forEachChild(function r(s) {
            if (yt(s) && !isTagName(s) && s.escapedText || Ta(s) && fB(s)) {
              let f = b4(s);
              t.set(f, t.get(f) === void 0 ? s.pos : -1);
            } else if (vn(s)) {
              let f = s.escapedText;
              t.set(f, t.get(f) === void 0 ? s.pos : -1);
            }
            if (xr(s, r), ya(s))
              for (let f of s.jsDoc)
                xr(f, r);
          });
        }
        function fB(e) {
          return c4(e) || e.parent.kind === 280 || hB(e) || l4(e);
        }
        function S7(e) {
          let t = dB(e);
          return t && (Hs(t.parent) || p2(t.parent)) ? t : void 0;
        }
        function dB(e) {
          switch (e.kind) {
            case 10:
            case 14:
            case 8:
              if (e.parent.kind === 164)
                return Wy(e.parent.parent) ? e.parent.parent : void 0;
            case 79:
              return Wy(e.parent) && (e.parent.parent.kind === 207 || e.parent.parent.kind === 289) && e.parent.name === e ? e.parent : void 0;
          }
        }
        function mB(e, t) {
          let r = S7(e);
          if (r) {
            let s = t.getContextualType(r.parent), f = s && x7(r, t, s, false);
            if (f && f.length === 1)
              return fo(f);
          }
          return t.getSymbolAtLocation(e);
        }
        function x7(e, t, r, s) {
          let f = getNameFromPropertyName(e.name);
          if (!f)
            return Bt;
          if (!r.isUnion()) {
            let w = r.getProperty(f);
            return w ? [w] : Bt;
          }
          let x = qt(r.types, (w) => (Hs(e.parent) || p2(e.parent)) && t.isTypeInvalidDueToUnionDiscriminant(w, e.parent) ? void 0 : w.getProperty(f));
          if (s && (x.length === 0 || x.length === r.types.length)) {
            let w = r.getProperty(f);
            if (w)
              return [w];
          }
          return x.length === 0 ? qt(r.types, (w) => w.getProperty(f)) : x;
        }
        function hB(e) {
          return e && e.parent && e.parent.kind === 209 && e.parent.argumentExpression === e;
        }
        function gB(e) {
          throw new Error("getDefaultLibFilePath is only supported when consumed as a node module. ");
        }
        var E7, wd, Cd, w7, O2, Ad, Pd, C7, A7, P7, D7, k7, I7, N7, O7, M2, M7, yB = D({ "src/services/services.ts"() {
          L2(), L2(), E7 = "0.8", wd = class {
            constructor(e, t, r) {
              this.pos = t, this.end = r, this.flags = 0, this.modifierFlagsCache = 0, this.transformFlags = 0, this.parent = void 0, this.kind = e;
            }
            assertHasRealPosition(e) {
              Y.assert(!hs(this.pos) && !hs(this.end), e || "Node must have a real position for this operation");
            }
            getSourceFile() {
              return Si(this);
            }
            getStart(e, t) {
              return this.assertHasRealPosition(), Io(this, e, t);
            }
            getFullStart() {
              return this.assertHasRealPosition(), this.pos;
            }
            getEnd() {
              return this.assertHasRealPosition(), this.end;
            }
            getWidth(e) {
              return this.assertHasRealPosition(), this.getEnd() - this.getStart(e);
            }
            getFullWidth() {
              return this.assertHasRealPosition(), this.end - this.pos;
            }
            getLeadingTriviaWidth(e) {
              return this.assertHasRealPosition(), this.getStart(e) - this.pos;
            }
            getFullText(e) {
              return this.assertHasRealPosition(), (e || this.getSourceFile()).text.substring(this.pos, this.end);
            }
            getText(e) {
              return this.assertHasRealPosition(), e || (e = this.getSourceFile()), e.text.substring(this.getStart(e), this.getEnd());
            }
            getChildCount(e) {
              return this.getChildren(e).length;
            }
            getChildAt(e, t) {
              return this.getChildren(t)[e];
            }
            getChildren(e) {
              return this.assertHasRealPosition("Node without a real position cannot be scanned and thus has no token nodes - use forEachChild and collect the result if that's fine"), this._children || (this._children = sB(this, e));
            }
            getFirstToken(e) {
              this.assertHasRealPosition();
              let t = this.getChildren(e);
              if (!t.length)
                return;
              let r = Ae(t, (s) => s.kind < 312 || s.kind > 353);
              return r.kind < 163 ? r : r.getFirstToken(e);
            }
            getLastToken(e) {
              this.assertHasRealPosition();
              let t = this.getChildren(e), r = Cn(t);
              if (r)
                return r.kind < 163 ? r : r.getLastToken(e);
            }
            forEachChild(e, t) {
              return xr(this, e, t);
            }
          }, Cd = class {
            constructor(e, t) {
              this.pos = e, this.end = t, this.flags = 0, this.modifierFlagsCache = 0, this.transformFlags = 0, this.parent = void 0;
            }
            getSourceFile() {
              return Si(this);
            }
            getStart(e, t) {
              return Io(this, e, t);
            }
            getFullStart() {
              return this.pos;
            }
            getEnd() {
              return this.end;
            }
            getWidth(e) {
              return this.getEnd() - this.getStart(e);
            }
            getFullWidth() {
              return this.end - this.pos;
            }
            getLeadingTriviaWidth(e) {
              return this.getStart(e) - this.pos;
            }
            getFullText(e) {
              return (e || this.getSourceFile()).text.substring(this.pos, this.end);
            }
            getText(e) {
              return e || (e = this.getSourceFile()), e.text.substring(this.getStart(e), this.getEnd());
            }
            getChildCount() {
              return this.getChildren().length;
            }
            getChildAt(e) {
              return this.getChildren()[e];
            }
            getChildren() {
              return this.kind === 1 && this.jsDoc || Bt;
            }
            getFirstToken() {
            }
            getLastToken() {
            }
            forEachChild() {
            }
          }, w7 = class {
            constructor(e, t) {
              this.id = 0, this.mergeId = 0, this.flags = e, this.escapedName = t;
            }
            getFlags() {
              return this.flags;
            }
            get name() {
              return rf(this);
            }
            getEscapedName() {
              return this.escapedName;
            }
            getName() {
              return this.name;
            }
            getDeclarations() {
              return this.declarations;
            }
            getDocumentationComment(e) {
              if (!this.documentationComment)
                if (this.documentationComment = Bt, !this.declarations && $y(this) && this.links.target && $y(this.links.target) && this.links.target.links.tupleLabelDeclaration) {
                  let t = this.links.target.links.tupleLabelDeclaration;
                  this.documentationComment = cu([t], e);
                } else
                  this.documentationComment = cu(this.declarations, e);
              return this.documentationComment;
            }
            getContextualDocumentationComment(e, t) {
              if (e) {
                if (Tl(e) && (this.contextualGetAccessorDocumentationComment || (this.contextualGetAccessorDocumentationComment = cu(ee(this.declarations, Tl), t)), I(this.contextualGetAccessorDocumentationComment)))
                  return this.contextualGetAccessorDocumentationComment;
                if (bl(e) && (this.contextualSetAccessorDocumentationComment || (this.contextualSetAccessorDocumentationComment = cu(ee(this.declarations, bl), t)), I(this.contextualSetAccessorDocumentationComment)))
                  return this.contextualSetAccessorDocumentationComment;
              }
              return this.getDocumentationComment(t);
            }
            getJsDocTags(e) {
              return this.tags === void 0 && (this.tags = Ed(this.declarations, e)), this.tags;
            }
            getContextualJsDocTags(e, t) {
              if (e) {
                if (Tl(e) && (this.contextualGetAccessorTags || (this.contextualGetAccessorTags = Ed(ee(this.declarations, Tl), t)), I(this.contextualGetAccessorTags)))
                  return this.contextualGetAccessorTags;
                if (bl(e) && (this.contextualSetAccessorTags || (this.contextualSetAccessorTags = Ed(ee(this.declarations, bl), t)), I(this.contextualSetAccessorTags)))
                  return this.contextualSetAccessorTags;
              }
              return this.getJsDocTags(t);
            }
          }, O2 = class extends Cd {
            constructor(e, t, r) {
              super(t, r), this.kind = e;
            }
          }, Ad = class extends Cd {
            constructor(e, t, r) {
              super(t, r), this.kind = 79;
            }
            get text() {
              return qr(this);
            }
          }, Ad.prototype.kind = 79, Pd = class extends Cd {
            constructor(e, t, r) {
              super(t, r), this.kind = 80;
            }
            get text() {
              return qr(this);
            }
          }, Pd.prototype.kind = 80, C7 = class {
            constructor(e, t) {
              this.checker = e, this.flags = t;
            }
            getFlags() {
              return this.flags;
            }
            getSymbol() {
              return this.symbol;
            }
            getProperties() {
              return this.checker.getPropertiesOfType(this);
            }
            getProperty(e) {
              return this.checker.getPropertyOfType(this, e);
            }
            getApparentProperties() {
              return this.checker.getAugmentedPropertiesOfType(this);
            }
            getCallSignatures() {
              return this.checker.getSignaturesOfType(this, 0);
            }
            getConstructSignatures() {
              return this.checker.getSignaturesOfType(this, 1);
            }
            getStringIndexType() {
              return this.checker.getIndexTypeOfType(this, 0);
            }
            getNumberIndexType() {
              return this.checker.getIndexTypeOfType(this, 1);
            }
            getBaseTypes() {
              return this.isClassOrInterface() ? this.checker.getBaseTypes(this) : void 0;
            }
            isNullableType() {
              return this.checker.isNullableType(this);
            }
            getNonNullableType() {
              return this.checker.getNonNullableType(this);
            }
            getNonOptionalType() {
              return this.checker.getNonOptionalType(this);
            }
            getConstraint() {
              return this.checker.getBaseConstraintOfType(this);
            }
            getDefault() {
              return this.checker.getDefaultFromTypeParameter(this);
            }
            isUnion() {
              return !!(this.flags & 1048576);
            }
            isIntersection() {
              return !!(this.flags & 2097152);
            }
            isUnionOrIntersection() {
              return !!(this.flags & 3145728);
            }
            isLiteral() {
              return !!(this.flags & 2432);
            }
            isStringLiteral() {
              return !!(this.flags & 128);
            }
            isNumberLiteral() {
              return !!(this.flags & 256);
            }
            isTypeParameter() {
              return !!(this.flags & 262144);
            }
            isClassOrInterface() {
              return !!(Bf(this) & 3);
            }
            isClass() {
              return !!(Bf(this) & 1);
            }
            isIndexType() {
              return !!(this.flags & 4194304);
            }
            get typeArguments() {
              if (Bf(this) & 4)
                return this.checker.getTypeArguments(this);
            }
          }, A7 = class {
            constructor(e, t) {
              this.checker = e, this.flags = t;
            }
            getDeclaration() {
              return this.declaration;
            }
            getTypeParameters() {
              return this.typeParameters;
            }
            getParameters() {
              return this.parameters;
            }
            getReturnType() {
              return this.checker.getReturnTypeOfSignature(this);
            }
            getTypeParameterAtPosition(e) {
              let t = this.checker.getParameterType(this, e);
              if (t.isIndexType() && Kx(t.type)) {
                let r = t.type.getConstraint();
                if (r)
                  return this.checker.getIndexType(r);
              }
              return t;
            }
            getDocumentationComment() {
              return this.documentationComment || (this.documentationComment = cu(Cp(this.declaration), this.checker));
            }
            getJsDocTags() {
              return this.jsDocTags || (this.jsDocTags = Ed(Cp(this.declaration), this.checker));
            }
          }, P7 = class extends wd {
            constructor(e, t, r) {
              super(e, t, r), this.kind = 308;
            }
            update(e, t) {
              return k2(this, e, t);
            }
            getLineAndCharacterOfPosition(e) {
              return Ls(this, e);
            }
            getLineStarts() {
              return ss(this);
            }
            getPositionOfLineAndCharacter(e, t, r) {
              return dy(ss(this), e, t, this.text, r);
            }
            getLineEndOfPosition(e) {
              let { line: t } = this.getLineAndCharacterOfPosition(e), r = this.getLineStarts(), s;
              t + 1 >= r.length && (s = this.getEnd()), s || (s = r[t + 1] - 1);
              let f = this.getFullText();
              return f[s] === `
` && f[s - 1] === "\r" ? s - 1 : s;
            }
            getNamedDeclarations() {
              return this.namedDeclarations || (this.namedDeclarations = this.computeNamedDeclarations()), this.namedDeclarations;
            }
            computeNamedDeclarations() {
              let e = Be();
              return this.forEachChild(f), e;
              function t(x) {
                let w = s(x);
                w && e.add(w, x);
              }
              function r(x) {
                let w = e.get(x);
                return w || e.set(x, w = []), w;
              }
              function s(x) {
                let w = Ey(x);
                return w && (Ws(w) && bn(w.expression) ? w.expression.name.text : vl(w) ? getNameFromPropertyName(w) : void 0);
              }
              function f(x) {
                switch (x.kind) {
                  case 259:
                  case 215:
                  case 171:
                  case 170:
                    let w = x, A = s(w);
                    if (A) {
                      let N = r(A), X = Cn(N);
                      X && w.parent === X.parent && w.symbol === X.symbol ? w.body && !X.body && (N[N.length - 1] = w) : N.push(w);
                    }
                    xr(x, f);
                    break;
                  case 260:
                  case 228:
                  case 261:
                  case 262:
                  case 263:
                  case 264:
                  case 268:
                  case 278:
                  case 273:
                  case 270:
                  case 271:
                  case 174:
                  case 175:
                  case 184:
                    t(x), xr(x, f);
                    break;
                  case 166:
                    if (!rn(x, 16476))
                      break;
                  case 257:
                  case 205: {
                    let N = x;
                    if (df(N.name)) {
                      xr(N.name, f);
                      break;
                    }
                    N.initializer && f(N.initializer);
                  }
                  case 302:
                  case 169:
                  case 168:
                    t(x);
                    break;
                  case 275:
                    let g = x;
                    g.exportClause && (iE(g.exportClause) ? c(g.exportClause.elements, f) : f(g.exportClause.name));
                    break;
                  case 269:
                    let B = x.importClause;
                    B && (B.name && t(B.name), B.namedBindings && (B.namedBindings.kind === 271 ? t(B.namedBindings) : c(B.namedBindings.elements, f)));
                    break;
                  case 223:
                    ps(x) !== 0 && t(x);
                  default:
                    xr(x, f);
                }
              }
            }
          }, D7 = class {
            constructor(e, t, r) {
              this.fileName = e, this.text = t, this.skipTrivia = r;
            }
            getLineAndCharacterOfPosition(e) {
              return Ls(this, e);
            }
          }, k7 = class {
            constructor(e) {
              this.host = e;
            }
            getCurrentSourceFile(e) {
              var t, r, s, f, x, w, A, g;
              let B = this.host.getScriptSnapshot(e);
              if (!B)
                throw new Error("Could not find file: '" + e + "'.");
              let N = getScriptKind(e, this.host), X = this.host.getScriptVersion(e), F;
              if (this.currentFileName !== e) {
                let $ = { languageVersion: 99, impliedNodeFormat: getImpliedNodeFormatForFile(Ui(e, this.host.getCurrentDirectory(), ((s = (r = (t = this.host).getCompilerHost) == null ? void 0 : r.call(t)) == null ? void 0 : s.getCanonicalFileName) || D4(this.host)), (g = (A = (w = (x = (f = this.host).getCompilerHost) == null ? void 0 : x.call(f)) == null ? void 0 : w.getModuleResolutionCache) == null ? void 0 : A.call(w)) == null ? void 0 : g.getPackageJsonInfoCache(), this.host, this.host.getCompilationSettings()), setExternalModuleIndicator: Ex(this.host.getCompilationSettings()) };
                F = N2(e, B, $, X, true, N);
              } else if (this.currentFileVersion !== X) {
                let $ = B.getChangeRange(this.currentFileScriptSnapshot);
                F = T7(this.currentSourceFile, B, X, $);
              }
              return F && (this.currentFileVersion = X, this.currentFileName = e, this.currentFileScriptSnapshot = B, this.currentSourceFile = F), this.currentSourceFile;
            }
          }, I7 = { isCancellationRequested: w_, throwIfCancellationRequested: yn }, N7 = class {
            constructor(e) {
              this.cancellationToken = e;
            }
            isCancellationRequested() {
              return this.cancellationToken.isCancellationRequested();
            }
            throwIfCancellationRequested() {
              var e;
              if (this.isCancellationRequested())
                throw (e = rs) == null || e.instant(rs.Phase.Session, "cancellationThrown", { kind: "CancellationTokenObject" }), new Rp();
            }
          }, O7 = class {
            constructor(e) {
              let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20;
              this.hostCancellationToken = e, this.throttleWaitMilliseconds = t, this.lastCancellationCheckTime = 0;
            }
            isCancellationRequested() {
              let e = ts();
              return Math.abs(e - this.lastCancellationCheckTime) >= this.throttleWaitMilliseconds ? (this.lastCancellationCheckTime = e, this.hostCancellationToken.isCancellationRequested()) : false;
            }
            throwIfCancellationRequested() {
              var e;
              if (this.isCancellationRequested())
                throw (e = rs) == null || e.instant(rs.Phase.Session, "cancellationThrown", { kind: "ThrottledCancellationToken" }), new Rp();
            }
          }, M2 = ["getSemanticDiagnostics", "getSuggestionDiagnostics", "getCompilerOptionsDiagnostics", "getSemanticClassifications", "getEncodedSemanticClassifications", "getCodeFixesAtPosition", "getCombinedCodeFix", "applyCodeActionCommand", "organizeImports", "getEditsForFileRename", "getEmitOutput", "getApplicableRefactors", "getEditsForRefactor", "prepareCallHierarchy", "provideCallHierarchyIncomingCalls", "provideCallHierarchyOutgoingCalls", "provideInlayHints", "getSupportedCodeFixes"], M7 = [...M2, "getCompletionsAtPosition", "getCompletionEntryDetails", "getCompletionEntrySymbol", "getSignatureHelpItems", "getQuickInfoAtPosition", "getDefinitionAtPosition", "getDefinitionAndBoundSpan", "getImplementationAtPosition", "getTypeDefinitionAtPosition", "getReferencesAtPosition", "findReferences", "getOccurrencesAtPosition", "getDocumentHighlights", "getNavigateToItems", "getRenameInfo", "findRenameLocations", "getApplicableRefactors"], gx(_B());
        } }), L2 = D({ "src/services/_namespaces/ts.ts"() {
          nn(), u7(), yB();
        } }), L7 = {};
        y(L7, { ANONYMOUS: () => ANONYMOUS, AccessFlags: () => Cg, AssertionLevel: () => $1, AssignmentDeclarationKind: () => Mg, AssignmentKind: () => Sv, Associativity: () => Ev, BreakpointResolver: () => ts_BreakpointResolver_exports, BuilderFileEmit: () => BuilderFileEmit, BuilderProgramKind: () => BuilderProgramKind, BuilderState: () => BuilderState, BundleFileSectionKind: () => ty, CallHierarchy: () => ts_CallHierarchy_exports, CharacterCodes: () => $g, CheckFlags: () => Tg, CheckMode: () => CheckMode, ClassificationType: () => ClassificationType, ClassificationTypeNames: () => ClassificationTypeNames, CommentDirectiveType: () => ig, Comparison: () => d, CompletionInfoFlags: () => CompletionInfoFlags, CompletionTriggerKind: () => CompletionTriggerKind, Completions: () => ts_Completions_exports, ConfigFileProgramReloadLevel: () => ConfigFileProgramReloadLevel, ContextFlags: () => pg, CoreServicesShimHostAdapter: () => CoreServicesShimHostAdapter, Debug: () => Y, DiagnosticCategory: () => qp, Diagnostics: () => ve, DocumentHighlights: () => DocumentHighlights, ElementFlags: () => wg, EmitFlags: () => Wp, EmitHint: () => Qg, EmitOnly: () => og, EndOfLineState: () => EndOfLineState, EnumKind: () => bg, ExitStatus: () => cg, ExportKind: () => ExportKind, Extension: () => Kg, ExternalEmitHelpers: () => Yg, FileIncludeKind: () => ag, FilePreprocessingDiagnosticsKind: () => sg, FileSystemEntryKind: () => FileSystemEntryKind, FileWatcherEventKind: () => FileWatcherEventKind, FindAllReferences: () => ts_FindAllReferences_exports, FlattenLevel: () => FlattenLevel, FlowFlags: () => il, ForegroundColorEscapeSequences: () => ForegroundColorEscapeSequences, FunctionFlags: () => xv, GeneratedIdentifierFlags: () => rg, GetLiteralTextFlags: () => vv, GoToDefinition: () => ts_GoToDefinition_exports, HighlightSpanKind: () => HighlightSpanKind, ImportKind: () => ImportKind, ImportsNotUsedAsValues: () => Ug, IndentStyle: () => IndentStyle, IndexKind: () => Dg, InferenceFlags: () => Ng, InferencePriority: () => Ig, InlayHintKind: () => InlayHintKind, InlayHints: () => ts_InlayHints_exports, InternalEmitFlags: () => Xg, InternalSymbolName: () => Sg, InvalidatedProjectKind: () => InvalidatedProjectKind, JsDoc: () => ts_JsDoc_exports, JsTyping: () => ts_JsTyping_exports, JsxEmit: () => qg, JsxFlags: () => tg, JsxReferenceKind: () => Ag, LanguageServiceMode: () => LanguageServiceMode, LanguageServiceShimHostAdapter: () => LanguageServiceShimHostAdapter, LanguageVariant: () => Hg, LexicalEnvironmentFlags: () => ey, ListFormat: () => ry, LogLevel: () => Y1, MemberOverrideStatus: () => lg, ModifierFlags: () => Mp, ModuleDetectionKind: () => Rg, ModuleInstanceState: () => ModuleInstanceState, ModuleKind: () => Bg, ModuleResolutionKind: () => Lg, ModuleSpecifierEnding: () => jv, NavigateTo: () => ts_NavigateTo_exports, NavigationBar: () => ts_NavigationBar_exports, NewLineKind: () => zg, NodeBuilderFlags: () => fg, NodeCheckFlags: () => xg, NodeFactoryFlags: () => Fv, NodeFlags: () => Op, NodeResolutionFeatures: () => NodeResolutionFeatures, ObjectFlags: () => Fp, OperationCanceledException: () => Rp, OperatorPrecedence: () => wv, OrganizeImports: () => ts_OrganizeImports_exports, OrganizeImportsMode: () => OrganizeImportsMode, OuterExpressionKinds: () => Zg, OutliningElementsCollector: () => ts_OutliningElementsCollector_exports, OutliningSpanKind: () => OutliningSpanKind, OutputFileType: () => OutputFileType, PackageJsonAutoImportPreference: () => PackageJsonAutoImportPreference, PackageJsonDependencyGroup: () => PackageJsonDependencyGroup, PatternMatchKind: () => PatternMatchKind, PollingInterval: () => PollingInterval, PollingWatchKind: () => Fg, PragmaKindFlags: () => ny, PrivateIdentifierKind: () => PrivateIdentifierKind, ProcessLevel: () => ProcessLevel, QuotePreference: () => QuotePreference, RelationComparisonResult: () => Lp, Rename: () => ts_Rename_exports, ScriptElementKind: () => ScriptElementKind, ScriptElementKindModifier: () => ScriptElementKindModifier, ScriptKind: () => Wg, ScriptSnapshot: () => ScriptSnapshot, ScriptTarget: () => Vg, SemanticClassificationFormat: () => SemanticClassificationFormat, SemanticMeaning: () => SemanticMeaning, SemicolonPreference: () => SemicolonPreference, SignatureCheckMode: () => SignatureCheckMode, SignatureFlags: () => Bp, SignatureHelp: () => ts_SignatureHelp_exports, SignatureKind: () => Pg, SmartSelectionRange: () => ts_SmartSelectionRange_exports, SnippetKind: () => zp, SortKind: () => H1, StructureIsReused: () => _g, SymbolAccessibility: () => hg, SymbolDisplay: () => ts_SymbolDisplay_exports, SymbolDisplayPartKind: () => SymbolDisplayPartKind, SymbolFlags: () => jp, SymbolFormatFlags: () => mg, SyntaxKind: () => Np, SyntheticSymbolKind: () => gg, Ternary: () => Og, ThrottledCancellationToken: () => O7, TokenClass: () => TokenClass, TokenFlags: () => ng, TransformFlags: () => Up, TypeFacts: () => TypeFacts, TypeFlags: () => Jp, TypeFormatFlags: () => dg, TypeMapKind: () => kg, TypePredicateKind: () => yg, TypeReferenceSerializationKind: () => vg, TypeScriptServicesFactory: () => TypeScriptServicesFactory, UnionReduction: () => ug, UpToDateStatusType: () => UpToDateStatusType, VarianceFlags: () => Eg, Version: () => Version, VersionRange: () => VersionRange, WatchDirectoryFlags: () => Gg, WatchDirectoryKind: () => Jg, WatchFileKind: () => jg, WatchLogLevel: () => WatchLogLevel, WatchType: () => WatchType, accessPrivateIdentifier: () => accessPrivateIdentifier, addEmitFlags: () => addEmitFlags, addEmitHelper: () => addEmitHelper, addEmitHelpers: () => addEmitHelpers, addInternalEmitFlags: () => addInternalEmitFlags, addNodeFactoryPatcher: () => jL, addObjectAllocatorPatcher: () => sM, addRange: () => jr, addRelatedInfo: () => Rl, addSyntheticLeadingComment: () => addSyntheticLeadingComment, addSyntheticTrailingComment: () => addSyntheticTrailingComment, addToSeen: () => GO, advancedAsyncSuperHelper: () => advancedAsyncSuperHelper, affectsDeclarationPathOptionDeclarations: () => affectsDeclarationPathOptionDeclarations, affectsEmitOptionDeclarations: () => affectsEmitOptionDeclarations, allKeysStartWithDot: () => allKeysStartWithDot, altDirectorySeparator: () => py, and: () => E5, append: () => tr, appendIfUnique: () => g_, arrayFrom: () => Za, arrayIsEqualTo: () => Hc, arrayIsHomogeneous: () => fL, arrayIsSorted: () => Wc, arrayOf: () => yo, arrayReverseIterator: () => y_, arrayToMap: () => Zc, arrayToMultiMap: () => bo, arrayToNumericMap: () => Os, arraysEqual: () => ke, assertType: () => C5, assign: () => vo, assignHelper: () => assignHelper, asyncDelegator: () => asyncDelegator, asyncGeneratorHelper: () => asyncGeneratorHelper, asyncSuperHelper: () => asyncSuperHelper, asyncValues: () => asyncValues, attachFileToDiagnostics: () => qs, awaitHelper: () => awaitHelper, awaiterHelper: () => awaiterHelper, base64decode: () => mO, base64encode: () => dO, binarySearch: () => Ya, binarySearchKey: () => b_, bindSourceFile: () => bindSourceFile, breakIntoCharacterSpans: () => breakIntoCharacterSpans, breakIntoWordSpans: () => breakIntoWordSpans, buildLinkParts: () => buildLinkParts, buildOpts: () => buildOpts, buildOverload: () => buildOverload, bundlerModuleNameResolver: () => bundlerModuleNameResolver, canBeConvertedToAsync: () => canBeConvertedToAsync, canHaveDecorators: () => ME, canHaveExportModifier: () => AL, canHaveFlowNode: () => jI, canHaveIllegalDecorators: () => rJ, canHaveIllegalModifiers: () => nJ, canHaveIllegalType: () => tJ, canHaveIllegalTypeParameters: () => IE, canHaveJSDoc: () => Af, canHaveLocals: () => zP, canHaveModifiers: () => fc, canHaveSymbol: () => UP, canJsonReportNoInputFiles: () => canJsonReportNoInputFiles, canProduceDiagnostics: () => canProduceDiagnostics, canUsePropertyAccess: () => PL, canWatchDirectoryOrFile: () => canWatchDirectoryOrFile, cartesianProduct: () => P5, cast: () => ti, chainBundle: () => chainBundle, chainDiagnosticMessages: () => lM, changeAnyExtension: () => RT, changeCompilerHostLikeToUseCache: () => changeCompilerHostLikeToUseCache, changeExtension: () => KM, changesAffectModuleResolution: () => cD, changesAffectingProgramStructure: () => lD, childIsDecorated: () => h0, classElementOrClassElementParameterIsDecorated: () => sI, classOrConstructorParameterIsDecorated: () => aI, classPrivateFieldGetHelper: () => classPrivateFieldGetHelper, classPrivateFieldInHelper: () => classPrivateFieldInHelper, classPrivateFieldSetHelper: () => classPrivateFieldSetHelper, classicNameResolver: () => classicNameResolver, classifier: () => ts_classifier_exports, cleanExtendedConfigCache: () => cleanExtendedConfigCache, clear: () => nt, clearMap: () => qO, clearSharedExtendedConfigFileWatcher: () => clearSharedExtendedConfigFileWatcher, climbPastPropertyAccess: () => climbPastPropertyAccess, climbPastPropertyOrElementAccess: () => climbPastPropertyOrElementAccess, clone: () => E_, cloneCompilerOptions: () => cloneCompilerOptions, closeFileWatcher: () => MO, closeFileWatcherOf: () => closeFileWatcherOf, codefix: () => ts_codefix_exports, collapseTextChangeRangesAcrossMultipleVersions: () => CA, collectExternalModuleInfo: () => collectExternalModuleInfo, combine: () => $c, combinePaths: () => tn, commentPragmas: () => Vp, commonOptionsWithBuild: () => commonOptionsWithBuild, commonPackageFolders: () => Pv, compact: () => Gc, compareBooleans: () => j1, compareDataObjects: () => px, compareDiagnostics: () => av, compareDiagnosticsSkipRelatedInformation: () => qf, compareEmitHelpers: () => compareEmitHelpers, compareNumberOfDirectorySeparators: () => $M, comparePaths: () => tA, comparePathsCaseInsensitive: () => eA, comparePathsCaseSensitive: () => Z5, comparePatternKeys: () => comparePatternKeys, compareProperties: () => R1, compareStringsCaseInsensitive: () => C_, compareStringsCaseInsensitiveEslintCompatible: () => O1, compareStringsCaseSensitive: () => ri, compareStringsCaseSensitiveUI: () => L1, compareTextSpans: () => I1, compareValues: () => Vr, compileOnSaveCommandLineOption: () => compileOnSaveCommandLineOption, compilerOptionsAffectDeclarationPath: () => DM, compilerOptionsAffectEmit: () => PM, compilerOptionsAffectSemanticDiagnostics: () => AM, compilerOptionsDidYouMeanDiagnostics: () => compilerOptionsDidYouMeanDiagnostics, compilerOptionsIndicateEsModules: () => compilerOptionsIndicateEsModules, compose: () => k1, computeCommonSourceDirectoryOfFilenames: () => computeCommonSourceDirectoryOfFilenames, computeLineAndCharacterOfPosition: () => my, computeLineOfPosition: () => k_, computeLineStarts: () => Kp, computePositionOfLineAndCharacter: () => dy, computeSignature: () => computeSignature, computeSignatureWithDiagnostics: () => computeSignatureWithDiagnostics, computeSuggestionDiagnostics: () => computeSuggestionDiagnostics, concatenate: () => Ft, concatenateDiagnosticMessageChains: () => uM, consumesNodeCoreModules: () => consumesNodeCoreModules, contains: () => pe, containsIgnoredPath: () => Hx, containsObjectRestOrSpread: () => A2, containsParseError: () => Ky, containsPath: () => jT, convertCompilerOptionsForTelemetry: () => convertCompilerOptionsForTelemetry, convertCompilerOptionsFromJson: () => convertCompilerOptionsFromJson, convertJsonOption: () => convertJsonOption, convertToBase64: () => ix, convertToObject: () => convertToObject, convertToObjectWorker: () => convertToObjectWorker, convertToOptionsWithAbsolutePaths: () => convertToOptionsWithAbsolutePaths, convertToRelativePath: () => nA, convertToTSConfig: () => convertToTSConfig, convertTypeAcquisitionFromJson: () => convertTypeAcquisitionFromJson, copyComments: () => copyComments, copyEntries: () => dD, copyLeadingComments: () => copyLeadingComments, copyProperties: () => H, copyTrailingAsLeadingComments: () => copyTrailingAsLeadingComments, copyTrailingComments: () => copyTrailingComments, couldStartTrivia: () => pA, countWhere: () => Xe, createAbstractBuilder: () => createAbstractBuilder, createAccessorPropertyBackingField: () => LJ, createAccessorPropertyGetRedirector: () => RJ, createAccessorPropertySetRedirector: () => jJ, createBaseNodeFactory: () => S8, createBinaryExpressionTrampoline: () => PJ, createBindingHelper: () => createBindingHelper, createBuildInfo: () => createBuildInfo, createBuilderProgram: () => createBuilderProgram, createBuilderProgramUsingProgramBuildInfo: () => createBuilderProgramUsingProgramBuildInfo, createBuilderStatusReporter: () => createBuilderStatusReporter, createCacheWithRedirects: () => createCacheWithRedirects, createCacheableExportInfoMap: () => createCacheableExportInfoMap, createCachedDirectoryStructureHost: () => createCachedDirectoryStructureHost, createClassifier: () => createClassifier, createCommentDirectivesMap: () => JD, createCompilerDiagnostic: () => Ol, createCompilerDiagnosticForInvalidCustomType: () => createCompilerDiagnosticForInvalidCustomType, createCompilerDiagnosticFromMessageChain: () => cM, createCompilerHost: () => createCompilerHost, createCompilerHostFromProgramHost: () => createCompilerHostFromProgramHost, createCompilerHostWorker: () => createCompilerHostWorker, createDetachedDiagnostic: () => Ro, createDiagnosticCollection: () => TN, createDiagnosticForFileFromMessageChain: () => mk, createDiagnosticForNode: () => uk, createDiagnosticForNodeArray: () => pk, createDiagnosticForNodeArrayFromMessageChain: () => dk, createDiagnosticForNodeFromMessageChain: () => fk, createDiagnosticForNodeInSourceFile: () => P3, createDiagnosticForRange: () => gk, createDiagnosticMessageChainFromDiagnostic: () => hk, createDiagnosticReporter: () => createDiagnosticReporter, createDocumentPositionMapper: () => createDocumentPositionMapper, createDocumentRegistry: () => createDocumentRegistry, createDocumentRegistryInternal: () => createDocumentRegistryInternal, createEmitAndSemanticDiagnosticsBuilderProgram: () => createEmitAndSemanticDiagnosticsBuilderProgram, createEmitHelperFactory: () => createEmitHelperFactory, createEmptyExports: () => Dj, createExpressionForJsxElement: () => Ij, createExpressionForJsxFragment: () => Nj, createExpressionForObjectLiteralElementLike: () => Fj, createExpressionForPropertyName: () => vE, createExpressionFromEntityName: () => yE, createExternalHelpersImportDeclarationIfNeeded: () => $j, createFileDiagnostic: () => iv, createFileDiagnosticFromMessageChain: () => r0, createForOfBindingStatement: () => Oj, createGetCanonicalFileName: () => wp, createGetSourceFile: () => createGetSourceFile, createGetSymbolAccessibilityDiagnosticForNode: () => createGetSymbolAccessibilityDiagnosticForNode, createGetSymbolAccessibilityDiagnosticForNodeName: () => createGetSymbolAccessibilityDiagnosticForNodeName, createGetSymbolWalker: () => createGetSymbolWalker, createIncrementalCompilerHost: () => createIncrementalCompilerHost, createIncrementalProgram: () => createIncrementalProgram, createInputFiles: () => VL, createInputFilesWithFilePaths: () => C8, createInputFilesWithFileTexts: () => A8, createJsxFactoryExpression: () => gE, createLanguageService: () => lB, createLanguageServiceSourceFile: () => N2, createMemberAccessForPropertyName: () => hd, createModeAwareCache: () => createModeAwareCache, createModeAwareCacheKey: () => createModeAwareCacheKey, createModuleResolutionCache: () => createModuleResolutionCache, createModuleResolutionLoader: () => createModuleResolutionLoader, createModuleSpecifierResolutionHost: () => createModuleSpecifierResolutionHost, createMultiMap: () => Be, createNodeConverters: () => x8, createNodeFactory: () => Zf, createOptionNameMap: () => createOptionNameMap, createOverload: () => createOverload, createPackageJsonImportFilter: () => createPackageJsonImportFilter, createPackageJsonInfo: () => createPackageJsonInfo, createParenthesizerRules: () => createParenthesizerRules, createPatternMatcher: () => createPatternMatcher, createPrependNodes: () => createPrependNodes, createPrinter: () => createPrinter, createPrinterWithDefaults: () => createPrinterWithDefaults, createPrinterWithRemoveComments: () => createPrinterWithRemoveComments, createPrinterWithRemoveCommentsNeverAsciiEscape: () => createPrinterWithRemoveCommentsNeverAsciiEscape, createPrinterWithRemoveCommentsOmitTrailingSemicolon: () => createPrinterWithRemoveCommentsOmitTrailingSemicolon, createProgram: () => createProgram, createProgramHost: () => createProgramHost, createPropertyNameNodeForIdentifierOrLiteral: () => EL, createQueue: () => Fr, createRange: () => Jf, createRedirectedBuilderProgram: () => createRedirectedBuilderProgram, createResolutionCache: () => createResolutionCache, createRuntimeTypeSerializer: () => createRuntimeTypeSerializer, createScanner: () => Po, createSemanticDiagnosticsBuilderProgram: () => createSemanticDiagnosticsBuilderProgram, createSet: () => Cr, createSolutionBuilder: () => createSolutionBuilder, createSolutionBuilderHost: () => createSolutionBuilderHost, createSolutionBuilderWithWatch: () => createSolutionBuilderWithWatch, createSolutionBuilderWithWatchHost: () => createSolutionBuilderWithWatchHost, createSortedArray: () => zc, createSourceFile: () => YE, createSourceMapGenerator: () => createSourceMapGenerator, createSourceMapSource: () => HL, createSuperAccessVariableStatement: () => createSuperAccessVariableStatement, createSymbolTable: () => oD, createSymlinkCache: () => MM, createSystemWatchFunctions: () => createSystemWatchFunctions, createTextChange: () => createTextChange, createTextChangeFromStartLength: () => createTextChangeFromStartLength, createTextChangeRange: () => Zp, createTextRangeFromNode: () => createTextRangeFromNode, createTextRangeFromSpan: () => createTextRangeFromSpan, createTextSpan: () => L_, createTextSpanFromBounds: () => ha, createTextSpanFromNode: () => createTextSpanFromNode, createTextSpanFromRange: () => createTextSpanFromRange, createTextSpanFromStringLiteralLikeContent: () => createTextSpanFromStringLiteralLikeContent, createTextWriter: () => DN, createTokenRange: () => bO, createTypeChecker: () => createTypeChecker, createTypeReferenceDirectiveResolutionCache: () => createTypeReferenceDirectiveResolutionCache, createTypeReferenceResolutionLoader: () => createTypeReferenceResolutionLoader, createUnderscoreEscapedMultiMap: () => Ht, createUnparsedSourceFile: () => UL, createWatchCompilerHost: () => createWatchCompilerHost2, createWatchCompilerHostOfConfigFile: () => createWatchCompilerHostOfConfigFile, createWatchCompilerHostOfFilesAndCompilerOptions: () => createWatchCompilerHostOfFilesAndCompilerOptions, createWatchFactory: () => createWatchFactory, createWatchHost: () => createWatchHost, createWatchProgram: () => createWatchProgram, createWatchStatusReporter: () => createWatchStatusReporter, createWriteFileMeasuringIO: () => createWriteFileMeasuringIO, declarationNameToString: () => A3, decodeMappings: () => decodeMappings, decodedTextSpanIntersectsWith: () => Sy, decorateHelper: () => decorateHelper, deduplicate: () => ji, defaultIncludeSpec: () => defaultIncludeSpec, defaultInitCompilerOptions: () => defaultInitCompilerOptions, defaultMaximumTruncationLength: () => r8, detectSortCaseSensitivity: () => Vc, diagnosticCategoryName: () => z5, diagnosticToString: () => diagnosticToString, directoryProbablyExists: () => sx, directorySeparator: () => zn, displayPart: () => displayPart, displayPartsToString: () => cB, disposeEmitNodes: () => disposeEmitNodes, documentSpansEqual: () => documentSpansEqual, dumpTracingLegend: () => dumpTracingLegend, elementAt: () => wT, elideNodes: () => IJ, emitComments: () => U4, emitDetachedComments: () => GN, emitFiles: () => emitFiles, emitFilesAndReportErrors: () => emitFilesAndReportErrors, emitFilesAndReportErrorsAndGetExitStatus: () => emitFilesAndReportErrorsAndGetExitStatus, emitModuleKindIsNonNodeESM: () => mM, emitNewLineBeforeLeadingCommentOfPosition: () => HN, emitNewLineBeforeLeadingComments: () => B4, emitNewLineBeforeLeadingCommentsOfPosition: () => q4, emitSkippedWithNoDiagnostics: () => emitSkippedWithNoDiagnostics, emitUsingBuildInfo: () => emitUsingBuildInfo, emptyArray: () => Bt, emptyFileSystemEntries: () => T8, emptyMap: () => V1, emptyOptions: () => emptyOptions, emptySet: () => ET, endsWith: () => es, ensurePathIsNonModuleName: () => _y, ensureScriptKind: () => Nx, ensureTrailingDirectorySeparator: () => wo, entityNameToString: () => ls, enumerateInsertsAndDeletes: () => A5, equalOwnProperties: () => S_, equateStringsCaseInsensitive: () => Ms, equateStringsCaseSensitive: () => To, equateValues: () => fa, esDecorateHelper: () => esDecorateHelper, escapeJsxAttributeString: () => A4, escapeLeadingUnderscores: () => vi, escapeNonAsciiString: () => Of, escapeSnippetText: () => xL, escapeString: () => Nf, every: () => me, expandPreOrPostfixIncrementOrDecrementExpression: () => Bj, explainFiles: () => explainFiles, explainIfFileIsRedirectAndImpliedFormat: () => explainIfFileIsRedirectAndImpliedFormat, exportAssignmentIsAlias: () => I0, exportStarHelper: () => exportStarHelper, expressionResultIsUnused: () => gL, extend: () => S, extendsHelper: () => extendsHelper, extensionFromPath: () => QM, extensionIsTS: () => qx, externalHelpersModuleNameText: () => Kf, factory: () => si, fileExtensionIs: () => ns, fileExtensionIsOneOf: () => da, fileIncludeReasonToDiagnostics: () => fileIncludeReasonToDiagnostics, filter: () => ee, filterMutate: () => je, filterSemanticDiagnostics: () => filterSemanticDiagnostics, find: () => Ae, findAncestor: () => zi, findBestPatternMatch: () => TT, findChildOfKind: () => findChildOfKind, findComputedPropertyNameCacheAssignment: () => JJ, findConfigFile: () => findConfigFile, findContainingList: () => findContainingList, findDiagnosticForNode: () => findDiagnosticForNode, findFirstNonJsxWhitespaceToken: () => findFirstNonJsxWhitespaceToken, findIndex: () => he, findLast: () => te, findLastIndex: () => Pe, findListItemInfo: () => findListItemInfo, findMap: () => R, findModifier: () => findModifier, findNextToken: () => findNextToken, findPackageJson: () => findPackageJson, findPackageJsons: () => findPackageJsons, findPrecedingMatchingToken: () => findPrecedingMatchingToken, findPrecedingToken: () => findPrecedingToken, findSuperStatementIndex: () => findSuperStatementIndex, findTokenOnLeftOfPosition: () => findTokenOnLeftOfPosition, findUseStrictPrologue: () => TE, first: () => fo, firstDefined: () => q, firstDefinedIterator: () => W, firstIterator: () => v_, firstOrOnly: () => firstOrOnly, firstOrUndefined: () => pa, firstOrUndefinedIterator: () => Xc, fixupCompilerOptions: () => fixupCompilerOptions, flatMap: () => ne, flatMapIterator: () => Fe, flatMapToMutable: () => ge, flatten: () => ct, flattenCommaList: () => BJ, flattenDestructuringAssignment: () => flattenDestructuringAssignment, flattenDestructuringBinding: () => flattenDestructuringBinding, flattenDiagnosticMessageText: () => flattenDiagnosticMessageText, forEach: () => c, forEachAncestor: () => uD, forEachAncestorDirectory: () => FT, forEachChild: () => xr, forEachChildRecursively: () => D2, forEachEmittedFile: () => forEachEmittedFile, forEachEnclosingBlockScopeContainer: () => ok, forEachEntry: () => pD, forEachExternalModuleToImportFrom: () => forEachExternalModuleToImportFrom, forEachImportClauseDeclaration: () => NI, forEachKey: () => fD, forEachLeadingCommentRange: () => fA, forEachNameInAccessChainWalkingLeft: () => QO, forEachResolvedProjectReference: () => forEachResolvedProjectReference, forEachReturnStatement: () => Pk, forEachRight: () => M, forEachTrailingCommentRange: () => dA, forEachUnique: () => forEachUnique, forEachYieldExpression: () => Dk, forSomeAncestorDirectory: () => WO, formatColorAndReset: () => formatColorAndReset, formatDiagnostic: () => formatDiagnostic, formatDiagnostics: () => formatDiagnostics, formatDiagnosticsWithColorAndContext: () => formatDiagnosticsWithColorAndContext, formatGeneratedName: () => bd, formatGeneratedNamePart: () => C2, formatLocation: () => formatLocation, formatMessage: () => _M, formatStringFromArgs: () => X_, formatting: () => ts_formatting_exports, fullTripleSlashAMDReferencePathRegEx: () => Tv, fullTripleSlashReferencePathRegEx: () => bv, generateDjb2Hash: () => generateDjb2Hash, generateTSConfig: () => generateTSConfig, generatorHelper: () => generatorHelper, getAdjustedReferenceLocation: () => getAdjustedReferenceLocation, getAdjustedRenameLocation: () => getAdjustedRenameLocation, getAliasDeclarationFromName: () => u4, getAllAccessorDeclarations: () => W0, getAllDecoratorsOfClass: () => getAllDecoratorsOfClass, getAllDecoratorsOfClassElement: () => getAllDecoratorsOfClassElement, getAllJSDocTags: () => MS, getAllJSDocTagsOfKind: () => UA, getAllKeys: () => T_, getAllProjectOutputs: () => getAllProjectOutputs, getAllSuperTypeNodes: () => h4, getAllUnscopedEmitHelpers: () => getAllUnscopedEmitHelpers, getAllowJSCompilerOption: () => Ax, getAllowSyntheticDefaultImports: () => TM, getAncestor: () => eN, getAnyExtensionFromPath: () => Gp, getAreDeclarationMapsEnabled: () => bM, getAssignedExpandoInitializer: () => bI, getAssignedName: () => yS, getAssignmentDeclarationKind: () => ps, getAssignmentDeclarationPropertyAccessKind: () => K3, getAssignmentTargetKind: () => o4, getAutomaticTypeDirectiveNames: () => getAutomaticTypeDirectiveNames, getBaseFileName: () => sl, getBinaryOperatorPrecedence: () => Dl, getBuildInfo: () => getBuildInfo, getBuildInfoFileVersionMap: () => getBuildInfoFileVersionMap, getBuildInfoText: () => getBuildInfoText, getBuildOrderFromAnyBuildOrder: () => getBuildOrderFromAnyBuildOrder, getBuilderCreationParameters: () => getBuilderCreationParameters, getBuilderFileEmit: () => getBuilderFileEmit, getCheckFlags: () => ux, getClassExtendsHeritageElement: () => d4, getClassLikeDeclarationOfSymbol: () => dx, getCombinedLocalAndExportSymbolFlags: () => jO, getCombinedModifierFlags: () => ef, getCombinedNodeFlags: () => tf, getCombinedNodeFlagsAlwaysIncludeJSDoc: () => PA, getCommentRange: () => getCommentRange, getCommonSourceDirectory: () => getCommonSourceDirectory, getCommonSourceDirectoryOfConfig: () => getCommonSourceDirectoryOfConfig, getCompilerOptionValue: () => uv, getCompilerOptionsDiffValue: () => getCompilerOptionsDiffValue, getConditions: () => getConditions, getConfigFileParsingDiagnostics: () => getConfigFileParsingDiagnostics, getConstantValue: () => getConstantValue, getContainerNode: () => getContainerNode, getContainingClass: () => Vk, getContainingClassStaticBlock: () => Hk, getContainingFunction: () => zk, getContainingFunctionDeclaration: () => Wk, getContainingFunctionOrClassStaticBlock: () => Gk, getContainingNodeArray: () => yL, getContainingObjectLiteralElement: () => S7, getContextualTypeFromParent: () => getContextualTypeFromParent, getContextualTypeFromParentOrAncestorTypeNode: () => getContextualTypeFromParentOrAncestorTypeNode, getCurrentTime: () => getCurrentTime, getDeclarationDiagnostics: () => getDeclarationDiagnostics, getDeclarationEmitExtensionForPath: () => O4, getDeclarationEmitOutputFilePath: () => ON, getDeclarationEmitOutputFilePathWorker: () => N4, getDeclarationFromName: () => XI, getDeclarationModifierFlagsFromSymbol: () => LO, getDeclarationOfKind: () => aD, getDeclarationsOfKind: () => sD, getDeclaredExpandoInitializer: () => yI, getDecorators: () => kA, getDefaultCompilerOptions: () => y7, getDefaultExportInfoWorker: () => getDefaultExportInfoWorker, getDefaultFormatCodeSettings: () => getDefaultFormatCodeSettings, getDefaultLibFileName: () => aS, getDefaultLibFilePath: () => gB, getDefaultLikeExportInfo: () => getDefaultLikeExportInfo, getDiagnosticText: () => getDiagnosticText, getDiagnosticsWithinSpan: () => getDiagnosticsWithinSpan, getDirectoryPath: () => ma, getDocumentPositionMapper: () => getDocumentPositionMapper, getESModuleInterop: () => ov, getEditsForFileRename: () => getEditsForFileRename, getEffectiveBaseTypeNode: () => f4, getEffectiveConstraintOfTypeParameter: () => HA, getEffectiveContainerForJSDocTemplateTag: () => FI, getEffectiveImplementsTypeNodes: () => m4, getEffectiveInitializer: () => V3, getEffectiveJSDocHost: () => A0, getEffectiveModifierFlags: () => Rf, getEffectiveModifierFlagsAlwaysIncludeJSDoc: () => K4, getEffectiveModifierFlagsNoCache: () => Y4, getEffectiveReturnTypeNode: () => zN, getEffectiveSetAccessorTypeAnnotationNode: () => VN, getEffectiveTypeAnnotationNode: () => V0, getEffectiveTypeParameterDeclarations: () => VA, getEffectiveTypeRoots: () => getEffectiveTypeRoots, getElementOrPropertyAccessArgumentExpressionOrName: () => Cf, getElementOrPropertyAccessName: () => Fs, getElementsOfBindingOrAssignmentPattern: () => kE, getEmitDeclarations: () => cv, getEmitFlags: () => xi, getEmitHelpers: () => getEmitHelpers, getEmitModuleDetectionKind: () => wx, getEmitModuleKind: () => Ei, getEmitModuleResolutionKind: () => Ml, getEmitScriptTarget: () => Uf, getEnclosingBlockScopeContainer: () => Zy, getEncodedSemanticClassifications: () => getEncodedSemanticClassifications, getEncodedSyntacticClassifications: () => getEncodedSyntacticClassifications, getEndLinePosition: () => d3, getEntityNameFromTypeNode: () => nI, getEntrypointsFromPackageJsonInfo: () => getEntrypointsFromPackageJsonInfo, getErrorCountForSummary: () => getErrorCountForSummary, getErrorSpanForNode: () => i0, getErrorSummaryText: () => getErrorSummaryText, getEscapedTextOfIdentifierOrLiteral: () => b4, getExpandoInitializer: () => U_, getExportAssignmentExpression: () => p4, getExportInfoMap: () => getExportInfoMap, getExportNeedsImportStarHelper: () => getExportNeedsImportStarHelper, getExpressionAssociativity: () => yN, getExpressionPrecedence: () => vN, getExternalHelpersModuleName: () => EE, getExternalModuleImportEqualsDeclarationExpression: () => _I, getExternalModuleName: () => E0, getExternalModuleNameFromDeclaration: () => IN, getExternalModuleNameFromPath: () => F0, getExternalModuleNameLiteral: () => Xj, getExternalModuleRequireArgument: () => cI, getFallbackOptions: () => getFallbackOptions, getFileEmitOutput: () => getFileEmitOutput, getFileMatcherPatterns: () => Ix, getFileNamesFromConfigSpecs: () => getFileNamesFromConfigSpecs, getFileWatcherEventKind: () => getFileWatcherEventKind, getFilesInErrorForSummary: () => getFilesInErrorForSummary, getFirstConstructorWithBody: () => R4, getFirstIdentifier: () => iO, getFirstNonSpaceCharacterPosition: () => getFirstNonSpaceCharacterPosition, getFirstProjectOutput: () => getFirstProjectOutput, getFixableErrorSpanExpression: () => getFixableErrorSpanExpression, getFormatCodeSettingsForWriting: () => getFormatCodeSettingsForWriting, getFullWidth: () => hf, getFunctionFlags: () => sN, getHeritageClause: () => Pf, getHostSignatureFromJSDoc: () => C0, getIdentifierAutoGenerate: () => getIdentifierAutoGenerate, getIdentifierGeneratedImportReference: () => getIdentifierGeneratedImportReference, getIdentifierTypeArguments: () => getIdentifierTypeArguments, getImmediatelyInvokedFunctionExpression: () => Qk, getImpliedNodeFormatForFile: () => getImpliedNodeFormatForFile, getImpliedNodeFormatForFileWorker: () => getImpliedNodeFormatForFileWorker, getImportNeedsImportDefaultHelper: () => getImportNeedsImportDefaultHelper, getImportNeedsImportStarHelper: () => getImportNeedsImportStarHelper, getIndentSize: () => Oo, getIndentString: () => j0, getInitializedVariables: () => NO2, getInitializerOfBinaryExpression: () => X3, getInitializerOfBindingOrAssignmentElement: () => AE, getInterfaceBaseTypeNodes: () => g4, getInternalEmitFlags: () => zD, getInvokedExpression: () => iI, getIsolatedModules: () => zf, getJSDocAugmentsTag: () => ES, getJSDocClassTag: () => NA, getJSDocCommentRanges: () => I3, getJSDocCommentsAndTags: () => r4, getJSDocDeprecatedTag: () => jA, getJSDocDeprecatedTagNoCache: () => IS, getJSDocEnumTag: () => JA, getJSDocHost: () => s4, getJSDocImplementsTags: () => wS, getJSDocOverrideTagNoCache: () => kS, getJSDocParameterTags: () => of, getJSDocParameterTagsNoCache: () => bS, getJSDocPrivateTag: () => MA, getJSDocPrivateTagNoCache: () => AS, getJSDocProtectedTag: () => LA, getJSDocProtectedTagNoCache: () => PS, getJSDocPublicTag: () => OA, getJSDocPublicTagNoCache: () => CS, getJSDocReadonlyTag: () => RA, getJSDocReadonlyTagNoCache: () => DS, getJSDocReturnTag: () => NS, getJSDocReturnType: () => OS, getJSDocRoot: () => P0, getJSDocSatisfiesExpressionType: () => NL, getJSDocSatisfiesTag: () => wy, getJSDocTags: () => hl, getJSDocTagsNoCache: () => qA, getJSDocTemplateTag: () => BA, getJSDocThisTag: () => FA, getJSDocType: () => cf, getJSDocTypeAliasName: () => w2, getJSDocTypeAssertionType: () => Wj, getJSDocTypeParameterDeclarations: () => F4, getJSDocTypeParameterTags: () => SS, getJSDocTypeParameterTagsNoCache: () => xS, getJSDocTypeTag: () => _f, getJSXImplicitImportBase: () => IM, getJSXRuntimeImport: () => NM, getJSXTransformEnabled: () => kM, getKeyForCompilerOptions: () => getKeyForCompilerOptions, getLanguageVariant: () => sv, getLastChild: () => mx, getLeadingCommentRanges: () => Ao, getLeadingCommentRangesOfNode: () => Ck, getLeftmostAccessExpression: () => rv, getLeftmostExpression: () => ZO, getLineAndCharacterOfPosition: () => Ls, getLineInfo: () => getLineInfo, getLineOfLocalPosition: () => FN, getLineOfLocalPositionFromLineMap: () => ds, getLineStartPositionForPosition: () => getLineStartPositionForPosition, getLineStarts: () => ss, getLinesBetweenPositionAndNextNonWhitespaceCharacter: () => DO, getLinesBetweenPositionAndPrecedingNonWhitespaceCharacter: () => PO, getLinesBetweenPositions: () => I_, getLinesBetweenRangeEndAndRangeStart: () => wO, getLinesBetweenRangeEndPositions: () => CO, getLiteralText: () => WD, getLocalNameForExternalImport: () => Kj, getLocalSymbolForExportDefault: () => cO, getLocaleSpecificMessage: () => Y_, getLocaleTimeString: () => getLocaleTimeString, getMappedContextSpan: () => getMappedContextSpan, getMappedDocumentSpan: () => getMappedDocumentSpan, getMappedLocation: () => getMappedLocation, getMatchedFileSpec: () => getMatchedFileSpec, getMatchedIncludeSpec: () => getMatchedIncludeSpec, getMeaningFromDeclaration: () => getMeaningFromDeclaration, getMeaningFromLocation: () => getMeaningFromLocation, getMembersOfDeclaration: () => Ik, getModeForFileReference: () => getModeForFileReference, getModeForResolutionAtIndex: () => getModeForResolutionAtIndex, getModeForUsageLocation: () => getModeForUsageLocation, getModifiedTime: () => getModifiedTime, getModifiers: () => sf, getModuleInstanceState: () => getModuleInstanceState, getModuleNameStringLiteralAt: () => getModuleNameStringLiteralAt, getModuleSpecifierEndingPreference: () => VM, getModuleSpecifierResolverHost: () => getModuleSpecifierResolverHost, getNameForExportedSymbol: () => getNameForExportedSymbol, getNameFromIndexInfo: () => _k, getNameFromPropertyName: () => getNameFromPropertyName, getNameOfAccessExpression: () => KO, getNameOfCompilerOptionValue: () => getNameOfCompilerOptionValue, getNameOfDeclaration: () => ml, getNameOfExpando: () => xI, getNameOfJSDocTypedef: () => gS, getNameOrArgument: () => $3, getNameTable: () => uB, getNamesForExportedSymbol: () => getNamesForExportedSymbol, getNamespaceDeclarationNode: () => Q3, getNewLineCharacter: () => ox, getNewLineKind: () => getNewLineKind, getNewLineOrDefaultFromHost: () => getNewLineOrDefaultFromHost, getNewTargetContainer: () => Xk, getNextJSDocCommentLocation: () => a4, getNodeForGeneratedName: () => NJ, getNodeId: () => getNodeId, getNodeKind: () => getNodeKind, getNodeModifiers: () => getNodeModifiers, getNodeModulePathParts: () => wL, getNonAssignedNameOfDeclaration: () => Ey, getNonAssignmentOperatorForCompoundAssignment: () => getNonAssignmentOperatorForCompoundAssignment, getNonAugmentationDeclaration: () => E3, getNonDecoratorTokenPosOfNode: () => FD, getNormalizedAbsolutePath: () => as, getNormalizedAbsolutePathWithoutRoot: () => Q5, getNormalizedPathComponents: () => $p, getObjectFlags: () => Bf, getOperator: () => R0, getOperatorAssociativity: () => x4, getOperatorPrecedence: () => E4, getOptionFromName: () => getOptionFromName, getOptionsNameMap: () => getOptionsNameMap, getOrCreateEmitNode: () => getOrCreateEmitNode, getOrCreateExternalHelpersModuleNameIfNeeded: () => wE, getOrUpdate: () => la, getOriginalNode: () => ul, getOriginalNodeId: () => getOriginalNodeId, getOriginalSourceFile: () => gN, getOutputDeclarationFileName: () => getOutputDeclarationFileName, getOutputExtension: () => getOutputExtension, getOutputFileNames: () => getOutputFileNames, getOutputPathsFor: () => getOutputPathsFor, getOutputPathsForBundle: () => getOutputPathsForBundle, getOwnEmitOutputFilePath: () => NN, getOwnKeys: () => ho, getOwnValues: () => go, getPackageJsonInfo: () => getPackageJsonInfo, getPackageJsonTypesVersionsPaths: () => getPackageJsonTypesVersionsPaths, getPackageJsonsVisibleToFile: () => getPackageJsonsVisibleToFile, getPackageNameFromTypesPackageName: () => getPackageNameFromTypesPackageName, getPackageScopeForPath: () => getPackageScopeForPath, getParameterSymbolFromJSDoc: () => JI, getParameterTypeNode: () => CL, getParentNodeInSpan: () => getParentNodeInSpan, getParseTreeNode: () => fl, getParsedCommandLineOfConfigFile: () => getParsedCommandLineOfConfigFile, getPathComponents: () => qi, getPathComponentsRelativeTo: () => ly, getPathFromPathComponents: () => xo, getPathUpdater: () => getPathUpdater, getPathsBasePath: () => LN, getPatternFromSpec: () => BM, getPendingEmitKind: () => getPendingEmitKind, getPositionOfLineAndCharacter: () => lA, getPossibleGenericSignatures: () => getPossibleGenericSignatures, getPossibleOriginalInputExtensionForExtension: () => MN, getPossibleTypeArgumentsInfo: () => getPossibleTypeArgumentsInfo, getPreEmitDiagnostics: () => getPreEmitDiagnostics, getPrecedingNonSpaceCharacterPosition: () => getPrecedingNonSpaceCharacterPosition, getPrivateIdentifier: () => getPrivateIdentifier, getProperties: () => getProperties, getProperty: () => Qc, getPropertyArrayElementValue: () => qk, getPropertyAssignment: () => f0, getPropertyAssignmentAliasLikeExpression: () => ZI, getPropertyNameForPropertyNameNode: () => Df, getPropertyNameForUniqueESSymbol: () => _N, getPropertyNameOfBindingOrAssignmentElement: () => eJ, getPropertySymbolFromBindingElement: () => getPropertySymbolFromBindingElement, getPropertySymbolsFromContextualType: () => x7, getQuoteFromPreference: () => getQuoteFromPreference, getQuotePreference: () => getQuotePreference, getRangesWhere: () => Et, getRefactorContextSpan: () => getRefactorContextSpan, getReferencedFileLocation: () => getReferencedFileLocation, getRegexFromPattern: () => Vf, getRegularExpressionForWildcard: () => Wf, getRegularExpressionsForWildcards: () => pv, getRelativePathFromDirectory: () => JT, getRelativePathFromFile: () => iA, getRelativePathToDirectoryOrUrl: () => uy, getRenameLocation: () => getRenameLocation, getReplacementSpanForContextToken: () => getReplacementSpanForContextToken, getResolutionDiagnostic: () => getResolutionDiagnostic, getResolutionModeOverrideForClause: () => getResolutionModeOverrideForClause, getResolveJsonModule: () => Cx, getResolvePackageJsonExports: () => SM, getResolvePackageJsonImports: () => xM, getResolvedExternalModuleName: () => k4, getResolvedModule: () => hD, getResolvedTypeReferenceDirective: () => vD, getRestIndicatorOfBindingOrAssignmentElement: () => Zj, getRestParameterElementType: () => kk, getRightMostAssignedExpression: () => b0, getRootDeclaration: () => If, getRootLength: () => Bi, getScriptKind: () => getScriptKind, getScriptKindFromFileName: () => Ox, getScriptTargetFeatures: () => getScriptTargetFeatures, getSelectedEffectiveModifierFlags: () => G4, getSelectedSyntacticModifierFlags: () => $4, getSemanticClassifications: () => getSemanticClassifications, getSemanticJsxChildren: () => bN, getSetAccessorTypeAnnotationNode: () => BN, getSetAccessorValueParameter: () => z0, getSetExternalModuleIndicator: () => Ex, getShebang: () => GT, getSingleInitializerOfVariableStatementOrPropertyDeclaration: () => w0, getSingleVariableOfVariableStatement: () => Al, getSnapshotText: () => getSnapshotText, getSnippetElement: () => getSnippetElement, getSourceFileOfModule: () => AD, getSourceFileOfNode: () => Si, getSourceFilePathInNewDir: () => M4, getSourceFilePathInNewDirWorker: () => U0, getSourceFileVersionAsHashFromText: () => getSourceFileVersionAsHashFromText, getSourceFilesToEmit: () => RN, getSourceMapRange: () => getSourceMapRange, getSourceMapper: () => getSourceMapper, getSourceTextOfNodeFromSourceFile: () => No, getSpanOfTokenAtPosition: () => n0, getSpellingSuggestion: () => Ep, getStartPositionOfLine: () => kD, getStartPositionOfRange: () => K_, getStartsOnNewLine: () => getStartsOnNewLine, getStaticPropertiesAndClassStaticBlock: () => getStaticPropertiesAndClassStaticBlock, getStrictOptionValue: () => lv, getStringComparer: () => rl, getSuperCallFromStatement: () => getSuperCallFromStatement, getSuperContainer: () => Yk, getSupportedCodeFixes: () => v7, getSupportedExtensions: () => Mx, getSupportedExtensionsWithJsonIfResolveJsonModule: () => Lx, getSwitchedType: () => getSwitchedType, getSymbolId: () => getSymbolId, getSymbolNameForPrivateIdentifier: () => cN, getSymbolTarget: () => getSymbolTarget, getSyntacticClassifications: () => getSyntacticClassifications, getSyntacticModifierFlags: () => X0, getSyntacticModifierFlagsNoCache: () => Y0, getSynthesizedDeepClone: () => getSynthesizedDeepClone, getSynthesizedDeepCloneWithReplacements: () => getSynthesizedDeepCloneWithReplacements, getSynthesizedDeepClones: () => getSynthesizedDeepClones, getSynthesizedDeepClonesWithReplacements: () => getSynthesizedDeepClonesWithReplacements, getSyntheticLeadingComments: () => getSyntheticLeadingComments, getSyntheticTrailingComments: () => getSyntheticTrailingComments, getTargetLabel: () => getTargetLabel, getTargetOfBindingOrAssignmentElement: () => Ko, getTemporaryModuleResolutionState: () => getTemporaryModuleResolutionState, getTextOfConstantValue: () => HD, getTextOfIdentifierOrLiteral: () => kf, getTextOfJSDocComment: () => zA, getTextOfNode: () => gf, getTextOfNodeFromSourceText: () => B_, getTextOfPropertyName: () => lk, getThisContainer: () => d0, getThisParameter: () => j4, getTokenAtPosition: () => getTokenAtPosition, getTokenPosOfNode: () => Io, getTokenSourceMapRange: () => getTokenSourceMapRange, getTouchingPropertyName: () => getTouchingPropertyName, getTouchingToken: () => getTouchingToken, getTrailingCommentRanges: () => HT, getTrailingSemicolonDeferringWriter: () => kN, getTransformFlagsSubtreeExclusions: () => w8, getTransformers: () => getTransformers, getTsBuildInfoEmitOutputFilePath: () => getTsBuildInfoEmitOutputFilePath, getTsConfigObjectLiteralExpression: () => M3, getTsConfigPropArray: () => L3, getTsConfigPropArrayElementValue: () => Uk, getTypeAnnotationNode: () => UN, getTypeArgumentOrTypeParameterList: () => getTypeArgumentOrTypeParameterList, getTypeKeywordOfTypeOnlyImport: () => getTypeKeywordOfTypeOnlyImport, getTypeNode: () => getTypeNode, getTypeNodeIfAccessible: () => getTypeNodeIfAccessible, getTypeParameterFromJsDoc: () => BI, getTypeParameterOwner: () => AA, getTypesPackageName: () => getTypesPackageName, getUILocale: () => M1, getUniqueName: () => getUniqueName, getUniqueSymbolId: () => getUniqueSymbolId, getUseDefineForClassFields: () => CM, getWatchErrorSummaryDiagnosticMessage: () => getWatchErrorSummaryDiagnosticMessage, getWatchFactory: () => getWatchFactory, group: () => el, groupBy: () => x_, guessIndentation: () => rD, handleNoEmitOptions: () => handleNoEmitOptions, hasAbstractModifier: () => W4, hasAccessorModifier: () => H4, hasAmbientModifier: () => V4, hasChangesInResolutions: () => wD, hasChildOfKind: () => hasChildOfKind, hasContextSensitiveParameters: () => vL, hasDecorators: () => Il, hasDocComment: () => hasDocComment, hasDynamicName: () => v4, hasEffectiveModifier: () => H0, hasEffectiveModifiers: () => XN, hasEffectiveReadonlyModifier: () => $0, hasExtension: () => OT, hasIndexSignature: () => hasIndexSignature, hasInitializer: () => l3, hasInvalidEscape: () => w4, hasJSDocNodes: () => ya, hasJSDocParameterTags: () => IA, hasJSFileExtension: () => dv, hasJsonModuleEmitEnabled: () => hM, hasOnlyExpressionInitializer: () => eD, hasOverrideModifier: () => QN, hasPossibleExternalModuleReference: () => sk, hasProperty: () => Jr, hasPropertyAccessExpressionWithName: () => hasPropertyAccessExpressionWithName, hasQuestionToken: () => OI, hasRecordedExternalHelpers: () => Gj, hasRestParameter: () => nD, hasScopeMarker: () => kP, hasStaticModifier: () => Lf, hasSyntacticModifier: () => rn, hasSyntacticModifiers: () => YN, hasTSFileExtension: () => mv, hasTabstop: () => Qx, hasTrailingDirectorySeparator: () => Hp, hasType: () => ZP, hasTypeArguments: () => qI, hasZeroOrOneAsteriskCharacter: () => OM, helperString: () => helperString, hostGetCanonicalFileName: () => D4, hostUsesCaseSensitiveFileNames: () => J0, idText: () => qr, identifierIsThisKeyword: () => J4, identifierToKeywordKind: () => dS, identity: () => rr, identitySourceMapConsumer: () => identitySourceMapConsumer, ignoreSourceNewlines: () => ignoreSourceNewlines, ignoredPaths: () => ignoredPaths, importDefaultHelper: () => importDefaultHelper, importFromModuleSpecifier: () => II, importNameElisionDisabled: () => gM, importStarHelper: () => importStarHelper, indexOfAnyCharCode: () => Je, indexOfNode: () => UD, indicesOf: () => Wr, inferredTypesContainingFile: () => inferredTypesContainingFile, insertImports: () => insertImports, insertLeadingStatement: () => Mj, insertSorted: () => Qn, insertStatementAfterCustomPrologue: () => RD, insertStatementAfterStandardPrologue: () => LD, insertStatementsAfterCustomPrologue: () => MD, insertStatementsAfterStandardPrologue: () => OD, intersperse: () => Ie, introducesArgumentsExoticObject: () => Lk, inverseJsxOptionMap: () => inverseJsxOptionMap, isAbstractConstructorSymbol: () => zO, isAbstractModifier: () => uR, isAccessExpression: () => Lo, isAccessibilityModifier: () => isAccessibilityModifier, isAccessor: () => pf, isAccessorModifier: () => fR, isAliasSymbolDeclaration: () => QI, isAliasableExpression: () => k0, isAmbientModule: () => yf, isAmbientPropertyDeclaration: () => rk, isAnonymousFunctionDefinition: () => H_, isAnyDirectorySeparator: () => ay, isAnyImportOrBareOrAccessedRequire: () => ik, isAnyImportOrReExport: () => bf, isAnyImportSyntax: () => Qy, isAnySupportedFileExtension: () => ZM, isApplicableVersionedTypesKey: () => isApplicableVersionedTypesKey, isArgumentExpressionOfElementAccess: () => isArgumentExpressionOfElementAccess, isArray: () => ir, isArrayBindingElement: () => gP, isArrayBindingOrAssignmentElement: () => ZS, isArrayBindingOrAssignmentPattern: () => QS, isArrayBindingPattern: () => yR, isArrayLiteralExpression: () => Yl, isArrayLiteralOrObjectLiteralDestructuringPattern: () => isArrayLiteralOrObjectLiteralDestructuringPattern, isArrayTypeNode: () => F8, isArrowFunction: () => sd, isAsExpression: () => CR, isAssertClause: () => $R, isAssertEntry: () => KR, isAssertionExpression: () => PP, isAssertionKey: () => oP, isAssertsKeyword: () => _R, isAssignmentDeclaration: () => v0, isAssignmentExpression: () => ms, isAssignmentOperator: () => G_, isAssignmentPattern: () => KS, isAssignmentTarget: () => UI, isAsteriskToken: () => nR, isAsyncFunction: () => oN, isAsyncModifier: () => Ul, isAutoAccessorPropertyDeclaration: () => $S, isAwaitExpression: () => SR, isAwaitKeyword: () => cR, isBigIntLiteral: () => Uv, isBinaryExpression: () => ur, isBinaryOperatorToken: () => AJ, isBindableObjectDefinePropertyCall: () => S0, isBindableStaticAccessExpression: () => W_, isBindableStaticElementAccessExpression: () => x0, isBindableStaticNameExpression: () => V_, isBindingElement: () => Xl, isBindingElementOfBareOrAccessedRequire: () => mI, isBindingName: () => uP, isBindingOrAssignmentElement: () => yP, isBindingOrAssignmentPattern: () => vP, isBindingPattern: () => df, isBlock: () => Ql, isBlockOrCatchScoped: () => $D, isBlockScope: () => w3, isBlockScopedContainerTopLevel: () => ZD, isBooleanLiteral: () => pP, isBreakOrContinueStatement: () => YA, isBreakStatement: () => JR, isBuildInfoFile: () => isBuildInfoFile, isBuilderProgram: () => isBuilderProgram2, isBundle: () => cj, isBundleFileTextLike: () => XO, isCallChain: () => Cy, isCallExpression: () => sc, isCallExpressionTarget: () => isCallExpressionTarget, isCallLikeExpression: () => SP, isCallOrNewExpression: () => xP, isCallOrNewExpressionTarget: () => isCallOrNewExpressionTarget, isCallSignatureDeclaration: () => Vv, isCallToHelper: () => isCallToHelper, isCaseBlock: () => VR, isCaseClause: () => sj, isCaseKeyword: () => dR, isCaseOrDefaultClause: () => QP, isCatchClause: () => oj, isCatchClauseVariableDeclaration: () => Gx, isCatchClauseVariableDeclarationOrBindingElement: () => T3, isCheckJsEnabledForFile: () => eL, isChildOfNodeWithKind: () => Ak, isCircularBuildOrder: () => isCircularBuildOrder, isClassDeclaration: () => _c, isClassElement: () => Js, isClassExpression: () => _d, isClassLike: () => bi, isClassMemberModifier: () => VS, isClassOrTypeElement: () => mP, isClassStaticBlockDeclaration: () => Hl, isCollapsedRange: () => vO, isColonToken: () => iR, isCommaExpression: () => gd, isCommaListExpression: () => oc, isCommaSequence: () => zj, isCommaToken: () => I8, isComment: () => isComment, isCommonJsExportPropertyAssignment: () => p0, isCommonJsExportedExpression: () => Ok, isCompoundAssignment: () => isCompoundAssignment, isComputedNonLiteralName: () => ck, isComputedPropertyName: () => Ws, isConciseBody: () => MP, isConditionalExpression: () => xR, isConditionalTypeNode: () => V8, isConstTypeReference: () => jS, isConstructSignatureDeclaration: () => R8, isConstructorDeclaration: () => nc, isConstructorTypeNode: () => Gv, isContextualKeyword: () => N0, isContinueStatement: () => jR, isCustomPrologue: () => Tf, isDebuggerStatement: () => WR, isDeclaration: () => ko, isDeclarationBindingElement: () => Fy, isDeclarationFileName: () => QE, isDeclarationName: () => c4, isDeclarationNameOfEnumOrNamespace: () => IO, isDeclarationReadonly: () => Sk, isDeclarationStatement: () => VP, isDeclarationWithTypeParameterChildren: () => C3, isDeclarationWithTypeParameters: () => nk, isDecorator: () => zl, isDecoratorTarget: () => isDecoratorTarget, isDefaultClause: () => oE, isDefaultImport: () => Z3, isDefaultModifier: () => oR, isDefaultedExpandoInitializer: () => SI, isDeleteExpression: () => bR, isDeleteTarget: () => $I, isDeprecatedDeclaration: () => isDeprecatedDeclaration, isDestructuringAssignment: () => nO, isDiagnosticWithLocation: () => isDiagnosticWithLocation, isDiskPathRoot: () => H5, isDoStatement: () => OR, isDotDotDotToken: () => rR, isDottedName: () => ev, isDynamicName: () => M0, isESSymbolIdentifier: () => pN, isEffectiveExternalModule: () => Yy, isEffectiveModuleDeclaration: () => S3, isEffectiveStrictModeSourceFile: () => tk, isElementAccessChain: () => RS, isElementAccessExpression: () => gs, isEmittedFileOfProgram: () => isEmittedFileOfProgram, isEmptyArrayLiteral: () => _O, isEmptyBindingElement: () => pS, isEmptyBindingPattern: () => uS, isEmptyObjectLiteral: () => oO, isEmptyStatement: () => IR, isEmptyStringLiteral: () => j3, isEndOfDeclarationMarker: () => ej, isEntityName: () => lP, isEntityNameExpression: () => Bs, isEnumConst: () => Tk, isEnumDeclaration: () => i22, isEnumMember: () => cE, isEqualityOperatorKind: () => isEqualityOperatorKind, isEqualsGreaterThanToken: () => sR, isExclamationToken: () => rd, isExcludedFile: () => isExcludedFile, isExclusivelyTypeOnlyImportOrExport: () => isExclusivelyTypeOnlyImportOrExport, isExportAssignment: () => Vo, isExportDeclaration: () => cc, isExportModifier: () => N8, isExportName: () => Uj, isExportNamespaceAsDefaultDeclaration: () => b3, isExportOrDefaultModifier: () => DJ, isExportSpecifier: () => aE, isExportsIdentifier: () => H3, isExportsOrModuleExportsOrAlias: () => isExportsOrModuleExportsOrAlias, isExpression: () => mf, isExpressionNode: () => g0, isExpressionOfExternalModuleImportEqualsDeclaration: () => isExpressionOfExternalModuleImportEqualsDeclaration, isExpressionOfOptionalChainRoot: () => $A, isExpressionStatement: () => Zl, isExpressionWithTypeArguments: () => e2, isExpressionWithTypeArgumentsInClassExtendsClause: () => Z0, isExternalModule: () => Qo, isExternalModuleAugmentation: () => Xy, isExternalModuleImportEqualsDeclaration: () => B3, isExternalModuleIndicator: () => NP, isExternalModuleNameRelative: () => gA, isExternalModuleReference: () => ud, isExternalModuleSymbol: () => isExternalModuleSymbol, isExternalOrCommonJsModule: () => bk, isFileLevelUniqueName: () => m3, isFileProbablyExternalModule: () => ou, isFirstDeclarationOfSymbolParameter: () => isFirstDeclarationOfSymbolParameter, isFixablePromiseHandler: () => isFixablePromiseHandler, isForInOrOfStatement: () => OP, isForInStatement: () => LR, isForInitializer: () => RP, isForOfStatement: () => RR, isForStatement: () => eE, isFunctionBlock: () => O3, isFunctionBody: () => LP, isFunctionDeclaration: () => Wo, isFunctionExpression: () => ad, isFunctionExpressionOrArrowFunction: () => SL, isFunctionLike: () => ga, isFunctionLikeDeclaration: () => HS, isFunctionLikeKind: () => My, isFunctionLikeOrClassStaticBlockDeclaration: () => uf, isFunctionOrConstructorTypeNode: () => hP, isFunctionOrModuleBlock: () => fP, isFunctionSymbol: () => DI, isFunctionTypeNode: () => $l, isFutureReservedKeyword: () => tN, isGeneratedIdentifier: () => cs, isGeneratedPrivateIdentifier: () => Ny, isGetAccessor: () => Tl, isGetAccessorDeclaration: () => Gl, isGetOrSetAccessorDeclaration: () => GA, isGlobalDeclaration: () => isGlobalDeclaration, isGlobalScopeAugmentation: () => vf, isGrammarError: () => ND, isHeritageClause: () => ru, isHoistedFunction: () => _0, isHoistedVariableStatement: () => c0, isIdentifier: () => yt, isIdentifierANonContextualKeyword: () => iN, isIdentifierName: () => YI, isIdentifierOrThisTypeNode: () => aJ, isIdentifierPart: () => Rs, isIdentifierStart: () => Wn, isIdentifierText: () => vy, isIdentifierTypePredicate: () => Fk, isIdentifierTypeReference: () => pL, isIfStatement: () => NR, isIgnoredFileFromWildCardWatching: () => isIgnoredFileFromWildCardWatching, isImplicitGlob: () => Dx, isImportCall: () => s0, isImportClause: () => HR, isImportDeclaration: () => o2, isImportEqualsDeclaration: () => s2, isImportKeyword: () => M8, isImportMeta: () => o0, isImportOrExportSpecifier: () => aP, isImportOrExportSpecifierName: () => isImportOrExportSpecifierName, isImportSpecifier: () => nE, isImportTypeAssertionContainer: () => GR, isImportTypeNode: () => Kl, isImportableFile: () => isImportableFile, isInComment: () => isInComment, isInExpressionContext: () => J3, isInJSDoc: () => q3, isInJSFile: () => Pr, isInJSXText: () => isInJSXText, isInJsonFile: () => pI, isInNonReferenceComment: () => isInNonReferenceComment, isInReferenceComment: () => isInReferenceComment, isInRightSideOfInternalImportEqualsDeclaration: () => isInRightSideOfInternalImportEqualsDeclaration, isInString: () => isInString, isInTemplateString: () => isInTemplateString, isInTopLevelContext: () => Kk, isIncrementalCompilation: () => wM, isIndexSignatureDeclaration: () => Hv, isIndexedAccessTypeNode: () => $8, isInferTypeNode: () => H8, isInfinityOrNaNString: () => bL, isInitializedProperty: () => isInitializedProperty, isInitializedVariable: () => lx, isInsideJsxElement: () => isInsideJsxElement, isInsideJsxElementOrAttribute: () => isInsideJsxElementOrAttribute, isInsideNodeModules: () => isInsideNodeModules, isInsideTemplateLiteral: () => isInsideTemplateLiteral, isInstantiatedModule: () => isInstantiatedModule, isInterfaceDeclaration: () => eu, isInternalDeclaration: () => isInternalDeclaration, isInternalModuleImportEqualsDeclaration: () => lI, isInternalName: () => qj, isIntersectionTypeNode: () => W8, isIntrinsicJsxName: () => P4, isIterationStatement: () => n3, isJSDoc: () => Ho, isJSDocAllType: () => dj, isJSDocAugmentsTag: () => md, isJSDocAuthorTag: () => bj, isJSDocCallbackTag: () => Tj, isJSDocClassTag: () => pE, isJSDocCommentContainingNode: () => c3, isJSDocConstructSignature: () => MI, isJSDocDeprecatedTag: () => v2, isJSDocEnumTag: () => dE, isJSDocFunctionType: () => dd, isJSDocImplementsTag: () => hE, isJSDocIndexSignature: () => dI, isJSDocLikeText: () => LE, isJSDocLink: () => uj, isJSDocLinkCode: () => pj, isJSDocLinkLike: () => Sl, isJSDocLinkPlain: () => fj, isJSDocMemberName: () => uc, isJSDocNameReference: () => fd, isJSDocNamepathType: () => vj, isJSDocNamespaceBody: () => FP, isJSDocNode: () => Uy, isJSDocNonNullableType: () => hj, isJSDocNullableType: () => uE, isJSDocOptionalParameter: () => Zx, isJSDocOptionalType: () => gj, isJSDocOverloadTag: () => y2, isJSDocOverrideTag: () => fE, isJSDocParameterTag: () => pc, isJSDocPrivateTag: () => m2, isJSDocPropertyLikeTag: () => Dy, isJSDocPropertyTag: () => wj, isJSDocProtectedTag: () => h22, isJSDocPublicTag: () => d2, isJSDocReadonlyTag: () => g2, isJSDocReturnTag: () => b2, isJSDocSatisfiesExpression: () => IL, isJSDocSatisfiesTag: () => T2, isJSDocSeeTag: () => Sj, isJSDocSignature: () => iu, isJSDocTag: () => zy, isJSDocTemplateTag: () => Go, isJSDocThisTag: () => mE, isJSDocThrowsTag: () => Cj, isJSDocTypeAlias: () => Cl, isJSDocTypeAssertion: () => xE, isJSDocTypeExpression: () => lE, isJSDocTypeLiteral: () => f2, isJSDocTypeTag: () => au, isJSDocTypedefTag: () => xj, isJSDocUnknownTag: () => Ej, isJSDocUnknownType: () => mj, isJSDocVariadicType: () => yj, isJSXTagName: () => xf, isJsonEqual: () => gv, isJsonSourceFile: () => a0, isJsxAttribute: () => nj, isJsxAttributeLike: () => XP, isJsxAttributes: () => p2, isJsxChild: () => o3, isJsxClosingElement: () => sE, isJsxClosingFragment: () => rj, isJsxElement: () => l2, isJsxExpression: () => aj, isJsxFragment: () => pd, isJsxOpeningElement: () => tu, isJsxOpeningFragment: () => u2, isJsxOpeningLikeElement: () => _3, isJsxOpeningLikeElementTagName: () => isJsxOpeningLikeElementTagName, isJsxSelfClosingElement: () => tj, isJsxSpreadAttribute: () => ij, isJsxTagNameExpression: () => KP, isJsxText: () => td, isJumpStatementTarget: () => isJumpStatementTarget, isKeyword: () => ba, isKnownSymbol: () => lN, isLabelName: () => isLabelName, isLabelOfLabeledStatement: () => isLabelOfLabeledStatement, isLabeledStatement: () => tE, isLateVisibilityPaintedStatement: () => ak, isLeftHandSideExpression: () => Do, isLeftHandSideOfAssignment: () => rO, isLet: () => xk, isLineBreak: () => un, isLiteralComputedPropertyDeclarationName: () => l4, isLiteralExpression: () => Iy, isLiteralExpressionOfObject: () => rP, isLiteralImportTypeNode: () => k3, isLiteralKind: () => ky, isLiteralLikeAccess: () => wf, isLiteralLikeElementAccess: () => wl, isLiteralNameOfPropertyDeclarationOrIndexAccess: () => isLiteralNameOfPropertyDeclarationOrIndexAccess, isLiteralTypeLikeExpression: () => cJ, isLiteralTypeLiteral: () => CP, isLiteralTypeNode: () => Yv, isLocalName: () => E2, isLogicalOperator: () => ZN, isLogicalOrCoalescingAssignmentExpression: () => eO, isLogicalOrCoalescingAssignmentOperator: () => jf, isLogicalOrCoalescingBinaryExpression: () => tO, isLogicalOrCoalescingBinaryOperator: () => Z4, isMappedTypeNode: () => K8, isMemberName: () => js, isMergeDeclarationMarker: () => ZR, isMetaProperty: () => t2, isMethodDeclaration: () => Vl, isMethodOrAccessor: () => Ly, isMethodSignature: () => L8, isMinusToken: () => Wv, isMissingDeclaration: () => YR, isModifier: () => Oy, isModifierKind: () => Wi, isModifierLike: () => ff, isModuleAugmentationExternal: () => x3, isModuleBlock: () => rE, isModuleBody: () => jP, isModuleDeclaration: () => Ea, isModuleExportsAccessExpression: () => T0, isModuleIdentifier: () => G3, isModuleName: () => _J, isModuleOrEnumDeclaration: () => qP, isModuleReference: () => $P, isModuleSpecifierLike: () => isModuleSpecifierLike, isModuleWithStringLiteralName: () => KD, isNameOfFunctionDeclaration: () => isNameOfFunctionDeclaration, isNameOfModuleDeclaration: () => isNameOfModuleDeclaration, isNamedClassElement: () => dP, isNamedDeclaration: () => af, isNamedEvaluation: () => fN, isNamedEvaluationSource: () => S4, isNamedExportBindings: () => QA, isNamedExports: () => iE, isNamedImportBindings: () => BP, isNamedImports: () => XR, isNamedImportsOrExports: () => YO, isNamedTupleMember: () => $v, isNamespaceBody: () => JP, isNamespaceExport: () => ld, isNamespaceExportDeclaration: () => a2, isNamespaceImport: () => _2, isNamespaceReexportDeclaration: () => oI, isNewExpression: () => X8, isNewExpressionTarget: () => isNewExpressionTarget, isNightly: () => PN, isNoSubstitutionTemplateLiteral: () => k8, isNode: () => eP, isNodeArray: () => _s, isNodeArrayMultiLine: () => AO, isNodeDescendantOf: () => KI, isNodeKind: () => gl, isNodeLikeSystem: () => M5, isNodeModulesDirectory: () => aA, isNodeWithPossibleHoistedDeclaration: () => zI, isNonContextualKeyword: () => y4, isNonExportDefaultModifier: () => kJ, isNonGlobalAmbientModule: () => XD, isNonGlobalDeclaration: () => isNonGlobalDeclaration, isNonNullAccess: () => kL, isNonNullChain: () => JS, isNonNullExpression: () => Uo, isNonStaticMethodOrAccessorWithPrivateName: () => isNonStaticMethodOrAccessorWithPrivateName, isNotEmittedOrPartiallyEmittedNode: () => DP, isNotEmittedStatement: () => c2, isNullishCoalesce: () => XA, isNumber: () => gi, isNumericLiteral: () => zs, isNumericLiteralName: () => $x, isObjectBindingElementWithoutPropertyName: () => isObjectBindingElementWithoutPropertyName, isObjectBindingOrAssignmentElement: () => YS, isObjectBindingOrAssignmentPattern: () => XS, isObjectBindingPattern: () => gR, isObjectLiteralElement: () => Wy, isObjectLiteralElementLike: () => jy, isObjectLiteralExpression: () => Hs, isObjectLiteralMethod: () => jk, isObjectLiteralOrClassExpressionMethodOrAccessor: () => Jk, isObjectTypeDeclaration: () => $O, isOctalDigit: () => hy, isOmittedExpression: () => cd, isOptionalChain: () => Ay, isOptionalChainRoot: () => Py, isOptionalDeclaration: () => DL, isOptionalJSDocPropertyLikeTag: () => Yx, isOptionalTypeNode: () => q8, isOuterExpression: () => yd, isOutermostOptionalChain: () => KA, isOverrideModifier: () => pR, isPackedArrayLiteral: () => hL, isParameter: () => Vs, isParameterDeclaration: () => mN, isParameterOrCatchClauseVariable: () => TL, isParameterPropertyDeclaration: () => lS, isParameterPropertyModifier: () => WS2, isParenthesizedExpression: () => qo, isParenthesizedTypeNode: () => Kv, isParseTreeNode: () => pl, isPartOfTypeNode: () => l0, isPartOfTypeQuery: () => F3, isPartiallyEmittedExpression: () => Z8, isPatternMatch: () => z1, isPinnedComment: () => v3, isPlainJsFile: () => PD, isPlusToken: () => zv, isPossiblyTypeArgumentPosition: () => isPossiblyTypeArgumentPosition, isPostfixUnaryExpression: () => Q8, isPrefixUnaryExpression: () => od, isPrivateIdentifier: () => vn, isPrivateIdentifierClassElementDeclaration: () => zS, isPrivateIdentifierPropertyAccessExpression: () => cP, isPrivateIdentifierSymbol: () => uN, isProgramBundleEmitBuildInfo: () => isProgramBundleEmitBuildInfo, isProgramUptoDate: () => isProgramUptoDate, isPrologueDirective: () => us, isPropertyAccessChain: () => LS, isPropertyAccessEntityNameExpression: () => rx, isPropertyAccessExpression: () => bn, isPropertyAccessOrQualifiedName: () => TP, isPropertyAccessOrQualifiedNameOrImportTypeNode: () => bP, isPropertyAssignment: () => lc, isPropertyDeclaration: () => Bo, isPropertyName: () => vl, isPropertyNameLiteral: () => L0, isPropertySignature: () => Wl, isProtoSetter: () => T4, isPrototypeAccess: () => Nl, isPrototypePropertyAssignment: () => CI, isPunctuation: () => isPunctuation, isPushOrUnshiftIdentifier: () => dN, isQualifiedName: () => rc, isQuestionDotToken: () => aR, isQuestionOrExclamationToken: () => iJ, isQuestionOrPlusOrMinusToken: () => oJ, isQuestionToken: () => ql, isRawSourceMap: () => isRawSourceMap, isReadonlyKeyword: () => O8, isReadonlyKeywordOrPlusOrMinusToken: () => sJ, isRecognizedTripleSlashComment: () => jD, isReferenceFileLocation: () => isReferenceFileLocation, isReferencedFile: () => isReferencedFile, isRegularExpressionLiteral: () => QL, isRequireCall: () => El, isRequireVariableStatement: () => W3, isRestParameter: () => u3, isRestTypeNode: () => U8, isReturnStatement: () => FR, isReturnStatementWithFixablePromiseHandler: () => isReturnStatementWithFixablePromiseHandler, isRightSideOfAccessExpression: () => nx, isRightSideOfPropertyAccess: () => isRightSideOfPropertyAccess, isRightSideOfQualifiedName: () => isRightSideOfQualifiedName, isRightSideOfQualifiedNameOrPropertyAccess: () => aO, isRightSideOfQualifiedNameOrPropertyAccessOrJSDocMemberName: () => sO, isRootedDiskPath: () => A_, isSameEntityName: () => z_, isSatisfiesExpression: () => AR, isScopeMarker: () => i3, isSemicolonClassElement: () => kR, isSetAccessor: () => bl, isSetAccessorDeclaration: () => ic, isShebangTrivia: () => gy, isShorthandAmbientModuleSymbol: () => YD, isShorthandPropertyAssignment: () => nu, isSignedNumericLiteral: () => O0, isSimpleCopiableExpression: () => isSimpleCopiableExpression, isSimpleInlineableExpression: () => isSimpleInlineableExpression, isSingleOrDoubleQuote: () => hI, isSourceFile: () => wi, isSourceFileFromLibrary: () => isSourceFileFromLibrary, isSourceFileJS: () => y0, isSourceFileNotJS: () => uI, isSourceFileNotJson: () => fI, isSourceMapping: () => isSourceMapping, isSpecialPropertyDeclaration: () => AI, isSpreadAssignment: () => _E, isSpreadElement: () => Zv, isStatement: () => a3, isStatementButNotDeclaration: () => HP, isStatementOrBlock: () => s3, isStatementWithLocals: () => DD, isStatic: () => G0, isStaticModifier: () => lR, isString: () => Ji, isStringAKeyword: () => nN, isStringANonContextualKeyword: () => rN, isStringAndEmptyAnonymousObjectIntersection: () => isStringAndEmptyAnonymousObjectIntersection, isStringDoubleQuoted: () => gI, isStringLiteral: () => Gn, isStringLiteralLike: () => Ti, isStringLiteralOrJsxExpression: () => YP, isStringLiteralOrTemplate: () => isStringLiteralOrTemplate, isStringOrNumericLiteralLike: () => Ta, isStringOrRegularExpressionOrTemplateLiteral: () => isStringOrRegularExpressionOrTemplateLiteral, isStringTextContainingNode: () => _P, isSuperCall: () => Ek, isSuperKeyword: () => nd, isSuperOrSuperProperty: () => Zk, isSuperProperty: () => Sf, isSupportedSourceFileName: () => GM, isSwitchStatement: () => qR, isSyntaxList: () => Aj, isSyntheticExpression: () => PR, isSyntheticReference: () => QR, isTagName: () => isTagName, isTaggedTemplateExpression: () => Y8, isTaggedTemplateTag: () => isTaggedTemplateTag, isTemplateExpression: () => ER, isTemplateHead: () => ZL, isTemplateLiteral: () => EP, isTemplateLiteralKind: () => yl, isTemplateLiteralToken: () => nP, isTemplateLiteralTypeNode: () => hR, isTemplateLiteralTypeSpan: () => mR, isTemplateMiddle: () => eR, isTemplateMiddleOrTemplateTail: () => iP, isTemplateSpan: () => DR, isTemplateTail: () => tR, isTextWhiteSpaceLike: () => isTextWhiteSpaceLike, isThis: () => isThis, isThisContainerOrFunctionBlock: () => $k, isThisIdentifier: () => Mf, isThisInTypeQuery: () => qN, isThisInitializedDeclaration: () => tI, isThisInitializedObjectBindingExpression: () => rI, isThisProperty: () => eI, isThisTypeNode: () => Xv, isThisTypeParameter: () => Kx, isThisTypePredicate: () => Bk, isThrowStatement: () => UR, isToken: () => tP, isTokenKind: () => BS, isTraceEnabled: () => isTraceEnabled, isTransientSymbol: () => $y, isTrivia: () => aN, isTryStatement: () => zR, isTupleTypeNode: () => B8, isTypeAlias: () => LI, isTypeAliasDeclaration: () => n2, isTypeAssertionExpression: () => vR, isTypeDeclaration: () => Xx, isTypeElement: () => Ry, isTypeKeyword: () => isTypeKeyword, isTypeKeywordToken: () => isTypeKeywordToken, isTypeKeywordTokenOrIdentifier: () => isTypeKeywordTokenOrIdentifier, isTypeLiteralNode: () => id, isTypeNode: () => Jy, isTypeNodeKind: () => hx, isTypeOfExpression: () => TR, isTypeOnlyExportDeclaration: () => US, isTypeOnlyImportDeclaration: () => qS, isTypeOnlyImportOrExportDeclaration: () => sP, isTypeOperatorNode: () => G8, isTypeParameterDeclaration: () => Fo, isTypePredicateNode: () => j8, isTypeQueryNode: () => J8, isTypeReferenceNode: () => ac, isTypeReferenceType: () => tD, isUMDExportSymbol: () => VO, isUnaryExpression: () => t3, isUnaryExpressionWithWrite: () => wP, isUnicodeIdentifierStart: () => UT, isUnionTypeNode: () => z8, isUnparsedNode: () => ZA, isUnparsedPrepend: () => _j, isUnparsedSource: () => lj, isUnparsedTextLike: () => FS, isUrl: () => V5, isValidBigIntString: () => zx, isValidESSymbolDeclaration: () => Mk, isValidTypeOnlyAliasUseSite: () => _L, isValueSignatureDeclaration: () => WI, isVarConst: () => D3, isVariableDeclaration: () => Vi, isVariableDeclarationInVariableStatement: () => N3, isVariableDeclarationInitializedToBareOrAccessedRequire: () => Ef, isVariableDeclarationInitializedToRequire: () => U3, isVariableDeclarationList: () => r2, isVariableLike: () => u0, isVariableLikeOrAccessor: () => Nk, isVariableStatement: () => zo, isVoidExpression: () => Qv, isWatchSet: () => OO, isWhileStatement: () => MR, isWhiteSpaceLike: () => os, isWhiteSpaceSingleLine: () => N_, isWithStatement: () => BR, isWriteAccess: () => FO, isWriteOnlyAccess: () => JO, isYieldExpression: () => wR, jsxModeNeedsExplicitImport: () => jsxModeNeedsExplicitImport, keywordPart: () => keywordPart, last: () => Zn, lastOrUndefined: () => Cn, length: () => I, libMap: () => libMap, libs: () => libs, lineBreakPart: () => lineBreakPart, linkNamePart: () => linkNamePart, linkPart: () => linkPart, linkTextPart: () => linkTextPart, listFiles: () => listFiles, loadModuleFromGlobalCache: () => loadModuleFromGlobalCache, loadWithModeAwareCache: () => loadWithModeAwareCache, makeIdentifierFromModuleName: () => GD, makeImport: () => makeImport, makeImportIfNecessary: () => makeImportIfNecessary, makeStringLiteral: () => makeStringLiteral, mangleScopedPackageName: () => mangleScopedPackageName, map: () => Ze, mapAllOrFail: () => Pt, mapDefined: () => qt, mapDefinedEntries: () => Ri, mapDefinedIterator: () => Zr, mapEntries: () => be, mapIterator: () => st, mapOneOrMany: () => mapOneOrMany, mapToDisplayParts: () => mapToDisplayParts, matchFiles: () => qM, matchPatternOrExact: () => tL, matchedText: () => S5, matchesExclude: () => matchesExclude, maybeBind: () => le, maybeSetLocalizedDiagnosticMessages: () => vx, memoize: () => tl, memoizeCached: () => D1, memoizeOne: () => An, memoizeWeak: () => P1, metadataHelper: () => metadataHelper, min: () => N1, minAndMax: () => nL, missingFileModifiedTime: () => missingFileModifiedTime, modifierToFlag: () => Q0, modifiersToFlags: () => Vn, moduleOptionDeclaration: () => moduleOptionDeclaration, moduleResolutionIsEqualTo: () => TD, moduleResolutionNameAndModeGetter: () => moduleResolutionNameAndModeGetter, moduleResolutionOptionDeclarations: () => moduleResolutionOptionDeclarations, moduleResolutionSupportsPackageJsonExportsAndImports: () => _v, moduleResolutionUsesNodeModules: () => moduleResolutionUsesNodeModules, moduleSpecifiers: () => ts_moduleSpecifiers_exports, moveEmitHelpers: () => moveEmitHelpers, moveRangeEnd: () => gO, moveRangePastDecorators: () => _x, moveRangePastModifiers: () => yO, moveRangePos: () => Ff, moveSyntheticComments: () => moveSyntheticComments, mutateMap: () => UO, mutateMapSkippingNewValues: () => fx, needsParentheses: () => needsParentheses, needsScopeMarker: () => IP, newCaseClauseTracker: () => newCaseClauseTracker, newPrivateEnvironment: () => newPrivateEnvironment, noEmitNotification: () => noEmitNotification, noEmitSubstitution: () => noEmitSubstitution, noTransformers: () => noTransformers, noTruncationMaximumTruncationLength: () => n8, nodeCanBeDecorated: () => R3, nodeHasName: () => hS, nodeIsDecorated: () => q_, nodeIsMissing: () => va, nodeIsPresent: () => xl, nodeIsSynthesized: () => fs, nodeModuleNameResolver: () => nodeModuleNameResolver, nodeModulesPathPart: () => nodeModulesPathPart, nodeNextJsonConfigResolver: () => nodeNextJsonConfigResolver, nodeOrChildIsDecorated: () => m0, nodeOverlapsWithStartEnd: () => nodeOverlapsWithStartEnd, nodePosToString: () => ID, nodeSeenTracker: () => nodeSeenTracker, nodeStartsNewLexicalEnvironment: () => hN, nodeToDisplayParts: () => nodeToDisplayParts, noop: () => yn, noopFileWatcher: () => noopFileWatcher, noopPush: () => CT, normalizePath: () => Un, normalizeSlashes: () => Eo, not: () => w5, notImplemented: () => A1, notImplementedResolver: () => notImplementedResolver, nullNodeConverters: () => nullNodeConverters, nullParenthesizerRules: () => Jv, nullTransformationContext: () => nullTransformationContext, objectAllocator: () => lr, operatorPart: () => operatorPart, optionDeclarations: () => optionDeclarations, optionMapToObject: () => optionMapToObject, optionsAffectingProgramStructure: () => optionsAffectingProgramStructure, optionsForBuild: () => optionsForBuild, optionsForWatch: () => optionsForWatch, optionsHaveChanges: () => J_, optionsHaveModuleResolutionChanges: () => p3, or: () => W1, orderedRemoveItem: () => J, orderedRemoveItemAt: () => vT, outFile: () => B0, packageIdToPackageName: () => f3, packageIdToString: () => xD, padLeft: () => D5, padRight: () => k5, paramHelper: () => paramHelper, parameterIsThisKeyword: () => kl, parameterNamePart: () => parameterNamePart, parseBaseNodeFactory: () => I2, parseBigInt: () => oL, parseBuildCommand: () => parseBuildCommand, parseCommandLine: () => parseCommandLine, parseCommandLineWorker: () => parseCommandLineWorker, parseConfigFileTextToJson: () => parseConfigFileTextToJson, parseConfigFileWithSystem: () => parseConfigFileWithSystem, parseConfigHostFromCompilerHostLike: () => parseConfigHostFromCompilerHostLike, parseCustomTypeOption: () => parseCustomTypeOption, parseIsolatedEntityName: () => $J, parseIsolatedJSDocComment: () => XJ, parseJSDocTypeExpressionForTests: () => YJ, parseJsonConfigFileContent: () => parseJsonConfigFileContent, parseJsonSourceFileConfigFileContent: () => parseJsonSourceFileConfigFileContent, parseJsonText: () => KJ, parseListTypeOption: () => parseListTypeOption, parseNodeFactory: () => dc, parseNodeModuleFromPath: () => parseNodeModuleFromPath, parsePackageName: () => parsePackageName, parsePseudoBigInt: () => Hf, parseValidBigInt: () => Ux, patchWriteFileEnsuringDirectory: () => patchWriteFileEnsuringDirectory, pathContainsNodeModules: () => pathContainsNodeModules, pathIsAbsolute: () => sy, pathIsBareSpecifier: () => G5, pathIsRelative: () => So, patternText: () => T5, perfLogger: () => Dp, performIncrementalCompilation: () => performIncrementalCompilation, performance: () => ts_performance_exports, plainJSErrors: () => plainJSErrors, positionBelongsToNode: () => positionBelongsToNode, positionIsASICandidate: () => positionIsASICandidate, positionIsSynthesized: () => hs, positionsAreOnSameLine: () => $_, preProcessFile: () => preProcessFile, probablyUsesSemicolons: () => probablyUsesSemicolons, processCommentPragmas: () => ZE, processPragmasIntoFields: () => e7, processTaggedTemplateExpression: () => processTaggedTemplateExpression, programContainsEsModules: () => programContainsEsModules, programContainsModules: () => programContainsModules, projectReferenceIsEqualTo: () => bD, propKeyHelper: () => propKeyHelper, propertyNamePart: () => propertyNamePart, pseudoBigIntToString: () => yv, punctuationPart: () => punctuationPart, pushIfUnique: () => qn, quote: () => quote, quotePreferenceFromString: () => quotePreferenceFromString, rangeContainsPosition: () => rangeContainsPosition, rangeContainsPositionExclusive: () => rangeContainsPositionExclusive, rangeContainsRange: () => rangeContainsRange, rangeContainsRangeExclusive: () => rangeContainsRangeExclusive, rangeContainsStartEnd: () => rangeContainsStartEnd, rangeEndIsOnSameLineAsRangeStart: () => EO, rangeEndPositionsAreOnSameLine: () => xO, rangeEquals: () => Kc, rangeIsOnSingleLine: () => TO, rangeOfNode: () => iL, rangeOfTypeParameters: () => aL, rangeOverlapsWithStartEnd: () => rangeOverlapsWithStartEnd, rangeStartIsOnSameLineAsRangeEnd: () => cx, rangeStartPositionsAreOnSameLine: () => SO, readBuilderProgram: () => readBuilderProgram, readConfigFile: () => readConfigFile, readHelper: () => readHelper, readJson: () => hO, readJsonConfigFile: () => readJsonConfigFile, readJsonOrUndefined: () => ax, realizeDiagnostics: () => realizeDiagnostics, reduceEachLeadingCommentRange: () => zT, reduceEachTrailingCommentRange: () => WT, reduceLeft: () => Qa, reduceLeftIterator: () => K, reducePathComponents: () => is, refactor: () => ts_refactor_exports, regExpEscape: () => JM, relativeComplement: () => h_, removeAllComments: () => removeAllComments, removeEmitHelper: () => removeEmitHelper, removeExtension: () => Fx, removeFileExtension: () => Ll, removeIgnoredPath: () => removeIgnoredPath, removeMinAndVersionNumbers: () => q1, removeOptionality: () => removeOptionality, removePrefix: () => x5, removeSuffix: () => F1, removeTrailingDirectorySeparator: () => P_, repeatString: () => repeatString, replaceElement: () => ei, resolutionExtensionIsTSOrJson: () => YM, resolveConfigFileProjectName: () => resolveConfigFileProjectName, resolveJSModule: () => resolveJSModule, resolveModuleName: () => resolveModuleName, resolveModuleNameFromCache: () => resolveModuleNameFromCache, resolvePackageNameToPackageJson: () => resolvePackageNameToPackageJson, resolvePath: () => oy, resolveProjectReferencePath: () => resolveProjectReferencePath, resolveTripleslashReference: () => resolveTripleslashReference, resolveTypeReferenceDirective: () => resolveTypeReferenceDirective, resolvingEmptyArray: () => t8, restHelper: () => restHelper, returnFalse: () => w_, returnNoopFileWatcher: () => returnNoopFileWatcher, returnTrue: () => vp, returnUndefined: () => C1, returnsPromise: () => returnsPromise, runInitializersHelper: () => runInitializersHelper, sameFlatMap: () => at, sameMap: () => tt, sameMapping: () => sameMapping, scanShebangTrivia: () => yy, scanTokenAtPosition: () => yk, scanner: () => Zo, screenStartingMessageCodes: () => screenStartingMessageCodes, semanticDiagnosticsOptionDeclarations: () => semanticDiagnosticsOptionDeclarations, serializeCompilerOptions: () => serializeCompilerOptions, server: () => ts_server_exports, servicesVersion: () => E7, setCommentRange: () => setCommentRange, setConfigFileInOptions: () => setConfigFileInOptions, setConstantValue: () => setConstantValue, setEachParent: () => Q_, setEmitFlags: () => setEmitFlags, setFunctionNameHelper: () => setFunctionNameHelper, setGetSourceFileAsHashVersioned: () => setGetSourceFileAsHashVersioned, setIdentifierAutoGenerate: () => setIdentifierAutoGenerate, setIdentifierGeneratedImportReference: () => setIdentifierGeneratedImportReference, setIdentifierTypeArguments: () => setIdentifierTypeArguments, setInternalEmitFlags: () => setInternalEmitFlags, setLocalizedDiagnosticMessages: () => yx, setModuleDefaultHelper: () => setModuleDefaultHelper, setNodeFlags: () => dL, setObjectAllocator: () => gx, setOriginalNode: () => Dn, setParent: () => Sa, setParentRecursive: () => Vx, setPrivateIdentifier: () => setPrivateIdentifier, setResolvedModule: () => gD, setResolvedTypeReferenceDirective: () => yD, setSnippetElement: () => setSnippetElement, setSourceMapRange: () => setSourceMapRange, setStackTraceLimit: () => setStackTraceLimit, setStartsOnNewLine: () => setStartsOnNewLine, setSyntheticLeadingComments: () => setSyntheticLeadingComments, setSyntheticTrailingComments: () => setSyntheticTrailingComments, setSys: () => setSys, setSysLog: () => setSysLog, setTextRange: () => Rt, setTextRangeEnd: () => Wx, setTextRangePos: () => Gf, setTextRangePosEnd: () => Us, setTextRangePosWidth: () => $f, setTokenSourceMapRange: () => setTokenSourceMapRange, setTypeNode: () => setTypeNode, setUILocale: () => xp, setValueDeclaration: () => PI, shouldAllowImportingTsExtension: () => shouldAllowImportingTsExtension, shouldPreserveConstEnums: () => EM, shouldUseUriStyleNodeCoreModules: () => shouldUseUriStyleNodeCoreModules, showModuleSpecifier: () => HO, signatureHasLiteralTypes: () => signatureHasLiteralTypes, signatureHasRestParameter: () => signatureHasRestParameter, signatureToDisplayParts: () => signatureToDisplayParts, single: () => Yc, singleElementArray: () => Cp, singleIterator: () => Ka, singleOrMany: () => mo, singleOrUndefined: () => Xa, skipAlias: () => RO, skipAssertions: () => Hj, skipConstraint: () => skipConstraint, skipOuterExpressions: () => $o, skipParentheses: () => Pl, skipPartiallyEmittedExpressions: () => lf, skipTrivia: () => Ar, skipTypeChecking: () => sL, skipTypeParentheses: () => GI, skipWhile: () => N5, sliceAfter: () => rL, some: () => Ke, sort: () => Is, sortAndDeduplicate: () => uo, sortAndDeduplicateDiagnostics: () => yA, sourceFileAffectingCompilerOptions: () => sourceFileAffectingCompilerOptions, sourceFileMayBeEmitted: () => q0, sourceMapCommentRegExp: () => sourceMapCommentRegExp, sourceMapCommentRegExpDontCareLineStart: () => sourceMapCommentRegExpDontCareLineStart, spacePart: () => spacePart, spanMap: () => co, spreadArrayHelper: () => spreadArrayHelper, stableSort: () => Ns, startEndContainsRange: () => startEndContainsRange, startEndOverlapsWithStartEnd: () => startEndOverlapsWithStartEnd, startOnNewLine: () => vd, startTracing: () => startTracing, startsWith: () => Pn, startsWithDirectory: () => rA, startsWithUnderscore: () => startsWithUnderscore, startsWithUseStrict: () => SE, stringContains: () => Fi, stringContainsAt: () => stringContainsAt, stringToToken: () => _l, stripQuotes: () => CN, supportedDeclarationExtensions: () => Rv, supportedJSExtensions: () => Mv, supportedJSExtensionsFlat: () => Lv, supportedLocaleDirectories: () => Hy, supportedTSExtensions: () => Jo, supportedTSExtensionsFlat: () => Ov, supportedTSImplementationExtensions: () => b8, suppressLeadingAndTrailingTrivia: () => suppressLeadingAndTrailingTrivia, suppressLeadingTrivia: () => suppressLeadingTrivia, suppressTrailingTrivia: () => suppressTrailingTrivia, symbolEscapedNameNoDefault: () => symbolEscapedNameNoDefault, symbolName: () => rf, symbolNameNoDefault: () => symbolNameNoDefault, symbolPart: () => symbolPart, symbolToDisplayParts: () => symbolToDisplayParts, syntaxMayBeASICandidate: () => syntaxMayBeASICandidate, syntaxRequiresTrailingSemicolonOrASI: () => syntaxRequiresTrailingSemicolonOrASI, sys: () => iy, sysLog: () => sysLog, tagNamesAreEquivalent: () => Hi, takeWhile: () => I5, targetOptionDeclaration: () => targetOptionDeclaration, templateObjectHelper: () => templateObjectHelper, testFormatSettings: () => testFormatSettings, textChangeRangeIsUnchanged: () => cS, textChangeRangeNewSpan: () => R_, textChanges: () => ts_textChanges_exports, textOrKeywordPart: () => textOrKeywordPart, textPart: () => textPart, textRangeContainsPositionInclusive: () => bA, textSpanContainsPosition: () => vA, textSpanContainsTextSpan: () => TA, textSpanEnd: () => Ir, textSpanIntersection: () => _S, textSpanIntersectsWith: () => EA, textSpanIntersectsWithPosition: () => wA, textSpanIntersectsWithTextSpan: () => xA, textSpanIsEmpty: () => sS, textSpanOverlap: () => oS, textSpanOverlapsWith: () => SA, textSpansEqual: () => textSpansEqual, textToKeywordObj: () => cl, timestamp: () => ts, toArray: () => en, toBuilderFileEmit: () => toBuilderFileEmit, toBuilderStateFileInfoForMultiEmit: () => toBuilderStateFileInfoForMultiEmit, toEditorSettings: () => lu, toFileNameLowerCase: () => Tp, toLowerCase: () => bp, toPath: () => Ui, toProgramEmitPending: () => toProgramEmitPending, tokenIsIdentifierOrKeyword: () => fr, tokenIsIdentifierOrKeywordOrGreaterThan: () => qT, tokenToString: () => Br, trace: () => trace, tracing: () => rs, tracingEnabled: () => tracingEnabled, transform: () => transform, transformClassFields: () => transformClassFields, transformDeclarations: () => transformDeclarations, transformECMAScriptModule: () => transformECMAScriptModule, transformES2015: () => transformES2015, transformES2016: () => transformES2016, transformES2017: () => transformES2017, transformES2018: () => transformES2018, transformES2019: () => transformES2019, transformES2020: () => transformES2020, transformES2021: () => transformES2021, transformES5: () => transformES5, transformESDecorators: () => transformESDecorators, transformESNext: () => transformESNext, transformGenerators: () => transformGenerators, transformJsx: () => transformJsx, transformLegacyDecorators: () => transformLegacyDecorators, transformModule: () => transformModule, transformNodeModule: () => transformNodeModule, transformNodes: () => transformNodes, transformSystemModule: () => transformSystemModule, transformTypeScript: () => transformTypeScript, transpile: () => transpile, transpileModule: () => transpileModule, transpileOptionValueCompilerOptions: () => transpileOptionValueCompilerOptions, trimString: () => Pp, trimStringEnd: () => X1, trimStringStart: () => nl, tryAddToSet: () => ua, tryAndIgnoreErrors: () => tryAndIgnoreErrors, tryCast: () => ln, tryDirectoryExists: () => tryDirectoryExists, tryExtractTSExtension: () => uO, tryFileExists: () => tryFileExists, tryGetClassExtendingExpressionWithTypeArguments: () => ex, tryGetClassImplementingOrExtendingExpressionWithTypeArguments: () => tx, tryGetDirectories: () => tryGetDirectories, tryGetExtensionFromPath: () => hv, tryGetImportFromModuleSpecifier: () => Y3, tryGetJSDocSatisfiesTypeNode: () => e8, tryGetModuleNameFromFile: () => CE, tryGetModuleSpecifierFromDeclaration: () => kI, tryGetNativePerformanceHooks: () => J5, tryGetPropertyAccessOrIdentifierToString: () => tv, tryGetPropertyNameOfBindingOrAssignmentElement: () => PE, tryGetSourceMappingURL: () => tryGetSourceMappingURL, tryGetTextOfPropertyName: () => e0, tryIOAndConsumeErrors: () => tryIOAndConsumeErrors, tryParsePattern: () => Bx, tryParsePatterns: () => XM, tryParseRawSourceMap: () => tryParseRawSourceMap, tryReadDirectory: () => tryReadDirectory, tryReadFile: () => tryReadFile, tryRemoveDirectoryPrefix: () => jM, tryRemoveExtension: () => Jx, tryRemovePrefix: () => ST, tryRemoveSuffix: () => B1, typeAcquisitionDeclarations: () => typeAcquisitionDeclarations, typeAliasNamePart: () => typeAliasNamePart, typeDirectiveIsEqualTo: () => ED, typeKeywords: () => typeKeywords, typeParameterNamePart: () => typeParameterNamePart, typeReferenceResolutionNameAndModeGetter: () => typeReferenceResolutionNameAndModeGetter, typeToDisplayParts: () => typeToDisplayParts, unchangedPollThresholds: () => unchangedPollThresholds, unchangedTextChangeRange: () => Vy, unescapeLeadingUnderscores: () => dl, unmangleScopedPackageName: () => unmangleScopedPackageName, unorderedRemoveItem: () => bT, unorderedRemoveItemAt: () => U1, unreachableCodeIsError: () => yM, unusedLabelIsError: () => vM, unwrapInnermostStatementOfLabel: () => Rk, updateErrorForNoInputFiles: () => updateErrorForNoInputFiles, updateLanguageServiceSourceFile: () => T7, updateMissingFilePathsWatch: () => updateMissingFilePathsWatch, updatePackageJsonWatch: () => updatePackageJsonWatch, updateResolutionField: () => updateResolutionField, updateSharedExtendedConfigFileWatcher: () => updateSharedExtendedConfigFileWatcher, updateSourceFile: () => k2, updateWatchingWildcardDirectories: () => updateWatchingWildcardDirectories, usesExtensionsOnImports: () => Rx, usingSingleLineStringWriter: () => mD, utf16EncodeAsString: () => by, validateLocaleAndSetLanguage: () => DA, valuesHelper: () => valuesHelper, version: () => C, versionMajorMinor: () => m, visitArray: () => visitArray, visitCommaListElements: () => visitCommaListElements, visitEachChild: () => visitEachChild, visitFunctionBody: () => visitFunctionBody, visitIterationBody: () => visitIterationBody, visitLexicalEnvironment: () => visitLexicalEnvironment, visitNode: () => visitNode, visitNodes: () => visitNodes2, visitParameterList: () => visitParameterList, walkUpBindingElementsAndPatterns: () => fS, walkUpLexicalEnvironments: () => walkUpLexicalEnvironments, walkUpOuterExpressions: () => Vj, walkUpParenthesizedExpressions: () => D0, walkUpParenthesizedTypes: () => VI, walkUpParenthesizedTypesAndGetParentAndChild: () => HI, whitespaceOrMapCommentRegExp: () => whitespaceOrMapCommentRegExp, writeCommentRange: () => $N, writeFile: () => jN, writeFileEnsuringDirectories: () => JN, zipToModeAwareCache: () => zipToModeAwareCache, zipWith: () => ce });
        var R7 = D({ "src/typescript/_namespaces/ts.ts"() {
          nn(), L2();
        } }), BB = P({ "src/typescript/typescript.ts"(e, t) {
          R7(), R7(), typeof console < "u" && (Y.loggingHost = { log(r, s) {
            switch (r) {
              case 1:
                return console.error(s);
              case 2:
                return console.warn(s);
              case 3:
                return console.log(s);
              case 4:
                return console.log(s);
            }
          } }), t.exports = L7;
        } });
        _.exports = BB();
      } }), DW = Oe({ "src/language-js/parse/postprocess/typescript.js"(a, _) {
        De();
        var v = F9(), h2 = q9(), D = U9(), P = { AbstractKeyword: 126, SourceFile: 308, PropertyDeclaration: 169 };
        function y(c) {
          for (; c && c.kind !== P.SourceFile; )
            c = c.parent;
          return c;
        }
        function m(c, M) {
          let q = y(c), [W, K] = [c.getStart(), c.end].map((ce) => {
            let { line: Ie, character: me } = q.getLineAndCharacterOfPosition(ce);
            return { line: Ie + 1, column: me };
          });
          D({ loc: { start: W, end: K } }, M);
        }
        function C(c) {
          let M = vr();
          return [true, false].some((q) => M.nodeCanBeDecorated(q, c, c.parent, c.parent.parent));
        }
        function d(c) {
          let { modifiers: M } = c;
          if (!v(M))
            return;
          let q = vr(), { SyntaxKind: W } = q;
          for (let K of M)
            q.isDecorator(K) && !C(c) && (c.kind === W.MethodDeclaration && !q.nodeIsPresent(c.body) && m(K, "A decorator can only decorate a method implementation, not an overload."), m(K, "Decorators are not valid here."));
        }
        function E(c, M) {
          c.kind !== P.PropertyDeclaration || c.modifiers && !c.modifiers.some((q) => q.kind === P.AbstractKeyword) || c.initializer && M.value === null && D(M, "Abstract property cannot have an initializer");
        }
        function I(c, M) {
          if (!/@|abstract/.test(M.originalText))
            return;
          let { esTreeNodeToTSNodeMap: q, tsNodeToESTreeNodeMap: W } = c;
          h2(c.ast, (K) => {
            let ce = q.get(K);
            if (!ce)
              return;
            let Ie = W.get(ce);
            Ie === K && (d(ce), E(ce, Ie));
          });
        }
        _.exports = { throwErrorForInvalidNodes: I };
      } }), Ga = Oe({ "scripts/build/shims/debug.cjs"(a, _) {
        De(), _.exports = () => () => {
        };
      } }), h1 = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/internal/constants.js"(a, _) {
        De();
        var v = "2.0.0", h2 = 256, D = Number.MAX_SAFE_INTEGER || 9007199254740991, P = 16;
        _.exports = { SEMVER_SPEC_VERSION: v, MAX_LENGTH: h2, MAX_SAFE_INTEGER: D, MAX_SAFE_COMPONENT_LENGTH: P };
      } }), g1 = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/internal/debug.js"(a, _) {
        De();
        var v = typeof cn == "object" && cn.env && cn.env.NODE_DEBUG && /\bsemver\b/i.test(cn.env.NODE_DEBUG) ? function() {
          for (var h2 = arguments.length, D = new Array(h2), P = 0; P < h2; P++)
            D[P] = arguments[P];
          return console.error("SEMVER", ...D);
        } : () => {
        };
        _.exports = v;
      } }), Bc = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/internal/re.js"(a, _) {
        De();
        var { MAX_SAFE_COMPONENT_LENGTH: v } = h1(), h2 = g1();
        a = _.exports = {};
        var D = a.re = [], P = a.src = [], y = a.t = {}, m = 0, C = (d, E, I) => {
          let c = m++;
          h2(d, c, E), y[d] = c, P[c] = E, D[c] = new RegExp(E, I ? "g" : void 0);
        };
        C("NUMERICIDENTIFIER", "0|[1-9]\\d*"), C("NUMERICIDENTIFIERLOOSE", "[0-9]+"), C("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*"), C("MAINVERSION", `(${P[y.NUMERICIDENTIFIER]})\\.(${P[y.NUMERICIDENTIFIER]})\\.(${P[y.NUMERICIDENTIFIER]})`), C("MAINVERSIONLOOSE", `(${P[y.NUMERICIDENTIFIERLOOSE]})\\.(${P[y.NUMERICIDENTIFIERLOOSE]})\\.(${P[y.NUMERICIDENTIFIERLOOSE]})`), C("PRERELEASEIDENTIFIER", `(?:${P[y.NUMERICIDENTIFIER]}|${P[y.NONNUMERICIDENTIFIER]})`), C("PRERELEASEIDENTIFIERLOOSE", `(?:${P[y.NUMERICIDENTIFIERLOOSE]}|${P[y.NONNUMERICIDENTIFIER]})`), C("PRERELEASE", `(?:-(${P[y.PRERELEASEIDENTIFIER]}(?:\\.${P[y.PRERELEASEIDENTIFIER]})*))`), C("PRERELEASELOOSE", `(?:-?(${P[y.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${P[y.PRERELEASEIDENTIFIERLOOSE]})*))`), C("BUILDIDENTIFIER", "[0-9A-Za-z-]+"), C("BUILD", `(?:\\+(${P[y.BUILDIDENTIFIER]}(?:\\.${P[y.BUILDIDENTIFIER]})*))`), C("FULLPLAIN", `v?${P[y.MAINVERSION]}${P[y.PRERELEASE]}?${P[y.BUILD]}?`), C("FULL", `^${P[y.FULLPLAIN]}$`), C("LOOSEPLAIN", `[v=\\s]*${P[y.MAINVERSIONLOOSE]}${P[y.PRERELEASELOOSE]}?${P[y.BUILD]}?`), C("LOOSE", `^${P[y.LOOSEPLAIN]}$`), C("GTLT", "((?:<|>)?=?)"), C("XRANGEIDENTIFIERLOOSE", `${P[y.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`), C("XRANGEIDENTIFIER", `${P[y.NUMERICIDENTIFIER]}|x|X|\\*`), C("XRANGEPLAIN", `[v=\\s]*(${P[y.XRANGEIDENTIFIER]})(?:\\.(${P[y.XRANGEIDENTIFIER]})(?:\\.(${P[y.XRANGEIDENTIFIER]})(?:${P[y.PRERELEASE]})?${P[y.BUILD]}?)?)?`), C("XRANGEPLAINLOOSE", `[v=\\s]*(${P[y.XRANGEIDENTIFIERLOOSE]})(?:\\.(${P[y.XRANGEIDENTIFIERLOOSE]})(?:\\.(${P[y.XRANGEIDENTIFIERLOOSE]})(?:${P[y.PRERELEASELOOSE]})?${P[y.BUILD]}?)?)?`), C("XRANGE", `^${P[y.GTLT]}\\s*${P[y.XRANGEPLAIN]}$`), C("XRANGELOOSE", `^${P[y.GTLT]}\\s*${P[y.XRANGEPLAINLOOSE]}$`), C("COERCE", `(^|[^\\d])(\\d{1,${v}})(?:\\.(\\d{1,${v}}))?(?:\\.(\\d{1,${v}}))?(?:$|[^\\d])`), C("COERCERTL", P[y.COERCE], true), C("LONETILDE", "(?:~>?)"), C("TILDETRIM", `(\\s*)${P[y.LONETILDE]}\\s+`, true), a.tildeTrimReplace = "$1~", C("TILDE", `^${P[y.LONETILDE]}${P[y.XRANGEPLAIN]}$`), C("TILDELOOSE", `^${P[y.LONETILDE]}${P[y.XRANGEPLAINLOOSE]}$`), C("LONECARET", "(?:\\^)"), C("CARETTRIM", `(\\s*)${P[y.LONECARET]}\\s+`, true), a.caretTrimReplace = "$1^", C("CARET", `^${P[y.LONECARET]}${P[y.XRANGEPLAIN]}$`), C("CARETLOOSE", `^${P[y.LONECARET]}${P[y.XRANGEPLAINLOOSE]}$`), C("COMPARATORLOOSE", `^${P[y.GTLT]}\\s*(${P[y.LOOSEPLAIN]})$|^$`), C("COMPARATOR", `^${P[y.GTLT]}\\s*(${P[y.FULLPLAIN]})$|^$`), C("COMPARATORTRIM", `(\\s*)${P[y.GTLT]}\\s*(${P[y.LOOSEPLAIN]}|${P[y.XRANGEPLAIN]})`, true), a.comparatorTrimReplace = "$1$2$3", C("HYPHENRANGE", `^\\s*(${P[y.XRANGEPLAIN]})\\s+-\\s+(${P[y.XRANGEPLAIN]})\\s*$`), C("HYPHENRANGELOOSE", `^\\s*(${P[y.XRANGEPLAINLOOSE]})\\s+-\\s+(${P[y.XRANGEPLAINLOOSE]})\\s*$`), C("STAR", "(<|>)?=?\\s*\\*"), C("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$"), C("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
      } }), y1 = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/internal/parse-options.js"(a, _) {
        De();
        var v = ["includePrerelease", "loose", "rtl"], h2 = (D) => D ? typeof D != "object" ? { loose: true } : v.filter((P) => D[P]).reduce((P, y) => (P[y] = true, P), {}) : {};
        _.exports = h2;
      } }), z9 = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/internal/identifiers.js"(a, _) {
        De();
        var v = /^[0-9]+$/, h2 = (P, y) => {
          let m = v.test(P), C = v.test(y);
          return m && C && (P = +P, y = +y), P === y ? 0 : m && !C ? -1 : C && !m ? 1 : P < y ? -1 : 1;
        }, D = (P, y) => h2(y, P);
        _.exports = { compareIdentifiers: h2, rcompareIdentifiers: D };
      } }), Bn = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/classes/semver.js"(a, _) {
        De();
        var v = g1(), { MAX_LENGTH: h2, MAX_SAFE_INTEGER: D } = h1(), { re: P, t: y } = Bc(), m = y1(), { compareIdentifiers: C } = z9(), d = class {
          constructor(E, I) {
            if (I = m(I), E instanceof d) {
              if (E.loose === !!I.loose && E.includePrerelease === !!I.includePrerelease)
                return E;
              E = E.version;
            } else if (typeof E != "string")
              throw new TypeError(`Invalid Version: ${E}`);
            if (E.length > h2)
              throw new TypeError(`version is longer than ${h2} characters`);
            v("SemVer", E, I), this.options = I, this.loose = !!I.loose, this.includePrerelease = !!I.includePrerelease;
            let c = E.trim().match(I.loose ? P[y.LOOSE] : P[y.FULL]);
            if (!c)
              throw new TypeError(`Invalid Version: ${E}`);
            if (this.raw = E, this.major = +c[1], this.minor = +c[2], this.patch = +c[3], this.major > D || this.major < 0)
              throw new TypeError("Invalid major version");
            if (this.minor > D || this.minor < 0)
              throw new TypeError("Invalid minor version");
            if (this.patch > D || this.patch < 0)
              throw new TypeError("Invalid patch version");
            c[4] ? this.prerelease = c[4].split(".").map((M) => {
              if (/^[0-9]+$/.test(M)) {
                let q = +M;
                if (q >= 0 && q < D)
                  return q;
              }
              return M;
            }) : this.prerelease = [], this.build = c[5] ? c[5].split(".") : [], this.format();
          }
          format() {
            return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
          }
          toString() {
            return this.version;
          }
          compare(E) {
            if (v("SemVer.compare", this.version, this.options, E), !(E instanceof d)) {
              if (typeof E == "string" && E === this.version)
                return 0;
              E = new d(E, this.options);
            }
            return E.version === this.version ? 0 : this.compareMain(E) || this.comparePre(E);
          }
          compareMain(E) {
            return E instanceof d || (E = new d(E, this.options)), C(this.major, E.major) || C(this.minor, E.minor) || C(this.patch, E.patch);
          }
          comparePre(E) {
            if (E instanceof d || (E = new d(E, this.options)), this.prerelease.length && !E.prerelease.length)
              return -1;
            if (!this.prerelease.length && E.prerelease.length)
              return 1;
            if (!this.prerelease.length && !E.prerelease.length)
              return 0;
            let I = 0;
            do {
              let c = this.prerelease[I], M = E.prerelease[I];
              if (v("prerelease compare", I, c, M), c === void 0 && M === void 0)
                return 0;
              if (M === void 0)
                return 1;
              if (c === void 0)
                return -1;
              if (c === M)
                continue;
              return C(c, M);
            } while (++I);
          }
          compareBuild(E) {
            E instanceof d || (E = new d(E, this.options));
            let I = 0;
            do {
              let c = this.build[I], M = E.build[I];
              if (v("prerelease compare", I, c, M), c === void 0 && M === void 0)
                return 0;
              if (M === void 0)
                return 1;
              if (c === void 0)
                return -1;
              if (c === M)
                continue;
              return C(c, M);
            } while (++I);
          }
          inc(E, I) {
            switch (E) {
              case "premajor":
                this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", I);
                break;
              case "preminor":
                this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", I);
                break;
              case "prepatch":
                this.prerelease.length = 0, this.inc("patch", I), this.inc("pre", I);
                break;
              case "prerelease":
                this.prerelease.length === 0 && this.inc("patch", I), this.inc("pre", I);
                break;
              case "major":
                (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) && this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
                break;
              case "minor":
                (this.patch !== 0 || this.prerelease.length === 0) && this.minor++, this.patch = 0, this.prerelease = [];
                break;
              case "patch":
                this.prerelease.length === 0 && this.patch++, this.prerelease = [];
                break;
              case "pre":
                if (this.prerelease.length === 0)
                  this.prerelease = [0];
                else {
                  let c = this.prerelease.length;
                  for (; --c >= 0; )
                    typeof this.prerelease[c] == "number" && (this.prerelease[c]++, c = -2);
                  c === -1 && this.prerelease.push(0);
                }
                I && (C(this.prerelease[0], I) === 0 ? isNaN(this.prerelease[1]) && (this.prerelease = [I, 0]) : this.prerelease = [I, 0]);
                break;
              default:
                throw new Error(`invalid increment argument: ${E}`);
            }
            return this.format(), this.raw = this.version, this;
          }
        };
        _.exports = d;
      } }), qc = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/parse.js"(a, _) {
        De();
        var { MAX_LENGTH: v } = h1(), { re: h2, t: D } = Bc(), P = Bn(), y = y1(), m = (C, d) => {
          if (d = y(d), C instanceof P)
            return C;
          if (typeof C != "string" || C.length > v || !(d.loose ? h2[D.LOOSE] : h2[D.FULL]).test(C))
            return null;
          try {
            return new P(C, d);
          } catch {
            return null;
          }
        };
        _.exports = m;
      } }), kW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/valid.js"(a, _) {
        De();
        var v = qc(), h2 = (D, P) => {
          let y = v(D, P);
          return y ? y.version : null;
        };
        _.exports = h2;
      } }), IW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/clean.js"(a, _) {
        De();
        var v = qc(), h2 = (D, P) => {
          let y = v(D.trim().replace(/^[=v]+/, ""), P);
          return y ? y.version : null;
        };
        _.exports = h2;
      } }), NW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/inc.js"(a, _) {
        De();
        var v = Bn(), h2 = (D, P, y, m) => {
          typeof y == "string" && (m = y, y = void 0);
          try {
            return new v(D instanceof v ? D.version : D, y).inc(P, m).version;
          } catch {
            return null;
          }
        };
        _.exports = h2;
      } }), _a = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/compare.js"(a, _) {
        De();
        var v = Bn(), h2 = (D, P, y) => new v(D, y).compare(new v(P, y));
        _.exports = h2;
      } }), sT = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/eq.js"(a, _) {
        De();
        var v = _a(), h2 = (D, P, y) => v(D, P, y) === 0;
        _.exports = h2;
      } }), OW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/diff.js"(a, _) {
        De();
        var v = qc(), h2 = sT(), D = (P, y) => {
          if (h2(P, y))
            return null;
          {
            let m = v(P), C = v(y), d = m.prerelease.length || C.prerelease.length, E = d ? "pre" : "", I = d ? "prerelease" : "";
            for (let c in m)
              if ((c === "major" || c === "minor" || c === "patch") && m[c] !== C[c])
                return E + c;
            return I;
          }
        };
        _.exports = D;
      } }), MW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/major.js"(a, _) {
        De();
        var v = Bn(), h2 = (D, P) => new v(D, P).major;
        _.exports = h2;
      } }), LW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/minor.js"(a, _) {
        De();
        var v = Bn(), h2 = (D, P) => new v(D, P).minor;
        _.exports = h2;
      } }), RW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/patch.js"(a, _) {
        De();
        var v = Bn(), h2 = (D, P) => new v(D, P).patch;
        _.exports = h2;
      } }), jW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/prerelease.js"(a, _) {
        De();
        var v = qc(), h2 = (D, P) => {
          let y = v(D, P);
          return y && y.prerelease.length ? y.prerelease : null;
        };
        _.exports = h2;
      } }), JW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/rcompare.js"(a, _) {
        De();
        var v = _a(), h2 = (D, P, y) => v(P, D, y);
        _.exports = h2;
      } }), FW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/compare-loose.js"(a, _) {
        De();
        var v = _a(), h2 = (D, P) => v(D, P, true);
        _.exports = h2;
      } }), oT = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/compare-build.js"(a, _) {
        De();
        var v = Bn(), h2 = (D, P, y) => {
          let m = new v(D, y), C = new v(P, y);
          return m.compare(C) || m.compareBuild(C);
        };
        _.exports = h2;
      } }), BW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/sort.js"(a, _) {
        De();
        var v = oT(), h2 = (D, P) => D.sort((y, m) => v(y, m, P));
        _.exports = h2;
      } }), qW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/rsort.js"(a, _) {
        De();
        var v = oT(), h2 = (D, P) => D.sort((y, m) => v(m, y, P));
        _.exports = h2;
      } }), v1 = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/gt.js"(a, _) {
        De();
        var v = _a(), h2 = (D, P, y) => v(D, P, y) > 0;
        _.exports = h2;
      } }), _T = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/lt.js"(a, _) {
        De();
        var v = _a(), h2 = (D, P, y) => v(D, P, y) < 0;
        _.exports = h2;
      } }), W9 = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/neq.js"(a, _) {
        De();
        var v = _a(), h2 = (D, P, y) => v(D, P, y) !== 0;
        _.exports = h2;
      } }), cT = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/gte.js"(a, _) {
        De();
        var v = _a(), h2 = (D, P, y) => v(D, P, y) >= 0;
        _.exports = h2;
      } }), lT = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/lte.js"(a, _) {
        De();
        var v = _a(), h2 = (D, P, y) => v(D, P, y) <= 0;
        _.exports = h2;
      } }), V9 = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/cmp.js"(a, _) {
        De();
        var v = sT(), h2 = W9(), D = v1(), P = cT(), y = _T(), m = lT(), C = (d, E, I, c) => {
          switch (E) {
            case "===":
              return typeof d == "object" && (d = d.version), typeof I == "object" && (I = I.version), d === I;
            case "!==":
              return typeof d == "object" && (d = d.version), typeof I == "object" && (I = I.version), d !== I;
            case "":
            case "=":
            case "==":
              return v(d, I, c);
            case "!=":
              return h2(d, I, c);
            case ">":
              return D(d, I, c);
            case ">=":
              return P(d, I, c);
            case "<":
              return y(d, I, c);
            case "<=":
              return m(d, I, c);
            default:
              throw new TypeError(`Invalid operator: ${E}`);
          }
        };
        _.exports = C;
      } }), UW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/coerce.js"(a, _) {
        De();
        var v = Bn(), h2 = qc(), { re: D, t: P } = Bc(), y = (m, C) => {
          if (m instanceof v)
            return m;
          if (typeof m == "number" && (m = String(m)), typeof m != "string")
            return null;
          C = C || {};
          let d = null;
          if (!C.rtl)
            d = m.match(D[P.COERCE]);
          else {
            let E;
            for (; (E = D[P.COERCERTL].exec(m)) && (!d || d.index + d[0].length !== m.length); )
              (!d || E.index + E[0].length !== d.index + d[0].length) && (d = E), D[P.COERCERTL].lastIndex = E.index + E[1].length + E[2].length;
            D[P.COERCERTL].lastIndex = -1;
          }
          return d === null ? null : h2(`${d[2]}.${d[3] || "0"}.${d[4] || "0"}`, C);
        };
        _.exports = y;
      } }), zW = Oe({ "node_modules/yallist/iterator.js"(a, _) {
        De(), _.exports = function(v) {
          v.prototype[Symbol.iterator] = function* () {
            for (let h2 = this.head; h2; h2 = h2.next)
              yield h2.value;
          };
        };
      } }), WW = Oe({ "node_modules/yallist/yallist.js"(a, _) {
        De(), _.exports = v, v.Node = y, v.create = v;
        function v(m) {
          var C = this;
          if (C instanceof v || (C = new v()), C.tail = null, C.head = null, C.length = 0, m && typeof m.forEach == "function")
            m.forEach(function(I) {
              C.push(I);
            });
          else if (arguments.length > 0)
            for (var d = 0, E = arguments.length; d < E; d++)
              C.push(arguments[d]);
          return C;
        }
        v.prototype.removeNode = function(m) {
          if (m.list !== this)
            throw new Error("removing node which does not belong to this list");
          var C = m.next, d = m.prev;
          return C && (C.prev = d), d && (d.next = C), m === this.head && (this.head = C), m === this.tail && (this.tail = d), m.list.length--, m.next = null, m.prev = null, m.list = null, C;
        }, v.prototype.unshiftNode = function(m) {
          if (m !== this.head) {
            m.list && m.list.removeNode(m);
            var C = this.head;
            m.list = this, m.next = C, C && (C.prev = m), this.head = m, this.tail || (this.tail = m), this.length++;
          }
        }, v.prototype.pushNode = function(m) {
          if (m !== this.tail) {
            m.list && m.list.removeNode(m);
            var C = this.tail;
            m.list = this, m.prev = C, C && (C.next = m), this.tail = m, this.head || (this.head = m), this.length++;
          }
        }, v.prototype.push = function() {
          for (var m = 0, C = arguments.length; m < C; m++)
            D(this, arguments[m]);
          return this.length;
        }, v.prototype.unshift = function() {
          for (var m = 0, C = arguments.length; m < C; m++)
            P(this, arguments[m]);
          return this.length;
        }, v.prototype.pop = function() {
          if (this.tail) {
            var m = this.tail.value;
            return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, m;
          }
        }, v.prototype.shift = function() {
          if (this.head) {
            var m = this.head.value;
            return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, m;
          }
        }, v.prototype.forEach = function(m, C) {
          C = C || this;
          for (var d = this.head, E = 0; d !== null; E++)
            m.call(C, d.value, E, this), d = d.next;
        }, v.prototype.forEachReverse = function(m, C) {
          C = C || this;
          for (var d = this.tail, E = this.length - 1; d !== null; E--)
            m.call(C, d.value, E, this), d = d.prev;
        }, v.prototype.get = function(m) {
          for (var C = 0, d = this.head; d !== null && C < m; C++)
            d = d.next;
          if (C === m && d !== null)
            return d.value;
        }, v.prototype.getReverse = function(m) {
          for (var C = 0, d = this.tail; d !== null && C < m; C++)
            d = d.prev;
          if (C === m && d !== null)
            return d.value;
        }, v.prototype.map = function(m, C) {
          C = C || this;
          for (var d = new v(), E = this.head; E !== null; )
            d.push(m.call(C, E.value, this)), E = E.next;
          return d;
        }, v.prototype.mapReverse = function(m, C) {
          C = C || this;
          for (var d = new v(), E = this.tail; E !== null; )
            d.push(m.call(C, E.value, this)), E = E.prev;
          return d;
        }, v.prototype.reduce = function(m, C) {
          var d, E = this.head;
          if (arguments.length > 1)
            d = C;
          else if (this.head)
            E = this.head.next, d = this.head.value;
          else
            throw new TypeError("Reduce of empty list with no initial value");
          for (var I = 0; E !== null; I++)
            d = m(d, E.value, I), E = E.next;
          return d;
        }, v.prototype.reduceReverse = function(m, C) {
          var d, E = this.tail;
          if (arguments.length > 1)
            d = C;
          else if (this.tail)
            E = this.tail.prev, d = this.tail.value;
          else
            throw new TypeError("Reduce of empty list with no initial value");
          for (var I = this.length - 1; E !== null; I--)
            d = m(d, E.value, I), E = E.prev;
          return d;
        }, v.prototype.toArray = function() {
          for (var m = new Array(this.length), C = 0, d = this.head; d !== null; C++)
            m[C] = d.value, d = d.next;
          return m;
        }, v.prototype.toArrayReverse = function() {
          for (var m = new Array(this.length), C = 0, d = this.tail; d !== null; C++)
            m[C] = d.value, d = d.prev;
          return m;
        }, v.prototype.slice = function(m, C) {
          C = C || this.length, C < 0 && (C += this.length), m = m || 0, m < 0 && (m += this.length);
          var d = new v();
          if (C < m || C < 0)
            return d;
          m < 0 && (m = 0), C > this.length && (C = this.length);
          for (var E = 0, I = this.head; I !== null && E < m; E++)
            I = I.next;
          for (; I !== null && E < C; E++, I = I.next)
            d.push(I.value);
          return d;
        }, v.prototype.sliceReverse = function(m, C) {
          C = C || this.length, C < 0 && (C += this.length), m = m || 0, m < 0 && (m += this.length);
          var d = new v();
          if (C < m || C < 0)
            return d;
          m < 0 && (m = 0), C > this.length && (C = this.length);
          for (var E = this.length, I = this.tail; I !== null && E > C; E--)
            I = I.prev;
          for (; I !== null && E > m; E--, I = I.prev)
            d.push(I.value);
          return d;
        }, v.prototype.splice = function(m, C) {
          m > this.length && (m = this.length - 1), m < 0 && (m = this.length + m);
          for (var d = 0, E = this.head; E !== null && d < m; d++)
            E = E.next;
          for (var I = [], d = 0; E && d < C; d++)
            I.push(E.value), E = this.removeNode(E);
          E === null && (E = this.tail), E !== this.head && E !== this.tail && (E = E.prev);
          for (var d = 0; d < (arguments.length <= 2 ? 0 : arguments.length - 2); d++)
            E = h2(this, E, d + 2 < 2 || arguments.length <= d + 2 ? void 0 : arguments[d + 2]);
          return I;
        }, v.prototype.reverse = function() {
          for (var m = this.head, C = this.tail, d = m; d !== null; d = d.prev) {
            var E = d.prev;
            d.prev = d.next, d.next = E;
          }
          return this.head = C, this.tail = m, this;
        };
        function h2(m, C, d) {
          var E = C === m.head ? new y(d, null, C, m) : new y(d, C, C.next, m);
          return E.next === null && (m.tail = E), E.prev === null && (m.head = E), m.length++, E;
        }
        function D(m, C) {
          m.tail = new y(C, m.tail, null, m), m.head || (m.head = m.tail), m.length++;
        }
        function P(m, C) {
          m.head = new y(C, null, m.head, m), m.tail || (m.tail = m.head), m.length++;
        }
        function y(m, C, d, E) {
          if (!(this instanceof y))
            return new y(m, C, d, E);
          this.list = E, this.value = m, C ? (C.next = this, this.prev = C) : this.prev = null, d ? (d.prev = this, this.next = d) : this.next = null;
        }
        try {
          zW()(v);
        } catch {
        }
      } }), VW = Oe({ "node_modules/lru-cache/index.js"(a, _) {
        De();
        var v = WW(), h2 = Symbol("max"), D = Symbol("length"), P = Symbol("lengthCalculator"), y = Symbol("allowStale"), m = Symbol("maxAge"), C = Symbol("dispose"), d = Symbol("noDisposeOnSet"), E = Symbol("lruList"), I = Symbol("cache"), c = Symbol("updateAgeOnGet"), M = () => 1, q = class {
          constructor(te) {
            if (typeof te == "number" && (te = { max: te }), te || (te = {}), te.max && (typeof te.max != "number" || te.max < 0))
              throw new TypeError("max must be a non-negative number");
            this[h2] = te.max || 1 / 0;
            let Pe = te.length || M;
            if (this[P] = typeof Pe != "function" ? M : Pe, this[y] = te.stale || false, te.maxAge && typeof te.maxAge != "number")
              throw new TypeError("maxAge must be a number");
            this[m] = te.maxAge || 0, this[C] = te.dispose, this[d] = te.noDisposeOnSet || false, this[c] = te.updateAgeOnGet || false, this.reset();
          }
          set max(te) {
            if (typeof te != "number" || te < 0)
              throw new TypeError("max must be a non-negative number");
            this[h2] = te || 1 / 0, ce(this);
          }
          get max() {
            return this[h2];
          }
          set allowStale(te) {
            this[y] = !!te;
          }
          get allowStale() {
            return this[y];
          }
          set maxAge(te) {
            if (typeof te != "number")
              throw new TypeError("maxAge must be a non-negative number");
            this[m] = te, ce(this);
          }
          get maxAge() {
            return this[m];
          }
          set lengthCalculator(te) {
            typeof te != "function" && (te = M), te !== this[P] && (this[P] = te, this[D] = 0, this[E].forEach((he) => {
              he.length = this[P](he.value, he.key), this[D] += he.length;
            })), ce(this);
          }
          get lengthCalculator() {
            return this[P];
          }
          get length() {
            return this[D];
          }
          get itemCount() {
            return this[E].length;
          }
          rforEach(te, he) {
            he = he || this;
            for (let Pe = this[E].tail; Pe !== null; ) {
              let R = Pe.prev;
              Ae(this, te, Pe, he), Pe = R;
            }
          }
          forEach(te, he) {
            he = he || this;
            for (let Pe = this[E].head; Pe !== null; ) {
              let R = Pe.next;
              Ae(this, te, Pe, he), Pe = R;
            }
          }
          keys() {
            return this[E].toArray().map((te) => te.key);
          }
          values() {
            return this[E].toArray().map((te) => te.value);
          }
          reset() {
            this[C] && this[E] && this[E].length && this[E].forEach((te) => this[C](te.key, te.value)), this[I] = /* @__PURE__ */ new Map(), this[E] = new v(), this[D] = 0;
          }
          dump() {
            return this[E].map((te) => K(this, te) ? false : { k: te.key, v: te.value, e: te.now + (te.maxAge || 0) }).toArray().filter((te) => te);
          }
          dumpLru() {
            return this[E];
          }
          set(te, he, Pe) {
            if (Pe = Pe || this[m], Pe && typeof Pe != "number")
              throw new TypeError("maxAge must be a number");
            let R = Pe ? Date.now() : 0, pe = this[P](he, te);
            if (this[I].has(te)) {
              if (pe > this[h2])
                return Ie(this, this[I].get(te)), false;
              let Xe = this[I].get(te).value;
              return this[C] && (this[d] || this[C](te, Xe.value)), Xe.now = R, Xe.maxAge = Pe, Xe.value = he, this[D] += pe - Xe.length, Xe.length = pe, this.get(te), ce(this), true;
            }
            let ke = new me(te, he, pe, R, Pe);
            return ke.length > this[h2] ? (this[C] && this[C](te, he), false) : (this[D] += ke.length, this[E].unshift(ke), this[I].set(te, this[E].head), ce(this), true);
          }
          has(te) {
            if (!this[I].has(te))
              return false;
            let he = this[I].get(te).value;
            return !K(this, he);
          }
          get(te) {
            return W(this, te, true);
          }
          peek(te) {
            return W(this, te, false);
          }
          pop() {
            let te = this[E].tail;
            return te ? (Ie(this, te), te.value) : null;
          }
          del(te) {
            Ie(this, this[I].get(te));
          }
          load(te) {
            this.reset();
            let he = Date.now();
            for (let Pe = te.length - 1; Pe >= 0; Pe--) {
              let R = te[Pe], pe = R.e || 0;
              if (pe === 0)
                this.set(R.k, R.v);
              else {
                let ke = pe - he;
                ke > 0 && this.set(R.k, R.v, ke);
              }
            }
          }
          prune() {
            this[I].forEach((te, he) => W(this, he, false));
          }
        }, W = (te, he, Pe) => {
          let R = te[I].get(he);
          if (R) {
            let pe = R.value;
            if (K(te, pe)) {
              if (Ie(te, R), !te[y])
                return;
            } else
              Pe && (te[c] && (R.value.now = Date.now()), te[E].unshiftNode(R));
            return pe.value;
          }
        }, K = (te, he) => {
          if (!he || !he.maxAge && !te[m])
            return false;
          let Pe = Date.now() - he.now;
          return he.maxAge ? Pe > he.maxAge : te[m] && Pe > te[m];
        }, ce = (te) => {
          if (te[D] > te[h2])
            for (let he = te[E].tail; te[D] > te[h2] && he !== null; ) {
              let Pe = he.prev;
              Ie(te, he), he = Pe;
            }
        }, Ie = (te, he) => {
          if (he) {
            let Pe = he.value;
            te[C] && te[C](Pe.key, Pe.value), te[D] -= Pe.length, te[I].delete(Pe.key), te[E].removeNode(he);
          }
        }, me = class {
          constructor(te, he, Pe, R, pe) {
            this.key = te, this.value = he, this.length = Pe, this.now = R, this.maxAge = pe || 0;
          }
        }, Ae = (te, he, Pe, R) => {
          let pe = Pe.value;
          K(te, pe) && (Ie(te, Pe), te[y] || (pe = void 0)), pe && he.call(R, pe.value, pe.key, te);
        };
        _.exports = q;
      } }), ca = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/classes/range.js"(a, _) {
        De();
        var v = class {
          constructor(ee, je) {
            if (je = P(je), ee instanceof v)
              return ee.loose === !!je.loose && ee.includePrerelease === !!je.includePrerelease ? ee : new v(ee.raw, je);
            if (ee instanceof y)
              return this.raw = ee.value, this.set = [[ee]], this.format(), this;
            if (this.options = je, this.loose = !!je.loose, this.includePrerelease = !!je.includePrerelease, this.raw = ee, this.set = ee.split("||").map((nt) => this.parseRange(nt.trim())).filter((nt) => nt.length), !this.set.length)
              throw new TypeError(`Invalid SemVer Range: ${ee}`);
            if (this.set.length > 1) {
              let nt = this.set[0];
              if (this.set = this.set.filter((Ze) => !q(Ze[0])), this.set.length === 0)
                this.set = [nt];
              else if (this.set.length > 1) {
                for (let Ze of this.set)
                  if (Ze.length === 1 && W(Ze[0])) {
                    this.set = [Ze];
                    break;
                  }
              }
            }
            this.format();
          }
          format() {
            return this.range = this.set.map((ee) => ee.join(" ").trim()).join("||").trim(), this.range;
          }
          toString() {
            return this.range;
          }
          parseRange(ee) {
            ee = ee.trim();
            let nt = `parseRange:${Object.keys(this.options).join(",")}:${ee}`, Ze = D.get(nt);
            if (Ze)
              return Ze;
            let st = this.options.loose, tt = st ? d[E.HYPHENRANGELOOSE] : d[E.HYPHENRANGE];
            ee = ee.replace(tt, Je(this.options.includePrerelease)), m("hyphen replace", ee), ee = ee.replace(d[E.COMPARATORTRIM], I), m("comparator trim", ee), ee = ee.replace(d[E.TILDETRIM], c), ee = ee.replace(d[E.CARETTRIM], M), ee = ee.split(/\s+/).join(" ");
            let ct = ee.split(" ").map((at) => ce(at, this.options)).join(" ").split(/\s+/).map((at) => ke(at, this.options));
            st && (ct = ct.filter((at) => (m("loose invalid filter", at, this.options), !!at.match(d[E.COMPARATORLOOSE])))), m("range list", ct);
            let ne = /* @__PURE__ */ new Map(), ge = ct.map((at) => new y(at, this.options));
            for (let at of ge) {
              if (q(at))
                return [at];
              ne.set(at.value, at);
            }
            ne.size > 1 && ne.has("") && ne.delete("");
            let Fe = [...ne.values()];
            return D.set(nt, Fe), Fe;
          }
          intersects(ee, je) {
            if (!(ee instanceof v))
              throw new TypeError("a Range is required");
            return this.set.some((nt) => K(nt, je) && ee.set.some((Ze) => K(Ze, je) && nt.every((st) => Ze.every((tt) => st.intersects(tt, je)))));
          }
          test(ee) {
            if (!ee)
              return false;
            if (typeof ee == "string")
              try {
                ee = new C(ee, this.options);
              } catch {
                return false;
              }
            for (let je = 0; je < this.set.length; je++)
              if (Xe(this.set[je], ee, this.options))
                return true;
            return false;
          }
        };
        _.exports = v;
        var h2 = VW(), D = new h2({ max: 1e3 }), P = y1(), y = b1(), m = g1(), C = Bn(), { re: d, t: E, comparatorTrimReplace: I, tildeTrimReplace: c, caretTrimReplace: M } = Bc(), q = (ee) => ee.value === "<0.0.0-0", W = (ee) => ee.value === "", K = (ee, je) => {
          let nt = true, Ze = ee.slice(), st = Ze.pop();
          for (; nt && Ze.length; )
            nt = Ze.every((tt) => st.intersects(tt, je)), st = Ze.pop();
          return nt;
        }, ce = (ee, je) => (m("comp", ee, je), ee = te(ee, je), m("caret", ee), ee = me(ee, je), m("tildes", ee), ee = Pe(ee, je), m("xrange", ee), ee = pe(ee, je), m("stars", ee), ee), Ie = (ee) => !ee || ee.toLowerCase() === "x" || ee === "*", me = (ee, je) => ee.trim().split(/\s+/).map((nt) => Ae(nt, je)).join(" "), Ae = (ee, je) => {
          let nt = je.loose ? d[E.TILDELOOSE] : d[E.TILDE];
          return ee.replace(nt, (Ze, st, tt, ct, ne) => {
            m("tilde", ee, Ze, st, tt, ct, ne);
            let ge;
            return Ie(st) ? ge = "" : Ie(tt) ? ge = `>=${st}.0.0 <${+st + 1}.0.0-0` : Ie(ct) ? ge = `>=${st}.${tt}.0 <${st}.${+tt + 1}.0-0` : ne ? (m("replaceTilde pr", ne), ge = `>=${st}.${tt}.${ct}-${ne} <${st}.${+tt + 1}.0-0`) : ge = `>=${st}.${tt}.${ct} <${st}.${+tt + 1}.0-0`, m("tilde return", ge), ge;
          });
        }, te = (ee, je) => ee.trim().split(/\s+/).map((nt) => he(nt, je)).join(" "), he = (ee, je) => {
          m("caret", ee, je);
          let nt = je.loose ? d[E.CARETLOOSE] : d[E.CARET], Ze = je.includePrerelease ? "-0" : "";
          return ee.replace(nt, (st, tt, ct, ne, ge) => {
            m("caret", ee, st, tt, ct, ne, ge);
            let Fe;
            return Ie(tt) ? Fe = "" : Ie(ct) ? Fe = `>=${tt}.0.0${Ze} <${+tt + 1}.0.0-0` : Ie(ne) ? tt === "0" ? Fe = `>=${tt}.${ct}.0${Ze} <${tt}.${+ct + 1}.0-0` : Fe = `>=${tt}.${ct}.0${Ze} <${+tt + 1}.0.0-0` : ge ? (m("replaceCaret pr", ge), tt === "0" ? ct === "0" ? Fe = `>=${tt}.${ct}.${ne}-${ge} <${tt}.${ct}.${+ne + 1}-0` : Fe = `>=${tt}.${ct}.${ne}-${ge} <${tt}.${+ct + 1}.0-0` : Fe = `>=${tt}.${ct}.${ne}-${ge} <${+tt + 1}.0.0-0`) : (m("no pr"), tt === "0" ? ct === "0" ? Fe = `>=${tt}.${ct}.${ne}${Ze} <${tt}.${ct}.${+ne + 1}-0` : Fe = `>=${tt}.${ct}.${ne}${Ze} <${tt}.${+ct + 1}.0-0` : Fe = `>=${tt}.${ct}.${ne} <${+tt + 1}.0.0-0`), m("caret return", Fe), Fe;
          });
        }, Pe = (ee, je) => (m("replaceXRanges", ee, je), ee.split(/\s+/).map((nt) => R(nt, je)).join(" ")), R = (ee, je) => {
          ee = ee.trim();
          let nt = je.loose ? d[E.XRANGELOOSE] : d[E.XRANGE];
          return ee.replace(nt, (Ze, st, tt, ct, ne, ge) => {
            m("xRange", ee, Ze, st, tt, ct, ne, ge);
            let Fe = Ie(tt), at = Fe || Ie(ct), Pt = at || Ie(ne), qt = Pt;
            return st === "=" && qt && (st = ""), ge = je.includePrerelease ? "-0" : "", Fe ? st === ">" || st === "<" ? Ze = "<0.0.0-0" : Ze = "*" : st && qt ? (at && (ct = 0), ne = 0, st === ">" ? (st = ">=", at ? (tt = +tt + 1, ct = 0, ne = 0) : (ct = +ct + 1, ne = 0)) : st === "<=" && (st = "<", at ? tt = +tt + 1 : ct = +ct + 1), st === "<" && (ge = "-0"), Ze = `${st + tt}.${ct}.${ne}${ge}`) : at ? Ze = `>=${tt}.0.0${ge} <${+tt + 1}.0.0-0` : Pt && (Ze = `>=${tt}.${ct}.0${ge} <${tt}.${+ct + 1}.0-0`), m("xRange return", Ze), Ze;
          });
        }, pe = (ee, je) => (m("replaceStars", ee, je), ee.trim().replace(d[E.STAR], "")), ke = (ee, je) => (m("replaceGTE0", ee, je), ee.trim().replace(d[je.includePrerelease ? E.GTE0PRE : E.GTE0], "")), Je = (ee) => (je, nt, Ze, st, tt, ct, ne, ge, Fe, at, Pt, qt, Zr) => (Ie(Ze) ? nt = "" : Ie(st) ? nt = `>=${Ze}.0.0${ee ? "-0" : ""}` : Ie(tt) ? nt = `>=${Ze}.${st}.0${ee ? "-0" : ""}` : ct ? nt = `>=${nt}` : nt = `>=${nt}${ee ? "-0" : ""}`, Ie(Fe) ? ge = "" : Ie(at) ? ge = `<${+Fe + 1}.0.0-0` : Ie(Pt) ? ge = `<${Fe}.${+at + 1}.0-0` : qt ? ge = `<=${Fe}.${at}.${Pt}-${qt}` : ee ? ge = `<${Fe}.${at}.${+Pt + 1}-0` : ge = `<=${ge}`, `${nt} ${ge}`.trim()), Xe = (ee, je, nt) => {
          for (let Ze = 0; Ze < ee.length; Ze++)
            if (!ee[Ze].test(je))
              return false;
          if (je.prerelease.length && !nt.includePrerelease) {
            for (let Ze = 0; Ze < ee.length; Ze++)
              if (m(ee[Ze].semver), ee[Ze].semver !== y.ANY && ee[Ze].semver.prerelease.length > 0) {
                let st = ee[Ze].semver;
                if (st.major === je.major && st.minor === je.minor && st.patch === je.patch)
                  return true;
              }
            return false;
          }
          return true;
        };
      } }), b1 = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/classes/comparator.js"(a, _) {
        De();
        var v = Symbol("SemVer ANY"), h2 = class {
          static get ANY() {
            return v;
          }
          constructor(I, c) {
            if (c = D(c), I instanceof h2) {
              if (I.loose === !!c.loose)
                return I;
              I = I.value;
            }
            C("comparator", I, c), this.options = c, this.loose = !!c.loose, this.parse(I), this.semver === v ? this.value = "" : this.value = this.operator + this.semver.version, C("comp", this);
          }
          parse(I) {
            let c = this.options.loose ? P[y.COMPARATORLOOSE] : P[y.COMPARATOR], M = I.match(c);
            if (!M)
              throw new TypeError(`Invalid comparator: ${I}`);
            this.operator = M[1] !== void 0 ? M[1] : "", this.operator === "=" && (this.operator = ""), M[2] ? this.semver = new d(M[2], this.options.loose) : this.semver = v;
          }
          toString() {
            return this.value;
          }
          test(I) {
            if (C("Comparator.test", I, this.options.loose), this.semver === v || I === v)
              return true;
            if (typeof I == "string")
              try {
                I = new d(I, this.options);
              } catch {
                return false;
              }
            return m(I, this.operator, this.semver, this.options);
          }
          intersects(I, c) {
            if (!(I instanceof h2))
              throw new TypeError("a Comparator is required");
            if ((!c || typeof c != "object") && (c = { loose: !!c, includePrerelease: false }), this.operator === "")
              return this.value === "" ? true : new E(I.value, c).test(this.value);
            if (I.operator === "")
              return I.value === "" ? true : new E(this.value, c).test(I.semver);
            let M = (this.operator === ">=" || this.operator === ">") && (I.operator === ">=" || I.operator === ">"), q = (this.operator === "<=" || this.operator === "<") && (I.operator === "<=" || I.operator === "<"), W = this.semver.version === I.semver.version, K = (this.operator === ">=" || this.operator === "<=") && (I.operator === ">=" || I.operator === "<="), ce = m(this.semver, "<", I.semver, c) && (this.operator === ">=" || this.operator === ">") && (I.operator === "<=" || I.operator === "<"), Ie = m(this.semver, ">", I.semver, c) && (this.operator === "<=" || this.operator === "<") && (I.operator === ">=" || I.operator === ">");
            return M || q || W && K || ce || Ie;
          }
        };
        _.exports = h2;
        var D = y1(), { re: P, t: y } = Bc(), m = V9(), C = g1(), d = Bn(), E = ca();
      } }), T1 = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/functions/satisfies.js"(a, _) {
        De();
        var v = ca(), h2 = (D, P, y) => {
          try {
            P = new v(P, y);
          } catch {
            return false;
          }
          return P.test(D);
        };
        _.exports = h2;
      } }), HW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/ranges/to-comparators.js"(a, _) {
        De();
        var v = ca(), h2 = (D, P) => new v(D, P).set.map((y) => y.map((m) => m.value).join(" ").trim().split(" "));
        _.exports = h2;
      } }), GW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/ranges/max-satisfying.js"(a, _) {
        De();
        var v = Bn(), h2 = ca(), D = (P, y, m) => {
          let C = null, d = null, E = null;
          try {
            E = new h2(y, m);
          } catch {
            return null;
          }
          return P.forEach((I) => {
            E.test(I) && (!C || d.compare(I) === -1) && (C = I, d = new v(C, m));
          }), C;
        };
        _.exports = D;
      } }), $W = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/ranges/min-satisfying.js"(a, _) {
        De();
        var v = Bn(), h2 = ca(), D = (P, y, m) => {
          let C = null, d = null, E = null;
          try {
            E = new h2(y, m);
          } catch {
            return null;
          }
          return P.forEach((I) => {
            E.test(I) && (!C || d.compare(I) === 1) && (C = I, d = new v(C, m));
          }), C;
        };
        _.exports = D;
      } }), KW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/ranges/min-version.js"(a, _) {
        De();
        var v = Bn(), h2 = ca(), D = v1(), P = (y, m) => {
          y = new h2(y, m);
          let C = new v("0.0.0");
          if (y.test(C) || (C = new v("0.0.0-0"), y.test(C)))
            return C;
          C = null;
          for (let d = 0; d < y.set.length; ++d) {
            let E = y.set[d], I = null;
            E.forEach((c) => {
              let M = new v(c.semver.version);
              switch (c.operator) {
                case ">":
                  M.prerelease.length === 0 ? M.patch++ : M.prerelease.push(0), M.raw = M.format();
                case "":
                case ">=":
                  (!I || D(M, I)) && (I = M);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error(`Unexpected operation: ${c.operator}`);
              }
            }), I && (!C || D(C, I)) && (C = I);
          }
          return C && y.test(C) ? C : null;
        };
        _.exports = P;
      } }), XW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/ranges/valid.js"(a, _) {
        De();
        var v = ca(), h2 = (D, P) => {
          try {
            return new v(D, P).range || "*";
          } catch {
            return null;
          }
        };
        _.exports = h2;
      } }), uT = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/ranges/outside.js"(a, _) {
        De();
        var v = Bn(), h2 = b1(), { ANY: D } = h2, P = ca(), y = T1(), m = v1(), C = _T(), d = lT(), E = cT(), I = (c, M, q, W) => {
          c = new v(c, W), M = new P(M, W);
          let K, ce, Ie, me, Ae;
          switch (q) {
            case ">":
              K = m, ce = d, Ie = C, me = ">", Ae = ">=";
              break;
            case "<":
              K = C, ce = E, Ie = m, me = "<", Ae = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (y(c, M, W))
            return false;
          for (let te = 0; te < M.set.length; ++te) {
            let he = M.set[te], Pe = null, R = null;
            if (he.forEach((pe) => {
              pe.semver === D && (pe = new h2(">=0.0.0")), Pe = Pe || pe, R = R || pe, K(pe.semver, Pe.semver, W) ? Pe = pe : Ie(pe.semver, R.semver, W) && (R = pe);
            }), Pe.operator === me || Pe.operator === Ae || (!R.operator || R.operator === me) && ce(c, R.semver))
              return false;
            if (R.operator === Ae && Ie(c, R.semver))
              return false;
          }
          return true;
        };
        _.exports = I;
      } }), YW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/ranges/gtr.js"(a, _) {
        De();
        var v = uT(), h2 = (D, P, y) => v(D, P, ">", y);
        _.exports = h2;
      } }), QW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/ranges/ltr.js"(a, _) {
        De();
        var v = uT(), h2 = (D, P, y) => v(D, P, "<", y);
        _.exports = h2;
      } }), ZW = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/ranges/intersects.js"(a, _) {
        De();
        var v = ca(), h2 = (D, P, y) => (D = new v(D, y), P = new v(P, y), D.intersects(P));
        _.exports = h2;
      } }), eV = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/ranges/simplify.js"(a, _) {
        De();
        var v = T1(), h2 = _a();
        _.exports = (D, P, y) => {
          let m = [], C = null, d = null, E = D.sort((q, W) => h2(q, W, y));
          for (let q of E)
            v(q, P, y) ? (d = q, C || (C = q)) : (d && m.push([C, d]), d = null, C = null);
          C && m.push([C, null]);
          let I = [];
          for (let [q, W] of m)
            q === W ? I.push(q) : !W && q === E[0] ? I.push("*") : W ? q === E[0] ? I.push(`<=${W}`) : I.push(`${q} - ${W}`) : I.push(`>=${q}`);
          let c = I.join(" || "), M = typeof P.raw == "string" ? P.raw : String(P);
          return c.length < M.length ? c : P;
        };
      } }), tV = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/ranges/subset.js"(a, _) {
        De();
        var v = ca(), h2 = b1(), { ANY: D } = h2, P = T1(), y = _a(), m = function(I, c) {
          let M = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          if (I === c)
            return true;
          I = new v(I, M), c = new v(c, M);
          let q = false;
          e:
            for (let W of I.set) {
              for (let K of c.set) {
                let ce = C(W, K, M);
                if (q = q || ce !== null, ce)
                  continue e;
              }
              if (q)
                return false;
            }
          return true;
        }, C = (I, c, M) => {
          if (I === c)
            return true;
          if (I.length === 1 && I[0].semver === D) {
            if (c.length === 1 && c[0].semver === D)
              return true;
            M.includePrerelease ? I = [new h2(">=0.0.0-0")] : I = [new h2(">=0.0.0")];
          }
          if (c.length === 1 && c[0].semver === D) {
            if (M.includePrerelease)
              return true;
            c = [new h2(">=0.0.0")];
          }
          let q = /* @__PURE__ */ new Set(), W, K;
          for (let R of I)
            R.operator === ">" || R.operator === ">=" ? W = d(W, R, M) : R.operator === "<" || R.operator === "<=" ? K = E(K, R, M) : q.add(R.semver);
          if (q.size > 1)
            return null;
          let ce;
          if (W && K) {
            if (ce = y(W.semver, K.semver, M), ce > 0)
              return null;
            if (ce === 0 && (W.operator !== ">=" || K.operator !== "<="))
              return null;
          }
          for (let R of q) {
            if (W && !P(R, String(W), M) || K && !P(R, String(K), M))
              return null;
            for (let pe of c)
              if (!P(R, String(pe), M))
                return false;
            return true;
          }
          let Ie, me, Ae, te, he = K && !M.includePrerelease && K.semver.prerelease.length ? K.semver : false, Pe = W && !M.includePrerelease && W.semver.prerelease.length ? W.semver : false;
          he && he.prerelease.length === 1 && K.operator === "<" && he.prerelease[0] === 0 && (he = false);
          for (let R of c) {
            if (te = te || R.operator === ">" || R.operator === ">=", Ae = Ae || R.operator === "<" || R.operator === "<=", W) {
              if (Pe && R.semver.prerelease && R.semver.prerelease.length && R.semver.major === Pe.major && R.semver.minor === Pe.minor && R.semver.patch === Pe.patch && (Pe = false), R.operator === ">" || R.operator === ">=") {
                if (Ie = d(W, R, M), Ie === R && Ie !== W)
                  return false;
              } else if (W.operator === ">=" && !P(W.semver, String(R), M))
                return false;
            }
            if (K) {
              if (he && R.semver.prerelease && R.semver.prerelease.length && R.semver.major === he.major && R.semver.minor === he.minor && R.semver.patch === he.patch && (he = false), R.operator === "<" || R.operator === "<=") {
                if (me = E(K, R, M), me === R && me !== K)
                  return false;
              } else if (K.operator === "<=" && !P(K.semver, String(R), M))
                return false;
            }
            if (!R.operator && (K || W) && ce !== 0)
              return false;
          }
          return !(W && Ae && !K && ce !== 0 || K && te && !W && ce !== 0 || Pe || he);
        }, d = (I, c, M) => {
          if (!I)
            return c;
          let q = y(I.semver, c.semver, M);
          return q > 0 ? I : q < 0 || c.operator === ">" && I.operator === ">=" ? c : I;
        }, E = (I, c, M) => {
          if (!I)
            return c;
          let q = y(I.semver, c.semver, M);
          return q < 0 ? I : q > 0 || c.operator === "<" && I.operator === "<=" ? c : I;
        };
        _.exports = m;
      } }), pT = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/semver/index.js"(a, _) {
        De();
        var v = Bc(), h2 = h1(), D = Bn(), P = z9(), y = qc(), m = kW(), C = IW(), d = NW(), E = OW(), I = MW(), c = LW(), M = RW(), q = jW(), W = _a(), K = JW(), ce = FW(), Ie = oT(), me = BW(), Ae = qW(), te = v1(), he = _T(), Pe = sT(), R = W9(), pe = cT(), ke = lT(), Je = V9(), Xe = UW(), ee = b1(), je = ca(), nt = T1(), Ze = HW(), st = GW(), tt = $W(), ct = KW(), ne = XW(), ge = uT(), Fe = YW(), at = QW(), Pt = ZW(), qt = eV(), Zr = tV();
        _.exports = { parse: y, valid: m, clean: C, inc: d, diff: E, major: I, minor: c, patch: M, prerelease: q, compare: W, rcompare: K, compareLoose: ce, compareBuild: Ie, sort: me, rsort: Ae, gt: te, lt: he, eq: Pe, neq: R, gte: pe, lte: ke, cmp: Je, coerce: Xe, Comparator: ee, Range: je, satisfies: nt, toComparators: Ze, maxSatisfying: st, minSatisfying: tt, minVersion: ct, validRange: ne, outside: ge, gtr: Fe, ltr: at, intersects: Pt, simplifyRange: qt, subset: Zr, SemVer: D, re: v.re, src: v.src, tokens: v.t, SEMVER_SPEC_VERSION: h2.SEMVER_SPEC_VERSION, compareIdentifiers: P.compareIdentifiers, rcompareIdentifiers: P.rcompareIdentifiers };
      } }), S1 = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/version-check.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(C, d, E, I) {
          I === void 0 && (I = E);
          var c = Object.getOwnPropertyDescriptor(d, E);
          (!c || ("get" in c ? !d.__esModule : c.writable || c.configurable)) && (c = { enumerable: true, get: function() {
            return d[E];
          } }), Object.defineProperty(C, I, c);
        } : function(C, d, E, I) {
          I === void 0 && (I = E), C[I] = d[E];
        }), v = a && a.__setModuleDefault || (Object.create ? function(C, d) {
          Object.defineProperty(C, "default", { enumerable: true, value: d });
        } : function(C, d) {
          C.default = d;
        }), h2 = a && a.__importStar || function(C) {
          if (C && C.__esModule)
            return C;
          var d = {};
          if (C != null)
            for (var E in C)
              E !== "default" && Object.prototype.hasOwnProperty.call(C, E) && _(d, C, E);
          return v(d, C), d;
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.typescriptVersionIsAtLeast = void 0;
        h2(pT());
        h2(vr());
        var y = ["3.7", "3.8", "3.9", "4.0", "4.1", "4.2", "4.3", "4.4", "4.5", "4.6", "4.7", "4.8", "4.9", "5.0"], m = {};
        a.typescriptVersionIsAtLeast = m;
        for (let C of y)
          m[C] = true;
      } }), fT = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/getModifiers.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(d, E, I, c) {
          c === void 0 && (c = I);
          var M = Object.getOwnPropertyDescriptor(E, I);
          (!M || ("get" in M ? !E.__esModule : M.writable || M.configurable)) && (M = { enumerable: true, get: function() {
            return E[I];
          } }), Object.defineProperty(d, c, M);
        } : function(d, E, I, c) {
          c === void 0 && (c = I), d[c] = E[I];
        }), v = a && a.__setModuleDefault || (Object.create ? function(d, E) {
          Object.defineProperty(d, "default", { enumerable: true, value: E });
        } : function(d, E) {
          d.default = E;
        }), h2 = a && a.__importStar || function(d) {
          if (d && d.__esModule)
            return d;
          var E = {};
          if (d != null)
            for (var I in d)
              I !== "default" && Object.prototype.hasOwnProperty.call(d, I) && _(E, d, I);
          return v(E, d), E;
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.getDecorators = a.getModifiers = void 0;
        var D = h2(vr()), P = S1(), y = P.typescriptVersionIsAtLeast["4.8"];
        function m(d) {
          var E;
          if (d != null) {
            if (y) {
              if (D.canHaveModifiers(d)) {
                let I = D.getModifiers(d);
                return I ? Array.from(I) : void 0;
              }
              return;
            }
            return (E = d.modifiers) === null || E === void 0 ? void 0 : E.filter((I) => !D.isDecorator(I));
          }
        }
        a.getModifiers = m;
        function C(d) {
          var E;
          if (d != null) {
            if (y) {
              if (D.canHaveDecorators(d)) {
                let I = D.getDecorators(d);
                return I ? Array.from(I) : void 0;
              }
              return;
            }
            return (E = d.decorators) === null || E === void 0 ? void 0 : E.filter(D.isDecorator);
          }
        }
        a.getDecorators = C;
      } }), rV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/jsx/xhtml-entities.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.xhtmlEntities = void 0, a.xhtmlEntities = { quot: '"', amp: "&", apos: "'", lt: "<", gt: ">", nbsp: " ", iexcl: "¡", cent: "¢", pound: "£", curren: "¤", yen: "¥", brvbar: "¦", sect: "§", uml: "¨", copy: "©", ordf: "ª", laquo: "«", not: "¬", shy: "­", reg: "®", macr: "¯", deg: "°", plusmn: "±", sup2: "²", sup3: "³", acute: "´", micro: "µ", para: "¶", middot: "·", cedil: "¸", sup1: "¹", ordm: "º", raquo: "»", frac14: "¼", frac12: "½", frac34: "¾", iquest: "¿", Agrave: "À", Aacute: "Á", Acirc: "Â", Atilde: "Ã", Auml: "Ä", Aring: "Å", AElig: "Æ", Ccedil: "Ç", Egrave: "È", Eacute: "É", Ecirc: "Ê", Euml: "Ë", Igrave: "Ì", Iacute: "Í", Icirc: "Î", Iuml: "Ï", ETH: "Ð", Ntilde: "Ñ", Ograve: "Ò", Oacute: "Ó", Ocirc: "Ô", Otilde: "Õ", Ouml: "Ö", times: "×", Oslash: "Ø", Ugrave: "Ù", Uacute: "Ú", Ucirc: "Û", Uuml: "Ü", Yacute: "Ý", THORN: "Þ", szlig: "ß", agrave: "à", aacute: "á", acirc: "â", atilde: "ã", auml: "ä", aring: "å", aelig: "æ", ccedil: "ç", egrave: "è", eacute: "é", ecirc: "ê", euml: "ë", igrave: "ì", iacute: "í", icirc: "î", iuml: "ï", eth: "ð", ntilde: "ñ", ograve: "ò", oacute: "ó", ocirc: "ô", otilde: "õ", ouml: "ö", divide: "÷", oslash: "ø", ugrave: "ù", uacute: "ú", ucirc: "û", uuml: "ü", yacute: "ý", thorn: "þ", yuml: "ÿ", OElig: "Œ", oelig: "œ", Scaron: "Š", scaron: "š", Yuml: "Ÿ", fnof: "ƒ", circ: "ˆ", tilde: "˜", Alpha: "Α", Beta: "Β", Gamma: "Γ", Delta: "Δ", Epsilon: "Ε", Zeta: "Ζ", Eta: "Η", Theta: "Θ", Iota: "Ι", Kappa: "Κ", Lambda: "Λ", Mu: "Μ", Nu: "Ν", Xi: "Ξ", Omicron: "Ο", Pi: "Π", Rho: "Ρ", Sigma: "Σ", Tau: "Τ", Upsilon: "Υ", Phi: "Φ", Chi: "Χ", Psi: "Ψ", Omega: "Ω", alpha: "α", beta: "β", gamma: "γ", delta: "δ", epsilon: "ε", zeta: "ζ", eta: "η", theta: "θ", iota: "ι", kappa: "κ", lambda: "λ", mu: "μ", nu: "ν", xi: "ξ", omicron: "ο", pi: "π", rho: "ρ", sigmaf: "ς", sigma: "σ", tau: "τ", upsilon: "υ", phi: "φ", chi: "χ", psi: "ψ", omega: "ω", thetasym: "ϑ", upsih: "ϒ", piv: "ϖ", ensp: " ", emsp: " ", thinsp: " ", zwnj: "‌", zwj: "‍", lrm: "‎", rlm: "‏", ndash: "–", mdash: "—", lsquo: "‘", rsquo: "’", sbquo: "‚", ldquo: "“", rdquo: "”", bdquo: "„", dagger: "†", Dagger: "‡", bull: "•", hellip: "…", permil: "‰", prime: "′", Prime: "″", lsaquo: "‹", rsaquo: "›", oline: "‾", frasl: "⁄", euro: "€", image: "ℑ", weierp: "℘", real: "ℜ", trade: "™", alefsym: "ℵ", larr: "←", uarr: "↑", rarr: "→", darr: "↓", harr: "↔", crarr: "↵", lArr: "⇐", uArr: "⇑", rArr: "⇒", dArr: "⇓", hArr: "⇔", forall: "∀", part: "∂", exist: "∃", empty: "∅", nabla: "∇", isin: "∈", notin: "∉", ni: "∋", prod: "∏", sum: "∑", minus: "−", lowast: "∗", radic: "√", prop: "∝", infin: "∞", ang: "∠", and: "∧", or: "∨", cap: "∩", cup: "∪", int: "∫", there4: "∴", sim: "∼", cong: "≅", asymp: "≈", ne: "≠", equiv: "≡", le: "≤", ge: "≥", sub: "⊂", sup: "⊃", nsub: "⊄", sube: "⊆", supe: "⊇", oplus: "⊕", otimes: "⊗", perp: "⊥", sdot: "⋅", lceil: "⌈", rceil: "⌉", lfloor: "⌊", rfloor: "⌋", lang: "〈", rang: "〉", loz: "◊", spades: "♠", clubs: "♣", hearts: "♥", diams: "♦" };
      } }), H9 = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/@typescript-eslint/types/dist/generated/ast-spec.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.AST_TOKEN_TYPES = a.AST_NODE_TYPES = void 0;
        (function(h2) {
          h2.AccessorProperty = "AccessorProperty", h2.ArrayExpression = "ArrayExpression", h2.ArrayPattern = "ArrayPattern", h2.ArrowFunctionExpression = "ArrowFunctionExpression", h2.AssignmentExpression = "AssignmentExpression", h2.AssignmentPattern = "AssignmentPattern", h2.AwaitExpression = "AwaitExpression", h2.BinaryExpression = "BinaryExpression", h2.BlockStatement = "BlockStatement", h2.BreakStatement = "BreakStatement", h2.CallExpression = "CallExpression", h2.CatchClause = "CatchClause", h2.ChainExpression = "ChainExpression", h2.ClassBody = "ClassBody", h2.ClassDeclaration = "ClassDeclaration", h2.ClassExpression = "ClassExpression", h2.ConditionalExpression = "ConditionalExpression", h2.ContinueStatement = "ContinueStatement", h2.DebuggerStatement = "DebuggerStatement", h2.Decorator = "Decorator", h2.DoWhileStatement = "DoWhileStatement", h2.EmptyStatement = "EmptyStatement", h2.ExportAllDeclaration = "ExportAllDeclaration", h2.ExportDefaultDeclaration = "ExportDefaultDeclaration", h2.ExportNamedDeclaration = "ExportNamedDeclaration", h2.ExportSpecifier = "ExportSpecifier", h2.ExpressionStatement = "ExpressionStatement", h2.ForInStatement = "ForInStatement", h2.ForOfStatement = "ForOfStatement", h2.ForStatement = "ForStatement", h2.FunctionDeclaration = "FunctionDeclaration", h2.FunctionExpression = "FunctionExpression", h2.Identifier = "Identifier", h2.IfStatement = "IfStatement", h2.ImportAttribute = "ImportAttribute", h2.ImportDeclaration = "ImportDeclaration", h2.ImportDefaultSpecifier = "ImportDefaultSpecifier", h2.ImportExpression = "ImportExpression", h2.ImportNamespaceSpecifier = "ImportNamespaceSpecifier", h2.ImportSpecifier = "ImportSpecifier", h2.JSXAttribute = "JSXAttribute", h2.JSXClosingElement = "JSXClosingElement", h2.JSXClosingFragment = "JSXClosingFragment", h2.JSXElement = "JSXElement", h2.JSXEmptyExpression = "JSXEmptyExpression", h2.JSXExpressionContainer = "JSXExpressionContainer", h2.JSXFragment = "JSXFragment", h2.JSXIdentifier = "JSXIdentifier", h2.JSXMemberExpression = "JSXMemberExpression", h2.JSXNamespacedName = "JSXNamespacedName", h2.JSXOpeningElement = "JSXOpeningElement", h2.JSXOpeningFragment = "JSXOpeningFragment", h2.JSXSpreadAttribute = "JSXSpreadAttribute", h2.JSXSpreadChild = "JSXSpreadChild", h2.JSXText = "JSXText", h2.LabeledStatement = "LabeledStatement", h2.Literal = "Literal", h2.LogicalExpression = "LogicalExpression", h2.MemberExpression = "MemberExpression", h2.MetaProperty = "MetaProperty", h2.MethodDefinition = "MethodDefinition", h2.NewExpression = "NewExpression", h2.ObjectExpression = "ObjectExpression", h2.ObjectPattern = "ObjectPattern", h2.PrivateIdentifier = "PrivateIdentifier", h2.Program = "Program", h2.Property = "Property", h2.PropertyDefinition = "PropertyDefinition", h2.RestElement = "RestElement", h2.ReturnStatement = "ReturnStatement", h2.SequenceExpression = "SequenceExpression", h2.SpreadElement = "SpreadElement", h2.StaticBlock = "StaticBlock", h2.Super = "Super", h2.SwitchCase = "SwitchCase", h2.SwitchStatement = "SwitchStatement", h2.TaggedTemplateExpression = "TaggedTemplateExpression", h2.TemplateElement = "TemplateElement", h2.TemplateLiteral = "TemplateLiteral", h2.ThisExpression = "ThisExpression", h2.ThrowStatement = "ThrowStatement", h2.TryStatement = "TryStatement", h2.UnaryExpression = "UnaryExpression", h2.UpdateExpression = "UpdateExpression", h2.VariableDeclaration = "VariableDeclaration", h2.VariableDeclarator = "VariableDeclarator", h2.WhileStatement = "WhileStatement", h2.WithStatement = "WithStatement", h2.YieldExpression = "YieldExpression", h2.TSAbstractAccessorProperty = "TSAbstractAccessorProperty", h2.TSAbstractKeyword = "TSAbstractKeyword", h2.TSAbstractMethodDefinition = "TSAbstractMethodDefinition", h2.TSAbstractPropertyDefinition = "TSAbstractPropertyDefinition", h2.TSAnyKeyword = "TSAnyKeyword", h2.TSArrayType = "TSArrayType", h2.TSAsExpression = "TSAsExpression", h2.TSAsyncKeyword = "TSAsyncKeyword", h2.TSBigIntKeyword = "TSBigIntKeyword", h2.TSBooleanKeyword = "TSBooleanKeyword", h2.TSCallSignatureDeclaration = "TSCallSignatureDeclaration", h2.TSClassImplements = "TSClassImplements", h2.TSConditionalType = "TSConditionalType", h2.TSConstructorType = "TSConstructorType", h2.TSConstructSignatureDeclaration = "TSConstructSignatureDeclaration", h2.TSDeclareFunction = "TSDeclareFunction", h2.TSDeclareKeyword = "TSDeclareKeyword", h2.TSEmptyBodyFunctionExpression = "TSEmptyBodyFunctionExpression", h2.TSEnumDeclaration = "TSEnumDeclaration", h2.TSEnumMember = "TSEnumMember", h2.TSExportAssignment = "TSExportAssignment", h2.TSExportKeyword = "TSExportKeyword", h2.TSExternalModuleReference = "TSExternalModuleReference", h2.TSFunctionType = "TSFunctionType", h2.TSInstantiationExpression = "TSInstantiationExpression", h2.TSImportEqualsDeclaration = "TSImportEqualsDeclaration", h2.TSImportType = "TSImportType", h2.TSIndexedAccessType = "TSIndexedAccessType", h2.TSIndexSignature = "TSIndexSignature", h2.TSInferType = "TSInferType", h2.TSInterfaceBody = "TSInterfaceBody", h2.TSInterfaceDeclaration = "TSInterfaceDeclaration", h2.TSInterfaceHeritage = "TSInterfaceHeritage", h2.TSIntersectionType = "TSIntersectionType", h2.TSIntrinsicKeyword = "TSIntrinsicKeyword", h2.TSLiteralType = "TSLiteralType", h2.TSMappedType = "TSMappedType", h2.TSMethodSignature = "TSMethodSignature", h2.TSModuleBlock = "TSModuleBlock", h2.TSModuleDeclaration = "TSModuleDeclaration", h2.TSNamedTupleMember = "TSNamedTupleMember", h2.TSNamespaceExportDeclaration = "TSNamespaceExportDeclaration", h2.TSNeverKeyword = "TSNeverKeyword", h2.TSNonNullExpression = "TSNonNullExpression", h2.TSNullKeyword = "TSNullKeyword", h2.TSNumberKeyword = "TSNumberKeyword", h2.TSObjectKeyword = "TSObjectKeyword", h2.TSOptionalType = "TSOptionalType", h2.TSParameterProperty = "TSParameterProperty", h2.TSPrivateKeyword = "TSPrivateKeyword", h2.TSPropertySignature = "TSPropertySignature", h2.TSProtectedKeyword = "TSProtectedKeyword", h2.TSPublicKeyword = "TSPublicKeyword", h2.TSQualifiedName = "TSQualifiedName", h2.TSReadonlyKeyword = "TSReadonlyKeyword", h2.TSRestType = "TSRestType", h2.TSSatisfiesExpression = "TSSatisfiesExpression", h2.TSStaticKeyword = "TSStaticKeyword", h2.TSStringKeyword = "TSStringKeyword", h2.TSSymbolKeyword = "TSSymbolKeyword", h2.TSTemplateLiteralType = "TSTemplateLiteralType", h2.TSThisType = "TSThisType", h2.TSTupleType = "TSTupleType", h2.TSTypeAliasDeclaration = "TSTypeAliasDeclaration", h2.TSTypeAnnotation = "TSTypeAnnotation", h2.TSTypeAssertion = "TSTypeAssertion", h2.TSTypeLiteral = "TSTypeLiteral", h2.TSTypeOperator = "TSTypeOperator", h2.TSTypeParameter = "TSTypeParameter", h2.TSTypeParameterDeclaration = "TSTypeParameterDeclaration", h2.TSTypeParameterInstantiation = "TSTypeParameterInstantiation", h2.TSTypePredicate = "TSTypePredicate", h2.TSTypeQuery = "TSTypeQuery", h2.TSTypeReference = "TSTypeReference", h2.TSUndefinedKeyword = "TSUndefinedKeyword", h2.TSUnionType = "TSUnionType", h2.TSUnknownKeyword = "TSUnknownKeyword", h2.TSVoidKeyword = "TSVoidKeyword";
        })(a.AST_NODE_TYPES || (a.AST_NODE_TYPES = {}));
        (function(h2) {
          h2.Boolean = "Boolean", h2.Identifier = "Identifier", h2.JSXIdentifier = "JSXIdentifier", h2.JSXText = "JSXText", h2.Keyword = "Keyword", h2.Null = "Null", h2.Numeric = "Numeric", h2.Punctuator = "Punctuator", h2.RegularExpression = "RegularExpression", h2.String = "String", h2.Template = "Template", h2.Block = "Block", h2.Line = "Line";
        })(a.AST_TOKEN_TYPES || (a.AST_TOKEN_TYPES = {}));
      } }), nV = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/@typescript-eslint/types/dist/lib.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true });
      } }), iV = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/@typescript-eslint/types/dist/parser-options.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true });
      } }), aV = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/@typescript-eslint/types/dist/ts-estree.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(D, P, y, m) {
          m === void 0 && (m = y);
          var C = Object.getOwnPropertyDescriptor(P, y);
          (!C || ("get" in C ? !P.__esModule : C.writable || C.configurable)) && (C = { enumerable: true, get: function() {
            return P[y];
          } }), Object.defineProperty(D, m, C);
        } : function(D, P, y, m) {
          m === void 0 && (m = y), D[m] = P[y];
        }), v = a && a.__setModuleDefault || (Object.create ? function(D, P) {
          Object.defineProperty(D, "default", { enumerable: true, value: P });
        } : function(D, P) {
          D.default = P;
        }), h2 = a && a.__importStar || function(D) {
          if (D && D.__esModule)
            return D;
          var P = {};
          if (D != null)
            for (var y in D)
              y !== "default" && Object.prototype.hasOwnProperty.call(D, y) && _(P, D, y);
          return v(P, D), P;
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.TSESTree = void 0, a.TSESTree = h2(H9());
      } }), sV = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/@typescript-eslint/types/dist/index.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(D, P, y, m) {
          m === void 0 && (m = y);
          var C = Object.getOwnPropertyDescriptor(P, y);
          (!C || ("get" in C ? !P.__esModule : C.writable || C.configurable)) && (C = { enumerable: true, get: function() {
            return P[y];
          } }), Object.defineProperty(D, m, C);
        } : function(D, P, y, m) {
          m === void 0 && (m = y), D[m] = P[y];
        }), v = a && a.__exportStar || function(D, P) {
          for (var y in D)
            y !== "default" && !Object.prototype.hasOwnProperty.call(P, y) && _(P, D, y);
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.AST_TOKEN_TYPES = a.AST_NODE_TYPES = void 0;
        var h2 = H9();
        Object.defineProperty(a, "AST_NODE_TYPES", { enumerable: true, get: function() {
          return h2.AST_NODE_TYPES;
        } }), Object.defineProperty(a, "AST_TOKEN_TYPES", { enumerable: true, get: function() {
          return h2.AST_TOKEN_TYPES;
        } }), v(nV(), a), v(iV(), a), v(aV(), a);
      } }), oV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/ts-estree/ts-nodes.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true });
      } }), _V = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/ts-estree/estree-to-ts-node-types.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true });
      } }), x1 = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/ts-estree/index.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(D, P, y, m) {
          m === void 0 && (m = y);
          var C = Object.getOwnPropertyDescriptor(P, y);
          (!C || ("get" in C ? !P.__esModule : C.writable || C.configurable)) && (C = { enumerable: true, get: function() {
            return P[y];
          } }), Object.defineProperty(D, m, C);
        } : function(D, P, y, m) {
          m === void 0 && (m = y), D[m] = P[y];
        }), v = a && a.__exportStar || function(D, P) {
          for (var y in D)
            y !== "default" && !Object.prototype.hasOwnProperty.call(P, y) && _(P, D, y);
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.TSESTree = a.AST_TOKEN_TYPES = a.AST_NODE_TYPES = void 0;
        var h2 = sV();
        Object.defineProperty(a, "AST_NODE_TYPES", { enumerable: true, get: function() {
          return h2.AST_NODE_TYPES;
        } }), Object.defineProperty(a, "AST_TOKEN_TYPES", { enumerable: true, get: function() {
          return h2.AST_TOKEN_TYPES;
        } }), Object.defineProperty(a, "TSESTree", { enumerable: true, get: function() {
          return h2.TSESTree;
        } }), v(oV(), a), v(_V(), a);
      } }), E1 = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/node-utils.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(be, Ke, Et, Ft) {
          Ft === void 0 && (Ft = Et);
          var or = Object.getOwnPropertyDescriptor(Ke, Et);
          (!or || ("get" in or ? !Ke.__esModule : or.writable || or.configurable)) && (or = { enumerable: true, get: function() {
            return Ke[Et];
          } }), Object.defineProperty(be, Ft, or);
        } : function(be, Ke, Et, Ft) {
          Ft === void 0 && (Ft = Et), be[Ft] = Ke[Et];
        }), v = a && a.__setModuleDefault || (Object.create ? function(be, Ke) {
          Object.defineProperty(be, "default", { enumerable: true, value: Ke });
        } : function(be, Ke) {
          be.default = Ke;
        }), h2 = a && a.__importStar || function(be) {
          if (be && be.__esModule)
            return be;
          var Ke = {};
          if (be != null)
            for (var Et in be)
              Et !== "default" && Object.prototype.hasOwnProperty.call(be, Et) && _(Ke, be, Et);
          return v(Ke, be), Ke;
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.isThisInTypeQuery = a.isThisIdentifier = a.identifierIsThisKeyword = a.firstDefined = a.nodeHasTokens = a.createError = a.TSError = a.convertTokens = a.convertToken = a.getTokenType = a.isChildUnwrappableOptionalChain = a.isChainExpression = a.isOptional = a.isComputedProperty = a.unescapeStringLiteralText = a.hasJSXAncestor = a.findFirstMatchingAncestor = a.findNextToken = a.getTSNodeAccessibility = a.getDeclarationKind = a.isJSXToken = a.isToken = a.getRange = a.canContainDirective = a.getLocFor = a.getLineAndCharacterFor = a.getBinaryExpressionType = a.isJSDocComment = a.isComment = a.isComma = a.getLastModifier = a.hasModifier = a.isESTreeClassMember = a.getTextForTokenKind = a.isLogicalOperator = a.isAssignmentOperator = void 0;
        var D = h2(vr()), P = fT(), y = rV(), m = x1(), C = S1(), d = C.typescriptVersionIsAtLeast["5.0"], E = D.SyntaxKind, I = [E.BarBarToken, E.AmpersandAmpersandToken, E.QuestionQuestionToken];
        function c(be) {
          return be.kind >= E.FirstAssignment && be.kind <= E.LastAssignment;
        }
        a.isAssignmentOperator = c;
        function M(be) {
          return I.includes(be.kind);
        }
        a.isLogicalOperator = M;
        function q(be) {
          return D.tokenToString(be);
        }
        a.getTextForTokenKind = q;
        function W(be) {
          return be.kind !== E.SemicolonClassElement;
        }
        a.isESTreeClassMember = W;
        function K(be, Ke) {
          let Et = (0, P.getModifiers)(Ke);
          return (Et == null ? void 0 : Et.some((Ft) => Ft.kind === be)) === true;
        }
        a.hasModifier = K;
        function ce(be) {
          var Ke;
          let Et = (0, P.getModifiers)(be);
          return Et == null ? null : (Ke = Et[Et.length - 1]) !== null && Ke !== void 0 ? Ke : null;
        }
        a.getLastModifier = ce;
        function Ie(be) {
          return be.kind === E.CommaToken;
        }
        a.isComma = Ie;
        function me(be) {
          return be.kind === E.SingleLineCommentTrivia || be.kind === E.MultiLineCommentTrivia;
        }
        a.isComment = me;
        function Ae(be) {
          return be.kind === E.JSDocComment;
        }
        a.isJSDocComment = Ae;
        function te(be) {
          return c(be) ? m.AST_NODE_TYPES.AssignmentExpression : M(be) ? m.AST_NODE_TYPES.LogicalExpression : m.AST_NODE_TYPES.BinaryExpression;
        }
        a.getBinaryExpressionType = te;
        function he(be, Ke) {
          let Et = Ke.getLineAndCharacterOfPosition(be);
          return { line: Et.line + 1, column: Et.character };
        }
        a.getLineAndCharacterFor = he;
        function Pe(be, Ke, Et) {
          return { start: he(be, Et), end: he(Ke, Et) };
        }
        a.getLocFor = Pe;
        function R(be) {
          if (be.kind === D.SyntaxKind.Block)
            switch (be.parent.kind) {
              case D.SyntaxKind.Constructor:
              case D.SyntaxKind.GetAccessor:
              case D.SyntaxKind.SetAccessor:
              case D.SyntaxKind.ArrowFunction:
              case D.SyntaxKind.FunctionExpression:
              case D.SyntaxKind.FunctionDeclaration:
              case D.SyntaxKind.MethodDeclaration:
                return true;
              default:
                return false;
            }
          return true;
        }
        a.canContainDirective = R;
        function pe(be, Ke) {
          return [be.getStart(Ke), be.getEnd()];
        }
        a.getRange = pe;
        function ke(be) {
          return be.kind >= E.FirstToken && be.kind <= E.LastToken;
        }
        a.isToken = ke;
        function Je(be) {
          return be.kind >= E.JsxElement && be.kind <= E.JsxAttribute;
        }
        a.isJSXToken = Je;
        function Xe(be) {
          return be.flags & D.NodeFlags.Let ? "let" : be.flags & D.NodeFlags.Const ? "const" : "var";
        }
        a.getDeclarationKind = Xe;
        function ee(be) {
          let Ke = (0, P.getModifiers)(be);
          if (Ke == null)
            return null;
          for (let Et of Ke)
            switch (Et.kind) {
              case E.PublicKeyword:
                return "public";
              case E.ProtectedKeyword:
                return "protected";
              case E.PrivateKeyword:
                return "private";
            }
          return null;
        }
        a.getTSNodeAccessibility = ee;
        function je(be, Ke, Et) {
          return Ft(Ke);
          function Ft(or) {
            return D.isToken(or) && or.pos === be.end ? or : la(or.getChildren(Et), (Wr) => (Wr.pos <= be.pos && Wr.end > be.end || Wr.pos === be.end) && Ri(Wr, Et) ? Ft(Wr) : void 0);
          }
        }
        a.findNextToken = je;
        function nt(be, Ke) {
          for (; be; ) {
            if (Ke(be))
              return be;
            be = be.parent;
          }
        }
        a.findFirstMatchingAncestor = nt;
        function Ze(be) {
          return !!nt(be, Je);
        }
        a.hasJSXAncestor = Ze;
        function st(be) {
          return be.replace(/&(?:#\d+|#x[\da-fA-F]+|[0-9a-zA-Z]+);/g, (Ke) => {
            let Et = Ke.slice(1, -1);
            if (Et[0] === "#") {
              let Ft = Et[1] === "x" ? parseInt(Et.slice(2), 16) : parseInt(Et.slice(1), 10);
              return Ft > 1114111 ? Ke : String.fromCodePoint(Ft);
            }
            return y.xhtmlEntities[Et] || Ke;
          });
        }
        a.unescapeStringLiteralText = st;
        function tt(be) {
          return be.kind === E.ComputedPropertyName;
        }
        a.isComputedProperty = tt;
        function ct(be) {
          return be.questionToken ? be.questionToken.kind === E.QuestionToken : false;
        }
        a.isOptional = ct;
        function ne(be) {
          return be.type === m.AST_NODE_TYPES.ChainExpression;
        }
        a.isChainExpression = ne;
        function ge(be, Ke) {
          return ne(Ke) && be.expression.kind !== D.SyntaxKind.ParenthesizedExpression;
        }
        a.isChildUnwrappableOptionalChain = ge;
        function Fe(be) {
          let Ke;
          if (d && be.kind === E.Identifier ? Ke = D.identifierToKeywordKind(be) : "originalKeywordKind" in be && (Ke = be.originalKeywordKind), Ke)
            return Ke === E.NullKeyword ? m.AST_TOKEN_TYPES.Null : Ke >= E.FirstFutureReservedWord && Ke <= E.LastKeyword ? m.AST_TOKEN_TYPES.Identifier : m.AST_TOKEN_TYPES.Keyword;
          if (be.kind >= E.FirstKeyword && be.kind <= E.LastFutureReservedWord)
            return be.kind === E.FalseKeyword || be.kind === E.TrueKeyword ? m.AST_TOKEN_TYPES.Boolean : m.AST_TOKEN_TYPES.Keyword;
          if (be.kind >= E.FirstPunctuation && be.kind <= E.LastPunctuation)
            return m.AST_TOKEN_TYPES.Punctuator;
          if (be.kind >= E.NoSubstitutionTemplateLiteral && be.kind <= E.TemplateTail)
            return m.AST_TOKEN_TYPES.Template;
          switch (be.kind) {
            case E.NumericLiteral:
              return m.AST_TOKEN_TYPES.Numeric;
            case E.JsxText:
              return m.AST_TOKEN_TYPES.JSXText;
            case E.StringLiteral:
              return be.parent && (be.parent.kind === E.JsxAttribute || be.parent.kind === E.JsxElement) ? m.AST_TOKEN_TYPES.JSXText : m.AST_TOKEN_TYPES.String;
            case E.RegularExpressionLiteral:
              return m.AST_TOKEN_TYPES.RegularExpression;
            case E.Identifier:
            case E.ConstructorKeyword:
            case E.GetKeyword:
            case E.SetKeyword:
          }
          return be.parent && be.kind === E.Identifier && (Je(be.parent) || be.parent.kind === E.PropertyAccessExpression && Ze(be)) ? m.AST_TOKEN_TYPES.JSXIdentifier : m.AST_TOKEN_TYPES.Identifier;
        }
        a.getTokenType = Fe;
        function at(be, Ke) {
          let Et = be.kind === E.JsxText ? be.getFullStart() : be.getStart(Ke), Ft = be.getEnd(), or = Ke.text.slice(Et, Ft), Wr = Fe(be);
          return Wr === m.AST_TOKEN_TYPES.RegularExpression ? { type: Wr, value: or, range: [Et, Ft], loc: Pe(Et, Ft, Ke), regex: { pattern: or.slice(1, or.lastIndexOf("/")), flags: or.slice(or.lastIndexOf("/") + 1) } } : { type: Wr, value: or, range: [Et, Ft], loc: Pe(Et, Ft, Ke) };
        }
        a.convertToken = at;
        function Pt(be) {
          let Ke = [];
          function Et(Ft) {
            if (!(me(Ft) || Ae(Ft)))
              if (ke(Ft) && Ft.kind !== E.EndOfFileToken) {
                let or = at(Ft, be);
                or && Ke.push(or);
              } else
                Ft.getChildren(be).forEach(Et);
          }
          return Et(be), Ke;
        }
        a.convertTokens = Pt;
        var qt = class extends Error {
          constructor(be, Ke, Et, Ft, or) {
            super(be), this.fileName = Ke, this.index = Et, this.lineNumber = Ft, this.column = or, Object.defineProperty(this, "name", { value: new.target.name, enumerable: false, configurable: true });
          }
        };
        a.TSError = qt;
        function Zr(be, Ke, Et) {
          let Ft = be.getLineAndCharacterOfPosition(Ke);
          return new qt(Et, be.fileName, Ke, Ft.line + 1, Ft.character);
        }
        a.createError = Zr;
        function Ri(be, Ke) {
          return be.kind === E.EndOfFileToken ? !!be.jsDoc : be.getWidth(Ke) !== 0;
        }
        a.nodeHasTokens = Ri;
        function la(be, Ke) {
          if (be !== void 0)
            for (let Et = 0; Et < be.length; Et++) {
              let Ft = Ke(be[Et], Et);
              if (Ft !== void 0)
                return Ft;
            }
        }
        a.firstDefined = la;
        function ua(be) {
          return (d ? D.identifierToKeywordKind(be) : be.originalKeywordKind) === E.ThisKeyword;
        }
        a.identifierIsThisKeyword = ua;
        function Ka(be) {
          return !!be && be.kind === E.Identifier && ua(be);
        }
        a.isThisIdentifier = Ka;
        function co(be) {
          if (!Ka(be))
            return false;
          for (; D.isQualifiedName(be.parent) && be.parent.left === be; )
            be = be.parent;
          return be.parent.kind === E.TypeQuery;
        }
        a.isThisInTypeQuery = co;
      } }), G9 = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/convert.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(c, M, q, W) {
          W === void 0 && (W = q);
          var K = Object.getOwnPropertyDescriptor(M, q);
          (!K || ("get" in K ? !M.__esModule : K.writable || K.configurable)) && (K = { enumerable: true, get: function() {
            return M[q];
          } }), Object.defineProperty(c, W, K);
        } : function(c, M, q, W) {
          W === void 0 && (W = q), c[W] = M[q];
        }), v = a && a.__setModuleDefault || (Object.create ? function(c, M) {
          Object.defineProperty(c, "default", { enumerable: true, value: M });
        } : function(c, M) {
          c.default = M;
        }), h2 = a && a.__importStar || function(c) {
          if (c && c.__esModule)
            return c;
          var M = {};
          if (c != null)
            for (var q in c)
              q !== "default" && Object.prototype.hasOwnProperty.call(c, q) && _(M, c, q);
          return v(M, c), M;
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.Converter = a.convertError = void 0;
        var D = h2(vr()), P = fT(), y = E1(), m = x1(), C = S1(), d = D.SyntaxKind;
        function E(c) {
          return (0, y.createError)(c.file, c.start, "message" in c && c.message || c.messageText);
        }
        a.convertError = E;
        var I = class {
          constructor(c, M) {
            this.esTreeNodeToTSNodeMap = /* @__PURE__ */ new WeakMap(), this.tsNodeToESTreeNodeMap = /* @__PURE__ */ new WeakMap(), this.allowPattern = false, this.inTypeMode = false, this.ast = c, this.options = Object.assign({}, M);
          }
          getASTMaps() {
            return { esTreeNodeToTSNodeMap: this.esTreeNodeToTSNodeMap, tsNodeToESTreeNodeMap: this.tsNodeToESTreeNodeMap };
          }
          convertProgram() {
            return this.converter(this.ast);
          }
          converter(c, M, q, W) {
            if (!c)
              return null;
            let K = this.inTypeMode, ce = this.allowPattern;
            q !== void 0 && (this.inTypeMode = q), W !== void 0 && (this.allowPattern = W);
            let Ie = this.convertNode(c, M != null ? M : c.parent);
            return this.registerTSNodeInNodeMap(c, Ie), this.inTypeMode = K, this.allowPattern = ce, Ie;
          }
          fixExports(c, M) {
            let q = (0, P.getModifiers)(c);
            if ((q == null ? void 0 : q[0].kind) === d.ExportKeyword) {
              this.registerTSNodeInNodeMap(c, M);
              let W = q[0], K = q[1], ce = K && K.kind === d.DefaultKeyword, Ie = ce ? (0, y.findNextToken)(K, this.ast, this.ast) : (0, y.findNextToken)(W, this.ast, this.ast);
              if (M.range[0] = Ie.getStart(this.ast), M.loc = (0, y.getLocFor)(M.range[0], M.range[1], this.ast), ce)
                return this.createNode(c, { type: m.AST_NODE_TYPES.ExportDefaultDeclaration, declaration: M, range: [W.getStart(this.ast), M.range[1]], exportKind: "value" });
              {
                let me = M.type === m.AST_NODE_TYPES.TSInterfaceDeclaration || M.type === m.AST_NODE_TYPES.TSTypeAliasDeclaration, Ae = "declare" in M && M.declare === true;
                return this.createNode(c, { type: m.AST_NODE_TYPES.ExportNamedDeclaration, declaration: M, specifiers: [], source: null, exportKind: me || Ae ? "type" : "value", range: [W.getStart(this.ast), M.range[1]], assertions: [] });
              }
            }
            return M;
          }
          registerTSNodeInNodeMap(c, M) {
            M && this.options.shouldPreserveNodeMaps && (this.tsNodeToESTreeNodeMap.has(c) || this.tsNodeToESTreeNodeMap.set(c, M));
          }
          convertPattern(c, M) {
            return this.converter(c, M, this.inTypeMode, true);
          }
          convertChild(c, M) {
            return this.converter(c, M, this.inTypeMode, false);
          }
          convertType(c, M) {
            return this.converter(c, M, true, false);
          }
          createNode(c, M) {
            let q = M;
            return q.range || (q.range = (0, y.getRange)(c, this.ast)), q.loc || (q.loc = (0, y.getLocFor)(q.range[0], q.range[1], this.ast)), q && this.options.shouldPreserveNodeMaps && this.esTreeNodeToTSNodeMap.set(q, c), q;
          }
          convertBindingNameWithTypeAnnotation(c, M, q) {
            let W = this.convertPattern(c);
            return M && (W.typeAnnotation = this.convertTypeAnnotation(M, q), this.fixParentLocation(W, W.typeAnnotation.range)), W;
          }
          convertTypeAnnotation(c, M) {
            let q = (M == null ? void 0 : M.kind) === d.FunctionType || (M == null ? void 0 : M.kind) === d.ConstructorType ? 2 : 1, W = c.getFullStart() - q, K = (0, y.getLocFor)(W, c.end, this.ast);
            return { type: m.AST_NODE_TYPES.TSTypeAnnotation, loc: K, range: [W, c.end], typeAnnotation: this.convertType(c) };
          }
          convertBodyExpressions(c, M) {
            let q = (0, y.canContainDirective)(M);
            return c.map((W) => {
              let K = this.convertChild(W);
              if (q)
                if (K != null && K.expression && D.isExpressionStatement(W) && D.isStringLiteral(W.expression)) {
                  let ce = K.expression.raw;
                  return K.directive = ce.slice(1, -1), K;
                } else
                  q = false;
              return K;
            }).filter((W) => W);
          }
          convertTypeArgumentsToTypeParameters(c, M) {
            let q = (0, y.findNextToken)(c, this.ast, this.ast);
            return this.createNode(M, { type: m.AST_NODE_TYPES.TSTypeParameterInstantiation, range: [c.pos - 1, q.end], params: c.map((W) => this.convertType(W)) });
          }
          convertTSTypeParametersToTypeParametersDeclaration(c) {
            let M = (0, y.findNextToken)(c, this.ast, this.ast);
            return { type: m.AST_NODE_TYPES.TSTypeParameterDeclaration, range: [c.pos - 1, M.end], loc: (0, y.getLocFor)(c.pos - 1, M.end, this.ast), params: c.map((q) => this.convertType(q)) };
          }
          convertParameters(c) {
            return c != null && c.length ? c.map((M) => {
              let q = this.convertChild(M), W = (0, P.getDecorators)(M);
              return W != null && W.length && (q.decorators = W.map((K) => this.convertChild(K))), q;
            }) : [];
          }
          convertChainExpression(c, M) {
            let { child: q, isOptional: W } = (() => c.type === m.AST_NODE_TYPES.MemberExpression ? { child: c.object, isOptional: c.optional } : c.type === m.AST_NODE_TYPES.CallExpression ? { child: c.callee, isOptional: c.optional } : { child: c.expression, isOptional: false })(), K = (0, y.isChildUnwrappableOptionalChain)(M, q);
            if (!K && !W)
              return c;
            if (K && (0, y.isChainExpression)(q)) {
              let ce = q.expression;
              c.type === m.AST_NODE_TYPES.MemberExpression ? c.object = ce : c.type === m.AST_NODE_TYPES.CallExpression ? c.callee = ce : c.expression = ce;
            }
            return this.createNode(M, { type: m.AST_NODE_TYPES.ChainExpression, expression: c });
          }
          deeplyCopy(c) {
            if (c.kind === D.SyntaxKind.JSDocFunctionType)
              throw (0, y.createError)(this.ast, c.pos, "JSDoc types can only be used inside documentation comments.");
            let M = `TS${d[c.kind]}`;
            if (this.options.errorOnUnknownASTType && !m.AST_NODE_TYPES[M])
              throw new Error(`Unknown AST_NODE_TYPE: "${M}"`);
            let q = this.createNode(c, { type: M });
            "type" in c && (q.typeAnnotation = c.type && "kind" in c.type && D.isTypeNode(c.type) ? this.convertTypeAnnotation(c.type, c) : null), "typeArguments" in c && (q.typeParameters = c.typeArguments && "pos" in c.typeArguments ? this.convertTypeArgumentsToTypeParameters(c.typeArguments, c) : null), "typeParameters" in c && (q.typeParameters = c.typeParameters && "pos" in c.typeParameters ? this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters) : null);
            let W = (0, P.getDecorators)(c);
            W != null && W.length && (q.decorators = W.map((ce) => this.convertChild(ce)));
            let K = /* @__PURE__ */ new Set(["_children", "decorators", "end", "flags", "illegalDecorators", "heritageClauses", "locals", "localSymbol", "jsDoc", "kind", "modifierFlagsCache", "modifiers", "nextContainer", "parent", "pos", "symbol", "transformFlags", "type", "typeArguments", "typeParameters"]);
            return Object.entries(c).filter((ce) => {
              let [Ie] = ce;
              return !K.has(Ie);
            }).forEach((ce) => {
              let [Ie, me] = ce;
              Array.isArray(me) ? q[Ie] = me.map((Ae) => this.convertChild(Ae)) : me && typeof me == "object" && me.kind ? q[Ie] = this.convertChild(me) : q[Ie] = me;
            }), q;
          }
          convertJSXIdentifier(c) {
            let M = this.createNode(c, { type: m.AST_NODE_TYPES.JSXIdentifier, name: c.getText() });
            return this.registerTSNodeInNodeMap(c, M), M;
          }
          convertJSXNamespaceOrIdentifier(c) {
            let M = c.getText(), q = M.indexOf(":");
            if (q > 0) {
              let W = (0, y.getRange)(c, this.ast), K = this.createNode(c, { type: m.AST_NODE_TYPES.JSXNamespacedName, namespace: this.createNode(c, { type: m.AST_NODE_TYPES.JSXIdentifier, name: M.slice(0, q), range: [W[0], W[0] + q] }), name: this.createNode(c, { type: m.AST_NODE_TYPES.JSXIdentifier, name: M.slice(q + 1), range: [W[0] + q + 1, W[1]] }), range: W });
              return this.registerTSNodeInNodeMap(c, K), K;
            }
            return this.convertJSXIdentifier(c);
          }
          convertJSXTagName(c, M) {
            let q;
            switch (c.kind) {
              case d.PropertyAccessExpression:
                if (c.name.kind === d.PrivateIdentifier)
                  throw new Error("Non-private identifier expected.");
                q = this.createNode(c, { type: m.AST_NODE_TYPES.JSXMemberExpression, object: this.convertJSXTagName(c.expression, M), property: this.convertJSXIdentifier(c.name) });
                break;
              case d.ThisKeyword:
              case d.Identifier:
              default:
                return this.convertJSXNamespaceOrIdentifier(c);
            }
            return this.registerTSNodeInNodeMap(c, q), q;
          }
          convertMethodSignature(c) {
            let M = this.createNode(c, { type: m.AST_NODE_TYPES.TSMethodSignature, computed: (0, y.isComputedProperty)(c.name), key: this.convertChild(c.name), params: this.convertParameters(c.parameters), kind: (() => {
              switch (c.kind) {
                case d.GetAccessor:
                  return "get";
                case d.SetAccessor:
                  return "set";
                case d.MethodSignature:
                  return "method";
              }
            })() });
            (0, y.isOptional)(c) && (M.optional = true), c.type && (M.returnType = this.convertTypeAnnotation(c.type, c)), (0, y.hasModifier)(d.ReadonlyKeyword, c) && (M.readonly = true), c.typeParameters && (M.typeParameters = this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters));
            let q = (0, y.getTSNodeAccessibility)(c);
            return q && (M.accessibility = q), (0, y.hasModifier)(d.ExportKeyword, c) && (M.export = true), (0, y.hasModifier)(d.StaticKeyword, c) && (M.static = true), M;
          }
          convertAssertClasue(c) {
            return c === void 0 ? [] : c.elements.map((M) => this.convertChild(M));
          }
          applyModifiersToResult(c, M) {
            if (!M)
              return;
            let q = [];
            for (let W of M)
              switch (W.kind) {
                case d.ExportKeyword:
                case d.DefaultKeyword:
                  break;
                case d.ConstKeyword:
                  c.const = true;
                  break;
                case d.DeclareKeyword:
                  c.declare = true;
                  break;
                default:
                  q.push(this.convertChild(W));
                  break;
              }
            q.length > 0 && (c.modifiers = q);
          }
          fixParentLocation(c, M) {
            M[0] < c.range[0] && (c.range[0] = M[0], c.loc.start = (0, y.getLineAndCharacterFor)(c.range[0], this.ast)), M[1] > c.range[1] && (c.range[1] = M[1], c.loc.end = (0, y.getLineAndCharacterFor)(c.range[1], this.ast));
          }
          assertModuleSpecifier(c, M) {
            var q;
            if (!M && c.moduleSpecifier == null)
              throw (0, y.createError)(this.ast, c.pos, "Module specifier must be a string literal.");
            if (c.moduleSpecifier && ((q = c.moduleSpecifier) === null || q === void 0 ? void 0 : q.kind) !== d.StringLiteral)
              throw (0, y.createError)(this.ast, c.moduleSpecifier.pos, "Module specifier must be a string literal.");
          }
          convertNode(c, M) {
            var q, W, K, ce, Ie, me, Ae, te, he, Pe;
            switch (c.kind) {
              case d.SourceFile:
                return this.createNode(c, { type: m.AST_NODE_TYPES.Program, body: this.convertBodyExpressions(c.statements, c), sourceType: c.externalModuleIndicator ? "module" : "script", range: [c.getStart(this.ast), c.endOfFileToken.end] });
              case d.Block:
                return this.createNode(c, { type: m.AST_NODE_TYPES.BlockStatement, body: this.convertBodyExpressions(c.statements, c) });
              case d.Identifier:
                return (0, y.isThisInTypeQuery)(c) ? this.createNode(c, { type: m.AST_NODE_TYPES.ThisExpression }) : this.createNode(c, { type: m.AST_NODE_TYPES.Identifier, name: c.text });
              case d.PrivateIdentifier:
                return this.createNode(c, { type: m.AST_NODE_TYPES.PrivateIdentifier, name: c.text.slice(1) });
              case d.WithStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.WithStatement, object: this.convertChild(c.expression), body: this.convertChild(c.statement) });
              case d.ReturnStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ReturnStatement, argument: this.convertChild(c.expression) });
              case d.LabeledStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.LabeledStatement, label: this.convertChild(c.label), body: this.convertChild(c.statement) });
              case d.ContinueStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ContinueStatement, label: this.convertChild(c.label) });
              case d.BreakStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.BreakStatement, label: this.convertChild(c.label) });
              case d.IfStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.IfStatement, test: this.convertChild(c.expression), consequent: this.convertChild(c.thenStatement), alternate: this.convertChild(c.elseStatement) });
              case d.SwitchStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.SwitchStatement, discriminant: this.convertChild(c.expression), cases: c.caseBlock.clauses.map((R) => this.convertChild(R)) });
              case d.CaseClause:
              case d.DefaultClause:
                return this.createNode(c, { type: m.AST_NODE_TYPES.SwitchCase, test: c.kind === d.CaseClause ? this.convertChild(c.expression) : null, consequent: c.statements.map((R) => this.convertChild(R)) });
              case d.ThrowStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ThrowStatement, argument: this.convertChild(c.expression) });
              case d.TryStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TryStatement, block: this.convertChild(c.tryBlock), handler: this.convertChild(c.catchClause), finalizer: this.convertChild(c.finallyBlock) });
              case d.CatchClause:
                return this.createNode(c, { type: m.AST_NODE_TYPES.CatchClause, param: c.variableDeclaration ? this.convertBindingNameWithTypeAnnotation(c.variableDeclaration.name, c.variableDeclaration.type) : null, body: this.convertChild(c.block) });
              case d.WhileStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.WhileStatement, test: this.convertChild(c.expression), body: this.convertChild(c.statement) });
              case d.DoStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.DoWhileStatement, test: this.convertChild(c.expression), body: this.convertChild(c.statement) });
              case d.ForStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ForStatement, init: this.convertChild(c.initializer), test: this.convertChild(c.condition), update: this.convertChild(c.incrementor), body: this.convertChild(c.statement) });
              case d.ForInStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ForInStatement, left: this.convertPattern(c.initializer), right: this.convertChild(c.expression), body: this.convertChild(c.statement) });
              case d.ForOfStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ForOfStatement, left: this.convertPattern(c.initializer), right: this.convertChild(c.expression), body: this.convertChild(c.statement), await: Boolean(c.awaitModifier && c.awaitModifier.kind === d.AwaitKeyword) });
              case d.FunctionDeclaration: {
                let R = (0, y.hasModifier)(d.DeclareKeyword, c), pe = this.createNode(c, { type: R || !c.body ? m.AST_NODE_TYPES.TSDeclareFunction : m.AST_NODE_TYPES.FunctionDeclaration, id: this.convertChild(c.name), generator: !!c.asteriskToken, expression: false, async: (0, y.hasModifier)(d.AsyncKeyword, c), params: this.convertParameters(c.parameters), body: this.convertChild(c.body) || void 0 });
                return c.type && (pe.returnType = this.convertTypeAnnotation(c.type, c)), c.typeParameters && (pe.typeParameters = this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters)), R && (pe.declare = true), this.fixExports(c, pe);
              }
              case d.VariableDeclaration: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.VariableDeclarator, id: this.convertBindingNameWithTypeAnnotation(c.name, c.type, c), init: this.convertChild(c.initializer) });
                return c.exclamationToken && (R.definite = true), R;
              }
              case d.VariableStatement: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.VariableDeclaration, declarations: c.declarationList.declarations.map((pe) => this.convertChild(pe)), kind: (0, y.getDeclarationKind)(c.declarationList) });
                return (0, y.hasModifier)(d.DeclareKeyword, c) && (R.declare = true), this.fixExports(c, R);
              }
              case d.VariableDeclarationList:
                return this.createNode(c, { type: m.AST_NODE_TYPES.VariableDeclaration, declarations: c.declarations.map((R) => this.convertChild(R)), kind: (0, y.getDeclarationKind)(c) });
              case d.ExpressionStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ExpressionStatement, expression: this.convertChild(c.expression) });
              case d.ThisKeyword:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ThisExpression });
              case d.ArrayLiteralExpression:
                return this.allowPattern ? this.createNode(c, { type: m.AST_NODE_TYPES.ArrayPattern, elements: c.elements.map((R) => this.convertPattern(R)) }) : this.createNode(c, { type: m.AST_NODE_TYPES.ArrayExpression, elements: c.elements.map((R) => this.convertChild(R)) });
              case d.ObjectLiteralExpression:
                return this.allowPattern ? this.createNode(c, { type: m.AST_NODE_TYPES.ObjectPattern, properties: c.properties.map((R) => this.convertPattern(R)) }) : this.createNode(c, { type: m.AST_NODE_TYPES.ObjectExpression, properties: c.properties.map((R) => this.convertChild(R)) });
              case d.PropertyAssignment:
                return this.createNode(c, { type: m.AST_NODE_TYPES.Property, key: this.convertChild(c.name), value: this.converter(c.initializer, c, this.inTypeMode, this.allowPattern), computed: (0, y.isComputedProperty)(c.name), method: false, shorthand: false, kind: "init" });
              case d.ShorthandPropertyAssignment:
                return c.objectAssignmentInitializer ? this.createNode(c, { type: m.AST_NODE_TYPES.Property, key: this.convertChild(c.name), value: this.createNode(c, { type: m.AST_NODE_TYPES.AssignmentPattern, left: this.convertPattern(c.name), right: this.convertChild(c.objectAssignmentInitializer) }), computed: false, method: false, shorthand: true, kind: "init" }) : this.createNode(c, { type: m.AST_NODE_TYPES.Property, key: this.convertChild(c.name), value: this.convertChild(c.name), computed: false, method: false, shorthand: true, kind: "init" });
              case d.ComputedPropertyName:
                return this.convertChild(c.expression);
              case d.PropertyDeclaration: {
                let R = (0, y.hasModifier)(d.AbstractKeyword, c), pe = (0, y.hasModifier)(d.AccessorKeyword, c), ke = (() => pe ? R ? m.AST_NODE_TYPES.TSAbstractAccessorProperty : m.AST_NODE_TYPES.AccessorProperty : R ? m.AST_NODE_TYPES.TSAbstractPropertyDefinition : m.AST_NODE_TYPES.PropertyDefinition)(), Je = this.createNode(c, { type: ke, key: this.convertChild(c.name), value: R ? null : this.convertChild(c.initializer), computed: (0, y.isComputedProperty)(c.name), static: (0, y.hasModifier)(d.StaticKeyword, c), readonly: (0, y.hasModifier)(d.ReadonlyKeyword, c) || void 0, declare: (0, y.hasModifier)(d.DeclareKeyword, c), override: (0, y.hasModifier)(d.OverrideKeyword, c) });
                c.type && (Je.typeAnnotation = this.convertTypeAnnotation(c.type, c));
                let Xe = (0, P.getDecorators)(c);
                Xe && (Je.decorators = Xe.map((je) => this.convertChild(je)));
                let ee = (0, y.getTSNodeAccessibility)(c);
                return ee && (Je.accessibility = ee), (c.name.kind === d.Identifier || c.name.kind === d.ComputedPropertyName || c.name.kind === d.PrivateIdentifier) && c.questionToken && (Je.optional = true), c.exclamationToken && (Je.definite = true), Je.key.type === m.AST_NODE_TYPES.Literal && c.questionToken && (Je.optional = true), Je;
              }
              case d.GetAccessor:
              case d.SetAccessor:
                if (c.parent.kind === d.InterfaceDeclaration || c.parent.kind === d.TypeLiteral)
                  return this.convertMethodSignature(c);
              case d.MethodDeclaration: {
                let R = this.createNode(c, { type: c.body ? m.AST_NODE_TYPES.FunctionExpression : m.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, id: null, generator: !!c.asteriskToken, expression: false, async: (0, y.hasModifier)(d.AsyncKeyword, c), body: this.convertChild(c.body), range: [c.parameters.pos - 1, c.end], params: [] });
                c.type && (R.returnType = this.convertTypeAnnotation(c.type, c)), c.typeParameters && (R.typeParameters = this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters), this.fixParentLocation(R, R.typeParameters.range));
                let pe;
                if (M.kind === d.ObjectLiteralExpression)
                  R.params = c.parameters.map((ke) => this.convertChild(ke)), pe = this.createNode(c, { type: m.AST_NODE_TYPES.Property, key: this.convertChild(c.name), value: R, computed: (0, y.isComputedProperty)(c.name), method: c.kind === d.MethodDeclaration, shorthand: false, kind: "init" });
                else {
                  R.params = this.convertParameters(c.parameters);
                  let ke = (0, y.hasModifier)(d.AbstractKeyword, c) ? m.AST_NODE_TYPES.TSAbstractMethodDefinition : m.AST_NODE_TYPES.MethodDefinition;
                  pe = this.createNode(c, { type: ke, key: this.convertChild(c.name), value: R, computed: (0, y.isComputedProperty)(c.name), static: (0, y.hasModifier)(d.StaticKeyword, c), kind: "method", override: (0, y.hasModifier)(d.OverrideKeyword, c) });
                  let Je = (0, P.getDecorators)(c);
                  Je && (pe.decorators = Je.map((ee) => this.convertChild(ee)));
                  let Xe = (0, y.getTSNodeAccessibility)(c);
                  Xe && (pe.accessibility = Xe);
                }
                return c.questionToken && (pe.optional = true), c.kind === d.GetAccessor ? pe.kind = "get" : c.kind === d.SetAccessor ? pe.kind = "set" : !pe.static && c.name.kind === d.StringLiteral && c.name.text === "constructor" && pe.type !== m.AST_NODE_TYPES.Property && (pe.kind = "constructor"), pe;
              }
              case d.Constructor: {
                let R = (0, y.getLastModifier)(c), pe = R && (0, y.findNextToken)(R, c, this.ast) || c.getFirstToken(), ke = this.createNode(c, { type: c.body ? m.AST_NODE_TYPES.FunctionExpression : m.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, id: null, params: this.convertParameters(c.parameters), generator: false, expression: false, async: false, body: this.convertChild(c.body), range: [c.parameters.pos - 1, c.end] });
                c.typeParameters && (ke.typeParameters = this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters), this.fixParentLocation(ke, ke.typeParameters.range)), c.type && (ke.returnType = this.convertTypeAnnotation(c.type, c));
                let Je = this.createNode(c, { type: m.AST_NODE_TYPES.Identifier, name: "constructor", range: [pe.getStart(this.ast), pe.end] }), Xe = (0, y.hasModifier)(d.StaticKeyword, c), ee = this.createNode(c, { type: (0, y.hasModifier)(d.AbstractKeyword, c) ? m.AST_NODE_TYPES.TSAbstractMethodDefinition : m.AST_NODE_TYPES.MethodDefinition, key: Je, value: ke, computed: false, static: Xe, kind: Xe ? "method" : "constructor", override: false }), je = (0, y.getTSNodeAccessibility)(c);
                return je && (ee.accessibility = je), ee;
              }
              case d.FunctionExpression: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.FunctionExpression, id: this.convertChild(c.name), generator: !!c.asteriskToken, params: this.convertParameters(c.parameters), body: this.convertChild(c.body), async: (0, y.hasModifier)(d.AsyncKeyword, c), expression: false });
                return c.type && (R.returnType = this.convertTypeAnnotation(c.type, c)), c.typeParameters && (R.typeParameters = this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters)), R;
              }
              case d.SuperKeyword:
                return this.createNode(c, { type: m.AST_NODE_TYPES.Super });
              case d.ArrayBindingPattern:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ArrayPattern, elements: c.elements.map((R) => this.convertPattern(R)) });
              case d.OmittedExpression:
                return null;
              case d.ObjectBindingPattern:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ObjectPattern, properties: c.elements.map((R) => this.convertPattern(R)) });
              case d.BindingElement:
                if (M.kind === d.ArrayBindingPattern) {
                  let R = this.convertChild(c.name, M);
                  return c.initializer ? this.createNode(c, { type: m.AST_NODE_TYPES.AssignmentPattern, left: R, right: this.convertChild(c.initializer) }) : c.dotDotDotToken ? this.createNode(c, { type: m.AST_NODE_TYPES.RestElement, argument: R }) : R;
                } else {
                  let R;
                  return c.dotDotDotToken ? R = this.createNode(c, { type: m.AST_NODE_TYPES.RestElement, argument: this.convertChild((q = c.propertyName) !== null && q !== void 0 ? q : c.name) }) : R = this.createNode(c, { type: m.AST_NODE_TYPES.Property, key: this.convertChild((W = c.propertyName) !== null && W !== void 0 ? W : c.name), value: this.convertChild(c.name), computed: Boolean(c.propertyName && c.propertyName.kind === d.ComputedPropertyName), method: false, shorthand: !c.propertyName, kind: "init" }), c.initializer && (R.value = this.createNode(c, { type: m.AST_NODE_TYPES.AssignmentPattern, left: this.convertChild(c.name), right: this.convertChild(c.initializer), range: [c.name.getStart(this.ast), c.initializer.end] })), R;
                }
              case d.ArrowFunction: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.ArrowFunctionExpression, generator: false, id: null, params: this.convertParameters(c.parameters), body: this.convertChild(c.body), async: (0, y.hasModifier)(d.AsyncKeyword, c), expression: c.body.kind !== d.Block });
                return c.type && (R.returnType = this.convertTypeAnnotation(c.type, c)), c.typeParameters && (R.typeParameters = this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters)), R;
              }
              case d.YieldExpression:
                return this.createNode(c, { type: m.AST_NODE_TYPES.YieldExpression, delegate: !!c.asteriskToken, argument: this.convertChild(c.expression) });
              case d.AwaitExpression:
                return this.createNode(c, { type: m.AST_NODE_TYPES.AwaitExpression, argument: this.convertChild(c.expression) });
              case d.NoSubstitutionTemplateLiteral:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TemplateLiteral, quasis: [this.createNode(c, { type: m.AST_NODE_TYPES.TemplateElement, value: { raw: this.ast.text.slice(c.getStart(this.ast) + 1, c.end - 1), cooked: c.text }, tail: true })], expressions: [] });
              case d.TemplateExpression: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TemplateLiteral, quasis: [this.convertChild(c.head)], expressions: [] });
                return c.templateSpans.forEach((pe) => {
                  R.expressions.push(this.convertChild(pe.expression)), R.quasis.push(this.convertChild(pe.literal));
                }), R;
              }
              case d.TaggedTemplateExpression:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TaggedTemplateExpression, typeParameters: c.typeArguments ? this.convertTypeArgumentsToTypeParameters(c.typeArguments, c) : void 0, tag: this.convertChild(c.tag), quasi: this.convertChild(c.template) });
              case d.TemplateHead:
              case d.TemplateMiddle:
              case d.TemplateTail: {
                let R = c.kind === d.TemplateTail;
                return this.createNode(c, { type: m.AST_NODE_TYPES.TemplateElement, value: { raw: this.ast.text.slice(c.getStart(this.ast) + 1, c.end - (R ? 1 : 2)), cooked: c.text }, tail: R });
              }
              case d.SpreadAssignment:
              case d.SpreadElement:
                return this.allowPattern ? this.createNode(c, { type: m.AST_NODE_TYPES.RestElement, argument: this.convertPattern(c.expression) }) : this.createNode(c, { type: m.AST_NODE_TYPES.SpreadElement, argument: this.convertChild(c.expression) });
              case d.Parameter: {
                let R, pe;
                return c.dotDotDotToken ? R = pe = this.createNode(c, { type: m.AST_NODE_TYPES.RestElement, argument: this.convertChild(c.name) }) : c.initializer ? (R = this.convertChild(c.name), pe = this.createNode(c, { type: m.AST_NODE_TYPES.AssignmentPattern, left: R, right: this.convertChild(c.initializer) }), (0, P.getModifiers)(c) && (pe.range[0] = R.range[0], pe.loc = (0, y.getLocFor)(pe.range[0], pe.range[1], this.ast))) : R = pe = this.convertChild(c.name, M), c.type && (R.typeAnnotation = this.convertTypeAnnotation(c.type, c), this.fixParentLocation(R, R.typeAnnotation.range)), c.questionToken && (c.questionToken.end > R.range[1] && (R.range[1] = c.questionToken.end, R.loc.end = (0, y.getLineAndCharacterFor)(R.range[1], this.ast)), R.optional = true), (0, P.getModifiers)(c) ? this.createNode(c, { type: m.AST_NODE_TYPES.TSParameterProperty, accessibility: (K = (0, y.getTSNodeAccessibility)(c)) !== null && K !== void 0 ? K : void 0, readonly: (0, y.hasModifier)(d.ReadonlyKeyword, c) || void 0, static: (0, y.hasModifier)(d.StaticKeyword, c) || void 0, export: (0, y.hasModifier)(d.ExportKeyword, c) || void 0, override: (0, y.hasModifier)(d.OverrideKeyword, c) || void 0, parameter: pe }) : pe;
              }
              case d.ClassDeclaration:
              case d.ClassExpression: {
                let R = (ce = c.heritageClauses) !== null && ce !== void 0 ? ce : [], pe = c.kind === d.ClassDeclaration ? m.AST_NODE_TYPES.ClassDeclaration : m.AST_NODE_TYPES.ClassExpression, ke = R.find((nt) => nt.token === d.ExtendsKeyword), Je = R.find((nt) => nt.token === d.ImplementsKeyword), Xe = this.createNode(c, { type: pe, id: this.convertChild(c.name), body: this.createNode(c, { type: m.AST_NODE_TYPES.ClassBody, body: [], range: [c.members.pos - 1, c.end] }), superClass: ke != null && ke.types[0] ? this.convertChild(ke.types[0].expression) : null });
                if (ke) {
                  if (ke.types.length > 1)
                    throw (0, y.createError)(this.ast, ke.types[1].pos, "Classes can only extend a single class.");
                  !((Ie = ke.types[0]) === null || Ie === void 0) && Ie.typeArguments && (Xe.superTypeParameters = this.convertTypeArgumentsToTypeParameters(ke.types[0].typeArguments, ke.types[0]));
                }
                c.typeParameters && (Xe.typeParameters = this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters)), Je && (Xe.implements = Je.types.map((nt) => this.convertChild(nt))), (0, y.hasModifier)(d.AbstractKeyword, c) && (Xe.abstract = true), (0, y.hasModifier)(d.DeclareKeyword, c) && (Xe.declare = true);
                let ee = (0, P.getDecorators)(c);
                ee && (Xe.decorators = ee.map((nt) => this.convertChild(nt)));
                let je = c.members.filter(y.isESTreeClassMember);
                return je.length && (Xe.body.body = je.map((nt) => this.convertChild(nt))), this.fixExports(c, Xe);
              }
              case d.ModuleBlock:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSModuleBlock, body: this.convertBodyExpressions(c.statements, c) });
              case d.ImportDeclaration: {
                this.assertModuleSpecifier(c, false);
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.ImportDeclaration, source: this.convertChild(c.moduleSpecifier), specifiers: [], importKind: "value", assertions: this.convertAssertClasue(c.assertClause) });
                if (c.importClause && (c.importClause.isTypeOnly && (R.importKind = "type"), c.importClause.name && R.specifiers.push(this.convertChild(c.importClause)), c.importClause.namedBindings))
                  switch (c.importClause.namedBindings.kind) {
                    case d.NamespaceImport:
                      R.specifiers.push(this.convertChild(c.importClause.namedBindings));
                      break;
                    case d.NamedImports:
                      R.specifiers = R.specifiers.concat(c.importClause.namedBindings.elements.map((pe) => this.convertChild(pe)));
                      break;
                  }
                return R;
              }
              case d.NamespaceImport:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ImportNamespaceSpecifier, local: this.convertChild(c.name) });
              case d.ImportSpecifier:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ImportSpecifier, local: this.convertChild(c.name), imported: this.convertChild((me = c.propertyName) !== null && me !== void 0 ? me : c.name), importKind: c.isTypeOnly ? "type" : "value" });
              case d.ImportClause: {
                let R = this.convertChild(c.name);
                return this.createNode(c, { type: m.AST_NODE_TYPES.ImportDefaultSpecifier, local: R, range: R.range });
              }
              case d.ExportDeclaration:
                return ((Ae = c.exportClause) === null || Ae === void 0 ? void 0 : Ae.kind) === d.NamedExports ? (this.assertModuleSpecifier(c, true), this.createNode(c, { type: m.AST_NODE_TYPES.ExportNamedDeclaration, source: this.convertChild(c.moduleSpecifier), specifiers: c.exportClause.elements.map((R) => this.convertChild(R)), exportKind: c.isTypeOnly ? "type" : "value", declaration: null, assertions: this.convertAssertClasue(c.assertClause) })) : (this.assertModuleSpecifier(c, false), this.createNode(c, { type: m.AST_NODE_TYPES.ExportAllDeclaration, source: this.convertChild(c.moduleSpecifier), exportKind: c.isTypeOnly ? "type" : "value", exported: c.exportClause && c.exportClause.kind === d.NamespaceExport ? this.convertChild(c.exportClause.name) : null, assertions: this.convertAssertClasue(c.assertClause) }));
              case d.ExportSpecifier:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ExportSpecifier, local: this.convertChild((te = c.propertyName) !== null && te !== void 0 ? te : c.name), exported: this.convertChild(c.name), exportKind: c.isTypeOnly ? "type" : "value" });
              case d.ExportAssignment:
                return c.isExportEquals ? this.createNode(c, { type: m.AST_NODE_TYPES.TSExportAssignment, expression: this.convertChild(c.expression) }) : this.createNode(c, { type: m.AST_NODE_TYPES.ExportDefaultDeclaration, declaration: this.convertChild(c.expression), exportKind: "value" });
              case d.PrefixUnaryExpression:
              case d.PostfixUnaryExpression: {
                let R = (0, y.getTextForTokenKind)(c.operator);
                return R === "++" || R === "--" ? this.createNode(c, { type: m.AST_NODE_TYPES.UpdateExpression, operator: R, prefix: c.kind === d.PrefixUnaryExpression, argument: this.convertChild(c.operand) }) : this.createNode(c, { type: m.AST_NODE_TYPES.UnaryExpression, operator: R, prefix: c.kind === d.PrefixUnaryExpression, argument: this.convertChild(c.operand) });
              }
              case d.DeleteExpression:
                return this.createNode(c, { type: m.AST_NODE_TYPES.UnaryExpression, operator: "delete", prefix: true, argument: this.convertChild(c.expression) });
              case d.VoidExpression:
                return this.createNode(c, { type: m.AST_NODE_TYPES.UnaryExpression, operator: "void", prefix: true, argument: this.convertChild(c.expression) });
              case d.TypeOfExpression:
                return this.createNode(c, { type: m.AST_NODE_TYPES.UnaryExpression, operator: "typeof", prefix: true, argument: this.convertChild(c.expression) });
              case d.TypeOperator:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSTypeOperator, operator: (0, y.getTextForTokenKind)(c.operator), typeAnnotation: this.convertChild(c.type) });
              case d.BinaryExpression:
                if ((0, y.isComma)(c.operatorToken)) {
                  let R = this.createNode(c, { type: m.AST_NODE_TYPES.SequenceExpression, expressions: [] }), pe = this.convertChild(c.left);
                  return pe.type === m.AST_NODE_TYPES.SequenceExpression && c.left.kind !== d.ParenthesizedExpression ? R.expressions = R.expressions.concat(pe.expressions) : R.expressions.push(pe), R.expressions.push(this.convertChild(c.right)), R;
                } else {
                  let R = (0, y.getBinaryExpressionType)(c.operatorToken);
                  return this.allowPattern && R === m.AST_NODE_TYPES.AssignmentExpression ? this.createNode(c, { type: m.AST_NODE_TYPES.AssignmentPattern, left: this.convertPattern(c.left, c), right: this.convertChild(c.right) }) : this.createNode(c, { type: R, operator: (0, y.getTextForTokenKind)(c.operatorToken.kind), left: this.converter(c.left, c, this.inTypeMode, R === m.AST_NODE_TYPES.AssignmentExpression), right: this.convertChild(c.right) });
                }
              case d.PropertyAccessExpression: {
                let R = this.convertChild(c.expression), pe = this.convertChild(c.name), ke = false, Je = this.createNode(c, { type: m.AST_NODE_TYPES.MemberExpression, object: R, property: pe, computed: ke, optional: c.questionDotToken !== void 0 });
                return this.convertChainExpression(Je, c);
              }
              case d.ElementAccessExpression: {
                let R = this.convertChild(c.expression), pe = this.convertChild(c.argumentExpression), ke = true, Je = this.createNode(c, { type: m.AST_NODE_TYPES.MemberExpression, object: R, property: pe, computed: ke, optional: c.questionDotToken !== void 0 });
                return this.convertChainExpression(Je, c);
              }
              case d.CallExpression: {
                if (c.expression.kind === d.ImportKeyword) {
                  if (c.arguments.length !== 1 && c.arguments.length !== 2)
                    throw (0, y.createError)(this.ast, c.arguments.pos, "Dynamic import requires exactly one or two arguments.");
                  return this.createNode(c, { type: m.AST_NODE_TYPES.ImportExpression, source: this.convertChild(c.arguments[0]), attributes: c.arguments[1] ? this.convertChild(c.arguments[1]) : null });
                }
                let R = this.convertChild(c.expression), pe = c.arguments.map((Je) => this.convertChild(Je)), ke = this.createNode(c, { type: m.AST_NODE_TYPES.CallExpression, callee: R, arguments: pe, optional: c.questionDotToken !== void 0 });
                return c.typeArguments && (ke.typeParameters = this.convertTypeArgumentsToTypeParameters(c.typeArguments, c)), this.convertChainExpression(ke, c);
              }
              case d.NewExpression: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.NewExpression, callee: this.convertChild(c.expression), arguments: c.arguments ? c.arguments.map((pe) => this.convertChild(pe)) : [] });
                return c.typeArguments && (R.typeParameters = this.convertTypeArgumentsToTypeParameters(c.typeArguments, c)), R;
              }
              case d.ConditionalExpression:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ConditionalExpression, test: this.convertChild(c.condition), consequent: this.convertChild(c.whenTrue), alternate: this.convertChild(c.whenFalse) });
              case d.MetaProperty:
                return this.createNode(c, { type: m.AST_NODE_TYPES.MetaProperty, meta: this.createNode(c.getFirstToken(), { type: m.AST_NODE_TYPES.Identifier, name: (0, y.getTextForTokenKind)(c.keywordToken) }), property: this.convertChild(c.name) });
              case d.Decorator:
                return this.createNode(c, { type: m.AST_NODE_TYPES.Decorator, expression: this.convertChild(c.expression) });
              case d.StringLiteral:
                return this.createNode(c, { type: m.AST_NODE_TYPES.Literal, value: M.kind === d.JsxAttribute ? (0, y.unescapeStringLiteralText)(c.text) : c.text, raw: c.getText() });
              case d.NumericLiteral:
                return this.createNode(c, { type: m.AST_NODE_TYPES.Literal, value: Number(c.text), raw: c.getText() });
              case d.BigIntLiteral: {
                let R = (0, y.getRange)(c, this.ast), pe = this.ast.text.slice(R[0], R[1]), ke = pe.slice(0, -1).replace(/_/g, ""), Je = typeof BigInt < "u" ? BigInt(ke) : null;
                return this.createNode(c, { type: m.AST_NODE_TYPES.Literal, raw: pe, value: Je, bigint: Je == null ? ke : String(Je), range: R });
              }
              case d.RegularExpressionLiteral: {
                let R = c.text.slice(1, c.text.lastIndexOf("/")), pe = c.text.slice(c.text.lastIndexOf("/") + 1), ke = null;
                try {
                  ke = new RegExp(R, pe);
                } catch {
                  ke = null;
                }
                return this.createNode(c, { type: m.AST_NODE_TYPES.Literal, value: ke, raw: c.text, regex: { pattern: R, flags: pe } });
              }
              case d.TrueKeyword:
                return this.createNode(c, { type: m.AST_NODE_TYPES.Literal, value: true, raw: "true" });
              case d.FalseKeyword:
                return this.createNode(c, { type: m.AST_NODE_TYPES.Literal, value: false, raw: "false" });
              case d.NullKeyword:
                return !C.typescriptVersionIsAtLeast["4.0"] && this.inTypeMode ? this.createNode(c, { type: m.AST_NODE_TYPES.TSNullKeyword }) : this.createNode(c, { type: m.AST_NODE_TYPES.Literal, value: null, raw: "null" });
              case d.EmptyStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.EmptyStatement });
              case d.DebuggerStatement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.DebuggerStatement });
              case d.JsxElement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.JSXElement, openingElement: this.convertChild(c.openingElement), closingElement: this.convertChild(c.closingElement), children: c.children.map((R) => this.convertChild(R)) });
              case d.JsxFragment:
                return this.createNode(c, { type: m.AST_NODE_TYPES.JSXFragment, openingFragment: this.convertChild(c.openingFragment), closingFragment: this.convertChild(c.closingFragment), children: c.children.map((R) => this.convertChild(R)) });
              case d.JsxSelfClosingElement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.JSXElement, openingElement: this.createNode(c, { type: m.AST_NODE_TYPES.JSXOpeningElement, typeParameters: c.typeArguments ? this.convertTypeArgumentsToTypeParameters(c.typeArguments, c) : void 0, selfClosing: true, name: this.convertJSXTagName(c.tagName, c), attributes: c.attributes.properties.map((R) => this.convertChild(R)), range: (0, y.getRange)(c, this.ast) }), closingElement: null, children: [] });
              case d.JsxOpeningElement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.JSXOpeningElement, typeParameters: c.typeArguments ? this.convertTypeArgumentsToTypeParameters(c.typeArguments, c) : void 0, selfClosing: false, name: this.convertJSXTagName(c.tagName, c), attributes: c.attributes.properties.map((R) => this.convertChild(R)) });
              case d.JsxClosingElement:
                return this.createNode(c, { type: m.AST_NODE_TYPES.JSXClosingElement, name: this.convertJSXTagName(c.tagName, c) });
              case d.JsxOpeningFragment:
                return this.createNode(c, { type: m.AST_NODE_TYPES.JSXOpeningFragment });
              case d.JsxClosingFragment:
                return this.createNode(c, { type: m.AST_NODE_TYPES.JSXClosingFragment });
              case d.JsxExpression: {
                let R = c.expression ? this.convertChild(c.expression) : this.createNode(c, { type: m.AST_NODE_TYPES.JSXEmptyExpression, range: [c.getStart(this.ast) + 1, c.getEnd() - 1] });
                return c.dotDotDotToken ? this.createNode(c, { type: m.AST_NODE_TYPES.JSXSpreadChild, expression: R }) : this.createNode(c, { type: m.AST_NODE_TYPES.JSXExpressionContainer, expression: R });
              }
              case d.JsxAttribute:
                return this.createNode(c, { type: m.AST_NODE_TYPES.JSXAttribute, name: this.convertJSXNamespaceOrIdentifier(c.name), value: this.convertChild(c.initializer) });
              case d.JsxText: {
                let R = c.getFullStart(), pe = c.getEnd(), ke = this.ast.text.slice(R, pe);
                return this.createNode(c, { type: m.AST_NODE_TYPES.JSXText, value: (0, y.unescapeStringLiteralText)(ke), raw: ke, range: [R, pe] });
              }
              case d.JsxSpreadAttribute:
                return this.createNode(c, { type: m.AST_NODE_TYPES.JSXSpreadAttribute, argument: this.convertChild(c.expression) });
              case d.QualifiedName:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSQualifiedName, left: this.convertChild(c.left), right: this.convertChild(c.right) });
              case d.TypeReference:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSTypeReference, typeName: this.convertType(c.typeName), typeParameters: c.typeArguments ? this.convertTypeArgumentsToTypeParameters(c.typeArguments, c) : void 0 });
              case d.TypeParameter:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSTypeParameter, name: this.convertType(c.name), constraint: c.constraint ? this.convertType(c.constraint) : void 0, default: c.default ? this.convertType(c.default) : void 0, in: (0, y.hasModifier)(d.InKeyword, c), out: (0, y.hasModifier)(d.OutKeyword, c), const: (0, y.hasModifier)(d.ConstKeyword, c) });
              case d.ThisType:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSThisType });
              case d.AnyKeyword:
              case d.BigIntKeyword:
              case d.BooleanKeyword:
              case d.NeverKeyword:
              case d.NumberKeyword:
              case d.ObjectKeyword:
              case d.StringKeyword:
              case d.SymbolKeyword:
              case d.UnknownKeyword:
              case d.VoidKeyword:
              case d.UndefinedKeyword:
              case d.IntrinsicKeyword:
                return this.createNode(c, { type: m.AST_NODE_TYPES[`TS${d[c.kind]}`] });
              case d.NonNullExpression: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TSNonNullExpression, expression: this.convertChild(c.expression) });
                return this.convertChainExpression(R, c);
              }
              case d.TypeLiteral:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSTypeLiteral, members: c.members.map((R) => this.convertChild(R)) });
              case d.ArrayType:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSArrayType, elementType: this.convertType(c.elementType) });
              case d.IndexedAccessType:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSIndexedAccessType, objectType: this.convertType(c.objectType), indexType: this.convertType(c.indexType) });
              case d.ConditionalType:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSConditionalType, checkType: this.convertType(c.checkType), extendsType: this.convertType(c.extendsType), trueType: this.convertType(c.trueType), falseType: this.convertType(c.falseType) });
              case d.TypeQuery:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSTypeQuery, exprName: this.convertType(c.exprName), typeParameters: c.typeArguments && this.convertTypeArgumentsToTypeParameters(c.typeArguments, c) });
              case d.MappedType: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TSMappedType, typeParameter: this.convertType(c.typeParameter), nameType: (he = this.convertType(c.nameType)) !== null && he !== void 0 ? he : null });
                return c.readonlyToken && (c.readonlyToken.kind === d.ReadonlyKeyword ? R.readonly = true : R.readonly = (0, y.getTextForTokenKind)(c.readonlyToken.kind)), c.questionToken && (c.questionToken.kind === d.QuestionToken ? R.optional = true : R.optional = (0, y.getTextForTokenKind)(c.questionToken.kind)), c.type && (R.typeAnnotation = this.convertType(c.type)), R;
              }
              case d.ParenthesizedExpression:
                return this.convertChild(c.expression, M);
              case d.TypeAliasDeclaration: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TSTypeAliasDeclaration, id: this.convertChild(c.name), typeAnnotation: this.convertType(c.type) });
                return (0, y.hasModifier)(d.DeclareKeyword, c) && (R.declare = true), c.typeParameters && (R.typeParameters = this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters)), this.fixExports(c, R);
              }
              case d.MethodSignature:
                return this.convertMethodSignature(c);
              case d.PropertySignature: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TSPropertySignature, optional: (0, y.isOptional)(c) || void 0, computed: (0, y.isComputedProperty)(c.name), key: this.convertChild(c.name), typeAnnotation: c.type ? this.convertTypeAnnotation(c.type, c) : void 0, initializer: this.convertChild(c.initializer) || void 0, readonly: (0, y.hasModifier)(d.ReadonlyKeyword, c) || void 0, static: (0, y.hasModifier)(d.StaticKeyword, c) || void 0, export: (0, y.hasModifier)(d.ExportKeyword, c) || void 0 }), pe = (0, y.getTSNodeAccessibility)(c);
                return pe && (R.accessibility = pe), R;
              }
              case d.IndexSignature: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TSIndexSignature, parameters: c.parameters.map((ke) => this.convertChild(ke)) });
                c.type && (R.typeAnnotation = this.convertTypeAnnotation(c.type, c)), (0, y.hasModifier)(d.ReadonlyKeyword, c) && (R.readonly = true);
                let pe = (0, y.getTSNodeAccessibility)(c);
                return pe && (R.accessibility = pe), (0, y.hasModifier)(d.ExportKeyword, c) && (R.export = true), (0, y.hasModifier)(d.StaticKeyword, c) && (R.static = true), R;
              }
              case d.ConstructorType: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TSConstructorType, params: this.convertParameters(c.parameters), abstract: (0, y.hasModifier)(d.AbstractKeyword, c) });
                return c.type && (R.returnType = this.convertTypeAnnotation(c.type, c)), c.typeParameters && (R.typeParameters = this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters)), R;
              }
              case d.FunctionType:
              case d.ConstructSignature:
              case d.CallSignature: {
                let R = c.kind === d.ConstructSignature ? m.AST_NODE_TYPES.TSConstructSignatureDeclaration : c.kind === d.CallSignature ? m.AST_NODE_TYPES.TSCallSignatureDeclaration : m.AST_NODE_TYPES.TSFunctionType, pe = this.createNode(c, { type: R, params: this.convertParameters(c.parameters) });
                return c.type && (pe.returnType = this.convertTypeAnnotation(c.type, c)), c.typeParameters && (pe.typeParameters = this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters)), pe;
              }
              case d.ExpressionWithTypeArguments: {
                let R = M.kind, pe = R === d.InterfaceDeclaration ? m.AST_NODE_TYPES.TSInterfaceHeritage : R === d.HeritageClause ? m.AST_NODE_TYPES.TSClassImplements : m.AST_NODE_TYPES.TSInstantiationExpression, ke = this.createNode(c, { type: pe, expression: this.convertChild(c.expression) });
                return c.typeArguments && (ke.typeParameters = this.convertTypeArgumentsToTypeParameters(c.typeArguments, c)), ke;
              }
              case d.InterfaceDeclaration: {
                let R = (Pe = c.heritageClauses) !== null && Pe !== void 0 ? Pe : [], pe = this.createNode(c, { type: m.AST_NODE_TYPES.TSInterfaceDeclaration, body: this.createNode(c, { type: m.AST_NODE_TYPES.TSInterfaceBody, body: c.members.map((ke) => this.convertChild(ke)), range: [c.members.pos - 1, c.end] }), id: this.convertChild(c.name) });
                if (c.typeParameters && (pe.typeParameters = this.convertTSTypeParametersToTypeParametersDeclaration(c.typeParameters)), R.length > 0) {
                  let ke = [], Je = [];
                  for (let Xe of R)
                    if (Xe.token === d.ExtendsKeyword)
                      for (let ee of Xe.types)
                        ke.push(this.convertChild(ee, c));
                    else
                      for (let ee of Xe.types)
                        Je.push(this.convertChild(ee, c));
                  ke.length && (pe.extends = ke), Je.length && (pe.implements = Je);
                }
                return (0, y.hasModifier)(d.AbstractKeyword, c) && (pe.abstract = true), (0, y.hasModifier)(d.DeclareKeyword, c) && (pe.declare = true), this.fixExports(c, pe);
              }
              case d.TypePredicate: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TSTypePredicate, asserts: c.assertsModifier !== void 0, parameterName: this.convertChild(c.parameterName), typeAnnotation: null });
                return c.type && (R.typeAnnotation = this.convertTypeAnnotation(c.type, c), R.typeAnnotation.loc = R.typeAnnotation.typeAnnotation.loc, R.typeAnnotation.range = R.typeAnnotation.typeAnnotation.range), R;
              }
              case d.ImportType:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSImportType, isTypeOf: !!c.isTypeOf, parameter: this.convertChild(c.argument), qualifier: this.convertChild(c.qualifier), typeParameters: c.typeArguments ? this.convertTypeArgumentsToTypeParameters(c.typeArguments, c) : null });
              case d.EnumDeclaration: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TSEnumDeclaration, id: this.convertChild(c.name), members: c.members.map((pe) => this.convertChild(pe)) });
                return this.applyModifiersToResult(R, (0, P.getModifiers)(c)), this.fixExports(c, R);
              }
              case d.EnumMember: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TSEnumMember, id: this.convertChild(c.name) });
                return c.initializer && (R.initializer = this.convertChild(c.initializer)), c.name.kind === D.SyntaxKind.ComputedPropertyName && (R.computed = true), R;
              }
              case d.ModuleDeclaration: {
                let R = this.createNode(c, Object.assign({ type: m.AST_NODE_TYPES.TSModuleDeclaration }, (() => {
                  let pe = this.convertChild(c.name), ke = this.convertChild(c.body);
                  if (c.flags & D.NodeFlags.GlobalAugmentation) {
                    if (ke == null || ke.type === m.AST_NODE_TYPES.TSModuleDeclaration)
                      throw new Error("Expected a valid module body");
                    if (pe.type !== m.AST_NODE_TYPES.Identifier)
                      throw new Error("global module augmentation must have an Identifier id");
                    return { kind: "global", id: pe, body: ke, global: true };
                  } else if (c.flags & D.NodeFlags.Namespace) {
                    if (ke == null)
                      throw new Error("Expected a module body");
                    if (pe.type !== m.AST_NODE_TYPES.Identifier)
                      throw new Error("`namespace`s must have an Identifier id");
                    return { kind: "namespace", id: pe, body: ke };
                  } else
                    return Object.assign({ kind: "module", id: pe }, ke != null ? { body: ke } : {});
                })()));
                return this.applyModifiersToResult(R, (0, P.getModifiers)(c)), this.fixExports(c, R);
              }
              case d.ParenthesizedType:
                return this.convertType(c.type);
              case d.UnionType:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSUnionType, types: c.types.map((R) => this.convertType(R)) });
              case d.IntersectionType:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSIntersectionType, types: c.types.map((R) => this.convertType(R)) });
              case d.AsExpression:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSAsExpression, expression: this.convertChild(c.expression), typeAnnotation: this.convertType(c.type) });
              case d.InferType:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSInferType, typeParameter: this.convertType(c.typeParameter) });
              case d.LiteralType:
                return C.typescriptVersionIsAtLeast["4.0"] && c.literal.kind === d.NullKeyword ? this.createNode(c.literal, { type: m.AST_NODE_TYPES.TSNullKeyword }) : this.createNode(c, { type: m.AST_NODE_TYPES.TSLiteralType, literal: this.convertType(c.literal) });
              case d.TypeAssertionExpression:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSTypeAssertion, typeAnnotation: this.convertType(c.type), expression: this.convertChild(c.expression) });
              case d.ImportEqualsDeclaration:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSImportEqualsDeclaration, id: this.convertChild(c.name), moduleReference: this.convertChild(c.moduleReference), importKind: c.isTypeOnly ? "type" : "value", isExport: (0, y.hasModifier)(d.ExportKeyword, c) });
              case d.ExternalModuleReference:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSExternalModuleReference, expression: this.convertChild(c.expression) });
              case d.NamespaceExportDeclaration:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSNamespaceExportDeclaration, id: this.convertChild(c.name) });
              case d.AbstractKeyword:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSAbstractKeyword });
              case d.TupleType: {
                let R = "elementTypes" in c ? c.elementTypes.map((pe) => this.convertType(pe)) : c.elements.map((pe) => this.convertType(pe));
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSTupleType, elementTypes: R });
              }
              case d.NamedTupleMember: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TSNamedTupleMember, elementType: this.convertType(c.type, c), label: this.convertChild(c.name, c), optional: c.questionToken != null });
                return c.dotDotDotToken ? (R.range[0] = R.label.range[0], R.loc.start = R.label.loc.start, this.createNode(c, { type: m.AST_NODE_TYPES.TSRestType, typeAnnotation: R })) : R;
              }
              case d.OptionalType:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSOptionalType, typeAnnotation: this.convertType(c.type) });
              case d.RestType:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSRestType, typeAnnotation: this.convertType(c.type) });
              case d.TemplateLiteralType: {
                let R = this.createNode(c, { type: m.AST_NODE_TYPES.TSTemplateLiteralType, quasis: [this.convertChild(c.head)], types: [] });
                return c.templateSpans.forEach((pe) => {
                  R.types.push(this.convertChild(pe.type)), R.quasis.push(this.convertChild(pe.literal));
                }), R;
              }
              case d.ClassStaticBlockDeclaration:
                return this.createNode(c, { type: m.AST_NODE_TYPES.StaticBlock, body: this.convertBodyExpressions(c.body.statements, c) });
              case d.AssertEntry:
                return this.createNode(c, { type: m.AST_NODE_TYPES.ImportAttribute, key: this.convertChild(c.name), value: this.convertChild(c.value) });
              case d.SatisfiesExpression:
                return this.createNode(c, { type: m.AST_NODE_TYPES.TSSatisfiesExpression, expression: this.convertChild(c.expression), typeAnnotation: this.convertChild(c.type) });
              default:
                return this.deeplyCopy(c);
            }
          }
        };
        a.Converter = I;
      } }), $a = {};
      m1($a, { __assign: () => f1, __asyncDelegator: () => TV, __asyncGenerator: () => bV, __asyncValues: () => SV, __await: () => gp, __awaiter: () => dV, __classPrivateFieldGet: () => CV, __classPrivateFieldSet: () => AV, __createBinding: () => hV, __decorate: () => uV, __exportStar: () => gV, __extends: () => cV, __generator: () => mV, __importDefault: () => wV, __importStar: () => EV, __makeTemplateObject: () => xV, __metadata: () => fV, __param: () => pV, __read: () => $9, __rest: () => lV, __spread: () => yV, __spreadArrays: () => vV, __values: () => tT });
      function cV(a, _) {
        p1(a, _);
        function v() {
          this.constructor = a;
        }
        a.prototype = _ === null ? Object.create(_) : (v.prototype = _.prototype, new v());
      }
      function lV(a, _) {
        var v = {};
        for (var h2 in a)
          Object.prototype.hasOwnProperty.call(a, h2) && _.indexOf(h2) < 0 && (v[h2] = a[h2]);
        if (a != null && typeof Object.getOwnPropertySymbols == "function")
          for (var D = 0, h2 = Object.getOwnPropertySymbols(a); D < h2.length; D++)
            _.indexOf(h2[D]) < 0 && Object.prototype.propertyIsEnumerable.call(a, h2[D]) && (v[h2[D]] = a[h2[D]]);
        return v;
      }
      function uV(a, _, v, h2) {
        var D = arguments.length, P = D < 3 ? _ : h2 === null ? h2 = Object.getOwnPropertyDescriptor(_, v) : h2, y;
        if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
          P = Reflect.decorate(a, _, v, h2);
        else
          for (var m = a.length - 1; m >= 0; m--)
            (y = a[m]) && (P = (D < 3 ? y(P) : D > 3 ? y(_, v, P) : y(_, v)) || P);
        return D > 3 && P && Object.defineProperty(_, v, P), P;
      }
      function pV(a, _) {
        return function(v, h2) {
          _(v, h2, a);
        };
      }
      function fV(a, _) {
        if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
          return Reflect.metadata(a, _);
      }
      function dV(a, _, v, h2) {
        function D(P) {
          return P instanceof v ? P : new v(function(y) {
            y(P);
          });
        }
        return new (v || (v = Promise))(function(P, y) {
          function m(E) {
            try {
              d(h2.next(E));
            } catch (I) {
              y(I);
            }
          }
          function C(E) {
            try {
              d(h2.throw(E));
            } catch (I) {
              y(I);
            }
          }
          function d(E) {
            E.done ? P(E.value) : D(E.value).then(m, C);
          }
          d((h2 = h2.apply(a, _ || [])).next());
        });
      }
      function mV(a, _) {
        var v = { label: 0, sent: function() {
          if (P[0] & 1)
            throw P[1];
          return P[1];
        }, trys: [], ops: [] }, h2, D, P, y;
        return y = { next: m(0), throw: m(1), return: m(2) }, typeof Symbol == "function" && (y[Symbol.iterator] = function() {
          return this;
        }), y;
        function m(d) {
          return function(E) {
            return C([d, E]);
          };
        }
        function C(d) {
          if (h2)
            throw new TypeError("Generator is already executing.");
          for (; v; )
            try {
              if (h2 = 1, D && (P = d[0] & 2 ? D.return : d[0] ? D.throw || ((P = D.return) && P.call(D), 0) : D.next) && !(P = P.call(D, d[1])).done)
                return P;
              switch (D = 0, P && (d = [d[0] & 2, P.value]), d[0]) {
                case 0:
                case 1:
                  P = d;
                  break;
                case 4:
                  return v.label++, { value: d[1], done: false };
                case 5:
                  v.label++, D = d[1], d = [0];
                  continue;
                case 7:
                  d = v.ops.pop(), v.trys.pop();
                  continue;
                default:
                  if (P = v.trys, !(P = P.length > 0 && P[P.length - 1]) && (d[0] === 6 || d[0] === 2)) {
                    v = 0;
                    continue;
                  }
                  if (d[0] === 3 && (!P || d[1] > P[0] && d[1] < P[3])) {
                    v.label = d[1];
                    break;
                  }
                  if (d[0] === 6 && v.label < P[1]) {
                    v.label = P[1], P = d;
                    break;
                  }
                  if (P && v.label < P[2]) {
                    v.label = P[2], v.ops.push(d);
                    break;
                  }
                  P[2] && v.ops.pop(), v.trys.pop();
                  continue;
              }
              d = _.call(a, v);
            } catch (E) {
              d = [6, E], D = 0;
            } finally {
              h2 = P = 0;
            }
          if (d[0] & 5)
            throw d[1];
          return { value: d[0] ? d[1] : void 0, done: true };
        }
      }
      function hV(a, _, v, h2) {
        h2 === void 0 && (h2 = v), a[h2] = _[v];
      }
      function gV(a, _) {
        for (var v in a)
          v !== "default" && !_.hasOwnProperty(v) && (_[v] = a[v]);
      }
      function tT(a) {
        var _ = typeof Symbol == "function" && Symbol.iterator, v = _ && a[_], h2 = 0;
        if (v)
          return v.call(a);
        if (a && typeof a.length == "number")
          return { next: function() {
            return a && h2 >= a.length && (a = void 0), { value: a && a[h2++], done: !a };
          } };
        throw new TypeError(_ ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }
      function $9(a, _) {
        var v = typeof Symbol == "function" && a[Symbol.iterator];
        if (!v)
          return a;
        var h2 = v.call(a), D, P = [], y;
        try {
          for (; (_ === void 0 || _-- > 0) && !(D = h2.next()).done; )
            P.push(D.value);
        } catch (m) {
          y = { error: m };
        } finally {
          try {
            D && !D.done && (v = h2.return) && v.call(h2);
          } finally {
            if (y)
              throw y.error;
          }
        }
        return P;
      }
      function yV() {
        for (var a = [], _ = 0; _ < arguments.length; _++)
          a = a.concat($9(arguments[_]));
        return a;
      }
      function vV() {
        for (var a = 0, _ = 0, v = arguments.length; _ < v; _++)
          a += arguments[_].length;
        for (var h2 = Array(a), D = 0, _ = 0; _ < v; _++)
          for (var P = arguments[_], y = 0, m = P.length; y < m; y++, D++)
            h2[D] = P[y];
        return h2;
      }
      function gp(a) {
        return this instanceof gp ? (this.v = a, this) : new gp(a);
      }
      function bV(a, _, v) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var h2 = v.apply(a, _ || []), D, P = [];
        return D = {}, y("next"), y("throw"), y("return"), D[Symbol.asyncIterator] = function() {
          return this;
        }, D;
        function y(c) {
          h2[c] && (D[c] = function(M) {
            return new Promise(function(q, W) {
              P.push([c, M, q, W]) > 1 || m(c, M);
            });
          });
        }
        function m(c, M) {
          try {
            C(h2[c](M));
          } catch (q) {
            I(P[0][3], q);
          }
        }
        function C(c) {
          c.value instanceof gp ? Promise.resolve(c.value.v).then(d, E) : I(P[0][2], c);
        }
        function d(c) {
          m("next", c);
        }
        function E(c) {
          m("throw", c);
        }
        function I(c, M) {
          c(M), P.shift(), P.length && m(P[0][0], P[0][1]);
        }
      }
      function TV(a) {
        var _, v;
        return _ = {}, h2("next"), h2("throw", function(D) {
          throw D;
        }), h2("return"), _[Symbol.iterator] = function() {
          return this;
        }, _;
        function h2(D, P) {
          _[D] = a[D] ? function(y) {
            return (v = !v) ? { value: gp(a[D](y)), done: D === "return" } : P ? P(y) : y;
          } : P;
        }
      }
      function SV(a) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var _ = a[Symbol.asyncIterator], v;
        return _ ? _.call(a) : (a = typeof tT == "function" ? tT(a) : a[Symbol.iterator](), v = {}, h2("next"), h2("throw"), h2("return"), v[Symbol.asyncIterator] = function() {
          return this;
        }, v);
        function h2(P) {
          v[P] = a[P] && function(y) {
            return new Promise(function(m, C) {
              y = a[P](y), D(m, C, y.done, y.value);
            });
          };
        }
        function D(P, y, m, C) {
          Promise.resolve(C).then(function(d) {
            P({ value: d, done: m });
          }, y);
        }
      }
      function xV(a, _) {
        return Object.defineProperty ? Object.defineProperty(a, "raw", { value: _ }) : a.raw = _, a;
      }
      function EV(a) {
        if (a && a.__esModule)
          return a;
        var _ = {};
        if (a != null)
          for (var v in a)
            Object.hasOwnProperty.call(a, v) && (_[v] = a[v]);
        return _.default = a, _;
      }
      function wV(a) {
        return a && a.__esModule ? a : { default: a };
      }
      function CV(a, _) {
        if (!_.has(a))
          throw new TypeError("attempted to get private field on non-instance");
        return _.get(a);
      }
      function AV(a, _, v) {
        if (!_.has(a))
          throw new TypeError("attempted to set private field on non-instance");
        return _.set(a, v), v;
      }
      var p1, f1, Ds = yp({ "node_modules/tslib/tslib.es6.js"() {
        De(), p1 = function(a, _) {
          return p1 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(v, h2) {
            v.__proto__ = h2;
          } || function(v, h2) {
            for (var D in h2)
              h2.hasOwnProperty(D) && (v[D] = h2[D]);
          }, p1(a, _);
        }, f1 = function() {
          return f1 = Object.assign || function(_) {
            for (var v, h2 = 1, D = arguments.length; h2 < D; h2++) {
              v = arguments[h2];
              for (var P in v)
                Object.prototype.hasOwnProperty.call(v, P) && (_[P] = v[P]);
            }
            return _;
          }, f1.apply(this, arguments);
        };
      } }), PV = Oe({ "node_modules/tsutils/typeguard/2.8/node.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.isExpressionStatement = a.isExpression = a.isExportSpecifier = a.isExportDeclaration = a.isExportAssignment = a.isEnumMember = a.isEnumDeclaration = a.isEntityNameExpression = a.isEntityName = a.isEmptyStatement = a.isElementAccessExpression = a.isDoStatement = a.isDeleteExpression = a.isDefaultClause = a.isDecorator = a.isDebuggerStatement = a.isComputedPropertyName = a.isContinueStatement = a.isConstructSignatureDeclaration = a.isConstructorTypeNode = a.isConstructorDeclaration = a.isConditionalTypeNode = a.isConditionalExpression = a.isCommaListExpression = a.isClassLikeDeclaration = a.isClassExpression = a.isClassDeclaration = a.isCatchClause = a.isCaseOrDefaultClause = a.isCaseClause = a.isCaseBlock = a.isCallSignatureDeclaration = a.isCallLikeExpression = a.isCallExpression = a.isBreakStatement = a.isBreakOrContinueStatement = a.isBooleanLiteral = a.isBlockLike = a.isBlock = a.isBindingPattern = a.isBindingElement = a.isBinaryExpression = a.isAwaitExpression = a.isAssertionExpression = a.isAsExpression = a.isArrowFunction = a.isArrayTypeNode = a.isArrayLiteralExpression = a.isArrayBindingPattern = a.isAccessorDeclaration = void 0, a.isNamespaceImport = a.isNamespaceDeclaration = a.isNamedImports = a.isNamedExports = a.isModuleDeclaration = a.isModuleBlock = a.isMethodSignature = a.isMethodDeclaration = a.isMetaProperty = a.isMappedTypeNode = a.isLiteralTypeNode = a.isLiteralExpression = a.isLabeledStatement = a.isJsxText = a.isJsxSpreadAttribute = a.isJsxSelfClosingElement = a.isJsxOpeningLikeElement = a.isJsxOpeningFragment = a.isJsxOpeningElement = a.isJsxFragment = a.isJsxExpression = a.isJsxElement = a.isJsxClosingFragment = a.isJsxClosingElement = a.isJsxAttributes = a.isJsxAttributeLike = a.isJsxAttribute = a.isJsDoc = a.isIterationStatement = a.isIntersectionTypeNode = a.isInterfaceDeclaration = a.isInferTypeNode = a.isIndexSignatureDeclaration = a.isIndexedAccessTypeNode = a.isImportSpecifier = a.isImportEqualsDeclaration = a.isImportDeclaration = a.isImportClause = a.isIfStatement = a.isIdentifier = a.isGetAccessorDeclaration = a.isFunctionTypeNode = a.isFunctionExpression = a.isFunctionDeclaration = a.isForStatement = a.isForOfStatement = a.isForInOrOfStatement = a.isForInStatement = a.isExternalModuleReference = a.isExpressionWithTypeArguments = void 0, a.isVariableStatement = a.isVariableDeclaration = a.isUnionTypeNode = a.isTypeQueryNode = a.isTypeReferenceNode = a.isTypePredicateNode = a.isTypeParameterDeclaration = a.isTypeOperatorNode = a.isTypeOfExpression = a.isTypeLiteralNode = a.isTypeAssertion = a.isTypeAliasDeclaration = a.isTupleTypeNode = a.isTryStatement = a.isThrowStatement = a.isTextualLiteral = a.isTemplateLiteral = a.isTemplateExpression = a.isTaggedTemplateExpression = a.isSyntaxList = a.isSwitchStatement = a.isStringLiteral = a.isSpreadElement = a.isSpreadAssignment = a.isSourceFile = a.isSignatureDeclaration = a.isShorthandPropertyAssignment = a.isSetAccessorDeclaration = a.isReturnStatement = a.isRegularExpressionLiteral = a.isQualifiedName = a.isPropertySignature = a.isPropertyDeclaration = a.isPropertyAssignment = a.isPropertyAccessExpression = a.isPrefixUnaryExpression = a.isPostfixUnaryExpression = a.isParenthesizedTypeNode = a.isParenthesizedExpression = a.isParameterDeclaration = a.isOmittedExpression = a.isObjectLiteralExpression = a.isObjectBindingPattern = a.isNumericOrStringLikeLiteral = a.isNumericLiteral = a.isNullLiteral = a.isNoSubstitutionTemplateLiteral = a.isNonNullExpression = a.isNewExpression = a.isNamespaceExportDeclaration = void 0, a.isWithStatement = a.isWhileStatement = a.isVoidExpression = a.isVariableDeclarationList = void 0;
        var _ = vr();
        function v(J) {
          return J.kind === _.SyntaxKind.GetAccessor || J.kind === _.SyntaxKind.SetAccessor;
        }
        a.isAccessorDeclaration = v;
        function h2(J) {
          return J.kind === _.SyntaxKind.ArrayBindingPattern;
        }
        a.isArrayBindingPattern = h2;
        function D(J) {
          return J.kind === _.SyntaxKind.ArrayLiteralExpression;
        }
        a.isArrayLiteralExpression = D;
        function P(J) {
          return J.kind === _.SyntaxKind.ArrayType;
        }
        a.isArrayTypeNode = P;
        function y(J) {
          return J.kind === _.SyntaxKind.ArrowFunction;
        }
        a.isArrowFunction = y;
        function m(J) {
          return J.kind === _.SyntaxKind.AsExpression;
        }
        a.isAsExpression = m;
        function C(J) {
          return J.kind === _.SyntaxKind.AsExpression || J.kind === _.SyntaxKind.TypeAssertionExpression;
        }
        a.isAssertionExpression = C;
        function d(J) {
          return J.kind === _.SyntaxKind.AwaitExpression;
        }
        a.isAwaitExpression = d;
        function E(J) {
          return J.kind === _.SyntaxKind.BinaryExpression;
        }
        a.isBinaryExpression = E;
        function I(J) {
          return J.kind === _.SyntaxKind.BindingElement;
        }
        a.isBindingElement = I;
        function c(J) {
          return J.kind === _.SyntaxKind.ArrayBindingPattern || J.kind === _.SyntaxKind.ObjectBindingPattern;
        }
        a.isBindingPattern = c;
        function M(J) {
          return J.kind === _.SyntaxKind.Block;
        }
        a.isBlock = M;
        function q(J) {
          return J.statements !== void 0;
        }
        a.isBlockLike = q;
        function W(J) {
          return J.kind === _.SyntaxKind.TrueKeyword || J.kind === _.SyntaxKind.FalseKeyword;
        }
        a.isBooleanLiteral = W;
        function K(J) {
          return J.kind === _.SyntaxKind.BreakStatement || J.kind === _.SyntaxKind.ContinueStatement;
        }
        a.isBreakOrContinueStatement = K;
        function ce(J) {
          return J.kind === _.SyntaxKind.BreakStatement;
        }
        a.isBreakStatement = ce;
        function Ie(J) {
          return J.kind === _.SyntaxKind.CallExpression;
        }
        a.isCallExpression = Ie;
        function me(J) {
          switch (J.kind) {
            case _.SyntaxKind.CallExpression:
            case _.SyntaxKind.Decorator:
            case _.SyntaxKind.JsxOpeningElement:
            case _.SyntaxKind.JsxSelfClosingElement:
            case _.SyntaxKind.NewExpression:
            case _.SyntaxKind.TaggedTemplateExpression:
              return true;
            default:
              return false;
          }
        }
        a.isCallLikeExpression = me;
        function Ae(J) {
          return J.kind === _.SyntaxKind.CallSignature;
        }
        a.isCallSignatureDeclaration = Ae;
        function te(J) {
          return J.kind === _.SyntaxKind.CaseBlock;
        }
        a.isCaseBlock = te;
        function he(J) {
          return J.kind === _.SyntaxKind.CaseClause;
        }
        a.isCaseClause = he;
        function Pe(J) {
          return J.kind === _.SyntaxKind.CaseClause || J.kind === _.SyntaxKind.DefaultClause;
        }
        a.isCaseOrDefaultClause = Pe;
        function R(J) {
          return J.kind === _.SyntaxKind.CatchClause;
        }
        a.isCatchClause = R;
        function pe(J) {
          return J.kind === _.SyntaxKind.ClassDeclaration;
        }
        a.isClassDeclaration = pe;
        function ke(J) {
          return J.kind === _.SyntaxKind.ClassExpression;
        }
        a.isClassExpression = ke;
        function Je(J) {
          return J.kind === _.SyntaxKind.ClassDeclaration || J.kind === _.SyntaxKind.ClassExpression;
        }
        a.isClassLikeDeclaration = Je;
        function Xe(J) {
          return J.kind === _.SyntaxKind.CommaListExpression;
        }
        a.isCommaListExpression = Xe;
        function ee(J) {
          return J.kind === _.SyntaxKind.ConditionalExpression;
        }
        a.isConditionalExpression = ee;
        function je(J) {
          return J.kind === _.SyntaxKind.ConditionalType;
        }
        a.isConditionalTypeNode = je;
        function nt(J) {
          return J.kind === _.SyntaxKind.Constructor;
        }
        a.isConstructorDeclaration = nt;
        function Ze(J) {
          return J.kind === _.SyntaxKind.ConstructorType;
        }
        a.isConstructorTypeNode = Ze;
        function st(J) {
          return J.kind === _.SyntaxKind.ConstructSignature;
        }
        a.isConstructSignatureDeclaration = st;
        function tt(J) {
          return J.kind === _.SyntaxKind.ContinueStatement;
        }
        a.isContinueStatement = tt;
        function ct(J) {
          return J.kind === _.SyntaxKind.ComputedPropertyName;
        }
        a.isComputedPropertyName = ct;
        function ne(J) {
          return J.kind === _.SyntaxKind.DebuggerStatement;
        }
        a.isDebuggerStatement = ne;
        function ge(J) {
          return J.kind === _.SyntaxKind.Decorator;
        }
        a.isDecorator = ge;
        function Fe(J) {
          return J.kind === _.SyntaxKind.DefaultClause;
        }
        a.isDefaultClause = Fe;
        function at(J) {
          return J.kind === _.SyntaxKind.DeleteExpression;
        }
        a.isDeleteExpression = at;
        function Pt(J) {
          return J.kind === _.SyntaxKind.DoStatement;
        }
        a.isDoStatement = Pt;
        function qt(J) {
          return J.kind === _.SyntaxKind.ElementAccessExpression;
        }
        a.isElementAccessExpression = qt;
        function Zr(J) {
          return J.kind === _.SyntaxKind.EmptyStatement;
        }
        a.isEmptyStatement = Zr;
        function Ri(J) {
          return J.kind === _.SyntaxKind.Identifier || w_(J);
        }
        a.isEntityName = Ri;
        function la(J) {
          return J.kind === _.SyntaxKind.Identifier || gi(J) && la(J.expression);
        }
        a.isEntityNameExpression = la;
        function ua(J) {
          return J.kind === _.SyntaxKind.EnumDeclaration;
        }
        a.isEnumDeclaration = ua;
        function Ka(J) {
          return J.kind === _.SyntaxKind.EnumMember;
        }
        a.isEnumMember = Ka;
        function co(J) {
          return J.kind === _.SyntaxKind.ExportAssignment;
        }
        a.isExportAssignment = co;
        function be(J) {
          return J.kind === _.SyntaxKind.ExportDeclaration;
        }
        a.isExportDeclaration = be;
        function Ke(J) {
          return J.kind === _.SyntaxKind.ExportSpecifier;
        }
        a.isExportSpecifier = Ke;
        function Et(J) {
          switch (J.kind) {
            case _.SyntaxKind.ArrayLiteralExpression:
            case _.SyntaxKind.ArrowFunction:
            case _.SyntaxKind.AsExpression:
            case _.SyntaxKind.AwaitExpression:
            case _.SyntaxKind.BinaryExpression:
            case _.SyntaxKind.CallExpression:
            case _.SyntaxKind.ClassExpression:
            case _.SyntaxKind.CommaListExpression:
            case _.SyntaxKind.ConditionalExpression:
            case _.SyntaxKind.DeleteExpression:
            case _.SyntaxKind.ElementAccessExpression:
            case _.SyntaxKind.FalseKeyword:
            case _.SyntaxKind.FunctionExpression:
            case _.SyntaxKind.Identifier:
            case _.SyntaxKind.JsxElement:
            case _.SyntaxKind.JsxFragment:
            case _.SyntaxKind.JsxExpression:
            case _.SyntaxKind.JsxOpeningElement:
            case _.SyntaxKind.JsxOpeningFragment:
            case _.SyntaxKind.JsxSelfClosingElement:
            case _.SyntaxKind.MetaProperty:
            case _.SyntaxKind.NewExpression:
            case _.SyntaxKind.NonNullExpression:
            case _.SyntaxKind.NoSubstitutionTemplateLiteral:
            case _.SyntaxKind.NullKeyword:
            case _.SyntaxKind.NumericLiteral:
            case _.SyntaxKind.ObjectLiteralExpression:
            case _.SyntaxKind.OmittedExpression:
            case _.SyntaxKind.ParenthesizedExpression:
            case _.SyntaxKind.PostfixUnaryExpression:
            case _.SyntaxKind.PrefixUnaryExpression:
            case _.SyntaxKind.PropertyAccessExpression:
            case _.SyntaxKind.RegularExpressionLiteral:
            case _.SyntaxKind.SpreadElement:
            case _.SyntaxKind.StringLiteral:
            case _.SyntaxKind.SuperKeyword:
            case _.SyntaxKind.TaggedTemplateExpression:
            case _.SyntaxKind.TemplateExpression:
            case _.SyntaxKind.ThisKeyword:
            case _.SyntaxKind.TrueKeyword:
            case _.SyntaxKind.TypeAssertionExpression:
            case _.SyntaxKind.TypeOfExpression:
            case _.SyntaxKind.VoidExpression:
            case _.SyntaxKind.YieldExpression:
              return true;
            default:
              return false;
          }
        }
        a.isExpression = Et;
        function Ft(J) {
          return J.kind === _.SyntaxKind.ExpressionStatement;
        }
        a.isExpressionStatement = Ft;
        function or(J) {
          return J.kind === _.SyntaxKind.ExpressionWithTypeArguments;
        }
        a.isExpressionWithTypeArguments = or;
        function Wr(J) {
          return J.kind === _.SyntaxKind.ExternalModuleReference;
        }
        a.isExternalModuleReference = Wr;
        function m_(J) {
          return J.kind === _.SyntaxKind.ForInStatement;
        }
        a.isForInStatement = m_;
        function Uc(J) {
          return J.kind === _.SyntaxKind.ForOfStatement || J.kind === _.SyntaxKind.ForInStatement;
        }
        a.isForInOrOfStatement = Uc;
        function ji(J) {
          return J.kind === _.SyntaxKind.ForOfStatement;
        }
        a.isForOfStatement = ji;
        function lo(J) {
          return J.kind === _.SyntaxKind.ForStatement;
        }
        a.isForStatement = lo;
        function zc(J) {
          return J.kind === _.SyntaxKind.FunctionDeclaration;
        }
        a.isFunctionDeclaration = zc;
        function Qn(J) {
          return J.kind === _.SyntaxKind.FunctionExpression;
        }
        a.isFunctionExpression = Qn;
        function uo(J) {
          return J.kind === _.SyntaxKind.FunctionType;
        }
        a.isFunctionTypeNode = uo;
        function Wc(J) {
          return J.kind === _.SyntaxKind.GetAccessor;
        }
        a.isGetAccessorDeclaration = Wc;
        function Vc(J) {
          return J.kind === _.SyntaxKind.Identifier;
        }
        a.isIdentifier = Vc;
        function Hc(J) {
          return J.kind === _.SyntaxKind.IfStatement;
        }
        a.isIfStatement = Hc;
        function Gc(J) {
          return J.kind === _.SyntaxKind.ImportClause;
        }
        a.isImportClause = Gc;
        function h_(J) {
          return J.kind === _.SyntaxKind.ImportDeclaration;
        }
        a.isImportDeclaration = h_;
        function tr(J) {
          return J.kind === _.SyntaxKind.ImportEqualsDeclaration;
        }
        a.isImportEqualsDeclaration = tr;
        function $c(J) {
          return J.kind === _.SyntaxKind.ImportSpecifier;
        }
        a.isImportSpecifier = $c;
        function po(J) {
          return J.kind === _.SyntaxKind.IndexedAccessType;
        }
        a.isIndexedAccessTypeNode = po;
        function jr(J) {
          return J.kind === _.SyntaxKind.IndexSignature;
        }
        a.isIndexSignatureDeclaration = jr;
        function qn(J) {
          return J.kind === _.SyntaxKind.InferType;
        }
        a.isInferTypeNode = qn;
        function g_(J) {
          return J.kind === _.SyntaxKind.InterfaceDeclaration;
        }
        a.isInterfaceDeclaration = g_;
        function ks(J) {
          return J.kind === _.SyntaxKind.IntersectionType;
        }
        a.isIntersectionTypeNode = ks;
        function Is(J) {
          switch (J.kind) {
            case _.SyntaxKind.ForStatement:
            case _.SyntaxKind.ForOfStatement:
            case _.SyntaxKind.ForInStatement:
            case _.SyntaxKind.WhileStatement:
            case _.SyntaxKind.DoStatement:
              return true;
            default:
              return false;
          }
        }
        a.isIterationStatement = Is;
        function y_(J) {
          return J.kind === _.SyntaxKind.JSDocComment;
        }
        a.isJsDoc = y_;
        function Ns(J) {
          return J.kind === _.SyntaxKind.JsxAttribute;
        }
        a.isJsxAttribute = Ns;
        function Kc(J) {
          return J.kind === _.SyntaxKind.JsxAttribute || J.kind === _.SyntaxKind.JsxSpreadAttribute;
        }
        a.isJsxAttributeLike = Kc;
        function pa(J) {
          return J.kind === _.SyntaxKind.JsxAttributes;
        }
        a.isJsxAttributes = pa;
        function Xc(J) {
          return J.kind === _.SyntaxKind.JsxClosingElement;
        }
        a.isJsxClosingElement = Xc;
        function fo(J) {
          return J.kind === _.SyntaxKind.JsxClosingFragment;
        }
        a.isJsxClosingFragment = fo;
        function v_(J) {
          return J.kind === _.SyntaxKind.JsxElement;
        }
        a.isJsxElement = v_;
        function Cn(J) {
          return J.kind === _.SyntaxKind.JsxExpression;
        }
        a.isJsxExpression = Cn;
        function Zn(J) {
          return J.kind === _.SyntaxKind.JsxFragment;
        }
        a.isJsxFragment = Zn;
        function Xa(J) {
          return J.kind === _.SyntaxKind.JsxOpeningElement;
        }
        a.isJsxOpeningElement = Xa;
        function Yc(J) {
          return J.kind === _.SyntaxKind.JsxOpeningFragment;
        }
        a.isJsxOpeningFragment = Yc;
        function mo(J) {
          return J.kind === _.SyntaxKind.JsxOpeningElement || J.kind === _.SyntaxKind.JsxSelfClosingElement;
        }
        a.isJsxOpeningLikeElement = mo;
        function ei(J) {
          return J.kind === _.SyntaxKind.JsxSelfClosingElement;
        }
        a.isJsxSelfClosingElement = ei;
        function Ya(J) {
          return J.kind === _.SyntaxKind.JsxSpreadAttribute;
        }
        a.isJsxSpreadAttribute = Ya;
        function b_(J) {
          return J.kind === _.SyntaxKind.JsxText;
        }
        a.isJsxText = b_;
        function Qa(J) {
          return J.kind === _.SyntaxKind.LabeledStatement;
        }
        a.isLabeledStatement = Qa;
        function Jr(J) {
          return J.kind >= _.SyntaxKind.FirstLiteralToken && J.kind <= _.SyntaxKind.LastLiteralToken;
        }
        a.isLiteralExpression = Jr;
        function Qc(J) {
          return J.kind === _.SyntaxKind.LiteralType;
        }
        a.isLiteralTypeNode = Qc;
        function ho(J) {
          return J.kind === _.SyntaxKind.MappedType;
        }
        a.isMappedTypeNode = ho;
        function T_(J) {
          return J.kind === _.SyntaxKind.MetaProperty;
        }
        a.isMetaProperty = T_;
        function go(J) {
          return J.kind === _.SyntaxKind.MethodDeclaration;
        }
        a.isMethodDeclaration = go;
        function yo(J) {
          return J.kind === _.SyntaxKind.MethodSignature;
        }
        a.isMethodSignature = yo;
        function Za(J) {
          return J.kind === _.SyntaxKind.ModuleBlock;
        }
        a.isModuleBlock = Za;
        function vo(J) {
          return J.kind === _.SyntaxKind.ModuleDeclaration;
        }
        a.isModuleDeclaration = vo;
        function S_(J) {
          return J.kind === _.SyntaxKind.NamedExports;
        }
        a.isNamedExports = S_;
        function Zc(J) {
          return J.kind === _.SyntaxKind.NamedImports;
        }
        a.isNamedImports = Zc;
        function Os(J) {
          return vo(J) && J.name.kind === _.SyntaxKind.Identifier && J.body !== void 0 && (J.body.kind === _.SyntaxKind.ModuleBlock || Os(J.body));
        }
        a.isNamespaceDeclaration = Os;
        function bo(J) {
          return J.kind === _.SyntaxKind.NamespaceImport;
        }
        a.isNamespaceImport = bo;
        function el(J) {
          return J.kind === _.SyntaxKind.NamespaceExportDeclaration;
        }
        a.isNamespaceExportDeclaration = el;
        function x_(J) {
          return J.kind === _.SyntaxKind.NewExpression;
        }
        a.isNewExpression = x_;
        function E_(J) {
          return J.kind === _.SyntaxKind.NonNullExpression;
        }
        a.isNonNullExpression = E_;
        function S(J) {
          return J.kind === _.SyntaxKind.NoSubstitutionTemplateLiteral;
        }
        a.isNoSubstitutionTemplateLiteral = S;
        function H(J) {
          return J.kind === _.SyntaxKind.NullKeyword;
        }
        a.isNullLiteral = H;
        function le(J) {
          return J.kind === _.SyntaxKind.NumericLiteral;
        }
        a.isNumericLiteral = le;
        function Be(J) {
          switch (J.kind) {
            case _.SyntaxKind.StringLiteral:
            case _.SyntaxKind.NumericLiteral:
            case _.SyntaxKind.NoSubstitutionTemplateLiteral:
              return true;
            default:
              return false;
          }
        }
        a.isNumericOrStringLikeLiteral = Be;
        function rt(J) {
          return J.kind === _.SyntaxKind.ObjectBindingPattern;
        }
        a.isObjectBindingPattern = rt;
        function ut(J) {
          return J.kind === _.SyntaxKind.ObjectLiteralExpression;
        }
        a.isObjectLiteralExpression = ut;
        function Ht(J) {
          return J.kind === _.SyntaxKind.OmittedExpression;
        }
        a.isOmittedExpression = Ht;
        function Fr(J) {
          return J.kind === _.SyntaxKind.Parameter;
        }
        a.isParameterDeclaration = Fr;
        function Cr(J) {
          return J.kind === _.SyntaxKind.ParenthesizedExpression;
        }
        a.isParenthesizedExpression = Cr;
        function ir(J) {
          return J.kind === _.SyntaxKind.ParenthesizedType;
        }
        a.isParenthesizedTypeNode = ir;
        function en(J) {
          return J.kind === _.SyntaxKind.PostfixUnaryExpression;
        }
        a.isPostfixUnaryExpression = en;
        function Ji(J) {
          return J.kind === _.SyntaxKind.PrefixUnaryExpression;
        }
        a.isPrefixUnaryExpression = Ji;
        function gi(J) {
          return J.kind === _.SyntaxKind.PropertyAccessExpression;
        }
        a.isPropertyAccessExpression = gi;
        function ln(J) {
          return J.kind === _.SyntaxKind.PropertyAssignment;
        }
        a.isPropertyAssignment = ln;
        function ti(J) {
          return J.kind === _.SyntaxKind.PropertyDeclaration;
        }
        a.isPropertyDeclaration = ti;
        function yn(J) {
          return J.kind === _.SyntaxKind.PropertySignature;
        }
        a.isPropertySignature = yn;
        function w_(J) {
          return J.kind === _.SyntaxKind.QualifiedName;
        }
        a.isQualifiedName = w_;
        function vp(J) {
          return J.kind === _.SyntaxKind.RegularExpressionLiteral;
        }
        a.isRegularExpressionLiteral = vp;
        function C1(J) {
          return J.kind === _.SyntaxKind.ReturnStatement;
        }
        a.isReturnStatement = C1;
        function rr(J) {
          return J.kind === _.SyntaxKind.SetAccessor;
        }
        a.isSetAccessorDeclaration = rr;
        function bp(J) {
          return J.kind === _.SyntaxKind.ShorthandPropertyAssignment;
        }
        a.isShorthandPropertyAssignment = bp;
        function Tp(J) {
          return J.parameters !== void 0;
        }
        a.isSignatureDeclaration = Tp;
        function A1(J) {
          return J.kind === _.SyntaxKind.SourceFile;
        }
        a.isSourceFile = A1;
        function tl(J) {
          return J.kind === _.SyntaxKind.SpreadAssignment;
        }
        a.isSpreadAssignment = tl;
        function An(J) {
          return J.kind === _.SyntaxKind.SpreadElement;
        }
        a.isSpreadElement = An;
        function P1(J) {
          return J.kind === _.SyntaxKind.StringLiteral;
        }
        a.isStringLiteral = P1;
        function D1(J) {
          return J.kind === _.SyntaxKind.SwitchStatement;
        }
        a.isSwitchStatement = D1;
        function k1(J) {
          return J.kind === _.SyntaxKind.SyntaxList;
        }
        a.isSyntaxList = k1;
        function fa(J) {
          return J.kind === _.SyntaxKind.TaggedTemplateExpression;
        }
        a.isTaggedTemplateExpression = fa;
        function Ms(J) {
          return J.kind === _.SyntaxKind.TemplateExpression;
        }
        a.isTemplateExpression = Ms;
        function To(J) {
          return J.kind === _.SyntaxKind.TemplateExpression || J.kind === _.SyntaxKind.NoSubstitutionTemplateLiteral;
        }
        a.isTemplateLiteral = To;
        function Sp(J) {
          return J.kind === _.SyntaxKind.StringLiteral || J.kind === _.SyntaxKind.NoSubstitutionTemplateLiteral;
        }
        a.isTextualLiteral = Sp;
        function Vr(J) {
          return J.kind === _.SyntaxKind.ThrowStatement;
        }
        a.isThrowStatement = Vr;
        function I1(J) {
          return J.kind === _.SyntaxKind.TryStatement;
        }
        a.isTryStatement = I1;
        function N1(J) {
          return J.kind === _.SyntaxKind.TupleType;
        }
        a.isTupleTypeNode = N1;
        function C_(J) {
          return J.kind === _.SyntaxKind.TypeAliasDeclaration;
        }
        a.isTypeAliasDeclaration = C_;
        function O1(J) {
          return J.kind === _.SyntaxKind.TypeAssertionExpression;
        }
        a.isTypeAssertion = O1;
        function ri(J) {
          return J.kind === _.SyntaxKind.TypeLiteral;
        }
        a.isTypeLiteralNode = ri;
        function rl(J) {
          return J.kind === _.SyntaxKind.TypeOfExpression;
        }
        a.isTypeOfExpression = rl;
        function M1(J) {
          return J.kind === _.SyntaxKind.TypeOperator;
        }
        a.isTypeOperatorNode = M1;
        function xp(J) {
          return J.kind === _.SyntaxKind.TypeParameter;
        }
        a.isTypeParameterDeclaration = xp;
        function L1(J) {
          return J.kind === _.SyntaxKind.TypePredicate;
        }
        a.isTypePredicateNode = L1;
        function R1(J) {
          return J.kind === _.SyntaxKind.TypeReference;
        }
        a.isTypeReferenceNode = R1;
        function j1(J) {
          return J.kind === _.SyntaxKind.TypeQuery;
        }
        a.isTypeQueryNode = j1;
        function Ep(J) {
          return J.kind === _.SyntaxKind.UnionType;
        }
        a.isUnionTypeNode = Ep;
        function J1(J) {
          return J.kind === _.SyntaxKind.VariableDeclaration;
        }
        a.isVariableDeclaration = J1;
        function es(J) {
          return J.kind === _.SyntaxKind.VariableStatement;
        }
        a.isVariableStatement = es;
        function F1(J) {
          return J.kind === _.SyntaxKind.VariableDeclarationList;
        }
        a.isVariableDeclarationList = F1;
        function B1(J) {
          return J.kind === _.SyntaxKind.VoidExpression;
        }
        a.isVoidExpression = B1;
        function Fi(J) {
          return J.kind === _.SyntaxKind.WhileStatement;
        }
        a.isWhileStatement = Fi;
        function q1(J) {
          return J.kind === _.SyntaxKind.WithStatement;
        }
        a.isWithStatement = q1;
      } }), DV = Oe({ "node_modules/tsutils/typeguard/2.9/node.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.isImportTypeNode = void 0;
        var _ = (Ds(), Li($a));
        _.__exportStar(PV(), a);
        var v = vr();
        function h2(D) {
          return D.kind === v.SyntaxKind.ImportType;
        }
        a.isImportTypeNode = h2;
      } }), kV = Oe({ "node_modules/tsutils/typeguard/3.0/node.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.isSyntheticExpression = a.isRestTypeNode = a.isOptionalTypeNode = void 0;
        var _ = (Ds(), Li($a));
        _.__exportStar(DV(), a);
        var v = vr();
        function h2(y) {
          return y.kind === v.SyntaxKind.OptionalType;
        }
        a.isOptionalTypeNode = h2;
        function D(y) {
          return y.kind === v.SyntaxKind.RestType;
        }
        a.isRestTypeNode = D;
        function P(y) {
          return y.kind === v.SyntaxKind.SyntheticExpression;
        }
        a.isSyntheticExpression = P;
      } }), K9 = Oe({ "node_modules/tsutils/typeguard/3.2/node.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.isBigIntLiteral = void 0;
        var _ = (Ds(), Li($a));
        _.__exportStar(kV(), a);
        var v = vr();
        function h2(D) {
          return D.kind === v.SyntaxKind.BigIntLiteral;
        }
        a.isBigIntLiteral = h2;
      } }), X9 = Oe({ "node_modules/tsutils/typeguard/node.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true });
        var _ = (Ds(), Li($a));
        _.__exportStar(K9(), a);
      } }), IV = Oe({ "node_modules/tsutils/typeguard/2.8/type.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.isUniqueESSymbolType = a.isUnionType = a.isUnionOrIntersectionType = a.isTypeVariable = a.isTypeReference = a.isTypeParameter = a.isSubstitutionType = a.isObjectType = a.isLiteralType = a.isIntersectionType = a.isInterfaceType = a.isInstantiableType = a.isIndexedAccessype = a.isIndexedAccessType = a.isGenericType = a.isEnumType = a.isConditionalType = void 0;
        var _ = vr();
        function v(me) {
          return (me.flags & _.TypeFlags.Conditional) !== 0;
        }
        a.isConditionalType = v;
        function h2(me) {
          return (me.flags & _.TypeFlags.Enum) !== 0;
        }
        a.isEnumType = h2;
        function D(me) {
          return (me.flags & _.TypeFlags.Object) !== 0 && (me.objectFlags & _.ObjectFlags.ClassOrInterface) !== 0 && (me.objectFlags & _.ObjectFlags.Reference) !== 0;
        }
        a.isGenericType = D;
        function P(me) {
          return (me.flags & _.TypeFlags.IndexedAccess) !== 0;
        }
        a.isIndexedAccessType = P;
        function y(me) {
          return (me.flags & _.TypeFlags.Index) !== 0;
        }
        a.isIndexedAccessype = y;
        function m(me) {
          return (me.flags & _.TypeFlags.Instantiable) !== 0;
        }
        a.isInstantiableType = m;
        function C(me) {
          return (me.flags & _.TypeFlags.Object) !== 0 && (me.objectFlags & _.ObjectFlags.ClassOrInterface) !== 0;
        }
        a.isInterfaceType = C;
        function d(me) {
          return (me.flags & _.TypeFlags.Intersection) !== 0;
        }
        a.isIntersectionType = d;
        function E(me) {
          return (me.flags & (_.TypeFlags.StringOrNumberLiteral | _.TypeFlags.BigIntLiteral)) !== 0;
        }
        a.isLiteralType = E;
        function I(me) {
          return (me.flags & _.TypeFlags.Object) !== 0;
        }
        a.isObjectType = I;
        function c(me) {
          return (me.flags & _.TypeFlags.Substitution) !== 0;
        }
        a.isSubstitutionType = c;
        function M(me) {
          return (me.flags & _.TypeFlags.TypeParameter) !== 0;
        }
        a.isTypeParameter = M;
        function q(me) {
          return (me.flags & _.TypeFlags.Object) !== 0 && (me.objectFlags & _.ObjectFlags.Reference) !== 0;
        }
        a.isTypeReference = q;
        function W(me) {
          return (me.flags & _.TypeFlags.TypeVariable) !== 0;
        }
        a.isTypeVariable = W;
        function K(me) {
          return (me.flags & _.TypeFlags.UnionOrIntersection) !== 0;
        }
        a.isUnionOrIntersectionType = K;
        function ce(me) {
          return (me.flags & _.TypeFlags.Union) !== 0;
        }
        a.isUnionType = ce;
        function Ie(me) {
          return (me.flags & _.TypeFlags.UniqueESSymbol) !== 0;
        }
        a.isUniqueESSymbolType = Ie;
      } }), S9 = Oe({ "node_modules/tsutils/typeguard/2.9/type.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true });
        var _ = (Ds(), Li($a));
        _.__exportStar(IV(), a);
      } }), NV = Oe({ "node_modules/tsutils/typeguard/3.0/type.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.isTupleTypeReference = a.isTupleType = void 0;
        var _ = (Ds(), Li($a));
        _.__exportStar(S9(), a);
        var v = vr(), h2 = S9();
        function D(y) {
          return (y.flags & v.TypeFlags.Object && y.objectFlags & v.ObjectFlags.Tuple) !== 0;
        }
        a.isTupleType = D;
        function P(y) {
          return h2.isTypeReference(y) && D(y.target);
        }
        a.isTupleTypeReference = P;
      } }), Y9 = Oe({ "node_modules/tsutils/typeguard/3.2/type.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true });
        var _ = (Ds(), Li($a));
        _.__exportStar(NV(), a);
      } }), OV = Oe({ "node_modules/tsutils/typeguard/3.2/index.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true });
        var _ = (Ds(), Li($a));
        _.__exportStar(K9(), a), _.__exportStar(Y9(), a);
      } }), MV = Oe({ "node_modules/tsutils/typeguard/type.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true });
        var _ = (Ds(), Li($a));
        _.__exportStar(Y9(), a);
      } }), LV = Oe({ "node_modules/tsutils/util/type.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.getBaseClassMemberOfClassElement = a.getIteratorYieldResultFromIteratorResult = a.getInstanceTypeOfClassLikeDeclaration = a.getConstructorTypeOfClassLikeDeclaration = a.getSymbolOfClassLikeDeclaration = a.getPropertyNameFromType = a.symbolHasReadonlyDeclaration = a.isPropertyReadonlyInType = a.getWellKnownSymbolPropertyOfType = a.getPropertyOfType = a.isBooleanLiteralType = a.isFalsyType = a.isThenableType = a.someTypePart = a.intersectionTypeParts = a.unionTypeParts = a.getCallSignaturesOfType = a.isTypeAssignableToString = a.isTypeAssignableToNumber = a.isOptionalChainingUndefinedMarkerType = a.removeOptionalChainingUndefinedMarkerType = a.removeOptionalityFromType = a.isEmptyObjectType = void 0;
        var _ = vr(), v = MV(), h2 = Q9(), D = X9();
        function P(ne) {
          if (v.isObjectType(ne) && ne.objectFlags & _.ObjectFlags.Anonymous && ne.getProperties().length === 0 && ne.getCallSignatures().length === 0 && ne.getConstructSignatures().length === 0 && ne.getStringIndexType() === void 0 && ne.getNumberIndexType() === void 0) {
            let ge = ne.getBaseTypes();
            return ge === void 0 || ge.every(P);
          }
          return false;
        }
        a.isEmptyObjectType = P;
        function y(ne, ge) {
          if (!m(ge, _.TypeFlags.Undefined))
            return ge;
          let Fe = m(ge, _.TypeFlags.Null);
          return ge = ne.getNonNullableType(ge), Fe ? ne.getNullableType(ge, _.TypeFlags.Null) : ge;
        }
        a.removeOptionalityFromType = y;
        function m(ne, ge) {
          for (let Fe of q(ne))
            if (h2.isTypeFlagSet(Fe, ge))
              return true;
          return false;
        }
        function C(ne, ge) {
          if (!v.isUnionType(ge))
            return d(ne, ge) ? ge.getNonNullableType() : ge;
          let Fe = 0, at = false;
          for (let Pt of ge.types)
            d(ne, Pt) ? at = true : Fe |= Pt.flags;
          return at ? ne.getNullableType(ge.getNonNullableType(), Fe) : ge;
        }
        a.removeOptionalChainingUndefinedMarkerType = C;
        function d(ne, ge) {
          return h2.isTypeFlagSet(ge, _.TypeFlags.Undefined) && ne.getNullableType(ge.getNonNullableType(), _.TypeFlags.Undefined) !== ge;
        }
        a.isOptionalChainingUndefinedMarkerType = d;
        function E(ne, ge) {
          return c(ne, ge, _.TypeFlags.NumberLike);
        }
        a.isTypeAssignableToNumber = E;
        function I(ne, ge) {
          return c(ne, ge, _.TypeFlags.StringLike);
        }
        a.isTypeAssignableToString = I;
        function c(ne, ge, Fe) {
          Fe |= _.TypeFlags.Any;
          let at;
          return function Pt(qt) {
            if (v.isTypeParameter(qt) && qt.symbol !== void 0 && qt.symbol.declarations !== void 0) {
              if (at === void 0)
                at = /* @__PURE__ */ new Set([qt]);
              else if (!at.has(qt))
                at.add(qt);
              else
                return false;
              let Zr = qt.symbol.declarations[0];
              return Zr.constraint === void 0 ? true : Pt(ne.getTypeFromTypeNode(Zr.constraint));
            }
            return v.isUnionType(qt) ? qt.types.every(Pt) : v.isIntersectionType(qt) ? qt.types.some(Pt) : h2.isTypeFlagSet(qt, Fe);
          }(ge);
        }
        function M(ne) {
          if (v.isUnionType(ne)) {
            let ge = [];
            for (let Fe of ne.types)
              ge.push(...M(Fe));
            return ge;
          }
          if (v.isIntersectionType(ne)) {
            let ge;
            for (let Fe of ne.types) {
              let at = M(Fe);
              if (at.length !== 0) {
                if (ge !== void 0)
                  return [];
                ge = at;
              }
            }
            return ge === void 0 ? [] : ge;
          }
          return ne.getCallSignatures();
        }
        a.getCallSignaturesOfType = M;
        function q(ne) {
          return v.isUnionType(ne) ? ne.types : [ne];
        }
        a.unionTypeParts = q;
        function W(ne) {
          return v.isIntersectionType(ne) ? ne.types : [ne];
        }
        a.intersectionTypeParts = W;
        function K(ne, ge, Fe) {
          return ge(ne) ? ne.types.some(Fe) : Fe(ne);
        }
        a.someTypePart = K;
        function ce(ne, ge) {
          let Fe = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ne.getTypeAtLocation(ge);
          for (let at of q(ne.getApparentType(Fe))) {
            let Pt = at.getProperty("then");
            if (Pt === void 0)
              continue;
            let qt = ne.getTypeOfSymbolAtLocation(Pt, ge);
            for (let Zr of q(qt))
              for (let Ri of Zr.getCallSignatures())
                if (Ri.parameters.length !== 0 && Ie(ne, Ri.parameters[0], ge))
                  return true;
          }
          return false;
        }
        a.isThenableType = ce;
        function Ie(ne, ge, Fe) {
          let at = ne.getApparentType(ne.getTypeOfSymbolAtLocation(ge, Fe));
          if (ge.valueDeclaration.dotDotDotToken && (at = at.getNumberIndexType(), at === void 0))
            return false;
          for (let Pt of q(at))
            if (Pt.getCallSignatures().length !== 0)
              return true;
          return false;
        }
        function me(ne) {
          return ne.flags & (_.TypeFlags.Undefined | _.TypeFlags.Null | _.TypeFlags.Void) ? true : v.isLiteralType(ne) ? !ne.value : Ae(ne, false);
        }
        a.isFalsyType = me;
        function Ae(ne, ge) {
          return h2.isTypeFlagSet(ne, _.TypeFlags.BooleanLiteral) && ne.intrinsicName === (ge ? "true" : "false");
        }
        a.isBooleanLiteralType = Ae;
        function te(ne, ge) {
          return ge.startsWith("__") ? ne.getProperties().find((Fe) => Fe.escapedName === ge) : ne.getProperty(ge);
        }
        a.getPropertyOfType = te;
        function he(ne, ge, Fe) {
          let at = "__@" + ge;
          for (let Pt of ne.getProperties()) {
            if (!Pt.name.startsWith(at))
              continue;
            let qt = Fe.getApparentType(Fe.getTypeAtLocation(Pt.valueDeclaration.name.expression)).symbol;
            if (Pt.escapedName === Pe(Fe, qt, ge))
              return Pt;
          }
        }
        a.getWellKnownSymbolPropertyOfType = he;
        function Pe(ne, ge, Fe) {
          let at = ge && ne.getTypeOfSymbolAtLocation(ge, ge.valueDeclaration).getProperty(Fe), Pt = at && ne.getTypeOfSymbolAtLocation(at, at.valueDeclaration);
          return Pt && v.isUniqueESSymbolType(Pt) ? Pt.escapedName : "__@" + Fe;
        }
        function R(ne, ge, Fe) {
          let at = false, Pt = false;
          for (let qt of q(ne))
            if (te(qt, ge) === void 0) {
              let Zr = (h2.isNumericPropertyName(ge) ? Fe.getIndexInfoOfType(qt, _.IndexKind.Number) : void 0) || Fe.getIndexInfoOfType(qt, _.IndexKind.String);
              if (Zr !== void 0 && Zr.isReadonly) {
                if (at)
                  return true;
                Pt = true;
              }
            } else {
              if (Pt || pe(qt, ge, Fe))
                return true;
              at = true;
            }
          return false;
        }
        a.isPropertyReadonlyInType = R;
        function pe(ne, ge, Fe) {
          return K(ne, v.isIntersectionType, (at) => {
            let Pt = te(at, ge);
            if (Pt === void 0)
              return false;
            if (Pt.flags & _.SymbolFlags.Transient) {
              if (/^(?:[1-9]\d*|0)$/.test(ge) && v.isTupleTypeReference(at))
                return at.target.readonly;
              switch (ke(at, ge, Fe)) {
                case true:
                  return true;
                case false:
                  return false;
              }
            }
            return h2.isSymbolFlagSet(Pt, _.SymbolFlags.ValueModule) || Je(Pt, Fe);
          });
        }
        function ke(ne, ge, Fe) {
          if (!v.isObjectType(ne) || !h2.isObjectFlagSet(ne, _.ObjectFlags.Mapped))
            return;
          let at = ne.symbol.declarations[0];
          return at.readonlyToken !== void 0 && !/^__@[^@]+$/.test(ge) ? at.readonlyToken.kind !== _.SyntaxKind.MinusToken : R(ne.modifiersType, ge, Fe);
        }
        function Je(ne, ge) {
          return (ne.flags & _.SymbolFlags.Accessor) === _.SymbolFlags.GetAccessor || ne.declarations !== void 0 && ne.declarations.some((Fe) => h2.isModifierFlagSet(Fe, _.ModifierFlags.Readonly) || D.isVariableDeclaration(Fe) && h2.isNodeFlagSet(Fe.parent, _.NodeFlags.Const) || D.isCallExpression(Fe) && h2.isReadonlyAssignmentDeclaration(Fe, ge) || D.isEnumMember(Fe) || (D.isPropertyAssignment(Fe) || D.isShorthandPropertyAssignment(Fe)) && h2.isInConstContext(Fe.parent));
        }
        a.symbolHasReadonlyDeclaration = Je;
        function Xe(ne) {
          if (ne.flags & (_.TypeFlags.StringLiteral | _.TypeFlags.NumberLiteral)) {
            let ge = String(ne.value);
            return { displayName: ge, symbolName: _.escapeLeadingUnderscores(ge) };
          }
          if (v.isUniqueESSymbolType(ne))
            return { displayName: `[${ne.symbol ? `${ee(ne.symbol) ? "Symbol." : ""}${ne.symbol.name}` : ne.escapedName.replace(/^__@|@\d+$/g, "")}]`, symbolName: ne.escapedName };
        }
        a.getPropertyNameFromType = Xe;
        function ee(ne) {
          return h2.isSymbolFlagSet(ne, _.SymbolFlags.Property) && ne.valueDeclaration !== void 0 && D.isInterfaceDeclaration(ne.valueDeclaration.parent) && ne.valueDeclaration.parent.name.text === "SymbolConstructor" && je(ne.valueDeclaration.parent);
        }
        function je(ne) {
          return h2.isNodeFlagSet(ne.parent, _.NodeFlags.GlobalAugmentation) || D.isSourceFile(ne.parent) && !_.isExternalModule(ne.parent);
        }
        function nt(ne, ge) {
          var Fe;
          return ge.getSymbolAtLocation((Fe = ne.name) !== null && Fe !== void 0 ? Fe : h2.getChildOfKind(ne, _.SyntaxKind.ClassKeyword));
        }
        a.getSymbolOfClassLikeDeclaration = nt;
        function Ze(ne, ge) {
          return ne.kind === _.SyntaxKind.ClassExpression ? ge.getTypeAtLocation(ne) : ge.getTypeOfSymbolAtLocation(nt(ne, ge), ne);
        }
        a.getConstructorTypeOfClassLikeDeclaration = Ze;
        function st(ne, ge) {
          return ne.kind === _.SyntaxKind.ClassDeclaration ? ge.getTypeAtLocation(ne) : ge.getDeclaredTypeOfSymbol(nt(ne, ge));
        }
        a.getInstanceTypeOfClassLikeDeclaration = st;
        function tt(ne, ge, Fe) {
          return v.isUnionType(ne) && ne.types.find((at) => {
            let Pt = at.getProperty("done");
            return Pt !== void 0 && Ae(y(Fe, Fe.getTypeOfSymbolAtLocation(Pt, ge)), false);
          }) || ne;
        }
        a.getIteratorYieldResultFromIteratorResult = tt;
        function ct(ne, ge) {
          if (!D.isClassLikeDeclaration(ne.parent))
            return;
          let Fe = h2.getBaseOfClassLikeExpression(ne.parent);
          if (Fe === void 0)
            return;
          let at = h2.getSingleLateBoundPropertyNameOfPropertyName(ne.name, ge);
          if (at === void 0)
            return;
          let Pt = ge.getTypeAtLocation(h2.hasModifier(ne.modifiers, _.SyntaxKind.StaticKeyword) ? Fe.expression : Fe);
          return te(Pt, at.symbolName);
        }
        a.getBaseClassMemberOfClassElement = ct;
      } }), Q9 = Oe({ "node_modules/tsutils/util/util.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.isValidIdentifier = a.getLineBreakStyle = a.getLineRanges = a.forEachComment = a.forEachTokenWithTrivia = a.forEachToken = a.isFunctionWithBody = a.hasOwnThisReference = a.isBlockScopeBoundary = a.isFunctionScopeBoundary = a.isTypeScopeBoundary = a.isScopeBoundary = a.ScopeBoundarySelector = a.ScopeBoundary = a.isInSingleStatementContext = a.isBlockScopedDeclarationStatement = a.isBlockScopedVariableDeclaration = a.isBlockScopedVariableDeclarationList = a.getVariableDeclarationKind = a.VariableDeclarationKind = a.forEachDeclaredVariable = a.forEachDestructuringIdentifier = a.getPropertyName = a.getWrappedNodeAtPosition = a.getAstNodeAtPosition = a.commentText = a.isPositionInComment = a.getCommentAtPosition = a.getTokenAtPosition = a.getNextToken = a.getPreviousToken = a.getNextStatement = a.getPreviousStatement = a.isModifierFlagSet = a.isObjectFlagSet = a.isSymbolFlagSet = a.isTypeFlagSet = a.isNodeFlagSet = a.hasAccessModifier = a.isParameterProperty = a.hasModifier = a.getModifier = a.isThisParameter = a.isKeywordKind = a.isJsDocKind = a.isTypeNodeKind = a.isAssignmentKind = a.isNodeKind = a.isTokenKind = a.getChildOfKind = void 0, a.getBaseOfClassLikeExpression = a.hasExhaustiveCaseClauses = a.formatPseudoBigInt = a.unwrapParentheses = a.getSingleLateBoundPropertyNameOfPropertyName = a.getLateBoundPropertyNamesOfPropertyName = a.getLateBoundPropertyNames = a.getPropertyNameOfWellKnownSymbol = a.isWellKnownSymbolLiterally = a.isBindableObjectDefinePropertyCall = a.isReadonlyAssignmentDeclaration = a.isInConstContext = a.isConstAssertion = a.getTsCheckDirective = a.getCheckJsDirective = a.isAmbientModule = a.isCompilerOptionEnabled = a.isStrictCompilerOptionEnabled = a.getIIFE = a.isAmbientModuleBlock = a.isStatementInAmbientContext = a.findImportLikeNodes = a.findImports = a.ImportKind = a.parseJsDocOfNode = a.getJsDoc = a.canHaveJsDoc = a.isReassignmentTarget = a.getAccessKind = a.AccessKind = a.isExpressionValueUsed = a.getDeclarationOfBindingElement = a.hasSideEffects = a.SideEffectOptions = a.isSameLine = a.isNumericPropertyName = a.isValidJsxIdentifier = a.isValidNumericLiteral = a.isValidPropertyName = a.isValidPropertyAccess = void 0;
        var _ = vr(), v = X9(), h2 = OV(), D = LV();
        function P(S, H, le) {
          for (let Be of S.getChildren(le))
            if (Be.kind === H)
              return Be;
        }
        a.getChildOfKind = P;
        function y(S) {
          return S >= _.SyntaxKind.FirstToken && S <= _.SyntaxKind.LastToken;
        }
        a.isTokenKind = y;
        function m(S) {
          return S >= _.SyntaxKind.FirstNode;
        }
        a.isNodeKind = m;
        function C(S) {
          return S >= _.SyntaxKind.FirstAssignment && S <= _.SyntaxKind.LastAssignment;
        }
        a.isAssignmentKind = C;
        function d(S) {
          return S >= _.SyntaxKind.FirstTypeNode && S <= _.SyntaxKind.LastTypeNode;
        }
        a.isTypeNodeKind = d;
        function E(S) {
          return S >= _.SyntaxKind.FirstJSDocNode && S <= _.SyntaxKind.LastJSDocNode;
        }
        a.isJsDocKind = E;
        function I(S) {
          return S >= _.SyntaxKind.FirstKeyword && S <= _.SyntaxKind.LastKeyword;
        }
        a.isKeywordKind = I;
        function c(S) {
          return S.name.kind === _.SyntaxKind.Identifier && S.name.originalKeywordKind === _.SyntaxKind.ThisKeyword;
        }
        a.isThisParameter = c;
        function M(S, H) {
          if (S.modifiers !== void 0) {
            for (let le of S.modifiers)
              if (le.kind === H)
                return le;
          }
        }
        a.getModifier = M;
        function q(S) {
          if (S === void 0)
            return false;
          for (var H = arguments.length, le = new Array(H > 1 ? H - 1 : 0), Be = 1; Be < H; Be++)
            le[Be - 1] = arguments[Be];
          for (let rt of S)
            if (le.includes(rt.kind))
              return true;
          return false;
        }
        a.hasModifier = q;
        function W(S) {
          return q(S.modifiers, _.SyntaxKind.PublicKeyword, _.SyntaxKind.ProtectedKeyword, _.SyntaxKind.PrivateKeyword, _.SyntaxKind.ReadonlyKeyword);
        }
        a.isParameterProperty = W;
        function K(S) {
          return me(S, _.ModifierFlags.AccessibilityModifier);
        }
        a.hasAccessModifier = K;
        function ce(S, H) {
          return (S.flags & H) !== 0;
        }
        a.isNodeFlagSet = ce, a.isTypeFlagSet = ce, a.isSymbolFlagSet = ce;
        function Ie(S, H) {
          return (S.objectFlags & H) !== 0;
        }
        a.isObjectFlagSet = Ie;
        function me(S, H) {
          return (_.getCombinedModifierFlags(S) & H) !== 0;
        }
        a.isModifierFlagSet = me;
        function Ae(S) {
          let H = S.parent;
          if (v.isBlockLike(H)) {
            let le = H.statements.indexOf(S);
            if (le > 0)
              return H.statements[le - 1];
          }
        }
        a.getPreviousStatement = Ae;
        function te(S) {
          let H = S.parent;
          if (v.isBlockLike(H)) {
            let le = H.statements.indexOf(S);
            if (le < H.statements.length)
              return H.statements[le + 1];
          }
        }
        a.getNextStatement = te;
        function he(S, H) {
          let { pos: le } = S;
          if (le !== 0) {
            do
              S = S.parent;
            while (S.pos === le);
            return pe(S, le - 1, H != null ? H : S.getSourceFile(), false);
          }
        }
        a.getPreviousToken = he;
        function Pe(S, H) {
          if (S.kind === _.SyntaxKind.SourceFile || S.kind === _.SyntaxKind.EndOfFileToken)
            return;
          let le = S.end;
          for (S = S.parent; S.end === le; ) {
            if (S.parent === void 0)
              return S.endOfFileToken;
            S = S.parent;
          }
          return pe(S, le, H != null ? H : S.getSourceFile(), false);
        }
        a.getNextToken = Pe;
        function R(S, H, le, Be) {
          if (!(H < S.pos || H >= S.end))
            return y(S.kind) ? S : pe(S, H, le != null ? le : S.getSourceFile(), Be === true);
        }
        a.getTokenAtPosition = R;
        function pe(S, H, le, Be) {
          if (!Be && (S = je(S, H), y(S.kind)))
            return S;
          e:
            for (; ; ) {
              for (let rt of S.getChildren(le))
                if (rt.end > H && (Be || rt.kind !== _.SyntaxKind.JSDocComment)) {
                  if (y(rt.kind))
                    return rt;
                  S = rt;
                  continue e;
                }
              return;
            }
        }
        function ke(S, H) {
          let le = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : S, Be = R(le, H, S);
          if (Be === void 0 || Be.kind === _.SyntaxKind.JsxText || H >= Be.end - (_.tokenToString(Be.kind) || "").length)
            return;
          let rt = Be.pos === 0 ? (_.getShebang(S.text) || "").length : Be.pos;
          return rt !== 0 && _.forEachTrailingCommentRange(S.text, rt, Je, H) || _.forEachLeadingCommentRange(S.text, rt, Je, H);
        }
        a.getCommentAtPosition = ke;
        function Je(S, H, le, Be, rt) {
          return rt >= S && rt < H ? { pos: S, end: H, kind: le } : void 0;
        }
        function Xe(S, H, le) {
          return ke(S, H, le) !== void 0;
        }
        a.isPositionInComment = Xe;
        function ee(S, H) {
          return S.substring(H.pos + 2, H.kind === _.SyntaxKind.SingleLineCommentTrivia ? H.end : H.end - 2);
        }
        a.commentText = ee;
        function je(S, H) {
          if (!(S.pos > H || S.end <= H)) {
            for (; m(S.kind); ) {
              let le = _.forEachChild(S, (Be) => Be.pos <= H && Be.end > H ? Be : void 0);
              if (le === void 0)
                break;
              S = le;
            }
            return S;
          }
        }
        a.getAstNodeAtPosition = je;
        function nt(S, H) {
          if (S.node.pos > H || S.node.end <= H)
            return;
          e:
            for (; ; ) {
              for (let le of S.children) {
                if (le.node.pos > H)
                  return S;
                if (le.node.end > H) {
                  S = le;
                  continue e;
                }
              }
              return S;
            }
        }
        a.getWrappedNodeAtPosition = nt;
        function Ze(S) {
          if (S.kind === _.SyntaxKind.ComputedPropertyName) {
            let H = Os(S.expression);
            if (v.isPrefixUnaryExpression(H)) {
              let le = false;
              switch (H.operator) {
                case _.SyntaxKind.MinusToken:
                  le = true;
                case _.SyntaxKind.PlusToken:
                  return v.isNumericLiteral(H.operand) ? `${le ? "-" : ""}${H.operand.text}` : h2.isBigIntLiteral(H.operand) ? `${le ? "-" : ""}${H.operand.text.slice(0, -1)}` : void 0;
                default:
                  return;
              }
            }
            return h2.isBigIntLiteral(H) ? H.text.slice(0, -1) : v.isNumericOrStringLikeLiteral(H) ? H.text : void 0;
          }
          return S.kind === _.SyntaxKind.PrivateIdentifier ? void 0 : S.text;
        }
        a.getPropertyName = Ze;
        function st(S, H) {
          for (let le of S.elements) {
            if (le.kind !== _.SyntaxKind.BindingElement)
              continue;
            let Be;
            if (le.name.kind === _.SyntaxKind.Identifier ? Be = H(le) : Be = st(le.name, H), Be)
              return Be;
          }
        }
        a.forEachDestructuringIdentifier = st;
        function tt(S, H) {
          for (let le of S.declarations) {
            let Be;
            if (le.name.kind === _.SyntaxKind.Identifier ? Be = H(le) : Be = st(le.name, H), Be)
              return Be;
          }
        }
        a.forEachDeclaredVariable = tt;
        (function(S) {
          S[S.Var = 0] = "Var", S[S.Let = 1] = "Let", S[S.Const = 2] = "Const";
        })(a.VariableDeclarationKind || (a.VariableDeclarationKind = {}));
        function ne(S) {
          return S.flags & _.NodeFlags.Let ? 1 : S.flags & _.NodeFlags.Const ? 2 : 0;
        }
        a.getVariableDeclarationKind = ne;
        function ge(S) {
          return (S.flags & _.NodeFlags.BlockScoped) !== 0;
        }
        a.isBlockScopedVariableDeclarationList = ge;
        function Fe(S) {
          let H = S.parent;
          return H.kind === _.SyntaxKind.CatchClause || ge(H);
        }
        a.isBlockScopedVariableDeclaration = Fe;
        function at(S) {
          switch (S.kind) {
            case _.SyntaxKind.VariableStatement:
              return ge(S.declarationList);
            case _.SyntaxKind.ClassDeclaration:
            case _.SyntaxKind.EnumDeclaration:
            case _.SyntaxKind.InterfaceDeclaration:
            case _.SyntaxKind.TypeAliasDeclaration:
              return true;
            default:
              return false;
          }
        }
        a.isBlockScopedDeclarationStatement = at;
        function Pt(S) {
          switch (S.parent.kind) {
            case _.SyntaxKind.ForStatement:
            case _.SyntaxKind.ForInStatement:
            case _.SyntaxKind.ForOfStatement:
            case _.SyntaxKind.WhileStatement:
            case _.SyntaxKind.DoStatement:
            case _.SyntaxKind.IfStatement:
            case _.SyntaxKind.WithStatement:
            case _.SyntaxKind.LabeledStatement:
              return true;
            default:
              return false;
          }
        }
        a.isInSingleStatementContext = Pt;
        (function(S) {
          S[S.None = 0] = "None", S[S.Function = 1] = "Function", S[S.Block = 2] = "Block", S[S.Type = 4] = "Type", S[S.ConditionalType = 8] = "ConditionalType";
        })(a.ScopeBoundary || (a.ScopeBoundary = {}));
        (function(S) {
          S[S.Function = 1] = "Function", S[S.Block = 3] = "Block", S[S.Type = 7] = "Type", S[S.InferType = 8] = "InferType";
        })(a.ScopeBoundarySelector || (a.ScopeBoundarySelector = {}));
        function Ri(S) {
          return ua(S) || Ka(S) || la(S);
        }
        a.isScopeBoundary = Ri;
        function la(S) {
          switch (S.kind) {
            case _.SyntaxKind.InterfaceDeclaration:
            case _.SyntaxKind.TypeAliasDeclaration:
            case _.SyntaxKind.MappedType:
              return 4;
            case _.SyntaxKind.ConditionalType:
              return 8;
            default:
              return 0;
          }
        }
        a.isTypeScopeBoundary = la;
        function ua(S) {
          switch (S.kind) {
            case _.SyntaxKind.FunctionExpression:
            case _.SyntaxKind.ArrowFunction:
            case _.SyntaxKind.Constructor:
            case _.SyntaxKind.ModuleDeclaration:
            case _.SyntaxKind.ClassDeclaration:
            case _.SyntaxKind.ClassExpression:
            case _.SyntaxKind.EnumDeclaration:
            case _.SyntaxKind.MethodDeclaration:
            case _.SyntaxKind.FunctionDeclaration:
            case _.SyntaxKind.GetAccessor:
            case _.SyntaxKind.SetAccessor:
            case _.SyntaxKind.MethodSignature:
            case _.SyntaxKind.CallSignature:
            case _.SyntaxKind.ConstructSignature:
            case _.SyntaxKind.ConstructorType:
            case _.SyntaxKind.FunctionType:
              return 1;
            case _.SyntaxKind.SourceFile:
              return _.isExternalModule(S) ? 1 : 0;
            default:
              return 0;
          }
        }
        a.isFunctionScopeBoundary = ua;
        function Ka(S) {
          switch (S.kind) {
            case _.SyntaxKind.Block:
              let H = S.parent;
              return H.kind !== _.SyntaxKind.CatchClause && (H.kind === _.SyntaxKind.SourceFile || !ua(H)) ? 2 : 0;
            case _.SyntaxKind.ForStatement:
            case _.SyntaxKind.ForInStatement:
            case _.SyntaxKind.ForOfStatement:
            case _.SyntaxKind.CaseBlock:
            case _.SyntaxKind.CatchClause:
            case _.SyntaxKind.WithStatement:
              return 2;
            default:
              return 0;
          }
        }
        a.isBlockScopeBoundary = Ka;
        function co(S) {
          switch (S.kind) {
            case _.SyntaxKind.ClassDeclaration:
            case _.SyntaxKind.ClassExpression:
            case _.SyntaxKind.FunctionExpression:
              return true;
            case _.SyntaxKind.FunctionDeclaration:
              return S.body !== void 0;
            case _.SyntaxKind.MethodDeclaration:
            case _.SyntaxKind.GetAccessor:
            case _.SyntaxKind.SetAccessor:
              return S.parent.kind === _.SyntaxKind.ObjectLiteralExpression;
            default:
              return false;
          }
        }
        a.hasOwnThisReference = co;
        function be(S) {
          switch (S.kind) {
            case _.SyntaxKind.GetAccessor:
            case _.SyntaxKind.SetAccessor:
            case _.SyntaxKind.FunctionDeclaration:
            case _.SyntaxKind.MethodDeclaration:
            case _.SyntaxKind.Constructor:
              return S.body !== void 0;
            case _.SyntaxKind.FunctionExpression:
            case _.SyntaxKind.ArrowFunction:
              return true;
            default:
              return false;
          }
        }
        a.isFunctionWithBody = be;
        function Ke(S, H) {
          let le = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : S.getSourceFile(), Be = [];
          for (; ; ) {
            if (y(S.kind))
              H(S);
            else if (S.kind !== _.SyntaxKind.JSDocComment) {
              let rt = S.getChildren(le);
              if (rt.length === 1) {
                S = rt[0];
                continue;
              }
              for (let ut = rt.length - 1; ut >= 0; --ut)
                Be.push(rt[ut]);
            }
            if (Be.length === 0)
              break;
            S = Be.pop();
          }
        }
        a.forEachToken = Ke;
        function Et(S, H) {
          let le = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : S.getSourceFile(), Be = le.text, rt = _.createScanner(le.languageVersion, false, le.languageVariant, Be);
          return Ke(S, (ut) => {
            let Ht = ut.kind === _.SyntaxKind.JsxText || ut.pos === ut.end ? ut.pos : ut.getStart(le);
            if (Ht !== ut.pos) {
              rt.setTextPos(ut.pos);
              let Fr = rt.scan(), Cr = rt.getTokenPos();
              for (; Cr < Ht; ) {
                let ir = rt.getTextPos();
                if (H(Be, Fr, { pos: Cr, end: ir }, ut.parent), ir === Ht)
                  break;
                Fr = rt.scan(), Cr = rt.getTokenPos();
              }
            }
            return H(Be, ut.kind, { end: ut.end, pos: Ht }, ut.parent);
          }, le);
        }
        a.forEachTokenWithTrivia = Et;
        function Ft(S, H) {
          let le = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : S.getSourceFile(), Be = le.text, rt = le.languageVariant !== _.LanguageVariant.JSX;
          return Ke(S, (Ht) => {
            if (Ht.pos !== Ht.end && (Ht.kind !== _.SyntaxKind.JsxText && _.forEachLeadingCommentRange(Be, Ht.pos === 0 ? (_.getShebang(Be) || "").length : Ht.pos, ut), rt || or(Ht)))
              return _.forEachTrailingCommentRange(Be, Ht.end, ut);
          }, le);
          function ut(Ht, Fr, Cr) {
            H(Be, { pos: Ht, end: Fr, kind: Cr });
          }
        }
        a.forEachComment = Ft;
        function or(S) {
          switch (S.kind) {
            case _.SyntaxKind.CloseBraceToken:
              return S.parent.kind !== _.SyntaxKind.JsxExpression || !Wr(S.parent.parent);
            case _.SyntaxKind.GreaterThanToken:
              switch (S.parent.kind) {
                case _.SyntaxKind.JsxOpeningElement:
                  return S.end !== S.parent.end;
                case _.SyntaxKind.JsxOpeningFragment:
                  return false;
                case _.SyntaxKind.JsxSelfClosingElement:
                  return S.end !== S.parent.end || !Wr(S.parent.parent);
                case _.SyntaxKind.JsxClosingElement:
                case _.SyntaxKind.JsxClosingFragment:
                  return !Wr(S.parent.parent.parent);
              }
          }
          return true;
        }
        function Wr(S) {
          return S.kind === _.SyntaxKind.JsxElement || S.kind === _.SyntaxKind.JsxFragment;
        }
        function m_(S) {
          let H = S.getLineStarts(), le = [], Be = H.length, rt = S.text, ut = 0;
          for (let Ht = 1; Ht < Be; ++Ht) {
            let Fr = H[Ht], Cr = Fr;
            for (; Cr > ut && _.isLineBreak(rt.charCodeAt(Cr - 1)); --Cr)
              ;
            le.push({ pos: ut, end: Fr, contentLength: Cr - ut }), ut = Fr;
          }
          return le.push({ pos: ut, end: S.end, contentLength: S.end - ut }), le;
        }
        a.getLineRanges = m_;
        function Uc(S) {
          let H = S.getLineStarts();
          return H.length === 1 || H[1] < 2 || S.text[H[1] - 2] !== "\r" ? `
` : `\r
`;
        }
        a.getLineBreakStyle = Uc;
        var ji;
        function lo(S, H) {
          return ji === void 0 ? ji = _.createScanner(H, false, void 0, S) : (ji.setScriptTarget(H), ji.setText(S)), ji.scan(), ji;
        }
        function zc(S) {
          let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _.ScriptTarget.Latest, le = lo(S, H);
          return le.isIdentifier() && le.getTextPos() === S.length && le.getTokenPos() === 0;
        }
        a.isValidIdentifier = zc;
        function Qn(S) {
          return S >= 65536 ? 2 : 1;
        }
        function uo(S) {
          let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _.ScriptTarget.Latest;
          if (S.length === 0)
            return false;
          let le = S.codePointAt(0);
          if (!_.isIdentifierStart(le, H))
            return false;
          for (let Be = Qn(le); Be < S.length; Be += Qn(le))
            if (le = S.codePointAt(Be), !_.isIdentifierPart(le, H))
              return false;
          return true;
        }
        a.isValidPropertyAccess = uo;
        function Wc(S) {
          let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _.ScriptTarget.Latest;
          if (uo(S, H))
            return true;
          let le = lo(S, H);
          return le.getTextPos() === S.length && le.getToken() === _.SyntaxKind.NumericLiteral && le.getTokenValue() === S;
        }
        a.isValidPropertyName = Wc;
        function Vc(S) {
          let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _.ScriptTarget.Latest, le = lo(S, H);
          return le.getToken() === _.SyntaxKind.NumericLiteral && le.getTextPos() === S.length && le.getTokenPos() === 0;
        }
        a.isValidNumericLiteral = Vc;
        function Hc(S) {
          let H = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _.ScriptTarget.Latest;
          if (S.length === 0)
            return false;
          let le = false, Be = S.codePointAt(0);
          if (!_.isIdentifierStart(Be, H))
            return false;
          for (let rt = Qn(Be); rt < S.length; rt += Qn(Be))
            if (Be = S.codePointAt(rt), !_.isIdentifierPart(Be, H) && Be !== 45)
              if (!le && Be === 58 && rt + Qn(Be) !== S.length)
                le = true;
              else
                return false;
          return true;
        }
        a.isValidJsxIdentifier = Hc;
        function Gc(S) {
          return String(+S) === S;
        }
        a.isNumericPropertyName = Gc;
        function h_(S, H, le) {
          return _.getLineAndCharacterOfPosition(S, H).line === _.getLineAndCharacterOfPosition(S, le).line;
        }
        a.isSameLine = h_;
        (function(S) {
          S[S.None = 0] = "None", S[S.TaggedTemplate = 1] = "TaggedTemplate", S[S.Constructor = 2] = "Constructor", S[S.JsxElement = 4] = "JsxElement";
        })(a.SideEffectOptions || (a.SideEffectOptions = {}));
        function $c(S, H) {
          var le, Be;
          let rt = [];
          for (; ; ) {
            switch (S.kind) {
              case _.SyntaxKind.CallExpression:
              case _.SyntaxKind.PostfixUnaryExpression:
              case _.SyntaxKind.AwaitExpression:
              case _.SyntaxKind.YieldExpression:
              case _.SyntaxKind.DeleteExpression:
                return true;
              case _.SyntaxKind.TypeAssertionExpression:
              case _.SyntaxKind.AsExpression:
              case _.SyntaxKind.ParenthesizedExpression:
              case _.SyntaxKind.NonNullExpression:
              case _.SyntaxKind.VoidExpression:
              case _.SyntaxKind.TypeOfExpression:
              case _.SyntaxKind.PropertyAccessExpression:
              case _.SyntaxKind.SpreadElement:
              case _.SyntaxKind.PartiallyEmittedExpression:
                S = S.expression;
                continue;
              case _.SyntaxKind.BinaryExpression:
                if (C(S.operatorToken.kind))
                  return true;
                rt.push(S.right), S = S.left;
                continue;
              case _.SyntaxKind.PrefixUnaryExpression:
                switch (S.operator) {
                  case _.SyntaxKind.PlusPlusToken:
                  case _.SyntaxKind.MinusMinusToken:
                    return true;
                  default:
                    S = S.operand;
                    continue;
                }
              case _.SyntaxKind.ElementAccessExpression:
                S.argumentExpression !== void 0 && rt.push(S.argumentExpression), S = S.expression;
                continue;
              case _.SyntaxKind.ConditionalExpression:
                rt.push(S.whenTrue, S.whenFalse), S = S.condition;
                continue;
              case _.SyntaxKind.NewExpression:
                if (H & 2)
                  return true;
                S.arguments !== void 0 && rt.push(...S.arguments), S = S.expression;
                continue;
              case _.SyntaxKind.TaggedTemplateExpression:
                if (H & 1)
                  return true;
                if (rt.push(S.tag), S = S.template, S.kind === _.SyntaxKind.NoSubstitutionTemplateLiteral)
                  break;
              case _.SyntaxKind.TemplateExpression:
                for (let ut of S.templateSpans)
                  rt.push(ut.expression);
                break;
              case _.SyntaxKind.ClassExpression: {
                if (S.decorators !== void 0)
                  return true;
                for (let Ht of S.members) {
                  if (Ht.decorators !== void 0)
                    return true;
                  if (!q(Ht.modifiers, _.SyntaxKind.DeclareKeyword))
                    if (((le = Ht.name) === null || le === void 0 ? void 0 : le.kind) === _.SyntaxKind.ComputedPropertyName && rt.push(Ht.name.expression), v.isMethodDeclaration(Ht)) {
                      for (let Fr of Ht.parameters)
                        if (Fr.decorators !== void 0)
                          return true;
                    } else
                      v.isPropertyDeclaration(Ht) && Ht.initializer !== void 0 && q(Ht.modifiers, _.SyntaxKind.StaticKeyword) && rt.push(Ht.initializer);
                }
                let ut = E_(S);
                if (ut === void 0)
                  break;
                S = ut.expression;
                continue;
              }
              case _.SyntaxKind.ArrayLiteralExpression:
                rt.push(...S.elements);
                break;
              case _.SyntaxKind.ObjectLiteralExpression:
                for (let ut of S.properties)
                  switch (((Be = ut.name) === null || Be === void 0 ? void 0 : Be.kind) === _.SyntaxKind.ComputedPropertyName && rt.push(ut.name.expression), ut.kind) {
                    case _.SyntaxKind.PropertyAssignment:
                      rt.push(ut.initializer);
                      break;
                    case _.SyntaxKind.SpreadAssignment:
                      rt.push(ut.expression);
                  }
                break;
              case _.SyntaxKind.JsxExpression:
                if (S.expression === void 0)
                  break;
                S = S.expression;
                continue;
              case _.SyntaxKind.JsxElement:
              case _.SyntaxKind.JsxFragment:
                for (let ut of S.children)
                  ut.kind !== _.SyntaxKind.JsxText && rt.push(ut);
                if (S.kind === _.SyntaxKind.JsxFragment)
                  break;
                S = S.openingElement;
              case _.SyntaxKind.JsxSelfClosingElement:
              case _.SyntaxKind.JsxOpeningElement:
                if (H & 4)
                  return true;
                for (let ut of S.attributes.properties)
                  ut.kind === _.SyntaxKind.JsxSpreadAttribute ? rt.push(ut.expression) : ut.initializer !== void 0 && rt.push(ut.initializer);
                break;
              case _.SyntaxKind.CommaListExpression:
                rt.push(...S.elements);
            }
            if (rt.length === 0)
              return false;
            S = rt.pop();
          }
        }
        a.hasSideEffects = $c;
        function po(S) {
          let H = S.parent.parent;
          for (; H.kind === _.SyntaxKind.BindingElement; )
            H = H.parent.parent;
          return H;
        }
        a.getDeclarationOfBindingElement = po;
        function jr(S) {
          for (; ; ) {
            let H = S.parent;
            switch (H.kind) {
              case _.SyntaxKind.CallExpression:
              case _.SyntaxKind.NewExpression:
              case _.SyntaxKind.ElementAccessExpression:
              case _.SyntaxKind.WhileStatement:
              case _.SyntaxKind.DoStatement:
              case _.SyntaxKind.WithStatement:
              case _.SyntaxKind.ThrowStatement:
              case _.SyntaxKind.ReturnStatement:
              case _.SyntaxKind.JsxExpression:
              case _.SyntaxKind.JsxSpreadAttribute:
              case _.SyntaxKind.JsxElement:
              case _.SyntaxKind.JsxFragment:
              case _.SyntaxKind.JsxSelfClosingElement:
              case _.SyntaxKind.ComputedPropertyName:
              case _.SyntaxKind.ArrowFunction:
              case _.SyntaxKind.ExportSpecifier:
              case _.SyntaxKind.ExportAssignment:
              case _.SyntaxKind.ImportDeclaration:
              case _.SyntaxKind.ExternalModuleReference:
              case _.SyntaxKind.Decorator:
              case _.SyntaxKind.TaggedTemplateExpression:
              case _.SyntaxKind.TemplateSpan:
              case _.SyntaxKind.ExpressionWithTypeArguments:
              case _.SyntaxKind.TypeOfExpression:
              case _.SyntaxKind.AwaitExpression:
              case _.SyntaxKind.YieldExpression:
              case _.SyntaxKind.LiteralType:
              case _.SyntaxKind.JsxAttributes:
              case _.SyntaxKind.JsxOpeningElement:
              case _.SyntaxKind.JsxClosingElement:
              case _.SyntaxKind.IfStatement:
              case _.SyntaxKind.CaseClause:
              case _.SyntaxKind.SwitchStatement:
                return true;
              case _.SyntaxKind.PropertyAccessExpression:
                return H.expression === S;
              case _.SyntaxKind.QualifiedName:
                return H.left === S;
              case _.SyntaxKind.ShorthandPropertyAssignment:
                return H.objectAssignmentInitializer === S || !qn(H);
              case _.SyntaxKind.PropertyAssignment:
                return H.initializer === S && !qn(H);
              case _.SyntaxKind.SpreadAssignment:
              case _.SyntaxKind.SpreadElement:
              case _.SyntaxKind.ArrayLiteralExpression:
                return !qn(H);
              case _.SyntaxKind.ParenthesizedExpression:
              case _.SyntaxKind.AsExpression:
              case _.SyntaxKind.TypeAssertionExpression:
              case _.SyntaxKind.PostfixUnaryExpression:
              case _.SyntaxKind.PrefixUnaryExpression:
              case _.SyntaxKind.NonNullExpression:
                S = H;
                continue;
              case _.SyntaxKind.ForStatement:
                return H.condition === S;
              case _.SyntaxKind.ForInStatement:
              case _.SyntaxKind.ForOfStatement:
                return H.expression === S;
              case _.SyntaxKind.ConditionalExpression:
                if (H.condition === S)
                  return true;
                S = H;
                break;
              case _.SyntaxKind.PropertyDeclaration:
              case _.SyntaxKind.BindingElement:
              case _.SyntaxKind.VariableDeclaration:
              case _.SyntaxKind.Parameter:
              case _.SyntaxKind.EnumMember:
                return H.initializer === S;
              case _.SyntaxKind.ImportEqualsDeclaration:
                return H.moduleReference === S;
              case _.SyntaxKind.CommaListExpression:
                if (H.elements[H.elements.length - 1] !== S)
                  return false;
                S = H;
                break;
              case _.SyntaxKind.BinaryExpression:
                if (H.right === S) {
                  if (H.operatorToken.kind === _.SyntaxKind.CommaToken) {
                    S = H;
                    break;
                  }
                  return true;
                }
                switch (H.operatorToken.kind) {
                  case _.SyntaxKind.CommaToken:
                  case _.SyntaxKind.EqualsToken:
                    return false;
                  case _.SyntaxKind.EqualsEqualsEqualsToken:
                  case _.SyntaxKind.EqualsEqualsToken:
                  case _.SyntaxKind.ExclamationEqualsEqualsToken:
                  case _.SyntaxKind.ExclamationEqualsToken:
                  case _.SyntaxKind.InstanceOfKeyword:
                  case _.SyntaxKind.PlusToken:
                  case _.SyntaxKind.MinusToken:
                  case _.SyntaxKind.AsteriskToken:
                  case _.SyntaxKind.SlashToken:
                  case _.SyntaxKind.PercentToken:
                  case _.SyntaxKind.AsteriskAsteriskToken:
                  case _.SyntaxKind.GreaterThanToken:
                  case _.SyntaxKind.GreaterThanGreaterThanToken:
                  case _.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:
                  case _.SyntaxKind.GreaterThanEqualsToken:
                  case _.SyntaxKind.LessThanToken:
                  case _.SyntaxKind.LessThanLessThanToken:
                  case _.SyntaxKind.LessThanEqualsToken:
                  case _.SyntaxKind.AmpersandToken:
                  case _.SyntaxKind.BarToken:
                  case _.SyntaxKind.CaretToken:
                  case _.SyntaxKind.BarBarToken:
                  case _.SyntaxKind.AmpersandAmpersandToken:
                  case _.SyntaxKind.QuestionQuestionToken:
                  case _.SyntaxKind.InKeyword:
                  case _.SyntaxKind.QuestionQuestionEqualsToken:
                  case _.SyntaxKind.AmpersandAmpersandEqualsToken:
                  case _.SyntaxKind.BarBarEqualsToken:
                    return true;
                  default:
                    S = H;
                }
                break;
              default:
                return false;
            }
          }
        }
        a.isExpressionValueUsed = jr;
        function qn(S) {
          switch (S.kind) {
            case _.SyntaxKind.ShorthandPropertyAssignment:
              if (S.objectAssignmentInitializer !== void 0)
                return true;
            case _.SyntaxKind.PropertyAssignment:
            case _.SyntaxKind.SpreadAssignment:
              S = S.parent;
              break;
            case _.SyntaxKind.SpreadElement:
              if (S.parent.kind !== _.SyntaxKind.ArrayLiteralExpression)
                return false;
              S = S.parent;
          }
          for (; ; )
            switch (S.parent.kind) {
              case _.SyntaxKind.BinaryExpression:
                return S.parent.left === S && S.parent.operatorToken.kind === _.SyntaxKind.EqualsToken;
              case _.SyntaxKind.ForOfStatement:
                return S.parent.initializer === S;
              case _.SyntaxKind.ArrayLiteralExpression:
              case _.SyntaxKind.ObjectLiteralExpression:
                S = S.parent;
                break;
              case _.SyntaxKind.SpreadAssignment:
              case _.SyntaxKind.PropertyAssignment:
                S = S.parent.parent;
                break;
              case _.SyntaxKind.SpreadElement:
                if (S.parent.parent.kind !== _.SyntaxKind.ArrayLiteralExpression)
                  return false;
                S = S.parent.parent;
                break;
              default:
                return false;
            }
        }
        (function(S) {
          S[S.None = 0] = "None", S[S.Read = 1] = "Read", S[S.Write = 2] = "Write", S[S.Delete = 4] = "Delete", S[S.ReadWrite = 3] = "ReadWrite", S[S.Modification = 6] = "Modification";
        })(a.AccessKind || (a.AccessKind = {}));
        function ks(S) {
          let H = S.parent;
          switch (H.kind) {
            case _.SyntaxKind.DeleteExpression:
              return 4;
            case _.SyntaxKind.PostfixUnaryExpression:
              return 3;
            case _.SyntaxKind.PrefixUnaryExpression:
              return H.operator === _.SyntaxKind.PlusPlusToken || H.operator === _.SyntaxKind.MinusMinusToken ? 3 : 1;
            case _.SyntaxKind.BinaryExpression:
              return H.right === S ? 1 : C(H.operatorToken.kind) ? H.operatorToken.kind === _.SyntaxKind.EqualsToken ? 2 : 3 : 1;
            case _.SyntaxKind.ShorthandPropertyAssignment:
              return H.objectAssignmentInitializer === S ? 1 : qn(H) ? 2 : 1;
            case _.SyntaxKind.PropertyAssignment:
              return H.name === S ? 0 : qn(H) ? 2 : 1;
            case _.SyntaxKind.ArrayLiteralExpression:
            case _.SyntaxKind.SpreadElement:
            case _.SyntaxKind.SpreadAssignment:
              return qn(H) ? 2 : 1;
            case _.SyntaxKind.ParenthesizedExpression:
            case _.SyntaxKind.NonNullExpression:
            case _.SyntaxKind.TypeAssertionExpression:
            case _.SyntaxKind.AsExpression:
              return ks(H);
            case _.SyntaxKind.ForOfStatement:
            case _.SyntaxKind.ForInStatement:
              return H.initializer === S ? 2 : 1;
            case _.SyntaxKind.ExpressionWithTypeArguments:
              return H.parent.token === _.SyntaxKind.ExtendsKeyword && H.parent.parent.kind !== _.SyntaxKind.InterfaceDeclaration ? 1 : 0;
            case _.SyntaxKind.ComputedPropertyName:
            case _.SyntaxKind.ExpressionStatement:
            case _.SyntaxKind.TypeOfExpression:
            case _.SyntaxKind.ElementAccessExpression:
            case _.SyntaxKind.ForStatement:
            case _.SyntaxKind.IfStatement:
            case _.SyntaxKind.DoStatement:
            case _.SyntaxKind.WhileStatement:
            case _.SyntaxKind.SwitchStatement:
            case _.SyntaxKind.WithStatement:
            case _.SyntaxKind.ThrowStatement:
            case _.SyntaxKind.CallExpression:
            case _.SyntaxKind.NewExpression:
            case _.SyntaxKind.TaggedTemplateExpression:
            case _.SyntaxKind.JsxExpression:
            case _.SyntaxKind.Decorator:
            case _.SyntaxKind.TemplateSpan:
            case _.SyntaxKind.JsxOpeningElement:
            case _.SyntaxKind.JsxSelfClosingElement:
            case _.SyntaxKind.JsxSpreadAttribute:
            case _.SyntaxKind.VoidExpression:
            case _.SyntaxKind.ReturnStatement:
            case _.SyntaxKind.AwaitExpression:
            case _.SyntaxKind.YieldExpression:
            case _.SyntaxKind.ConditionalExpression:
            case _.SyntaxKind.CaseClause:
            case _.SyntaxKind.JsxElement:
              return 1;
            case _.SyntaxKind.ArrowFunction:
              return H.body === S ? 1 : 2;
            case _.SyntaxKind.PropertyDeclaration:
            case _.SyntaxKind.VariableDeclaration:
            case _.SyntaxKind.Parameter:
            case _.SyntaxKind.EnumMember:
            case _.SyntaxKind.BindingElement:
            case _.SyntaxKind.JsxAttribute:
              return H.initializer === S ? 1 : 0;
            case _.SyntaxKind.PropertyAccessExpression:
              return H.expression === S ? 1 : 0;
            case _.SyntaxKind.ExportAssignment:
              return H.isExportEquals ? 1 : 0;
          }
          return 0;
        }
        a.getAccessKind = ks;
        function Is(S) {
          return (ks(S) & 2) !== 0;
        }
        a.isReassignmentTarget = Is;
        function y_(S) {
          switch (S.kind) {
            case _.SyntaxKind.Parameter:
            case _.SyntaxKind.CallSignature:
            case _.SyntaxKind.ConstructSignature:
            case _.SyntaxKind.MethodSignature:
            case _.SyntaxKind.PropertySignature:
            case _.SyntaxKind.ArrowFunction:
            case _.SyntaxKind.ParenthesizedExpression:
            case _.SyntaxKind.SpreadAssignment:
            case _.SyntaxKind.ShorthandPropertyAssignment:
            case _.SyntaxKind.PropertyAssignment:
            case _.SyntaxKind.FunctionExpression:
            case _.SyntaxKind.LabeledStatement:
            case _.SyntaxKind.ExpressionStatement:
            case _.SyntaxKind.VariableStatement:
            case _.SyntaxKind.FunctionDeclaration:
            case _.SyntaxKind.Constructor:
            case _.SyntaxKind.MethodDeclaration:
            case _.SyntaxKind.PropertyDeclaration:
            case _.SyntaxKind.GetAccessor:
            case _.SyntaxKind.SetAccessor:
            case _.SyntaxKind.ClassDeclaration:
            case _.SyntaxKind.ClassExpression:
            case _.SyntaxKind.InterfaceDeclaration:
            case _.SyntaxKind.TypeAliasDeclaration:
            case _.SyntaxKind.EnumMember:
            case _.SyntaxKind.EnumDeclaration:
            case _.SyntaxKind.ModuleDeclaration:
            case _.SyntaxKind.ImportEqualsDeclaration:
            case _.SyntaxKind.ImportDeclaration:
            case _.SyntaxKind.NamespaceExportDeclaration:
            case _.SyntaxKind.ExportAssignment:
            case _.SyntaxKind.IndexSignature:
            case _.SyntaxKind.FunctionType:
            case _.SyntaxKind.ConstructorType:
            case _.SyntaxKind.JSDocFunctionType:
            case _.SyntaxKind.ExportDeclaration:
            case _.SyntaxKind.NamedTupleMember:
            case _.SyntaxKind.EndOfFileToken:
              return true;
            default:
              return false;
          }
        }
        a.canHaveJsDoc = y_;
        function Ns(S, H) {
          let le = [];
          for (let Be of S.getChildren(H)) {
            if (!v.isJsDoc(Be))
              break;
            le.push(Be);
          }
          return le;
        }
        a.getJsDoc = Ns;
        function Kc(S, H) {
          let le = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : S.getSourceFile();
          if (y_(S) && S.kind !== _.SyntaxKind.EndOfFileToken) {
            let Be = Ns(S, le);
            if (Be.length !== 0 || !H)
              return Be;
          }
          return pa(S, S.getStart(le), le, H);
        }
        a.parseJsDocOfNode = Kc;
        function pa(S, H, le, Be) {
          let rt = _[Be && h_(le, S.pos, H) ? "forEachTrailingCommentRange" : "forEachLeadingCommentRange"](le.text, S.pos, (en, Ji, gi) => gi === _.SyntaxKind.MultiLineCommentTrivia && le.text[en + 2] === "*" ? { pos: en } : void 0);
          if (rt === void 0)
            return [];
          let ut = rt.pos, Ht = le.text.slice(ut, H), Fr = _.createSourceFile("jsdoc.ts", `${Ht}var a;`, le.languageVersion), Cr = Ns(Fr.statements[0], Fr);
          for (let en of Cr)
            ir(en, S);
          return Cr;
          function ir(en, Ji) {
            return en.pos += ut, en.end += ut, en.parent = Ji, _.forEachChild(en, (gi) => ir(gi, en), (gi) => {
              gi.pos += ut, gi.end += ut;
              for (let ln of gi)
                ir(ln, en);
            });
          }
        }
        (function(S) {
          S[S.ImportDeclaration = 1] = "ImportDeclaration", S[S.ImportEquals = 2] = "ImportEquals", S[S.ExportFrom = 4] = "ExportFrom", S[S.DynamicImport = 8] = "DynamicImport", S[S.Require = 16] = "Require", S[S.ImportType = 32] = "ImportType", S[S.All = 63] = "All", S[S.AllImports = 59] = "AllImports", S[S.AllStaticImports = 3] = "AllStaticImports", S[S.AllImportExpressions = 24] = "AllImportExpressions", S[S.AllRequireLike = 18] = "AllRequireLike", S[S.AllNestedImports = 56] = "AllNestedImports", S[S.AllTopLevelImports = 7] = "AllTopLevelImports";
        })(a.ImportKind || (a.ImportKind = {}));
        function fo(S, H) {
          let le = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true, Be = [];
          for (let ut of v_(S, H, le))
            switch (ut.kind) {
              case _.SyntaxKind.ImportDeclaration:
                rt(ut.moduleSpecifier);
                break;
              case _.SyntaxKind.ImportEqualsDeclaration:
                rt(ut.moduleReference.expression);
                break;
              case _.SyntaxKind.ExportDeclaration:
                rt(ut.moduleSpecifier);
                break;
              case _.SyntaxKind.CallExpression:
                rt(ut.arguments[0]);
                break;
              case _.SyntaxKind.ImportType:
                v.isLiteralTypeNode(ut.argument) && rt(ut.argument.literal);
                break;
              default:
                throw new Error("unexpected node");
            }
          return Be;
          function rt(ut) {
            v.isTextualLiteral(ut) && Be.push(ut);
          }
        }
        a.findImports = fo;
        function v_(S, H) {
          let le = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
          return new Cn(S, H, le).find();
        }
        a.findImportLikeNodes = v_;
        var Cn = class {
          constructor(S, H, le) {
            this._sourceFile = S, this._options = H, this._ignoreFileName = le, this._result = [];
          }
          find() {
            return this._sourceFile.isDeclarationFile && (this._options &= -25), this._options & 7 && this._findImports(this._sourceFile.statements), this._options & 56 && this._findNestedImports(), this._result;
          }
          _findImports(S) {
            for (let H of S)
              v.isImportDeclaration(H) ? this._options & 1 && this._result.push(H) : v.isImportEqualsDeclaration(H) ? this._options & 2 && H.moduleReference.kind === _.SyntaxKind.ExternalModuleReference && this._result.push(H) : v.isExportDeclaration(H) ? H.moduleSpecifier !== void 0 && this._options & 4 && this._result.push(H) : v.isModuleDeclaration(H) && this._findImportsInModule(H);
          }
          _findImportsInModule(S) {
            if (S.body !== void 0) {
              if (S.body.kind === _.SyntaxKind.ModuleDeclaration)
                return this._findImportsInModule(S.body);
              this._findImports(S.body.statements);
            }
          }
          _findNestedImports() {
            let S = this._ignoreFileName || (this._sourceFile.flags & _.NodeFlags.JavaScriptFile) !== 0, H, le;
            if ((this._options & 56) === 16) {
              if (!S)
                return;
              H = /\brequire\s*[</(]/g, le = false;
            } else
              this._options & 16 && S ? (H = /\b(?:import|require)\s*[</(]/g, le = (this._options & 32) !== 0) : (H = /\bimport\s*[</(]/g, le = S && (this._options & 32) !== 0);
            for (let Be = H.exec(this._sourceFile.text); Be !== null; Be = H.exec(this._sourceFile.text)) {
              let rt = pe(this._sourceFile, Be.index, this._sourceFile, Be[0][0] === "i" && le);
              if (rt.kind === _.SyntaxKind.ImportKeyword) {
                if (rt.end - 6 !== Be.index)
                  continue;
                switch (rt.parent.kind) {
                  case _.SyntaxKind.ImportType:
                    this._result.push(rt.parent);
                    break;
                  case _.SyntaxKind.CallExpression:
                    rt.parent.arguments.length > 1 && this._result.push(rt.parent);
                }
              } else
                rt.kind === _.SyntaxKind.Identifier && rt.end - 7 === Be.index && rt.parent.kind === _.SyntaxKind.CallExpression && rt.parent.expression === rt && rt.parent.arguments.length === 1 && this._result.push(rt.parent);
            }
          }
        };
        function Zn(S) {
          for (; S.flags & _.NodeFlags.NestedNamespace; )
            S = S.parent;
          return q(S.modifiers, _.SyntaxKind.DeclareKeyword) || Xa(S.parent);
        }
        a.isStatementInAmbientContext = Zn;
        function Xa(S) {
          for (; S.kind === _.SyntaxKind.ModuleBlock; ) {
            do
              S = S.parent;
            while (S.flags & _.NodeFlags.NestedNamespace);
            if (q(S.modifiers, _.SyntaxKind.DeclareKeyword))
              return true;
            S = S.parent;
          }
          return false;
        }
        a.isAmbientModuleBlock = Xa;
        function Yc(S) {
          let H = S.parent;
          for (; H.kind === _.SyntaxKind.ParenthesizedExpression; )
            H = H.parent;
          return v.isCallExpression(H) && S.end <= H.expression.end ? H : void 0;
        }
        a.getIIFE = Yc;
        function mo(S, H) {
          return (S.strict ? S[H] !== false : S[H] === true) && (H !== "strictPropertyInitialization" || mo(S, "strictNullChecks"));
        }
        a.isStrictCompilerOptionEnabled = mo;
        function ei(S, H) {
          switch (H) {
            case "stripInternal":
            case "declarationMap":
            case "emitDeclarationOnly":
              return S[H] === true && ei(S, "declaration");
            case "declaration":
              return S.declaration || ei(S, "composite");
            case "incremental":
              return S.incremental === void 0 ? ei(S, "composite") : S.incremental;
            case "skipDefaultLibCheck":
              return S.skipDefaultLibCheck || ei(S, "skipLibCheck");
            case "suppressImplicitAnyIndexErrors":
              return S.suppressImplicitAnyIndexErrors === true && ei(S, "noImplicitAny");
            case "allowSyntheticDefaultImports":
              return S.allowSyntheticDefaultImports !== void 0 ? S.allowSyntheticDefaultImports : ei(S, "esModuleInterop") || S.module === _.ModuleKind.System;
            case "noUncheckedIndexedAccess":
              return S.noUncheckedIndexedAccess === true && ei(S, "strictNullChecks");
            case "allowJs":
              return S.allowJs === void 0 ? ei(S, "checkJs") : S.allowJs;
            case "noImplicitAny":
            case "noImplicitThis":
            case "strictNullChecks":
            case "strictFunctionTypes":
            case "strictPropertyInitialization":
            case "alwaysStrict":
            case "strictBindCallApply":
              return mo(S, H);
          }
          return S[H] === true;
        }
        a.isCompilerOptionEnabled = ei;
        function Ya(S) {
          return S.name.kind === _.SyntaxKind.StringLiteral || (S.flags & _.NodeFlags.GlobalAugmentation) !== 0;
        }
        a.isAmbientModule = Ya;
        function b_(S) {
          return Qa(S);
        }
        a.getCheckJsDirective = b_;
        function Qa(S) {
          let H;
          return _.forEachLeadingCommentRange(S, (_.getShebang(S) || "").length, (le, Be, rt) => {
            if (rt === _.SyntaxKind.SingleLineCommentTrivia) {
              let ut = S.slice(le, Be), Ht = /^\/{2,3}\s*@ts-(no)?check(?:\s|$)/i.exec(ut);
              Ht !== null && (H = { pos: le, end: Be, enabled: Ht[1] === void 0 });
            }
          }), H;
        }
        a.getTsCheckDirective = Qa;
        function Jr(S) {
          return v.isTypeReferenceNode(S.type) && S.type.typeName.kind === _.SyntaxKind.Identifier && S.type.typeName.escapedText === "const";
        }
        a.isConstAssertion = Jr;
        function Qc(S) {
          let H = S;
          for (; ; ) {
            let le = H.parent;
            e:
              switch (le.kind) {
                case _.SyntaxKind.TypeAssertionExpression:
                case _.SyntaxKind.AsExpression:
                  return Jr(le);
                case _.SyntaxKind.PrefixUnaryExpression:
                  if (H.kind !== _.SyntaxKind.NumericLiteral)
                    return false;
                  switch (le.operator) {
                    case _.SyntaxKind.PlusToken:
                    case _.SyntaxKind.MinusToken:
                      H = le;
                      break e;
                    default:
                      return false;
                  }
                case _.SyntaxKind.PropertyAssignment:
                  if (le.initializer !== H)
                    return false;
                  H = le.parent;
                  break;
                case _.SyntaxKind.ShorthandPropertyAssignment:
                  H = le.parent;
                  break;
                case _.SyntaxKind.ParenthesizedExpression:
                case _.SyntaxKind.ArrayLiteralExpression:
                case _.SyntaxKind.ObjectLiteralExpression:
                case _.SyntaxKind.TemplateExpression:
                  H = le;
                  break;
                default:
                  return false;
              }
          }
        }
        a.isInConstContext = Qc;
        function ho(S, H) {
          if (!T_(S))
            return false;
          let le = H.getTypeAtLocation(S.arguments[2]);
          if (le.getProperty("value") === void 0)
            return le.getProperty("set") === void 0;
          let Be = le.getProperty("writable");
          if (Be === void 0)
            return false;
          let rt = Be.valueDeclaration !== void 0 && v.isPropertyAssignment(Be.valueDeclaration) ? H.getTypeAtLocation(Be.valueDeclaration.initializer) : H.getTypeOfSymbolAtLocation(Be, S.arguments[2]);
          return D.isBooleanLiteralType(rt, false);
        }
        a.isReadonlyAssignmentDeclaration = ho;
        function T_(S) {
          return S.arguments.length === 3 && v.isEntityNameExpression(S.arguments[0]) && v.isNumericOrStringLikeLiteral(S.arguments[1]) && v.isPropertyAccessExpression(S.expression) && S.expression.name.escapedText === "defineProperty" && v.isIdentifier(S.expression.expression) && S.expression.expression.escapedText === "Object";
        }
        a.isBindableObjectDefinePropertyCall = T_;
        function go(S) {
          return _.isPropertyAccessExpression(S) && _.isIdentifier(S.expression) && S.expression.escapedText === "Symbol";
        }
        a.isWellKnownSymbolLiterally = go;
        function yo(S) {
          return { displayName: `[Symbol.${S.name.text}]`, symbolName: "__@" + S.name.text };
        }
        a.getPropertyNameOfWellKnownSymbol = yo;
        var Za = ((S) => {
          let [H, le] = S;
          return H < "4" || H === "4" && le < "3";
        })(_.versionMajorMinor.split("."));
        function vo(S, H) {
          let le = { known: true, names: [] };
          if (S = Os(S), Za && go(S))
            le.names.push(yo(S));
          else {
            let Be = H.getTypeAtLocation(S);
            for (let rt of D.unionTypeParts(H.getBaseConstraintOfType(Be) || Be)) {
              let ut = D.getPropertyNameFromType(rt);
              ut ? le.names.push(ut) : le.known = false;
            }
          }
          return le;
        }
        a.getLateBoundPropertyNames = vo;
        function S_(S, H) {
          let le = Ze(S);
          return le !== void 0 ? { known: true, names: [{ displayName: le, symbolName: _.escapeLeadingUnderscores(le) }] } : S.kind === _.SyntaxKind.PrivateIdentifier ? { known: true, names: [{ displayName: S.text, symbolName: H.getSymbolAtLocation(S).escapedName }] } : vo(S.expression, H);
        }
        a.getLateBoundPropertyNamesOfPropertyName = S_;
        function Zc(S, H) {
          let le = Ze(S);
          if (le !== void 0)
            return { displayName: le, symbolName: _.escapeLeadingUnderscores(le) };
          if (S.kind === _.SyntaxKind.PrivateIdentifier)
            return { displayName: S.text, symbolName: H.getSymbolAtLocation(S).escapedName };
          let { expression: Be } = S;
          return Za && go(Be) ? yo(Be) : D.getPropertyNameFromType(H.getTypeAtLocation(Be));
        }
        a.getSingleLateBoundPropertyNameOfPropertyName = Zc;
        function Os(S) {
          for (; S.kind === _.SyntaxKind.ParenthesizedExpression; )
            S = S.expression;
          return S;
        }
        a.unwrapParentheses = Os;
        function bo(S) {
          return `${S.negative ? "-" : ""}${S.base10Value}n`;
        }
        a.formatPseudoBigInt = bo;
        function el(S, H) {
          let le = S.caseBlock.clauses.filter(v.isCaseClause);
          if (le.length === 0)
            return false;
          let Be = D.unionTypeParts(H.getTypeAtLocation(S.expression));
          if (Be.length > le.length)
            return false;
          let rt = new Set(Be.map(x_));
          if (rt.has(void 0))
            return false;
          let ut = /* @__PURE__ */ new Set();
          for (let Ht of le) {
            let Fr = H.getTypeAtLocation(Ht.expression);
            if (a.isTypeFlagSet(Fr, _.TypeFlags.Never))
              continue;
            let Cr = x_(Fr);
            if (rt.has(Cr))
              ut.add(Cr);
            else if (Cr !== "null" && Cr !== "undefined")
              return false;
          }
          return rt.size === ut.size;
        }
        a.hasExhaustiveCaseClauses = el;
        function x_(S) {
          if (a.isTypeFlagSet(S, _.TypeFlags.Null))
            return "null";
          if (a.isTypeFlagSet(S, _.TypeFlags.Undefined))
            return "undefined";
          if (a.isTypeFlagSet(S, _.TypeFlags.NumberLiteral))
            return `${a.isTypeFlagSet(S, _.TypeFlags.EnumLiteral) ? "enum:" : ""}${S.value}`;
          if (a.isTypeFlagSet(S, _.TypeFlags.StringLiteral))
            return `${a.isTypeFlagSet(S, _.TypeFlags.EnumLiteral) ? "enum:" : ""}string:${S.value}`;
          if (a.isTypeFlagSet(S, _.TypeFlags.BigIntLiteral))
            return bo(S.value);
          if (h2.isUniqueESSymbolType(S))
            return S.escapedName;
          if (D.isBooleanLiteralType(S, true))
            return "true";
          if (D.isBooleanLiteralType(S, false))
            return "false";
        }
        function E_(S) {
          var H;
          if (((H = S.heritageClauses) === null || H === void 0 ? void 0 : H[0].token) === _.SyntaxKind.ExtendsKeyword)
            return S.heritageClauses[0].types[0];
        }
        a.getBaseOfClassLikeExpression = E_;
      } }), RV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/convert-comments.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(d, E, I, c) {
          c === void 0 && (c = I);
          var M = Object.getOwnPropertyDescriptor(E, I);
          (!M || ("get" in M ? !E.__esModule : M.writable || M.configurable)) && (M = { enumerable: true, get: function() {
            return E[I];
          } }), Object.defineProperty(d, c, M);
        } : function(d, E, I, c) {
          c === void 0 && (c = I), d[c] = E[I];
        }), v = a && a.__setModuleDefault || (Object.create ? function(d, E) {
          Object.defineProperty(d, "default", { enumerable: true, value: E });
        } : function(d, E) {
          d.default = E;
        }), h2 = a && a.__importStar || function(d) {
          if (d && d.__esModule)
            return d;
          var E = {};
          if (d != null)
            for (var I in d)
              I !== "default" && Object.prototype.hasOwnProperty.call(d, I) && _(E, d, I);
          return v(E, d), E;
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.convertComments = void 0;
        var D = Q9(), P = h2(vr()), y = E1(), m = x1();
        function C(d, E) {
          let I = [];
          return (0, D.forEachComment)(d, (c, M) => {
            let q = M.kind === P.SyntaxKind.SingleLineCommentTrivia ? m.AST_TOKEN_TYPES.Line : m.AST_TOKEN_TYPES.Block, W = [M.pos, M.end], K = (0, y.getLocFor)(W[0], W[1], d), ce = W[0] + 2, Ie = M.kind === P.SyntaxKind.SingleLineCommentTrivia ? W[1] - ce : W[1] - ce - 2;
            I.push({ type: q, value: E.slice(ce, ce + Ie), range: W, loc: K });
          }, d), I;
        }
        a.convertComments = C;
      } }), Z9 = Oe({ "node_modules/eslint-visitor-keys/dist/eslint-visitor-keys.cjs"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true });
        var _ = { AssignmentExpression: ["left", "right"], AssignmentPattern: ["left", "right"], ArrayExpression: ["elements"], ArrayPattern: ["elements"], ArrowFunctionExpression: ["params", "body"], AwaitExpression: ["argument"], BlockStatement: ["body"], BinaryExpression: ["left", "right"], BreakStatement: ["label"], CallExpression: ["callee", "arguments"], CatchClause: ["param", "body"], ChainExpression: ["expression"], ClassBody: ["body"], ClassDeclaration: ["id", "superClass", "body"], ClassExpression: ["id", "superClass", "body"], ConditionalExpression: ["test", "consequent", "alternate"], ContinueStatement: ["label"], DebuggerStatement: [], DoWhileStatement: ["body", "test"], EmptyStatement: [], ExportAllDeclaration: ["exported", "source"], ExportDefaultDeclaration: ["declaration"], ExportNamedDeclaration: ["declaration", "specifiers", "source"], ExportSpecifier: ["exported", "local"], ExpressionStatement: ["expression"], ExperimentalRestProperty: ["argument"], ExperimentalSpreadProperty: ["argument"], ForStatement: ["init", "test", "update", "body"], ForInStatement: ["left", "right", "body"], ForOfStatement: ["left", "right", "body"], FunctionDeclaration: ["id", "params", "body"], FunctionExpression: ["id", "params", "body"], Identifier: [], IfStatement: ["test", "consequent", "alternate"], ImportDeclaration: ["specifiers", "source"], ImportDefaultSpecifier: ["local"], ImportExpression: ["source"], ImportNamespaceSpecifier: ["local"], ImportSpecifier: ["imported", "local"], JSXAttribute: ["name", "value"], JSXClosingElement: ["name"], JSXElement: ["openingElement", "children", "closingElement"], JSXEmptyExpression: [], JSXExpressionContainer: ["expression"], JSXIdentifier: [], JSXMemberExpression: ["object", "property"], JSXNamespacedName: ["namespace", "name"], JSXOpeningElement: ["name", "attributes"], JSXSpreadAttribute: ["argument"], JSXText: [], JSXFragment: ["openingFragment", "children", "closingFragment"], JSXClosingFragment: [], JSXOpeningFragment: [], Literal: [], LabeledStatement: ["label", "body"], LogicalExpression: ["left", "right"], MemberExpression: ["object", "property"], MetaProperty: ["meta", "property"], MethodDefinition: ["key", "value"], NewExpression: ["callee", "arguments"], ObjectExpression: ["properties"], ObjectPattern: ["properties"], PrivateIdentifier: [], Program: ["body"], Property: ["key", "value"], PropertyDefinition: ["key", "value"], RestElement: ["argument"], ReturnStatement: ["argument"], SequenceExpression: ["expressions"], SpreadElement: ["argument"], StaticBlock: ["body"], Super: [], SwitchStatement: ["discriminant", "cases"], SwitchCase: ["test", "consequent"], TaggedTemplateExpression: ["tag", "quasi"], TemplateElement: [], TemplateLiteral: ["quasis", "expressions"], ThisExpression: [], ThrowStatement: ["argument"], TryStatement: ["block", "handler", "finalizer"], UnaryExpression: ["argument"], UpdateExpression: ["argument"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id", "init"], WhileStatement: ["test", "body"], WithStatement: ["object", "body"], YieldExpression: ["argument"] }, v = Object.keys(_);
        for (let m of v)
          Object.freeze(_[m]);
        Object.freeze(_);
        var h2 = /* @__PURE__ */ new Set(["parent", "leadingComments", "trailingComments"]);
        function D(m) {
          return !h2.has(m) && m[0] !== "_";
        }
        function P(m) {
          return Object.keys(m).filter(D);
        }
        function y(m) {
          let C = Object.assign({}, _);
          for (let d of Object.keys(m))
            if (Object.prototype.hasOwnProperty.call(C, d)) {
              let E = new Set(m[d]);
              for (let I of C[d])
                E.add(I);
              C[d] = Object.freeze(Array.from(E));
            } else
              C[d] = Object.freeze(Array.from(m[d]));
          return Object.freeze(C);
        }
        a.KEYS = _, a.getKeys = P, a.unionWith = y;
      } }), jV = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/@typescript-eslint/visitor-keys/dist/get-keys.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.getKeys = void 0;
        var _ = Z9(), v = _.getKeys;
        a.getKeys = v;
      } }), JV = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/@typescript-eslint/visitor-keys/dist/visitor-keys.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(C, d, E, I) {
          I === void 0 && (I = E);
          var c = Object.getOwnPropertyDescriptor(d, E);
          (!c || ("get" in c ? !d.__esModule : c.writable || c.configurable)) && (c = { enumerable: true, get: function() {
            return d[E];
          } }), Object.defineProperty(C, I, c);
        } : function(C, d, E, I) {
          I === void 0 && (I = E), C[I] = d[E];
        }), v = a && a.__setModuleDefault || (Object.create ? function(C, d) {
          Object.defineProperty(C, "default", { enumerable: true, value: d });
        } : function(C, d) {
          C.default = d;
        }), h2 = a && a.__importStar || function(C) {
          if (C && C.__esModule)
            return C;
          var d = {};
          if (C != null)
            for (var E in C)
              E !== "default" && Object.prototype.hasOwnProperty.call(C, E) && _(d, C, E);
          return v(d, C), d;
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.visitorKeys = void 0;
        var D = h2(Z9()), P = (() => {
          let C = ["typeParameters", "params", "returnType"], d = [...C, "body"], E = ["decorators", "key", "typeAnnotation"];
          return { AnonymousFunction: d, Function: ["id", ...d], FunctionType: C, ClassDeclaration: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "implements", "body"], AbstractPropertyDefinition: ["decorators", "key", "typeAnnotation"], PropertyDefinition: [...E, "value"], TypeAssertion: ["expression", "typeAnnotation"] };
        })(), y = { AccessorProperty: P.PropertyDefinition, ArrayPattern: ["decorators", "elements", "typeAnnotation"], ArrowFunctionExpression: P.AnonymousFunction, AssignmentPattern: ["decorators", "left", "right", "typeAnnotation"], CallExpression: ["callee", "typeParameters", "arguments"], ClassDeclaration: P.ClassDeclaration, ClassExpression: P.ClassDeclaration, Decorator: ["expression"], ExportAllDeclaration: ["exported", "source", "assertions"], ExportNamedDeclaration: ["declaration", "specifiers", "source", "assertions"], FunctionDeclaration: P.Function, FunctionExpression: P.Function, Identifier: ["decorators", "typeAnnotation"], ImportAttribute: ["key", "value"], ImportDeclaration: ["specifiers", "source", "assertions"], ImportExpression: ["source", "attributes"], JSXClosingFragment: [], JSXOpeningElement: ["name", "typeParameters", "attributes"], JSXOpeningFragment: [], JSXSpreadChild: ["expression"], MethodDefinition: ["decorators", "key", "value", "typeParameters"], NewExpression: ["callee", "typeParameters", "arguments"], ObjectPattern: ["decorators", "properties", "typeAnnotation"], PropertyDefinition: P.PropertyDefinition, RestElement: ["decorators", "argument", "typeAnnotation"], StaticBlock: ["body"], TaggedTemplateExpression: ["tag", "typeParameters", "quasi"], TSAbstractAccessorProperty: P.AbstractPropertyDefinition, TSAbstractKeyword: [], TSAbstractMethodDefinition: ["key", "value"], TSAbstractPropertyDefinition: P.AbstractPropertyDefinition, TSAnyKeyword: [], TSArrayType: ["elementType"], TSAsExpression: P.TypeAssertion, TSAsyncKeyword: [], TSBigIntKeyword: [], TSBooleanKeyword: [], TSCallSignatureDeclaration: P.FunctionType, TSClassImplements: ["expression", "typeParameters"], TSConditionalType: ["checkType", "extendsType", "trueType", "falseType"], TSConstructorType: P.FunctionType, TSConstructSignatureDeclaration: P.FunctionType, TSDeclareFunction: P.Function, TSDeclareKeyword: [], TSEmptyBodyFunctionExpression: ["id", ...P.FunctionType], TSEnumDeclaration: ["id", "members"], TSEnumMember: ["id", "initializer"], TSExportAssignment: ["expression"], TSExportKeyword: [], TSExternalModuleReference: ["expression"], TSFunctionType: P.FunctionType, TSImportEqualsDeclaration: ["id", "moduleReference"], TSImportType: ["parameter", "qualifier", "typeParameters"], TSIndexedAccessType: ["indexType", "objectType"], TSIndexSignature: ["parameters", "typeAnnotation"], TSInferType: ["typeParameter"], TSInstantiationExpression: ["expression", "typeParameters"], TSInterfaceBody: ["body"], TSInterfaceDeclaration: ["id", "typeParameters", "extends", "body"], TSInterfaceHeritage: ["expression", "typeParameters"], TSIntersectionType: ["types"], TSIntrinsicKeyword: [], TSLiteralType: ["literal"], TSMappedType: ["nameType", "typeParameter", "typeAnnotation"], TSMethodSignature: ["typeParameters", "key", "params", "returnType"], TSModuleBlock: ["body"], TSModuleDeclaration: ["id", "body"], TSNamedTupleMember: ["label", "elementType"], TSNamespaceExportDeclaration: ["id"], TSNeverKeyword: [], TSNonNullExpression: ["expression"], TSNullKeyword: [], TSNumberKeyword: [], TSObjectKeyword: [], TSOptionalType: ["typeAnnotation"], TSParameterProperty: ["decorators", "parameter"], TSPrivateKeyword: [], TSPropertySignature: ["typeAnnotation", "key", "initializer"], TSProtectedKeyword: [], TSPublicKeyword: [], TSQualifiedName: ["left", "right"], TSReadonlyKeyword: [], TSRestType: ["typeAnnotation"], TSSatisfiesExpression: ["typeAnnotation", "expression"], TSStaticKeyword: [], TSStringKeyword: [], TSSymbolKeyword: [], TSTemplateLiteralType: ["quasis", "types"], TSThisType: [], TSTupleType: ["elementTypes"], TSTypeAliasDeclaration: ["id", "typeParameters", "typeAnnotation"], TSTypeAnnotation: ["typeAnnotation"], TSTypeAssertion: P.TypeAssertion, TSTypeLiteral: ["members"], TSTypeOperator: ["typeAnnotation"], TSTypeParameter: ["name", "constraint", "default"], TSTypeParameterDeclaration: ["params"], TSTypeParameterInstantiation: ["params"], TSTypePredicate: ["typeAnnotation", "parameterName"], TSTypeQuery: ["exprName", "typeParameters"], TSTypeReference: ["typeName", "typeParameters"], TSUndefinedKeyword: [], TSUnionType: ["types"], TSUnknownKeyword: [], TSVoidKeyword: [] }, m = D.unionWith(y);
        a.visitorKeys = m;
      } }), e5 = Oe({ "node_modules/@typescript-eslint/typescript-estree/node_modules/@typescript-eslint/visitor-keys/dist/index.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.visitorKeys = a.getKeys = void 0;
        var _ = jV();
        Object.defineProperty(a, "getKeys", { enumerable: true, get: function() {
          return _.getKeys;
        } });
        var v = JV();
        Object.defineProperty(a, "visitorKeys", { enumerable: true, get: function() {
          return v.visitorKeys;
        } });
      } }), t5 = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/simple-traverse.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.simpleTraverse = void 0;
        var _ = e5();
        function v(y) {
          return y != null && typeof y == "object" && typeof y.type == "string";
        }
        function h2(y, m) {
          let C = y[m.type];
          return C != null ? C : [];
        }
        var D = class {
          constructor(y) {
            let m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            this.allVisitorKeys = _.visitorKeys, this.selectors = y, this.setParentPointers = m;
          }
          traverse(y, m) {
            if (!v(y))
              return;
            this.setParentPointers && (y.parent = m), "enter" in this.selectors ? this.selectors.enter(y, m) : y.type in this.selectors && this.selectors[y.type](y, m);
            let C = h2(this.allVisitorKeys, y);
            if (!(C.length < 1))
              for (let d of C) {
                let E = y[d];
                if (Array.isArray(E))
                  for (let I of E)
                    this.traverse(I, y);
                else
                  this.traverse(E, y);
              }
          }
        };
        function P(y, m) {
          let C = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          new D(m, C).traverse(y, void 0);
        }
        a.simpleTraverse = P;
      } }), FV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/ast-converter.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.astConverter = void 0;
        var _ = G9(), v = RV(), h2 = E1(), D = t5();
        function P(y, m, C) {
          let { parseDiagnostics: d } = y;
          if (d.length)
            throw (0, _.convertError)(d[0]);
          let E = new _.Converter(y, { errorOnUnknownASTType: m.errorOnUnknownASTType || false, shouldPreserveNodeMaps: C }), I = E.convertProgram();
          (!m.range || !m.loc) && (0, D.simpleTraverse)(I, { enter: (M) => {
            m.range || delete M.range, m.loc || delete M.loc;
          } }), m.tokens && (I.tokens = (0, h2.convertTokens)(y)), m.comment && (I.comments = (0, v.convertComments)(y, m.code));
          let c = E.getASTMaps();
          return { estree: I, astMaps: c };
        }
        a.astConverter = P;
      } }), r5 = {};
      m1(r5, { basename: () => o5, default: () => c5, delimiter: () => nT, dirname: () => s5, extname: () => _5, isAbsolute: () => mT, join: () => i5, normalize: () => dT, relative: () => a5, resolve: () => d1, sep: () => rT });
      function n5(a, _) {
        for (var v = 0, h2 = a.length - 1; h2 >= 0; h2--) {
          var D = a[h2];
          D === "." ? a.splice(h2, 1) : D === ".." ? (a.splice(h2, 1), v++) : v && (a.splice(h2, 1), v--);
        }
        if (_)
          for (; v--; v)
            a.unshift("..");
        return a;
      }
      function d1() {
        for (var a = "", _ = false, v = arguments.length - 1; v >= -1 && !_; v--) {
          var h2 = v >= 0 ? arguments[v] : "/";
          if (typeof h2 != "string")
            throw new TypeError("Arguments to path.resolve must be strings");
          if (!h2)
            continue;
          a = h2 + "/" + a, _ = h2.charAt(0) === "/";
        }
        return a = n5(hT(a.split("/"), function(D) {
          return !!D;
        }), !_).join("/"), (_ ? "/" : "") + a || ".";
      }
      function dT(a) {
        var _ = mT(a), v = l5(a, -1) === "/";
        return a = n5(hT(a.split("/"), function(h2) {
          return !!h2;
        }), !_).join("/"), !a && !_ && (a = "."), a && v && (a += "/"), (_ ? "/" : "") + a;
      }
      function mT(a) {
        return a.charAt(0) === "/";
      }
      function i5() {
        var a = Array.prototype.slice.call(arguments, 0);
        return dT(hT(a, function(_, v) {
          if (typeof _ != "string")
            throw new TypeError("Arguments to path.join must be strings");
          return _;
        }).join("/"));
      }
      function a5(a, _) {
        a = d1(a).substr(1), _ = d1(_).substr(1);
        function v(d) {
          for (var E = 0; E < d.length && d[E] === ""; E++)
            ;
          for (var I = d.length - 1; I >= 0 && d[I] === ""; I--)
            ;
          return E > I ? [] : d.slice(E, I - E + 1);
        }
        for (var h2 = v(a.split("/")), D = v(_.split("/")), P = Math.min(h2.length, D.length), y = P, m = 0; m < P; m++)
          if (h2[m] !== D[m]) {
            y = m;
            break;
          }
        for (var C = [], m = y; m < h2.length; m++)
          C.push("..");
        return C = C.concat(D.slice(y)), C.join("/");
      }
      function s5(a) {
        var _ = w1(a), v = _[0], h2 = _[1];
        return !v && !h2 ? "." : (h2 && (h2 = h2.substr(0, h2.length - 1)), v + h2);
      }
      function o5(a, _) {
        var v = w1(a)[2];
        return _ && v.substr(-1 * _.length) === _ && (v = v.substr(0, v.length - _.length)), v;
      }
      function _5(a) {
        return w1(a)[3];
      }
      function hT(a, _) {
        if (a.filter)
          return a.filter(_);
        for (var v = [], h2 = 0; h2 < a.length; h2++)
          _(a[h2], h2, a) && v.push(a[h2]);
        return v;
      }
      var x9, w1, rT, nT, c5, l5, BV = yp({ "node-modules-polyfills:path"() {
        De(), x9 = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/, w1 = function(a) {
          return x9.exec(a).slice(1);
        }, rT = "/", nT = ":", c5 = { extname: _5, basename: o5, dirname: s5, sep: rT, delimiter: nT, relative: a5, join: i5, isAbsolute: mT, normalize: dT, resolve: d1 }, l5 = "ab".substr(-1) === "b" ? function(a, _, v) {
          return a.substr(_, v);
        } : function(a, _, v) {
          return _ < 0 && (_ = a.length + _), a.substr(_, v);
        };
      } }), _o = Oe({ "node-modules-polyfills-commonjs:path"(a, _) {
        De();
        var v = (BV(), Li(r5));
        if (v && v.default) {
          _.exports = v.default;
          for (let h2 in v)
            _.exports[h2] = v[h2];
        } else
          v && (_.exports = v);
      } }), d_ = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/create-program/shared.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(Ae, te, he, Pe) {
          Pe === void 0 && (Pe = he);
          var R = Object.getOwnPropertyDescriptor(te, he);
          (!R || ("get" in R ? !te.__esModule : R.writable || R.configurable)) && (R = { enumerable: true, get: function() {
            return te[he];
          } }), Object.defineProperty(Ae, Pe, R);
        } : function(Ae, te, he, Pe) {
          Pe === void 0 && (Pe = he), Ae[Pe] = te[he];
        }), v = a && a.__setModuleDefault || (Object.create ? function(Ae, te) {
          Object.defineProperty(Ae, "default", { enumerable: true, value: te });
        } : function(Ae, te) {
          Ae.default = te;
        }), h2 = a && a.__importStar || function(Ae) {
          if (Ae && Ae.__esModule)
            return Ae;
          var te = {};
          if (Ae != null)
            for (var he in Ae)
              he !== "default" && Object.prototype.hasOwnProperty.call(Ae, he) && _(te, Ae, he);
          return v(te, Ae), te;
        }, D = a && a.__importDefault || function(Ae) {
          return Ae && Ae.__esModule ? Ae : { default: Ae };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.getModuleResolver = a.getAstFromProgram = a.getCanonicalFileName = a.ensureAbsolutePath = a.createHash = a.createDefaultCompilerOptionsFromExtra = a.canonicalDirname = a.CORE_COMPILER_OPTIONS = void 0;
        var P = D(_o()), y = h2(vr()), m = { noEmit: true, noUnusedLocals: true, noUnusedParameters: true };
        a.CORE_COMPILER_OPTIONS = m;
        var C = Object.assign(Object.assign({}, m), { allowNonTsExtensions: true, allowJs: true, checkJs: true });
        function d(Ae) {
          return Ae.debugLevel.has("typescript") ? Object.assign(Object.assign({}, C), { extendedDiagnostics: true }) : C;
        }
        a.createDefaultCompilerOptionsFromExtra = d;
        var E = y.sys !== void 0 ? y.sys.useCaseSensitiveFileNames : true, I = E ? (Ae) => Ae : (Ae) => Ae.toLowerCase();
        function c(Ae) {
          let te = P.default.normalize(Ae);
          return te.endsWith(P.default.sep) && (te = te.slice(0, -1)), I(te);
        }
        a.getCanonicalFileName = c;
        function M(Ae, te) {
          return P.default.isAbsolute(Ae) ? Ae : P.default.join(te || "/prettier-security-dirname-placeholder", Ae);
        }
        a.ensureAbsolutePath = M;
        function q(Ae) {
          return P.default.dirname(Ae);
        }
        a.canonicalDirname = q;
        var W = [y.Extension.Dts, y.Extension.Dcts, y.Extension.Dmts];
        function K(Ae) {
          var te;
          return Ae ? (te = W.find((he) => Ae.endsWith(he))) !== null && te !== void 0 ? te : P.default.extname(Ae) : null;
        }
        function ce(Ae, te) {
          let he = Ae.getSourceFile(te.filePath), Pe = K(te.filePath), R = K(he == null ? void 0 : he.fileName);
          if (Pe === R)
            return he && { ast: he, program: Ae };
        }
        a.getAstFromProgram = ce;
        function Ie(Ae) {
          let te;
          try {
            throw new Error("Dynamic require is not supported");
          } catch {
            let Pe = ["Could not find the provided parserOptions.moduleResolver.", "Hint: use an absolute path if you are not in control over where the ESLint instance runs."];
            throw new Error(Pe.join(`
`));
          }
          return te;
        }
        a.getModuleResolver = Ie;
        function me(Ae) {
          var te;
          return !((te = y.sys) === null || te === void 0) && te.createHash ? y.sys.createHash(Ae) : Ae;
        }
        a.createHash = me;
      } }), qV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/create-program/createDefaultProgram.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(I, c, M, q) {
          q === void 0 && (q = M);
          var W = Object.getOwnPropertyDescriptor(c, M);
          (!W || ("get" in W ? !c.__esModule : W.writable || W.configurable)) && (W = { enumerable: true, get: function() {
            return c[M];
          } }), Object.defineProperty(I, q, W);
        } : function(I, c, M, q) {
          q === void 0 && (q = M), I[q] = c[M];
        }), v = a && a.__setModuleDefault || (Object.create ? function(I, c) {
          Object.defineProperty(I, "default", { enumerable: true, value: c });
        } : function(I, c) {
          I.default = c;
        }), h2 = a && a.__importStar || function(I) {
          if (I && I.__esModule)
            return I;
          var c = {};
          if (I != null)
            for (var M in I)
              M !== "default" && Object.prototype.hasOwnProperty.call(I, M) && _(c, I, M);
          return v(c, I), c;
        }, D = a && a.__importDefault || function(I) {
          return I && I.__esModule ? I : { default: I };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.createDefaultProgram = void 0;
        var P = D(Ga()), y = D(_o()), m = h2(vr()), C = d_(), d = (0, P.default)("typescript-eslint:typescript-estree:createDefaultProgram");
        function E(I) {
          var c;
          if (d("Getting default program for: %s", I.filePath || "unnamed file"), ((c = I.projects) === null || c === void 0 ? void 0 : c.length) !== 1)
            return;
          let M = I.projects[0], q = m.getParsedCommandLineOfConfigFile(M, (0, C.createDefaultCompilerOptionsFromExtra)(I), Object.assign(Object.assign({}, m.sys), { onUnRecoverableConfigFileDiagnostic: () => {
          } }));
          if (!q)
            return;
          let W = m.createCompilerHost(q.options, true);
          I.moduleResolver && (W.resolveModuleNames = (0, C.getModuleResolver)(I.moduleResolver).resolveModuleNames);
          let K = W.readFile;
          W.readFile = (me) => y.default.normalize(me) === y.default.normalize(I.filePath) ? I.code : K(me);
          let ce = m.createProgram([I.filePath], q.options, W), Ie = ce.getSourceFile(I.filePath);
          return Ie && { ast: Ie, program: ce };
        }
        a.createDefaultProgram = E;
      } }), gT = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/create-program/getScriptKind.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(d, E, I, c) {
          c === void 0 && (c = I);
          var M = Object.getOwnPropertyDescriptor(E, I);
          (!M || ("get" in M ? !E.__esModule : M.writable || M.configurable)) && (M = { enumerable: true, get: function() {
            return E[I];
          } }), Object.defineProperty(d, c, M);
        } : function(d, E, I, c) {
          c === void 0 && (c = I), d[c] = E[I];
        }), v = a && a.__setModuleDefault || (Object.create ? function(d, E) {
          Object.defineProperty(d, "default", { enumerable: true, value: E });
        } : function(d, E) {
          d.default = E;
        }), h2 = a && a.__importStar || function(d) {
          if (d && d.__esModule)
            return d;
          var E = {};
          if (d != null)
            for (var I in d)
              I !== "default" && Object.prototype.hasOwnProperty.call(d, I) && _(E, d, I);
          return v(E, d), E;
        }, D = a && a.__importDefault || function(d) {
          return d && d.__esModule ? d : { default: d };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.getLanguageVariant = a.getScriptKind = void 0;
        var P = D(_o()), y = h2(vr());
        function m(d, E) {
          switch (P.default.extname(d).toLowerCase()) {
            case y.Extension.Js:
            case y.Extension.Cjs:
            case y.Extension.Mjs:
              return y.ScriptKind.JS;
            case y.Extension.Jsx:
              return y.ScriptKind.JSX;
            case y.Extension.Ts:
            case y.Extension.Cts:
            case y.Extension.Mts:
              return y.ScriptKind.TS;
            case y.Extension.Tsx:
              return y.ScriptKind.TSX;
            case y.Extension.Json:
              return y.ScriptKind.JSON;
            default:
              return E ? y.ScriptKind.TSX : y.ScriptKind.TS;
          }
        }
        a.getScriptKind = m;
        function C(d) {
          switch (d) {
            case y.ScriptKind.TSX:
            case y.ScriptKind.JSX:
            case y.ScriptKind.JS:
            case y.ScriptKind.JSON:
              return y.LanguageVariant.JSX;
            default:
              return y.LanguageVariant.Standard;
          }
        }
        a.getLanguageVariant = C;
      } }), UV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/create-program/createIsolatedProgram.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(I, c, M, q) {
          q === void 0 && (q = M);
          var W = Object.getOwnPropertyDescriptor(c, M);
          (!W || ("get" in W ? !c.__esModule : W.writable || W.configurable)) && (W = { enumerable: true, get: function() {
            return c[M];
          } }), Object.defineProperty(I, q, W);
        } : function(I, c, M, q) {
          q === void 0 && (q = M), I[q] = c[M];
        }), v = a && a.__setModuleDefault || (Object.create ? function(I, c) {
          Object.defineProperty(I, "default", { enumerable: true, value: c });
        } : function(I, c) {
          I.default = c;
        }), h2 = a && a.__importStar || function(I) {
          if (I && I.__esModule)
            return I;
          var c = {};
          if (I != null)
            for (var M in I)
              M !== "default" && Object.prototype.hasOwnProperty.call(I, M) && _(c, I, M);
          return v(c, I), c;
        }, D = a && a.__importDefault || function(I) {
          return I && I.__esModule ? I : { default: I };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.createIsolatedProgram = void 0;
        var P = D(Ga()), y = h2(vr()), m = gT(), C = d_(), d = (0, P.default)("typescript-eslint:typescript-estree:createIsolatedProgram");
        function E(I) {
          d("Getting isolated program in %s mode for: %s", I.jsx ? "TSX" : "TS", I.filePath);
          let c = { fileExists() {
            return true;
          }, getCanonicalFileName() {
            return I.filePath;
          }, getCurrentDirectory() {
            return "";
          }, getDirectories() {
            return [];
          }, getDefaultLibFileName() {
            return "lib.d.ts";
          }, getNewLine() {
            return `
`;
          }, getSourceFile(W) {
            return y.createSourceFile(W, I.code, y.ScriptTarget.Latest, true, (0, m.getScriptKind)(I.filePath, I.jsx));
          }, readFile() {
          }, useCaseSensitiveFileNames() {
            return true;
          }, writeFile() {
            return null;
          } }, M = y.createProgram([I.filePath], Object.assign({ noResolve: true, target: y.ScriptTarget.Latest, jsx: I.jsx ? y.JsxEmit.Preserve : void 0 }, (0, C.createDefaultCompilerOptionsFromExtra)(I)), c), q = M.getSourceFile(I.filePath);
          if (!q)
            throw new Error("Expected an ast to be returned for the single-file isolated program.");
          return { ast: q, program: M };
        }
        a.createIsolatedProgram = E;
      } }), zV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/create-program/describeFilePath.js"(a) {
        De();
        var _ = a && a.__importDefault || function(D) {
          return D && D.__esModule ? D : { default: D };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.describeFilePath = void 0;
        var v = _(_o());
        function h2(D, P) {
          let y = v.default.relative(P, D);
          return y && !y.startsWith("..") && !v.default.isAbsolute(y) ? `<tsconfigRootDir>/${y}` : /^[(\w+:)\\/~]/.test(D) || /\.\.[/\\]\.\./.test(y) ? D : `<tsconfigRootDir>/${y}`;
        }
        a.describeFilePath = h2;
      } }), u5 = {};
      m1(u5, { default: () => p5 });
      var p5, WV = yp({ "node-modules-polyfills:fs"() {
        De(), p5 = {};
      } }), yT = Oe({ "node-modules-polyfills-commonjs:fs"(a, _) {
        De();
        var v = (WV(), Li(u5));
        if (v && v.default) {
          _.exports = v.default;
          for (let h2 in v)
            _.exports[h2] = v[h2];
        } else
          v && (_.exports = v);
      } }), f5 = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/create-program/getWatchProgramsForProjects.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(Je, Xe, ee, je) {
          je === void 0 && (je = ee);
          var nt = Object.getOwnPropertyDescriptor(Xe, ee);
          (!nt || ("get" in nt ? !Xe.__esModule : nt.writable || nt.configurable)) && (nt = { enumerable: true, get: function() {
            return Xe[ee];
          } }), Object.defineProperty(Je, je, nt);
        } : function(Je, Xe, ee, je) {
          je === void 0 && (je = ee), Je[je] = Xe[ee];
        }), v = a && a.__setModuleDefault || (Object.create ? function(Je, Xe) {
          Object.defineProperty(Je, "default", { enumerable: true, value: Xe });
        } : function(Je, Xe) {
          Je.default = Xe;
        }), h2 = a && a.__importStar || function(Je) {
          if (Je && Je.__esModule)
            return Je;
          var Xe = {};
          if (Je != null)
            for (var ee in Je)
              ee !== "default" && Object.prototype.hasOwnProperty.call(Je, ee) && _(Xe, Je, ee);
          return v(Xe, Je), Xe;
        }, D = a && a.__importDefault || function(Je) {
          return Je && Je.__esModule ? Je : { default: Je };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.getWatchProgramsForProjects = a.clearWatchCaches = void 0;
        var P = D(Ga()), y = D(yT()), m = D(pT()), C = h2(vr()), d = d_(), E = (0, P.default)("typescript-eslint:typescript-estree:createWatchProgram"), I = /* @__PURE__ */ new Map(), c = /* @__PURE__ */ new Map(), M = /* @__PURE__ */ new Map(), q = /* @__PURE__ */ new Map(), W = /* @__PURE__ */ new Map(), K = /* @__PURE__ */ new Map();
        function ce() {
          I.clear(), c.clear(), M.clear(), K.clear(), q.clear(), W.clear();
        }
        a.clearWatchCaches = ce;
        function Ie(Je) {
          return (Xe, ee) => {
            let je = (0, d.getCanonicalFileName)(Xe), nt = (() => {
              let Ze = Je.get(je);
              return Ze || (Ze = /* @__PURE__ */ new Set(), Je.set(je, Ze)), Ze;
            })();
            return nt.add(ee), { close: () => {
              nt.delete(ee);
            } };
          };
        }
        var me = { code: "", filePath: "" };
        function Ae(Je) {
          throw new Error(C.flattenDiagnosticMessageText(Je.messageText, C.sys.newLine));
        }
        function te(Je, Xe, ee) {
          let je = ee.EXPERIMENTAL_useSourceOfProjectReferenceRedirect ? new Set(Xe.getSourceFiles().map((nt) => (0, d.getCanonicalFileName)(nt.fileName))) : new Set(Xe.getRootFileNames().map((nt) => (0, d.getCanonicalFileName)(nt)));
          return q.set(Je, je), je;
        }
        function he(Je) {
          let Xe = (0, d.getCanonicalFileName)(Je.filePath), ee = [];
          me.code = Je.code, me.filePath = Xe;
          let je = c.get(Xe), nt = (0, d.createHash)(Je.code);
          K.get(Xe) !== nt && je && je.size > 0 && je.forEach((st) => st(Xe, C.FileWatcherEventKind.Changed));
          let Ze = new Set(Je.projects);
          for (let [st, tt] of I.entries()) {
            if (!Ze.has(st))
              continue;
            let ct = q.get(st), ne = null;
            if (ct || (ne = tt.getProgram().getProgram(), ct = te(st, ne, Je)), ct.has(Xe))
              return E("Found existing program for file. %s", Xe), ne = ne != null ? ne : tt.getProgram().getProgram(), ne.getTypeChecker(), [ne];
          }
          E("File did not belong to any existing programs, moving to create/update. %s", Xe);
          for (let st of Je.projects) {
            let tt = I.get(st);
            if (tt) {
              let Fe = ke(tt, Xe, st);
              if (!Fe)
                continue;
              if (Fe.getTypeChecker(), te(st, Fe, Je).has(Xe))
                return E("Found updated program for file. %s", Xe), [Fe];
              ee.push(Fe);
              continue;
            }
            let ct = R(st, Je);
            I.set(st, ct);
            let ne = ct.getProgram().getProgram();
            if (ne.getTypeChecker(), te(st, ne, Je).has(Xe))
              return E("Found program for file. %s", Xe), [ne];
            ee.push(ne);
          }
          return ee;
        }
        a.getWatchProgramsForProjects = he;
        var Pe = m.default.satisfies(C.version, ">=3.9.0-beta", { includePrerelease: true });
        function R(Je, Xe) {
          E("Creating watch program for %s.", Je);
          let ee = C.createWatchCompilerHost(Je, (0, d.createDefaultCompilerOptionsFromExtra)(Xe), C.sys, C.createAbstractBuilder, Ae, () => {
          });
          Xe.moduleResolver && (ee.resolveModuleNames = (0, d.getModuleResolver)(Xe.moduleResolver).resolveModuleNames);
          let je = ee.readFile;
          ee.readFile = (tt, ct) => {
            let ne = (0, d.getCanonicalFileName)(tt), ge = ne === me.filePath ? me.code : je(ne, ct);
            return ge !== void 0 && K.set(ne, (0, d.createHash)(ge)), ge;
          }, ee.onUnRecoverableConfigFileDiagnostic = Ae, ee.afterProgramCreate = (tt) => {
            let ct = tt.getConfigFileParsingDiagnostics().filter((ne) => ne.category === C.DiagnosticCategory.Error && ne.code !== 18003);
            ct.length > 0 && Ae(ct[0]);
          }, ee.watchFile = Ie(c), ee.watchDirectory = Ie(M);
          let nt = ee.onCachedDirectoryStructureHostCreate;
          ee.onCachedDirectoryStructureHostCreate = (tt) => {
            let ct = tt.readDirectory;
            tt.readDirectory = (ne, ge, Fe, at, Pt) => ct(ne, ge ? ge.concat(Xe.extraFileExtensions) : void 0, Fe, at, Pt), nt(tt);
          }, ee.extraFileExtensions = Xe.extraFileExtensions.map((tt) => ({ extension: tt, isMixedContent: true, scriptKind: C.ScriptKind.Deferred })), ee.trace = E, ee.useSourceOfProjectReferenceRedirect = () => Xe.EXPERIMENTAL_useSourceOfProjectReferenceRedirect;
          let Ze;
          Pe ? (ee.setTimeout = void 0, ee.clearTimeout = void 0) : (E("Running without timeout fix"), ee.setTimeout = function(tt, ct) {
            for (var ne = arguments.length, ge = new Array(ne > 2 ? ne - 2 : 0), Fe = 2; Fe < ne; Fe++)
              ge[Fe - 2] = arguments[Fe];
            return Ze = tt.bind(void 0, ...ge), Ze;
          }, ee.clearTimeout = () => {
            Ze = void 0;
          });
          let st = C.createWatchProgram(ee);
          if (!Pe) {
            let tt = st.getProgram;
            st.getProgram = () => (Ze && Ze(), Ze = void 0, tt.call(st));
          }
          return st;
        }
        function pe(Je) {
          let ee = y.default.statSync(Je).mtimeMs, je = W.get(Je);
          return W.set(Je, ee), je === void 0 ? false : Math.abs(je - ee) > Number.EPSILON;
        }
        function ke(Je, Xe, ee) {
          let je = Je.getProgram().getProgram();
          if (cn.env.TSESTREE_NO_INVALIDATION === "true")
            return je;
          pe(ee) && (E("tsconfig has changed - triggering program update. %s", ee), c.get(ee).forEach((at) => at(ee, C.FileWatcherEventKind.Changed)), q.delete(ee));
          let nt = je.getSourceFile(Xe);
          if (nt)
            return je;
          E("File was not found in program - triggering folder update. %s", Xe);
          let Ze = (0, d.canonicalDirname)(Xe), st = null, tt = Ze, ct = false;
          for (; st !== tt; ) {
            st = tt;
            let at = M.get(st);
            at && (at.forEach((Pt) => {
              Ze !== st && Pt(Ze, C.FileWatcherEventKind.Changed), Pt(st, C.FileWatcherEventKind.Changed);
            }), ct = true), tt = (0, d.canonicalDirname)(st);
          }
          if (!ct)
            return E("No callback found for file, not part of this program. %s", Xe), null;
          if (q.delete(ee), je = Je.getProgram().getProgram(), nt = je.getSourceFile(Xe), nt)
            return je;
          E("File was still not found in program after directory update - checking file deletions. %s", Xe);
          let ge = je.getRootFileNames().find((at) => !y.default.existsSync(at));
          if (!ge)
            return null;
          let Fe = c.get((0, d.getCanonicalFileName)(ge));
          return Fe ? (E("Marking file as deleted. %s", ge), Fe.forEach((at) => at(ge, C.FileWatcherEventKind.Deleted)), q.delete(ee), je = Je.getProgram().getProgram(), nt = je.getSourceFile(Xe), nt ? je : (E("File was still not found in program after deletion check, assuming it is not part of this program. %s", Xe), null)) : (E("Could not find watch callbacks for root file. %s", ge), je);
        }
      } }), VV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/create-program/createProjectProgram.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(W, K, ce, Ie) {
          Ie === void 0 && (Ie = ce);
          var me = Object.getOwnPropertyDescriptor(K, ce);
          (!me || ("get" in me ? !K.__esModule : me.writable || me.configurable)) && (me = { enumerable: true, get: function() {
            return K[ce];
          } }), Object.defineProperty(W, Ie, me);
        } : function(W, K, ce, Ie) {
          Ie === void 0 && (Ie = ce), W[Ie] = K[ce];
        }), v = a && a.__setModuleDefault || (Object.create ? function(W, K) {
          Object.defineProperty(W, "default", { enumerable: true, value: K });
        } : function(W, K) {
          W.default = K;
        }), h2 = a && a.__importStar || function(W) {
          if (W && W.__esModule)
            return W;
          var K = {};
          if (W != null)
            for (var ce in W)
              ce !== "default" && Object.prototype.hasOwnProperty.call(W, ce) && _(K, W, ce);
          return v(K, W), K;
        }, D = a && a.__importDefault || function(W) {
          return W && W.__esModule ? W : { default: W };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.createProjectProgram = void 0;
        var P = D(Ga()), y = D(_o()), m = h2(vr()), C = E1(), d = zV(), E = f5(), I = d_(), c = (0, P.default)("typescript-eslint:typescript-estree:createProjectProgram"), M = [m.Extension.Ts, m.Extension.Tsx, m.Extension.Js, m.Extension.Jsx, m.Extension.Mjs, m.Extension.Mts, m.Extension.Cjs, m.Extension.Cts];
        function q(W) {
          c("Creating project program for: %s", W.filePath);
          let K = (0, E.getWatchProgramsForProjects)(W), ce = (0, C.firstDefined)(K, (ke) => (0, I.getAstFromProgram)(ke, W));
          if (ce || W.createDefaultProgram)
            return ce;
          let Ie = (ke) => (0, d.describeFilePath)(ke, W.tsconfigRootDir), me = (0, d.describeFilePath)(W.filePath, W.tsconfigRootDir), Ae = W.projects.map(Ie), te = Ae.length === 1 ? Ae[0] : `
${Ae.map((ke) => `- ${ke}`).join(`
`)}`, he = [`ESLint was configured to run on \`${me}\` using \`parserOptions.project\`: ${te}`], Pe = false, R = W.extraFileExtensions || [];
          R.forEach((ke) => {
            ke.startsWith(".") || he.push(`Found unexpected extension \`${ke}\` specified with the \`parserOptions.extraFileExtensions\` option. Did you mean \`.${ke}\`?`), M.includes(ke) && he.push(`You unnecessarily included the extension \`${ke}\` with the \`parserOptions.extraFileExtensions\` option. This extension is already handled by the parser by default.`);
          });
          let pe = y.default.extname(W.filePath);
          if (!M.includes(pe)) {
            let ke = `The extension for the file (\`${pe}\`) is non-standard`;
            R.length > 0 ? R.includes(pe) || (he.push(`${ke}. It should be added to your existing \`parserOptions.extraFileExtensions\`.`), Pe = true) : (he.push(`${ke}. You should add \`parserOptions.extraFileExtensions\` to your config.`), Pe = true);
          }
          if (!Pe) {
            let [ke, Je] = W.projects.length === 1 ? ["that TSConfig does not", "that TSConfig"] : ["none of those TSConfigs", "one of those TSConfigs"];
            he.push(`However, ${ke} include this file. Either:`, "- Change ESLint's list of included files to not include this file", `- Change ${Je} to include this file`, "- Create a new TSConfig that includes this file and include it in your parserOptions.project", "See the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file");
          }
          throw new Error(he.join(`
`));
        }
        a.createProjectProgram = q;
      } }), HV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/create-program/createSourceFile.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(E, I, c, M) {
          M === void 0 && (M = c);
          var q = Object.getOwnPropertyDescriptor(I, c);
          (!q || ("get" in q ? !I.__esModule : q.writable || q.configurable)) && (q = { enumerable: true, get: function() {
            return I[c];
          } }), Object.defineProperty(E, M, q);
        } : function(E, I, c, M) {
          M === void 0 && (M = c), E[M] = I[c];
        }), v = a && a.__setModuleDefault || (Object.create ? function(E, I) {
          Object.defineProperty(E, "default", { enumerable: true, value: I });
        } : function(E, I) {
          E.default = I;
        }), h2 = a && a.__importStar || function(E) {
          if (E && E.__esModule)
            return E;
          var I = {};
          if (E != null)
            for (var c in E)
              c !== "default" && Object.prototype.hasOwnProperty.call(E, c) && _(I, E, c);
          return v(I, E), I;
        }, D = a && a.__importDefault || function(E) {
          return E && E.__esModule ? E : { default: E };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.createSourceFile = void 0;
        var P = D(Ga()), y = h2(vr()), m = gT(), C = (0, P.default)("typescript-eslint:typescript-estree:createSourceFile");
        function d(E) {
          return C("Getting AST without type information in %s mode for: %s", E.jsx ? "TSX" : "TS", E.filePath), y.createSourceFile(E.filePath, E.code, y.ScriptTarget.Latest, true, (0, m.getScriptKind)(E.filePath, E.jsx));
        }
        a.createSourceFile = d;
      } }), d5 = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/create-program/useProvidedPrograms.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(q, W, K, ce) {
          ce === void 0 && (ce = K);
          var Ie = Object.getOwnPropertyDescriptor(W, K);
          (!Ie || ("get" in Ie ? !W.__esModule : Ie.writable || Ie.configurable)) && (Ie = { enumerable: true, get: function() {
            return W[K];
          } }), Object.defineProperty(q, ce, Ie);
        } : function(q, W, K, ce) {
          ce === void 0 && (ce = K), q[ce] = W[K];
        }), v = a && a.__setModuleDefault || (Object.create ? function(q, W) {
          Object.defineProperty(q, "default", { enumerable: true, value: W });
        } : function(q, W) {
          q.default = W;
        }), h2 = a && a.__importStar || function(q) {
          if (q && q.__esModule)
            return q;
          var W = {};
          if (q != null)
            for (var K in q)
              K !== "default" && Object.prototype.hasOwnProperty.call(q, K) && _(W, q, K);
          return v(W, q), W;
        }, D = a && a.__importDefault || function(q) {
          return q && q.__esModule ? q : { default: q };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.createProgramFromConfigFile = a.useProvidedPrograms = void 0;
        var P = D(Ga()), y = h2(yT()), m = h2(_o()), C = h2(vr()), d = d_(), E = (0, P.default)("typescript-eslint:typescript-estree:useProvidedProgram");
        function I(q, W) {
          E("Retrieving ast for %s from provided program instance(s)", W.filePath);
          let K;
          for (let ce of q)
            if (K = (0, d.getAstFromProgram)(ce, W), K)
              break;
          if (!K) {
            let Ie = ['"parserOptions.programs" has been provided for @typescript-eslint/parser.', `The file was not found in any of the provided program instance(s): ${m.relative(W.tsconfigRootDir || "/prettier-security-dirname-placeholder", W.filePath)}`];
            throw new Error(Ie.join(`
`));
          }
          return K.program.getTypeChecker(), K;
        }
        a.useProvidedPrograms = I;
        function c(q, W) {
          if (C.sys === void 0)
            throw new Error("`createProgramFromConfigFile` is only supported in a Node-like environment.");
          let ce = C.getParsedCommandLineOfConfigFile(q, d.CORE_COMPILER_OPTIONS, { onUnRecoverableConfigFileDiagnostic: (me) => {
            throw new Error(M([me]));
          }, fileExists: y.existsSync, getCurrentDirectory: () => W && m.resolve(W) || "/prettier-security-dirname-placeholder", readDirectory: C.sys.readDirectory, readFile: (me) => y.readFileSync(me, "utf-8"), useCaseSensitiveFileNames: C.sys.useCaseSensitiveFileNames });
          if (ce.errors.length)
            throw new Error(M(ce.errors));
          let Ie = C.createCompilerHost(ce.options, true);
          return C.createProgram(ce.fileNames, ce.options, Ie);
        }
        a.createProgramFromConfigFile = c;
        function M(q) {
          return C.formatDiagnostics(q, { getCanonicalFileName: (W) => W, getCurrentDirectory: cn.cwd, getNewLine: () => `
` });
        }
      } }), m5 = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/ExpiringCache.js"(a) {
        De();
        var _ = a && a.__classPrivateFieldSet || function(m, C, d, E, I) {
          if (E === "m")
            throw new TypeError("Private method is not writable");
          if (E === "a" && !I)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof C == "function" ? m !== C || !I : !C.has(m))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return E === "a" ? I.call(m, d) : I ? I.value = d : C.set(m, d), d;
        }, v = a && a.__classPrivateFieldGet || function(m, C, d, E) {
          if (d === "a" && !E)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof C == "function" ? m !== C || !E : !C.has(m))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return d === "m" ? E : d === "a" ? E.call(m) : E ? E.value : C.get(m);
        }, h2, D;
        Object.defineProperty(a, "__esModule", { value: true }), a.ExpiringCache = a.DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS = void 0, a.DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS = 30;
        var P = [0, 0], y = class {
          constructor(m) {
            h2.set(this, void 0), D.set(this, /* @__PURE__ */ new Map()), _(this, h2, m, "f");
          }
          set(m, C) {
            return v(this, D, "f").set(m, { value: C, lastSeen: v(this, h2, "f") === "Infinity" ? P : cn.hrtime() }), this;
          }
          get(m) {
            let C = v(this, D, "f").get(m);
            if ((C == null ? void 0 : C.value) != null) {
              if (v(this, h2, "f") === "Infinity" || cn.hrtime(C.lastSeen)[0] < v(this, h2, "f"))
                return C.value;
              v(this, D, "f").delete(m);
            }
          }
          clear() {
            v(this, D, "f").clear();
          }
        };
        a.ExpiringCache = y, h2 = /* @__PURE__ */ new WeakMap(), D = /* @__PURE__ */ new WeakMap();
      } }), GV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/getProjectConfigFiles.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(E, I, c, M) {
          M === void 0 && (M = c);
          var q = Object.getOwnPropertyDescriptor(I, c);
          (!q || ("get" in q ? !I.__esModule : q.writable || q.configurable)) && (q = { enumerable: true, get: function() {
            return I[c];
          } }), Object.defineProperty(E, M, q);
        } : function(E, I, c, M) {
          M === void 0 && (M = c), E[M] = I[c];
        }), v = a && a.__setModuleDefault || (Object.create ? function(E, I) {
          Object.defineProperty(E, "default", { enumerable: true, value: I });
        } : function(E, I) {
          E.default = I;
        }), h2 = a && a.__importStar || function(E) {
          if (E && E.__esModule)
            return E;
          var I = {};
          if (E != null)
            for (var c in E)
              c !== "default" && Object.prototype.hasOwnProperty.call(E, c) && _(I, E, c);
          return v(I, E), I;
        }, D = a && a.__importDefault || function(E) {
          return E && E.__esModule ? E : { default: E };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.getProjectConfigFiles = void 0;
        var P = D(Ga()), y = h2(yT()), m = h2(_o()), C = (0, P.default)("typescript-eslint:typescript-estree:getProjectConfigFiles");
        function d(E, I) {
          var c;
          if (I !== true)
            return I === void 0 || Array.isArray(I) ? I : [I];
          C("Looking for tsconfig.json at or above file: %s", E.filePath);
          let M = m.dirname(E.filePath), q = [M];
          do {
            C("Checking tsconfig.json path: %s", M);
            let W = m.join(M, "tsconfig.json"), K = (c = E.tsconfigMatchCache.get(M)) !== null && c !== void 0 ? c : y.existsSync(W) && W;
            if (K) {
              for (let ce of q)
                E.tsconfigMatchCache.set(ce, K);
              return [K];
            }
            M = m.dirname(M), q.push(M);
          } while (M.length > 1 && M.length >= E.tsconfigRootDir.length);
          throw new Error(`project was set to \`true\` but couldn't find any tsconfig.json relative to '${E.filePath}' within '${E.tsconfigRootDir}'.`);
        }
        a.getProjectConfigFiles = d;
      } }), $V = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/inferSingleRun.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.inferSingleRun = void 0;
        var _ = _o();
        function v(h2) {
          return (h2 == null ? void 0 : h2.project) == null || (h2 == null ? void 0 : h2.programs) != null || cn.env.TSESTREE_SINGLE_RUN === "false" ? false : !!(cn.env.TSESTREE_SINGLE_RUN === "true" || h2 != null && h2.allowAutomaticSingleRunInference && (cn.env.CI === "true" || cn.argv[1].endsWith((0, _.normalize)("node_modules/.bin/eslint"))));
        }
        a.inferSingleRun = v;
      } }), KV = Oe({ "node_modules/is-extglob/index.js"(a, _) {
        De(), _.exports = function(h2) {
          if (typeof h2 != "string" || h2 === "")
            return false;
          for (var D; D = /(\\).|([@?!+*]\(.*\))/g.exec(h2); ) {
            if (D[2])
              return true;
            h2 = h2.slice(D.index + D[0].length);
          }
          return false;
        };
      } }), XV = Oe({ "node_modules/is-glob/index.js"(a, _) {
        De();
        var v = KV(), h2 = { "{": "}", "(": ")", "[": "]" }, D = function(y) {
          if (y[0] === "!")
            return true;
          for (var m = 0, C = -2, d = -2, E = -2, I = -2, c = -2; m < y.length; ) {
            if (y[m] === "*" || y[m + 1] === "?" && /[\].+)]/.test(y[m]) || d !== -1 && y[m] === "[" && y[m + 1] !== "]" && (d < m && (d = y.indexOf("]", m)), d > m && (c === -1 || c > d || (c = y.indexOf("\\", m), c === -1 || c > d))) || E !== -1 && y[m] === "{" && y[m + 1] !== "}" && (E = y.indexOf("}", m), E > m && (c = y.indexOf("\\", m), c === -1 || c > E)) || I !== -1 && y[m] === "(" && y[m + 1] === "?" && /[:!=]/.test(y[m + 2]) && y[m + 3] !== ")" && (I = y.indexOf(")", m), I > m && (c = y.indexOf("\\", m), c === -1 || c > I)) || C !== -1 && y[m] === "(" && y[m + 1] !== "|" && (C < m && (C = y.indexOf("|", m)), C !== -1 && y[C + 1] !== ")" && (I = y.indexOf(")", C), I > C && (c = y.indexOf("\\", C), c === -1 || c > I))))
              return true;
            if (y[m] === "\\") {
              var M = y[m + 1];
              m += 2;
              var q = h2[M];
              if (q) {
                var W = y.indexOf(q, m);
                W !== -1 && (m = W + 1);
              }
              if (y[m] === "!")
                return true;
            } else
              m++;
          }
          return false;
        }, P = function(y) {
          if (y[0] === "!")
            return true;
          for (var m = 0; m < y.length; ) {
            if (/[*?{}()[\]]/.test(y[m]))
              return true;
            if (y[m] === "\\") {
              var C = y[m + 1];
              m += 2;
              var d = h2[C];
              if (d) {
                var E = y.indexOf(d, m);
                E !== -1 && (m = E + 1);
              }
              if (y[m] === "!")
                return true;
            } else
              m++;
          }
          return false;
        };
        _.exports = function(m, C) {
          if (typeof m != "string" || m === "")
            return false;
          if (v(m))
            return true;
          var d = D;
          return C && C.strict === false && (d = P), d(m);
        };
      } }), h5 = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/resolveProjectList.js"(a) {
        De();
        var _ = a && a.__importDefault || function(M) {
          return M && M.__esModule ? M : { default: M };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.clearGlobResolutionCache = a.resolveProjectList = a.clearGlobCache = void 0;
        var v = _(Ga()), h2 = {}, D = _(XV()), P = d_(), y = m5(), m = (0, v.default)("typescript-eslint:typescript-estree:parser:parseSettings:resolveProjectList"), C = null;
        function d() {
          C == null || C.clear();
        }
        a.clearGlobCache = d;
        function E(M) {
          var q, W, K;
          let ce = [];
          if (typeof M.project == "string")
            ce.push(M.project);
          else if (Array.isArray(M.project))
            for (let R of M.project)
              typeof R == "string" && ce.push(R);
          if (ce.length === 0)
            return [];
          let Ie = ((q = M.projectFolderIgnoreList) !== null && q !== void 0 ? q : ["**/node_modules/**"]).reduce((R, pe) => (typeof pe == "string" && R.push(pe), R), []).map((R) => R.startsWith("!") ? R : `!${R}`), me = I({ project: ce, projectFolderIgnoreList: Ie, tsconfigRootDir: M.tsconfigRootDir });
          if (C == null)
            C = new y.ExpiringCache(M.singleRun ? "Infinity" : (K = (W = M.cacheLifetime) === null || W === void 0 ? void 0 : W.glob) !== null && K !== void 0 ? K : y.DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS);
          else {
            let R = C.get(me);
            if (R)
              return R;
          }
          let Ae = ce.filter((R) => !(0, D.default)(R)), te = ce.filter((R) => (0, D.default)(R)), he = new Set(Ae.concat(te.length === 0 ? [] : (0, h2.sync)([...te, ...Ie], { cwd: M.tsconfigRootDir })).map((R) => (0, P.getCanonicalFileName)((0, P.ensureAbsolutePath)(R, M.tsconfigRootDir))));
          m("parserOptions.project (excluding ignored) matched projects: %s", he);
          let Pe = Array.from(he);
          return C.set(me, Pe), Pe;
        }
        a.resolveProjectList = E;
        function I(M) {
          let { project: q, projectFolderIgnoreList: W, tsconfigRootDir: K } = M, ce = { tsconfigRootDir: K, project: q, projectFolderIgnoreList: [...W].sort() };
          return (0, P.createHash)(JSON.stringify(ce));
        }
        function c() {
          C == null || C.clear(), C = null;
        }
        a.clearGlobResolutionCache = c;
      } }), YV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/warnAboutTSVersion.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(M, q, W, K) {
          K === void 0 && (K = W);
          var ce = Object.getOwnPropertyDescriptor(q, W);
          (!ce || ("get" in ce ? !q.__esModule : ce.writable || ce.configurable)) && (ce = { enumerable: true, get: function() {
            return q[W];
          } }), Object.defineProperty(M, K, ce);
        } : function(M, q, W, K) {
          K === void 0 && (K = W), M[K] = q[W];
        }), v = a && a.__setModuleDefault || (Object.create ? function(M, q) {
          Object.defineProperty(M, "default", { enumerable: true, value: q });
        } : function(M, q) {
          M.default = q;
        }), h2 = a && a.__importStar || function(M) {
          if (M && M.__esModule)
            return M;
          var q = {};
          if (M != null)
            for (var W in M)
              W !== "default" && Object.prototype.hasOwnProperty.call(M, W) && _(q, M, W);
          return v(q, M), q;
        }, D = a && a.__importDefault || function(M) {
          return M && M.__esModule ? M : { default: M };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.warnAboutTSVersion = void 0;
        var P = D(pT()), y = h2(vr()), m = ">=3.3.1 <5.1.0", C = ["5.0.1-rc"], d = y.version, E = P.default.satisfies(d, [m].concat(C).join(" || ")), I = false;
        function c(M) {
          var q;
          if (!E && !I) {
            if (typeof cn > "u" ? false : (q = cn.stdout) === null || q === void 0 ? void 0 : q.isTTY) {
              let K = "=============", ce = [K, "WARNING: You are currently running a version of TypeScript which is not officially supported by @typescript-eslint/typescript-estree.", "You may find that it works just fine, or you may not.", `SUPPORTED TYPESCRIPT VERSIONS: ${m}`, `YOUR TYPESCRIPT VERSION: ${d}`, "Please only submit bug reports when using the officially supported version.", K];
              M.log(ce.join(`

`));
            }
            I = true;
          }
        }
        a.warnAboutTSVersion = c;
      } }), g5 = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/createParseSettings.js"(a) {
        De();
        var _ = a && a.__importDefault || function(W) {
          return W && W.__esModule ? W : { default: W };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.clearTSConfigMatchCache = a.createParseSettings = void 0;
        var v = _(Ga()), h2 = d_(), D = m5(), P = GV(), y = $V(), m = h5(), C = YV(), d = (0, v.default)("typescript-eslint:typescript-estree:parser:parseSettings:createParseSettings"), E;
        function I(W) {
          let K = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var ce, Ie, me;
          let Ae = (0, y.inferSingleRun)(K), te = typeof K.tsconfigRootDir == "string" ? K.tsconfigRootDir : "/prettier-security-dirname-placeholder", he = { code: M(W), comment: K.comment === true, comments: [], createDefaultProgram: K.createDefaultProgram === true, debugLevel: K.debugLevel === true ? /* @__PURE__ */ new Set(["typescript-eslint"]) : Array.isArray(K.debugLevel) ? new Set(K.debugLevel) : /* @__PURE__ */ new Set(), errorOnTypeScriptSyntacticAndSemanticIssues: false, errorOnUnknownASTType: K.errorOnUnknownASTType === true, EXPERIMENTAL_useSourceOfProjectReferenceRedirect: K.EXPERIMENTAL_useSourceOfProjectReferenceRedirect === true, extraFileExtensions: Array.isArray(K.extraFileExtensions) && K.extraFileExtensions.every((Pe) => typeof Pe == "string") ? K.extraFileExtensions : [], filePath: (0, h2.ensureAbsolutePath)(typeof K.filePath == "string" && K.filePath !== "<input>" ? K.filePath : q(K.jsx), te), jsx: K.jsx === true, loc: K.loc === true, log: typeof K.loggerFn == "function" ? K.loggerFn : K.loggerFn === false ? () => {
          } : console.log, moduleResolver: (ce = K.moduleResolver) !== null && ce !== void 0 ? ce : "", preserveNodeMaps: K.preserveNodeMaps !== false, programs: Array.isArray(K.programs) ? K.programs : null, projects: [], range: K.range === true, singleRun: Ae, tokens: K.tokens === true ? [] : null, tsconfigMatchCache: E != null ? E : E = new D.ExpiringCache(Ae ? "Infinity" : (me = (Ie = K.cacheLifetime) === null || Ie === void 0 ? void 0 : Ie.glob) !== null && me !== void 0 ? me : D.DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS), tsconfigRootDir: te };
          if (he.debugLevel.size > 0) {
            let Pe = [];
            he.debugLevel.has("typescript-eslint") && Pe.push("typescript-eslint:*"), (he.debugLevel.has("eslint") || v.default.enabled("eslint:*,-eslint:code-path")) && Pe.push("eslint:*,-eslint:code-path"), v.default.enable(Pe.join(","));
          }
          if (Array.isArray(K.programs)) {
            if (!K.programs.length)
              throw new Error("You have set parserOptions.programs to an empty array. This will cause all files to not be found in existing programs. Either provide one or more existing TypeScript Program instances in the array, or remove the parserOptions.programs setting.");
            d("parserOptions.programs was provided, so parserOptions.project will be ignored.");
          }
          return he.programs || (he.projects = (0, m.resolveProjectList)({ cacheLifetime: K.cacheLifetime, project: (0, P.getProjectConfigFiles)(he, K.project), projectFolderIgnoreList: K.projectFolderIgnoreList, singleRun: he.singleRun, tsconfigRootDir: te })), (0, C.warnAboutTSVersion)(he), he;
        }
        a.createParseSettings = I;
        function c() {
          E == null || E.clear();
        }
        a.clearTSConfigMatchCache = c;
        function M(W) {
          return typeof W != "string" ? String(W) : W;
        }
        function q(W) {
          return W ? "estree.tsx" : "estree.ts";
        }
      } }), QV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/semantic-or-syntactic-errors.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.getFirstSemanticOrSyntacticError = void 0;
        var _ = vr();
        function v(P, y) {
          try {
            let m = h2(P.getSyntacticDiagnostics(y));
            if (m.length)
              return D(m[0]);
            let C = h2(P.getSemanticDiagnostics(y));
            return C.length ? D(C[0]) : void 0;
          } catch (m) {
            console.warn(`Warning From TSC: "${m.message}`);
            return;
          }
        }
        a.getFirstSemanticOrSyntacticError = v;
        function h2(P) {
          return P.filter((y) => {
            switch (y.code) {
              case 1013:
              case 1014:
              case 1044:
              case 1045:
              case 1048:
              case 1049:
              case 1070:
              case 1071:
              case 1085:
              case 1090:
              case 1096:
              case 1097:
              case 1098:
              case 1099:
              case 1117:
              case 1121:
              case 1123:
              case 1141:
              case 1162:
              case 1164:
              case 1172:
              case 1173:
              case 1175:
              case 1176:
              case 1190:
              case 1196:
              case 1200:
              case 1206:
              case 1211:
              case 1242:
              case 1246:
              case 1255:
              case 1308:
              case 2364:
              case 2369:
              case 2452:
              case 2462:
              case 8017:
              case 17012:
              case 17013:
                return true;
            }
            return false;
          });
        }
        function D(P) {
          return Object.assign(Object.assign({}, P), { message: (0, _.flattenDiagnosticMessageText)(P.messageText, _.sys.newLine) });
        }
      } }), y5 = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/parser.js"(a) {
        De();
        var _ = a && a.__importDefault || function(he) {
          return he && he.__esModule ? he : { default: he };
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.clearParseAndGenerateServicesCalls = a.clearProgramCache = a.parseWithNodeMaps = a.parseAndGenerateServices = a.parse = void 0;
        var v = _(Ga()), h2 = FV(), D = G9(), P = qV(), y = UV(), m = VV(), C = HV(), d = d5(), E = g5(), I = QV(), c = (0, v.default)("typescript-eslint:typescript-estree:parser"), M = /* @__PURE__ */ new Map();
        function q() {
          M.clear();
        }
        a.clearProgramCache = q;
        function W(he, Pe) {
          return he.programs && (0, d.useProvidedPrograms)(he.programs, he) || Pe && (0, m.createProjectProgram)(he) || Pe && he.createDefaultProgram && (0, P.createDefaultProgram)(he) || (0, y.createIsolatedProgram)(he);
        }
        function K(he, Pe) {
          let { ast: R } = ce(he, Pe, false);
          return R;
        }
        a.parse = K;
        function ce(he, Pe, R) {
          let pe = (0, E.createParseSettings)(he, Pe);
          if (Pe != null && Pe.errorOnTypeScriptSyntacticAndSemanticIssues)
            throw new Error('"errorOnTypeScriptSyntacticAndSemanticIssues" is only supported for parseAndGenerateServices()');
          let ke = (0, C.createSourceFile)(pe), { estree: Je, astMaps: Xe } = (0, h2.astConverter)(ke, pe, R);
          return { ast: Je, esTreeNodeToTSNodeMap: Xe.esTreeNodeToTSNodeMap, tsNodeToESTreeNodeMap: Xe.tsNodeToESTreeNodeMap };
        }
        function Ie(he, Pe) {
          return ce(he, Pe, true);
        }
        a.parseWithNodeMaps = Ie;
        var me = {};
        function Ae() {
          me = {};
        }
        a.clearParseAndGenerateServicesCalls = Ae;
        function te(he, Pe) {
          var R, pe;
          let ke = (0, E.createParseSettings)(he, Pe);
          Pe !== void 0 && typeof Pe.errorOnTypeScriptSyntacticAndSemanticIssues == "boolean" && Pe.errorOnTypeScriptSyntacticAndSemanticIssues && (ke.errorOnTypeScriptSyntacticAndSemanticIssues = true), ke.singleRun && !ke.programs && ((R = ke.projects) === null || R === void 0 ? void 0 : R.length) > 0 && (ke.programs = { *[Symbol.iterator]() {
            for (let st of ke.projects) {
              let tt = M.get(st);
              if (tt)
                yield tt;
              else {
                c("Detected single-run/CLI usage, creating Program once ahead of time for project: %s", st);
                let ct = (0, d.createProgramFromConfigFile)(st);
                M.set(st, ct), yield ct;
              }
            }
          } });
          let Je = ke.programs != null || ((pe = ke.projects) === null || pe === void 0 ? void 0 : pe.length) > 0;
          ke.singleRun && Pe.filePath && (me[Pe.filePath] = (me[Pe.filePath] || 0) + 1);
          let { ast: Xe, program: ee } = ke.singleRun && Pe.filePath && me[Pe.filePath] > 1 ? (0, y.createIsolatedProgram)(ke) : W(ke, Je), je = typeof ke.preserveNodeMaps == "boolean" ? ke.preserveNodeMaps : true, { estree: nt, astMaps: Ze } = (0, h2.astConverter)(Xe, ke, je);
          if (ee && ke.errorOnTypeScriptSyntacticAndSemanticIssues) {
            let st = (0, I.getFirstSemanticOrSyntacticError)(ee, Xe);
            if (st)
              throw (0, D.convertError)(st);
          }
          return { ast: nt, services: { hasFullTypeInformation: Je, program: ee, esTreeNodeToTSNodeMap: Ze.esTreeNodeToTSNodeMap, tsNodeToESTreeNodeMap: Ze.tsNodeToESTreeNodeMap } };
        }
        a.parseAndGenerateServices = te;
      } }), ZV = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/clear-caches.js"(a) {
        De(), Object.defineProperty(a, "__esModule", { value: true }), a.clearProgramCache = a.clearCaches = void 0;
        var _ = f5(), v = y5(), h2 = g5(), D = h5();
        function P() {
          (0, v.clearProgramCache)(), (0, _.clearWatchCaches)(), (0, h2.clearTSConfigMatchCache)(), (0, D.clearGlobCache)();
        }
        a.clearCaches = P, a.clearProgramCache = P;
      } }), eH = Oe({ "node_modules/@typescript-eslint/typescript-estree/package.json"(a, _) {
        _.exports = { name: "@typescript-eslint/typescript-estree", version: "5.55.0", description: "A parser that converts TypeScript source code into an ESTree compatible form", main: "dist/index.js", types: "dist/index.d.ts", files: ["dist", "_ts3.4", "README.md", "LICENSE"], engines: { node: "^12.22.0 || ^14.17.0 || >=16.0.0" }, repository: { type: "git", url: "https://github.com/typescript-eslint/typescript-eslint.git", directory: "packages/typescript-estree" }, bugs: { url: "https://github.com/typescript-eslint/typescript-eslint/issues" }, license: "BSD-2-Clause", keywords: ["ast", "estree", "ecmascript", "javascript", "typescript", "parser", "syntax"], scripts: { build: "tsc -b tsconfig.build.json", postbuild: "downlevel-dts dist _ts3.4/dist", clean: "tsc -b tsconfig.build.json --clean", postclean: "rimraf dist && rimraf _ts3.4 && rimraf coverage", format: 'prettier --write "./**/*.{ts,mts,cts,tsx,js,mjs,cjs,jsx,json,md,css}" --ignore-path ../../.prettierignore', lint: "nx lint", test: "jest --coverage", typecheck: "tsc -p tsconfig.json --noEmit" }, dependencies: { "@typescript-eslint/types": "5.55.0", "@typescript-eslint/visitor-keys": "5.55.0", debug: "^4.3.4", globby: "^11.1.0", "is-glob": "^4.0.3", semver: "^7.3.7", tsutils: "^3.21.0" }, devDependencies: { "@babel/code-frame": "*", "@babel/parser": "*", "@types/babel__code-frame": "*", "@types/debug": "*", "@types/glob": "*", "@types/is-glob": "*", "@types/semver": "*", "@types/tmp": "*", glob: "*", "jest-specific-snapshot": "*", "make-dir": "*", tmp: "*", typescript: "*" }, peerDependenciesMeta: { typescript: { optional: true } }, funding: { type: "opencollective", url: "https://opencollective.com/typescript-eslint" }, typesVersions: { "<3.8": { "*": ["_ts3.4/*"] } }, gitHead: "877d73327fca3bdbe7e170e8b3a906d090a6de37" };
      } }), tH = Oe({ "node_modules/@typescript-eslint/typescript-estree/dist/index.js"(a) {
        De();
        var _ = a && a.__createBinding || (Object.create ? function(C, d, E, I) {
          I === void 0 && (I = E);
          var c = Object.getOwnPropertyDescriptor(d, E);
          (!c || ("get" in c ? !d.__esModule : c.writable || c.configurable)) && (c = { enumerable: true, get: function() {
            return d[E];
          } }), Object.defineProperty(C, I, c);
        } : function(C, d, E, I) {
          I === void 0 && (I = E), C[I] = d[E];
        }), v = a && a.__exportStar || function(C, d) {
          for (var E in C)
            E !== "default" && !Object.prototype.hasOwnProperty.call(d, E) && _(d, C, E);
        };
        Object.defineProperty(a, "__esModule", { value: true }), a.version = a.visitorKeys = a.typescriptVersionIsAtLeast = a.createProgram = a.simpleTraverse = a.parseWithNodeMaps = a.parseAndGenerateServices = a.parse = void 0;
        var h2 = y5();
        Object.defineProperty(a, "parse", { enumerable: true, get: function() {
          return h2.parse;
        } }), Object.defineProperty(a, "parseAndGenerateServices", { enumerable: true, get: function() {
          return h2.parseAndGenerateServices;
        } }), Object.defineProperty(a, "parseWithNodeMaps", { enumerable: true, get: function() {
          return h2.parseWithNodeMaps;
        } });
        var D = t5();
        Object.defineProperty(a, "simpleTraverse", { enumerable: true, get: function() {
          return D.simpleTraverse;
        } }), v(x1(), a);
        var P = d5();
        Object.defineProperty(a, "createProgram", { enumerable: true, get: function() {
          return P.createProgramFromConfigFile;
        } }), v(gT(), a);
        var y = S1();
        Object.defineProperty(a, "typescriptVersionIsAtLeast", { enumerable: true, get: function() {
          return y.typescriptVersionIsAtLeast;
        } }), v(fT(), a), v(ZV(), a);
        var m = e5();
        Object.defineProperty(a, "visitorKeys", { enumerable: true, get: function() {
          return m.visitorKeys;
        } }), a.version = eH().version;
      } });
      De();
      var rH = w9(), nH = pW(), iH = SW(), aH = xW(), sH = PW(), { throwErrorForInvalidNodes: oH } = DW(), E9 = { loc: true, range: true, comment: true, jsx: true, tokens: true, loggerFn: false, project: [] };
      function _H(a) {
        let { message: _, lineNumber: v, column: h2 } = a;
        return typeof v != "number" ? a : rH(_, { start: { line: v, column: h2 + 1 } });
      }
      function cH(a, _) {
        let v = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, h2 = aH(a), D = lH(a), { parseWithNodeMaps: P } = tH(), { result: y, error: m } = nH(() => P(h2, Object.assign(Object.assign({}, E9), {}, { jsx: D })), () => P(h2, Object.assign(Object.assign({}, E9), {}, { jsx: !D })));
        if (!y)
          throw _H(m);
        return v.originalText = a, oH(y, v), sH(y.ast, v);
      }
      function lH(a) {
        return new RegExp(["(?:^[^\"'`]*</)", "|", "(?:^[^/]{2}.*/>)"].join(""), "m").test(a);
      }
      v5.exports = { parsers: { typescript: iH(cH) } };
    });
    return uH();
  });
})(parserTypescript);
var parserTypescriptExports = parserTypescript.exports;
const parserTS = /* @__PURE__ */ getDefaultExportFromCjs(parserTypescriptExports);
const codeTypes = {
  type: {
    stub: "type __TSE_STUB__ =",
    cleanup: (s) => s == null ? void 0 : s.replace(/ *type */, "").replace(/ *__TSE_STUB__ */, "").replace(">=", ">").replace(/(<span[^>]*>\s*<\/span>)+/, "")
  },
  signature: {
    stub: "function ",
    cleanup: (s) => s == null ? void 0 : s.replace(/function */, "")
  }
};
function prettyCode(code, codeType = "type", pretty = true) {
  const { stub, cleanup } = codeTypes[codeType ?? "type"];
  if (pretty) {
    return cleanup(highlight(formatCode(`${stub} ${code}`)));
  } else {
    return highlight(code);
  }
}
function highlight(code) {
  if (code === void 0) {
    return void 0;
  }
  if (highlighter) {
    return highlighter == null ? void 0 : highlighter.codeToHtml(code, {
      lang: "ts",
      theme: appState.shikiTheme
    });
  }
  return code;
}
function formatCode(code) {
  if (code === void 0) {
    return void 0;
  }
  try {
    return standaloneExports.format(code, {
      parser: "typescript",
      plugins: [parserTS]
    });
  } catch (e) {
    try {
      let fixed = code.replaceAll("...", "ⵈ");
      return standaloneExports.format(fixed, {
        parser: "typescript",
        plugins: [parserTS]
      });
    } catch (e2) {
      return code;
    }
  }
}
const _hoisted_1$5 = ["innerHTML"];
const _sfc_main$7 = /* @__PURE__ */ defineComponent({
  __name: "CodeBlock",
  props: {
    code: {},
    registerHtml: { type: Function },
    codeType: {},
    pretty: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const highlighted = computed(
      () => prettyCode(props.code ?? "", props.codeType, props.pretty ?? true)
    );
    props.registerHtml(highlighted.value);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("code", null, [
        createBaseVNode("div", { innerHTML: highlighted.value }, null, 8, _hoisted_1$5)
      ]);
    };
  }
});
const CodeBlock_vue_vue_type_style_index_0_scoped_fcee95fb_lang = "";
const _export_sfc = (sfc, props) => {
  const target2 = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target2[key] = val;
  }
  return target2;
};
const CodeBlock = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["__scopeId", "data-v-fcee95fb"]]);
var Mode;
(function(Mode2) {
  Mode2[Mode2["character"] = 0] = "character";
  Mode2[Mode2["tag"] = 1] = "tag";
  Mode2[Mode2["whitespace"] = 2] = "whitespace";
  Mode2[Mode2["number"] = 3] = "number";
  Mode2[Mode2["entity"] = 4] = "entity";
})(Mode || (Mode = {}));
var Action;
(function(Action2) {
  Action2[Action2["equal"] = 0] = "equal";
  Action2[Action2["delete"] = 1] = "delete";
  Action2[Action2["insert"] = 2] = "insert";
  Action2[Action2["none"] = 3] = "none";
  Action2[Action2["replace"] = 4] = "replace";
})(Action || (Action = {}));
class Match {
  constructor(startInOld, startInNew, size2) {
    __publicField(this, "startInOld");
    __publicField(this, "startInNew");
    __publicField(this, "size");
    this.startInOld = startInOld;
    this.startInNew = startInNew;
    this.size = size2;
  }
  get endInOld() {
    return this.startInOld + this.size;
  }
  get endInNew() {
    return this.startInNew + this.size;
  }
}
const tagRegex = /^\s*<\/?[^>]+>\s*$/;
const tagWordRegex = /<[^\s>]+/;
const whitespaceRegex = /^(\s|&nbsp;)+$/;
const wordRegex = /[\w\#@]+/;
const specialCaseWordTags = ["<img"];
function isTag(item) {
  if (specialCaseWordTags.some((re2) => item !== null && item.startsWith(re2))) {
    return false;
  }
  return tagRegex.test(item);
}
function stripTagAttributes(word) {
  let tags = tagWordRegex.exec(word) || [""];
  word = tags[0] + (word.endsWith("/>") ? "/>" : ">");
  return word;
}
function isStartOfTag(val) {
  return val === "<";
}
function isEndOfTag(val) {
  return val === ">";
}
function isStartOfEntity(val) {
  return val === "&";
}
function isEndOfEntity(val) {
  return val === ";";
}
function isWhiteSpace$1(value2) {
  return whitespaceRegex.test(value2);
}
function stripAnyAttributes(word) {
  if (isTag(word)) {
    return stripTagAttributes(word);
  }
  return word;
}
function isNumber(text) {
  return /^\d$/.test(text);
}
function isWord(text) {
  return wordRegex.test(text);
}
function putNewWord(block2, word, blockSize) {
  block2.push(word);
  if (block2.length > blockSize) {
    block2.shift();
  }
  if (block2.length !== blockSize) {
    return null;
  }
  return block2.join("");
}
class MatchFinder {
  constructor({ oldWords, newWords, startInOld, endInOld, startInNew, endInNew, options }) {
    __publicField(this, "oldWords");
    __publicField(this, "newWords");
    __publicField(this, "startInOld");
    __publicField(this, "endInOld");
    __publicField(this, "startInNew");
    __publicField(this, "endInNew");
    __publicField(this, "options");
    __publicField(this, "wordIndices");
    this.oldWords = oldWords;
    this.newWords = newWords;
    this.startInOld = startInOld;
    this.endInOld = endInOld;
    this.startInNew = startInNew;
    this.endInNew = endInNew;
    this.options = options;
    this.wordIndices = /* @__PURE__ */ new Map();
  }
  indexNewWords() {
    this.wordIndices = /* @__PURE__ */ new Map();
    let block2 = [];
    for (let i2 = this.startInNew; i2 < this.endInNew; i2++) {
      let word = this.normalizeForIndex(this.newWords[i2]);
      let key = putNewWord(block2, word, this.options.blockSize);
      if (key === null) {
        continue;
      }
      if (this.wordIndices.has(key)) {
        this.wordIndices.get(key).push(i2);
      } else {
        this.wordIndices.set(key, [i2]);
      }
    }
  }
  // Converts the word to index-friendly value so it can be compared with other similar words
  normalizeForIndex(word) {
    word = stripAnyAttributes(word);
    if (this.options.ignoreWhitespaceDifferences && isWhiteSpace$1(word)) {
      return " ";
    }
    return word;
  }
  findMatch() {
    this.indexNewWords();
    this.removeRepeatingWords();
    if (this.wordIndices.size === 0) {
      return null;
    }
    let bestMatchInOld = this.startInOld;
    let bestMatchInNew = this.startInNew;
    let bestMatchSize = 0;
    let matchLengthAt = /* @__PURE__ */ new Map();
    const blockSize = this.options.blockSize;
    let block2 = [];
    for (let indexInOld = this.startInOld; indexInOld < this.endInOld; indexInOld++) {
      let word = this.normalizeForIndex(this.oldWords[indexInOld]);
      let index2 = putNewWord(block2, word, blockSize);
      if (index2 === null) {
        continue;
      }
      let newMatchLengthAt = /* @__PURE__ */ new Map();
      if (!this.wordIndices.has(index2)) {
        matchLengthAt = newMatchLengthAt;
        continue;
      }
      for (let indexInNew of this.wordIndices.get(index2)) {
        let newMatchLength = (matchLengthAt.has(indexInNew - 1) ? matchLengthAt.get(indexInNew - 1) : 0) + 1;
        newMatchLengthAt.set(indexInNew, newMatchLength);
        if (newMatchLength > bestMatchSize) {
          bestMatchInOld = indexInOld - newMatchLength - blockSize + 2;
          bestMatchInNew = indexInNew - newMatchLength - blockSize + 2;
          bestMatchSize = newMatchLength;
        }
      }
      matchLengthAt = newMatchLengthAt;
    }
    return bestMatchSize !== 0 ? new Match(bestMatchInOld, bestMatchInNew, bestMatchSize + blockSize - 1) : null;
  }
  // This method removes words that occur too many times. This way it reduces total count of comparison operations
  // and as result the diff algoritm takes less time. But the side effect is that it may detect false differences of
  // the repeating words.
  removeRepeatingWords() {
    let threshold = this.newWords.length + this.options.repeatingWordsAccuracy;
    let repeatingWords = Array.from(this.wordIndices.entries()).filter((i2) => i2[1].length > threshold).map((i2) => i2[0]);
    for (let w of repeatingWords) {
      this.wordIndices.delete(w);
    }
  }
}
class Operation {
  constructor({ action, startInOld, endInOld, startInNew, endInNew }) {
    __publicField(this, "action");
    __publicField(this, "startInOld");
    __publicField(this, "endInOld");
    __publicField(this, "startInNew");
    __publicField(this, "endInNew");
    this.action = action;
    this.startInOld = startInOld;
    this.endInOld = endInOld;
    this.startInNew = startInNew;
    this.endInNew = endInNew;
  }
}
const MatchOptions = {
  blockSize: 0,
  repeatingWordsAccuracy: 0,
  ignoreWhitespaceDifferences: false
};
class WordSplitter {
  static prepare() {
    this.state = {
      mode: Mode.character,
      currentWord: [],
      words: []
    };
    this.blockLocations = [];
  }
  static convertHtmlToListOfWords(text, blockExpressions = []) {
    this.prepare();
    this.findBlocks(text, blockExpressions);
    const isBlockCheckRequired = !!this.blockLocations.length;
    let isGrouping = false;
    let groupingUntil = -1;
    let blockLocation;
    for (let idx = 0; idx < text.length; idx++) {
      var character = text[idx];
      if (isBlockCheckRequired) {
        if (groupingUntil === idx) {
          groupingUntil = -1;
          isGrouping = false;
          this.state.currentWord.push(character);
          const originalWord = this.state.currentWord.join("");
          if (blockLocation == null ? void 0 : blockLocation.targetBoundaries) {
            const newWord = originalWord.slice(blockLocation == null ? void 0 : blockLocation.targetBoundaries.starts, blockLocation == null ? void 0 : blockLocation.targetBoundaries.ends);
            this.state.words.push([newWord, originalWord]);
          } else {
            this.state.words.push([originalWord]);
          }
          this.state.currentWord = [];
          this.state.mode = Mode.character;
          blockLocation = void 0;
          continue;
        }
        let newBlockLocation = this.blockLocations.find((el) => el.wordBoundaries.starts === idx);
        if (newBlockLocation) {
          blockLocation = newBlockLocation;
          if (this.state.currentWord.length !== 0) {
            this.state.words.push([
              this.state.currentWord.join("")
            ]);
            this.state.currentWord = [];
          }
          isGrouping = true;
          groupingUntil = blockLocation.wordBoundaries.ends;
        }
        if (isGrouping) {
          this.state.currentWord.push(character);
          this.state.mode = Mode.character;
          continue;
        }
      }
      switch (this.state.mode) {
        case Mode.character:
          if (isStartOfTag(character)) {
            this.addClearWordSwitchMode("<", Mode.tag);
          } else if (isStartOfEntity(character)) {
            this.addClearWordSwitchMode(character, Mode.entity);
          } else if (isWhiteSpace$1(character)) {
            this.addClearWordSwitchMode(character, Mode.whitespace);
          } else if (isNumber(character)) {
            this.addClearWordSwitchMode(character, Mode.number);
          } else if (isWord(character) && (this.state.currentWord.length === 0 || isWord(this.state.currentWord[this.state.currentWord.length - 1]))) {
            this.state.currentWord.push(character);
          } else {
            this.addClearWordSwitchMode(character, Mode.character);
          }
          break;
        case Mode.tag:
          if (isEndOfTag(character)) {
            this.state.currentWord.push(character);
            this.state.words.push([
              this.state.currentWord.join("")
            ]);
            this.state.currentWord = [];
            this.state.mode = Mode.character;
          } else {
            this.state.currentWord.push(character);
          }
          break;
        case Mode.number:
          this.state.words.push([this.state.currentWord.join("")]);
          this.state.currentWord = [];
          if (isStartOfTag(character)) {
            this.addClearWordSwitchMode(character, Mode.tag);
          } else if (isStartOfEntity(character)) {
            this.addClearWordSwitchMode(character, Mode.entity);
          } else if (isNumber(character)) {
            this.addClearWordSwitchMode(character, Mode.number);
          } else if (isWhiteSpace$1(character)) {
            this.state.currentWord.push(character);
          } else {
            this.addClearWordSwitchMode(character, Mode.character);
          }
          break;
        case Mode.whitespace:
          if (isStartOfTag(character)) {
            this.addClearWordSwitchMode(character, Mode.tag);
          } else if (isStartOfEntity(character)) {
            this.addClearWordSwitchMode(character, Mode.entity);
          } else if (isNumber(character)) {
            this.addClearWordSwitchMode(character, Mode.number);
          } else if (isWhiteSpace$1(character)) {
            this.state.currentWord.push(character);
          } else {
            this.addClearWordSwitchMode(character, Mode.character);
          }
          break;
        case Mode.entity:
          if (isStartOfTag(character)) {
            this.addClearWordSwitchMode(character, Mode.tag);
          } else if (isNumber(character)) {
            this.addClearWordSwitchMode(character, Mode.number);
          } else if (isWhiteSpace$1(character)) {
            this.addClearWordSwitchMode(character, Mode.whitespace);
          } else if (isEndOfEntity(character)) {
            if (this.state.currentWord.length !== 0) {
              this.state.currentWord.push(character);
              this.state.words.push([
                this.state.currentWord.join("")
              ]);
            }
            {
              this.state.currentWord = [];
              this.state.mode = Mode.character;
            }
          } else if (isWord(character)) {
            this.state.currentWord.push(character);
          } else {
            this.addClearWordSwitchMode(character, Mode.character);
          }
          break;
      }
    }
    if (this.state.currentWord.length !== 0) {
      this.state.words.push([this.state.currentWord.join("")]);
    }
    return this.state.words;
  }
  static addClearWordSwitchMode(character, mode) {
    if (this.state.currentWord.length !== 0) {
      this.state.words.push([this.state.currentWord.join("")]);
    }
    this.state.currentWord = [character];
    this.state.mode = mode;
  }
  static findBlocks(text, blockExpressions) {
    blockExpressions.forEach((exp) => {
      const matches2 = text.matchAll(exp.exp);
      for (let match of matches2) {
        if (match.index !== void 0) {
          if (this.blockLocations.find((el) => el.wordBoundaries.starts <= (match.index || 0) && (match.index || 0) <= el.wordBoundaries.ends)) {
            throw new Error("One or more block expressions result in a text sequence that overlaps. Current expression: " + exp.exp.toString());
          }
          const target2 = exp.compareBy && [...match[0].matchAll(exp.compareBy)][0];
          if (target2 && target2.index !== void 0) {
            this.blockLocations.push({
              wordBoundaries: {
                starts: match.index,
                ends: match.index + match[0].length - 1
              },
              targetBoundaries: {
                starts: target2.index,
                ends: target2.index + target2[0].length
              }
            });
          } else {
            this.blockLocations.push({
              wordBoundaries: {
                starts: match.index,
                ends: match.index + match[0].length - 1
              }
            });
          }
        }
      }
    });
  }
}
__publicField(WordSplitter, "state", {
  mode: Mode.character,
  currentWord: [],
  words: []
});
__publicField(WordSplitter, "blockLocations");
const MatchGranuarityMaximum = 4;
class HtmlDiff {
  constructor(oldText, newText) {
    __publicField(this, "content");
    __publicField(this, "newText");
    __publicField(this, "oldText");
    __publicField(this, "specialTagDiffStack");
    __publicField(this, "newWords");
    __publicField(this, "oldWords");
    __publicField(this, "orinalWordsInNew");
    __publicField(this, "orinalWordsInOld");
    __publicField(this, "matchGranularity");
    __publicField(this, "blockExpressions");
    __publicField(this, "repeatingWordsAccuracy");
    __publicField(this, "ignoreWhiteSpaceDifferences");
    __publicField(this, "orphanMatchThreshold");
    this.content = [];
    this.newText = newText;
    this.oldText = oldText;
    this.specialTagDiffStack = [];
    this.newWords = [];
    this.orinalWordsInNew = /* @__PURE__ */ new Map();
    this.oldWords = [];
    this.orinalWordsInOld = /* @__PURE__ */ new Map();
    this.matchGranularity = 0;
    this.blockExpressions = [];
    this.repeatingWordsAccuracy = 1;
    this.ignoreWhiteSpaceDifferences = false;
    this.orphanMatchThreshold = 0;
    this.addBlockExpression = this.addBlockExpression.bind(this);
  }
  diff() {
    if (this.oldText === this.newText) {
      return this.newText;
    }
    this.splitInputsIntoWords();
    this.matchGranularity = Math.min(MatchGranuarityMaximum, this.oldWords.length, this.newWords.length);
    let operations = this.operations();
    this.orinalWordsInOld.forEach((value2, key) => {
      this.oldWords[key] = value2;
    });
    this.orinalWordsInNew.forEach((value2, key) => {
      this.newWords[key] = value2;
    });
    for (let item of operations) {
      this.performOperation(item);
    }
    return this.content.join("");
  }
  addBlockExpression(exp) {
    this.blockExpressions.push(exp);
  }
  splitInputsIntoWords() {
    const words = WordSplitter.convertHtmlToListOfWords(this.oldText, this.blockExpressions);
    words.forEach((el, idx) => {
      el[1] && this.orinalWordsInOld.set(idx, el[1]);
    });
    this.oldWords = words.map((el) => el[0]);
    this.oldText = "";
    const newWords = WordSplitter.convertHtmlToListOfWords(this.newText, this.blockExpressions);
    newWords.forEach((el, idx) => el[1] && this.orinalWordsInNew.set(idx, el[1]));
    this.newWords = newWords.map((el) => el[0]);
    this.newText = "";
  }
  performOperation(opp) {
    switch (opp.action) {
      case Action.equal:
        this.processEqualOperation(opp);
        break;
      case Action.delete:
        this.processDeleteOperation(opp, "diffdel");
        break;
      case Action.insert:
        this.processInsertOperation(opp, "diffins");
        break;
      case Action.none:
        break;
      case Action.replace:
        this.processReplaceOperation(opp);
        break;
    }
  }
  processReplaceOperation(opp) {
    this.processDeleteOperation(opp, "diffmod");
    this.processInsertOperation(opp, "diffmod");
  }
  processInsertOperation(opp, cssClass) {
    let text = this.newWords.filter((s, pos) => pos >= opp.startInNew && pos < opp.endInNew);
    this.insertTag("ins", cssClass, text);
  }
  processDeleteOperation(opp, cssClass) {
    let text = this.oldWords.filter((s, pos) => pos >= opp.startInOld && pos < opp.endInOld);
    this.insertTag("del", cssClass, text);
  }
  processEqualOperation(opp) {
    let result = this.newWords.filter((s, pos) => pos >= opp.startInNew && pos < opp.endInNew);
    this.content.push(result.join(""));
  }
  insertTag(tag, cssClass, content) {
    let length2, nonTags, position2, rendering, tags;
    rendering = "";
    position2 = 0;
    length2 = content.length;
    while (true) {
      if (position2 >= length2) {
        break;
      }
      nonTags = this.consecutiveWhere(position2, content, (x) => !isTag(x));
      position2 += nonTags.length;
      if (nonTags.length !== 0) {
        rendering += `<${tag} class="${cssClass}">${nonTags.join("")}</${tag}>`;
      }
      if (position2 >= length2) {
        break;
      }
      tags = this.consecutiveWhere(position2, content, isTag);
      position2 += tags.length;
      rendering += tags.join("");
    }
    this.content.push(rendering);
  }
  consecutiveWhere(start, content, predicate) {
    let answer, i2, index2, lastMatchingIndex, len, token;
    content = content.slice(start, +content.length + 1 || 9e9);
    lastMatchingIndex = void 0;
    for (index2 = i2 = 0, len = content.length; i2 < len; index2 = ++i2) {
      token = content[index2];
      answer = predicate(token);
      if (answer === true) {
        lastMatchingIndex = index2;
      }
      if (answer === false) {
        break;
      }
    }
    if (lastMatchingIndex != null) {
      return content.slice(0, +lastMatchingIndex + 1 || 9e9);
    }
    return [];
  }
  operations() {
    let positionInOld = 0;
    let positionInNew = 0;
    let operations = [];
    let matches2 = this.matchingBlocks();
    matches2.push(new Match(this.oldWords.length, this.newWords.length, 0));
    let matchesWithoutOrphans = this.removeOrphans(matches2);
    for (let match of matchesWithoutOrphans) {
      let matchStartsAtCurrentPositionInOld = positionInOld === match.startInOld;
      let matchStartsAtCurrentPositionInNew = positionInNew === match.startInNew;
      let action;
      if (!matchStartsAtCurrentPositionInOld && !matchStartsAtCurrentPositionInNew) {
        action = Action.replace;
      } else if (matchStartsAtCurrentPositionInOld && !matchStartsAtCurrentPositionInNew) {
        action = Action.insert;
      } else if (!matchStartsAtCurrentPositionInOld) {
        action = Action.delete;
      } else {
        action = Action.none;
      }
      if (action !== Action.none) {
        operations.push(new Operation({
          action,
          startInOld: positionInOld,
          endInOld: match.startInOld,
          startInNew: positionInNew,
          endInNew: match.startInNew
        }));
      }
      if (match.size !== 0) {
        operations.push(new Operation({
          action: Action.equal,
          startInOld: match.startInOld,
          endInOld: match.endInOld,
          startInNew: match.startInNew,
          endInNew: match.endInNew
        }));
      }
      positionInOld = match.endInOld;
      positionInNew = match.endInNew;
    }
    return operations;
  }
  *removeOrphans(matches2) {
    let prev2 = null;
    let curr = null;
    for (let next2 of matches2) {
      if (curr === null) {
        prev2 = new Match(0, 0, 0);
        curr = next2;
        continue;
      }
      if ((prev2 == null ? void 0 : prev2.endInOld) === curr.startInOld && prev2.endInNew === curr.startInNew || curr.endInOld === next2.startInOld && curr.endInNew === next2.startInNew) {
        yield curr;
        curr = next2;
        continue;
      }
      let sumLength = (t, n) => t + n.length;
      let oldDistanceInChars = this.oldWords.slice(prev2 == null ? void 0 : prev2.endInOld, next2.startInOld).reduce(sumLength, 0);
      let newDistanceInChars = this.newWords.slice(prev2 == null ? void 0 : prev2.endInNew, next2.startInNew).reduce(sumLength, 0);
      let currMatchLengthInChars = this.newWords.slice(curr.startInNew, curr.endInNew).reduce(sumLength, 0);
      if (currMatchLengthInChars > Math.max(oldDistanceInChars, newDistanceInChars) * this.orphanMatchThreshold) {
        yield curr;
      }
      prev2 = curr;
      curr = next2;
    }
    yield curr;
  }
  matchingBlocks() {
    let matchingBlocks = [];
    this.findMatchingBlocks({
      startInOld: 0,
      endInOld: this.oldWords.length,
      startInNew: 0,
      endInNew: this.newWords.length,
      matchingBlocks
    });
    return matchingBlocks;
  }
  findMatchingBlocks({ startInOld, endInOld, startInNew, endInNew, matchingBlocks }) {
    let match = this.findMatch({
      startInOld,
      endInOld,
      startInNew,
      endInNew
    });
    if (match !== null) {
      if (startInOld < match.startInOld && startInNew < match.startInNew) {
        this.findMatchingBlocks({
          startInOld,
          endInOld: match.startInOld,
          startInNew,
          endInNew: match.startInNew,
          matchingBlocks
        });
      }
      matchingBlocks.push(match);
      if (match.endInOld < endInOld && match.endInNew < endInNew) {
        this.findMatchingBlocks({
          startInOld: match.endInOld,
          endInOld,
          startInNew: match.endInNew,
          endInNew,
          matchingBlocks
        });
      }
    }
  }
  findMatch({ startInOld, endInOld, startInNew, endInNew }) {
    for (let i2 = this.matchGranularity; i2 > 0; i2--) {
      let options = MatchOptions;
      options.blockSize = i2;
      options.repeatingWordsAccuracy = this.repeatingWordsAccuracy;
      options.ignoreWhitespaceDifferences = this.ignoreWhiteSpaceDifferences;
      let finder = new MatchFinder({
        oldWords: this.oldWords,
        newWords: this.newWords,
        startInOld,
        endInOld,
        startInNew,
        endInNew,
        options
      });
      let match = finder.findMatch();
      if (match !== null) {
        return match;
      }
    }
    return null;
  }
}
const diff = (oldText, newText, { blocksExpression } = {}) => {
  const finder = new HtmlDiff(oldText, newText);
  if (blocksExpression) {
    blocksExpression.forEach((block2) => finder.addBlockExpression(block2));
  }
  return finder.diff();
};
const _hoisted_1$4 = { class: "codeGrid" };
const _hoisted_2$1 = {
  key: 0,
  class: "codeColumn"
};
const _hoisted_3$1 = { class: "diff" };
const _hoisted_4$1 = ["innerHTML"];
const _sfc_main$6 = /* @__PURE__ */ defineComponent({
  __name: "CodeGrid",
  props: {
    blocks: {},
    headerKey: {}
  },
  setup(__props) {
    const props = __props;
    const compares = reactive({
      left: void 0,
      right: void 0,
      diff: void 0
    });
    function setCompare(x) {
      if (compares.left !== void 0) {
        if (compares.right ?? (compares.right = x)) {
          compares.diff = diff(compares.left, compares.right ?? "");
        }
        return;
      }
      compares.left ?? (compares.left = x);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$4, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(props.blocks, (entry) => {
          return openBlock(), createElementBlock(Fragment, { key: entry }, [
            entry[0] !== props.headerKey ? (openBlock(), createElementBlock("div", _hoisted_2$1, [
              createBaseVNode("div", null, toDisplayString(entry[0] === "unknownError" ? "" : entry[0]), 1),
              createVNode(CodeBlock, {
                code: entry[1],
                registerHtml: ["from", "to"].includes(entry[0]) ? setCompare : () => {
                },
                codeType: entry[2],
                pretty: true
              }, null, 8, ["code", "registerHtml", "codeType"])
            ])) : createCommentVNode("", true)
          ], 64);
        }), 128)),
        createBaseVNode("div", _hoisted_3$1, [
          createBaseVNode("div", {
            innerHTML: compares.diff
          }, null, 8, _hoisted_4$1)
        ])
      ]);
    };
  }
});
const CodeGrid_vue_vue_type_style_index_0_scoped_eed68e65_lang = "";
const CodeGrid = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["__scopeId", "data-v-eed68e65"]]);
const _hoisted_1$3 = { class: "row" };
const _hoisted_2 = { class: "column reverse" };
const _hoisted_3 = { style: { minWidth: "contents" } };
const _hoisted_4 = { cols: "" };
const _hoisted_5 = { key: 0 };
const _sfc_main$5 = /* @__PURE__ */ defineComponent({
  __name: "ResolvedError",
  props: {
    errKey: {},
    errValue: {}
  },
  setup(__props) {
    const props = __props;
    function gotoLine(fileName, line) {
      emitters == null ? void 0 : emitters.gotoFileLine(fileName, line);
    }
    const counts = computed(() => {
      const ret = Object.values(props.errValue.sources).map((x) => Object.values(x)).flat().map((x) => Object.values(x)).flat().length / props.errKey.length;
      return ret;
    });
    const summary = computed(() => {
      try {
        const files = Object.entries(props.errValue.sources)[0][1];
        const raw = Object.entries(files)[0][1][0].raw;
        return raw[raw.length - 1];
      } catch (_) {
        return "";
      }
    });
    function unknownPartsToBlock(parts2) {
      if (parts2[0] === "") {
        parts2.shift();
      }
      if (parts2.length === 2) {
        return [[parts2[1], parts2[0]]];
      }
      const evens = parts2.filter((_, i2) => i2 % 2 === 0);
      const blocks = evens.map((k, i2) => {
        const entry = [k, parts2[i2 * 2 + 1]];
        return entry;
      });
      return blocks;
    }
    function problemClick(e) {
      console.log(e);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$3, [
        createVNode(QExpansionItem, {
          label: `cnt: ${counts.value} - ${summary.value}`
        }, {
          default: withCtx(() => [
            createBaseVNode("div", _hoisted_2, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(props.errKey, (parsed, idx) => {
                return openBlock(), createElementBlock("div", {
                  class: "row",
                  onClick: problemClick,
                  key: idx
                }, [
                  createBaseVNode("div", _hoisted_3, toDisplayString(parsed.value.type === "unknownError" ? " " : parsed.value.type), 1),
                  createBaseVNode("div", _hoisted_4, [
                    ["notAssignable", "excessProperty"].includes(parsed.value.type) ? (openBlock(), createBlock(CodeGrid, {
                      key: 0,
                      blocks: Object.entries(parsed.value),
                      "header-key": "type"
                    }, null, 8, ["blocks"])) : createCommentVNode("", true),
                    parsed.value.type === "unknownError" ? (openBlock(), createBlock(CodeGrid, {
                      key: 1,
                      blocks: unknownPartsToBlock(parsed.value.parts),
                      "header-key": ""
                    }, null, 8, ["blocks"])) : createCommentVNode("", true)
                  ])
                ]);
              }), 128))
            ]),
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.errValue.sources, (files, _plugin) => {
              return openBlock(), createElementBlock(Fragment, null, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(files, (items, file) => {
                  return openBlock(), createBlock(QList, null, {
                    default: withCtx(() => [
                      createVNode(QItem, null, {
                        default: withCtx(() => [
                          createVNode(QExpansionItem, {
                            dense: "",
                            "expand-icon-toggle": "",
                            label: `${file} (${items.length / props.errKey.length})`
                          }, {
                            header: withCtx(() => [
                              createVNode(QToolbar, { dense: "" }, {
                                default: withCtx(() => [
                                  createVNode(QBtn, {
                                    dense: "",
                                    icon: "map",
                                    size: "xs",
                                    onClick: ($event) => gotoLine(file, 1)
                                  }, null, 8, ["onClick"]),
                                  createVNode(QSpace),
                                  createBaseVNode("span", null, toDisplayString(file) + " (" + toDisplayString(items.length / props.errKey.length) + ") ", 1)
                                ]),
                                _: 2
                              }, 1024)
                            ]),
                            default: withCtx(() => [
                              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(uniqObjects)(
                                ([x]) => JSON.stringify(x),
                                items.map((x) => [x.span, x.src ?? ""])
                              ), ([span, src]) => {
                                return openBlock(), createBlock(QList, null, {
                                  default: withCtx(() => [
                                    span.start.line == span.end.line ? (openBlock(), createBlock(QItem, { key: 0 }, {
                                      default: withCtx(() => [
                                        createVNode(QToolbar, { dense: "" }, {
                                          default: withCtx(() => [
                                            createVNode(QBtn, {
                                              dense: "",
                                              icon: "map",
                                              size: "xs",
                                              onClick: ($event) => gotoLine(file, span.start.line)
                                            }, null, 8, ["onClick"]),
                                            createTextVNode(" Line: " + toDisplayString(span.start.line) + " char: " + toDisplayString(span.start.char) + " ", 1),
                                            span.start.char !== span.end.char ? (openBlock(), createElementBlock("span", _hoisted_5, " -> " + toDisplayString(span.end.char), 1)) : createCommentVNode("", true),
                                            createVNode(CodeBlock, {
                                              code: src,
                                              "register-html": () => {
                                              }
                                            }, null, 8, ["code"])
                                          ]),
                                          _: 2
                                        }, 1024)
                                      ]),
                                      _: 2
                                    }, 1024)) : (openBlock(), createBlock(QItem, { key: 1 }, {
                                      default: withCtx(() => [
                                        createTextVNode(" Line: " + toDisplayString(span.start.line) + " -> " + toDisplayString(span.end.line) + " ", 1),
                                        createVNode(CodeBlock, {
                                          code: src,
                                          "register-html": () => {
                                          }
                                        }, null, 8, ["code"])
                                      ]),
                                      _: 2
                                    }, 1024))
                                  ]),
                                  _: 2
                                }, 1024);
                              }), 256))
                            ]),
                            _: 2
                          }, 1032, ["label"])
                        ]),
                        _: 2
                      }, 1024)
                    ]),
                    _: 2
                  }, 1024);
                }), 256))
              ], 64);
            }), 256))
          ]),
          _: 1
        }, 8, ["label"])
      ]);
    };
  }
});
const ResolvedError_vue_vue_type_style_index_0_scoped_51b36f7c_lang = "";
const ResolvedError = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["__scopeId", "data-v-51b36f7c"]]);
const _hoisted_1$2 = { class: "files" };
const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  __name: "ResolvedErrors",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("div", _hoisted_1$2, [
          createVNode(QList, { dense: "" }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(resolvedErrors), (err, _idx) => {
                return openBlock(), createElementBlock("div", { key: err }, [
                  createVNode(ResolvedError, {
                    errKey: err[0],
                    errValue: err[1]
                  }, null, 8, ["errKey", "errValue"])
                ]);
              }), 128))
            ]),
            _: 1
          })
        ])
      ]);
    };
  }
});
const ResolvedErrors_vue_vue_type_style_index_0_scoped_a52a4293_lang = "";
const ResolvedErrors = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["__scopeId", "data-v-a52a4293"]]);
function getDefaults() {
  return {
    async: false,
    baseUrl: null,
    breaks: false,
    extensions: null,
    gfm: true,
    headerIds: true,
    headerPrefix: "",
    highlight: null,
    hooks: null,
    langPrefix: "language-",
    mangle: true,
    pedantic: false,
    renderer: null,
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartypants: false,
    tokenizer: null,
    walkTokens: null,
    xhtml: false
  };
}
let defaults = getDefaults();
function changeDefaults(newDefaults) {
  defaults = newDefaults;
}
const escapeTest = /[&<>"']/;
const escapeReplace = new RegExp(escapeTest.source, "g");
const escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
const escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
const escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
const getEscapeReplacement = (ch) => escapeReplacements[ch];
function escape(html, encode2) {
  if (encode2) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else {
    if (escapeTestNoEncode.test(html)) {
      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
    }
  }
  return html;
}
const unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
function unescape(html) {
  return html.replace(unescapeTest, (_, n) => {
    n = n.toLowerCase();
    if (n === "colon")
      return ":";
    if (n.charAt(0) === "#") {
      return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
    }
    return "";
  });
}
const caret = /(^|[^\[])\^/g;
function edit(regex, opt) {
  regex = typeof regex === "string" ? regex : regex.source;
  opt = opt || "";
  const obj = {
    replace: (name, val) => {
      val = val.source || val;
      val = val.replace(caret, "$1");
      regex = regex.replace(name, val);
      return obj;
    },
    getRegex: () => {
      return new RegExp(regex, opt);
    }
  };
  return obj;
}
const nonWordAndColonTest = /[^\w:]/g;
const originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
function cleanUrl(sanitize, base, href2) {
  if (sanitize) {
    let prot;
    try {
      prot = decodeURIComponent(unescape(href2)).replace(nonWordAndColonTest, "").toLowerCase();
    } catch (e) {
      return null;
    }
    if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) {
      return null;
    }
  }
  if (base && !originIndependentUrl.test(href2)) {
    href2 = resolveUrl(base, href2);
  }
  try {
    href2 = encodeURI(href2).replace(/%25/g, "%");
  } catch (e) {
    return null;
  }
  return href2;
}
const baseUrls = {};
const justDomain = /^[^:]+:\/*[^/]*$/;
const protocol = /^([^:]+:)[\s\S]*$/;
const domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
function resolveUrl(base, href2) {
  if (!baseUrls[" " + base]) {
    if (justDomain.test(base)) {
      baseUrls[" " + base] = base + "/";
    } else {
      baseUrls[" " + base] = rtrim(base, "/", true);
    }
  }
  base = baseUrls[" " + base];
  const relativeBase = base.indexOf(":") === -1;
  if (href2.substring(0, 2) === "//") {
    if (relativeBase) {
      return href2;
    }
    return base.replace(protocol, "$1") + href2;
  } else if (href2.charAt(0) === "/") {
    if (relativeBase) {
      return href2;
    }
    return base.replace(domain, "$1") + href2;
  } else {
    return base + href2;
  }
}
const noopTest = { exec: function noopTest2() {
} };
function splitCells(tableRow, count) {
  const row = tableRow.replace(/\|/g, (match, offset, str) => {
    let escaped = false, curr = offset;
    while (--curr >= 0 && str[curr] === "\\")
      escaped = !escaped;
    if (escaped) {
      return "|";
    } else {
      return " |";
    }
  }), cells = row.split(/ \|/);
  let i2 = 0;
  if (!cells[0].trim()) {
    cells.shift();
  }
  if (cells.length > 0 && !cells[cells.length - 1].trim()) {
    cells.pop();
  }
  if (cells.length > count) {
    cells.splice(count);
  } else {
    while (cells.length < count)
      cells.push("");
  }
  for (; i2 < cells.length; i2++) {
    cells[i2] = cells[i2].trim().replace(/\\\|/g, "|");
  }
  return cells;
}
function rtrim(str, c, invert) {
  const l = str.length;
  if (l === 0) {
    return "";
  }
  let suffLen = 0;
  while (suffLen < l) {
    const currChar = str.charAt(l - suffLen - 1);
    if (currChar === c && !invert) {
      suffLen++;
    } else if (currChar !== c && invert) {
      suffLen++;
    } else {
      break;
    }
  }
  return str.slice(0, l - suffLen);
}
function findClosingBracket(str, b) {
  if (str.indexOf(b[1]) === -1) {
    return -1;
  }
  const l = str.length;
  let level = 0, i2 = 0;
  for (; i2 < l; i2++) {
    if (str[i2] === "\\") {
      i2++;
    } else if (str[i2] === b[0]) {
      level++;
    } else if (str[i2] === b[1]) {
      level--;
      if (level < 0) {
        return i2;
      }
    }
  }
  return -1;
}
function checkSanitizeDeprecation(opt) {
  if (opt && opt.sanitize && !opt.silent) {
    console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
  }
}
function repeatString$1(pattern, count) {
  if (count < 1) {
    return "";
  }
  let result = "";
  while (count > 1) {
    if (count & 1) {
      result += pattern;
    }
    count >>= 1;
    pattern += pattern;
  }
  return result + pattern;
}
function outputLink(cap, link, raw, lexer) {
  const href2 = link.href;
  const title = link.title ? escape(link.title) : null;
  const text = cap[1].replace(/\\([\[\]])/g, "$1");
  if (cap[0].charAt(0) !== "!") {
    lexer.state.inLink = true;
    const token = {
      type: "link",
      raw,
      href: href2,
      title,
      text,
      tokens: lexer.inlineTokens(text)
    };
    lexer.state.inLink = false;
    return token;
  }
  return {
    type: "image",
    raw,
    href: href2,
    title,
    text: escape(text)
  };
}
function indentCodeCompensation(raw, text) {
  const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
  if (matchIndentToCode === null) {
    return text;
  }
  const indentToCode = matchIndentToCode[1];
  return text.split("\n").map((node) => {
    const matchIndentInNode = node.match(/^\s+/);
    if (matchIndentInNode === null) {
      return node;
    }
    const [indentInNode] = matchIndentInNode;
    if (indentInNode.length >= indentToCode.length) {
      return node.slice(indentToCode.length);
    }
    return node;
  }).join("\n");
}
class Tokenizer {
  constructor(options) {
    this.options = options || defaults;
  }
  space(src) {
    const cap = this.rules.block.newline.exec(src);
    if (cap && cap[0].length > 0) {
      return {
        type: "space",
        raw: cap[0]
      };
    }
  }
  code(src) {
    const cap = this.rules.block.code.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ {1,4}/gm, "");
      return {
        type: "code",
        raw: cap[0],
        codeBlockStyle: "indented",
        text: !this.options.pedantic ? rtrim(text, "\n") : text
      };
    }
  }
  fences(src) {
    const cap = this.rules.block.fences.exec(src);
    if (cap) {
      const raw = cap[0];
      const text = indentCodeCompensation(raw, cap[3] || "");
      return {
        type: "code",
        raw,
        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, "$1") : cap[2],
        text
      };
    }
  }
  heading(src) {
    const cap = this.rules.block.heading.exec(src);
    if (cap) {
      let text = cap[2].trim();
      if (/#$/.test(text)) {
        const trimmed = rtrim(text, "#");
        if (this.options.pedantic) {
          text = trimmed.trim();
        } else if (!trimmed || / $/.test(trimmed)) {
          text = trimmed.trim();
        }
      }
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[1].length,
        text,
        tokens: this.lexer.inline(text)
      };
    }
  }
  hr(src) {
    const cap = this.rules.block.hr.exec(src);
    if (cap) {
      return {
        type: "hr",
        raw: cap[0]
      };
    }
  }
  blockquote(src) {
    const cap = this.rules.block.blockquote.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ *>[ \t]?/gm, "");
      const top = this.lexer.state.top;
      this.lexer.state.top = true;
      const tokens = this.lexer.blockTokens(text);
      this.lexer.state.top = top;
      return {
        type: "blockquote",
        raw: cap[0],
        tokens,
        text
      };
    }
  }
  list(src) {
    let cap = this.rules.block.list.exec(src);
    if (cap) {
      let raw, istask, ischecked, indent, i2, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;
      let bull = cap[1].trim();
      const isordered = bull.length > 1;
      const list = {
        type: "list",
        raw: "",
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : "",
        loose: false,
        items: []
      };
      bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
      if (this.options.pedantic) {
        bull = isordered ? bull : "[*+-]";
      }
      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[	 ][^\\n]*)?(?:\\n|$))`);
      while (src) {
        endEarly = false;
        if (!(cap = itemRegex.exec(src))) {
          break;
        }
        if (this.rules.block.hr.test(src)) {
          break;
        }
        raw = cap[0];
        src = src.substring(raw.length);
        line = cap[2].split("\n", 1)[0].replace(/^\t+/, (t) => " ".repeat(3 * t.length));
        nextLine = src.split("\n", 1)[0];
        if (this.options.pedantic) {
          indent = 2;
          itemContents = line.trimLeft();
        } else {
          indent = cap[2].search(/[^ ]/);
          indent = indent > 4 ? 1 : indent;
          itemContents = line.slice(indent);
          indent += cap[1].length;
        }
        blankLine = false;
        if (!line && /^ *$/.test(nextLine)) {
          raw += nextLine + "\n";
          src = src.substring(nextLine.length + 1);
          endEarly = true;
        }
        if (!endEarly) {
          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`);
          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`);
          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);
          while (src) {
            rawLine = src.split("\n", 1)[0];
            nextLine = rawLine;
            if (this.options.pedantic) {
              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
            }
            if (fencesBeginRegex.test(nextLine)) {
              break;
            }
            if (headingBeginRegex.test(nextLine)) {
              break;
            }
            if (nextBulletRegex.test(nextLine)) {
              break;
            }
            if (hrRegex.test(src)) {
              break;
            }
            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {
              itemContents += "\n" + nextLine.slice(indent);
            } else {
              if (blankLine) {
                break;
              }
              if (line.search(/[^ ]/) >= 4) {
                break;
              }
              if (fencesBeginRegex.test(line)) {
                break;
              }
              if (headingBeginRegex.test(line)) {
                break;
              }
              if (hrRegex.test(line)) {
                break;
              }
              itemContents += "\n" + nextLine;
            }
            if (!blankLine && !nextLine.trim()) {
              blankLine = true;
            }
            raw += rawLine + "\n";
            src = src.substring(rawLine.length + 1);
            line = nextLine.slice(indent);
          }
        }
        if (!list.loose) {
          if (endsWithBlankLine) {
            list.loose = true;
          } else if (/\n *\n *$/.test(raw)) {
            endsWithBlankLine = true;
          }
        }
        if (this.options.gfm) {
          istask = /^\[[ xX]\] /.exec(itemContents);
          if (istask) {
            ischecked = istask[0] !== "[ ] ";
            itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
          }
        }
        list.items.push({
          type: "list_item",
          raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents
        });
        list.raw += raw;
      }
      list.items[list.items.length - 1].raw = raw.trimRight();
      list.items[list.items.length - 1].text = itemContents.trimRight();
      list.raw = list.raw.trimRight();
      const l = list.items.length;
      for (i2 = 0; i2 < l; i2++) {
        this.lexer.state.top = false;
        list.items[i2].tokens = this.lexer.blockTokens(list.items[i2].text, []);
        if (!list.loose) {
          const spacers = list.items[i2].tokens.filter((t) => t.type === "space");
          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t) => /\n.*\n/.test(t.raw));
          list.loose = hasMultipleLineBreaks;
        }
      }
      if (list.loose) {
        for (i2 = 0; i2 < l; i2++) {
          list.items[i2].loose = true;
        }
      }
      return list;
    }
  }
  html(src) {
    const cap = this.rules.block.html.exec(src);
    if (cap) {
      const token = {
        type: "html",
        raw: cap[0],
        pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
        text: cap[0]
      };
      if (this.options.sanitize) {
        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);
        token.type = "paragraph";
        token.text = text;
        token.tokens = this.lexer.inline(text);
      }
      return token;
    }
  }
  def(src) {
    const cap = this.rules.block.def.exec(src);
    if (cap) {
      const tag = cap[1].toLowerCase().replace(/\s+/g, " ");
      const href2 = cap[2] ? cap[2].replace(/^<(.*)>$/, "$1").replace(this.rules.inline._escapes, "$1") : "";
      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, "$1") : cap[3];
      return {
        type: "def",
        tag,
        raw: cap[0],
        href: href2,
        title
      };
    }
  }
  table(src) {
    const cap = this.rules.block.table.exec(src);
    if (cap) {
      const item = {
        type: "table",
        header: splitCells(cap[1]).map((c) => {
          return { text: c };
        }),
        align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : []
      };
      if (item.header.length === item.align.length) {
        item.raw = cap[0];
        let l = item.align.length;
        let i2, j, k, row;
        for (i2 = 0; i2 < l; i2++) {
          if (/^ *-+: *$/.test(item.align[i2])) {
            item.align[i2] = "right";
          } else if (/^ *:-+: *$/.test(item.align[i2])) {
            item.align[i2] = "center";
          } else if (/^ *:-+ *$/.test(item.align[i2])) {
            item.align[i2] = "left";
          } else {
            item.align[i2] = null;
          }
        }
        l = item.rows.length;
        for (i2 = 0; i2 < l; i2++) {
          item.rows[i2] = splitCells(item.rows[i2], item.header.length).map((c) => {
            return { text: c };
          });
        }
        l = item.header.length;
        for (j = 0; j < l; j++) {
          item.header[j].tokens = this.lexer.inline(item.header[j].text);
        }
        l = item.rows.length;
        for (j = 0; j < l; j++) {
          row = item.rows[j];
          for (k = 0; k < row.length; k++) {
            row[k].tokens = this.lexer.inline(row[k].text);
          }
        }
        return item;
      }
    }
  }
  lheading(src) {
    const cap = this.rules.block.lheading.exec(src);
    if (cap) {
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[2].charAt(0) === "=" ? 1 : 2,
        text: cap[1],
        tokens: this.lexer.inline(cap[1])
      };
    }
  }
  paragraph(src) {
    const cap = this.rules.block.paragraph.exec(src);
    if (cap) {
      const text = cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1];
      return {
        type: "paragraph",
        raw: cap[0],
        text,
        tokens: this.lexer.inline(text)
      };
    }
  }
  text(src) {
    const cap = this.rules.block.text.exec(src);
    if (cap) {
      return {
        type: "text",
        raw: cap[0],
        text: cap[0],
        tokens: this.lexer.inline(cap[0])
      };
    }
  }
  escape(src) {
    const cap = this.rules.inline.escape.exec(src);
    if (cap) {
      return {
        type: "escape",
        raw: cap[0],
        text: escape(cap[1])
      };
    }
  }
  tag(src) {
    const cap = this.rules.inline.tag.exec(src);
    if (cap) {
      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
        this.lexer.state.inLink = true;
      } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
        this.lexer.state.inLink = false;
      }
      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = true;
      } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = false;
      }
      return {
        type: this.options.sanitize ? "text" : "html",
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]
      };
    }
  }
  link(src) {
    const cap = this.rules.inline.link.exec(src);
    if (cap) {
      const trimmedUrl = cap[2].trim();
      if (!this.options.pedantic && /^</.test(trimmedUrl)) {
        if (!/>$/.test(trimmedUrl)) {
          return;
        }
        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
          return;
        }
      } else {
        const lastParenIndex = findClosingBracket(cap[2], "()");
        if (lastParenIndex > -1) {
          const start = cap[0].indexOf("!") === 0 ? 5 : 4;
          const linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = "";
        }
      }
      let href2 = cap[2];
      let title = "";
      if (this.options.pedantic) {
        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href2);
        if (link) {
          href2 = link[1];
          title = link[3];
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : "";
      }
      href2 = href2.trim();
      if (/^</.test(href2)) {
        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
          href2 = href2.slice(1);
        } else {
          href2 = href2.slice(1, -1);
        }
      }
      return outputLink(cap, {
        href: href2 ? href2.replace(this.rules.inline._escapes, "$1") : href2,
        title: title ? title.replace(this.rules.inline._escapes, "$1") : title
      }, cap[0], this.lexer);
    }
  }
  reflink(src, links) {
    let cap;
    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
      let link = (cap[2] || cap[1]).replace(/\s+/g, " ");
      link = links[link.toLowerCase()];
      if (!link) {
        const text = cap[0].charAt(0);
        return {
          type: "text",
          raw: text,
          text
        };
      }
      return outputLink(cap, link, cap[0], this.lexer);
    }
  }
  emStrong(src, maskedSrc, prevChar = "") {
    let match = this.rules.inline.emStrong.lDelim.exec(src);
    if (!match)
      return;
    if (match[3] && prevChar.match(/[\p{L}\p{N}]/u))
      return;
    const nextChar = match[1] || match[2] || "";
    if (!nextChar || nextChar && (prevChar === "" || this.rules.inline.punctuation.exec(prevChar))) {
      const lLength = match[0].length - 1;
      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
      const endReg = match[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      endReg.lastIndex = 0;
      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
      while ((match = endReg.exec(maskedSrc)) != null) {
        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
        if (!rDelim)
          continue;
        rLength = rDelim.length;
        if (match[3] || match[4]) {
          delimTotal += rLength;
          continue;
        } else if (match[5] || match[6]) {
          if (lLength % 3 && !((lLength + rLength) % 3)) {
            midDelimTotal += rLength;
            continue;
          }
        }
        delimTotal -= rLength;
        if (delimTotal > 0)
          continue;
        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);
        if (Math.min(lLength, rLength) % 2) {
          const text2 = raw.slice(1, -1);
          return {
            type: "em",
            raw,
            text: text2,
            tokens: this.lexer.inlineTokens(text2)
          };
        }
        const text = raw.slice(2, -2);
        return {
          type: "strong",
          raw,
          text,
          tokens: this.lexer.inlineTokens(text)
        };
      }
    }
  }
  codespan(src) {
    const cap = this.rules.inline.code.exec(src);
    if (cap) {
      let text = cap[2].replace(/\n/g, " ");
      const hasNonSpaceChars = /[^ ]/.test(text);
      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
        text = text.substring(1, text.length - 1);
      }
      text = escape(text, true);
      return {
        type: "codespan",
        raw: cap[0],
        text
      };
    }
  }
  br(src) {
    const cap = this.rules.inline.br.exec(src);
    if (cap) {
      return {
        type: "br",
        raw: cap[0]
      };
    }
  }
  del(src) {
    const cap = this.rules.inline.del.exec(src);
    if (cap) {
      return {
        type: "del",
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2])
      };
    }
  }
  autolink(src, mangle2) {
    const cap = this.rules.inline.autolink.exec(src);
    if (cap) {
      let text, href2;
      if (cap[2] === "@") {
        text = escape(this.options.mangle ? mangle2(cap[1]) : cap[1]);
        href2 = "mailto:" + text;
      } else {
        text = escape(cap[1]);
        href2 = text;
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href: href2,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  url(src, mangle2) {
    let cap;
    if (cap = this.rules.inline.url.exec(src)) {
      let text, href2;
      if (cap[2] === "@") {
        text = escape(this.options.mangle ? mangle2(cap[0]) : cap[0]);
        href2 = "mailto:" + text;
      } else {
        let prevCapZero;
        do {
          prevCapZero = cap[0];
          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);
        text = escape(cap[0]);
        if (cap[1] === "www.") {
          href2 = "http://" + cap[0];
        } else {
          href2 = cap[0];
        }
      }
      return {
        type: "link",
        raw: cap[0],
        text,
        href: href2,
        tokens: [
          {
            type: "text",
            raw: text,
            text
          }
        ]
      };
    }
  }
  inlineText(src, smartypants2) {
    const cap = this.rules.inline.text.exec(src);
    if (cap) {
      let text;
      if (this.lexer.state.inRawBlock) {
        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];
      } else {
        text = escape(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);
      }
      return {
        type: "text",
        raw: cap[0],
        text
      };
    }
  }
}
const block = {
  newline: /^(?: *(?:\n|$))+/,
  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
  html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
  def: /^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
  table: noopTest,
  lheading: /^((?:.|\n(?!\n))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  // regex template, placeholders will be replaced according to different paragraph
  // interruption rules of commonmark and the original markdown spec:
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
block.normal = { ...block };
block.gfm = {
  ...block.normal,
  table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
  // Cells
};
block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.gfm.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", block.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.pedantic = {
  ...block.normal,
  html: edit(
    `^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`
  ).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  // fences not supported
  lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
};
const inline = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noopTest,
  tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
  // CDATA section
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(ref)\]/,
  nolink: /^!?\[(ref)\](?:\[\])?/,
  reflinkSearch: "reflink|nolink(?!\\()",
  emStrong: {
    lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a
    rDelimAst: /^(?:[^_*\\]|\\.)*?\_\_(?:[^_*\\]|\\.)*?\*(?:[^_*\\]|\\.)*?(?=\_\_)|(?:[^*\\]|\\.)+(?=[^*])|[punct_](\*+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|(?:[^punct*_\s\\]|\\.)(\*+)(?=[^punct*_\s])/,
    rDelimUnd: /^(?:[^_*\\]|\\.)*?\*\*(?:[^_*\\]|\\.)*?\_(?:[^_*\\]|\\.)*?(?=\*\*)|(?:[^_\\]|\\.)+(?=[^_])|[punct*](\_+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
    // ^- Not allowed for _
  },
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noopTest,
  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
  punctuation: /^([\spunctuation])/
};
inline._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();
inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
inline.escapedEmSt = /(?:^|[^\\])(?:\\\\)*\\[*_]/g;
inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "g").replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "g").replace(/punct/g, inline._punctuation).getRegex();
inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
inline.reflink = edit(inline.reflink).replace("label", inline._label).replace("ref", block._label).getRegex();
inline.nolink = edit(inline.nolink).replace("ref", block._label).getRegex();
inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
inline.normal = { ...inline };
inline.pedantic = {
  ...inline.normal,
  strong: {
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
  },
  em: {
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
  },
  link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
};
inline.gfm = {
  ...inline.normal,
  escape: edit(inline.escape).replace("])", "~|])").getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
};
inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
inline.breaks = {
  ...inline.gfm,
  br: edit(inline.br).replace("{2,}", "*").getRegex(),
  text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
};
function smartypants(text) {
  return text.replace(/---/g, "—").replace(/--/g, "–").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1‘").replace(/'/g, "’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1“").replace(/"/g, "”").replace(/\.{3}/g, "…");
}
function mangle(text) {
  let out = "", i2, ch;
  const l = text.length;
  for (i2 = 0; i2 < l; i2++) {
    ch = text.charCodeAt(i2);
    if (Math.random() > 0.5) {
      ch = "x" + ch.toString(16);
    }
    out += "&#" + ch + ";";
  }
  return out;
}
class Lexer {
  constructor(options) {
    this.tokens = [];
    this.tokens.links = /* @__PURE__ */ Object.create(null);
    this.options = options || defaults;
    this.options.tokenizer = this.options.tokenizer || new Tokenizer();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = {
      inLink: false,
      inRawBlock: false,
      top: true
    };
    const rules = {
      block: block.normal,
      inline: inline.normal
    };
    if (this.options.pedantic) {
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
    } else if (this.options.gfm) {
      rules.block = block.gfm;
      if (this.options.breaks) {
        rules.inline = inline.breaks;
      } else {
        rules.inline = inline.gfm;
      }
    }
    this.tokenizer.rules = rules;
  }
  /**
   * Expose Rules
   */
  static get rules() {
    return {
      block,
      inline
    };
  }
  /**
   * Static Lex Method
   */
  static lex(src, options) {
    const lexer = new Lexer(options);
    return lexer.lex(src);
  }
  /**
   * Static Lex Inline Method
   */
  static lexInline(src, options) {
    const lexer = new Lexer(options);
    return lexer.inlineTokens(src);
  }
  /**
   * Preprocessing
   */
  lex(src) {
    src = src.replace(/\r\n|\r/g, "\n");
    this.blockTokens(src, this.tokens);
    let next2;
    while (next2 = this.inlineQueue.shift()) {
      this.inlineTokens(next2.src, next2.tokens);
    }
    return this.tokens;
  }
  /**
   * Lexing
   */
  blockTokens(src, tokens = []) {
    if (this.options.pedantic) {
      src = src.replace(/\t/g, "    ").replace(/^ +$/gm, "");
    } else {
      src = src.replace(/^( *)(\t+)/gm, (_, leading, tabs) => {
        return leading + "    ".repeat(tabs.length);
      });
    }
    let token, lastToken, cutSrc, lastParagraphClipped;
    while (src) {
      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.space(src)) {
        src = src.substring(token.raw.length);
        if (token.raw.length === 1 && tokens.length > 0) {
          tokens[tokens.length - 1].raw += "\n";
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.code(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.fences(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.heading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.hr(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.blockquote(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.list(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.html(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.def(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.raw;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else if (!this.tokens.links[token.tag]) {
          this.tokens.links[token.tag] = {
            href: token.href,
            title: token.title
          };
        }
        continue;
      }
      if (token = this.tokenizer.table(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.lheading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startBlock) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startBlock.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
        lastToken = tokens[tokens.length - 1];
        if (lastParagraphClipped && lastToken.type === "paragraph") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        lastParagraphClipped = cutSrc.length !== src.length;
        src = src.substring(token.raw.length);
        continue;
      }
      if (token = this.tokenizer.text(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    this.state.top = true;
    return tokens;
  }
  inline(src, tokens = []) {
    this.inlineQueue.push({ src, tokens });
    return tokens;
  }
  /**
   * Lexing/Compiling
   */
  inlineTokens(src, tokens = []) {
    let token, lastToken, cutSrc;
    let maskedSrc = src;
    let match;
    let keepPrevChar, prevChar;
    if (this.tokens.links) {
      const links = Object.keys(this.tokens.links);
      if (links.length > 0) {
        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
          if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) {
            maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString$1("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
          }
        }
      }
    }
    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString$1("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    }
    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;
    }
    while (src) {
      if (!keepPrevChar) {
        prevChar = "";
      }
      keepPrevChar = false;
      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.escape(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.tag(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.link(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.codespan(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.br(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.del(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.autolink(src, mangle)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startInline) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startInline.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
        src = src.substring(token.raw.length);
        if (token.raw.slice(-1) !== "_") {
          prevChar = token.raw.slice(-1);
        }
        keepPrevChar = true;
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    return tokens;
  }
}
class Renderer {
  constructor(options) {
    this.options = options || defaults;
  }
  code(code, infostring, escaped) {
    const lang = (infostring || "").match(/\S*/)[0];
    if (this.options.highlight) {
      const out = this.options.highlight(code, lang);
      if (out != null && out !== code) {
        escaped = true;
        code = out;
      }
    }
    code = code.replace(/\n$/, "") + "\n";
    if (!lang) {
      return "<pre><code>" + (escaped ? code : escape(code, true)) + "</code></pre>\n";
    }
    return '<pre><code class="' + this.options.langPrefix + escape(lang) + '">' + (escaped ? code : escape(code, true)) + "</code></pre>\n";
  }
  /**
   * @param {string} quote
   */
  blockquote(quote2) {
    return `<blockquote>
${quote2}</blockquote>
`;
  }
  html(html) {
    return html;
  }
  /**
   * @param {string} text
   * @param {string} level
   * @param {string} raw
   * @param {any} slugger
   */
  heading(text, level, raw, slugger) {
    if (this.options.headerIds) {
      const id = this.options.headerPrefix + slugger.slug(raw);
      return `<h${level} id="${id}">${text}</h${level}>
`;
    }
    return `<h${level}>${text}</h${level}>
`;
  }
  hr() {
    return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
  }
  list(body, ordered, start) {
    const type2 = ordered ? "ol" : "ul", startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
    return "<" + type2 + startatt + ">\n" + body + "</" + type2 + ">\n";
  }
  /**
   * @param {string} text
   */
  listitem(text) {
    return `<li>${text}</li>
`;
  }
  checkbox(checked) {
    return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
  }
  /**
   * @param {string} text
   */
  paragraph(text) {
    return `<p>${text}</p>
`;
  }
  /**
   * @param {string} header
   * @param {string} body
   */
  table(header, body) {
    if (body)
      body = `<tbody>${body}</tbody>`;
    return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
  }
  /**
   * @param {string} content
   */
  tablerow(content) {
    return `<tr>
${content}</tr>
`;
  }
  tablecell(content, flags) {
    const type2 = flags.header ? "th" : "td";
    const tag = flags.align ? `<${type2} align="${flags.align}">` : `<${type2}>`;
    return tag + content + `</${type2}>
`;
  }
  /**
   * span level renderer
   * @param {string} text
   */
  strong(text) {
    return `<strong>${text}</strong>`;
  }
  /**
   * @param {string} text
   */
  em(text) {
    return `<em>${text}</em>`;
  }
  /**
   * @param {string} text
   */
  codespan(text) {
    return `<code>${text}</code>`;
  }
  br() {
    return this.options.xhtml ? "<br/>" : "<br>";
  }
  /**
   * @param {string} text
   */
  del(text) {
    return `<del>${text}</del>`;
  }
  /**
   * @param {string} href
   * @param {string} title
   * @param {string} text
   */
  link(href2, title, text) {
    href2 = cleanUrl(this.options.sanitize, this.options.baseUrl, href2);
    if (href2 === null) {
      return text;
    }
    let out = '<a href="' + href2 + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += ">" + text + "</a>";
    return out;
  }
  /**
   * @param {string} href
   * @param {string} title
   * @param {string} text
   */
  image(href2, title, text) {
    href2 = cleanUrl(this.options.sanitize, this.options.baseUrl, href2);
    if (href2 === null) {
      return text;
    }
    let out = `<img src="${href2}" alt="${text}"`;
    if (title) {
      out += ` title="${title}"`;
    }
    out += this.options.xhtml ? "/>" : ">";
    return out;
  }
  text(text) {
    return text;
  }
}
class TextRenderer {
  // no need for block level renderers
  strong(text) {
    return text;
  }
  em(text) {
    return text;
  }
  codespan(text) {
    return text;
  }
  del(text) {
    return text;
  }
  html(text) {
    return text;
  }
  text(text) {
    return text;
  }
  link(href2, title, text) {
    return "" + text;
  }
  image(href2, title, text) {
    return "" + text;
  }
  br() {
    return "";
  }
}
class Slugger {
  constructor() {
    this.seen = {};
  }
  /**
   * @param {string} value
   */
  serialize(value2) {
    return value2.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
  }
  /**
   * Finds the next safe (unique) slug to use
   * @param {string} originalSlug
   * @param {boolean} isDryRun
   */
  getNextSafeSlug(originalSlug, isDryRun) {
    let slug = originalSlug;
    let occurenceAccumulator = 0;
    if (this.seen.hasOwnProperty(slug)) {
      occurenceAccumulator = this.seen[originalSlug];
      do {
        occurenceAccumulator++;
        slug = originalSlug + "-" + occurenceAccumulator;
      } while (this.seen.hasOwnProperty(slug));
    }
    if (!isDryRun) {
      this.seen[originalSlug] = occurenceAccumulator;
      this.seen[slug] = 0;
    }
    return slug;
  }
  /**
   * Convert string to unique id
   * @param {object} [options]
   * @param {boolean} [options.dryrun] Generates the next unique slug without
   * updating the internal accumulator.
   */
  slug(value2, options = {}) {
    const slug = this.serialize(value2);
    return this.getNextSafeSlug(slug, options.dryrun);
  }
}
class Parser {
  constructor(options) {
    this.options = options || defaults;
    this.options.renderer = this.options.renderer || new Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.textRenderer = new TextRenderer();
    this.slugger = new Slugger();
  }
  /**
   * Static Parse Method
   */
  static parse(tokens, options) {
    const parser2 = new Parser(options);
    return parser2.parse(tokens);
  }
  /**
   * Static Parse Inline Method
   */
  static parseInline(tokens, options) {
    const parser2 = new Parser(options);
    return parser2.parseInline(tokens);
  }
  /**
   * Parse Loop
   */
  parse(tokens, top = true) {
    let out = "", i2, j, k, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;
    const l = tokens.length;
    for (i2 = 0; i2 < l; i2++) {
      token = tokens[i2];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "space": {
          continue;
        }
        case "hr": {
          out += this.renderer.hr();
          continue;
        }
        case "heading": {
          out += this.renderer.heading(
            this.parseInline(token.tokens),
            token.depth,
            unescape(this.parseInline(token.tokens, this.textRenderer)),
            this.slugger
          );
          continue;
        }
        case "code": {
          out += this.renderer.code(
            token.text,
            token.lang,
            token.escaped
          );
          continue;
        }
        case "table": {
          header = "";
          cell = "";
          l2 = token.header.length;
          for (j = 0; j < l2; j++) {
            cell += this.renderer.tablecell(
              this.parseInline(token.header[j].tokens),
              { header: true, align: token.align[j] }
            );
          }
          header += this.renderer.tablerow(cell);
          body = "";
          l2 = token.rows.length;
          for (j = 0; j < l2; j++) {
            row = token.rows[j];
            cell = "";
            l3 = row.length;
            for (k = 0; k < l3; k++) {
              cell += this.renderer.tablecell(
                this.parseInline(row[k].tokens),
                { header: false, align: token.align[k] }
              );
            }
            body += this.renderer.tablerow(cell);
          }
          out += this.renderer.table(header, body);
          continue;
        }
        case "blockquote": {
          body = this.parse(token.tokens);
          out += this.renderer.blockquote(body);
          continue;
        }
        case "list": {
          ordered = token.ordered;
          start = token.start;
          loose = token.loose;
          l2 = token.items.length;
          body = "";
          for (j = 0; j < l2; j++) {
            item = token.items[j];
            checked = item.checked;
            task = item.task;
            itemBody = "";
            if (item.task) {
              checkbox = this.renderer.checkbox(checked);
              if (loose) {
                if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                  item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                    item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                  }
                } else {
                  item.tokens.unshift({
                    type: "text",
                    text: checkbox
                  });
                }
              } else {
                itemBody += checkbox;
              }
            }
            itemBody += this.parse(item.tokens, loose);
            body += this.renderer.listitem(itemBody, task, checked);
          }
          out += this.renderer.list(body, ordered, start);
          continue;
        }
        case "html": {
          out += this.renderer.html(token.text);
          continue;
        }
        case "paragraph": {
          out += this.renderer.paragraph(this.parseInline(token.tokens));
          continue;
        }
        case "text": {
          body = token.tokens ? this.parseInline(token.tokens) : token.text;
          while (i2 + 1 < l && tokens[i2 + 1].type === "text") {
            token = tokens[++i2];
            body += "\n" + (token.tokens ? this.parseInline(token.tokens) : token.text);
          }
          out += top ? this.renderer.paragraph(body) : body;
          continue;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
  /**
   * Parse Inline Tokens
   */
  parseInline(tokens, renderer2) {
    renderer2 = renderer2 || this.renderer;
    let out = "", i2, token, ret;
    const l = tokens.length;
    for (i2 = 0; i2 < l; i2++) {
      token = tokens[i2];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "escape": {
          out += renderer2.text(token.text);
          break;
        }
        case "html": {
          out += renderer2.html(token.text);
          break;
        }
        case "link": {
          out += renderer2.link(token.href, token.title, this.parseInline(token.tokens, renderer2));
          break;
        }
        case "image": {
          out += renderer2.image(token.href, token.title, token.text);
          break;
        }
        case "strong": {
          out += renderer2.strong(this.parseInline(token.tokens, renderer2));
          break;
        }
        case "em": {
          out += renderer2.em(this.parseInline(token.tokens, renderer2));
          break;
        }
        case "codespan": {
          out += renderer2.codespan(token.text);
          break;
        }
        case "br": {
          out += renderer2.br();
          break;
        }
        case "del": {
          out += renderer2.del(this.parseInline(token.tokens, renderer2));
          break;
        }
        case "text": {
          out += renderer2.text(token.text);
          break;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
}
class Hooks {
  constructor(options) {
    this.options = options || defaults;
  }
  /**
   * Process markdown before marked
   */
  preprocess(markdown) {
    return markdown;
  }
  /**
   * Process HTML after marked is finished
   */
  postprocess(html) {
    return html;
  }
}
__publicField(Hooks, "passThroughHooks", /* @__PURE__ */ new Set([
  "preprocess",
  "postprocess"
]));
function onError(silent, async, callback) {
  return (e) => {
    e.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (silent) {
      const msg = "<p>An error occurred:</p><pre>" + escape(e.message + "", true) + "</pre>";
      if (async) {
        return Promise.resolve(msg);
      }
      if (callback) {
        callback(null, msg);
        return;
      }
      return msg;
    }
    if (async) {
      return Promise.reject(e);
    }
    if (callback) {
      callback(e);
      return;
    }
    throw e;
  };
}
function parseMarkdown(lexer, parser2) {
  return (src, opt, callback) => {
    if (typeof opt === "function") {
      callback = opt;
      opt = null;
    }
    const origOpt = { ...opt };
    opt = { ...marked.defaults, ...origOpt };
    const throwError = onError(opt.silent, opt.async, callback);
    if (typeof src === "undefined" || src === null) {
      return throwError(new Error("marked(): input parameter is undefined or null"));
    }
    if (typeof src !== "string") {
      return throwError(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected"));
    }
    checkSanitizeDeprecation(opt);
    if (opt.hooks) {
      opt.hooks.options = opt;
    }
    if (callback) {
      const highlight2 = opt.highlight;
      let tokens;
      try {
        if (opt.hooks) {
          src = opt.hooks.preprocess(src);
        }
        tokens = lexer(src, opt);
      } catch (e) {
        return throwError(e);
      }
      const done = function(err) {
        let out;
        if (!err) {
          try {
            if (opt.walkTokens) {
              marked.walkTokens(tokens, opt.walkTokens);
            }
            out = parser2(tokens, opt);
            if (opt.hooks) {
              out = opt.hooks.postprocess(out);
            }
          } catch (e) {
            err = e;
          }
        }
        opt.highlight = highlight2;
        return err ? throwError(err) : callback(null, out);
      };
      if (!highlight2 || highlight2.length < 3) {
        return done();
      }
      delete opt.highlight;
      if (!tokens.length)
        return done();
      let pending = 0;
      marked.walkTokens(tokens, function(token) {
        if (token.type === "code") {
          pending++;
          setTimeout(() => {
            highlight2(token.text, token.lang, function(err, code) {
              if (err) {
                return done(err);
              }
              if (code != null && code !== token.text) {
                token.text = code;
                token.escaped = true;
              }
              pending--;
              if (pending === 0) {
                done();
              }
            });
          }, 0);
        }
      });
      if (pending === 0) {
        done();
      }
      return;
    }
    if (opt.async) {
      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src2) => lexer(src2, opt)).then((tokens) => opt.walkTokens ? Promise.all(marked.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then((tokens) => parser2(tokens, opt)).then((html) => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);
    }
    try {
      if (opt.hooks) {
        src = opt.hooks.preprocess(src);
      }
      const tokens = lexer(src, opt);
      if (opt.walkTokens) {
        marked.walkTokens(tokens, opt.walkTokens);
      }
      let html = parser2(tokens, opt);
      if (opt.hooks) {
        html = opt.hooks.postprocess(html);
      }
      return html;
    } catch (e) {
      return throwError(e);
    }
  };
}
function marked(src, opt, callback) {
  return parseMarkdown(Lexer.lex, Parser.parse)(src, opt, callback);
}
marked.options = marked.setOptions = function(opt) {
  marked.defaults = { ...marked.defaults, ...opt };
  changeDefaults(marked.defaults);
  return marked;
};
marked.getDefaults = getDefaults;
marked.defaults = defaults;
marked.use = function(...args) {
  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };
  args.forEach((pack) => {
    const opts = { ...pack };
    opts.async = marked.defaults.async || opts.async || false;
    if (pack.extensions) {
      pack.extensions.forEach((ext) => {
        if (!ext.name) {
          throw new Error("extension name required");
        }
        if (ext.renderer) {
          const prevRenderer = extensions.renderers[ext.name];
          if (prevRenderer) {
            extensions.renderers[ext.name] = function(...args2) {
              let ret = ext.renderer.apply(this, args2);
              if (ret === false) {
                ret = prevRenderer.apply(this, args2);
              }
              return ret;
            };
          } else {
            extensions.renderers[ext.name] = ext.renderer;
          }
        }
        if (ext.tokenizer) {
          if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
            throw new Error("extension level must be 'block' or 'inline'");
          }
          if (extensions[ext.level]) {
            extensions[ext.level].unshift(ext.tokenizer);
          } else {
            extensions[ext.level] = [ext.tokenizer];
          }
          if (ext.start) {
            if (ext.level === "block") {
              if (extensions.startBlock) {
                extensions.startBlock.push(ext.start);
              } else {
                extensions.startBlock = [ext.start];
              }
            } else if (ext.level === "inline") {
              if (extensions.startInline) {
                extensions.startInline.push(ext.start);
              } else {
                extensions.startInline = [ext.start];
              }
            }
          }
        }
        if (ext.childTokens) {
          extensions.childTokens[ext.name] = ext.childTokens;
        }
      });
      opts.extensions = extensions;
    }
    if (pack.renderer) {
      const renderer2 = marked.defaults.renderer || new Renderer();
      for (const prop in pack.renderer) {
        const prevRenderer = renderer2[prop];
        renderer2[prop] = (...args2) => {
          let ret = pack.renderer[prop].apply(renderer2, args2);
          if (ret === false) {
            ret = prevRenderer.apply(renderer2, args2);
          }
          return ret;
        };
      }
      opts.renderer = renderer2;
    }
    if (pack.tokenizer) {
      const tokenizer = marked.defaults.tokenizer || new Tokenizer();
      for (const prop in pack.tokenizer) {
        const prevTokenizer = tokenizer[prop];
        tokenizer[prop] = (...args2) => {
          let ret = pack.tokenizer[prop].apply(tokenizer, args2);
          if (ret === false) {
            ret = prevTokenizer.apply(tokenizer, args2);
          }
          return ret;
        };
      }
      opts.tokenizer = tokenizer;
    }
    if (pack.hooks) {
      const hooks = marked.defaults.hooks || new Hooks();
      for (const prop in pack.hooks) {
        const prevHook = hooks[prop];
        if (Hooks.passThroughHooks.has(prop)) {
          hooks[prop] = (arg) => {
            if (marked.defaults.async) {
              return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then((ret2) => {
                return prevHook.call(hooks, ret2);
              });
            }
            const ret = pack.hooks[prop].call(hooks, arg);
            return prevHook.call(hooks, ret);
          };
        } else {
          hooks[prop] = (...args2) => {
            let ret = pack.hooks[prop].apply(hooks, args2);
            if (ret === false) {
              ret = prevHook.apply(hooks, args2);
            }
            return ret;
          };
        }
      }
      opts.hooks = hooks;
    }
    if (pack.walkTokens) {
      const walkTokens = marked.defaults.walkTokens;
      opts.walkTokens = function(token) {
        let values = [];
        values.push(pack.walkTokens.call(this, token));
        if (walkTokens) {
          values = values.concat(walkTokens.call(this, token));
        }
        return values;
      };
    }
    marked.setOptions(opts);
  });
};
marked.walkTokens = function(tokens, callback) {
  let values = [];
  for (const token of tokens) {
    values = values.concat(callback.call(marked, token));
    switch (token.type) {
      case "table": {
        for (const cell of token.header) {
          values = values.concat(marked.walkTokens(cell.tokens, callback));
        }
        for (const row of token.rows) {
          for (const cell of row) {
            values = values.concat(marked.walkTokens(cell.tokens, callback));
          }
        }
        break;
      }
      case "list": {
        values = values.concat(marked.walkTokens(token.items, callback));
        break;
      }
      default: {
        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {
          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
            values = values.concat(marked.walkTokens(token[childTokens], callback));
          });
        } else if (token.tokens) {
          values = values.concat(marked.walkTokens(token.tokens, callback));
        }
      }
    }
  }
  return values;
};
marked.parseInline = parseMarkdown(Lexer.lexInline, Parser.parseInline);
marked.Parser = Parser;
marked.parser = Parser.parse;
marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;
marked.Lexer = Lexer;
marked.lexer = Lexer.lex;
marked.Tokenizer = Tokenizer;
marked.Slugger = Slugger;
marked.Hooks = Hooks;
marked.parse = marked;
marked.options;
marked.setOptions;
marked.use;
marked.walkTokens;
marked.parseInline;
Parser.parse;
Lexer.lex;
const _hoisted_1$1 = ["innerHTML"];
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  __name: "HtmlWithCode",
  props: {
    html: {}
  },
  setup(__props) {
    const props = __props;
    const rendered = marked(props.html, {
      sanitize: false,
      gfm: true,
      highlight: (code) => prettyCode(code)
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", { innerHTML: unref(rendered) }, null, 8, _hoisted_1$1);
    };
  }
});
const NAMED_MASKS = {
  date: "####/##/##",
  datetime: "####/##/## ##:##",
  time: "##:##",
  fulltime: "##:##:##",
  phone: "(###) ### - ####",
  card: "#### #### #### ####"
};
const TOKENS = {
  "#": { pattern: "[\\d]", negate: "[^\\d]" },
  S: { pattern: "[a-zA-Z]", negate: "[^a-zA-Z]" },
  N: { pattern: "[0-9a-zA-Z]", negate: "[^0-9a-zA-Z]" },
  A: { pattern: "[a-zA-Z]", negate: "[^a-zA-Z]", transform: (v) => v.toLocaleUpperCase() },
  a: { pattern: "[a-zA-Z]", negate: "[^a-zA-Z]", transform: (v) => v.toLocaleLowerCase() },
  X: { pattern: "[0-9a-zA-Z]", negate: "[^0-9a-zA-Z]", transform: (v) => v.toLocaleUpperCase() },
  x: { pattern: "[0-9a-zA-Z]", negate: "[^0-9a-zA-Z]", transform: (v) => v.toLocaleLowerCase() }
};
const KEYS = Object.keys(TOKENS);
KEYS.forEach((key) => {
  TOKENS[key].regex = new RegExp(TOKENS[key].pattern);
});
const tokenRegexMask = new RegExp("\\\\([^.*+?^${}()|([\\]])|([.*+?^${}()|[\\]])|([" + KEYS.join("") + "])|(.)", "g"), escRegex = /[.*+?^${}()|[\]\\]/g;
const MARKER = String.fromCharCode(1);
const useMaskProps = {
  mask: String,
  reverseFillMask: Boolean,
  fillMask: [Boolean, String],
  unmaskedValue: Boolean
};
function useMask(props, emit2, emitValue, inputRef) {
  let maskMarked, maskReplaced, computedMask, computedUnmask, pastedTextStart, selectionAnchor;
  const hasMask = ref(null);
  const innerValue = ref(getInitialMaskedValue());
  function getIsTypeText() {
    return props.autogrow === true || ["textarea", "text", "search", "url", "tel", "password"].includes(props.type);
  }
  watch(() => props.type + props.autogrow, updateMaskInternals);
  watch(() => props.mask, (v) => {
    if (v !== void 0) {
      updateMaskValue(innerValue.value, true);
    } else {
      const val = unmaskValue(innerValue.value);
      updateMaskInternals();
      props.modelValue !== val && emit2("update:modelValue", val);
    }
  });
  watch(() => props.fillMask + props.reverseFillMask, () => {
    hasMask.value === true && updateMaskValue(innerValue.value, true);
  });
  watch(() => props.unmaskedValue, () => {
    hasMask.value === true && updateMaskValue(innerValue.value);
  });
  function getInitialMaskedValue() {
    updateMaskInternals();
    if (hasMask.value === true) {
      const masked = maskValue(unmaskValue(props.modelValue));
      return props.fillMask !== false ? fillWithMask(masked) : masked;
    }
    return props.modelValue;
  }
  function getPaddedMaskMarked(size2) {
    if (size2 < maskMarked.length) {
      return maskMarked.slice(-size2);
    }
    let pad = "", localMaskMarked = maskMarked;
    const padPos = localMaskMarked.indexOf(MARKER);
    if (padPos > -1) {
      for (let i2 = size2 - localMaskMarked.length; i2 > 0; i2--) {
        pad += MARKER;
      }
      localMaskMarked = localMaskMarked.slice(0, padPos) + pad + localMaskMarked.slice(padPos);
    }
    return localMaskMarked;
  }
  function updateMaskInternals() {
    hasMask.value = props.mask !== void 0 && props.mask.length !== 0 && getIsTypeText();
    if (hasMask.value === false) {
      computedUnmask = void 0;
      maskMarked = "";
      maskReplaced = "";
      return;
    }
    const localComputedMask = NAMED_MASKS[props.mask] === void 0 ? props.mask : NAMED_MASKS[props.mask], fillChar = typeof props.fillMask === "string" && props.fillMask.length !== 0 ? props.fillMask.slice(0, 1) : "_", fillCharEscaped = fillChar.replace(escRegex, "\\$&"), unmask = [], extract = [], mask = [];
    let firstMatch = props.reverseFillMask === true, unmaskChar = "", negateChar = "";
    localComputedMask.replace(tokenRegexMask, (_, char1, esc, token, char2) => {
      if (token !== void 0) {
        const c = TOKENS[token];
        mask.push(c);
        negateChar = c.negate;
        if (firstMatch === true) {
          extract.push("(?:" + negateChar + "+)?(" + c.pattern + "+)?(?:" + negateChar + "+)?(" + c.pattern + "+)?");
          firstMatch = false;
        }
        extract.push("(?:" + negateChar + "+)?(" + c.pattern + ")?");
      } else if (esc !== void 0) {
        unmaskChar = "\\" + (esc === "\\" ? "" : esc);
        mask.push(esc);
        unmask.push("([^" + unmaskChar + "]+)?" + unmaskChar + "?");
      } else {
        const c = char1 !== void 0 ? char1 : char2;
        unmaskChar = c === "\\" ? "\\\\\\\\" : c.replace(escRegex, "\\\\$&");
        mask.push(c);
        unmask.push("([^" + unmaskChar + "]+)?" + unmaskChar + "?");
      }
    });
    const unmaskMatcher = new RegExp(
      "^" + unmask.join("") + "(" + (unmaskChar === "" ? "." : "[^" + unmaskChar + "]") + "+)?" + (unmaskChar === "" ? "" : "[" + unmaskChar + "]*") + "$"
    ), extractLast = extract.length - 1, extractMatcher = extract.map((re2, index2) => {
      if (index2 === 0 && props.reverseFillMask === true) {
        return new RegExp("^" + fillCharEscaped + "*" + re2);
      } else if (index2 === extractLast) {
        return new RegExp(
          "^" + re2 + "(" + (negateChar === "" ? "." : negateChar) + "+)?" + (props.reverseFillMask === true ? "$" : fillCharEscaped + "*")
        );
      }
      return new RegExp("^" + re2);
    });
    computedMask = mask;
    computedUnmask = (val) => {
      const unmaskMatch = unmaskMatcher.exec(props.reverseFillMask === true ? val : val.slice(0, mask.length + 1));
      if (unmaskMatch !== null) {
        val = unmaskMatch.slice(1).join("");
      }
      const extractMatch = [], extractMatcherLength = extractMatcher.length;
      for (let i2 = 0, str = val; i2 < extractMatcherLength; i2++) {
        const m = extractMatcher[i2].exec(str);
        if (m === null) {
          break;
        }
        str = str.slice(m.shift().length);
        extractMatch.push(...m);
      }
      if (extractMatch.length !== 0) {
        return extractMatch.join("");
      }
      return val;
    };
    maskMarked = mask.map((v) => typeof v === "string" ? v : MARKER).join("");
    maskReplaced = maskMarked.split(MARKER).join(fillChar);
  }
  function updateMaskValue(rawVal, updateMaskInternalsFlag, inputType) {
    const inp = inputRef.value, end = inp.selectionEnd, endReverse = inp.value.length - end, unmasked = unmaskValue(rawVal);
    updateMaskInternalsFlag === true && updateMaskInternals();
    const preMasked = maskValue(unmasked), masked = props.fillMask !== false ? fillWithMask(preMasked) : preMasked, changed = innerValue.value !== masked;
    inp.value !== masked && (inp.value = masked);
    changed === true && (innerValue.value = masked);
    document.activeElement === inp && nextTick$1(() => {
      if (masked === maskReplaced) {
        const cursor = props.reverseFillMask === true ? maskReplaced.length : 0;
        inp.setSelectionRange(cursor, cursor, "forward");
        return;
      }
      if (inputType === "insertFromPaste" && props.reverseFillMask !== true) {
        const maxEnd = inp.selectionEnd;
        let cursor = end - 1;
        for (let i2 = pastedTextStart; i2 <= cursor && i2 < maxEnd; i2++) {
          if (maskMarked[i2] !== MARKER) {
            cursor++;
          }
        }
        moveCursor.right(inp, cursor);
        return;
      }
      if (["deleteContentBackward", "deleteContentForward"].indexOf(inputType) > -1) {
        const cursor = props.reverseFillMask === true ? end === 0 ? masked.length > preMasked.length ? 1 : 0 : Math.max(0, masked.length - (masked === maskReplaced ? 0 : Math.min(preMasked.length, endReverse) + 1)) + 1 : end;
        inp.setSelectionRange(cursor, cursor, "forward");
        return;
      }
      if (props.reverseFillMask === true) {
        if (changed === true) {
          const cursor = Math.max(0, masked.length - (masked === maskReplaced ? 0 : Math.min(preMasked.length, endReverse + 1)));
          if (cursor === 1 && end === 1) {
            inp.setSelectionRange(cursor, cursor, "forward");
          } else {
            moveCursor.rightReverse(inp, cursor);
          }
        } else {
          const cursor = masked.length - endReverse;
          inp.setSelectionRange(cursor, cursor, "backward");
        }
      } else {
        if (changed === true) {
          const cursor = Math.max(0, maskMarked.indexOf(MARKER), Math.min(preMasked.length, end) - 1);
          moveCursor.right(inp, cursor);
        } else {
          const cursor = end - 1;
          moveCursor.right(inp, cursor);
        }
      }
    });
    const val = props.unmaskedValue === true ? unmaskValue(masked) : masked;
    String(props.modelValue) !== val && emitValue(val, true);
  }
  function moveCursorForPaste(inp, start, end) {
    const preMasked = maskValue(unmaskValue(inp.value));
    start = Math.max(0, maskMarked.indexOf(MARKER), Math.min(preMasked.length, start));
    pastedTextStart = start;
    inp.setSelectionRange(start, end, "forward");
  }
  const moveCursor = {
    left(inp, cursor) {
      const noMarkBefore = maskMarked.slice(cursor - 1).indexOf(MARKER) === -1;
      let i2 = Math.max(0, cursor - 1);
      for (; i2 >= 0; i2--) {
        if (maskMarked[i2] === MARKER) {
          cursor = i2;
          noMarkBefore === true && cursor++;
          break;
        }
      }
      if (i2 < 0 && maskMarked[cursor] !== void 0 && maskMarked[cursor] !== MARKER) {
        return moveCursor.right(inp, 0);
      }
      cursor >= 0 && inp.setSelectionRange(cursor, cursor, "backward");
    },
    right(inp, cursor) {
      const limit = inp.value.length;
      let i2 = Math.min(limit, cursor + 1);
      for (; i2 <= limit; i2++) {
        if (maskMarked[i2] === MARKER) {
          cursor = i2;
          break;
        } else if (maskMarked[i2 - 1] === MARKER) {
          cursor = i2;
        }
      }
      if (i2 > limit && maskMarked[cursor - 1] !== void 0 && maskMarked[cursor - 1] !== MARKER) {
        return moveCursor.left(inp, limit);
      }
      inp.setSelectionRange(cursor, cursor, "forward");
    },
    leftReverse(inp, cursor) {
      const localMaskMarked = getPaddedMaskMarked(inp.value.length);
      let i2 = Math.max(0, cursor - 1);
      for (; i2 >= 0; i2--) {
        if (localMaskMarked[i2 - 1] === MARKER) {
          cursor = i2;
          break;
        } else if (localMaskMarked[i2] === MARKER) {
          cursor = i2;
          if (i2 === 0) {
            break;
          }
        }
      }
      if (i2 < 0 && localMaskMarked[cursor] !== void 0 && localMaskMarked[cursor] !== MARKER) {
        return moveCursor.rightReverse(inp, 0);
      }
      cursor >= 0 && inp.setSelectionRange(cursor, cursor, "backward");
    },
    rightReverse(inp, cursor) {
      const limit = inp.value.length, localMaskMarked = getPaddedMaskMarked(limit), noMarkBefore = localMaskMarked.slice(0, cursor + 1).indexOf(MARKER) === -1;
      let i2 = Math.min(limit, cursor + 1);
      for (; i2 <= limit; i2++) {
        if (localMaskMarked[i2 - 1] === MARKER) {
          cursor = i2;
          cursor > 0 && noMarkBefore === true && cursor--;
          break;
        }
      }
      if (i2 > limit && localMaskMarked[cursor - 1] !== void 0 && localMaskMarked[cursor - 1] !== MARKER) {
        return moveCursor.leftReverse(inp, limit);
      }
      inp.setSelectionRange(cursor, cursor, "forward");
    }
  };
  function onMaskedClick(e) {
    emit2("click", e);
    selectionAnchor = void 0;
  }
  function onMaskedKeydown(e) {
    emit2("keydown", e);
    if (shouldIgnoreKey(e) === true) {
      return;
    }
    const inp = inputRef.value, start = inp.selectionStart, end = inp.selectionEnd;
    if (!e.shiftKey) {
      selectionAnchor = void 0;
    }
    if (e.keyCode === 37 || e.keyCode === 39) {
      if (e.shiftKey && selectionAnchor === void 0) {
        selectionAnchor = inp.selectionDirection === "forward" ? start : end;
      }
      const fn = moveCursor[(e.keyCode === 39 ? "right" : "left") + (props.reverseFillMask === true ? "Reverse" : "")];
      e.preventDefault();
      fn(inp, selectionAnchor === start ? end : start);
      if (e.shiftKey) {
        const cursor = inp.selectionStart;
        inp.setSelectionRange(Math.min(selectionAnchor, cursor), Math.max(selectionAnchor, cursor), "forward");
      }
    } else if (e.keyCode === 8 && props.reverseFillMask !== true && start === end) {
      moveCursor.left(inp, start);
      inp.setSelectionRange(inp.selectionStart, end, "backward");
    } else if (e.keyCode === 46 && props.reverseFillMask === true && start === end) {
      moveCursor.rightReverse(inp, end);
      inp.setSelectionRange(start, inp.selectionEnd, "forward");
    }
  }
  function maskValue(val) {
    if (val === void 0 || val === null || val === "") {
      return "";
    }
    if (props.reverseFillMask === true) {
      return maskValueReverse(val);
    }
    const mask = computedMask;
    let valIndex = 0, output = "";
    for (let maskIndex = 0; maskIndex < mask.length; maskIndex++) {
      const valChar = val[valIndex], maskDef = mask[maskIndex];
      if (typeof maskDef === "string") {
        output += maskDef;
        valChar === maskDef && valIndex++;
      } else if (valChar !== void 0 && maskDef.regex.test(valChar)) {
        output += maskDef.transform !== void 0 ? maskDef.transform(valChar) : valChar;
        valIndex++;
      } else {
        return output;
      }
    }
    return output;
  }
  function maskValueReverse(val) {
    const mask = computedMask, firstTokenIndex = maskMarked.indexOf(MARKER);
    let valIndex = val.length - 1, output = "";
    for (let maskIndex = mask.length - 1; maskIndex >= 0 && valIndex > -1; maskIndex--) {
      const maskDef = mask[maskIndex];
      let valChar = val[valIndex];
      if (typeof maskDef === "string") {
        output = maskDef + output;
        valChar === maskDef && valIndex--;
      } else if (valChar !== void 0 && maskDef.regex.test(valChar)) {
        do {
          output = (maskDef.transform !== void 0 ? maskDef.transform(valChar) : valChar) + output;
          valIndex--;
          valChar = val[valIndex];
        } while (firstTokenIndex === maskIndex && valChar !== void 0 && maskDef.regex.test(valChar));
      } else {
        return output;
      }
    }
    return output;
  }
  function unmaskValue(val) {
    return typeof val !== "string" || computedUnmask === void 0 ? typeof val === "number" ? computedUnmask("" + val) : val : computedUnmask(val);
  }
  function fillWithMask(val) {
    if (maskReplaced.length - val.length <= 0) {
      return val;
    }
    return props.reverseFillMask === true && val.length !== 0 ? maskReplaced.slice(0, -val.length) + val : val + maskReplaced.slice(val.length);
  }
  return {
    innerValue,
    hasMask,
    moveCursorForPaste,
    updateMaskValue,
    onMaskedKeydown,
    onMaskedClick
  };
}
function useFileFormDomProps(props, typeGuard) {
  function getFormDomProps() {
    const model = props.modelValue;
    try {
      const dt = "DataTransfer" in window ? new DataTransfer() : "ClipboardEvent" in window ? new ClipboardEvent("").clipboardData : void 0;
      if (Object(model) === model) {
        ("length" in model ? Array.from(model) : [model]).forEach((file) => {
          dt.items.add(file);
        });
      }
      return {
        files: dt.files
      };
    } catch (e) {
      return {
        files: void 0
      };
    }
  }
  return typeGuard === true ? computed(() => {
    if (props.type !== "file") {
      return;
    }
    return getFormDomProps();
  }) : computed(getFormDomProps);
}
const QInput = createComponent({
  name: "QInput",
  inheritAttrs: false,
  props: {
    ...useFieldProps,
    ...useMaskProps,
    ...useFormProps,
    modelValue: { required: false },
    shadowText: String,
    type: {
      type: String,
      default: "text"
    },
    debounce: [String, Number],
    autogrow: Boolean,
    // makes a textarea
    inputClass: [Array, String, Object],
    inputStyle: [Array, String, Object]
  },
  emits: [
    ...useFieldEmits,
    "paste",
    "change",
    "keydown",
    "click",
    "animationend"
  ],
  setup(props, { emit: emit2, attrs }) {
    const { proxy } = getCurrentInstance();
    const { $q } = proxy;
    const temp = {};
    let emitCachedValue = NaN, typedNumber, stopValueWatcher, emitTimer = null, emitValueFn;
    const inputRef = ref(null);
    const nameProp = useFormInputNameAttr(props);
    const {
      innerValue,
      hasMask,
      moveCursorForPaste,
      updateMaskValue,
      onMaskedKeydown,
      onMaskedClick
    } = useMask(props, emit2, emitValue, inputRef);
    const formDomProps = useFileFormDomProps(
      props,
      /* type guard */
      true
    );
    const hasValue = computed(() => fieldValueIsFilled(innerValue.value));
    const onComposition = useKeyComposition(onInput);
    const state = useFieldState();
    const isTextarea = computed(
      () => props.type === "textarea" || props.autogrow === true
    );
    const isTypeText = computed(
      () => isTextarea.value === true || ["text", "search", "url", "tel", "password"].includes(props.type)
    );
    const onEvents = computed(() => {
      const evt = {
        ...state.splitAttrs.listeners.value,
        onInput,
        onPaste,
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        onChange,
        onBlur: onFinishEditing,
        onFocus: stop
      };
      evt.onCompositionstart = evt.onCompositionupdate = evt.onCompositionend = onComposition;
      if (hasMask.value === true) {
        evt.onKeydown = onMaskedKeydown;
        evt.onClick = onMaskedClick;
      }
      if (props.autogrow === true) {
        evt.onAnimationend = onAnimationend;
      }
      return evt;
    });
    const inputAttrs = computed(() => {
      const attrs2 = {
        tabindex: 0,
        "data-autofocus": props.autofocus === true || void 0,
        rows: props.type === "textarea" ? 6 : void 0,
        "aria-label": props.label,
        name: nameProp.value,
        ...state.splitAttrs.attributes.value,
        id: state.targetUid.value,
        maxlength: props.maxlength,
        disabled: props.disable === true,
        readonly: props.readonly === true
      };
      if (isTextarea.value === false) {
        attrs2.type = props.type;
      }
      if (props.autogrow === true) {
        attrs2.rows = 1;
      }
      return attrs2;
    });
    watch(() => props.type, () => {
      if (inputRef.value) {
        inputRef.value.value = props.modelValue;
      }
    });
    watch(() => props.modelValue, (v) => {
      if (hasMask.value === true) {
        if (stopValueWatcher === true) {
          stopValueWatcher = false;
          if (String(v) === emitCachedValue) {
            return;
          }
        }
        updateMaskValue(v);
      } else if (innerValue.value !== v) {
        innerValue.value = v;
        if (props.type === "number" && temp.hasOwnProperty("value") === true) {
          if (typedNumber === true) {
            typedNumber = false;
          } else {
            delete temp.value;
          }
        }
      }
      props.autogrow === true && nextTick$1(adjustHeight);
    });
    watch(() => props.autogrow, (val) => {
      if (val === true) {
        nextTick$1(adjustHeight);
      } else if (inputRef.value !== null && attrs.rows > 0) {
        inputRef.value.style.height = "auto";
      }
    });
    watch(() => props.dense, () => {
      props.autogrow === true && nextTick$1(adjustHeight);
    });
    function focus() {
      addFocusFn(() => {
        const el = document.activeElement;
        if (inputRef.value !== null && inputRef.value !== el && (el === null || el.id !== state.targetUid.value)) {
          inputRef.value.focus({ preventScroll: true });
        }
      });
    }
    function select() {
      inputRef.value !== null && inputRef.value.select();
    }
    function onPaste(e) {
      if (hasMask.value === true && props.reverseFillMask !== true) {
        const inp = e.target;
        moveCursorForPaste(inp, inp.selectionStart, inp.selectionEnd);
      }
      emit2("paste", e);
    }
    function onInput(e) {
      if (!e || !e.target) {
        return;
      }
      if (props.type === "file") {
        emit2("update:modelValue", e.target.files);
        return;
      }
      const val = e.target.value;
      if (e.target.qComposing === true) {
        temp.value = val;
        return;
      }
      if (hasMask.value === true) {
        updateMaskValue(val, false, e.inputType);
      } else {
        emitValue(val);
        if (isTypeText.value === true && e.target === document.activeElement) {
          const { selectionStart, selectionEnd } = e.target;
          if (selectionStart !== void 0 && selectionEnd !== void 0) {
            nextTick$1(() => {
              if (e.target === document.activeElement && val.indexOf(e.target.value) === 0) {
                e.target.setSelectionRange(selectionStart, selectionEnd);
              }
            });
          }
        }
      }
      props.autogrow === true && adjustHeight();
    }
    function onAnimationend(e) {
      emit2("animationend", e);
      adjustHeight();
    }
    function emitValue(val, stopWatcher) {
      emitValueFn = () => {
        emitTimer = null;
        if (props.type !== "number" && temp.hasOwnProperty("value") === true) {
          delete temp.value;
        }
        if (props.modelValue !== val && emitCachedValue !== val) {
          emitCachedValue = val;
          stopWatcher === true && (stopValueWatcher = true);
          emit2("update:modelValue", val);
          nextTick$1(() => {
            emitCachedValue === val && (emitCachedValue = NaN);
          });
        }
        emitValueFn = void 0;
      };
      if (props.type === "number") {
        typedNumber = true;
        temp.value = val;
      }
      if (props.debounce !== void 0) {
        emitTimer !== null && clearTimeout(emitTimer);
        temp.value = val;
        emitTimer = setTimeout(emitValueFn, props.debounce);
      } else {
        emitValueFn();
      }
    }
    function adjustHeight() {
      requestAnimationFrame(() => {
        const inp = inputRef.value;
        if (inp !== null) {
          const parentStyle = inp.parentNode.style;
          const { scrollTop } = inp;
          const { overflowY, maxHeight } = $q.platform.is.firefox === true ? {} : window.getComputedStyle(inp);
          const changeOverflow = overflowY !== void 0 && overflowY !== "scroll";
          changeOverflow === true && (inp.style.overflowY = "hidden");
          parentStyle.marginBottom = inp.scrollHeight - 1 + "px";
          inp.style.height = "1px";
          inp.style.height = inp.scrollHeight + "px";
          changeOverflow === true && (inp.style.overflowY = parseInt(maxHeight, 10) < inp.scrollHeight ? "auto" : "hidden");
          parentStyle.marginBottom = "";
          inp.scrollTop = scrollTop;
        }
      });
    }
    function onChange(e) {
      onComposition(e);
      if (emitTimer !== null) {
        clearTimeout(emitTimer);
        emitTimer = null;
      }
      emitValueFn !== void 0 && emitValueFn();
      emit2("change", e.target.value);
    }
    function onFinishEditing(e) {
      e !== void 0 && stop(e);
      if (emitTimer !== null) {
        clearTimeout(emitTimer);
        emitTimer = null;
      }
      emitValueFn !== void 0 && emitValueFn();
      typedNumber = false;
      stopValueWatcher = false;
      delete temp.value;
      props.type !== "file" && setTimeout(() => {
        if (inputRef.value !== null) {
          inputRef.value.value = innerValue.value !== void 0 ? innerValue.value : "";
        }
      });
    }
    function getCurValue() {
      return temp.hasOwnProperty("value") === true ? temp.value : innerValue.value !== void 0 ? innerValue.value : "";
    }
    onBeforeUnmount(() => {
      onFinishEditing();
    });
    onMounted(() => {
      props.autogrow === true && adjustHeight();
    });
    Object.assign(state, {
      innerValue,
      fieldClass: computed(
        () => `q-${isTextarea.value === true ? "textarea" : "input"}` + (props.autogrow === true ? " q-textarea--autogrow" : "")
      ),
      hasShadow: computed(
        () => props.type !== "file" && typeof props.shadowText === "string" && props.shadowText.length !== 0
      ),
      inputRef,
      emitValue,
      hasValue,
      floatingLabel: computed(
        () => hasValue.value === true && (props.type !== "number" || isNaN(innerValue.value) === false) || fieldValueIsFilled(props.displayValue)
      ),
      getControl: () => {
        return h(isTextarea.value === true ? "textarea" : "input", {
          ref: inputRef,
          class: [
            "q-field__native q-placeholder",
            props.inputClass
          ],
          style: props.inputStyle,
          ...inputAttrs.value,
          ...onEvents.value,
          ...props.type !== "file" ? { value: getCurValue() } : formDomProps.value
        });
      },
      getShadowControl: () => {
        return h("div", {
          class: "q-field__native q-field__shadow absolute-bottom no-pointer-events" + (isTextarea.value === true ? "" : " text-no-wrap")
        }, [
          h("span", { class: "invisible" }, getCurValue()),
          h("span", props.shadowText)
        ]);
      }
    });
    const renderFn = useField(state);
    Object.assign(proxy, {
      focus,
      select,
      getNativeElement: () => inputRef.value
      // deprecated
    });
    injectProp(proxy, "nativeEl", () => inputRef.value);
    return renderFn;
  }
});
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "ErrorFormatter",
  setup(__props) {
    const src = ref("Type 'number' is not assignable to type 'string'");
    const err = computed(
      () => src.value.split("\n").map((txt, depth) => ({ depth, value: parseError(txt) }))
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", null, [
        createVNode(QInput, {
          label: "Paste an error message",
          type: "textarea",
          modelValue: src.value,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => src.value = $event)
        }, null, 8, ["modelValue"]),
        createTextVNode(" " + toDisplayString(err.value) + " ", 1),
        createVNode(ResolvedError, {
          "err-key": err.value,
          "err-value": { sources: { foo: { bar: [] } } }
        }, null, 8, ["err-key"])
      ]);
    };
  }
});
const _hoisted_1 = { class: "appstate" };
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "AppState",
  setup(__props) {
    const splitAt = ref(100);
    const horizontal = ref(true);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        createVNode(QSplitter, {
          modelValue: splitAt.value,
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => splitAt.value = $event),
          unit: "px",
          horizontal: horizontal.value
        }, {
          after: withCtx(() => [
            createVNode(ResolvedErrors)
          ]),
          before: withCtx(() => [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(positionInfo), (items) => {
              return openBlock(), createElementBlock(Fragment, null, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(items.info, (info) => {
                  return openBlock(), createBlock(QList, null, {
                    default: withCtx(() => [
                      createVNode(_sfc_main$3, { html: info }, null, 8, ["html"])
                    ]),
                    _: 2
                  }, 1024);
                }), 256))
              ], 64);
            }), 256))
          ]),
          separator: withCtx(() => [
            createVNode(QIcon, {
              size: "sm",
              name: horizontal.value ? "vertical_split" : "horizontal_split",
              onClick: _cache[0] || (_cache[0] = ($event) => horizontal.value = !horizontal.value)
            }, null, 8, ["name"])
          ]),
          _: 1
        }, 8, ["modelValue", "horizontal"]),
        !unref(appState).connected ? (openBlock(), createBlock(_sfc_main$2, { key: 0 })) : createCommentVNode("", true)
      ]);
    };
  }
});
const AppState_vue_vue_type_style_index_0_scoped_618bf9b2_lang = "";
const AppState = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__scopeId", "data-v-618bf9b2"]]);
var main$1 = { exports: {} };
(function(module, exports) {
  !function(t, n) {
    module.exports = n();
  }(commonjsGlobal, () => {
    return t = { 770: function(t2, n2, e) {
      var r = this && this.__importDefault || function(t3) {
        return t3 && t3.__esModule ? t3 : { default: t3 };
      };
      Object.defineProperty(n2, "__esModule", { value: true }), n2.setDefaultDebugCall = n2.createOnigScanner = n2.createOnigString = n2.loadWASM = n2.OnigScanner = n2.OnigString = void 0;
      const i2 = r(e(418));
      let o = null, a = false;
      class f {
        static _utf8ByteLength(t3) {
          let n3 = 0;
          for (let e2 = 0, r2 = t3.length; e2 < r2; e2++) {
            const i3 = t3.charCodeAt(e2);
            let o2 = i3, a2 = false;
            if (i3 >= 55296 && i3 <= 56319 && e2 + 1 < r2) {
              const n4 = t3.charCodeAt(e2 + 1);
              n4 >= 56320 && n4 <= 57343 && (o2 = 65536 + (i3 - 55296 << 10) | n4 - 56320, a2 = true);
            }
            n3 += o2 <= 127 ? 1 : o2 <= 2047 ? 2 : o2 <= 65535 ? 3 : 4, a2 && e2++;
          }
          return n3;
        }
        constructor(t3) {
          const n3 = t3.length, e2 = f._utf8ByteLength(t3), r2 = e2 !== n3, i3 = r2 ? new Uint32Array(n3 + 1) : null;
          r2 && (i3[n3] = e2);
          const o2 = r2 ? new Uint32Array(e2 + 1) : null;
          r2 && (o2[e2] = n3);
          const a2 = new Uint8Array(e2);
          let s2 = 0;
          for (let e3 = 0; e3 < n3; e3++) {
            const f2 = t3.charCodeAt(e3);
            let u2 = f2, c2 = false;
            if (f2 >= 55296 && f2 <= 56319 && e3 + 1 < n3) {
              const n4 = t3.charCodeAt(e3 + 1);
              n4 >= 56320 && n4 <= 57343 && (u2 = 65536 + (f2 - 55296 << 10) | n4 - 56320, c2 = true);
            }
            r2 && (i3[e3] = s2, c2 && (i3[e3 + 1] = s2), u2 <= 127 ? o2[s2 + 0] = e3 : u2 <= 2047 ? (o2[s2 + 0] = e3, o2[s2 + 1] = e3) : u2 <= 65535 ? (o2[s2 + 0] = e3, o2[s2 + 1] = e3, o2[s2 + 2] = e3) : (o2[s2 + 0] = e3, o2[s2 + 1] = e3, o2[s2 + 2] = e3, o2[s2 + 3] = e3)), u2 <= 127 ? a2[s2++] = u2 : u2 <= 2047 ? (a2[s2++] = 192 | (1984 & u2) >>> 6, a2[s2++] = 128 | (63 & u2) >>> 0) : u2 <= 65535 ? (a2[s2++] = 224 | (61440 & u2) >>> 12, a2[s2++] = 128 | (4032 & u2) >>> 6, a2[s2++] = 128 | (63 & u2) >>> 0) : (a2[s2++] = 240 | (1835008 & u2) >>> 18, a2[s2++] = 128 | (258048 & u2) >>> 12, a2[s2++] = 128 | (4032 & u2) >>> 6, a2[s2++] = 128 | (63 & u2) >>> 0), c2 && e3++;
          }
          this.utf16Length = n3, this.utf8Length = e2, this.utf16Value = t3, this.utf8Value = a2, this.utf16OffsetToUtf8 = i3, this.utf8OffsetToUtf16 = o2;
        }
        createString(t3) {
          const n3 = t3._omalloc(this.utf8Length);
          return t3.HEAPU8.set(this.utf8Value, n3), n3;
        }
      }
      class s {
        constructor(t3) {
          if (this.id = ++s.LAST_ID, !o)
            throw new Error("Must invoke loadWASM first.");
          this._onigBinding = o, this.content = t3;
          const n3 = new f(t3);
          this.utf16Length = n3.utf16Length, this.utf8Length = n3.utf8Length, this.utf16OffsetToUtf8 = n3.utf16OffsetToUtf8, this.utf8OffsetToUtf16 = n3.utf8OffsetToUtf16, this.utf8Length < 1e4 && !s._sharedPtrInUse ? (s._sharedPtr || (s._sharedPtr = o._omalloc(1e4)), s._sharedPtrInUse = true, o.HEAPU8.set(n3.utf8Value, s._sharedPtr), this.ptr = s._sharedPtr) : this.ptr = n3.createString(o);
        }
        convertUtf8OffsetToUtf16(t3) {
          return this.utf8OffsetToUtf16 ? t3 < 0 ? 0 : t3 > this.utf8Length ? this.utf16Length : this.utf8OffsetToUtf16[t3] : t3;
        }
        convertUtf16OffsetToUtf8(t3) {
          return this.utf16OffsetToUtf8 ? t3 < 0 ? 0 : t3 > this.utf16Length ? this.utf8Length : this.utf16OffsetToUtf8[t3] : t3;
        }
        dispose() {
          this.ptr === s._sharedPtr ? s._sharedPtrInUse = false : this._onigBinding._ofree(this.ptr);
        }
      }
      n2.OnigString = s, s.LAST_ID = 0, s._sharedPtr = 0, s._sharedPtrInUse = false;
      class u {
        constructor(t3) {
          if (!o)
            throw new Error("Must invoke loadWASM first.");
          const n3 = [], e2 = [];
          for (let r3 = 0, i4 = t3.length; r3 < i4; r3++) {
            const i5 = new f(t3[r3]);
            n3[r3] = i5.createString(o), e2[r3] = i5.utf8Length;
          }
          const r2 = o._omalloc(4 * t3.length);
          o.HEAPU32.set(n3, r2 / 4);
          const i3 = o._omalloc(4 * t3.length);
          o.HEAPU32.set(e2, i3 / 4);
          const a2 = o._createOnigScanner(r2, i3, t3.length);
          for (let e3 = 0, r3 = t3.length; e3 < r3; e3++)
            o._ofree(n3[e3]);
          o._ofree(i3), o._ofree(r2), 0 === a2 && function(t4) {
            throw new Error(t4.UTF8ToString(t4._getLastOnigError()));
          }(o), this._onigBinding = o, this._ptr = a2;
        }
        dispose() {
          this._onigBinding._freeOnigScanner(this._ptr);
        }
        findNextMatchSync(t3, n3, e2) {
          let r2 = a, i3 = 0;
          if ("number" == typeof e2 ? (8 & e2 && (r2 = true), i3 = e2) : "boolean" == typeof e2 && (r2 = e2), "string" == typeof t3) {
            t3 = new s(t3);
            const e3 = this._findNextMatchSync(t3, n3, r2, i3);
            return t3.dispose(), e3;
          }
          return this._findNextMatchSync(t3, n3, r2, i3);
        }
        _findNextMatchSync(t3, n3, e2, r2) {
          const i3 = this._onigBinding;
          let o2;
          if (o2 = e2 ? i3._findNextOnigScannerMatchDbg(this._ptr, t3.id, t3.ptr, t3.utf8Length, t3.convertUtf16OffsetToUtf8(n3), r2) : i3._findNextOnigScannerMatch(this._ptr, t3.id, t3.ptr, t3.utf8Length, t3.convertUtf16OffsetToUtf8(n3), r2), 0 === o2)
            return null;
          const a2 = i3.HEAPU32;
          let f2 = o2 / 4;
          const s2 = a2[f2++], u2 = a2[f2++];
          let c2 = [];
          for (let n4 = 0; n4 < u2; n4++) {
            const e3 = t3.convertUtf8OffsetToUtf16(a2[f2++]), r3 = t3.convertUtf8OffsetToUtf16(a2[f2++]);
            c2[n4] = { start: e3, end: r3, length: r3 - e3 };
          }
          return { index: s2, captureIndices: c2 };
        }
      }
      n2.OnigScanner = u;
      let c = false, l = null;
      n2.loadWASM = function(t3) {
        if (c)
          return l;
        let n3, e2, r2, a2;
        if (c = true, function(t4) {
          return "function" == typeof t4.instantiator;
        }(t3))
          n3 = t3.instantiator, e2 = t3.print;
        else {
          let r3;
          !function(t4) {
            return void 0 !== t4.data;
          }(t3) ? r3 = t3 : (r3 = t3.data, e2 = t3.print), n3 = function(t4) {
            return "undefined" != typeof Response && t4 instanceof Response;
          }(r3) ? "function" == typeof WebAssembly.instantiateStreaming ? function(t4) {
            return (n4) => WebAssembly.instantiateStreaming(t4, n4);
          }(r3) : function(t4) {
            return async (n4) => {
              const e3 = await t4.arrayBuffer();
              return WebAssembly.instantiate(e3, n4);
            };
          }(r3) : function(t4) {
            return (n4) => WebAssembly.instantiate(t4, n4);
          }(r3);
        }
        return l = new Promise((t4, n4) => {
          r2 = t4, a2 = n4;
        }), function(t4, n4, e3, r3) {
          (0, i2.default)({ print: n4, instantiateWasm: (n5, e4) => {
            if ("undefined" == typeof performance) {
              const t5 = () => Date.now();
              n5.env.emscripten_get_now = t5, n5.wasi_snapshot_preview1.emscripten_get_now = t5;
            }
            return t4(n5).then((t5) => e4(t5.instance), r3), {};
          } }).then((t5) => {
            o = t5, e3();
          });
        }(n3, e2, r2, a2), l;
      }, n2.createOnigString = function(t3) {
        return new s(t3);
      }, n2.createOnigScanner = function(t3) {
        return new u(t3);
      }, n2.setDefaultDebugCall = function(t3) {
        a = t3;
      };
    }, 418: (t2) => {
      var n2 = ("undefined" != typeof document && document.currentScript && document.currentScript.src, function(t3) {
        var n3, e, r = void 0 !== (t3 = t3 || {}) ? t3 : {};
        r.ready = new Promise(function(t4, r2) {
          n3 = t4, e = r2;
        });
        var i2, o = Object.assign({}, r), s = false, c = "";
        function l(t4) {
          return r.locateFile ? r.locateFile(t4, c) : c + t4;
        }
        i2 = function(t4) {
          let n4;
          return "function" == typeof readbuffer ? new Uint8Array(readbuffer(t4)) : (n4 = read(t4, "binary"), m("object" == typeof n4), n4);
        }, "undefined" != typeof scriptArgs ? scriptArgs : void 0 !== arguments && arguments, "undefined" != typeof onig_print && ("undefined" == typeof console && (console = {}), console.log = onig_print, console.warn = console.error = "undefined" != typeof printErr ? printErr : onig_print);
        var h2, p2, d = r.print || console.log.bind(console), g = r.printErr || console.warn.bind(console);
        Object.assign(r, o), o = null, r.arguments && r.arguments, r.thisProgram && r.thisProgram, r.quit && r.quit, r.wasmBinary && (h2 = r.wasmBinary), r.noExitRuntime, "object" != typeof WebAssembly && k("no native wasm support detected");
        var _ = false;
        function m(t4, n4) {
          t4 || k(n4);
        }
        var y, w, S, v = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0;
        function A(t4, n4, e2) {
          for (var r2 = n4 + e2, i3 = n4; t4[i3] && !(i3 >= r2); )
            ++i3;
          if (i3 - n4 > 16 && t4.buffer && v)
            return v.decode(t4.subarray(n4, i3));
          for (var o2 = ""; n4 < i3; ) {
            var a = t4[n4++];
            if (128 & a) {
              var f = 63 & t4[n4++];
              if (192 != (224 & a)) {
                var s2 = 63 & t4[n4++];
                if ((a = 224 == (240 & a) ? (15 & a) << 12 | f << 6 | s2 : (7 & a) << 18 | f << 12 | s2 << 6 | 63 & t4[n4++]) < 65536)
                  o2 += String.fromCharCode(a);
                else {
                  var u = a - 65536;
                  o2 += String.fromCharCode(55296 | u >> 10, 56320 | 1023 & u);
                }
              } else
                o2 += String.fromCharCode((31 & a) << 6 | f);
            } else
              o2 += String.fromCharCode(a);
          }
          return o2;
        }
        function b(t4, n4) {
          return t4 ? A(w, t4, n4) : "";
        }
        function O(t4) {
          y = t4, r.HEAP8 = new Int8Array(t4), r.HEAP16 = new Int16Array(t4), r.HEAP32 = new Int32Array(t4), r.HEAPU8 = w = new Uint8Array(t4), r.HEAPU16 = new Uint16Array(t4), r.HEAPU32 = S = new Uint32Array(t4), r.HEAPF32 = new Float32Array(t4), r.HEAPF64 = new Float64Array(t4);
        }
        r.INITIAL_MEMORY;
        var U = [], P = [], R = [];
        function x() {
          if (r.preRun)
            for ("function" == typeof r.preRun && (r.preRun = [r.preRun]); r.preRun.length; )
              M(r.preRun.shift());
          G(U);
        }
        function T() {
          G(P);
        }
        function E() {
          if (r.postRun)
            for ("function" == typeof r.postRun && (r.postRun = [r.postRun]); r.postRun.length; )
              I(r.postRun.shift());
          G(R);
        }
        function M(t4) {
          U.unshift(t4);
        }
        function L(t4) {
          P.unshift(t4);
        }
        function I(t4) {
          R.unshift(t4);
        }
        var W = 0, C = null;
        function N(t4) {
          W++, r.monitorRunDependencies && r.monitorRunDependencies(W);
        }
        function j(t4) {
          if (W--, r.monitorRunDependencies && r.monitorRunDependencies(W), 0 == W && C) {
            var n4 = C;
            C = null, n4();
          }
        }
        function k(t4) {
          r.onAbort && r.onAbort(t4), g(t4 = "Aborted(" + t4 + ")"), _ = true, t4 += ". Build with -sASSERTIONS for more info.";
          var n4 = new WebAssembly.RuntimeError(t4);
          throw e(n4), n4;
        }
        var B, H, F = "data:application/octet-stream;base64,";
        function V(t4) {
          return t4.startsWith(F);
        }
        function z(t4) {
          try {
            if (t4 == B && h2)
              return new Uint8Array(h2);
            if (i2)
              return i2(t4);
            throw "both async and sync fetching of the wasm failed";
          } catch (t5) {
            k(t5);
          }
        }
        function q() {
          return h2 || !s || "function" != typeof fetch ? Promise.resolve().then(function() {
            return z(B);
          }) : fetch(B, { credentials: "same-origin" }).then(function(t4) {
            if (!t4.ok)
              throw "failed to load wasm binary file at '" + B + "'";
            return t4.arrayBuffer();
          }).catch(function() {
            return z(B);
          });
        }
        function Y() {
          var t4 = { env: nt, wasi_snapshot_preview1: nt };
          function n4(t5, n5) {
            var e2 = t5.exports;
            r.asm = e2, O((p2 = r.asm.memory).buffer), r.asm.__indirect_function_table, L(r.asm.__wasm_call_ctors), j();
          }
          function i3(t5) {
            n4(t5.instance);
          }
          function o2(n5) {
            return q().then(function(n6) {
              return WebAssembly.instantiate(n6, t4);
            }).then(function(t5) {
              return t5;
            }).then(n5, function(t5) {
              g("failed to asynchronously prepare wasm: " + t5), k(t5);
            });
          }
          if (N(), r.instantiateWasm)
            try {
              return r.instantiateWasm(t4, n4);
            } catch (t5) {
              g("Module.instantiateWasm callback failed with error: " + t5), e(t5);
            }
          return (h2 || "function" != typeof WebAssembly.instantiateStreaming || V(B) || "function" != typeof fetch ? o2(i3) : fetch(B, { credentials: "same-origin" }).then(function(n5) {
            return WebAssembly.instantiateStreaming(n5, t4).then(i3, function(t5) {
              return g("wasm streaming compile failed: " + t5), g("falling back to ArrayBuffer instantiation"), o2(i3);
            });
          })).catch(e), {};
        }
        function G(t4) {
          for (; t4.length > 0; )
            t4.shift()(r);
        }
        function J(t4, n4, e2) {
          w.copyWithin(t4, n4, n4 + e2);
        }
        function K(t4) {
          try {
            return p2.grow(t4 - y.byteLength + 65535 >>> 16), O(p2.buffer), 1;
          } catch (t5) {
          }
        }
        function Q(t4) {
          var n4, e2 = w.length, r2 = 2147483648;
          if ((t4 >>>= 0) > r2)
            return false;
          for (var i3 = 1; i3 <= 4; i3 *= 2) {
            var o2 = e2 * (1 + 0.2 / i3);
            if (o2 = Math.min(o2, t4 + 100663296), K(Math.min(r2, (n4 = Math.max(t4, o2)) + (65536 - n4 % 65536) % 65536)))
              return true;
          }
          return false;
        }
        V(B = "onig.wasm") || (B = l(B)), H = "undefined" != typeof dateNow ? dateNow : () => performance.now();
        var X = [null, [], []];
        function Z(t4, n4) {
          var e2 = X[t4];
          0 === n4 || 10 === n4 ? ((1 === t4 ? d : g)(A(e2, 0)), e2.length = 0) : e2.push(n4);
        }
        function $(t4, n4, e2, r2) {
          for (var i3 = 0, o2 = 0; o2 < e2; o2++) {
            var a = S[n4 >> 2], f = S[n4 + 4 >> 2];
            n4 += 8;
            for (var s2 = 0; s2 < f; s2++)
              Z(t4, w[a + s2]);
            i3 += f;
          }
          return S[r2 >> 2] = i3, 0;
        }
        var tt, nt = { emscripten_get_now: H, emscripten_memcpy_big: J, emscripten_resize_heap: Q, fd_write: $ };
        function et(t4) {
          function e2() {
            tt || (tt = true, r.calledRun = true, _ || (T(), n3(r), r.onRuntimeInitialized && r.onRuntimeInitialized(), E()));
          }
          W > 0 || (x(), W > 0 || (r.setStatus ? (r.setStatus("Running..."), setTimeout(function() {
            setTimeout(function() {
              r.setStatus("");
            }, 1), e2();
          }, 1)) : e2()));
        }
        if (Y(), r.___wasm_call_ctors = function() {
          return (r.___wasm_call_ctors = r.asm.__wasm_call_ctors).apply(null, arguments);
        }, r.___errno_location = function() {
          return (r.___errno_location = r.asm.__errno_location).apply(null, arguments);
        }, r._omalloc = function() {
          return (r._omalloc = r.asm.omalloc).apply(null, arguments);
        }, r._ofree = function() {
          return (r._ofree = r.asm.ofree).apply(null, arguments);
        }, r._getLastOnigError = function() {
          return (r._getLastOnigError = r.asm.getLastOnigError).apply(null, arguments);
        }, r._createOnigScanner = function() {
          return (r._createOnigScanner = r.asm.createOnigScanner).apply(null, arguments);
        }, r._freeOnigScanner = function() {
          return (r._freeOnigScanner = r.asm.freeOnigScanner).apply(null, arguments);
        }, r._findNextOnigScannerMatch = function() {
          return (r._findNextOnigScannerMatch = r.asm.findNextOnigScannerMatch).apply(null, arguments);
        }, r._findNextOnigScannerMatchDbg = function() {
          return (r._findNextOnigScannerMatchDbg = r.asm.findNextOnigScannerMatchDbg).apply(null, arguments);
        }, r.stackSave = function() {
          return (r.stackSave = r.asm.stackSave).apply(null, arguments);
        }, r.stackRestore = function() {
          return (r.stackRestore = r.asm.stackRestore).apply(null, arguments);
        }, r.stackAlloc = function() {
          return (r.stackAlloc = r.asm.stackAlloc).apply(null, arguments);
        }, r.dynCall_jiji = function() {
          return (r.dynCall_jiji = r.asm.dynCall_jiji).apply(null, arguments);
        }, r.UTF8ToString = b, C = function t4() {
          tt || et(), tt || (C = t4);
        }, r.preInit)
          for ("function" == typeof r.preInit && (r.preInit = [r.preInit]); r.preInit.length > 0; )
            r.preInit.pop()();
        return et(), t3.ready;
      });
      t2.exports = n2;
    } }, n = {}, function e(r) {
      var i2 = n[r];
      if (void 0 !== i2)
        return i2.exports;
      var o = n[r] = { exports: {} };
      return t[r].call(o.exports, o, o.exports, e), o.exports;
    }(770);
    var t, n;
  });
})(main$1);
var mainExports$1 = main$1.exports;
var main = { exports: {} };
(function(module, exports) {
  !function(e, t) {
    module.exports = t();
  }(commonjsGlobal, function() {
    return (() => {
      var e = { 350: (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.UseOnigurumaFindOptions = t2.DebugFlags = void 0, t2.DebugFlags = { InDebugMode: "undefined" != typeof process && !!{}.VSCODE_TEXTMATE_DEBUG }, t2.UseOnigurumaFindOptions = false;
      }, 36: (e2, t2) => {
        var n;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.toOptionalTokenType = t2.EncodedTokenAttributes = void 0, (n = t2.EncodedTokenAttributes || (t2.EncodedTokenAttributes = {})).toBinaryStr = function(e3) {
          let t3 = e3.toString(2);
          for (; t3.length < 32; )
            t3 = "0" + t3;
          return t3;
        }, n.print = function(e3) {
          const t3 = n.getLanguageId(e3), s = n.getTokenType(e3), r = n.getFontStyle(e3), i2 = n.getForeground(e3), o = n.getBackground(e3);
          console.log({ languageId: t3, tokenType: s, fontStyle: r, foreground: i2, background: o });
        }, n.getLanguageId = function(e3) {
          return (255 & e3) >>> 0;
        }, n.getTokenType = function(e3) {
          return (768 & e3) >>> 8;
        }, n.containsBalancedBrackets = function(e3) {
          return 0 != (1024 & e3);
        }, n.getFontStyle = function(e3) {
          return (30720 & e3) >>> 11;
        }, n.getForeground = function(e3) {
          return (16744448 & e3) >>> 15;
        }, n.getBackground = function(e3) {
          return (4278190080 & e3) >>> 24;
        }, n.set = function(e3, t3, s, r, i2, o, c) {
          let a = n.getLanguageId(e3), l = n.getTokenType(e3), u = n.containsBalancedBrackets(e3) ? 1 : 0, h2 = n.getFontStyle(e3), p2 = n.getForeground(e3), d = n.getBackground(e3);
          return 0 !== t3 && (a = t3), 8 !== s && (l = s), null !== r && (u = r ? 1 : 0), -1 !== i2 && (h2 = i2), 0 !== o && (p2 = o), 0 !== c && (d = c), (a << 0 | l << 8 | u << 10 | h2 << 11 | p2 << 15 | d << 24) >>> 0;
        }, t2.toOptionalTokenType = function(e3) {
          return e3;
        };
      }, 996: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.BasicScopeAttributesProvider = t2.BasicScopeAttributes = void 0;
        const s = n(878);
        class r {
          constructor(e3, t3) {
            this.languageId = e3, this.tokenType = t3;
          }
        }
        t2.BasicScopeAttributes = r;
        class i2 {
          constructor(e3, t3) {
            this._getBasicScopeAttributes = new s.CachedFn((e4) => {
              const t4 = this._scopeToLanguage(e4), n2 = this._toStandardTokenType(e4);
              return new r(t4, n2);
            }), this._defaultAttributes = new r(e3, 8), this._embeddedLanguagesMatcher = new o(Object.entries(t3 || {}));
          }
          getDefaultAttributes() {
            return this._defaultAttributes;
          }
          getBasicScopeAttributes(e3) {
            return null === e3 ? i2._NULL_SCOPE_METADATA : this._getBasicScopeAttributes.get(e3);
          }
          _scopeToLanguage(e3) {
            return this._embeddedLanguagesMatcher.match(e3) || 0;
          }
          _toStandardTokenType(e3) {
            const t3 = e3.match(i2.STANDARD_TOKEN_TYPE_REGEXP);
            if (!t3)
              return 8;
            switch (t3[1]) {
              case "comment":
                return 1;
              case "string":
                return 2;
              case "regex":
                return 3;
              case "meta.embedded":
                return 0;
            }
            throw new Error("Unexpected match for standard token type!");
          }
        }
        t2.BasicScopeAttributesProvider = i2, i2._NULL_SCOPE_METADATA = new r(0, 0), i2.STANDARD_TOKEN_TYPE_REGEXP = /\b(comment|string|regex|meta\.embedded)\b/;
        class o {
          constructor(e3) {
            if (0 === e3.length)
              this.values = null, this.scopesRegExp = null;
            else {
              this.values = new Map(e3);
              const t3 = e3.map(([e4, t4]) => s.escapeRegExpCharacters(e4));
              t3.sort(), t3.reverse(), this.scopesRegExp = new RegExp(`^((${t3.join(")|(")}))($|\\.)`, "");
            }
          }
          match(e3) {
            if (!this.scopesRegExp)
              return;
            const t3 = e3.match(this.scopesRegExp);
            return t3 ? this.values.get(t3[1]) : void 0;
          }
        }
      }, 947: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.LineTokens = t2.BalancedBracketSelectors = t2.StateStack = t2.AttributedScopeStack = t2.Grammar = t2.createGrammar = void 0;
        const s = n(350), r = n(36), i2 = n(736), o = n(44), c = n(792), a = n(583), l = n(878), u = n(996), h2 = n(47);
        function p2(e3, t3, n2, s2, r2) {
          const o2 = i2.createMatchers(t3, d), a2 = c.RuleFactory.getCompiledRuleId(n2, s2, r2.repository);
          for (const n3 of o2)
            e3.push({ debugSelector: t3, matcher: n3.matcher, ruleId: a2, grammar: r2, priority: n3.priority });
        }
        function d(e3, t3) {
          if (t3.length < e3.length)
            return false;
          let n2 = 0;
          return e3.every((e4) => {
            for (let s2 = n2; s2 < t3.length; s2++)
              if (f(t3[s2], e4))
                return n2 = s2 + 1, true;
            return false;
          });
        }
        function f(e3, t3) {
          if (!e3)
            return false;
          if (e3 === t3)
            return true;
          const n2 = t3.length;
          return e3.length > n2 && e3.substr(0, n2) === t3 && "." === e3[n2];
        }
        t2.createGrammar = function(e3, t3, n2, s2, r2, i3, o2, c2) {
          return new g(e3, t3, n2, s2, r2, i3, o2, c2);
        };
        class g {
          constructor(e3, t3, n2, s2, r2, o2, c2, a2) {
            if (this._rootScopeName = e3, this.balancedBracketSelectors = o2, this._onigLib = a2, this._basicScopeAttributesProvider = new u.BasicScopeAttributesProvider(n2, s2), this._rootId = -1, this._lastRuleId = 0, this._ruleId2desc = [null], this._includedGrammars = {}, this._grammarRepository = c2, this._grammar = m(t3, null), this._injections = null, this._tokenTypeMatchers = [], r2)
              for (const e4 of Object.keys(r2)) {
                const t4 = i2.createMatchers(e4, d);
                for (const n3 of t4)
                  this._tokenTypeMatchers.push({ matcher: n3.matcher, type: r2[e4] });
              }
          }
          get themeProvider() {
            return this._grammarRepository;
          }
          dispose() {
            for (const e3 of this._ruleId2desc)
              e3 && e3.dispose();
          }
          createOnigScanner(e3) {
            return this._onigLib.createOnigScanner(e3);
          }
          createOnigString(e3) {
            return this._onigLib.createOnigString(e3);
          }
          getMetadataForScope(e3) {
            return this._basicScopeAttributesProvider.getBasicScopeAttributes(e3);
          }
          _collectInjections() {
            const e3 = [], t3 = this._rootScopeName, n2 = ((e4) => e4 === this._rootScopeName ? this._grammar : this.getExternalGrammar(e4))(t3);
            if (n2) {
              const s2 = n2.injections;
              if (s2)
                for (let t4 in s2)
                  p2(e3, t4, s2[t4], this, n2);
              const r2 = this._grammarRepository.injections(t3);
              r2 && r2.forEach((t4) => {
                const n3 = this.getExternalGrammar(t4);
                if (n3) {
                  const t5 = n3.injectionSelector;
                  t5 && p2(e3, t5, n3, this, n3);
                }
              });
            }
            return e3.sort((e4, t4) => e4.priority - t4.priority), e3;
          }
          getInjections() {
            if (null === this._injections && (this._injections = this._collectInjections(), s.DebugFlags.InDebugMode && this._injections.length > 0)) {
              console.log(`Grammar ${this._rootScopeName} contains the following injections:`);
              for (const e3 of this._injections)
                console.log(`  - ${e3.debugSelector}`);
            }
            return this._injections;
          }
          registerRule(e3) {
            const t3 = ++this._lastRuleId, n2 = e3(c.ruleIdFromNumber(t3));
            return this._ruleId2desc[t3] = n2, n2;
          }
          getRule(e3) {
            return this._ruleId2desc[c.ruleIdToNumber(e3)];
          }
          getExternalGrammar(e3, t3) {
            if (this._includedGrammars[e3])
              return this._includedGrammars[e3];
            if (this._grammarRepository) {
              const n2 = this._grammarRepository.lookup(e3);
              if (n2)
                return this._includedGrammars[e3] = m(n2, t3 && t3.$base), this._includedGrammars[e3];
            }
          }
          tokenizeLine(e3, t3, n2 = 0) {
            const s2 = this._tokenize(e3, t3, false, n2);
            return { tokens: s2.lineTokens.getResult(s2.ruleStack, s2.lineLength), ruleStack: s2.ruleStack, stoppedEarly: s2.stoppedEarly };
          }
          tokenizeLine2(e3, t3, n2 = 0) {
            const s2 = this._tokenize(e3, t3, true, n2);
            return { tokens: s2.lineTokens.getBinaryResult(s2.ruleStack, s2.lineLength), ruleStack: s2.ruleStack, stoppedEarly: s2.stoppedEarly };
          }
          _tokenize(e3, t3, n2, s2) {
            let i3;
            if (-1 === this._rootId && (this._rootId = c.RuleFactory.getCompiledRuleId(this._grammar.repository.$self, this, this._grammar.repository)), t3 && t3 !== b.NULL)
              i3 = false, t3.reset();
            else {
              i3 = true;
              const e4 = this._basicScopeAttributesProvider.getDefaultAttributes(), n3 = this.themeProvider.getDefaults(), s3 = r.EncodedTokenAttributes.set(0, e4.languageId, e4.tokenType, null, n3.fontStyle, n3.foregroundId, n3.backgroundId), o2 = this.getRule(this._rootId).getName(null, null);
              let c2;
              c2 = o2 ? _.createRootAndLookUpScopeName(o2, s3, this) : _.createRoot("unknown", s3), t3 = new b(null, this._rootId, -1, -1, false, null, c2, c2);
            }
            e3 += "\n";
            const a2 = this.createOnigString(e3), l2 = a2.content.length, u2 = new y(n2, e3, this._tokenTypeMatchers, this.balancedBracketSelectors), p3 = h2._tokenizeString(this, a2, i3, 0, t3, u2, true, s2);
            return o.disposeOnigString(a2), { lineLength: l2, lineTokens: u2, ruleStack: p3.stack, stoppedEarly: p3.stoppedEarly };
          }
        }
        function m(e3, t3) {
          return (e3 = l.clone(e3)).repository = e3.repository || {}, e3.repository.$self = { $vscodeTextmateLocation: e3.$vscodeTextmateLocation, patterns: e3.patterns, name: e3.scopeName }, e3.repository.$base = t3 || e3.repository.$self, e3;
        }
        t2.Grammar = g;
        class _ {
          constructor(e3, t3, n2) {
            this.parent = e3, this.scopePath = t3, this.tokenAttributes = n2;
          }
          static createRoot(e3, t3) {
            return new _(null, new a.ScopeStack(null, e3), t3);
          }
          static createRootAndLookUpScopeName(e3, t3, n2) {
            const s2 = n2.getMetadataForScope(e3), r2 = new a.ScopeStack(null, e3), i3 = n2.themeProvider.themeMatch(r2), o2 = _.mergeAttributes(t3, s2, i3);
            return new _(null, r2, o2);
          }
          get scopeName() {
            return this.scopePath.scopeName;
          }
          equals(e3) {
            return _._equals(this, e3);
          }
          static _equals(e3, t3) {
            for (; ; ) {
              if (e3 === t3)
                return true;
              if (!e3 && !t3)
                return true;
              if (!e3 || !t3)
                return false;
              if (e3.scopeName !== t3.scopeName || e3.tokenAttributes !== t3.tokenAttributes)
                return false;
              e3 = e3.parent, t3 = t3.parent;
            }
          }
          static mergeAttributes(e3, t3, n2) {
            let s2 = -1, i3 = 0, o2 = 0;
            return null !== n2 && (s2 = n2.fontStyle, i3 = n2.foregroundId, o2 = n2.backgroundId), r.EncodedTokenAttributes.set(e3, t3.languageId, t3.tokenType, null, s2, i3, o2);
          }
          pushAttributed(e3, t3) {
            if (null === e3)
              return this;
            if (-1 === e3.indexOf(" "))
              return _._pushAttributed(this, e3, t3);
            const n2 = e3.split(/ /g);
            let s2 = this;
            for (const e4 of n2)
              s2 = _._pushAttributed(s2, e4, t3);
            return s2;
          }
          static _pushAttributed(e3, t3, n2) {
            const s2 = n2.getMetadataForScope(t3), r2 = e3.scopePath.push(t3), i3 = n2.themeProvider.themeMatch(r2), o2 = _.mergeAttributes(e3.tokenAttributes, s2, i3);
            return new _(e3, r2, o2);
          }
          getScopeNames() {
            return this.scopePath.getSegments();
          }
        }
        t2.AttributedScopeStack = _;
        class b {
          constructor(e3, t3, n2, s2, r2, i3, o2, c2) {
            this.parent = e3, this.ruleId = t3, this.beginRuleCapturedEOL = r2, this.endRule = i3, this.nameScopesList = o2, this.contentNameScopesList = c2, this._stackElementBrand = void 0, this.depth = this.parent ? this.parent.depth + 1 : 1, this._enterPos = n2, this._anchorPos = s2;
          }
          equals(e3) {
            return null !== e3 && b._equals(this, e3);
          }
          static _equals(e3, t3) {
            return e3 === t3 || !!this._structuralEquals(e3, t3) && e3.contentNameScopesList.equals(t3.contentNameScopesList);
          }
          static _structuralEquals(e3, t3) {
            for (; ; ) {
              if (e3 === t3)
                return true;
              if (!e3 && !t3)
                return true;
              if (!e3 || !t3)
                return false;
              if (e3.depth !== t3.depth || e3.ruleId !== t3.ruleId || e3.endRule !== t3.endRule)
                return false;
              e3 = e3.parent, t3 = t3.parent;
            }
          }
          clone() {
            return this;
          }
          static _reset(e3) {
            for (; e3; )
              e3._enterPos = -1, e3._anchorPos = -1, e3 = e3.parent;
          }
          reset() {
            b._reset(this);
          }
          pop() {
            return this.parent;
          }
          safePop() {
            return this.parent ? this.parent : this;
          }
          push(e3, t3, n2, s2, r2, i3, o2) {
            return new b(this, e3, t3, n2, s2, r2, i3, o2);
          }
          getEnterPos() {
            return this._enterPos;
          }
          getAnchorPos() {
            return this._anchorPos;
          }
          getRule(e3) {
            return e3.getRule(this.ruleId);
          }
          toString() {
            const e3 = [];
            return this._writeString(e3, 0), "[" + e3.join(",") + "]";
          }
          _writeString(e3, t3) {
            return this.parent && (t3 = this.parent._writeString(e3, t3)), e3[t3++] = `(${this.ruleId}, TODO-${this.nameScopesList}, TODO-${this.contentNameScopesList})`, t3;
          }
          withContentNameScopesList(e3) {
            return this.contentNameScopesList === e3 ? this : this.parent.push(this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, this.endRule, this.nameScopesList, e3);
          }
          withEndRule(e3) {
            return this.endRule === e3 ? this : new b(this.parent, this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, e3, this.nameScopesList, this.contentNameScopesList);
          }
          hasSameRuleAs(e3) {
            let t3 = this;
            for (; t3 && t3._enterPos === e3._enterPos; ) {
              if (t3.ruleId === e3.ruleId)
                return true;
              t3 = t3.parent;
            }
            return false;
          }
        }
        t2.StateStack = b, b.NULL = new b(null, 0, 0, 0, false, null, null, null), t2.BalancedBracketSelectors = class {
          constructor(e3, t3) {
            this.allowAny = false, this.balancedBracketScopes = e3.flatMap((e4) => "*" === e4 ? (this.allowAny = true, []) : i2.createMatchers(e4, d).map((e5) => e5.matcher)), this.unbalancedBracketScopes = t3.flatMap((e4) => i2.createMatchers(e4, d).map((e5) => e5.matcher));
          }
          get matchesAlways() {
            return this.allowAny && 0 === this.unbalancedBracketScopes.length;
          }
          get matchesNever() {
            return 0 === this.balancedBracketScopes.length && !this.allowAny;
          }
          match(e3) {
            for (const t3 of this.unbalancedBracketScopes)
              if (t3(e3))
                return false;
            for (const t3 of this.balancedBracketScopes)
              if (t3(e3))
                return true;
            return this.allowAny;
          }
        };
        class y {
          constructor(e3, t3, n2, r2) {
            this.balancedBracketSelectors = r2, this._emitBinaryTokens = e3, this._tokenTypeOverrides = n2, s.DebugFlags.InDebugMode ? this._lineText = t3 : this._lineText = null, this._tokens = [], this._binaryTokens = [], this._lastTokenEndIndex = 0;
          }
          produce(e3, t3) {
            this.produceFromScopes(e3.contentNameScopesList, t3);
          }
          produceFromScopes(e3, t3) {
            var _a;
            if (this._lastTokenEndIndex >= t3)
              return;
            if (this._emitBinaryTokens) {
              let n3 = e3.tokenAttributes, i3 = false;
              if (((_a = this.balancedBracketSelectors) == null ? void 0 : _a.matchesAlways) && (i3 = true), this._tokenTypeOverrides.length > 0 || this.balancedBracketSelectors && !this.balancedBracketSelectors.matchesAlways && !this.balancedBracketSelectors.matchesNever) {
                const t4 = e3.getScopeNames();
                for (const e4 of this._tokenTypeOverrides)
                  e4.matcher(t4) && (n3 = r.EncodedTokenAttributes.set(n3, 0, r.toOptionalTokenType(e4.type), null, -1, 0, 0));
                this.balancedBracketSelectors && (i3 = this.balancedBracketSelectors.match(t4));
              }
              if (i3 && (n3 = r.EncodedTokenAttributes.set(n3, 0, 8, i3, -1, 0, 0)), this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 1] === n3)
                return void (this._lastTokenEndIndex = t3);
              if (s.DebugFlags.InDebugMode) {
                const n4 = e3.getScopeNames();
                console.log("  token: |" + this._lineText.substring(this._lastTokenEndIndex, t3).replace(/\n$/, "\\n") + "|");
                for (let e4 = 0; e4 < n4.length; e4++)
                  console.log("      * " + n4[e4]);
              }
              return this._binaryTokens.push(this._lastTokenEndIndex), this._binaryTokens.push(n3), void (this._lastTokenEndIndex = t3);
            }
            const n2 = e3.getScopeNames();
            if (s.DebugFlags.InDebugMode) {
              console.log("  token: |" + this._lineText.substring(this._lastTokenEndIndex, t3).replace(/\n$/, "\\n") + "|");
              for (let e4 = 0; e4 < n2.length; e4++)
                console.log("      * " + n2[e4]);
            }
            this._tokens.push({ startIndex: this._lastTokenEndIndex, endIndex: t3, scopes: n2 }), this._lastTokenEndIndex = t3;
          }
          getResult(e3, t3) {
            return this._tokens.length > 0 && this._tokens[this._tokens.length - 1].startIndex === t3 - 1 && this._tokens.pop(), 0 === this._tokens.length && (this._lastTokenEndIndex = -1, this.produce(e3, t3), this._tokens[this._tokens.length - 1].startIndex = 0), this._tokens;
          }
          getBinaryResult(e3, t3) {
            this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 2] === t3 - 1 && (this._binaryTokens.pop(), this._binaryTokens.pop()), 0 === this._binaryTokens.length && (this._lastTokenEndIndex = -1, this.produce(e3, t3), this._binaryTokens[this._binaryTokens.length - 2] = 0);
            const n2 = new Uint32Array(this._binaryTokens.length);
            for (let e4 = 0, t4 = this._binaryTokens.length; e4 < t4; e4++)
              n2[e4] = this._binaryTokens[e4];
            return n2;
          }
        }
        t2.LineTokens = y;
      }, 965: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.parseInclude = t2.TopLevelRepositoryReference = t2.TopLevelReference = t2.RelativeReference = t2.SelfReference = t2.BaseReference = t2.ScopeDependencyProcessor = t2.ExternalReferenceCollector = t2.TopLevelRepositoryRuleReference = t2.TopLevelRuleReference = void 0;
        const s = n(878);
        class r {
          constructor(e3) {
            this.scopeName = e3;
          }
          toKey() {
            return this.scopeName;
          }
        }
        t2.TopLevelRuleReference = r;
        class i2 {
          constructor(e3, t3) {
            this.scopeName = e3, this.ruleName = t3;
          }
          toKey() {
            return `${this.scopeName}#${this.ruleName}`;
          }
        }
        t2.TopLevelRepositoryRuleReference = i2;
        class o {
          constructor() {
            this._references = [], this._seenReferenceKeys = /* @__PURE__ */ new Set(), this.visitedRule = /* @__PURE__ */ new Set();
          }
          get references() {
            return this._references;
          }
          add(e3) {
            const t3 = e3.toKey();
            this._seenReferenceKeys.has(t3) || (this._seenReferenceKeys.add(t3), this._references.push(e3));
          }
        }
        function c(e3, t3, n2, s2) {
          const i3 = n2.lookup(e3.scopeName);
          if (!i3) {
            if (e3.scopeName === t3)
              throw new Error(`No grammar provided for <${t3}>`);
            return;
          }
          const o2 = n2.lookup(t3);
          e3 instanceof r ? l({ baseGrammar: o2, selfGrammar: i3 }, s2) : a(e3.ruleName, { baseGrammar: o2, selfGrammar: i3, repository: i3.repository }, s2);
          const c2 = n2.injections(e3.scopeName);
          if (c2)
            for (const e4 of c2)
              s2.add(new r(e4));
        }
        function a(e3, t3, n2) {
          t3.repository && t3.repository[e3] && u([t3.repository[e3]], t3, n2);
        }
        function l(e3, t3) {
          e3.selfGrammar.patterns && Array.isArray(e3.selfGrammar.patterns) && u(e3.selfGrammar.patterns, { ...e3, repository: e3.selfGrammar.repository }, t3), e3.selfGrammar.injections && u(Object.values(e3.selfGrammar.injections), { ...e3, repository: e3.selfGrammar.repository }, t3);
        }
        function u(e3, t3, n2) {
          for (const o2 of e3) {
            if (n2.visitedRule.has(o2))
              continue;
            n2.visitedRule.add(o2);
            const e4 = o2.repository ? s.mergeObjects({}, t3.repository, o2.repository) : t3.repository;
            Array.isArray(o2.patterns) && u(o2.patterns, { ...t3, repository: e4 }, n2);
            const c2 = o2.include;
            if (!c2)
              continue;
            const h3 = m(c2);
            switch (h3.kind) {
              case 0:
                l({ ...t3, selfGrammar: t3.baseGrammar }, n2);
                break;
              case 1:
                l(t3, n2);
                break;
              case 2:
                a(h3.ruleName, { ...t3, repository: e4 }, n2);
                break;
              case 3:
              case 4:
                const s2 = h3.scopeName === t3.selfGrammar.scopeName ? t3.selfGrammar : h3.scopeName === t3.baseGrammar.scopeName ? t3.baseGrammar : void 0;
                if (s2) {
                  const r2 = { baseGrammar: t3.baseGrammar, selfGrammar: s2, repository: e4 };
                  4 === h3.kind ? a(h3.ruleName, r2, n2) : l(r2, n2);
                } else
                  4 === h3.kind ? n2.add(new i2(h3.scopeName, h3.ruleName)) : n2.add(new r(h3.scopeName));
            }
          }
        }
        t2.ExternalReferenceCollector = o, t2.ScopeDependencyProcessor = class {
          constructor(e3, t3) {
            this.repo = e3, this.initialScopeName = t3, this.seenFullScopeRequests = /* @__PURE__ */ new Set(), this.seenPartialScopeRequests = /* @__PURE__ */ new Set(), this.seenFullScopeRequests.add(this.initialScopeName), this.Q = [new r(this.initialScopeName)];
          }
          processQueue() {
            const e3 = this.Q;
            this.Q = [];
            const t3 = new o();
            for (const n2 of e3)
              c(n2, this.initialScopeName, this.repo, t3);
            for (const e4 of t3.references)
              if (e4 instanceof r) {
                if (this.seenFullScopeRequests.has(e4.scopeName))
                  continue;
                this.seenFullScopeRequests.add(e4.scopeName), this.Q.push(e4);
              } else {
                if (this.seenFullScopeRequests.has(e4.scopeName))
                  continue;
                if (this.seenPartialScopeRequests.has(e4.toKey()))
                  continue;
                this.seenPartialScopeRequests.add(e4.toKey()), this.Q.push(e4);
              }
          }
        };
        class h2 {
          constructor() {
            this.kind = 0;
          }
        }
        t2.BaseReference = h2;
        class p2 {
          constructor() {
            this.kind = 1;
          }
        }
        t2.SelfReference = p2;
        class d {
          constructor(e3) {
            this.ruleName = e3, this.kind = 2;
          }
        }
        t2.RelativeReference = d;
        class f {
          constructor(e3) {
            this.scopeName = e3, this.kind = 3;
          }
        }
        t2.TopLevelReference = f;
        class g {
          constructor(e3, t3) {
            this.scopeName = e3, this.ruleName = t3, this.kind = 4;
          }
        }
        function m(e3) {
          if ("$base" === e3)
            return new h2();
          if ("$self" === e3)
            return new p2();
          const t3 = e3.indexOf("#");
          if (-1 === t3)
            return new f(e3);
          if (0 === t3)
            return new d(e3.substring(1));
          {
            const n2 = e3.substring(0, t3), s2 = e3.substring(t3 + 1);
            return new g(n2, s2);
          }
        }
        t2.TopLevelRepositoryReference = g, t2.parseInclude = m;
      }, 391: function(e2, t2, n) {
        var s = this && this.__createBinding || (Object.create ? function(e3, t3, n2, s2) {
          void 0 === s2 && (s2 = n2), Object.defineProperty(e3, s2, { enumerable: true, get: function() {
            return t3[n2];
          } });
        } : function(e3, t3, n2, s2) {
          void 0 === s2 && (s2 = n2), e3[s2] = t3[n2];
        }), r = this && this.__exportStar || function(e3, t3) {
          for (var n2 in e3)
            "default" === n2 || Object.prototype.hasOwnProperty.call(t3, n2) || s(t3, e3, n2);
        };
        Object.defineProperty(t2, "__esModule", { value: true }), r(n(947), t2);
      }, 47: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.LocalStackElement = t2._tokenizeString = void 0;
        const s = n(350), r = n(44), i2 = n(792), o = n(878);
        class c {
          constructor(e3, t3) {
            this.stack = e3, this.stoppedEarly = t3;
          }
        }
        function a(e3, t3, n2, r2, a2, h3, d2, f) {
          const g = t3.content.length;
          let m = false, _ = -1;
          if (d2) {
            const o2 = function(e4, t4, n3, r3, o3, c2) {
              let a3 = o3.beginRuleCapturedEOL ? 0 : -1;
              const l2 = [];
              for (let t5 = o3; t5; t5 = t5.pop()) {
                const n4 = t5.getRule(e4);
                n4 instanceof i2.BeginWhileRule && l2.push({ rule: n4, stack: t5 });
              }
              for (let h4 = l2.pop(); h4; h4 = l2.pop()) {
                const { ruleScanner: l3, findOptions: d3 } = u(h4.rule, e4, h4.stack.endRule, n3, r3 === a3), f2 = l3.findNextMatchSync(t4, r3, d3);
                if (s.DebugFlags.InDebugMode && (console.log("  scanning for while rule"), console.log(l3.toString())), !f2) {
                  s.DebugFlags.InDebugMode && console.log("  popping " + h4.rule.debugName + " - " + h4.rule.debugWhileRegExp), o3 = h4.stack.pop();
                  break;
                }
                if (f2.ruleId !== i2.whileRuleId) {
                  o3 = h4.stack.pop();
                  break;
                }
                f2.captureIndices && f2.captureIndices.length && (c2.produce(h4.stack, f2.captureIndices[0].start), p2(e4, t4, n3, h4.stack, c2, h4.rule.whileCaptures, f2.captureIndices), c2.produce(h4.stack, f2.captureIndices[0].end), a3 = f2.captureIndices[0].end, f2.captureIndices[0].end > r3 && (r3 = f2.captureIndices[0].end, n3 = false));
              }
              return { stack: o3, linePos: r3, anchorPosition: a3, isFirstLine: n3 };
            }(e3, t3, n2, r2, a2, h3);
            a2 = o2.stack, r2 = o2.linePos, n2 = o2.isFirstLine, _ = o2.anchorPosition;
          }
          const b = Date.now();
          for (; !m; ) {
            if (0 !== f && Date.now() - b > f)
              return new c(a2, true);
            y();
          }
          return new c(a2, false);
          function y() {
            s.DebugFlags.InDebugMode && (console.log(""), console.log(`@@scanNext ${r2}: |${t3.content.substr(r2).replace(/\n$/, "\\n")}|`));
            const c2 = function(e4, t4, n3, r3, i3, c3) {
              const a3 = function(e5, t5, n4, r4, i4, c4) {
                const a4 = i4.getRule(e5), { ruleScanner: u4, findOptions: h5 } = l(a4, e5, i4.endRule, n4, r4 === c4);
                let p4 = 0;
                s.DebugFlags.InDebugMode && (p4 = o.performanceNow());
                const d5 = u4.findNextMatchSync(t5, r4, h5);
                if (s.DebugFlags.InDebugMode) {
                  const e6 = o.performanceNow() - p4;
                  e6 > 5 && console.warn(`Rule ${a4.debugName} (${a4.id}) matching took ${e6} against '${t5}'`), console.log(`  scanning for (linePos: ${r4}, anchorPosition: ${c4})`), console.log(u4.toString()), d5 && console.log(`matched rule id: ${d5.ruleId} from ${d5.captureIndices[0].start} to ${d5.captureIndices[0].end}`);
                }
                return d5 ? { captureIndices: d5.captureIndices, matchedRuleId: d5.ruleId } : null;
              }(e4, t4, n3, r3, i3, c3), u3 = e4.getInjections();
              if (0 === u3.length)
                return a3;
              const h4 = function(e5, t5, n4, r4, i4, o2, c4) {
                let a4, u4 = Number.MAX_VALUE, h5 = null, p4 = 0;
                const d5 = o2.contentNameScopesList.getScopeNames();
                for (let o3 = 0, f3 = e5.length; o3 < f3; o3++) {
                  const f4 = e5[o3];
                  if (!f4.matcher(d5))
                    continue;
                  const g2 = t5.getRule(f4.ruleId), { ruleScanner: m2, findOptions: _2 } = l(g2, t5, null, r4, i4 === c4), b2 = m2.findNextMatchSync(n4, i4, _2);
                  if (!b2)
                    continue;
                  s.DebugFlags.InDebugMode && (console.log(`  matched injection: ${f4.debugSelector}`), console.log(m2.toString()));
                  const y2 = b2.captureIndices[0].start;
                  if (!(y2 >= u4) && (u4 = y2, h5 = b2.captureIndices, a4 = b2.ruleId, p4 = f4.priority, u4 === i4))
                    break;
                }
                return h5 ? { priorityMatch: -1 === p4, captureIndices: h5, matchedRuleId: a4 } : null;
              }(u3, e4, t4, n3, r3, i3, c3);
              if (!h4)
                return a3;
              if (!a3)
                return h4;
              const p3 = a3.captureIndices[0].start, d4 = h4.captureIndices[0].start;
              return d4 < p3 || h4.priorityMatch && d4 === p3 ? h4 : a3;
            }(e3, t3, n2, r2, a2, _);
            if (!c2)
              return s.DebugFlags.InDebugMode && console.log("  no more matches."), h3.produce(a2, g), void (m = true);
            const u2 = c2.captureIndices, d3 = c2.matchedRuleId, f2 = !!(u2 && u2.length > 0) && u2[0].end > r2;
            if (d3 === i2.endRuleId) {
              const i3 = a2.getRule(e3);
              s.DebugFlags.InDebugMode && console.log("  popping " + i3.debugName + " - " + i3.debugEndRegExp), h3.produce(a2, u2[0].start), a2 = a2.withContentNameScopesList(a2.nameScopesList), p2(e3, t3, n2, a2, h3, i3.endCaptures, u2), h3.produce(a2, u2[0].end);
              const o2 = a2;
              if (a2 = a2.parent, _ = o2.getAnchorPos(), !f2 && o2.getEnterPos() === r2)
                return s.DebugFlags.InDebugMode && console.error("[1] - Grammar is in an endless loop - Grammar pushed & popped a rule without advancing"), a2 = o2, h3.produce(a2, g), void (m = true);
            } else {
              const o2 = e3.getRule(d3);
              h3.produce(a2, u2[0].start);
              const c3 = a2, l2 = o2.getName(t3.content, u2), b2 = a2.contentNameScopesList.pushAttributed(l2, e3);
              if (a2 = a2.push(d3, r2, _, u2[0].end === g, null, b2, b2), o2 instanceof i2.BeginEndRule) {
                const r3 = o2;
                s.DebugFlags.InDebugMode && console.log("  pushing " + r3.debugName + " - " + r3.debugBeginRegExp), p2(e3, t3, n2, a2, h3, r3.beginCaptures, u2), h3.produce(a2, u2[0].end), _ = u2[0].end;
                const i3 = r3.getContentName(t3.content, u2), l3 = b2.pushAttributed(i3, e3);
                if (a2 = a2.withContentNameScopesList(l3), r3.endHasBackReferences && (a2 = a2.withEndRule(r3.getEndWithResolvedBackReferences(t3.content, u2))), !f2 && c3.hasSameRuleAs(a2))
                  return s.DebugFlags.InDebugMode && console.error("[2] - Grammar is in an endless loop - Grammar pushed the same rule without advancing"), a2 = a2.pop(), h3.produce(a2, g), void (m = true);
              } else if (o2 instanceof i2.BeginWhileRule) {
                const r3 = o2;
                s.DebugFlags.InDebugMode && console.log("  pushing " + r3.debugName), p2(e3, t3, n2, a2, h3, r3.beginCaptures, u2), h3.produce(a2, u2[0].end), _ = u2[0].end;
                const i3 = r3.getContentName(t3.content, u2), l3 = b2.pushAttributed(i3, e3);
                if (a2 = a2.withContentNameScopesList(l3), r3.whileHasBackReferences && (a2 = a2.withEndRule(r3.getWhileWithResolvedBackReferences(t3.content, u2))), !f2 && c3.hasSameRuleAs(a2))
                  return s.DebugFlags.InDebugMode && console.error("[3] - Grammar is in an endless loop - Grammar pushed the same rule without advancing"), a2 = a2.pop(), h3.produce(a2, g), void (m = true);
              } else {
                const r3 = o2;
                if (s.DebugFlags.InDebugMode && console.log("  matched " + r3.debugName + " - " + r3.debugMatchRegExp), p2(e3, t3, n2, a2, h3, r3.captures, u2), h3.produce(a2, u2[0].end), a2 = a2.pop(), !f2)
                  return s.DebugFlags.InDebugMode && console.error("[4] - Grammar is in an endless loop - Grammar is not advancing, nor is it pushing/popping"), a2 = a2.safePop(), h3.produce(a2, g), void (m = true);
              }
            }
            u2[0].end > r2 && (r2 = u2[0].end, n2 = false);
          }
        }
        function l(e3, t3, n2, r2, i3) {
          return s.UseOnigurumaFindOptions ? { ruleScanner: e3.compile(t3, n2), findOptions: h2(r2, i3) } : { ruleScanner: e3.compileAG(t3, n2, r2, i3), findOptions: 0 };
        }
        function u(e3, t3, n2, r2, i3) {
          return s.UseOnigurumaFindOptions ? { ruleScanner: e3.compileWhile(t3, n2), findOptions: h2(r2, i3) } : { ruleScanner: e3.compileWhileAG(t3, n2, r2, i3), findOptions: 0 };
        }
        function h2(e3, t3) {
          let n2 = 0;
          return e3 || (n2 |= 1), t3 || (n2 |= 4), n2;
        }
        function p2(e3, t3, n2, s2, i3, o2, c2) {
          if (0 === o2.length)
            return;
          const l2 = t3.content, u2 = Math.min(o2.length, c2.length), h3 = [], p3 = c2[0].end;
          for (let t4 = 0; t4 < u2; t4++) {
            const u3 = o2[t4];
            if (null === u3)
              continue;
            const f = c2[t4];
            if (0 === f.length)
              continue;
            if (f.start > p3)
              break;
            for (; h3.length > 0 && h3[h3.length - 1].endPos <= f.start; )
              i3.produceFromScopes(h3[h3.length - 1].scopes, h3[h3.length - 1].endPos), h3.pop();
            if (h3.length > 0 ? i3.produceFromScopes(h3[h3.length - 1].scopes, f.start) : i3.produce(s2, f.start), u3.retokenizeCapturedWithRuleId) {
              const t5 = u3.getName(l2, c2), o3 = s2.contentNameScopesList.pushAttributed(t5, e3), h4 = u3.getContentName(l2, c2), p4 = o3.pushAttributed(h4, e3), d2 = s2.push(u3.retokenizeCapturedWithRuleId, f.start, -1, false, null, o3, p4), g2 = e3.createOnigString(l2.substring(0, f.end));
              a(e3, g2, n2 && 0 === f.start, f.start, d2, i3, false, 0), r.disposeOnigString(g2);
              continue;
            }
            const g = u3.getName(l2, c2);
            if (null !== g) {
              const t5 = (h3.length > 0 ? h3[h3.length - 1].scopes : s2.contentNameScopesList).pushAttributed(g, e3);
              h3.push(new d(t5, f.end));
            }
          }
          for (; h3.length > 0; )
            i3.produceFromScopes(h3[h3.length - 1].scopes, h3[h3.length - 1].endPos), h3.pop();
        }
        t2._tokenizeString = a;
        class d {
          constructor(e3, t3) {
            this.scopes = e3, this.endPos = t3;
          }
        }
        t2.LocalStackElement = d;
      }, 974: (e2, t2) => {
        function n(e3, t3) {
          throw new Error("Near offset " + e3.pos + ": " + t3 + " ~~~" + e3.source.substr(e3.pos, 50) + "~~~");
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.parseJSON = void 0, t2.parseJSON = function(e3, t3, o) {
          let c = new s(e3), a = new r(), l = 0, u = null, h2 = [], p2 = [];
          function d() {
            h2.push(l), p2.push(u);
          }
          function f() {
            l = h2.pop(), u = p2.pop();
          }
          function g(e4) {
            n(c, e4);
          }
          for (; i2(c, a); ) {
            if (0 === l) {
              if (null !== u && g("too many constructs in root"), 3 === a.type) {
                u = {}, o && (u.$vscodeTextmateLocation = a.toLocation(t3)), d(), l = 1;
                continue;
              }
              if (2 === a.type) {
                u = [], d(), l = 4;
                continue;
              }
              g("unexpected token in root");
            }
            if (2 === l) {
              if (5 === a.type) {
                f();
                continue;
              }
              if (7 === a.type) {
                l = 3;
                continue;
              }
              g("expected , or }");
            }
            if (1 === l || 3 === l) {
              if (1 === l && 5 === a.type) {
                f();
                continue;
              }
              if (1 === a.type) {
                let e4 = a.value;
                if (i2(c, a) && 6 === a.type || g("expected colon"), i2(c, a) || g("expected value"), l = 2, 1 === a.type) {
                  u[e4] = a.value;
                  continue;
                }
                if (8 === a.type) {
                  u[e4] = null;
                  continue;
                }
                if (9 === a.type) {
                  u[e4] = true;
                  continue;
                }
                if (10 === a.type) {
                  u[e4] = false;
                  continue;
                }
                if (11 === a.type) {
                  u[e4] = parseFloat(a.value);
                  continue;
                }
                if (2 === a.type) {
                  let t4 = [];
                  u[e4] = t4, d(), l = 4, u = t4;
                  continue;
                }
                if (3 === a.type) {
                  let n2 = {};
                  o && (n2.$vscodeTextmateLocation = a.toLocation(t3)), u[e4] = n2, d(), l = 1, u = n2;
                  continue;
                }
              }
              g("unexpected token in dict");
            }
            if (5 === l) {
              if (4 === a.type) {
                f();
                continue;
              }
              if (7 === a.type) {
                l = 6;
                continue;
              }
              g("expected , or ]");
            }
            if (4 === l || 6 === l) {
              if (4 === l && 4 === a.type) {
                f();
                continue;
              }
              if (l = 5, 1 === a.type) {
                u.push(a.value);
                continue;
              }
              if (8 === a.type) {
                u.push(null);
                continue;
              }
              if (9 === a.type) {
                u.push(true);
                continue;
              }
              if (10 === a.type) {
                u.push(false);
                continue;
              }
              if (11 === a.type) {
                u.push(parseFloat(a.value));
                continue;
              }
              if (2 === a.type) {
                let e4 = [];
                u.push(e4), d(), l = 4, u = e4;
                continue;
              }
              if (3 === a.type) {
                let e4 = {};
                o && (e4.$vscodeTextmateLocation = a.toLocation(t3)), u.push(e4), d(), l = 1, u = e4;
                continue;
              }
              g("unexpected token in array");
            }
            g("unknown state");
          }
          return 0 !== p2.length && g("unclosed constructs"), u;
        };
        class s {
          constructor(e3) {
            this.source = e3, this.pos = 0, this.len = e3.length, this.line = 1, this.char = 0;
          }
        }
        class r {
          constructor() {
            this.value = null, this.type = 0, this.offset = -1, this.len = -1, this.line = -1, this.char = -1;
          }
          toLocation(e3) {
            return { filename: e3, line: this.line, char: this.char };
          }
        }
        function i2(e3, t3) {
          t3.value = null, t3.type = 0, t3.offset = -1, t3.len = -1, t3.line = -1, t3.char = -1;
          let s2, r2 = e3.source, i3 = e3.pos, o = e3.len, c = e3.line, a = e3.char;
          for (; ; ) {
            if (i3 >= o)
              return false;
            if (s2 = r2.charCodeAt(i3), 32 !== s2 && 9 !== s2 && 13 !== s2) {
              if (10 !== s2)
                break;
              i3++, c++, a = 0;
            } else
              i3++, a++;
          }
          if (t3.offset = i3, t3.line = c, t3.char = a, 34 === s2) {
            for (t3.type = 1, i3++, a++; ; ) {
              if (i3 >= o)
                return false;
              if (s2 = r2.charCodeAt(i3), i3++, a++, 92 !== s2) {
                if (34 === s2)
                  break;
              } else
                i3++, a++;
            }
            t3.value = r2.substring(t3.offset + 1, i3 - 1).replace(/\\u([0-9A-Fa-f]{4})/g, (e4, t4) => String.fromCodePoint(parseInt(t4, 16))).replace(/\\(.)/g, (t4, s3) => {
              switch (s3) {
                case '"':
                  return '"';
                case "\\":
                  return "\\";
                case "/":
                  return "/";
                case "b":
                  return "\b";
                case "f":
                  return "\f";
                case "n":
                  return "\n";
                case "r":
                  return "\r";
                case "t":
                  return "	";
                default:
                  n(e3, "invalid escape sequence");
              }
              throw new Error("unreachable");
            });
          } else if (91 === s2)
            t3.type = 2, i3++, a++;
          else if (123 === s2)
            t3.type = 3, i3++, a++;
          else if (93 === s2)
            t3.type = 4, i3++, a++;
          else if (125 === s2)
            t3.type = 5, i3++, a++;
          else if (58 === s2)
            t3.type = 6, i3++, a++;
          else if (44 === s2)
            t3.type = 7, i3++, a++;
          else if (110 === s2) {
            if (t3.type = 8, i3++, a++, s2 = r2.charCodeAt(i3), 117 !== s2)
              return false;
            if (i3++, a++, s2 = r2.charCodeAt(i3), 108 !== s2)
              return false;
            if (i3++, a++, s2 = r2.charCodeAt(i3), 108 !== s2)
              return false;
            i3++, a++;
          } else if (116 === s2) {
            if (t3.type = 9, i3++, a++, s2 = r2.charCodeAt(i3), 114 !== s2)
              return false;
            if (i3++, a++, s2 = r2.charCodeAt(i3), 117 !== s2)
              return false;
            if (i3++, a++, s2 = r2.charCodeAt(i3), 101 !== s2)
              return false;
            i3++, a++;
          } else if (102 === s2) {
            if (t3.type = 10, i3++, a++, s2 = r2.charCodeAt(i3), 97 !== s2)
              return false;
            if (i3++, a++, s2 = r2.charCodeAt(i3), 108 !== s2)
              return false;
            if (i3++, a++, s2 = r2.charCodeAt(i3), 115 !== s2)
              return false;
            if (i3++, a++, s2 = r2.charCodeAt(i3), 101 !== s2)
              return false;
            i3++, a++;
          } else
            for (t3.type = 11; ; ) {
              if (i3 >= o)
                return false;
              if (s2 = r2.charCodeAt(i3), !(46 === s2 || s2 >= 48 && s2 <= 57 || 101 === s2 || 69 === s2 || 45 === s2 || 43 === s2))
                break;
              i3++, a++;
            }
          return t3.len = i3 - t3.offset, null === t3.value && (t3.value = r2.substr(t3.offset, t3.len)), e3.pos = i3, e3.line = c, e3.char = a, true;
        }
      }, 787: function(e2, t2, n) {
        var s = this && this.__createBinding || (Object.create ? function(e3, t3, n2, s2) {
          void 0 === s2 && (s2 = n2), Object.defineProperty(e3, s2, { enumerable: true, get: function() {
            return t3[n2];
          } });
        } : function(e3, t3, n2, s2) {
          void 0 === s2 && (s2 = n2), e3[s2] = t3[n2];
        }), r = this && this.__exportStar || function(e3, t3) {
          for (var n2 in e3)
            "default" === n2 || Object.prototype.hasOwnProperty.call(t3, n2) || s(t3, e3, n2);
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.parseRawGrammar = t2.INITIAL = t2.Registry = void 0;
        const i2 = n(391), o = n(50), c = n(652), a = n(583), l = n(965);
        r(n(44), t2), t2.Registry = class {
          constructor(e3) {
            this._options = e3, this._syncRegistry = new c.SyncRegistry(a.Theme.createFromRawTheme(e3.theme, e3.colorMap), e3.onigLib), this._ensureGrammarCache = /* @__PURE__ */ new Map();
          }
          dispose() {
            this._syncRegistry.dispose();
          }
          setTheme(e3, t3) {
            this._syncRegistry.setTheme(a.Theme.createFromRawTheme(e3, t3));
          }
          getColorMap() {
            return this._syncRegistry.getColorMap();
          }
          loadGrammarWithEmbeddedLanguages(e3, t3, n2) {
            return this.loadGrammarWithConfiguration(e3, t3, { embeddedLanguages: n2 });
          }
          loadGrammarWithConfiguration(e3, t3, n2) {
            return this._loadGrammar(e3, t3, n2.embeddedLanguages, n2.tokenTypes, new i2.BalancedBracketSelectors(n2.balancedBracketSelectors || [], n2.unbalancedBracketSelectors || []));
          }
          loadGrammar(e3) {
            return this._loadGrammar(e3, 0, null, null, null);
          }
          async _loadGrammar(e3, t3, n2, s2, r2) {
            const i3 = new l.ScopeDependencyProcessor(this._syncRegistry, e3);
            for (; i3.Q.length > 0; )
              await Promise.all(i3.Q.map((e4) => this._loadSingleGrammar(e4.scopeName))), i3.processQueue();
            return this._grammarForScopeName(e3, t3, n2, s2, r2);
          }
          async _loadSingleGrammar(e3) {
            return this._ensureGrammarCache.has(e3) || this._ensureGrammarCache.set(e3, this._doLoadSingleGrammar(e3)), this._ensureGrammarCache.get(e3);
          }
          async _doLoadSingleGrammar(e3) {
            const t3 = await this._options.loadGrammar(e3);
            if (t3) {
              const n2 = "function" == typeof this._options.getInjections ? this._options.getInjections(e3) : void 0;
              this._syncRegistry.addGrammar(t3, n2);
            }
          }
          async addGrammar(e3, t3 = [], n2 = 0, s2 = null) {
            return this._syncRegistry.addGrammar(e3, t3), await this._grammarForScopeName(e3.scopeName, n2, s2);
          }
          _grammarForScopeName(e3, t3 = 0, n2 = null, s2 = null, r2 = null) {
            return this._syncRegistry.grammarForScopeName(e3, t3, n2, s2, r2);
          }
        }, t2.INITIAL = i2.StateStack.NULL, t2.parseRawGrammar = o.parseRawGrammar;
      }, 736: (e2, t2) => {
        function n(e3) {
          return !!e3 && !!e3.match(/[\w\.:]+/);
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.createMatchers = void 0, t2.createMatchers = function(e3, t3) {
          const s = [], r = function(e4) {
            let t4 = /([LR]:|[\w\.:][\w\.:\-]*|[\,\|\-\(\)])/g, n2 = t4.exec(e4);
            return { next: () => {
              if (!n2)
                return null;
              const s2 = n2[0];
              return n2 = t4.exec(e4), s2;
            } };
          }(e3);
          let i2 = r.next();
          for (; null !== i2; ) {
            let e4 = 0;
            if (2 === i2.length && ":" === i2.charAt(1)) {
              switch (i2.charAt(0)) {
                case "R":
                  e4 = 1;
                  break;
                case "L":
                  e4 = -1;
                  break;
                default:
                  console.log(`Unknown priority ${i2} in scope selector`);
              }
              i2 = r.next();
            }
            let t4 = c();
            if (s.push({ matcher: t4, priority: e4 }), "," !== i2)
              break;
            i2 = r.next();
          }
          return s;
          function o() {
            if ("-" === i2) {
              i2 = r.next();
              const e4 = o();
              return (t4) => !!e4 && !e4(t4);
            }
            if ("(" === i2) {
              i2 = r.next();
              const e4 = function() {
                const e5 = [];
                let t4 = c();
                for (; t4 && (e5.push(t4), "|" === i2 || "," === i2); ) {
                  do {
                    i2 = r.next();
                  } while ("|" === i2 || "," === i2);
                  t4 = c();
                }
                return (t5) => e5.some((e6) => e6(t5));
              }();
              return ")" === i2 && (i2 = r.next()), e4;
            }
            if (n(i2)) {
              const e4 = [];
              do {
                e4.push(i2), i2 = r.next();
              } while (n(i2));
              return (n2) => t3(e4, n2);
            }
            return null;
          }
          function c() {
            const e4 = [];
            let t4 = o();
            for (; t4; )
              e4.push(t4), t4 = o();
            return (t5) => e4.every((e5) => e5(t5));
          }
        };
      }, 44: (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.disposeOnigString = void 0, t2.disposeOnigString = function(e3) {
          "function" == typeof e3.dispose && e3.dispose();
        };
      }, 50: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.parseRawGrammar = void 0;
        const s = n(69), r = n(350), i2 = n(974);
        t2.parseRawGrammar = function(e3, t3 = null) {
          return null !== t3 && /\.json$/.test(t3) ? (n2 = e3, o = t3, r.DebugFlags.InDebugMode ? i2.parseJSON(n2, o, true) : JSON.parse(n2)) : function(e4, t4) {
            return r.DebugFlags.InDebugMode ? s.parseWithLocation(e4, t4, "$vscodeTextmateLocation") : s.parsePLIST(e4);
          }(e3, t3);
          var n2, o;
        };
      }, 69: (e2, t2) => {
        function n(e3, t3, n2) {
          const s = e3.length;
          let r = 0, i2 = 1, o = 0;
          function c(t4) {
            if (null === n2)
              r += t4;
            else
              for (; t4 > 0; )
                10 === e3.charCodeAt(r) ? (r++, i2++, o = 0) : (r++, o++), t4--;
          }
          function a(e4) {
            null === n2 ? r = e4 : c(e4 - r);
          }
          function l() {
            for (; r < s; ) {
              let t4 = e3.charCodeAt(r);
              if (32 !== t4 && 9 !== t4 && 13 !== t4 && 10 !== t4)
                break;
              c(1);
            }
          }
          function u(t4) {
            return e3.substr(r, t4.length) === t4 && (c(t4.length), true);
          }
          function h2(t4) {
            let n3 = e3.indexOf(t4, r);
            a(-1 !== n3 ? n3 + t4.length : s);
          }
          function p2(t4) {
            let n3 = e3.indexOf(t4, r);
            if (-1 !== n3) {
              let s2 = e3.substring(r, n3);
              return a(n3 + t4.length), s2;
            }
            {
              let t5 = e3.substr(r);
              return a(s), t5;
            }
          }
          s > 0 && 65279 === e3.charCodeAt(0) && (r = 1);
          let d = 0, f = null, g = [], m = [], _ = null;
          function b(e4, t4) {
            g.push(d), m.push(f), d = e4, f = t4;
          }
          function y() {
            if (0 === g.length)
              return S("illegal state stack");
            d = g.pop(), f = m.pop();
          }
          function S(t4) {
            throw new Error("Near offset " + r + ": " + t4 + " ~~~" + e3.substr(r, 50) + "~~~");
          }
          const k = function() {
            if (null === _)
              return S("missing <key>");
            let e4 = {};
            null !== n2 && (e4[n2] = { filename: t3, line: i2, char: o }), f[_] = e4, _ = null, b(1, e4);
          }, C = function() {
            if (null === _)
              return S("missing <key>");
            let e4 = [];
            f[_] = e4, _ = null, b(2, e4);
          }, R = function() {
            let e4 = {};
            null !== n2 && (e4[n2] = { filename: t3, line: i2, char: o }), f.push(e4), b(1, e4);
          }, A = function() {
            let e4 = [];
            f.push(e4), b(2, e4);
          };
          function w() {
            if (1 !== d)
              return S("unexpected </dict>");
            y();
          }
          function P() {
            return 1 === d || 2 !== d ? S("unexpected </array>") : void y();
          }
          function I(e4) {
            if (1 === d) {
              if (null === _)
                return S("missing <key>");
              f[_] = e4, _ = null;
            } else
              2 === d ? f.push(e4) : f = e4;
          }
          function v(e4) {
            if (isNaN(e4))
              return S("cannot parse float");
            if (1 === d) {
              if (null === _)
                return S("missing <key>");
              f[_] = e4, _ = null;
            } else
              2 === d ? f.push(e4) : f = e4;
          }
          function N(e4) {
            if (isNaN(e4))
              return S("cannot parse integer");
            if (1 === d) {
              if (null === _)
                return S("missing <key>");
              f[_] = e4, _ = null;
            } else
              2 === d ? f.push(e4) : f = e4;
          }
          function T(e4) {
            if (1 === d) {
              if (null === _)
                return S("missing <key>");
              f[_] = e4, _ = null;
            } else
              2 === d ? f.push(e4) : f = e4;
          }
          function x(e4) {
            if (1 === d) {
              if (null === _)
                return S("missing <key>");
              f[_] = e4, _ = null;
            } else
              2 === d ? f.push(e4) : f = e4;
          }
          function G(e4) {
            if (1 === d) {
              if (null === _)
                return S("missing <key>");
              f[_] = e4, _ = null;
            } else
              2 === d ? f.push(e4) : f = e4;
          }
          function E() {
            let e4 = p2(">"), t4 = false;
            return 47 === e4.charCodeAt(e4.length - 1) && (t4 = true, e4 = e4.substring(0, e4.length - 1)), { name: e4.trim(), isClosed: t4 };
          }
          function L(e4) {
            if (e4.isClosed)
              return "";
            let t4 = p2("</");
            return h2(">"), t4.replace(/&#([0-9]+);/g, function(e5, t5) {
              return String.fromCodePoint(parseInt(t5, 10));
            }).replace(/&#x([0-9a-f]+);/g, function(e5, t5) {
              return String.fromCodePoint(parseInt(t5, 16));
            }).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g, function(e5) {
              switch (e5) {
                case "&amp;":
                  return "&";
                case "&lt;":
                  return "<";
                case "&gt;":
                  return ">";
                case "&quot;":
                  return '"';
                case "&apos;":
                  return "'";
              }
              return e5;
            });
          }
          for (; r < s && (l(), !(r >= s)); ) {
            const a2 = e3.charCodeAt(r);
            if (c(1), 60 !== a2)
              return S("expected <");
            if (r >= s)
              return S("unexpected end of input");
            const p3 = e3.charCodeAt(r);
            if (63 === p3) {
              c(1), h2("?>");
              continue;
            }
            if (33 === p3) {
              if (c(1), u("--")) {
                h2("-->");
                continue;
              }
              h2(">");
              continue;
            }
            if (47 === p3) {
              if (c(1), l(), u("plist")) {
                h2(">");
                continue;
              }
              if (u("dict")) {
                h2(">"), w();
                continue;
              }
              if (u("array")) {
                h2(">"), P();
                continue;
              }
              return S("unexpected closed tag");
            }
            let g2 = E();
            switch (g2.name) {
              case "dict":
                1 === d ? k() : 2 === d ? R() : (f = {}, null !== n2 && (f[n2] = { filename: t3, line: i2, char: o }), b(1, f)), g2.isClosed && w();
                continue;
              case "array":
                1 === d ? C() : 2 === d ? A() : (f = [], b(2, f)), g2.isClosed && P();
                continue;
              case "key":
                M = L(g2), 1 !== d ? S("unexpected <key>") : null !== _ ? S("too many <key>") : _ = M;
                continue;
              case "string":
                I(L(g2));
                continue;
              case "real":
                v(parseFloat(L(g2)));
                continue;
              case "integer":
                N(parseInt(L(g2), 10));
                continue;
              case "date":
                T(new Date(L(g2)));
                continue;
              case "data":
                x(L(g2));
                continue;
              case "true":
                L(g2), G(true);
                continue;
              case "false":
                L(g2), G(false);
                continue;
            }
            if (!/^plist/.test(g2.name))
              return S("unexpected opened tag " + g2.name);
          }
          var M;
          return f;
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.parsePLIST = t2.parseWithLocation = void 0, t2.parseWithLocation = function(e3, t3, s) {
          return n(e3, t3, s);
        }, t2.parsePLIST = function(e3) {
          return n(e3, null, null);
        };
      }, 652: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.SyncRegistry = void 0;
        const s = n(391);
        t2.SyncRegistry = class {
          constructor(e3, t3) {
            this._onigLibPromise = t3, this._grammars = /* @__PURE__ */ new Map(), this._rawGrammars = /* @__PURE__ */ new Map(), this._injectionGrammars = /* @__PURE__ */ new Map(), this._theme = e3;
          }
          dispose() {
            for (const e3 of this._grammars.values())
              e3.dispose();
          }
          setTheme(e3) {
            this._theme = e3;
          }
          getColorMap() {
            return this._theme.getColorMap();
          }
          addGrammar(e3, t3) {
            this._rawGrammars.set(e3.scopeName, e3), t3 && this._injectionGrammars.set(e3.scopeName, t3);
          }
          lookup(e3) {
            return this._rawGrammars.get(e3);
          }
          injections(e3) {
            return this._injectionGrammars.get(e3);
          }
          getDefaults() {
            return this._theme.getDefaults();
          }
          themeMatch(e3) {
            return this._theme.match(e3);
          }
          async grammarForScopeName(e3, t3, n2, r, i2) {
            if (!this._grammars.has(e3)) {
              let o = this._rawGrammars.get(e3);
              if (!o)
                return null;
              this._grammars.set(e3, s.createGrammar(e3, o, t3, n2, r, i2, this, await this._onigLibPromise));
            }
            return this._grammars.get(e3);
          }
        };
      }, 792: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.CompiledRule = t2.RegExpSourceList = t2.RegExpSource = t2.RuleFactory = t2.BeginWhileRule = t2.BeginEndRule = t2.IncludeOnlyRule = t2.MatchRule = t2.CaptureRule = t2.Rule = t2.ruleIdToNumber = t2.ruleIdFromNumber = t2.whileRuleId = t2.endRuleId = void 0;
        const s = n(878), r = n(965), i2 = /\\(\d+)/, o = /\\(\d+)/g;
        t2.endRuleId = -1, t2.whileRuleId = -2, t2.ruleIdFromNumber = function(e3) {
          return e3;
        }, t2.ruleIdToNumber = function(e3) {
          return e3;
        };
        class c {
          constructor(e3, t3, n2, r2) {
            this.$location = e3, this.id = t3, this._name = n2 || null, this._nameIsCapturing = s.RegexSource.hasCaptures(this._name), this._contentName = r2 || null, this._contentNameIsCapturing = s.RegexSource.hasCaptures(this._contentName);
          }
          get debugName() {
            const e3 = this.$location ? `${s.basename(this.$location.filename)}:${this.$location.line}` : "unknown";
            return `${this.constructor.name}#${this.id} @ ${e3}`;
          }
          getName(e3, t3) {
            return this._nameIsCapturing && null !== this._name && null !== e3 && null !== t3 ? s.RegexSource.replaceCaptures(this._name, e3, t3) : this._name;
          }
          getContentName(e3, t3) {
            return this._contentNameIsCapturing && null !== this._contentName ? s.RegexSource.replaceCaptures(this._contentName, e3, t3) : this._contentName;
          }
        }
        t2.Rule = c;
        class a extends c {
          constructor(e3, t3, n2, s2, r2) {
            super(e3, t3, n2, s2), this.retokenizeCapturedWithRuleId = r2;
          }
          dispose() {
          }
          collectPatterns(e3, t3) {
            throw new Error("Not supported!");
          }
          compile(e3, t3) {
            throw new Error("Not supported!");
          }
          compileAG(e3, t3, n2, s2) {
            throw new Error("Not supported!");
          }
        }
        t2.CaptureRule = a;
        class l extends c {
          constructor(e3, t3, n2, s2, r2) {
            super(e3, t3, n2, null), this._match = new f(s2, this.id), this.captures = r2, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          get debugMatchRegExp() {
            return `${this._match.source}`;
          }
          collectPatterns(e3, t3) {
            t3.push(this._match);
          }
          compile(e3, t3) {
            return this._getCachedCompiledPatterns(e3).compile(e3);
          }
          compileAG(e3, t3, n2, s2) {
            return this._getCachedCompiledPatterns(e3).compileAG(e3, n2, s2);
          }
          _getCachedCompiledPatterns(e3) {
            return this._cachedCompiledPatterns || (this._cachedCompiledPatterns = new g(), this.collectPatterns(e3, this._cachedCompiledPatterns)), this._cachedCompiledPatterns;
          }
        }
        t2.MatchRule = l;
        class u extends c {
          constructor(e3, t3, n2, s2, r2) {
            super(e3, t3, n2, s2), this.patterns = r2.patterns, this.hasMissingPatterns = r2.hasMissingPatterns, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          collectPatterns(e3, t3) {
            for (const n2 of this.patterns)
              e3.getRule(n2).collectPatterns(e3, t3);
          }
          compile(e3, t3) {
            return this._getCachedCompiledPatterns(e3).compile(e3);
          }
          compileAG(e3, t3, n2, s2) {
            return this._getCachedCompiledPatterns(e3).compileAG(e3, n2, s2);
          }
          _getCachedCompiledPatterns(e3) {
            return this._cachedCompiledPatterns || (this._cachedCompiledPatterns = new g(), this.collectPatterns(e3, this._cachedCompiledPatterns)), this._cachedCompiledPatterns;
          }
        }
        t2.IncludeOnlyRule = u;
        class h2 extends c {
          constructor(e3, t3, n2, s2, r2, i3, o2, c2, a2, l2) {
            super(e3, t3, n2, s2), this._begin = new f(r2, this.id), this.beginCaptures = i3, this._end = new f(o2 || "￿", -1), this.endHasBackReferences = this._end.hasBackReferences, this.endCaptures = c2, this.applyEndPatternLast = a2 || false, this.patterns = l2.patterns, this.hasMissingPatterns = l2.hasMissingPatterns, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          get debugBeginRegExp() {
            return `${this._begin.source}`;
          }
          get debugEndRegExp() {
            return `${this._end.source}`;
          }
          getEndWithResolvedBackReferences(e3, t3) {
            return this._end.resolveBackReferences(e3, t3);
          }
          collectPatterns(e3, t3) {
            t3.push(this._begin);
          }
          compile(e3, t3) {
            return this._getCachedCompiledPatterns(e3, t3).compile(e3);
          }
          compileAG(e3, t3, n2, s2) {
            return this._getCachedCompiledPatterns(e3, t3).compileAG(e3, n2, s2);
          }
          _getCachedCompiledPatterns(e3, t3) {
            if (!this._cachedCompiledPatterns) {
              this._cachedCompiledPatterns = new g();
              for (const t4 of this.patterns)
                e3.getRule(t4).collectPatterns(e3, this._cachedCompiledPatterns);
              this.applyEndPatternLast ? this._cachedCompiledPatterns.push(this._end.hasBackReferences ? this._end.clone() : this._end) : this._cachedCompiledPatterns.unshift(this._end.hasBackReferences ? this._end.clone() : this._end);
            }
            return this._end.hasBackReferences && (this.applyEndPatternLast ? this._cachedCompiledPatterns.setSource(this._cachedCompiledPatterns.length() - 1, t3) : this._cachedCompiledPatterns.setSource(0, t3)), this._cachedCompiledPatterns;
          }
        }
        t2.BeginEndRule = h2;
        class p2 extends c {
          constructor(e3, n2, s2, r2, i3, o2, c2, a2, l2) {
            super(e3, n2, s2, r2), this._begin = new f(i3, this.id), this.beginCaptures = o2, this.whileCaptures = a2, this._while = new f(c2, t2.whileRuleId), this.whileHasBackReferences = this._while.hasBackReferences, this.patterns = l2.patterns, this.hasMissingPatterns = l2.hasMissingPatterns, this._cachedCompiledPatterns = null, this._cachedCompiledWhilePatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null), this._cachedCompiledWhilePatterns && (this._cachedCompiledWhilePatterns.dispose(), this._cachedCompiledWhilePatterns = null);
          }
          get debugBeginRegExp() {
            return `${this._begin.source}`;
          }
          get debugWhileRegExp() {
            return `${this._while.source}`;
          }
          getWhileWithResolvedBackReferences(e3, t3) {
            return this._while.resolveBackReferences(e3, t3);
          }
          collectPatterns(e3, t3) {
            t3.push(this._begin);
          }
          compile(e3, t3) {
            return this._getCachedCompiledPatterns(e3).compile(e3);
          }
          compileAG(e3, t3, n2, s2) {
            return this._getCachedCompiledPatterns(e3).compileAG(e3, n2, s2);
          }
          _getCachedCompiledPatterns(e3) {
            if (!this._cachedCompiledPatterns) {
              this._cachedCompiledPatterns = new g();
              for (const t3 of this.patterns)
                e3.getRule(t3).collectPatterns(e3, this._cachedCompiledPatterns);
            }
            return this._cachedCompiledPatterns;
          }
          compileWhile(e3, t3) {
            return this._getCachedCompiledWhilePatterns(e3, t3).compile(e3);
          }
          compileWhileAG(e3, t3, n2, s2) {
            return this._getCachedCompiledWhilePatterns(e3, t3).compileAG(e3, n2, s2);
          }
          _getCachedCompiledWhilePatterns(e3, t3) {
            return this._cachedCompiledWhilePatterns || (this._cachedCompiledWhilePatterns = new g(), this._cachedCompiledWhilePatterns.push(this._while.hasBackReferences ? this._while.clone() : this._while)), this._while.hasBackReferences && this._cachedCompiledWhilePatterns.setSource(0, t3 || "￿"), this._cachedCompiledWhilePatterns;
          }
        }
        t2.BeginWhileRule = p2;
        class d {
          static createCaptureRule(e3, t3, n2, s2, r2) {
            return e3.registerRule((e4) => new a(t3, e4, n2, s2, r2));
          }
          static getCompiledRuleId(e3, t3, n2) {
            return e3.id || t3.registerRule((r2) => {
              if (e3.id = r2, e3.match)
                return new l(e3.$vscodeTextmateLocation, e3.id, e3.name, e3.match, d._compileCaptures(e3.captures, t3, n2));
              if (void 0 === e3.begin) {
                e3.repository && (n2 = s.mergeObjects({}, n2, e3.repository));
                let r3 = e3.patterns;
                return void 0 === r3 && e3.include && (r3 = [{ include: e3.include }]), new u(e3.$vscodeTextmateLocation, e3.id, e3.name, e3.contentName, d._compilePatterns(r3, t3, n2));
              }
              return e3.while ? new p2(e3.$vscodeTextmateLocation, e3.id, e3.name, e3.contentName, e3.begin, d._compileCaptures(e3.beginCaptures || e3.captures, t3, n2), e3.while, d._compileCaptures(e3.whileCaptures || e3.captures, t3, n2), d._compilePatterns(e3.patterns, t3, n2)) : new h2(e3.$vscodeTextmateLocation, e3.id, e3.name, e3.contentName, e3.begin, d._compileCaptures(e3.beginCaptures || e3.captures, t3, n2), e3.end, d._compileCaptures(e3.endCaptures || e3.captures, t3, n2), e3.applyEndPatternLast, d._compilePatterns(e3.patterns, t3, n2));
            }), e3.id;
          }
          static _compileCaptures(e3, t3, n2) {
            let s2 = [];
            if (e3) {
              let r2 = 0;
              for (const t4 in e3) {
                if ("$vscodeTextmateLocation" === t4)
                  continue;
                const e4 = parseInt(t4, 10);
                e4 > r2 && (r2 = e4);
              }
              for (let e4 = 0; e4 <= r2; e4++)
                s2[e4] = null;
              for (const r3 in e3) {
                if ("$vscodeTextmateLocation" === r3)
                  continue;
                const i3 = parseInt(r3, 10);
                let o2 = 0;
                e3[r3].patterns && (o2 = d.getCompiledRuleId(e3[r3], t3, n2)), s2[i3] = d.createCaptureRule(t3, e3[r3].$vscodeTextmateLocation, e3[r3].name, e3[r3].contentName, o2);
              }
            }
            return s2;
          }
          static _compilePatterns(e3, t3, n2) {
            let s2 = [];
            if (e3)
              for (let i3 = 0, o2 = e3.length; i3 < o2; i3++) {
                const o3 = e3[i3];
                let c2 = -1;
                if (o3.include) {
                  const e4 = r.parseInclude(o3.include);
                  switch (e4.kind) {
                    case 0:
                    case 1:
                      c2 = d.getCompiledRuleId(n2[o3.include], t3, n2);
                      break;
                    case 2:
                      let s3 = n2[e4.ruleName];
                      s3 && (c2 = d.getCompiledRuleId(s3, t3, n2));
                      break;
                    case 3:
                    case 4:
                      const r2 = e4.scopeName, i4 = 4 === e4.kind ? e4.ruleName : null, a2 = t3.getExternalGrammar(r2, n2);
                      if (a2)
                        if (i4) {
                          let e5 = a2.repository[i4];
                          e5 && (c2 = d.getCompiledRuleId(e5, t3, a2.repository));
                        } else
                          c2 = d.getCompiledRuleId(a2.repository.$self, t3, a2.repository);
                  }
                } else
                  c2 = d.getCompiledRuleId(o3, t3, n2);
                if (-1 !== c2) {
                  const e4 = t3.getRule(c2);
                  let n3 = false;
                  if ((e4 instanceof u || e4 instanceof h2 || e4 instanceof p2) && e4.hasMissingPatterns && 0 === e4.patterns.length && (n3 = true), n3)
                    continue;
                  s2.push(c2);
                }
              }
            return { patterns: s2, hasMissingPatterns: (e3 ? e3.length : 0) !== s2.length };
          }
        }
        t2.RuleFactory = d;
        class f {
          constructor(e3, t3) {
            if (e3) {
              const t4 = e3.length;
              let n2 = 0, s2 = [], r2 = false;
              for (let i3 = 0; i3 < t4; i3++)
                if ("\\" === e3.charAt(i3) && i3 + 1 < t4) {
                  const t5 = e3.charAt(i3 + 1);
                  "z" === t5 ? (s2.push(e3.substring(n2, i3)), s2.push("$(?!\\n)(?<!\\n)"), n2 = i3 + 2) : "A" !== t5 && "G" !== t5 || (r2 = true), i3++;
                }
              this.hasAnchor = r2, 0 === n2 ? this.source = e3 : (s2.push(e3.substring(n2, t4)), this.source = s2.join(""));
            } else
              this.hasAnchor = false, this.source = e3;
            this.hasAnchor ? this._anchorCache = this._buildAnchorCache() : this._anchorCache = null, this.ruleId = t3, this.hasBackReferences = i2.test(this.source);
          }
          clone() {
            return new f(this.source, this.ruleId);
          }
          setSource(e3) {
            this.source !== e3 && (this.source = e3, this.hasAnchor && (this._anchorCache = this._buildAnchorCache()));
          }
          resolveBackReferences(e3, t3) {
            let n2 = t3.map((t4) => e3.substring(t4.start, t4.end));
            return o.lastIndex = 0, this.source.replace(o, (e4, t4) => s.escapeRegExpCharacters(n2[parseInt(t4, 10)] || ""));
          }
          _buildAnchorCache() {
            let e3, t3, n2, s2, r2 = [], i3 = [], o2 = [], c2 = [];
            for (e3 = 0, t3 = this.source.length; e3 < t3; e3++)
              n2 = this.source.charAt(e3), r2[e3] = n2, i3[e3] = n2, o2[e3] = n2, c2[e3] = n2, "\\" === n2 && e3 + 1 < t3 && (s2 = this.source.charAt(e3 + 1), "A" === s2 ? (r2[e3 + 1] = "￿", i3[e3 + 1] = "￿", o2[e3 + 1] = "A", c2[e3 + 1] = "A") : "G" === s2 ? (r2[e3 + 1] = "￿", i3[e3 + 1] = "G", o2[e3 + 1] = "￿", c2[e3 + 1] = "G") : (r2[e3 + 1] = s2, i3[e3 + 1] = s2, o2[e3 + 1] = s2, c2[e3 + 1] = s2), e3++);
            return { A0_G0: r2.join(""), A0_G1: i3.join(""), A1_G0: o2.join(""), A1_G1: c2.join("") };
          }
          resolveAnchors(e3, t3) {
            return this.hasAnchor && this._anchorCache ? e3 ? t3 ? this._anchorCache.A1_G1 : this._anchorCache.A1_G0 : t3 ? this._anchorCache.A0_G1 : this._anchorCache.A0_G0 : this.source;
          }
        }
        t2.RegExpSource = f;
        class g {
          constructor() {
            this._items = [], this._hasAnchors = false, this._cached = null, this._anchorCache = { A0_G0: null, A0_G1: null, A1_G0: null, A1_G1: null };
          }
          dispose() {
            this._disposeCaches();
          }
          _disposeCaches() {
            this._cached && (this._cached.dispose(), this._cached = null), this._anchorCache.A0_G0 && (this._anchorCache.A0_G0.dispose(), this._anchorCache.A0_G0 = null), this._anchorCache.A0_G1 && (this._anchorCache.A0_G1.dispose(), this._anchorCache.A0_G1 = null), this._anchorCache.A1_G0 && (this._anchorCache.A1_G0.dispose(), this._anchorCache.A1_G0 = null), this._anchorCache.A1_G1 && (this._anchorCache.A1_G1.dispose(), this._anchorCache.A1_G1 = null);
          }
          push(e3) {
            this._items.push(e3), this._hasAnchors = this._hasAnchors || e3.hasAnchor;
          }
          unshift(e3) {
            this._items.unshift(e3), this._hasAnchors = this._hasAnchors || e3.hasAnchor;
          }
          length() {
            return this._items.length;
          }
          setSource(e3, t3) {
            this._items[e3].source !== t3 && (this._disposeCaches(), this._items[e3].setSource(t3));
          }
          compile(e3) {
            if (!this._cached) {
              let t3 = this._items.map((e4) => e4.source);
              this._cached = new m(e3, t3, this._items.map((e4) => e4.ruleId));
            }
            return this._cached;
          }
          compileAG(e3, t3, n2) {
            return this._hasAnchors ? t3 ? n2 ? (this._anchorCache.A1_G1 || (this._anchorCache.A1_G1 = this._resolveAnchors(e3, t3, n2)), this._anchorCache.A1_G1) : (this._anchorCache.A1_G0 || (this._anchorCache.A1_G0 = this._resolveAnchors(e3, t3, n2)), this._anchorCache.A1_G0) : n2 ? (this._anchorCache.A0_G1 || (this._anchorCache.A0_G1 = this._resolveAnchors(e3, t3, n2)), this._anchorCache.A0_G1) : (this._anchorCache.A0_G0 || (this._anchorCache.A0_G0 = this._resolveAnchors(e3, t3, n2)), this._anchorCache.A0_G0) : this.compile(e3);
          }
          _resolveAnchors(e3, t3, n2) {
            let s2 = this._items.map((e4) => e4.resolveAnchors(t3, n2));
            return new m(e3, s2, this._items.map((e4) => e4.ruleId));
          }
        }
        t2.RegExpSourceList = g;
        class m {
          constructor(e3, t3, n2) {
            this.regExps = t3, this.rules = n2, this.scanner = e3.createOnigScanner(t3);
          }
          dispose() {
            "function" == typeof this.scanner.dispose && this.scanner.dispose();
          }
          toString() {
            const e3 = [];
            for (let t3 = 0, n2 = this.rules.length; t3 < n2; t3++)
              e3.push("   - " + this.rules[t3] + ": " + this.regExps[t3]);
            return e3.join("\n");
          }
          findNextMatchSync(e3, t3, n2) {
            const s2 = this.scanner.findNextMatchSync(e3, t3, n2);
            return s2 ? { ruleId: this.rules[s2.index], captureIndices: s2.captureIndices } : null;
          }
        }
        t2.CompiledRule = m;
      }, 583: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ThemeTrieElement = t2.ThemeTrieElementRule = t2.ColorMap = t2.fontStyleToString = t2.ParsedThemeRule = t2.parseTheme = t2.StyleAttributes = t2.ScopeStack = t2.Theme = void 0;
        const s = n(878);
        class r {
          constructor(e3, t3, n2) {
            this._colorMap = e3, this._defaults = t3, this._root = n2, this._cachedMatchRoot = new s.CachedFn((e4) => this._root.match(e4));
          }
          static createFromRawTheme(e3, t3) {
            return this.createFromParsedTheme(a(e3), t3);
          }
          static createFromParsedTheme(e3, t3) {
            return function(e4, t4) {
              e4.sort((e5, t5) => {
                let n3 = s.strcmp(e5.scope, t5.scope);
                return 0 !== n3 ? n3 : (n3 = s.strArrCmp(e5.parentScopes, t5.parentScopes), 0 !== n3 ? n3 : e5.index - t5.index);
              });
              let n2 = 0, i3 = "#000000", o2 = "#ffffff";
              for (; e4.length >= 1 && "" === e4[0].scope; ) {
                let t5 = e4.shift();
                -1 !== t5.fontStyle && (n2 = t5.fontStyle), null !== t5.foreground && (i3 = t5.foreground), null !== t5.background && (o2 = t5.background);
              }
              let a2 = new u(t4), l2 = new c(n2, a2.getId(i3), a2.getId(o2)), d = new p2(new h2(0, null, -1, 0, 0), []);
              for (let t5 = 0, n3 = e4.length; t5 < n3; t5++) {
                let n4 = e4[t5];
                d.insert(0, n4.scope, n4.parentScopes, n4.fontStyle, a2.getId(n4.foreground), a2.getId(n4.background));
              }
              return new r(a2, l2, d);
            }(e3, t3);
          }
          getColorMap() {
            return this._colorMap.getColorMap();
          }
          getDefaults() {
            return this._defaults;
          }
          match(e3) {
            if (null === e3)
              return this._defaults;
            const t3 = e3.scopeName, n2 = this._cachedMatchRoot.get(t3).find((t4) => function(e4, t5) {
              if (null === t5)
                return true;
              let n3 = 0, s2 = t5[n3];
              for (; e4; ) {
                if (o(e4.scopeName, s2)) {
                  if (n3++, n3 === t5.length)
                    return true;
                  s2 = t5[n3];
                }
                e4 = e4.parent;
              }
              return false;
            }(e3.parent, t4.parentScopes));
            return n2 ? new c(n2.fontStyle, n2.foreground, n2.background) : null;
          }
        }
        t2.Theme = r;
        class i2 {
          constructor(e3, t3) {
            this.parent = e3, this.scopeName = t3;
          }
          static from(...e3) {
            let t3 = null;
            for (let n2 = 0; n2 < e3.length; n2++)
              t3 = new i2(t3, e3[n2]);
            return t3;
          }
          push(e3) {
            return new i2(this, e3);
          }
          getSegments() {
            let e3 = this;
            const t3 = [];
            for (; e3; )
              t3.push(e3.scopeName), e3 = e3.parent;
            return t3.reverse(), t3;
          }
          toString() {
            return this.getSegments().join(" ");
          }
        }
        function o(e3, t3) {
          return t3 === e3 || e3.startsWith(t3) && "." === e3[t3.length];
        }
        t2.ScopeStack = i2;
        class c {
          constructor(e3, t3, n2) {
            this.fontStyle = e3, this.foregroundId = t3, this.backgroundId = n2;
          }
        }
        function a(e3) {
          if (!e3)
            return [];
          if (!e3.settings || !Array.isArray(e3.settings))
            return [];
          let t3 = e3.settings, n2 = [], r2 = 0;
          for (let e4 = 0, i3 = t3.length; e4 < i3; e4++) {
            let i4, o2 = t3[e4];
            if (!o2.settings)
              continue;
            if ("string" == typeof o2.scope) {
              let e5 = o2.scope;
              e5 = e5.replace(/^[,]+/, ""), e5 = e5.replace(/[,]+$/, ""), i4 = e5.split(",");
            } else
              i4 = Array.isArray(o2.scope) ? o2.scope : [""];
            let c2 = -1;
            if ("string" == typeof o2.settings.fontStyle) {
              c2 = 0;
              let e5 = o2.settings.fontStyle.split(" ");
              for (let t4 = 0, n3 = e5.length; t4 < n3; t4++)
                switch (e5[t4]) {
                  case "italic":
                    c2 |= 1;
                    break;
                  case "bold":
                    c2 |= 2;
                    break;
                  case "underline":
                    c2 |= 4;
                    break;
                  case "strikethrough":
                    c2 |= 8;
                }
            }
            let a2 = null;
            "string" == typeof o2.settings.foreground && s.isValidHexColor(o2.settings.foreground) && (a2 = o2.settings.foreground);
            let u2 = null;
            "string" == typeof o2.settings.background && s.isValidHexColor(o2.settings.background) && (u2 = o2.settings.background);
            for (let t4 = 0, s2 = i4.length; t4 < s2; t4++) {
              let s3 = i4[t4].trim().split(" "), o3 = s3[s3.length - 1], h3 = null;
              s3.length > 1 && (h3 = s3.slice(0, s3.length - 1), h3.reverse()), n2[r2++] = new l(o3, h3, e4, c2, a2, u2);
            }
          }
          return n2;
        }
        t2.StyleAttributes = c, t2.parseTheme = a;
        class l {
          constructor(e3, t3, n2, s2, r2, i3) {
            this.scope = e3, this.parentScopes = t3, this.index = n2, this.fontStyle = s2, this.foreground = r2, this.background = i3;
          }
        }
        t2.ParsedThemeRule = l, t2.fontStyleToString = function(e3) {
          if (-1 === e3)
            return "not set";
          let t3 = "";
          return 1 & e3 && (t3 += "italic "), 2 & e3 && (t3 += "bold "), 4 & e3 && (t3 += "underline "), 8 & e3 && (t3 += "strikethrough "), "" === t3 && (t3 = "none"), t3.trim();
        };
        class u {
          constructor(e3) {
            if (this._lastColorId = 0, this._id2color = [], this._color2id = /* @__PURE__ */ Object.create(null), Array.isArray(e3)) {
              this._isFrozen = true;
              for (let t3 = 0, n2 = e3.length; t3 < n2; t3++)
                this._color2id[e3[t3]] = t3, this._id2color[t3] = e3[t3];
            } else
              this._isFrozen = false;
          }
          getId(e3) {
            if (null === e3)
              return 0;
            e3 = e3.toUpperCase();
            let t3 = this._color2id[e3];
            if (t3)
              return t3;
            if (this._isFrozen)
              throw new Error(`Missing color in color map - ${e3}`);
            return t3 = ++this._lastColorId, this._color2id[e3] = t3, this._id2color[t3] = e3, t3;
          }
          getColorMap() {
            return this._id2color.slice(0);
          }
        }
        t2.ColorMap = u;
        class h2 {
          constructor(e3, t3, n2, s2, r2) {
            this.scopeDepth = e3, this.parentScopes = t3, this.fontStyle = n2, this.foreground = s2, this.background = r2;
          }
          clone() {
            return new h2(this.scopeDepth, this.parentScopes, this.fontStyle, this.foreground, this.background);
          }
          static cloneArr(e3) {
            let t3 = [];
            for (let n2 = 0, s2 = e3.length; n2 < s2; n2++)
              t3[n2] = e3[n2].clone();
            return t3;
          }
          acceptOverwrite(e3, t3, n2, s2) {
            this.scopeDepth > e3 ? console.log("how did this happen?") : this.scopeDepth = e3, -1 !== t3 && (this.fontStyle = t3), 0 !== n2 && (this.foreground = n2), 0 !== s2 && (this.background = s2);
          }
        }
        t2.ThemeTrieElementRule = h2;
        class p2 {
          constructor(e3, t3 = [], n2 = {}) {
            this._mainRule = e3, this._children = n2, this._rulesWithParentScopes = t3;
          }
          static _sortBySpecificity(e3) {
            return 1 === e3.length || e3.sort(this._cmpBySpecificity), e3;
          }
          static _cmpBySpecificity(e3, t3) {
            if (e3.scopeDepth === t3.scopeDepth) {
              const n2 = e3.parentScopes, s2 = t3.parentScopes;
              let r2 = null === n2 ? 0 : n2.length, i3 = null === s2 ? 0 : s2.length;
              if (r2 === i3)
                for (let e4 = 0; e4 < r2; e4++) {
                  const t4 = n2[e4].length, r3 = s2[e4].length;
                  if (t4 !== r3)
                    return r3 - t4;
                }
              return i3 - r2;
            }
            return t3.scopeDepth - e3.scopeDepth;
          }
          match(e3) {
            if ("" === e3)
              return p2._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));
            let t3, n2, s2 = e3.indexOf(".");
            return -1 === s2 ? (t3 = e3, n2 = "") : (t3 = e3.substring(0, s2), n2 = e3.substring(s2 + 1)), this._children.hasOwnProperty(t3) ? this._children[t3].match(n2) : p2._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));
          }
          insert(e3, t3, n2, s2, r2, i3) {
            if ("" === t3)
              return void this._doInsertHere(e3, n2, s2, r2, i3);
            let o2, c2, a2, l2 = t3.indexOf(".");
            -1 === l2 ? (o2 = t3, c2 = "") : (o2 = t3.substring(0, l2), c2 = t3.substring(l2 + 1)), this._children.hasOwnProperty(o2) ? a2 = this._children[o2] : (a2 = new p2(this._mainRule.clone(), h2.cloneArr(this._rulesWithParentScopes)), this._children[o2] = a2), a2.insert(e3 + 1, c2, n2, s2, r2, i3);
          }
          _doInsertHere(e3, t3, n2, r2, i3) {
            if (null !== t3) {
              for (let o2 = 0, c2 = this._rulesWithParentScopes.length; o2 < c2; o2++) {
                let c3 = this._rulesWithParentScopes[o2];
                if (0 === s.strArrCmp(c3.parentScopes, t3))
                  return void c3.acceptOverwrite(e3, n2, r2, i3);
              }
              -1 === n2 && (n2 = this._mainRule.fontStyle), 0 === r2 && (r2 = this._mainRule.foreground), 0 === i3 && (i3 = this._mainRule.background), this._rulesWithParentScopes.push(new h2(e3, t3, n2, r2, i3));
            } else
              this._mainRule.acceptOverwrite(e3, n2, r2, i3);
          }
        }
        t2.ThemeTrieElement = p2;
      }, 878: (e2, t2) => {
        function n(e3) {
          return Array.isArray(e3) ? function(e4) {
            let t3 = [];
            for (let s2 = 0, r2 = e4.length; s2 < r2; s2++)
              t3[s2] = n(e4[s2]);
            return t3;
          }(e3) : "object" == typeof e3 ? function(e4) {
            let t3 = {};
            for (let s2 in e4)
              t3[s2] = n(e4[s2]);
            return t3;
          }(e3) : e3;
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.performanceNow = t2.CachedFn = t2.escapeRegExpCharacters = t2.isValidHexColor = t2.strArrCmp = t2.strcmp = t2.RegexSource = t2.basename = t2.mergeObjects = t2.clone = void 0, t2.clone = function(e3) {
          return n(e3);
        }, t2.mergeObjects = function(e3, ...t3) {
          return t3.forEach((t4) => {
            for (let n2 in t4)
              e3[n2] = t4[n2];
          }), e3;
        }, t2.basename = function e3(t3) {
          const n2 = ~t3.lastIndexOf("/") || ~t3.lastIndexOf("\\");
          return 0 === n2 ? t3 : ~n2 == t3.length - 1 ? e3(t3.substring(0, t3.length - 1)) : t3.substr(1 + ~n2);
        };
        let s = /\$(\d+)|\${(\d+):\/(downcase|upcase)}/g;
        function r(e3, t3) {
          return e3 < t3 ? -1 : e3 > t3 ? 1 : 0;
        }
        t2.RegexSource = class {
          static hasCaptures(e3) {
            return null !== e3 && (s.lastIndex = 0, s.test(e3));
          }
          static replaceCaptures(e3, t3, n2) {
            return e3.replace(s, (e4, s2, r2, i2) => {
              let o = n2[parseInt(s2 || r2, 10)];
              if (!o)
                return e4;
              {
                let e5 = t3.substring(o.start, o.end);
                for (; "." === e5[0]; )
                  e5 = e5.substring(1);
                switch (i2) {
                  case "downcase":
                    return e5.toLowerCase();
                  case "upcase":
                    return e5.toUpperCase();
                  default:
                    return e5;
                }
              }
            });
          }
        }, t2.strcmp = r, t2.strArrCmp = function(e3, t3) {
          if (null === e3 && null === t3)
            return 0;
          if (!e3)
            return -1;
          if (!t3)
            return 1;
          let n2 = e3.length, s2 = t3.length;
          if (n2 === s2) {
            for (let s3 = 0; s3 < n2; s3++) {
              let n3 = r(e3[s3], t3[s3]);
              if (0 !== n3)
                return n3;
            }
            return 0;
          }
          return n2 - s2;
        }, t2.isValidHexColor = function(e3) {
          return !!(/^#[0-9a-f]{6}$/i.test(e3) || /^#[0-9a-f]{8}$/i.test(e3) || /^#[0-9a-f]{3}$/i.test(e3) || /^#[0-9a-f]{4}$/i.test(e3));
        }, t2.escapeRegExpCharacters = function(e3) {
          return e3.replace(/[\-\\\{\}\*\+\?\|\^\$\.\,\[\]\(\)\#\s]/g, "\\$&");
        }, t2.CachedFn = class {
          constructor(e3) {
            this.fn = e3, this.cache = /* @__PURE__ */ new Map();
          }
          get(e3) {
            if (this.cache.has(e3))
              return this.cache.get(e3);
            const t3 = this.fn(e3);
            return this.cache.set(e3, t3), t3;
          }
        }, t2.performanceNow = "undefined" == typeof performance ? function() {
          return Date.now();
        } : function() {
          return performance.now();
        };
      } }, t = {};
      return function n(s) {
        var r = t[s];
        if (void 0 !== r)
          return r.exports;
        var i2 = t[s] = { exports: {} };
        return e[s].call(i2.exports, i2, i2.exports, n), i2.exports;
      }(787);
    })();
  });
})(main);
var mainExports = main.exports;
const themes = [
  "css-variables",
  "dark-plus",
  "dracula-soft",
  "dracula",
  "github-dark-dimmed",
  "github-dark",
  "github-light",
  "hc_light",
  "light-plus",
  "material-theme-darker",
  "material-theme-lighter",
  "material-theme-ocean",
  "material-theme-palenight",
  "material-theme",
  "min-dark",
  "min-light",
  "monokai",
  "nord",
  "one-dark-pro",
  "poimandres",
  "rose-pine-dawn",
  "rose-pine-moon",
  "rose-pine",
  "slack-dark",
  "slack-ochin",
  "solarized-dark",
  "solarized-light",
  "vitesse-dark",
  "vitesse-light"
];
const languages = [
  {
    id: "abap",
    scopeName: "source.abap",
    path: "abap.tmLanguage.json",
    samplePath: "abap.sample"
  },
  {
    id: "actionscript-3",
    scopeName: "source.actionscript.3",
    path: "actionscript-3.tmLanguage.json",
    samplePath: "actionscript-3.sample"
  },
  {
    id: "ada",
    scopeName: "source.ada",
    path: "ada.tmLanguage.json",
    samplePath: "ada.sample"
  },
  {
    id: "apache",
    scopeName: "source.apacheconf",
    path: "apache.tmLanguage.json"
  },
  {
    id: "apex",
    scopeName: "source.apex",
    path: "apex.tmLanguage.json",
    samplePath: "apex.sample"
  },
  {
    id: "apl",
    scopeName: "source.apl",
    path: "apl.tmLanguage.json",
    embeddedLangs: ["html", "xml", "css", "javascript", "json"]
  },
  {
    id: "applescript",
    scopeName: "source.applescript",
    path: "applescript.tmLanguage.json",
    samplePath: "applescript.sample"
  },
  {
    id: "ara",
    scopeName: "source.ara",
    path: "ara.tmLanguage.json",
    samplePath: "ara.sample"
  },
  {
    id: "asm",
    scopeName: "source.asm.x86_64",
    path: "asm.tmLanguage.json",
    samplePath: "asm.sample"
  },
  {
    id: "astro",
    scopeName: "source.astro",
    path: "astro.tmLanguage.json",
    samplePath: "astro.sample",
    embeddedLangs: ["json", "javascript", "typescript", "stylus", "sass", "css", "scss", "less", "postcss", "tsx"]
  },
  {
    id: "awk",
    scopeName: "source.awk",
    path: "awk.tmLanguage.json",
    samplePath: "awk.sample"
  },
  {
    id: "ballerina",
    scopeName: "source.ballerina",
    path: "ballerina.tmLanguage.json",
    samplePath: "ballerina.sample"
  },
  {
    id: "bat",
    scopeName: "source.batchfile",
    path: "bat.tmLanguage.json",
    samplePath: "bat.sample",
    aliases: ["batch"]
  },
  {
    id: "berry",
    scopeName: "source.berry",
    path: "berry.tmLanguage.json",
    samplePath: "berry.sample",
    aliases: ["be"]
  },
  {
    id: "bibtex",
    scopeName: "text.bibtex",
    path: "bibtex.tmLanguage.json"
  },
  {
    id: "bicep",
    scopeName: "source.bicep",
    path: "bicep.tmLanguage.json",
    samplePath: "bicep.sample"
  },
  {
    id: "blade",
    scopeName: "text.html.php.blade",
    path: "blade.tmLanguage.json",
    samplePath: "blade.sample",
    embeddedLangs: ["html", "xml", "sql", "javascript", "json", "css"]
  },
  {
    id: "c",
    scopeName: "source.c",
    path: "c.tmLanguage.json",
    samplePath: "c.sample"
  },
  {
    id: "cadence",
    scopeName: "source.cadence",
    path: "cadence.tmLanguage.json",
    samplePath: "cadence.sample",
    aliases: ["cdc"]
  },
  {
    id: "clarity",
    scopeName: "source.clar",
    path: "clarity.tmLanguage.json",
    samplePath: "clarity.sample"
  },
  {
    id: "clojure",
    scopeName: "source.clojure",
    path: "clojure.tmLanguage.json",
    samplePath: "clojure.sample",
    aliases: ["clj"]
  },
  {
    id: "cmake",
    scopeName: "source.cmake",
    path: "cmake.tmLanguage.json",
    samplePath: "cmake.sample"
  },
  {
    id: "cobol",
    scopeName: "source.cobol",
    path: "cobol.tmLanguage.json",
    samplePath: "cobol.sample",
    embeddedLangs: ["sql", "html", "java"]
  },
  {
    id: "codeql",
    scopeName: "source.ql",
    path: "codeql.tmLanguage.json",
    samplePath: "codeql.sample",
    aliases: ["ql"],
    embeddedLangs: ["markdown"]
  },
  {
    id: "coffee",
    scopeName: "source.coffee",
    path: "coffee.tmLanguage.json",
    samplePath: "coffee.sample",
    embeddedLangs: ["javascript"]
  },
  {
    id: "cpp",
    scopeName: "source.cpp",
    path: "cpp.tmLanguage.json",
    samplePath: "cpp.sample",
    embeddedLangs: ["glsl", "sql"]
  },
  {
    id: "crystal",
    scopeName: "source.crystal",
    path: "crystal.tmLanguage.json",
    samplePath: "crystal.sample",
    embeddedLangs: ["html", "sql", "css", "c", "javascript", "shellscript"]
  },
  {
    id: "csharp",
    scopeName: "source.cs",
    path: "csharp.tmLanguage.json",
    samplePath: "csharp.sample",
    aliases: ["c#", "cs"]
  },
  {
    id: "css",
    scopeName: "source.css",
    path: "css.tmLanguage.json",
    samplePath: "css.sample"
  },
  {
    id: "cue",
    scopeName: "source.cue",
    path: "cue.tmLanguage.json",
    samplePath: "cue.sample"
  },
  {
    id: "d",
    scopeName: "source.d",
    path: "d.tmLanguage.json",
    samplePath: "d.sample"
  },
  {
    id: "dart",
    scopeName: "source.dart",
    path: "dart.tmLanguage.json",
    samplePath: "dart.sample"
  },
  {
    id: "dax",
    scopeName: "source.dax",
    path: "dax.tmLanguage.json",
    samplePath: "dax.sample"
  },
  {
    id: "diff",
    scopeName: "source.diff",
    path: "diff.tmLanguage.json",
    samplePath: "diff.sample"
  },
  {
    id: "docker",
    scopeName: "source.dockerfile",
    path: "docker.tmLanguage.json",
    samplePath: "docker.sample",
    aliases: ["dockerfile"]
  },
  {
    id: "dream-maker",
    scopeName: "source.dm",
    path: "dream-maker.tmLanguage.json"
  },
  {
    id: "elixir",
    scopeName: "source.elixir",
    path: "elixir.tmLanguage.json",
    samplePath: "elixir.sample",
    embeddedLangs: ["html"]
  },
  {
    id: "elm",
    scopeName: "source.elm",
    path: "elm.tmLanguage.json",
    samplePath: "elm.sample",
    embeddedLangs: ["glsl"]
  },
  {
    id: "erb",
    scopeName: "text.html.erb",
    path: "erb.tmLanguage.json",
    samplePath: "erb.sample",
    embeddedLangs: ["html", "ruby"]
  },
  {
    id: "erlang",
    scopeName: "source.erlang",
    path: "erlang.tmLanguage.json",
    samplePath: "erlang.sample",
    aliases: ["erl"]
  },
  {
    id: "fish",
    scopeName: "source.fish",
    path: "fish.tmLanguage.json",
    samplePath: "fish.sample"
  },
  {
    id: "fsharp",
    scopeName: "source.fsharp",
    path: "fsharp.tmLanguage.json",
    samplePath: "fsharp.sample",
    aliases: ["f#", "fs"],
    embeddedLangs: ["markdown"]
  },
  {
    id: "gdresource",
    scopeName: "source.gdresource",
    path: "gdresource.tmLanguage.json",
    samplePath: "gdresource.sample",
    embeddedLangs: ["gdshader", "gdscript"]
  },
  {
    id: "gdscript",
    scopeName: "source.gdscript",
    path: "gdscript.tmLanguage.json",
    samplePath: "gdscript.sample"
  },
  {
    id: "gdshader",
    scopeName: "source.gdshader",
    path: "gdshader.tmLanguage.json",
    samplePath: "gdshader.sample"
  },
  {
    id: "gherkin",
    scopeName: "text.gherkin.feature",
    path: "gherkin.tmLanguage.json"
  },
  {
    id: "git-commit",
    scopeName: "text.git-commit",
    path: "git-commit.tmLanguage.json",
    embeddedLangs: ["diff"]
  },
  {
    id: "git-rebase",
    scopeName: "text.git-rebase",
    path: "git-rebase.tmLanguage.json",
    embeddedLangs: ["shellscript"]
  },
  {
    id: "glsl",
    scopeName: "source.glsl",
    path: "glsl.tmLanguage.json",
    samplePath: "glsl.sample",
    embeddedLangs: ["c"]
  },
  {
    id: "gnuplot",
    scopeName: "source.gnuplot",
    path: "gnuplot.tmLanguage.json"
  },
  {
    id: "go",
    scopeName: "source.go",
    path: "go.tmLanguage.json",
    samplePath: "go.sample"
  },
  {
    id: "graphql",
    scopeName: "source.graphql",
    path: "graphql.tmLanguage.json",
    embeddedLangs: ["javascript", "typescript", "jsx", "tsx"]
  },
  {
    id: "groovy",
    scopeName: "source.groovy",
    path: "groovy.tmLanguage.json"
  },
  {
    id: "hack",
    scopeName: "source.hack",
    path: "hack.tmLanguage.json",
    embeddedLangs: ["html", "sql"]
  },
  {
    id: "haml",
    scopeName: "text.haml",
    path: "haml.tmLanguage.json",
    embeddedLangs: ["ruby", "javascript", "sass", "coffee", "markdown", "css"]
  },
  {
    id: "handlebars",
    scopeName: "text.html.handlebars",
    path: "handlebars.tmLanguage.json",
    aliases: ["hbs"],
    embeddedLangs: ["html", "css", "javascript", "yaml"]
  },
  {
    id: "haskell",
    scopeName: "source.haskell",
    path: "haskell.tmLanguage.json",
    aliases: ["hs"]
  },
  {
    id: "hcl",
    scopeName: "source.hcl",
    path: "hcl.tmLanguage.json",
    samplePath: "hcl.sample"
  },
  {
    id: "hlsl",
    scopeName: "source.hlsl",
    path: "hlsl.tmLanguage.json"
  },
  {
    id: "html",
    scopeName: "text.html.basic",
    path: "html.tmLanguage.json",
    samplePath: "html.sample",
    embeddedLangs: ["javascript", "css"]
  },
  {
    id: "http",
    scopeName: "source.http",
    path: "http.tmLanguage.json",
    samplePath: "http.sample",
    embeddedLangs: ["shellscript", "json", "xml", "graphql"]
  },
  {
    id: "imba",
    scopeName: "source.imba",
    path: "imba.tmLanguage.json",
    samplePath: "imba.sample"
  },
  {
    id: "ini",
    scopeName: "source.ini",
    path: "ini.tmLanguage.json",
    aliases: ["properties"]
  },
  {
    id: "java",
    scopeName: "source.java",
    path: "java.tmLanguage.json",
    samplePath: "java.sample"
  },
  {
    id: "javascript",
    scopeName: "source.js",
    path: "javascript.tmLanguage.json",
    samplePath: "javascript.sample",
    aliases: ["js"]
  },
  {
    id: "jinja-html",
    scopeName: "text.html.jinja",
    path: "jinja-html.tmLanguage.json",
    embeddedLangs: ["html"]
  },
  {
    id: "jison",
    scopeName: "source.jison",
    path: "jison.tmLanguage.json",
    samplePath: "jison.sample",
    embeddedLangs: ["javascript"]
  },
  {
    id: "json",
    scopeName: "source.json",
    path: "json.tmLanguage.json"
  },
  {
    id: "json5",
    scopeName: "source.json5",
    path: "json5.tmLanguage.json",
    samplePath: "json5.sample"
  },
  {
    id: "jsonc",
    scopeName: "source.json.comments",
    path: "jsonc.tmLanguage.json"
  },
  {
    id: "jsonnet",
    scopeName: "source.jsonnet",
    path: "jsonnet.tmLanguage.json"
  },
  {
    id: "jssm",
    scopeName: "source.jssm",
    path: "jssm.tmLanguage.json",
    samplePath: "jssm.sample",
    aliases: ["fsl"]
  },
  {
    id: "jsx",
    scopeName: "source.js.jsx",
    path: "jsx.tmLanguage.json"
  },
  {
    id: "julia",
    scopeName: "source.julia",
    path: "julia.tmLanguage.json",
    embeddedLangs: ["cpp", "python", "javascript", "r", "sql"]
  },
  {
    id: "kotlin",
    scopeName: "source.kotlin",
    path: "kotlin.tmLanguage.json",
    samplePath: "kotlin.sample"
  },
  {
    id: "kusto",
    scopeName: "source.kusto",
    path: "kusto.tmLanguage.json",
    samplePath: "kusto.sample",
    aliases: ["kql"]
  },
  {
    id: "latex",
    scopeName: "text.tex.latex",
    path: "latex.tmLanguage.json",
    embeddedLangs: ["tex", "css", "haskell", "html", "xml", "java", "lua", "julia", "ruby", "javascript", "typescript", "python", "yaml", "rust", "scala", "gnuplot"]
  },
  {
    id: "less",
    scopeName: "source.css.less",
    path: "less.tmLanguage.json",
    embeddedLangs: ["css"]
  },
  {
    id: "liquid",
    scopeName: "text.html.liquid",
    path: "liquid.tmLanguage.json",
    samplePath: "liquid.sample",
    embeddedLangs: ["html", "css", "json", "javascript"]
  },
  {
    id: "lisp",
    scopeName: "source.lisp",
    path: "lisp.tmLanguage.json"
  },
  {
    id: "logo",
    scopeName: "source.logo",
    path: "logo.tmLanguage.json"
  },
  {
    id: "lua",
    scopeName: "source.lua",
    path: "lua.tmLanguage.json",
    embeddedLangs: ["c"]
  },
  {
    id: "make",
    scopeName: "source.makefile",
    path: "make.tmLanguage.json",
    aliases: ["makefile"]
  },
  {
    id: "markdown",
    scopeName: "text.html.markdown",
    path: "markdown.tmLanguage.json",
    aliases: ["md"],
    embeddedLangs: ["css", "html", "ini", "java", "lua", "make", "perl", "r", "ruby", "php", "sql", "vb", "xml", "xsl", "yaml", "bat", "clojure", "coffee", "c", "cpp", "diff", "docker", "git-commit", "git-rebase", "go", "groovy", "pug", "javascript", "json", "jsonc", "less", "objective-c", "swift", "scss", "raku", "powershell", "python", "julia", "rust", "scala", "shellscript", "typescript", "tsx", "csharp", "fsharp", "dart", "handlebars", "erlang", "elixir", "latex", "bibtex"]
  },
  {
    id: "marko",
    scopeName: "text.marko",
    path: "marko.tmLanguage.json",
    embeddedLangs: ["css", "less", "scss", "javascript"]
  },
  {
    id: "matlab",
    scopeName: "source.matlab",
    path: "matlab.tmLanguage.json"
  },
  {
    id: "mdx",
    scopeName: "source.mdx",
    path: "mdx.tmLanguage.json",
    embeddedLangs: ["tsx", "toml", "yaml", "c", "clojure", "coffee", "cpp", "csharp", "css", "diff", "docker", "elixir", "elm", "erlang", "go", "graphql", "haskell", "html", "ini", "java", "javascript", "json", "julia", "kotlin", "less", "lua", "make", "markdown", "objective-c", "perl", "python", "r", "ruby", "rust", "scala", "scss", "shellscript", "sql", "xml", "swift", "typescript"]
  },
  {
    id: "mermaid",
    scopeName: "source.mermaid",
    path: "mermaid.tmLanguage.json"
  },
  {
    id: "nginx",
    scopeName: "source.nginx",
    path: "nginx.tmLanguage.json",
    embeddedLangs: ["lua"]
  },
  {
    id: "nim",
    scopeName: "source.nim",
    path: "nim.tmLanguage.json",
    embeddedLangs: ["c", "html", "xml", "javascript", "css", "glsl", "markdown"]
  },
  {
    id: "nix",
    scopeName: "source.nix",
    path: "nix.tmLanguage.json"
  },
  {
    id: "objective-c",
    scopeName: "source.objc",
    path: "objective-c.tmLanguage.json",
    aliases: ["objc"]
  },
  {
    id: "objective-cpp",
    scopeName: "source.objcpp",
    path: "objective-cpp.tmLanguage.json"
  },
  {
    id: "ocaml",
    scopeName: "source.ocaml",
    path: "ocaml.tmLanguage.json"
  },
  {
    id: "pascal",
    scopeName: "source.pascal",
    path: "pascal.tmLanguage.json"
  },
  {
    id: "perl",
    scopeName: "source.perl",
    path: "perl.tmLanguage.json",
    embeddedLangs: ["html", "xml", "css", "javascript", "sql"]
  },
  {
    id: "php",
    scopeName: "source.php",
    path: "php.tmLanguage.json",
    embeddedLangs: ["html", "xml", "sql", "javascript", "json", "css"]
  },
  {
    id: "plsql",
    scopeName: "source.plsql.oracle",
    path: "plsql.tmLanguage.json"
  },
  {
    id: "postcss",
    scopeName: "source.css.postcss",
    path: "postcss.tmLanguage.json"
  },
  {
    id: "powerquery",
    scopeName: "source.powerquery",
    path: "powerquery.tmLanguage.json",
    samplePath: "powerquery.sample"
  },
  {
    id: "powershell",
    scopeName: "source.powershell",
    path: "powershell.tmLanguage.json",
    aliases: ["ps", "ps1"]
  },
  {
    id: "prisma",
    scopeName: "source.prisma",
    path: "prisma.tmLanguage.json",
    samplePath: "prisma.sample"
  },
  {
    id: "prolog",
    scopeName: "source.prolog",
    path: "prolog.tmLanguage.json"
  },
  {
    id: "proto",
    scopeName: "source.proto",
    path: "proto.tmLanguage.json",
    samplePath: "proto.sample"
  },
  {
    id: "pug",
    scopeName: "text.pug",
    path: "pug.tmLanguage.json",
    aliases: ["jade"],
    embeddedLangs: ["javascript", "css", "sass", "scss", "stylus", "coffee", "html"]
  },
  {
    id: "puppet",
    scopeName: "source.puppet",
    path: "puppet.tmLanguage.json"
  },
  {
    id: "purescript",
    scopeName: "source.purescript",
    path: "purescript.tmLanguage.json"
  },
  {
    id: "python",
    scopeName: "source.python",
    path: "python.tmLanguage.json",
    samplePath: "python.sample",
    aliases: ["py"]
  },
  {
    id: "r",
    scopeName: "source.r",
    path: "r.tmLanguage.json"
  },
  {
    id: "raku",
    scopeName: "source.perl.6",
    path: "raku.tmLanguage.json",
    aliases: ["perl6"]
  },
  {
    id: "razor",
    scopeName: "text.aspnetcorerazor",
    path: "razor.tmLanguage.json",
    embeddedLangs: ["html", "csharp"]
  },
  {
    id: "reg",
    scopeName: "source.reg",
    path: "reg.tmLanguage.json",
    samplePath: "reg.sample"
  },
  {
    id: "rel",
    scopeName: "source.rel",
    path: "rel.tmLanguage.json",
    samplePath: "rel.sample"
  },
  {
    id: "riscv",
    scopeName: "source.riscv",
    path: "riscv.tmLanguage.json"
  },
  {
    id: "rst",
    scopeName: "source.rst",
    path: "rst.tmLanguage.json",
    embeddedLangs: ["cpp", "python", "javascript", "shellscript", "yaml", "cmake", "ruby"]
  },
  {
    id: "ruby",
    scopeName: "source.ruby",
    path: "ruby.tmLanguage.json",
    samplePath: "ruby.sample",
    aliases: ["rb"],
    embeddedLangs: ["html", "xml", "sql", "css", "c", "javascript", "shellscript", "lua"]
  },
  {
    id: "rust",
    scopeName: "source.rust",
    path: "rust.tmLanguage.json",
    aliases: ["rs"]
  },
  {
    id: "sas",
    scopeName: "source.sas",
    path: "sas.tmLanguage.json",
    embeddedLangs: ["sql"]
  },
  {
    id: "sass",
    scopeName: "source.sass",
    path: "sass.tmLanguage.json"
  },
  {
    id: "scala",
    scopeName: "source.scala",
    path: "scala.tmLanguage.json"
  },
  {
    id: "scheme",
    scopeName: "source.scheme",
    path: "scheme.tmLanguage.json"
  },
  {
    id: "scss",
    scopeName: "source.css.scss",
    path: "scss.tmLanguage.json",
    embeddedLangs: ["css"]
  },
  {
    id: "shaderlab",
    scopeName: "source.shaderlab",
    path: "shaderlab.tmLanguage.json",
    aliases: ["shader"],
    embeddedLangs: ["hlsl"]
  },
  {
    id: "shellscript",
    scopeName: "source.shell",
    path: "shellscript.tmLanguage.json",
    aliases: ["bash", "console", "sh", "shell", "zsh"]
  },
  {
    id: "smalltalk",
    scopeName: "source.smalltalk",
    path: "smalltalk.tmLanguage.json"
  },
  {
    id: "solidity",
    scopeName: "source.solidity",
    path: "solidity.tmLanguage.json"
  },
  {
    id: "sparql",
    scopeName: "source.sparql",
    path: "sparql.tmLanguage.json",
    samplePath: "sparql.sample",
    embeddedLangs: ["turtle"]
  },
  {
    id: "sql",
    scopeName: "source.sql",
    path: "sql.tmLanguage.json"
  },
  {
    id: "ssh-config",
    scopeName: "source.ssh-config",
    path: "ssh-config.tmLanguage.json"
  },
  {
    id: "stata",
    scopeName: "source.stata",
    path: "stata.tmLanguage.json",
    samplePath: "stata.sample",
    embeddedLangs: ["sql"]
  },
  {
    id: "stylus",
    scopeName: "source.stylus",
    path: "stylus.tmLanguage.json",
    aliases: ["styl"]
  },
  {
    id: "svelte",
    scopeName: "source.svelte",
    path: "svelte.tmLanguage.json",
    embeddedLangs: ["javascript", "typescript", "coffee", "stylus", "sass", "css", "scss", "less", "postcss", "pug", "markdown"]
  },
  {
    id: "swift",
    scopeName: "source.swift",
    path: "swift.tmLanguage.json"
  },
  {
    id: "system-verilog",
    scopeName: "source.systemverilog",
    path: "system-verilog.tmLanguage.json"
  },
  {
    id: "tasl",
    scopeName: "source.tasl",
    path: "tasl.tmLanguage.json",
    samplePath: "tasl.sample"
  },
  {
    id: "tcl",
    scopeName: "source.tcl",
    path: "tcl.tmLanguage.json"
  },
  {
    id: "tex",
    scopeName: "text.tex",
    path: "tex.tmLanguage.json",
    embeddedLangs: ["r"]
  },
  {
    id: "toml",
    scopeName: "source.toml",
    path: "toml.tmLanguage.json"
  },
  {
    id: "tsx",
    scopeName: "source.tsx",
    path: "tsx.tmLanguage.json",
    samplePath: "tsx.sample"
  },
  {
    id: "turtle",
    scopeName: "source.turtle",
    path: "turtle.tmLanguage.json",
    samplePath: "turtle.sample"
  },
  {
    id: "twig",
    scopeName: "text.html.twig",
    path: "twig.tmLanguage.json",
    embeddedLangs: ["css", "javascript", "php", "python", "ruby"]
  },
  {
    id: "typescript",
    scopeName: "source.ts",
    path: "typescript.tmLanguage.json",
    aliases: ["ts"]
  },
  {
    id: "v",
    scopeName: "source.v",
    path: "v.tmLanguage.json",
    samplePath: "v.sample"
  },
  {
    id: "vb",
    scopeName: "source.asp.vb.net",
    path: "vb.tmLanguage.json",
    aliases: ["cmd"]
  },
  {
    id: "verilog",
    scopeName: "source.verilog",
    path: "verilog.tmLanguage.json"
  },
  {
    id: "vhdl",
    scopeName: "source.vhdl",
    path: "vhdl.tmLanguage.json"
  },
  {
    id: "viml",
    scopeName: "source.viml",
    path: "viml.tmLanguage.json",
    aliases: ["vim", "vimscript"]
  },
  {
    id: "vue-html",
    scopeName: "text.html.vue-html",
    path: "vue-html.tmLanguage.json",
    embeddedLangs: ["vue", "javascript"]
  },
  {
    id: "vue",
    scopeName: "source.vue",
    path: "vue.tmLanguage.json",
    embeddedLangs: ["html", "markdown", "pug", "stylus", "sass", "css", "scss", "less", "javascript", "typescript", "jsx", "tsx", "json", "jsonc", "json5", "yaml", "toml", "graphql"]
  },
  {
    id: "wasm",
    scopeName: "source.wat",
    path: "wasm.tmLanguage.json"
  },
  {
    id: "wenyan",
    scopeName: "source.wenyan",
    path: "wenyan.tmLanguage.json",
    aliases: ["文言"]
  },
  {
    id: "wgsl",
    scopeName: "source.wgsl",
    path: "wgsl.tmLanguage.json",
    samplePath: "wgsl.sample"
  },
  {
    id: "wolfram",
    scopeName: "source.wolfram",
    path: "wolfram.tmLanguage.json",
    samplePath: "wolfram.sample"
  },
  {
    id: "xml",
    scopeName: "text.xml",
    path: "xml.tmLanguage.json",
    embeddedLangs: ["java"]
  },
  {
    id: "xsl",
    scopeName: "text.xml.xsl",
    path: "xsl.tmLanguage.json",
    embeddedLangs: ["xml"]
  },
  {
    id: "yaml",
    scopeName: "source.yaml",
    path: "yaml.tmLanguage.json",
    aliases: ["yml"]
  },
  {
    id: "zenscript",
    scopeName: "source.zenscript",
    path: "zenscript.tmLanguage.json",
    samplePath: "zenscript.sample"
  }
];
var FontStyle = /* @__PURE__ */ ((FontStyle2) => {
  FontStyle2[FontStyle2["NotSet"] = -1] = "NotSet";
  FontStyle2[FontStyle2["None"] = 0] = "None";
  FontStyle2[FontStyle2["Italic"] = 1] = "Italic";
  FontStyle2[FontStyle2["Bold"] = 2] = "Bold";
  FontStyle2[FontStyle2["Underline"] = 4] = "Underline";
  return FontStyle2;
})(FontStyle || {});
class StackElementMetadata {
  static toBinaryStr(metadata) {
    let r = metadata.toString(2);
    while (r.length < 32) {
      r = "0" + r;
    }
    return r;
  }
  static printMetadata(metadata) {
    let languageId = StackElementMetadata.getLanguageId(metadata);
    let tokenType = StackElementMetadata.getTokenType(metadata);
    let fontStyle = StackElementMetadata.getFontStyle(metadata);
    let foreground = StackElementMetadata.getForeground(metadata);
    let background = StackElementMetadata.getBackground(metadata);
    console.log({
      languageId,
      tokenType,
      fontStyle,
      foreground,
      background
    });
  }
  static getLanguageId(metadata) {
    return (metadata & 255) >>> 0;
  }
  static getTokenType(metadata) {
    return (metadata & 768) >>> 8;
  }
  static getFontStyle(metadata) {
    return (metadata & 14336) >>> 11;
  }
  static getForeground(metadata) {
    return (metadata & 8372224) >>> 15;
  }
  static getBackground(metadata) {
    return (metadata & 4286578688) >>> 24;
  }
  static containsBalancedBrackets(metadata) {
    return (metadata & 1024) !== 0;
  }
  static set(metadata, languageId, tokenType, fontStyle, foreground, background) {
    let _languageId = StackElementMetadata.getLanguageId(metadata);
    let _tokenType = StackElementMetadata.getTokenType(metadata);
    let _fontStyle = StackElementMetadata.getFontStyle(metadata);
    let _foreground = StackElementMetadata.getForeground(metadata);
    let _background = StackElementMetadata.getBackground(metadata);
    let _containsBalancedBracketsBit = StackElementMetadata.containsBalancedBrackets(
      metadata
    ) ? 1 : 0;
    if (languageId !== 0) {
      _languageId = languageId;
    }
    if (tokenType !== 0) {
      _tokenType = tokenType === 8 ? 0 : tokenType;
    }
    if (fontStyle !== -1) {
      _fontStyle = fontStyle;
    }
    if (foreground !== 0) {
      _foreground = foreground;
    }
    if (background !== 0) {
      _background = background;
    }
    return (_languageId << 0 | _tokenType << 8 | _fontStyle << 11 | _containsBalancedBracketsBit << 10 | _foreground << 15 | _background << 24) >>> 0;
  }
}
function trimEndSlash(str) {
  if (str.endsWith("/") || str.endsWith("\\"))
    return str.slice(0, -1);
  return str;
}
function trimStartDot(str) {
  if (str.startsWith("./"))
    return str.slice(2);
  return str;
}
function dirpathparts(str) {
  const parts2 = str.split(/[\/\\]/g);
  return parts2.slice(0, parts2.length - 1);
}
function join(...parts2) {
  return parts2.map(trimEndSlash).map(trimStartDot).join("/");
}
function groupBy(elements, keyGetter) {
  const map2 = /* @__PURE__ */ new Map();
  for (const element of elements) {
    const key = keyGetter(element);
    if (map2.has(key)) {
      const group = map2.get(key);
      group.push(element);
    } else {
      map2.set(key, [element]);
    }
  }
  return map2;
}
function createScanner(text, ignoreTrivia = false) {
  const len = text.length;
  let pos = 0, value2 = "", tokenOffset = 0, token = 16, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0;
  function scanHexDigits(count, exact) {
    let digits = 0;
    let value3 = 0;
    while (digits < count || !exact) {
      let ch = text.charCodeAt(pos);
      if (ch >= 48 && ch <= 57) {
        value3 = value3 * 16 + ch - 48;
      } else if (ch >= 65 && ch <= 70) {
        value3 = value3 * 16 + ch - 65 + 10;
      } else if (ch >= 97 && ch <= 102) {
        value3 = value3 * 16 + ch - 97 + 10;
      } else {
        break;
      }
      pos++;
      digits++;
    }
    if (digits < count) {
      value3 = -1;
    }
    return value3;
  }
  function setPosition2(newPosition) {
    pos = newPosition;
    value2 = "";
    tokenOffset = 0;
    token = 16;
    scanError = 0;
  }
  function scanNumber() {
    let start = pos;
    if (text.charCodeAt(pos) === 48) {
      pos++;
    } else {
      pos++;
      while (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
      }
    }
    if (pos < text.length && text.charCodeAt(pos) === 46) {
      pos++;
      if (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
        while (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
        }
      } else {
        scanError = 3;
        return text.substring(start, pos);
      }
    }
    let end = pos;
    if (pos < text.length && (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101)) {
      pos++;
      if (pos < text.length && text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45) {
        pos++;
      }
      if (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
        while (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
        }
        end = pos;
      } else {
        scanError = 3;
      }
    }
    return text.substring(start, end);
  }
  function scanString() {
    let result = "", start = pos;
    while (true) {
      if (pos >= len) {
        result += text.substring(start, pos);
        scanError = 2;
        break;
      }
      const ch = text.charCodeAt(pos);
      if (ch === 34) {
        result += text.substring(start, pos);
        pos++;
        break;
      }
      if (ch === 92) {
        result += text.substring(start, pos);
        pos++;
        if (pos >= len) {
          scanError = 2;
          break;
        }
        const ch2 = text.charCodeAt(pos++);
        switch (ch2) {
          case 34:
            result += '"';
            break;
          case 92:
            result += "\\";
            break;
          case 47:
            result += "/";
            break;
          case 98:
            result += "\b";
            break;
          case 102:
            result += "\f";
            break;
          case 110:
            result += "\n";
            break;
          case 114:
            result += "\r";
            break;
          case 116:
            result += "	";
            break;
          case 117:
            const ch3 = scanHexDigits(4, true);
            if (ch3 >= 0) {
              result += String.fromCharCode(ch3);
            } else {
              scanError = 4;
            }
            break;
          default:
            scanError = 5;
        }
        start = pos;
        continue;
      }
      if (ch >= 0 && ch <= 31) {
        if (isLineBreak(ch)) {
          result += text.substring(start, pos);
          scanError = 2;
          break;
        } else {
          scanError = 6;
        }
      }
      pos++;
    }
    return result;
  }
  function scanNext() {
    value2 = "";
    scanError = 0;
    tokenOffset = pos;
    lineStartOffset = lineNumber;
    prevTokenLineStartOffset = tokenLineStartOffset;
    if (pos >= len) {
      tokenOffset = len;
      return token = 17;
    }
    let code = text.charCodeAt(pos);
    if (isWhiteSpace(code)) {
      do {
        pos++;
        value2 += String.fromCharCode(code);
        code = text.charCodeAt(pos);
      } while (isWhiteSpace(code));
      return token = 15;
    }
    if (isLineBreak(code)) {
      pos++;
      value2 += String.fromCharCode(code);
      if (code === 13 && text.charCodeAt(pos) === 10) {
        pos++;
        value2 += "\n";
      }
      lineNumber++;
      tokenLineStartOffset = pos;
      return token = 14;
    }
    switch (code) {
      case 123:
        pos++;
        return token = 1;
      case 125:
        pos++;
        return token = 2;
      case 91:
        pos++;
        return token = 3;
      case 93:
        pos++;
        return token = 4;
      case 58:
        pos++;
        return token = 6;
      case 44:
        pos++;
        return token = 5;
      case 34:
        pos++;
        value2 = scanString();
        return token = 10;
      case 47:
        const start = pos - 1;
        if (text.charCodeAt(pos + 1) === 47) {
          pos += 2;
          while (pos < len) {
            if (isLineBreak(text.charCodeAt(pos))) {
              break;
            }
            pos++;
          }
          value2 = text.substring(start, pos);
          return token = 12;
        }
        if (text.charCodeAt(pos + 1) === 42) {
          pos += 2;
          const safeLength = len - 1;
          let commentClosed = false;
          while (pos < safeLength) {
            const ch = text.charCodeAt(pos);
            if (ch === 42 && text.charCodeAt(pos + 1) === 47) {
              pos += 2;
              commentClosed = true;
              break;
            }
            pos++;
            if (isLineBreak(ch)) {
              if (ch === 13 && text.charCodeAt(pos) === 10) {
                pos++;
              }
              lineNumber++;
              tokenLineStartOffset = pos;
            }
          }
          if (!commentClosed) {
            pos++;
            scanError = 1;
          }
          value2 = text.substring(start, pos);
          return token = 13;
        }
        value2 += String.fromCharCode(code);
        pos++;
        return token = 16;
      case 45:
        value2 += String.fromCharCode(code);
        pos++;
        if (pos === len || !isDigit(text.charCodeAt(pos))) {
          return token = 16;
        }
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        value2 += scanNumber();
        return token = 11;
      default:
        while (pos < len && isUnknownContentCharacter(code)) {
          pos++;
          code = text.charCodeAt(pos);
        }
        if (tokenOffset !== pos) {
          value2 = text.substring(tokenOffset, pos);
          switch (value2) {
            case "true":
              return token = 8;
            case "false":
              return token = 9;
            case "null":
              return token = 7;
          }
          return token = 16;
        }
        value2 += String.fromCharCode(code);
        pos++;
        return token = 16;
    }
  }
  function isUnknownContentCharacter(code) {
    if (isWhiteSpace(code) || isLineBreak(code)) {
      return false;
    }
    switch (code) {
      case 125:
      case 93:
      case 123:
      case 91:
      case 34:
      case 58:
      case 44:
      case 47:
        return false;
    }
    return true;
  }
  function scanNextNonTrivia() {
    let result;
    do {
      result = scanNext();
    } while (result >= 12 && result <= 15);
    return result;
  }
  return {
    setPosition: setPosition2,
    getPosition: () => pos,
    scan: ignoreTrivia ? scanNextNonTrivia : scanNext,
    getToken: () => token,
    getTokenValue: () => value2,
    getTokenOffset: () => tokenOffset,
    getTokenLength: () => pos - tokenOffset,
    getTokenStartLine: () => lineStartOffset,
    getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,
    getTokenError: () => scanError
  };
}
function isWhiteSpace(ch) {
  return ch === 32 || ch === 9;
}
function isLineBreak(ch) {
  return ch === 10 || ch === 13;
}
function isDigit(ch) {
  return ch >= 48 && ch <= 57;
}
var CharacterCodes;
(function(CharacterCodes2) {
  CharacterCodes2[CharacterCodes2["lineFeed"] = 10] = "lineFeed";
  CharacterCodes2[CharacterCodes2["carriageReturn"] = 13] = "carriageReturn";
  CharacterCodes2[CharacterCodes2["space"] = 32] = "space";
  CharacterCodes2[CharacterCodes2["_0"] = 48] = "_0";
  CharacterCodes2[CharacterCodes2["_1"] = 49] = "_1";
  CharacterCodes2[CharacterCodes2["_2"] = 50] = "_2";
  CharacterCodes2[CharacterCodes2["_3"] = 51] = "_3";
  CharacterCodes2[CharacterCodes2["_4"] = 52] = "_4";
  CharacterCodes2[CharacterCodes2["_5"] = 53] = "_5";
  CharacterCodes2[CharacterCodes2["_6"] = 54] = "_6";
  CharacterCodes2[CharacterCodes2["_7"] = 55] = "_7";
  CharacterCodes2[CharacterCodes2["_8"] = 56] = "_8";
  CharacterCodes2[CharacterCodes2["_9"] = 57] = "_9";
  CharacterCodes2[CharacterCodes2["a"] = 97] = "a";
  CharacterCodes2[CharacterCodes2["b"] = 98] = "b";
  CharacterCodes2[CharacterCodes2["c"] = 99] = "c";
  CharacterCodes2[CharacterCodes2["d"] = 100] = "d";
  CharacterCodes2[CharacterCodes2["e"] = 101] = "e";
  CharacterCodes2[CharacterCodes2["f"] = 102] = "f";
  CharacterCodes2[CharacterCodes2["g"] = 103] = "g";
  CharacterCodes2[CharacterCodes2["h"] = 104] = "h";
  CharacterCodes2[CharacterCodes2["i"] = 105] = "i";
  CharacterCodes2[CharacterCodes2["j"] = 106] = "j";
  CharacterCodes2[CharacterCodes2["k"] = 107] = "k";
  CharacterCodes2[CharacterCodes2["l"] = 108] = "l";
  CharacterCodes2[CharacterCodes2["m"] = 109] = "m";
  CharacterCodes2[CharacterCodes2["n"] = 110] = "n";
  CharacterCodes2[CharacterCodes2["o"] = 111] = "o";
  CharacterCodes2[CharacterCodes2["p"] = 112] = "p";
  CharacterCodes2[CharacterCodes2["q"] = 113] = "q";
  CharacterCodes2[CharacterCodes2["r"] = 114] = "r";
  CharacterCodes2[CharacterCodes2["s"] = 115] = "s";
  CharacterCodes2[CharacterCodes2["t"] = 116] = "t";
  CharacterCodes2[CharacterCodes2["u"] = 117] = "u";
  CharacterCodes2[CharacterCodes2["v"] = 118] = "v";
  CharacterCodes2[CharacterCodes2["w"] = 119] = "w";
  CharacterCodes2[CharacterCodes2["x"] = 120] = "x";
  CharacterCodes2[CharacterCodes2["y"] = 121] = "y";
  CharacterCodes2[CharacterCodes2["z"] = 122] = "z";
  CharacterCodes2[CharacterCodes2["A"] = 65] = "A";
  CharacterCodes2[CharacterCodes2["B"] = 66] = "B";
  CharacterCodes2[CharacterCodes2["C"] = 67] = "C";
  CharacterCodes2[CharacterCodes2["D"] = 68] = "D";
  CharacterCodes2[CharacterCodes2["E"] = 69] = "E";
  CharacterCodes2[CharacterCodes2["F"] = 70] = "F";
  CharacterCodes2[CharacterCodes2["G"] = 71] = "G";
  CharacterCodes2[CharacterCodes2["H"] = 72] = "H";
  CharacterCodes2[CharacterCodes2["I"] = 73] = "I";
  CharacterCodes2[CharacterCodes2["J"] = 74] = "J";
  CharacterCodes2[CharacterCodes2["K"] = 75] = "K";
  CharacterCodes2[CharacterCodes2["L"] = 76] = "L";
  CharacterCodes2[CharacterCodes2["M"] = 77] = "M";
  CharacterCodes2[CharacterCodes2["N"] = 78] = "N";
  CharacterCodes2[CharacterCodes2["O"] = 79] = "O";
  CharacterCodes2[CharacterCodes2["P"] = 80] = "P";
  CharacterCodes2[CharacterCodes2["Q"] = 81] = "Q";
  CharacterCodes2[CharacterCodes2["R"] = 82] = "R";
  CharacterCodes2[CharacterCodes2["S"] = 83] = "S";
  CharacterCodes2[CharacterCodes2["T"] = 84] = "T";
  CharacterCodes2[CharacterCodes2["U"] = 85] = "U";
  CharacterCodes2[CharacterCodes2["V"] = 86] = "V";
  CharacterCodes2[CharacterCodes2["W"] = 87] = "W";
  CharacterCodes2[CharacterCodes2["X"] = 88] = "X";
  CharacterCodes2[CharacterCodes2["Y"] = 89] = "Y";
  CharacterCodes2[CharacterCodes2["Z"] = 90] = "Z";
  CharacterCodes2[CharacterCodes2["asterisk"] = 42] = "asterisk";
  CharacterCodes2[CharacterCodes2["backslash"] = 92] = "backslash";
  CharacterCodes2[CharacterCodes2["closeBrace"] = 125] = "closeBrace";
  CharacterCodes2[CharacterCodes2["closeBracket"] = 93] = "closeBracket";
  CharacterCodes2[CharacterCodes2["colon"] = 58] = "colon";
  CharacterCodes2[CharacterCodes2["comma"] = 44] = "comma";
  CharacterCodes2[CharacterCodes2["dot"] = 46] = "dot";
  CharacterCodes2[CharacterCodes2["doubleQuote"] = 34] = "doubleQuote";
  CharacterCodes2[CharacterCodes2["minus"] = 45] = "minus";
  CharacterCodes2[CharacterCodes2["openBrace"] = 123] = "openBrace";
  CharacterCodes2[CharacterCodes2["openBracket"] = 91] = "openBracket";
  CharacterCodes2[CharacterCodes2["plus"] = 43] = "plus";
  CharacterCodes2[CharacterCodes2["slash"] = 47] = "slash";
  CharacterCodes2[CharacterCodes2["formFeed"] = 12] = "formFeed";
  CharacterCodes2[CharacterCodes2["tab"] = 9] = "tab";
})(CharacterCodes || (CharacterCodes = {}));
var ParseOptions;
(function(ParseOptions2) {
  ParseOptions2.DEFAULT = {
    allowTrailingComma: false
  };
})(ParseOptions || (ParseOptions = {}));
function parse$1(text, errors = [], options = ParseOptions.DEFAULT) {
  let currentProperty = null;
  let currentParent = [];
  const previousParents = [];
  function onValue(value2) {
    if (Array.isArray(currentParent)) {
      currentParent.push(value2);
    } else if (currentProperty !== null) {
      currentParent[currentProperty] = value2;
    }
  }
  const visitor = {
    onObjectBegin: () => {
      const object = {};
      onValue(object);
      previousParents.push(currentParent);
      currentParent = object;
      currentProperty = null;
    },
    onObjectProperty: (name) => {
      currentProperty = name;
    },
    onObjectEnd: () => {
      currentParent = previousParents.pop();
    },
    onArrayBegin: () => {
      const array = [];
      onValue(array);
      previousParents.push(currentParent);
      currentParent = array;
      currentProperty = null;
    },
    onArrayEnd: () => {
      currentParent = previousParents.pop();
    },
    onLiteralValue: onValue,
    onError: (error, offset, length2) => {
      errors.push({ error, offset, length: length2 });
    }
  };
  visit(text, visitor, options);
  return currentParent[0];
}
function visit(text, visitor, options = ParseOptions.DEFAULT) {
  const _scanner = createScanner(text, false);
  const _jsonPath = [];
  function toNoArgVisit(visitFunction) {
    return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
  }
  function toNoArgVisitWithPath(visitFunction) {
    return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
  }
  function toOneArgVisit(visitFunction) {
    return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
  }
  function toOneArgVisitWithPath(visitFunction) {
    return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
  }
  const onObjectBegin = toNoArgVisitWithPath(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisitWithPath(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError2 = toOneArgVisit(visitor.onError);
  const disallowComments = options && options.disallowComments;
  const allowTrailingComma = options && options.allowTrailingComma;
  function scanNext() {
    while (true) {
      const token = _scanner.scan();
      switch (_scanner.getTokenError()) {
        case 4:
          handleError2(
            14
            /* ParseErrorCode.InvalidUnicode */
          );
          break;
        case 5:
          handleError2(
            15
            /* ParseErrorCode.InvalidEscapeCharacter */
          );
          break;
        case 3:
          handleError2(
            13
            /* ParseErrorCode.UnexpectedEndOfNumber */
          );
          break;
        case 1:
          if (!disallowComments) {
            handleError2(
              11
              /* ParseErrorCode.UnexpectedEndOfComment */
            );
          }
          break;
        case 2:
          handleError2(
            12
            /* ParseErrorCode.UnexpectedEndOfString */
          );
          break;
        case 6:
          handleError2(
            16
            /* ParseErrorCode.InvalidCharacter */
          );
          break;
      }
      switch (token) {
        case 12:
        case 13:
          if (disallowComments) {
            handleError2(
              10
              /* ParseErrorCode.InvalidCommentToken */
            );
          } else {
            onComment();
          }
          break;
        case 16:
          handleError2(
            1
            /* ParseErrorCode.InvalidSymbol */
          );
          break;
        case 15:
        case 14:
          break;
        default:
          return token;
      }
    }
  }
  function handleError2(error, skipUntilAfter = [], skipUntil = []) {
    onError2(error);
    if (skipUntilAfter.length + skipUntil.length > 0) {
      let token = _scanner.getToken();
      while (token !== 17) {
        if (skipUntilAfter.indexOf(token) !== -1) {
          scanNext();
          break;
        } else if (skipUntil.indexOf(token) !== -1) {
          break;
        }
        token = scanNext();
      }
    }
  }
  function parseString2(isValue) {
    const value2 = _scanner.getTokenValue();
    if (isValue) {
      onLiteralValue(value2);
    } else {
      onObjectProperty(value2);
      _jsonPath.push(value2);
    }
    scanNext();
    return true;
  }
  function parseLiteral() {
    switch (_scanner.getToken()) {
      case 11:
        const tokenValue = _scanner.getTokenValue();
        let value2 = Number(tokenValue);
        if (isNaN(value2)) {
          handleError2(
            2
            /* ParseErrorCode.InvalidNumberFormat */
          );
          value2 = 0;
        }
        onLiteralValue(value2);
        break;
      case 7:
        onLiteralValue(null);
        break;
      case 8:
        onLiteralValue(true);
        break;
      case 9:
        onLiteralValue(false);
        break;
      default:
        return false;
    }
    scanNext();
    return true;
  }
  function parseProperty() {
    if (_scanner.getToken() !== 10) {
      handleError2(3, [], [
        2,
        5
        /* SyntaxKind.CommaToken */
      ]);
      return false;
    }
    parseString2(false);
    if (_scanner.getToken() === 6) {
      onSeparator(":");
      scanNext();
      if (!parseValue()) {
        handleError2(4, [], [
          2,
          5
          /* SyntaxKind.CommaToken */
        ]);
      }
    } else {
      handleError2(5, [], [
        2,
        5
        /* SyntaxKind.CommaToken */
      ]);
    }
    _jsonPath.pop();
    return true;
  }
  function parseObject() {
    onObjectBegin();
    scanNext();
    let needsComma = false;
    while (_scanner.getToken() !== 2 && _scanner.getToken() !== 17) {
      if (_scanner.getToken() === 5) {
        if (!needsComma) {
          handleError2(4, [], []);
        }
        onSeparator(",");
        scanNext();
        if (_scanner.getToken() === 2 && allowTrailingComma) {
          break;
        }
      } else if (needsComma) {
        handleError2(6, [], []);
      }
      if (!parseProperty()) {
        handleError2(4, [], [
          2,
          5
          /* SyntaxKind.CommaToken */
        ]);
      }
      needsComma = true;
    }
    onObjectEnd();
    if (_scanner.getToken() !== 2) {
      handleError2(7, [
        2
        /* SyntaxKind.CloseBraceToken */
      ], []);
    } else {
      scanNext();
    }
    return true;
  }
  function parseArray() {
    onArrayBegin();
    scanNext();
    let isFirstElement = true;
    let needsComma = false;
    while (_scanner.getToken() !== 4 && _scanner.getToken() !== 17) {
      if (_scanner.getToken() === 5) {
        if (!needsComma) {
          handleError2(4, [], []);
        }
        onSeparator(",");
        scanNext();
        if (_scanner.getToken() === 4 && allowTrailingComma) {
          break;
        }
      } else if (needsComma) {
        handleError2(6, [], []);
      }
      if (isFirstElement) {
        _jsonPath.push(0);
        isFirstElement = false;
      } else {
        _jsonPath[_jsonPath.length - 1]++;
      }
      if (!parseValue()) {
        handleError2(4, [], [
          4,
          5
          /* SyntaxKind.CommaToken */
        ]);
      }
      needsComma = true;
    }
    onArrayEnd();
    if (!isFirstElement) {
      _jsonPath.pop();
    }
    if (_scanner.getToken() !== 4) {
      handleError2(8, [
        4
        /* SyntaxKind.CloseBracketToken */
      ], []);
    } else {
      scanNext();
    }
    return true;
  }
  function parseValue() {
    switch (_scanner.getToken()) {
      case 3:
        return parseArray();
      case 1:
        return parseObject();
      case 10:
        return parseString2(true);
      default:
        return parseLiteral();
    }
  }
  scanNext();
  if (_scanner.getToken() === 17) {
    if (options.allowEmptyContent) {
      return true;
    }
    handleError2(4, [], []);
    return false;
  }
  if (!parseValue()) {
    handleError2(4, [], []);
    return false;
  }
  if (_scanner.getToken() !== 17) {
    handleError2(9, [], []);
  }
  return true;
}
var ScanError;
(function(ScanError2) {
  ScanError2[ScanError2["None"] = 0] = "None";
  ScanError2[ScanError2["UnexpectedEndOfComment"] = 1] = "UnexpectedEndOfComment";
  ScanError2[ScanError2["UnexpectedEndOfString"] = 2] = "UnexpectedEndOfString";
  ScanError2[ScanError2["UnexpectedEndOfNumber"] = 3] = "UnexpectedEndOfNumber";
  ScanError2[ScanError2["InvalidUnicode"] = 4] = "InvalidUnicode";
  ScanError2[ScanError2["InvalidEscapeCharacter"] = 5] = "InvalidEscapeCharacter";
  ScanError2[ScanError2["InvalidCharacter"] = 6] = "InvalidCharacter";
})(ScanError || (ScanError = {}));
var SyntaxKind;
(function(SyntaxKind2) {
  SyntaxKind2[SyntaxKind2["OpenBraceToken"] = 1] = "OpenBraceToken";
  SyntaxKind2[SyntaxKind2["CloseBraceToken"] = 2] = "CloseBraceToken";
  SyntaxKind2[SyntaxKind2["OpenBracketToken"] = 3] = "OpenBracketToken";
  SyntaxKind2[SyntaxKind2["CloseBracketToken"] = 4] = "CloseBracketToken";
  SyntaxKind2[SyntaxKind2["CommaToken"] = 5] = "CommaToken";
  SyntaxKind2[SyntaxKind2["ColonToken"] = 6] = "ColonToken";
  SyntaxKind2[SyntaxKind2["NullKeyword"] = 7] = "NullKeyword";
  SyntaxKind2[SyntaxKind2["TrueKeyword"] = 8] = "TrueKeyword";
  SyntaxKind2[SyntaxKind2["FalseKeyword"] = 9] = "FalseKeyword";
  SyntaxKind2[SyntaxKind2["StringLiteral"] = 10] = "StringLiteral";
  SyntaxKind2[SyntaxKind2["NumericLiteral"] = 11] = "NumericLiteral";
  SyntaxKind2[SyntaxKind2["LineCommentTrivia"] = 12] = "LineCommentTrivia";
  SyntaxKind2[SyntaxKind2["BlockCommentTrivia"] = 13] = "BlockCommentTrivia";
  SyntaxKind2[SyntaxKind2["LineBreakTrivia"] = 14] = "LineBreakTrivia";
  SyntaxKind2[SyntaxKind2["Trivia"] = 15] = "Trivia";
  SyntaxKind2[SyntaxKind2["Unknown"] = 16] = "Unknown";
  SyntaxKind2[SyntaxKind2["EOF"] = 17] = "EOF";
})(SyntaxKind || (SyntaxKind = {}));
const parse = parse$1;
var ParseErrorCode;
(function(ParseErrorCode2) {
  ParseErrorCode2[ParseErrorCode2["InvalidSymbol"] = 1] = "InvalidSymbol";
  ParseErrorCode2[ParseErrorCode2["InvalidNumberFormat"] = 2] = "InvalidNumberFormat";
  ParseErrorCode2[ParseErrorCode2["PropertyNameExpected"] = 3] = "PropertyNameExpected";
  ParseErrorCode2[ParseErrorCode2["ValueExpected"] = 4] = "ValueExpected";
  ParseErrorCode2[ParseErrorCode2["ColonExpected"] = 5] = "ColonExpected";
  ParseErrorCode2[ParseErrorCode2["CommaExpected"] = 6] = "CommaExpected";
  ParseErrorCode2[ParseErrorCode2["CloseBraceExpected"] = 7] = "CloseBraceExpected";
  ParseErrorCode2[ParseErrorCode2["CloseBracketExpected"] = 8] = "CloseBracketExpected";
  ParseErrorCode2[ParseErrorCode2["EndOfFileExpected"] = 9] = "EndOfFileExpected";
  ParseErrorCode2[ParseErrorCode2["InvalidCommentToken"] = 10] = "InvalidCommentToken";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfComment"] = 11] = "UnexpectedEndOfComment";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfString"] = 12] = "UnexpectedEndOfString";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfNumber"] = 13] = "UnexpectedEndOfNumber";
  ParseErrorCode2[ParseErrorCode2["InvalidUnicode"] = 14] = "InvalidUnicode";
  ParseErrorCode2[ParseErrorCode2["InvalidEscapeCharacter"] = 15] = "InvalidEscapeCharacter";
  ParseErrorCode2[ParseErrorCode2["InvalidCharacter"] = 16] = "InvalidCharacter";
})(ParseErrorCode || (ParseErrorCode = {}));
const isWebWorker = typeof self !== "undefined" && typeof self.WorkerGlobalScope !== "undefined";
const isNode = "process" in globalThis && typeof process !== "undefined" && typeof process.release !== "undefined" && process.release.name === "node";
const isBrowser = isWebWorker || !isNode;
let CDN_ROOT = "";
const WASM_PATH = "dist/";
let _onigurumaPromise = null;
async function getOniguruma(wasmPath) {
  if (!_onigurumaPromise) {
    let loader;
    if (isBrowser) {
      {
        loader = mainExports$1.loadWASM({
          data: await fetch(_resolvePath(join(...dirpathparts(wasmPath), "onig.wasm")))
        });
      }
    } else {
      const path = require("path");
      const wasmPath2 = path.join(require.resolve("vscode-oniguruma"), "../onig.wasm");
      const fs = require("fs");
      const wasmBin = fs.readFileSync(wasmPath2).buffer;
      loader = mainExports$1.loadWASM(wasmBin);
    }
    _onigurumaPromise = loader.then(() => {
      return {
        createOnigScanner(patterns) {
          return mainExports$1.createOnigScanner(patterns);
        },
        createOnigString(s) {
          return mainExports$1.createOnigString(s);
        }
      };
    });
  }
  return _onigurumaPromise;
}
function _resolvePath(filepath) {
  if (isBrowser) {
    return `${CDN_ROOT}${filepath}`;
  } else {
    const path = require("path");
    if (path.isAbsolute(filepath)) {
      return filepath;
    } else {
      return path.resolve(__dirname, "..", filepath);
    }
  }
}
async function _fetchAssets(filepath) {
  const path = _resolvePath(filepath);
  if (isBrowser) {
    return await fetch(path).then((r) => r.text());
  } else {
    const fs = require("fs");
    return await fs.promises.readFile(path, "utf-8");
  }
}
async function _fetchJSONAssets(filepath) {
  const errors = [];
  const assetString = await _fetchAssets(filepath);
  let rawAsset;
  try {
    rawAsset = JSON.parse(assetString);
  } catch (e) {
    rawAsset = parse(assetString, errors, {
      allowTrailingComma: true
    });
    if (errors.length) {
      throw errors[0];
    }
  }
  return rawAsset;
}
async function fetchTheme(themePath) {
  let theme = await _fetchJSONAssets(themePath);
  const shikiTheme = toShikiTheme(theme);
  if (shikiTheme.include) {
    const includedTheme = await fetchTheme(join(...dirpathparts(themePath), shikiTheme.include));
    if (includedTheme.settings) {
      shikiTheme.settings = includedTheme.settings.concat(shikiTheme.settings);
    }
    if (includedTheme.bg && !shikiTheme.bg) {
      shikiTheme.bg = includedTheme.bg;
    }
    if (includedTheme.colors) {
      shikiTheme.colors = { ...includedTheme.colors, ...shikiTheme.colors };
    }
    delete shikiTheme.include;
  }
  return shikiTheme;
}
async function fetchGrammar(filepath) {
  return await _fetchJSONAssets(filepath);
}
function repairTheme(theme) {
  if (!theme.settings)
    theme.settings = [];
  if (theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope) {
    return;
  }
  theme.settings.unshift({
    settings: {
      foreground: theme.fg,
      background: theme.bg
    }
  });
}
function toShikiTheme(rawTheme) {
  const type2 = rawTheme.type || "dark";
  const shikiTheme = {
    name: rawTheme.name,
    type: type2,
    ...rawTheme,
    ...getThemeDefaultColors(rawTheme)
  };
  if (rawTheme.include) {
    shikiTheme.include = rawTheme.include;
  }
  if (rawTheme.tokenColors) {
    shikiTheme.settings = rawTheme.tokenColors;
    delete shikiTheme.tokenColors;
  }
  repairTheme(shikiTheme);
  return shikiTheme;
}
const VSCODE_FALLBACK_EDITOR_FG = { light: "#333333", dark: "#bbbbbb" };
const VSCODE_FALLBACK_EDITOR_BG = { light: "#fffffe", dark: "#1e1e1e" };
function getThemeDefaultColors(theme) {
  var _a, _b, _c, _d;
  let fg, bg;
  let settings = theme.settings ? theme.settings : theme.tokenColors;
  const globalSetting = settings ? settings.find((s) => {
    return !s.name && !s.scope;
  }) : void 0;
  if ((_a = globalSetting == null ? void 0 : globalSetting.settings) == null ? void 0 : _a.foreground) {
    fg = globalSetting.settings.foreground;
  }
  if ((_b = globalSetting == null ? void 0 : globalSetting.settings) == null ? void 0 : _b.background) {
    bg = globalSetting.settings.background;
  }
  if (!fg && ((_c = theme == null ? void 0 : theme.colors) == null ? void 0 : _c["editor.foreground"])) {
    fg = theme.colors["editor.foreground"];
  }
  if (!bg && ((_d = theme == null ? void 0 : theme.colors) == null ? void 0 : _d["editor.background"])) {
    bg = theme.colors["editor.background"];
  }
  if (!fg) {
    fg = theme.type === "light" ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;
  }
  if (!bg) {
    bg = theme.type === "light" ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;
  }
  return {
    fg,
    bg
  };
}
class Resolver {
  constructor(onigLibPromise, onigLibName) {
    this.languagesPath = "languages/";
    this.languageMap = {};
    this.scopeToLangMap = {};
    this._onigLibPromise = onigLibPromise;
    this._onigLibName = onigLibName;
  }
  get onigLib() {
    return this._onigLibPromise;
  }
  getOnigLibName() {
    return this._onigLibName;
  }
  getLangRegistration(langIdOrAlias) {
    return this.languageMap[langIdOrAlias];
  }
  async loadGrammar(scopeName) {
    const lang = this.scopeToLangMap[scopeName];
    if (!lang) {
      return null;
    }
    if (lang.grammar) {
      return lang.grammar;
    }
    const g = await fetchGrammar(
      languages.includes(lang) ? `${this.languagesPath}${lang.path}` : lang.path
    );
    lang.grammar = g;
    return g;
  }
  addLanguage(l) {
    this.languageMap[l.id] = l;
    if (l.aliases) {
      l.aliases.forEach((a) => {
        this.languageMap[a] = l;
      });
    }
    this.scopeToLangMap[l.scopeName] = l;
  }
}
function tokenizeWithTheme(theme, colorMap, fileContents, grammar, options) {
  let lines = fileContents.split(/\r\n|\r|\n/);
  let ruleStack = mainExports.INITIAL;
  let actual = [];
  let final = [];
  for (let i2 = 0, len = lines.length; i2 < len; i2++) {
    let line = lines[i2];
    if (line === "") {
      actual = [];
      final.push([]);
      continue;
    }
    let resultWithScopes;
    let tokensWithScopes;
    let tokensWithScopesIndex;
    if (options.includeExplanation) {
      resultWithScopes = grammar.tokenizeLine(line, ruleStack);
      tokensWithScopes = resultWithScopes.tokens;
      tokensWithScopesIndex = 0;
    }
    let result = grammar.tokenizeLine2(line, ruleStack);
    let tokensLength = result.tokens.length / 2;
    for (let j = 0; j < tokensLength; j++) {
      let startIndex = result.tokens[2 * j];
      let nextStartIndex = j + 1 < tokensLength ? result.tokens[2 * j + 2] : line.length;
      if (startIndex === nextStartIndex) {
        continue;
      }
      let metadata = result.tokens[2 * j + 1];
      let foreground = StackElementMetadata.getForeground(metadata);
      let foregroundColor = colorMap[foreground];
      let fontStyle = StackElementMetadata.getFontStyle(metadata);
      let explanation = [];
      if (options.includeExplanation) {
        let offset = 0;
        while (startIndex + offset < nextStartIndex) {
          let tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];
          let tokenWithScopesText = line.substring(
            tokenWithScopes.startIndex,
            tokenWithScopes.endIndex
          );
          offset += tokenWithScopesText.length;
          explanation.push({
            content: tokenWithScopesText,
            scopes: explainThemeScopes(theme, tokenWithScopes.scopes)
          });
          tokensWithScopesIndex++;
        }
      }
      actual.push({
        content: line.substring(startIndex, nextStartIndex),
        color: foregroundColor,
        fontStyle,
        explanation
      });
    }
    final.push(actual);
    actual = [];
    ruleStack = result.ruleStack;
  }
  return final;
}
function explainThemeScopes(theme, scopes2) {
  let result = [];
  for (let i2 = 0, len = scopes2.length; i2 < len; i2++) {
    let parentScopes = scopes2.slice(0, i2);
    let scope2 = scopes2[i2];
    result[i2] = {
      scopeName: scope2,
      themeMatches: explainThemeScope(theme, scope2, parentScopes)
    };
  }
  return result;
}
function matchesOne(selector, scope2) {
  let selectorPrefix = selector + ".";
  if (selector === scope2 || scope2.substring(0, selectorPrefix.length) === selectorPrefix) {
    return true;
  }
  return false;
}
function matches(selector, selectorParentScopes, scope2, parentScopes) {
  if (!matchesOne(selector, scope2)) {
    return false;
  }
  let selectorParentIndex = selectorParentScopes.length - 1;
  let parentIndex = parentScopes.length - 1;
  while (selectorParentIndex >= 0 && parentIndex >= 0) {
    if (matchesOne(selectorParentScopes[selectorParentIndex], parentScopes[parentIndex])) {
      selectorParentIndex--;
    }
    parentIndex--;
  }
  if (selectorParentIndex === -1) {
    return true;
  }
  return false;
}
function explainThemeScope(theme, scope2, parentScopes) {
  let result = [], resultLen = 0;
  for (let i2 = 0, len = theme.settings.length; i2 < len; i2++) {
    let setting = theme.settings[i2];
    let selectors;
    if (typeof setting.scope === "string") {
      selectors = setting.scope.split(/,/).map((scope22) => scope22.trim());
    } else if (Array.isArray(setting.scope)) {
      selectors = setting.scope;
    } else {
      continue;
    }
    for (let j = 0, lenJ = selectors.length; j < lenJ; j++) {
      let rawSelector = selectors[j];
      let rawSelectorPieces = rawSelector.split(/ /);
      let selector = rawSelectorPieces[rawSelectorPieces.length - 1];
      let selectorParentScopes = rawSelectorPieces.slice(0, rawSelectorPieces.length - 1);
      if (matches(selector, selectorParentScopes, scope2, parentScopes)) {
        result[resultLen++] = setting;
        j = lenJ;
      }
    }
  }
  return result;
}
var namedColors = [
  "black",
  "red",
  "green",
  "yellow",
  "blue",
  "magenta",
  "cyan",
  "white",
  "brightBlack",
  "brightRed",
  "brightGreen",
  "brightYellow",
  "brightBlue",
  "brightMagenta",
  "brightCyan",
  "brightWhite"
];
var decorations = {
  1: "bold",
  2: "dim",
  3: "italic",
  4: "underline",
  7: "reverse",
  9: "strikethrough"
};
function findSequence(value2, position2) {
  const nextEscape = value2.indexOf("\x1B", position2);
  if (nextEscape !== -1) {
    if (value2[nextEscape + 1] === "[") {
      const nextClose = value2.indexOf("m", nextEscape);
      return {
        sequence: value2.substring(nextEscape + 2, nextClose).split(";"),
        startPosition: nextEscape,
        position: nextClose + 1
      };
    }
  }
  return {
    position: value2.length
  };
}
function parseColor(sequence) {
  const colorMode = sequence.shift();
  if (colorMode === "2") {
    const rgb2 = sequence.splice(0, 3).map((x) => Number.parseInt(x));
    if (rgb2.length !== 3 || rgb2.some((x) => Number.isNaN(x)))
      return;
    return {
      type: "rgb",
      rgb: rgb2
    };
  } else if (colorMode === "5") {
    const index2 = sequence.shift();
    if (index2) {
      return { type: "table", index: Number(index2) };
    }
  }
}
function parseSequence(sequence) {
  const commands = [];
  while (sequence.length > 0) {
    const code = sequence.shift();
    if (!code)
      continue;
    const codeInt = Number.parseInt(code);
    if (Number.isNaN(codeInt))
      continue;
    if (codeInt === 0) {
      commands.push({ type: "resetAll" });
    } else if (codeInt <= 9) {
      const decoration = decorations[codeInt];
      if (decoration) {
        commands.push({
          type: "setDecoration",
          value: decorations[codeInt]
        });
      }
    } else if (codeInt <= 29) {
      const decoration = decorations[codeInt - 20];
      if (decoration) {
        commands.push({
          type: "resetDecoration",
          value: decoration
        });
      }
    } else if (codeInt <= 37) {
      commands.push({
        type: "setForegroundColor",
        value: { type: "named", name: namedColors[codeInt - 30] }
      });
    } else if (codeInt === 38) {
      const color = parseColor(sequence);
      if (color) {
        commands.push({
          type: "setForegroundColor",
          value: color
        });
      }
    } else if (codeInt === 39) {
      commands.push({
        type: "resetForegroundColor"
      });
    } else if (codeInt <= 47) {
      commands.push({
        type: "setBackgroundColor",
        value: { type: "named", name: namedColors[codeInt - 40] }
      });
    } else if (codeInt === 48) {
      const color = parseColor(sequence);
      if (color) {
        commands.push({
          type: "setBackgroundColor",
          value: color
        });
      }
    } else if (codeInt === 49) {
      commands.push({
        type: "resetBackgroundColor"
      });
    } else if (codeInt >= 90 && codeInt <= 97) {
      commands.push({
        type: "setForegroundColor",
        value: { type: "named", name: namedColors[codeInt - 90 + 8] }
      });
    } else if (codeInt >= 100 && codeInt <= 107) {
      commands.push({
        type: "setBackgroundColor",
        value: { type: "named", name: namedColors[codeInt - 100 + 8] }
      });
    }
  }
  return commands;
}
function createAnsiSequenceParser() {
  let foreground = null;
  let background = null;
  let decorations2 = /* @__PURE__ */ new Set();
  return {
    parse(value2) {
      const tokens = [];
      let position2 = 0;
      do {
        const findResult = findSequence(value2, position2);
        const text = findResult.sequence ? value2.substring(position2, findResult.startPosition) : value2.substring(position2);
        if (text.length > 0) {
          tokens.push({
            value: text,
            foreground,
            background,
            decorations: new Set(decorations2)
          });
        }
        if (findResult.sequence) {
          const commands = parseSequence(findResult.sequence);
          for (const styleToken of commands) {
            if (styleToken.type === "resetAll") {
              foreground = null;
              background = null;
              decorations2.clear();
            } else if (styleToken.type === "resetForegroundColor") {
              foreground = null;
            } else if (styleToken.type === "resetBackgroundColor") {
              background = null;
            } else if (styleToken.type === "resetDecoration") {
              decorations2.delete(styleToken.value);
            }
          }
          for (const styleToken of commands) {
            if (styleToken.type === "setForegroundColor") {
              foreground = styleToken.value;
            } else if (styleToken.type === "setBackgroundColor") {
              background = styleToken.value;
            } else if (styleToken.type === "setDecoration") {
              decorations2.add(styleToken.value);
            }
          }
        }
        position2 = findResult.position;
      } while (position2 < value2.length);
      return tokens;
    }
  };
}
var defaultNamedColorsMap = {
  black: "#000000",
  red: "#bb0000",
  green: "#00bb00",
  yellow: "#bbbb00",
  blue: "#0000bb",
  magenta: "#ff00ff",
  cyan: "#00bbbb",
  white: "#eeeeee",
  brightBlack: "#555555",
  brightRed: "#ff5555",
  brightGreen: "#00ff00",
  brightYellow: "#ffff55",
  brightBlue: "#5555ff",
  brightMagenta: "#ff55ff",
  brightCyan: "#55ffff",
  brightWhite: "#ffffff"
};
function createColorPalette(namedColorsMap = defaultNamedColorsMap) {
  function namedColor(name) {
    return namedColorsMap[name];
  }
  function rgbColor(rgb2) {
    return `#${rgb2.map((x) => Math.max(0, Math.min(x, 255)).toString(16).padStart(2, "0")).join("")}`;
  }
  let colorTable;
  function getColorTable() {
    if (colorTable) {
      return colorTable;
    }
    colorTable = [];
    for (let i2 = 0; i2 < namedColors.length; i2++) {
      colorTable.push(namedColor(namedColors[i2]));
    }
    let levels = [0, 95, 135, 175, 215, 255];
    for (let r = 0; r < 6; r++) {
      for (let g = 0; g < 6; g++) {
        for (let b = 0; b < 6; b++) {
          colorTable.push(rgbColor([levels[r], levels[g], levels[b]]));
        }
      }
    }
    let level = 8;
    for (let i2 = 0; i2 < 24; i2++, level += 10) {
      colorTable.push(rgbColor([level, level, level]));
    }
    return colorTable;
  }
  function tableColor(index2) {
    return getColorTable()[index2];
  }
  function value2(color) {
    switch (color.type) {
      case "named":
        return namedColor(color.name);
      case "rgb":
        return rgbColor(color.rgb);
      case "table":
        return tableColor(color.index);
    }
  }
  return {
    value: value2
  };
}
function tokenizeAnsiWithTheme(theme, fileContents) {
  const lines = fileContents.split(/\r?\n/);
  const colorPalette = createColorPalette(
    Object.fromEntries(
      namedColors.map((name) => [
        name,
        theme.colors[`terminal.ansi${name[0].toUpperCase()}${name.substring(1)}`]
      ])
    )
  );
  const parser2 = createAnsiSequenceParser();
  return lines.map(
    (line) => parser2.parse(line).map((token) => {
      let color;
      if (token.decorations.has("reverse")) {
        color = token.background ? colorPalette.value(token.background) : theme.bg;
      } else {
        color = token.foreground ? colorPalette.value(token.foreground) : theme.fg;
      }
      if (token.decorations.has("dim")) {
        color = dimColor(color);
      }
      let fontStyle = FontStyle.None;
      if (token.decorations.has("bold")) {
        fontStyle |= FontStyle.Bold;
      }
      if (token.decorations.has("italic")) {
        fontStyle |= FontStyle.Italic;
      }
      if (token.decorations.has("underline")) {
        fontStyle |= FontStyle.Underline;
      }
      return {
        content: token.value,
        color,
        fontStyle
      };
    })
  );
}
function dimColor(color) {
  const hexMatch = color.match(/#([0-9a-f]{3})([0-9a-f]{3})?([0-9a-f]{2})?/);
  if (hexMatch) {
    if (hexMatch[3]) {
      const alpha = Math.round(Number.parseInt(hexMatch[3], 16) / 2).toString(16).padStart(2, "0");
      return `#${hexMatch[1]}${hexMatch[2]}${alpha}`;
    } else if (hexMatch[2]) {
      return `#${hexMatch[1]}${hexMatch[2]}80`;
    } else {
      return `#${Array.from(hexMatch[1]).map((x) => `${x}${x}`).join("")}80`;
    }
  }
  const cssVarMatch = color.match(/var\((--shiki-color-ansi-[\w-]+)\)/);
  if (cssVarMatch) {
    return `var(${cssVarMatch[1]}-dim)`;
  }
  return color;
}
const defaultElements = {
  pre({ className, style, children }) {
    return `<pre class="${className}" style="${style}" tabindex="0">${children}</pre>`;
  },
  code({ children }) {
    return `<code>${children}</code>`;
  },
  line({ className, children }) {
    return `<span class="${className}">${children}</span>`;
  },
  token({ style, children }) {
    return `<span style="${style}">${children}</span>`;
  }
};
function renderToHtml(lines, options = {}) {
  const bg = options.bg || "#fff";
  const optionsByLineNumber = groupBy(options.lineOptions ?? [], (option) => option.line);
  const userElements = options.elements || {};
  function h2(type2 = "", props = {}, children) {
    const element = userElements[type2] || defaultElements[type2];
    if (element) {
      children = children.filter(Boolean);
      return element({
        ...props,
        children: type2 === "code" ? children.join("\n") : children.join("")
      });
    }
    return "";
  }
  return h2(
    "pre",
    { className: "shiki " + (options.themeName || ""), style: `background-color: ${bg}` },
    [
      options.langId ? `<div class="language-id">${options.langId}</div>` : "",
      h2(
        "code",
        {},
        lines.map((line, index2) => {
          const lineNumber = index2 + 1;
          const lineOptions = optionsByLineNumber.get(lineNumber) ?? [];
          const lineClasses = getLineClasses(lineOptions).join(" ");
          return h2(
            "line",
            {
              className: lineClasses,
              lines,
              line,
              index: index2
            },
            line.map((token, index22) => {
              const cssDeclarations = [`color: ${token.color || options.fg}`];
              if (token.fontStyle & FontStyle.Italic) {
                cssDeclarations.push("font-style: italic");
              }
              if (token.fontStyle & FontStyle.Bold) {
                cssDeclarations.push("font-weight: bold");
              }
              if (token.fontStyle & FontStyle.Underline) {
                cssDeclarations.push("text-decoration: underline");
              }
              return h2(
                "token",
                {
                  style: cssDeclarations.join("; "),
                  tokens: line,
                  token,
                  index: index22
                },
                [escapeHtml(token.content)]
              );
            })
          );
        })
      )
    ]
  );
}
const htmlEscapes = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
function escapeHtml(html) {
  return html.replace(/[&<>"']/g, (chr) => htmlEscapes[chr]);
}
function getLineClasses(lineOptions) {
  const lineClasses = /* @__PURE__ */ new Set(["line"]);
  for (const lineOption of lineOptions) {
    for (const lineClass of lineOption.classes ?? []) {
      lineClasses.add(lineClass);
    }
  }
  return Array.from(lineClasses);
}
class Registry extends mainExports.Registry {
  constructor(_resolver) {
    super(_resolver);
    this._resolver = _resolver;
    this.themesPath = "themes/";
    this._resolvedThemes = {};
    this._resolvedGrammars = {};
    this._langGraph = /* @__PURE__ */ new Map();
    this._langMap = languages.reduce((acc, lang) => {
      acc[lang.id] = lang;
      return acc;
    }, {});
  }
  getTheme(theme) {
    if (typeof theme === "string") {
      return this._resolvedThemes[theme];
    } else {
      return theme;
    }
  }
  async loadTheme(theme) {
    if (typeof theme === "string") {
      if (!this._resolvedThemes[theme]) {
        this._resolvedThemes[theme] = await fetchTheme(`${this.themesPath}${theme}.json`);
      }
      return this._resolvedThemes[theme];
    } else {
      theme = toShikiTheme(theme);
      if (theme.name) {
        this._resolvedThemes[theme.name] = theme;
      }
      return theme;
    }
  }
  async loadThemes(themes2) {
    return await Promise.all(themes2.map((theme) => this.loadTheme(theme)));
  }
  getLoadedThemes() {
    return Object.keys(this._resolvedThemes);
  }
  getGrammar(name) {
    return this._resolvedGrammars[name];
  }
  async loadLanguage(lang) {
    var _a;
    const embeddedLanguages = (_a = lang.embeddedLangs) == null ? void 0 : _a.reduce(async (acc, l, idx) => {
      if (!this.getLoadedLanguages().includes(l) && this._resolver.getLangRegistration(l)) {
        await this._resolver.loadGrammar(this._resolver.getLangRegistration(l).scopeName);
        acc[this._resolver.getLangRegistration(l).scopeName] = idx + 2;
        return acc;
      }
    }, {});
    const grammarConfig = {
      embeddedLanguages,
      balancedBracketSelectors: lang.balancedBracketSelectors || ["*"],
      unbalancedBracketSelectors: lang.unbalancedBracketSelectors || []
    };
    const g = await this.loadGrammarWithConfiguration(lang.scopeName, 1, grammarConfig);
    this._resolvedGrammars[lang.id] = g;
    if (lang.aliases) {
      lang.aliases.forEach((la) => {
        this._resolvedGrammars[la] = g;
      });
    }
  }
  async loadLanguages(langs) {
    for (const lang of langs) {
      this.resolveEmbeddedLanguages(lang);
    }
    const langsGraphArray = Array.from(this._langGraph.values());
    for (const lang of langsGraphArray) {
      this._resolver.addLanguage(lang);
    }
    for (const lang of langsGraphArray) {
      await this.loadLanguage(lang);
    }
  }
  getLoadedLanguages() {
    return Object.keys(this._resolvedGrammars);
  }
  resolveEmbeddedLanguages(lang) {
    if (!this._langGraph.has(lang.id)) {
      this._langGraph.set(lang.id, lang);
    }
    if (lang.embeddedLangs) {
      for (const embeddedLang of lang.embeddedLangs) {
        this._langGraph.set(embeddedLang, this._langMap[embeddedLang]);
      }
    }
  }
}
function resolveLang(lang) {
  return typeof lang === "string" ? languages.find((l) => {
    var _a;
    return l.id === lang || ((_a = l.aliases) == null ? void 0 : _a.includes(lang));
  }) : lang;
}
function resolveOptions(options) {
  var _a;
  let _languages = languages;
  let _themes = options.themes || [];
  let _wasmPath = ((_a = options.paths) == null ? void 0 : _a.wasm) ? options.paths.wasm.endsWith("/") ? options.paths.wasm : options.paths.wasm + "/" : WASM_PATH;
  if (options.langs) {
    _languages = options.langs.map(resolveLang);
  }
  if (options.theme) {
    _themes.unshift(options.theme);
  }
  if (!_themes.length) {
    _themes = ["nord"];
  }
  return { _languages, _themes, _wasmPath };
}
function generateDefaultColorReplacements() {
  const replacements = {
    "#000001": "var(--shiki-color-text)",
    "#000002": "var(--shiki-color-background)",
    "#000004": "var(--shiki-token-constant)",
    "#000005": "var(--shiki-token-string)",
    "#000006": "var(--shiki-token-comment)",
    "#000007": "var(--shiki-token-keyword)",
    "#000008": "var(--shiki-token-parameter)",
    "#000009": "var(--shiki-token-function)",
    "#000010": "var(--shiki-token-string-expression)",
    "#000011": "var(--shiki-token-punctuation)",
    "#000012": "var(--shiki-token-link)"
  };
  for (let i2 = 0; i2 < namedColors.length; i2++) {
    const code = `#A${i2.toString().padStart(5, "0")}`;
    const colorNameKebab = namedColors[i2].replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
    replacements[code] = `var(--shiki-color-ansi-${colorNameKebab})`;
  }
  return replacements;
}
async function getHighlighter(options) {
  var _a, _b;
  const { _languages, _themes, _wasmPath } = resolveOptions(options);
  const _resolver = new Resolver(getOniguruma(_wasmPath), "vscode-oniguruma");
  const _registry = new Registry(_resolver);
  if ((_a = options.paths) == null ? void 0 : _a.themes) {
    _registry.themesPath = options.paths.themes.endsWith("/") ? options.paths.themes : options.paths.themes + "/";
  }
  if ((_b = options.paths) == null ? void 0 : _b.languages) {
    _resolver.languagesPath = options.paths.languages.endsWith("/") ? options.paths.languages : options.paths.languages + "/";
  }
  const themes2 = await _registry.loadThemes(_themes);
  const _defaultTheme = themes2[0];
  let _currentTheme;
  await _registry.loadLanguages(_languages);
  let COLOR_REPLACEMENTS = generateDefaultColorReplacements();
  function setColorReplacements(map2) {
    COLOR_REPLACEMENTS = map2;
  }
  function fixCssVariablesTheme(theme, colorMap) {
    theme.bg = COLOR_REPLACEMENTS[theme.bg] || theme.bg;
    theme.fg = COLOR_REPLACEMENTS[theme.fg] || theme.fg;
    Object.entries(theme.colors).forEach(([key, value2]) => {
      theme.colors[key] = COLOR_REPLACEMENTS[value2] || value2;
    });
    colorMap.forEach((val, i2) => {
      colorMap[i2] = COLOR_REPLACEMENTS[val] || val;
    });
  }
  function getTheme(theme) {
    const _theme = theme ? _registry.getTheme(theme) : _defaultTheme;
    if (!_theme) {
      throw Error(`No theme registration for ${theme}`);
    }
    if (!_currentTheme || _currentTheme.name !== _theme.name) {
      _registry.setTheme(_theme);
      _currentTheme = _theme;
    }
    const _colorMap = _registry.getColorMap();
    if (_theme.type === "css") {
      fixCssVariablesTheme(_theme, _colorMap);
    }
    return { _theme, _colorMap };
  }
  function getGrammar(lang) {
    const _grammar = _registry.getGrammar(lang);
    if (!_grammar) {
      throw Error(`No language registration for ${lang}`);
    }
    return { _grammar };
  }
  function codeToThemedTokens(code, lang = "text", theme, options2 = { includeExplanation: true }) {
    if (isPlaintext(lang)) {
      const lines = code.split(/\r\n|\r|\n/);
      return [...lines.map((line) => [{ content: line }])];
    }
    const { _grammar } = getGrammar(lang);
    const { _theme, _colorMap } = getTheme(theme);
    return tokenizeWithTheme(_theme, _colorMap, code, _grammar, options2);
  }
  function ansiToThemedTokens(ansi, theme) {
    const { _theme } = getTheme(theme);
    return tokenizeAnsiWithTheme(_theme, ansi);
  }
  function codeToHtml(code, arg1 = "text", arg2) {
    let options2;
    if (typeof arg1 === "object") {
      options2 = arg1;
    } else {
      options2 = {
        lang: arg1,
        theme: arg2
      };
    }
    const tokens = codeToThemedTokens(code, options2.lang, options2.theme, {
      includeExplanation: false
    });
    const { _theme } = getTheme(options2.theme);
    return renderToHtml(tokens, {
      fg: _theme.fg,
      bg: _theme.bg,
      lineOptions: options2 == null ? void 0 : options2.lineOptions,
      themeName: _theme.name
    });
  }
  function ansiToHtml(ansi, options2) {
    const tokens = ansiToThemedTokens(ansi, options2 == null ? void 0 : options2.theme);
    const { _theme } = getTheme(options2 == null ? void 0 : options2.theme);
    return renderToHtml(tokens, {
      fg: _theme.fg,
      bg: _theme.bg,
      lineOptions: options2 == null ? void 0 : options2.lineOptions,
      themeName: _theme.name
    });
  }
  async function loadTheme(theme) {
    await _registry.loadTheme(theme);
  }
  async function loadLanguage(lang) {
    const _lang = resolveLang(lang);
    _resolver.addLanguage(_lang);
    await _registry.loadLanguage(_lang);
  }
  function getLoadedThemes() {
    return _registry.getLoadedThemes();
  }
  function getLoadedLanguages() {
    return _registry.getLoadedLanguages();
  }
  function getBackgroundColor(theme) {
    const { _theme } = getTheme(theme);
    return _theme.bg;
  }
  function getForegroundColor(theme) {
    const { _theme } = getTheme(theme);
    return _theme.fg;
  }
  return {
    codeToThemedTokens,
    codeToHtml,
    ansiToThemedTokens,
    ansiToHtml,
    getTheme: (theme) => {
      return getTheme(theme)._theme;
    },
    loadTheme,
    loadLanguage,
    getBackgroundColor,
    getForegroundColor,
    getLoadedThemes,
    getLoadedLanguages,
    setColorReplacements
  };
}
function isPlaintext(lang) {
  return !lang || ["plaintext", "txt", "text"].includes(lang);
}
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "App",
  setup(__props) {
    const emitters2 = inject("emitters");
    const leftDrawerOpen = ref(false);
    const rightDrawerOpen = ref(false);
    function toggleLeftDrawer() {
      leftDrawerOpen.value = !leftDrawerOpen.value;
    }
    function toggleRightDrawer() {
      rightDrawerOpen.value = !rightDrawerOpen.value;
    }
    function refresh() {
      emitters2 == null ? void 0 : emitters2.refreshFrontend();
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(QLayout, { view: "hHh lpR fFf" }, {
        default: withCtx(() => [
          createVNode(QHeader, {
            elevated: "",
            class: "bg-primary text-white",
            "height-hint": "98"
          }, {
            default: withCtx(() => [
              createVNode(QToolbar, null, {
                default: withCtx(() => [
                  createVNode(QBtn, {
                    dense: "",
                    flat: "",
                    round: "",
                    icon: "menu",
                    onClick: toggleLeftDrawer
                  }),
                  createVNode(QToolbarTitle, null, {
                    default: withCtx(() => [
                      createVNode(QAvatar, null, {
                        default: withCtx(() => [
                          createVNode(QImg, {
                            src: _imports_0,
                            "img-class": "logo-image"
                          })
                        ]),
                        _: 1
                      }),
                      createTextVNode(" TsErr Problems View ")
                    ]),
                    _: 1
                  }),
                  createVNode(QBtn, {
                    dense: "",
                    flat: "",
                    round: "",
                    icon: "refresh",
                    onClick: refresh
                  }),
                  createVNode(QBtn, {
                    dense: "",
                    flat: "",
                    round: "",
                    icon: "menu",
                    onClick: toggleRightDrawer
                  })
                ]),
                _: 1
              })
            ]),
            _: 1
          }),
          createVNode(QDrawer, {
            "show-if-above": "",
            modelValue: leftDrawerOpen.value,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => leftDrawerOpen.value = $event),
            side: "left",
            bordered: ""
          }, {
            default: withCtx(() => [
              createVNode(QSelect, {
                modelValue: unref(appState).shikiTheme,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => unref(appState).shikiTheme = $event),
                options: unref(themes)
              }, null, 8, ["modelValue", "options"])
            ]),
            _: 1
          }, 8, ["modelValue"]),
          createVNode(QDrawer, {
            modelValue: rightDrawerOpen.value,
            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => rightDrawerOpen.value = $event),
            side: "right",
            bordered: "",
            width: 500
          }, {
            default: withCtx(() => [
              createVNode(_sfc_main$8)
            ]),
            _: 1
          }, 8, ["modelValue"]),
          createVNode(QPageContainer, null, {
            default: withCtx(() => [
              createVNode(AppState)
            ]),
            _: 1
          })
        ]),
        _: 1
      });
    };
  }
});
const App_vue_vue_type_style_index_0_lang = "";
let highlighter = void 0;
getHighlighter({
  theme: "dracula",
  themes
}).then((_highlighter) => {
  highlighter = _highlighter;
  const app = createApp(_sfc_main);
  const emitters2 = startSocket();
  app.use({
    install: (app2) => {
      app2.provide("highlighter", _highlighter);
      app2.provide("emitters", emitters2);
    }
  });
  app.use(Quasar, {
    plugins: {},
    // import Quasar plugins and add here
    config: {
      dark: "auto"
      /*
        brand: {
          // primary: '#e46262',
          // ... or all other brand colors
        },
        notify: {...}, // default set of options for Notify Quasar plugin
        loading: {...}, // default set of options for Loading Quasar plugin
        loadingBar: { ... }, // settings for LoadingBar Quasar plugin
        // ..and many more (check Installation card on each Quasar component/directive/plugin)
      */
    }
  });
  app.mount("#app");
});
